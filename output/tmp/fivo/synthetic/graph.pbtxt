node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "normalize_element/component_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 800
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        tensor_content: "\343CW?\306\226D>\227DO\277\026+\005\277\304\203r\276.\'\246\276\313\'6\276\230\217\024\277\240!\250\277|[H\276\321C`\277\264\317b\2776\010X\277K\220\037\277l\303\315\275\235d\"\277\206\262A\277\005\323S\277\254L\214\277\210\275?\300\272\246\035\300y\365\020\300e\204\370\277\344\242\367\277\260\001\237\277\327}\257\277L\002\201\277\356\036\030\277\326\311&\277\302\211\245>\230P\003\276\327\333\025?\365\252\353>\307X\r?\364\032]?s\364%\277\304\024\250\277\200\016B\277\220\236\030=y\"V\277\355\202\004\277\255\030\235\276$Z\237\277J\353\240\277n%\301\2774\036\023\300\014G\275\277\3066\255\276o\310\215\277\336\212\246\276\014\335\323=.\201\t?\035\021\375>\202qU\277\240\202\256=X\324??j\037\017>\232\277q?` \344=\277\010\272>\200\221\307\275\353\023\020\277\227\326\013\277\320\210\255\277\000\\s\277\026$\221\277\303\255w\277\204Fy\276\210\006\241\277\005]\321\277\214\200\225\277\204W\023\300\324\247C?\362\211!>\222\376m\276C\207\313\276\212\\{\277\225\357\017\277\326\221\231\276\377b2\277\216s\313\277C\220\003\300\343\373@\277z\234\026?\366\221n?\241\265N?g7\335>\030,\007?\247\354\245?\260\257h>\213f\230?\215\021\033@xx\311?RC\201?\003z9?\317o\201>\321F9?\332SR?\017\200[?p\261M=\277J\206?\307\007\002?J!A?L\000\217?\260\242\327>\263\n\016?\300\233\266?2d\366>\360\212\241>,c\310>(\210%\277\344\242\305\275di\221=\037-\213=\360\237\233\274\300\324\005\276?B\315\275w]\253?\004\373\256?\2126~?{\013\211?\233\032\013?\265\307\025?*\375&>\336\023\021? \377`\274\r\343\r\277\367rP?\256?\341\276\306U7\277p\255\224\277u\235L\277\360\254\342\277i\316\251\277u<k\277Xu\265\277\204\035\371\276\000\232\225\277\314B\">\230<t\276\376;\351\277Y-\340\277\250\250\264>4\331\261>~\310\026@3\2268@&\244_@\311\355\367?B\203??Jru?\302!\217?\216\236\225>\304@\362>kJN\277zR\254\277\201\027}\277U<\332\276z\033\215\277n\250\227\277n\006;\277\n`\213\277\220v\352\277p\034\246\275U\321G?\001\003\272>\326(\036\276kQ\273\277v\020\365\276[9\255\276\217,\275>\270\342\250=\234\025\316=\340\035\353\276\220u\202\275\342V1>D[\r?-\235\347>\342\267&?\004D$\276A\214c\277\036\277\222>P>\312?\204\031(@\202\315W@!h)@\316d\020@\370\220\200?\356Op?!\357\217>\006\254S\2774w\243\277|&\262\277\351\316\376\275Z\264\265\276|\300\307\276\"\3317\276|\377\201\276\222\\#?\276\355\303?\244X\026@S\034\244?\234(\310>@\314W=\327\341-?\030cS?\006\273H?\370\361\215?0\363h\275\225\235\333\276\246\261\207\277N\004\246\277\016\371\324\277\000\320\243:\006\261V?\300\273\036@\317B\034@\026\031z\277\202\253\222\277<0\313\276\"Fq\277!\276\207\277\221\022\350\276\027\274S\276\310|:>\235\330\316>\302\203\\?\347d\254?e\307\252?\346\260\272?\304 \300>\255>\257>\322\237^?\271\345\001\277\2764p\277\002\336\373\276\357\001\345\276]\243\257>d \223=\036\223\226\276$\302\257\275\005\361\301?\270;\333>\336\326\005?\\\035\254\275\330>\234?\274\320\204?\252\370\216?\327\177\262?%\374=?j\250\213>\360!@\277\236\302d\277GT\'\277W\261\002\277\007\017\330\276VI)?t\365\002?\274\326\017?\305\266\214>%\235\003\276\340\335\206\277q\332\032\277m_\204\277Dr\203\277\254\327\242?\036\312\031?\342\333\216?\274f\370?\264\204\220>\200\274N>\017\317\221\2766X\212>\310\027\202>\321a\235\2777D\326\277\020\304\312\277T\367\377\277\207k\320\277;a\330\277\024\246\177\277\230\016\275\276\027\0219\277\245^\'\277h\356\307>\205\225\020>8\335\014\277\034\000f\277\372cD\277Lp\260\277\375\257\000\300\333g\301\277\\R\202\277\370\014\237=\361.@?\034\021Z\276\371\032I\277\324\236P\2770\3255\275\346x?\275\256&\226\276H\375\337\277\351\371\030\300\2142\242\277\3043\333\277\302\247\252\277\350\356>?\247\347/@\017K\007@\352\306\345?.\334C?\206P\313>c\236\314>\243\251\036@\355\036$@3\254\323?\031\2472?\300\271\362>\212\205j>\205\033\224\277\256|\205\276z\262\313\277n\013P\277\305\243\024\277*\343\234\277\227;q\277\000O\302;\215\200r\276\255\353\223\275\212\217D=\036\020\270\276\204\037\221\277\225\312\034\277\335\213\237>\330B\252>\304\021\373\275\203\301\240\277r\'\265\276\272\303\261\277Q\323\343\277\230\013\355\277\n\026\022\300<]!\300xU1\276\362\322G\277\306O\244\277\273\364\205\277G\004u\277\230,\271\275;\252\233>\254i9>\204\303\027>*~l?\224\347z?\000\246\027?\326\003\306>\344\325\267>@\304e?\316\003\236\277\034fA>^\370\024?\206\022-\275\307o\014\276\322$\224>\254*N\275\225\337\177\277\302\366\032\277\024M\301?0\250\233?l\200\004@\274\300\260> \252\031\277G\020,\277e\226\005\277,!u\2778p,>\317\366{?M\256\031@M\033\023@\244V8@=\210\236?\021\362\234?Hy\222?\303\027\237?n\366\315?/\241\227>\033\351\244\277^>\253\277\220\003\215\277\362e\005\277\3408\033\275\030\322^>\346\n\005\277\230x\205\276\366a\273>T\306\277\275\217\022\241\276\334\216\206\277\241\363\325\276\210\013\336\275?\3771\277\321\022\216\277#\261\224\277\342\222\221\276\325\253g\277\351\rm\277\037\373\200\277\366\253\304\276\372o\251\277\'c\355\276L\273)?`\376\230<\3357\266=\" &\277\366\027\265\276\224\207\206\2774\314|\277\304\273O\277\020\247\253=}\357\316\276\267\265\255\276\362{\234\276\235\r\250>Q\033s>A\234\210>?\010\254>\272~\025\277\000\225m\273\021\331\243\276ee\314\276\264\230W\276\2306\234\277\316&\277\277\367\204\262>\342\377$?\002\032\263>\250\'#=\214=\204?0\253\322?\224>\201?\305\254\221?@\016\261>TM\005?\330\267\246>\214\223\363=\260E\303>\302\312\036?xu\217>\002M\222?*\020\035@jr\365?l\035 @\205\201\030@OG\331?\215\272\242?\375\324\274?\000\251\203\273\203\220\271?\036\374\241?\320\231\003\276\\\314\327\276n\027\037\277\031\222\273\2760_\277=\030Y\243?\031\256\223?\224\206\267\276.\261\233>\330hh>\275\320\261>\364\236v?\003\324N?\254\201\226\276\355`\211\277\261,\017\300\374|\300\277X)\322>\3311\317?%P\260?\312\001\237?\254\tv?\251\226x\276\013\352\205?\240^y= \1779>q\013\032\277\261\032\314>\267\300V?\213M>?\256\003\003?P\230\005?R\203O?\200Z\350=\345\031\223?\206\025\303?\373\362\260?\320\252\030@\251)\003@\024)#@`\373Q\276\310*O\2772\304I\277n\033~\277\255j\007\300]\220\002\3008`H\276$!&?`\331v?\t\350\020\277\032CN\276\315\321t?\324\374\303?\242/\026@\250\231\265?\0065\300?\334\272\242>\214Oe?\374Wu\276\327\266\207?\212w\021?x\357x\277\316?\204\277\026\234s\277\277\007U\277X*\314\277\301\204\010\300X\354\240\277\330\n\"\277\220\020\241=9w\331?d(\207?p\201\217?\215\036\360>\010\"\201=\246\t^?\000\373\035\277\nB<?\326\n5> \223^<t\033\316\2751\242\333=(\336}?\360\034\377?N:\363?\347\267\312?\326e\362?,C\333?\354\224)@\232^\227?vE\202?\324\031\271?x\023d?i\2661?q6\261>\321\306+? SM\276\330\355\247\277\027\361\241\277 \353\304\276\002\3412\277uVd\277\330\3056\277\204\033\037>\316+\031>\024)\210=\212\3458\277\320$6>i; \277\232S\005\277\336(\223\276\334\217\324\276>E+\277j\251\003\277\036\001\237\277\247n+\277\350\205\255\277\rf\214\277M2\240\276\310\210\263\2775\243\321\277)\206\002\3006\262:\277\0208\313\277J\365\272\277L\262\210\277\374|\250\277\360\337\270\2772V#\277\310~\277>\225\257c? \256\n=[\336\024>^\2536?\001{\324?\366\023\320?W\321\030@\240\223e@\260\344!@\266wE@\231\013o@\360\201\022@\246\236\367\276CH(\2772\327W?\007g\242?\201\347\n@\326\241\020@\2264\020@\300\032F@\216\2621@\223\251\003@S9\252?\020C\341=\300\263\353\276\310~\014\277~j\375\276\256\224d\277\262s\034\277\'\306\256\276\024\363\001?{n\037?T&\306?\"\205\275?\300\342\351\275\263-;\277\000Pg?\216\372\247?\372p\331?\034Pu?J<\001?\265\275\215?\331\263`?\037g\372?\257\205T@C#\323?p\277\324?\341\312\023@\354\312\256?s\316\252?\334*\330?B\205\300?\024Ob?#`\324?\236\037\275?\3121\234>\\^\222\277\364\034?\277\331S\023?\347%\377?\354K\330\276\3264\014>\255L0?w\247\201?\310\337\271>J\364w>;\346\235?Zw\221>[y8\276\330a\225>)\327\260>@W\036\2753\321\213\277\006\n\263\277\237c\006\277\200^\'\277\332?\376\276\0230\352\277L6K\277P\246\243=\326\242\235?\031V\005@\035\267\274?Z\315\336?\004L@?\020\264\033\276\250\352\201<\355\347\006\277\2261.>\356\021G?&7\210?\354\342i?J\356C?f\362L?=\327\216?\211\241\326>\217?\005\277w4\215\276\022Y\216\277\207\225\035\277\210\237\227=\345\272\354\276\212\027\t?t\304&\277\224$\030>\215\333\247?\254Mk?\353\352V?\323\272\375\276w\235w\277]Z\265\276\236\';\276\334\301\314\276\320S\207\277=\345\247\277T=\"\3002(\010\300\035\023a\277\270\320\271\277\300{\343\277\030&\323\277\257-P\277\240[*\275\303\263\344>\371\364X\277<\237\204\276$N\263=\266\321\025>\025T\226?\204\"->\202R8\277\272\362\261\277\'\253\266\276\361\340m\276\223c\265\2768UG\277\302\343f\277\023e\005\277\267\361\226\277\000\324\341\277So\201\277\347\267\020\300\032\363\232\277u\221\002\300\364\315\206\276c!.>\224YS\277P3N>\032\311\007?\022\3157?8\334\206=\016\270\346>\3350\265>\354\335G?@\267T=\302\001\347\276\222\022X?\353X\207?\352\310\230?\371F\213?\342o\216?\354\004\000@#\022\r@9\n|?\244t\225?\272\033\212>R\3439\276\321Oj?\"\343b?n\270\035@\002\035a@f\312\205@\201$X@\230\225\341?El\007@\360\033\327=^8\337=+U\026>+v\342>\370\304\316>\205\317\034>B\034\206\276FN\241=\005\316\346\276\215\220\357>f\006J?t\013m?\203\304Y?@\336x\276\261\014\224\277\376\257\203\277`\303\214\277\272\353\013\300D_3\300\312\211 \300&3\005\300\300\301\222\277\004!X\277\3343}>\260\2369?H\254\344>r\021=?\333H\306?\214\034\336?\330\226\001>/z\225=\t8\021\2766\006B\277\200\006r\277\376\370q\277\204H\203\277\304>\020\276\254,r\277\003\260\252\276<\256x\277P\320;\276\"\276\253?W:\234?\250\203\242?\303\036\020?-&\226\276\330\205\230\275&\211\027\276\017\373\226\277\250 >\277z\002\240\277L\313\250\277\301\035\246\277\277\325_?6\233f\2770\032A\277\310\024\233>h\361\n=\340\203V>\273bV?\032\nO?\252\224>?\336\237\274?\251\202\256?\314\325b>>Bq=\317z\217\2776\204\374\276\247\266\274\277\226\3034\277\000Xy:[\316\355\275JM\305>\017\272\"?~\352\261?\"\225/?\034\276\256>\027\373.?\250\022\332?p2\333?\366c\235?\341g\024@@\226\n@\022\0367@j\203\366?D2\005@\322\010\231?\252x\307?<2U?}\214,?(\234J>\345a\267>\351\372/?k\225\212>YT0?\267\2141?\260\347\260>\217\211(?\200\363\"\275\376\215i?\274:\033?S\277\372\277\370\016\212\276\200Q^\276*\352\364=\035v\211\276X\247Y\276\340\347\035\277(}y\277\004\377\005\276 \n!\277&\250\230\277\312C\217\276\337\036n?Z\316{?\224\245|?\363\357$?W<$\2772\343v\277^\210\206\277\033\021\030?\346\235\271\276 \224*<\017\366\251?@\027\217=\002\232+>\315\274\024?\252\033K>\315\242\013?p\013B\275\363b\317?<t\035@\240z+@\032z\r@[\272\346?\242h\013@\324\216\354?\301e8?\t\r\211?\315\315\n@\016\203\274?\240Y\324?\201\215\255?x\024I?\027l]?>q\212?l\314T?\376\276l>\372x\303>t\024S\277n\030\243\277\020\214K\277 ]\263<ci)?\236\253\217?2m0?\020\251\214=6[\267\275\021b\324=\2063\260>\010{)\277\356\2722?$ \007\276\342\007Y>\n\373\237>\260\214\037=/\344|?\205\354\362>\014e\266?\273E\212?\336\206\016?IP\373\276\256m\253?\231\375\2239\201\354p=\2167L>z\360\212?\342\363\027?p9&>1k\370?\363\214\213?\267\214$?\254\214b>\365\215\332>\031\3754?\3061\321?\351\231j?N\013\034?Q\262\327?\244\255\266?^=\347>p\350;?\020\364\206=Lx\265>\337\001t?\000\225n?\250EW\276\363\231\313?\242\236\005@\304\356=?\350Q*?\016~\330\276\333M\264\277\315\004\223\277d^\317\276\2304\022\2771\320\003?5\343+?L\026\311\276\31438?\340\025\231?\342k\316>):+?\314\347\202>\322\312\227?\200k\345>\350=`?\306\345\267?t\007\261?8\353\010@\202e\206?-k\307\273\350\374\210\277\267\033\206\2775\002K\277\301\033\216\276\274U\243>K1x>\026\250\271>@\023\232?\014\030\353>\000\020j\2731\254Y\276\224\025\211?\276`\245>\320\215X\277n\267\250\277\256\323\301\277\210\371\017\276`\205\n\277`\243\013=\246G1\277\306\317\226?|?@?@)\312?\305\337\030\277x\200\202\276v\375/?BgC>\263`r\276P^p\277\2603<\275H%\320>h>\273\275nz\204\277\334\252\004>\346\336\201=\377\241\227>L\352\000?\311\017G?\237*\003?]\310\313\276\000\016\022\300\0101?\3008\2545\300`\010\001\300@\370\271\277\252\240\223\276\004:\014\277I\370\251?\3168\n@\035I\261?\006l @\336C\206?H\036\207?\216p\331?*[\013@\022\005W@r\306H@\356\225\312?<G4?P,\240\276^\230\263\277\270\355\270\277\345\317\026\300,\333\003\300\213(\017\300\362\230\336\277\270\257\221\276&\267#?\276\006\031>x/\026\277M\n\234?\253\232\307=\276\032\212?pY\314?\002\301\354?N\347\241?Q\221\301?4r\243?\222\332\013@\227~\315?\n\341\253>\306\325\203>+\240\001\276\315\362\327>P\001\243>\356\375\334?\354\003\217?\036\330X?\332\177\357>\354\316\225?\177\220\261?K\224)@\264\206=@_E\201?\007\317\n?G\204X\275\006\323\351\277&\333\024\300\nW\331\277\240\200\001\300\213B\363\277\252\031\216\277\324Qy>\314?8\2778\265\257\277\300\272\213\274@5\t\277\234\002\006?6\271\031\276\003\272\246\276\250&\267\276\000s\037\275%\325F\277\222?Z\277zp\000\3001\370*\300\276\2038\277\337c(\277\235\211\034\2772\305o\277\310\361\341\276KX)\277\243\342\'\277N\271 \277\244\375\374\275R&7?\034\034\005@\311\270\232?4\345\211>\221\371M\277Wc\301\276\351\322/\277F\275 \277\000t\344;\276\227Q?\t\3212?\\\371\001?\322\207\002?l\251\310>\212\006\215\277\030\261\353\277S\302\010\300\226\021~\277> \266<\330=\326\273m\363\271>\352\026\345\276\206B0?\372\327\024@\002\360\270?n\362\316?\036u\027@I\335 @|:\244?\002p\222?j\256\321?(+\264?\tw\370?\r=p?Z\223\373>\354U\201=\010\324\240\276TR\353=\211;\362=\372\315q\275\337\022\266\276\350\013\260\275\323\264\342\275H\341\271\276D\036\226>pb\260\276@\001\214\277\0366F\277\310v\261\275\252\2315=D\016\251>\372\311Y?\201\303b?\326\316\277?9\027\370?\376\034\376?\246\260\324?\340\261\260>p9`\275\322\341A>x\262\203?X\201\300\275\340\311\260\276\277\314\246\276\314hV?\352g;\277\275\026\314\277\320\310\310\277\307\210\206\277\354\217\235\277f\264\276\277\r\305\017\277=\200\244\277\210g\352\275\311\340\316\276ih\267\276d\026\350\277\000\356\305\277\034F\325\276\334o\243\275,\274\003\276\036\310\"?\213\036\202\277\226\256\367\277\037Y\307\277\250\261:\277*\205!\277OME\277\021\264\230\277\353\244\023\277\244\373M?\350\024\256\275\331,\017\277\234\001\304\277 ~T\276y\017\213?\312\313\002?\036\355\025\277\373\350v\276\312\270\n?w\356^>/\223l\276:\007^\276%\207\316\277}G\336\277\312\361\302\277\3075\030\300\0325\371\277\177\204\276\277\340e\027\276\320\3743\277|\342\026\276J\220=>\214y\006@>\317\031\277\327\026\371\277RG\266\277\026\335\007\300\000\377\251\276\026Sp\276\237\277:\276\314\306\206\276P%\210\276\321\333]\277:\002\003\300\026}(\300\034\302\t\300.\213\010\300\260\311\220\277@%*\277\224\272\311\277\036\203R\277z\004\326>D.\234?\370\005\204?\316\3313\277\020\240o>\013\223:>e\336Y>\344\372^?*@\016?.\252\003\277\244J\227=Rj\026?\022\364\020@\'\337\352?\320\337\340?\363\2641?\232_\"\277$>k>\320SE\274\020\032-\277\200\351\261\276\343\016\225\277\035\036\341\277\200\374\324\277\032\342e\277|6\n\276L\246\035?\250NS?\233\246J?\344\267u>f;\357=\005\032e>\023 g?\262\005\221?\314\335/?@\326\326\274\0052\263>$\300Z\277$\251Z\277\r+e\277\2344\t\277\240\027R\276(\317\303\276\352\022K\277\210~\002\276/\274\351\276\0330(\277\260|\213\277\327(w\277p\334q>Q\344\226?\264\343+?\267\205$\277\364\212\255\2768\311\254\277\014!Y\277(=\332\277\245\304\004\300\365C\301\277$\351\365\277\243\210\013\300\236\002\227\277\024y\351\277b\346\000\300\tp\023\300Zb1\300H\361\243\277\036s\231\277\225y\211\277\220\003/\277\203eT\277\024\271\366\276\216\320\027>\034\236 >uU,\276=\226\000\277\016\267z\277\223A\201\277G\265n\277\234\003\232>\223\2547?\300\350\227\274\214\327\023\276C\251\261=\244\3113\2765\332.\277\233=\207\276\305$\363\276\003{\372\277\364\343\255\277\254\272\227\277^*\365\276B\220s?`N=?*\266\375>\004\033G\276\026\364O\2779W\006?\225\001\364>\340\330\305<\002\311\034>\020n\207?\302\266\231>A\323c?\026}\244\277\214W\316\277\244\210a\277\036\221\005\277\257NN\277\370\345\351\276\"8h\277{Zi\277^\302\261>{ul?<\321V?\200\t\362\275\356\201\002?3\376,?\320R\330?M\022\352?tE\210?(\250\362=1\341g>\nB\254\276m\215\237\277\252l\212\277\305\254c>-\225\007@#2\016@\323\252\005@\222t.@}\366\020@\351|\327?o\301\013@X\246\365>pN\037?Lo\304> \224J>\342\343U?|k\320?\240$9>\213\350\032\277\022\324\366>\212hK\276\347\226/\277\220\310\'\276\254\262\005\277\356\260J\277\350\377\030\277#\365\250\277xmm\277\301\305\271\277\261%n\277\032C\267\277\030V\264\277g\210\211\277*w\310\277\237*\240\277\341\323e\277\342\213\226\277\220\221j\277b\025\033\277\004\n\355\277\017\264\231\277\001\317\233\277Ro\274\277^fi\277\302\240\r\277\214\360\223\277\327\217\022\300\200\005\223\277\2063\341\277\034\335\024\300a\245.\300\350\023\372?\304W\362?\207\031\n@\374\275\022@.\026\243?\013@\003?x\220\223\275s\224\236\277\340t\007=\316;\037\276\250p\235\277<$#>_*\207?L\375\021?*y|\276\310\'\031\277\255\352\236>\212\372\201?P\322\337?\317\330z?\004~\270?\326\336D?\010\345\027?\211\342\320>\177\240\201\276\020\234C\277\232\346I\277\000\361\206\277\213\310\361\277\231>\215\277l\374)\277\332h\303>\266\351\250?f\265\332?\311(\'?&uk?\230\035\315\276:\215\265\276\344\035d>\264\263:?\254\034.?RCi?\007\334P?\004\276\037>\362\020\222?\300h\027>\202\030e>\343\337#?Y\232\355\276\360!\260\274q\276\232\277\300*\220\277^\027v\277\242Q\254>\024\244\376>H-7?\201\247\003?6\233(?\252\'\232?\305\267\366?AS\327?\251#\255?V\211\262?\354\232\334\276\230:%\277f\344Y\277\325A`\277\366\223\337\277\262\2108\277\"\317\236\277\306\021\216\277\003\222a\277\231\307\307?0\365\363?\221u\224?0Z{?\320\rx?\3465\365\276I\340\256>Fq\226=\371\r\363?\344\357\221?\214\236\217>\365D\247?\010\331\372>\316\364:?V\304\247\276\\.\305=\371\315\350>)\314\362?\010\013\206?\274\341\202?\370`\r?\266\206\n?\030<!?\261\237-?\227\2646\277R\003Z\277&|a\277\370<\353\276V\371\253\276A\371\255\277\030\024\003\300\373\243Z\277g\276\"\277\274\241\275>\263\014\007?\352 \302\276 1O?\260^\336?tA\221\276d\225\030?\350\004\250=J<\023\276\350\036\037\277\234;\226>\230o\243\277d\337\220\277\307CU\277\2108\341\275$\'\217?\n\301i?\302\023\202?U\020@?\273\373\304?N\t\224?R\246\325?\357Y\354?\007I\007@L/\\? \316\207\274Y\256D\277\256\243\360\276{\334\004\277\2646\276\276\331\213\261>?\007\317\276\235W\004?\225\263\355>0\213\265=O(q\277H\344P>\367\365K\276\032\3315>7\271~?CY\300?0\262\341=\024\037O?P\233\376>)}\313\276#\365\377>\353\013$>\260{&\277\276\220\205\277\013\241\206\277l]s?\020\200\262?\316\316j?\230\327\301=@M\360;}\212\202\277I~\\\277\000M*<\202\243\005?b\333\242?\030\306\310?\226\021\234?R\245^?\026WB\277\373\337\271\277\330\266F\277PJ\305\277n=\236\276\330\373\302\276\214\"\361\276\376\024\312>\244\361\377>\\\2042\277\334\003\224\2770\215\257>f\305\020\277&\366\374\276\204A|\277\237l\217\277\315\320\227\277\035x\253\277\237\340\265\277\222\377\372\277\214!\325\277p\251\345\277]\271\355\277\200\324\016\277%+K\277\032\336\237\2778P\255\277\000\234\026\300>0\316\277\267\215w\277\355\232\210\277E\005\364\276:#?\277\'\325\365\276\232\223:\2776\275\262\277K\035\036\277\033\367\242?\210\033\010\276\225\006<?a\001\177\277\334K\204\277\220@t\275/\214\256>\362\223\213>\205#!?\312\000\367?<H\200?\305;\035>\203K\215\277\n\311U\277\212\362\352\276\244\315\224\276\356\013H\277=\227\030?\234)A? \345\017>\020\373\025\276\265 \030\276\210\202\301?\342\353\301?L\030\257>\3245\364\275xz\344?F\207\234?c\334!?u\312x?,\200\364\276\352$\003\276\272\003\340>\354\312\241?\276v\221?\224\312#?\311 \226?\231\000\304?aV\316?\006\371R?Z\331C>\355\314\331\276z\031)\277\247\310\002\277*yJ\277N\264K\277\236\177u\276\250\244\020=\315\002V?:Q\332\276\200*\004\277\260A\213\275\024DT>X\310\273\276\236S\202\277\022v4\277\370\351\225>\316+\007\277\303\177\235>\t\036l\277Y\031\336\277G\306\320\277nd3\300\302\226\'\300XIO\300\374\271P\300m\"\020\300D\246I\277\274\255\352\277(\256\314\277`\351\014\276\2316\272=\303\226\326>\301\361\340?\020\234$@|\204\242?pc\324?I\264\215?\277`\224?\030\022\266?1k\354?\206`*@\302\267\335?\3320\252\276`)~<\272{\215\277\340\234\306\277\021\017r\277\003\347\344\276^\253\252\277\266\243\213\277\342\373\311\277\274\345_\277\220!->B4\373\276?\265\211\277\205\\\234\277\270lu\277\220\302\335\277\256\264\342\2771F\251\277\320k[\277\261\251a\277\004l\353\276Bq\232>\362P\222\276\024\023\212\276\020\350#?\326\207\321?@\035\202?$\243\"@~\r\031@s\226\002@\260\337\373>\372B\310\276\\%h\277Oi\357\276*\001@?\366\307 \277\302\307W\277\000\314\256\2727Hh\276\016\317\233>\274\030_>\374\351\226>,\177&?U\355+?\204\326\232=\2169R=\330L2\276\030\262z\276S\253\272\277\236Q\313\277\215\t\310\277-\345\361\277\265\263\243\277\311\341>\277aX-\277T\274\322\276\314\300\006\277\365\257M\277ZA\351\277 \322\242\276\3509,\277:X\210\277ZM\262\277\025I\260\277Ld\243\277$\321\324\277\271\247\345\277O\357\006\300\204y\026\277\034=\324\277\007l\247\277\320\320\003\300Pq\260\277^y\313\277\360\245\326>\217\322\203\276~\025\254\277\342\016\207\276\344\2657\277\312\247N\277\000\316x\274\242!\014?\210D\325\276rGI\276\277\316\013\277\252A\260\277R\352\274\277v\024\346\277\271\252\321\277\360\235\013\277pA\026\276\327\r\001?\327\372\365>\251\017\210\277\020\202\353=\276{\017?~\327\t<\234\305~\276\247?\246\277\020}\314\276\2479\021\277\333\237\206\277\363+j\277\332b\215\277\370PE\277a\277\326\276\272\351\354\277\265\220\271\277\260:\237\275\022Vp\276f|\020\277\tR\205\277\207\\\024\300l7\352\276\370\211v>\016\215\002>\301\311\n?\022\215\272?\214\362\323\276\262\'\220\277\211\310\001<DHk\2772^Q\277X\177\203\277\273y\230?P}>?\264v\220\276\020\035\265\275\232\037\231\277C`$\277\376\255\253\277\200\254P>\304\240\016>\266\336\326?\366\370\023?A.\006?\327O\341>\276\031{>,\253\237>cp1?V\307\353\276I\0131\277\334$\333\277\354\221\233\277\000\330\346\274#\330\250\277\350X\340\277g\0313\300BP\022\300/\335\215\277\020\326\"\277\240\366}\275\335\0276>\327\222\303>\313\352\204\277U\332\213\277\360\216\t\276g;\215>\245\371\207>RB\365\275\313\245\256\2774{\334\276\335\210\322\277j\3629\277^,\032\277\313\223\271\277\177?\320\277\001\032\201\277\376\211%?\214;\216\276,\323t\277\312(\244\277\356\035\246\277\200\177\016\274\375\322\214?\020]\"=\250\200\344=\203}?=\017\327\033?\322\215\251?q.\260?\020\365\014>\362I\373>\000\306\315\274nc\221?B\032\363?|3L@\361\206f@\216\323\372?k\034\370?vTA?\267\251\026?\337\214\253>\022\250\036?\304\242\215\275K\010\343\274|\221\344>\374\030\356>\311ZV>\017f\271>\266\267(?\022\017\343?`\201\227?I\265j?\237\372!?\334\017K?F\345j?s\337\246?\022Y\336?.\022\246?AQ\320?L\254\357?\032X\255?\374\213\336>J\364\274>\354\255R?|\005\351?\004o\035@q\375\321?\241*\316?o\323\226?\315\345U\2776\366\320\277\222\206r\277F\004\264\277\350\271\201\277-@\222\277&\231\r\277\366\020\214\276\261T\227\277\3540\231\276\306\331\227\276\006\006\005\277s\216\303\276\000\212P<\031bb?C\376\016\277\017)\317\2762\316\007?\240s\026\276\203\242\224?\343\261Q?@Q\246=\027\204]\277j\262\232\277\347O\n\277\374\253\214=Y\013\254\276,\216s>U\023b?FQ\244>B\216g\276\263\236I>\360)&\275\361\301\262>\372J\334>\030\206\\\277\354\0349\300\317hS\300\037@\005\300,M\207\27724\313\276\'\247^\277\014\304t\277\002_\020?\221\343\274>|\3023?\242\257\201?\000K\272?\230\372o?MV\007@\2643\314?p\310\357?\342\220\376?2. ?6\301\202>\210R\311\274\306\322\376\276\010\325`\277R\364\216\277\316{5\277\'t\246\277l\2066\277\200\'\367;\372\362\312>O\003\235>\341O]?=\364)?\355\236\350\277\3214\317\277\346\367\336\277\224\256O\277*\375\324\2778F\022\300\030I\356\277]\305\330\277\000p\014\300(\246G\277\344\'\372>\010\016O\276\262\r\001?\256/(?8C\252\276\216\272\244\275\027pf\275\265#a>\304a\270\276\271\2775?V%W>\245\010\'\276\016\262C>Z\305z=\210LS\276\355\360$\277\232l\306>>a\022>\265\364\343>\275FY\277zP\230\277\r\253)\277\366\3430\276\207\023`?A\324\304?\205>A?\210Z<>\244\211\321>\000wW\275\024\001\304\275\312\307\313\276\020Lj\275\264\341=?\370\241k?\300\031\022\276#\244\346\275\322\3226=\372\321\242\274\020C\320>\232\037\341>V\026\032?\346#O?n\274{?\177>\013?\267\036b>\022\021/?\245E[?\334\374\336?]\346O?\376\362\343?Vr/?\330}\301?:\031\364>h\202\255?2o\331?\013ek?ZB\022?\032\243\241?{M\241?\307\200\277?\014l\206?\210\270\366?\306\211l?D~\216?\331\362[?\374\256\213?\226:v?#\370-?\375\205\016\277\357v\265>I\222\017?\247\250\n?\237\034\223\276\036\306\014\300\343\244E\300\360\201\346\277\314@\206\276\232K\255?\214\323;>\307bN?\r\035=?OoC?\346M\177?\207\026@?\236\362%?I\034\020?\013\265\311?\353\331\305?\370\205G?h\3242?eZ>\277\352\241\277\277\246\276\n\277\341\202\254\277\370@\373\276\340,8\277TI\264\276\350nA=\330!V?\2461o?fY\226?\275\375\234?;\322\363?\"b\246?\271\013o?\271\221\322>4C\331>\232\370\355=\336\343\317\276\376o!\277\220D\252>\354>B\276$\203\220>2\177\372>\360G ?\372\244\344\276\220\332\232\277\3222\020\300l\3026\300(\264q\300z\'>\3006,*\300|1b\300xb_\300B\2757\300\001\2533\300\216\306\"\300\354\362\022\300\006\265\r\300\256\211\016\300\217\020\n\300\220\314\375\2777\356\277\277\000w\351\277\235\302\211?|of?\341\2663?\203\225\214?\350\371\026\276%&\020>\312WG\275\242\274\214\276\330\027m\277\356\033\353\277\276\305\"\300\260n \300*\327\314\277XQ\030\277\200\372\000=\315\r.?\340\226\317\274\333\036\243\276a\014\226\276`\030\361\276aC\225>\230\211`?h7\362?l\365\276?\027.;?\316\201h?\352\023\212>\035\325\212>\366\204J?\034\327Z?ew]\277\022#\212\277\235\t\206\27721L\277ve\212\277c\275\217\277\n\315f\277\360\310l?_S,?\355v\251?,\025{?/\303:?@\\\376>^\376b\277\006\277\315\277\366\203\007\3008\024\304\277\235\232\245\277\307\354C?\310\020\212\276\200@\314;X\333$\277\211\330+\277&m\274\276\000^%\275@].?$\363\315?\315\021\'?\0023a>\000\006\254>\256$o>{\027\016?\027Y\306\276B\0345?\264u\"\277\036W^\276\236\341\327\276/[\245>N\217\034\276\217S\037\276\001\025_\277\352Q\360\277\330\010J\276,\224\355\276^u\267\277l\336\224\277u\231\035\300\276+/\277\222Z\224\276\222\256\230=2\036<?\213K\247?aT\245?\304\310O>\304,\331>\340\347+\274\226\177\211\277\213\207\270\277^!\002\300\274\333\020\300\217\220\223\277\333\035\224\277\277\205\233\277H\200\217\277\034\202c\276\350\322z\277\230c6?\212}T>i,t?\217\361\240?\236\253n?Z\300\203?`\006\270>e0\203\276x\275E>*8??\204\370\226\276\332\207x\276\220(\354\274ys\234?\222\307\016?\306L\\?\260NT?,\320\352?Q\223\002@f\275\"@\007\324\014@\205\303\032@al\022@\030\311\371?\033}\355>\026\"\260?a\364\221?K\362\223?\314\366\272>z\225\007?{\360\007?+\177\274>\312X!\277\000\230\031=\207S\210>~2\323>\264{\342?\213i\023@\305\251 @\372\303\013@\312\240\007@\365\222\373?N\210\366?\306\016\024@\311\317\365?\300\217J@=?\032@\362\256\025@\314y\310\277\026;\251\277Y\312\223\277\303\342\200\277?p\203\277\310:\246\275\337O\334?\216\034=?\224$\346>r\010\014\277\232\013W\277\340\217\304\275\356~*\277|\335]>?\344\253>\033\266f?\327\3072?\3026\343>\210!\206?r\230\263?\271\250\260?\030(\371>\227\257\r?d\216\304>\366\306\037\2773\"\372\277\361\321\272\277N\236\230\277m4\203\277\320\273\023\277\030\002\304\276\000K\311\272\261GM?M\251\t@u\226T@Z\235x@\010b6@\223\320\333?\336y\023@\200K&@\016\014\003@\322\244\013@yw\230?n\231\020@#\234$@\3704Y>v\2679?^\220P?O\320\226\273@\242\313>\341\333\357?$F\223?9I\371>-\303`>\220Gd>\213?t?\331\246\206?\027\333D?!\357\342>h\005E?\341e\235?\017\260\373>\300\376\226?|\201m>SS\225?\014Z\210?J\2320?\260\370J\275\263\346y\277NU\215\277v\r\023\277\371ks\277\200\340M\277\250y\023>\315:\264?\222\272\263?\226\003\220?\230tH?\216B\270>\0007\255?c\254A?\210*\316=\247\226\207>Y]\364=\356\265\257\276\253^\206\277\210\022\200\277\360\2350\277\004\225\220?\004\3568\276\360\212\263\276>\342\037\276\231\260\013?\312\325\217>\272@\325=H\256&\274\237K\031\277\261\001\272>O\354\210\276p\346I\277z\351D\277tsP\277\230\260\236\276\204\017\217\27786J\277>2d\277\264\031\277>\326b\272=\3166\005\277\251`C\277\354\006\211\277\010\031a\277%\326a\277\376\316\303\277\370~@\276\374\277\320>8\222x\275\267\233\273\2764\306\276>\206\222:?\312O%\276\3408\322\273\260A\000\276x\375\341\277\270\010\276\277\356\243\026\277Q\355+?\240\347\214?\310\270\025\276\221\324t\277\266\370\252\277\366\265\013\300\365m\304\277U\325\255\277\302\256\264\277@\034\325\277\372jL\2774\254S>\230}o\27756,\277\014\304\353\277.\214\"\300B\024\236\277X#\005\300_\213\335>\342\241)?\347\267\223>\264(\212?@Ct\275_\027\204\277G\214\r\277^\243\r>\270\"]?\263\275B?\356P\255>M\360\222\276{\217\367\275\r\353\004?\242*\240?\242\324\250?\200Nm?\220%\355?\351\336\306?|\253\343??\036\276?\237\227\031?\310\212\273>\030\3553\2778\256\202=\336\235\034?U\322\244?\310\213\314=\361h,?\330\331\326?\253\345\267?$\tW?|]\027\276%\021\300\277H\334\316\277\000}\177\275@\010\325?\302\374\374>rl%?Q\354\350?|\300\033@\235\344\322?\034\016\360>\232\305W?\320\241\237=\003=\247>\312\251s\276\223t\006>y7\'@M\274-@T@D@\032\366\013?\020\330M>\234\361\261?r\237 ?M\013\031\277\374Ik>\022\263\022?\320\024\371\274\357/\241\277\252\266\027\277\000`\033:\255\266]\277\226d\213\277\300O\255\277]\034\350\277::\365\276\234\240P?\256v,?|\206=\276p\003V=\334\346q\274\\\321\247\277\214S\244\277\200\263\215\275\276\205\200\277]\265\247\276\320\233\242\274\373B\330\276hjF\275\246\373\213=I\347\"?v\362\250\277\204r\357\276\377w\221\277\304G\331\277\032)*\300\300\213#\300\216\306u\277V\242N\277c$\207\2770\"\232\277&ox\277=.\361\2773\252\220\277\246\323\250\277\3328p? U\332<\222rO?\020.I?\300l8<\306\021\274=\3513Q?\300\342\t>\010\323\262\275\332\336\024\277\222G\027>Dw-\277\324\235]>\257\340\246\277\347Z\321\277\r\222\245\277\300\326\311\277\270\nN\2762\352\215\276jy\277\275f\332\366>\324\244f?\264\030d>\202Y*?\210O\212\277\200:\267\273\316\2108\277\027\224\210\277\030w\321\277\360\202\203=\344eB=F\302\212\277\214\302\225\277\014\362\275\277$\301/\300\003@\364\277Uu\330\277\034\253D\277\220\371-?~U\257>\337\213\313?\277\232\000?VK\307>\030\324\301>\270W\207?\335\005_?\320A\245\275D\246\323\275\022\365\255>X\331\354=\330\373\200\2766h$\276\310q?\277L\377\225?\322V\305>\341D\313\276\252|\221\276\202\024\334\276N\2728\277J\036\200\276-\230\\\276\336rg\277\264S\007\300\315@\004\300]^\350\277\230\272\017\2775\210\343\276\317\230\376>\033\371\265>\206K\017?\332\255v\277\333Z\334\276\030\024\230\277&)\273\277\\\032:\277;\335=\277\3423\021\277 \025\217\277z\376\343\277\251\001\307\277\000h\340\277\r\265\257\277t\025\030\3002\230\311\277-\365\307\277F\321\351\277\000\371\345\276\302\246v?nhR?\024\032\357?{\241K?\206W&?\224\212~>\352\030\241\277F.\203\277\217\021Q\277\275\304\265\276\027\"\211\276>;\210?\374@\010?7\323\213\27678\213\276Vb\222>\366D|?\256\'\310?\375\212\320?\264\302\203>\206\304\207>Aiq?\374!\357?\316V\262?\356\233\302?\037\371\005@\200\007%@]&\340?\343\243\233?@\2222\276\022\233\376>]\001&\277\300\216\317\277\240\203G\277_k\026\277\250;^?\030-\366?\200\013\345?\217R\025@\370\2647@V:\t@\253\034\277?\014\360\237?\343xg?\276G\256\276~\365\333\276\315\222\263\277h\251\026\277\350\302P=n\023S>\324\227$?\326\212\323>\302\373\201?l\341\247?\272\267>?\342\211\333>\177q\r>s@\021@r\001\330?\n\317{?M\206\262?\241\302\255?\220\022\350?`u\357>vIK?\304\224_?\207{\210?\264\341\357?\347g\356?}\373&@\003 \272?\201\325\375?b\325\212?\214\210\252?\210\311I?\264\271\201\277\206\017\261>W\347\305?\334\372\205?\006x\264?\n\301\306?\006\365\307\276\352\330\347\276\237\323\365\276Z:\004\277|E.\276\263T\341>\227\023\361\276\2779\274\276\250\2170\275\247\236\000?\364\347f\2773m\213\277\330u\001\276\270\252\372\276(i\003\275\2772\001=^\032\350>\016c\342>\252\271\254>\254j\275\276\243\"\243\277\240\247>\277\001Y\265?\005\311\257?\235@\320\276\236gE\277mo\216\276\237\362\001\277P\261\301\274j\t\225>\253\363)>R\275\346\276\000_;=x\324\014\277=\020\222\277\200\r\003\275 \006\210\2761ZK\276\"e\025\275\"Y\352>H\275\036?\236\307\'\276\253\3313\277\036\\N\277^\273\205\276\374f]\275\206\353\257=1\326\375\277To\036\277j\252\253\276\322x/\277\034A\306\276`)\272<j\206b=S\013]?\323\327\337>\357\364\275?\271\363\264?\214:e>\204\375!?\340\261A<?\225\212>c\313\237>\0042;?P\037\002@\002\324U?\204\205J?}\376\305?Pg)@\026\210\274?\206\245\270?n\237\216?V*{\277\261\266\300\277\213_\"\277\371\3157?:\221\006>,`\372>\364f\021\276\227\376*?\230#\261>\211N\227?\322V\004@\271\350\300?\005c\t@\004Z\310>S\217\213>hKO?\232\203\312?\210F\315?TW\352>\274\230\370\276\'v\211\276\317\2031>\376\367\204\275\317uT?\035\254\225\277#u\316\277X\275\225\277\375E\316\277\\\224\205\277\\\265\300\2760\240Q\277\335\271I\277\212-\222\277\301\361\223\2775D\343\276\005\361 \277\254-x\277\205\365\035\277\352@\220\277\334\350\225\277\265\366*\277\000\"]\277\326:\024\277\327\326\274\277\002ZQ\277\333\"\005\277\241gm?\347\262\311?N\313b\277\304\262\276\277\354\027\022\277\263jg\276/\323\016\277\\\254\232\277\224l\253\277x\347\311\277VB\000\300]\225\255\277\366\232\303\276*\007\300>\334\264\203\277\370\002R>Ks\265>\220\350\003>,\026r>\020\330E?X\026\326=+ +\277\221\036-\277\343c\312\276j\026\250\276Tw\004?\n\333I\277\213e\271\277:\341\254\277\372\tX\277\306\340\253\277\270\030>\277\212\300\240\276\2207\322\276\265B\256\277R1\310\277\311\376\"\300\342\215 \300\2007\261\277\202K\353\276P\250(=\276[\205=\330\305/?\211\234,?8\271\212\277\342h\023\300\365\2141\300}\206@\300N\017\256\277\"q)\277\342\2118?\300\363F=\250\200\223;\232\315\240\276\266\217e\277\300\022w\276\242\277\273\276\356\251\341\277\224\030@\277\276\207\240\277\001\325L\277:Rj\277\210\030\213\275S\331\261\276\250g\230\277M\267\005\3000\371\304\275\322(\030\277\226\006\347\277D\221\214\277\023\200T\277\372?y\277\314 \236>\246}\264?r\306\216\276\316\263\016\277^Yt>\356-\032\277\256\025f\276\006;\030\277\233\2234\277\224>\202\277\310\313\204>p\233\314>\2763!?fC1\277&G\213\277w\372\316\277r\300\347\277\327\277\300\277\332\263\240\277\372\334g\277\372\340q\277\320\'U\277%\260\306\277*\361\365\276\263RW\277|L~\277u\013p>\320!D\277\340\036q\275n\307\220\276\016\372!\277\262;\"\277\270\030<\276\366\245\316=\240\350\351>#\244[>\325\210\230\277\2461\246\276\377B\233\276N\010\022?\336\266L>\t;\225?\212\263\207?^\366j?\230\315\365?\327\\\370?\362b\t@\216\232!@#\211\355?T9\276>\355\331\t?\340\036\r<\005\017\250\277|fG\277 :\n\276\343\370\360\275\036\355\205?\203\226v?\344\246\265>\340^\004\274\212\2721?\374\'A?\360\202\200=\010\263\032\276\233\007\257?C\343\217?CB$\277$\262y\277\236\303\330>\223\277\010?\204\242\313>\262\315\007\276\264z\367<\004\213\230\277B\1776\276F-\321\277\343\251\347\277\233\372\270\277\252}\250\277M9\350\277\367#\316\277I\025Z\277<\232\035\277\250\032\357\277#\247\271\277\362{\364\277\222\'\203\277\374BI\276\3479I?Q\025%?\024I\302\276\310\265a\276\250W\343\276\227\tw\277\356M\201\277\365\000S\277\254a\225>\214\016\231?o(=?\216\204|?\310\375\032\276\312\014\346\275\376\317\017?\220\013\314\274\204\264\223?\340\367[\275\231\313\331\275\203\223\303\276\324\240Q?\262`v>\275\263o?\304}\264\276\252\356\354\276\022\010\340\276\026\337\251\277bq\315\277\330\357\235\277\037\250F\277`(^\277\377\201H\277\246>k\276\303\n\274\277\270~\200\277\256\357\207\277YJ\273\277S(\307\277\356\375g\277\000\230\335<\227\305\216=\020C\177\274\000v\356\276\310\226M\275 y\035\276*{\263\276 \345\337\276\240\344W\276\341\252+>\317\205<?t\000\303>\203\240\321\276<S\216\277\220\037\306\276\352LX\277\256\002\321\277(nj\276\342\332\246\277\311\376H?\022Z\340>rw\264?B\227\t\277\017\226\253>Th\021\277\341>\240\277\334\304\250\277Z\333?\277\206.i\276\353\346\221\277\022:}\277\275\002p\277h\\\231\277\230\302\270\277\007\273\317\277\004\271\021\300Z\026\325\277\030s\031\300hs\351\277@\n\340\277\022\216\007\300\005\214\251\277 \267E\277\006I\207?&\242\307?\211<\213?<w\226>\205x\303\277\245G\030\300\316\017 \300\266\375\233\277\240P\000\277\r\234\225\277\365\307F\277\025\251t\277\302\213U\277\300r\361<\036\237\267\274\330\242\310\277\313h\025\277\302\240\200\277\034\263\025>\240\365\215\276\300#\271\276\022\300\215\276@.c>\225\300\261\276\030<?\276\034\361\235\276|\275\222\276\372\262\332=`}\300<\034\314\253<\265\245\352\274\374\234\033\277\376\326Z\277\206\014\215\276e\246c\277\243\355\313\277\214\276i\277n\327\245\277\260\331,>\n\230\215\276:\001\224>\032\356\330>,]\210\275\033+9=.\3667\2768rB\277\3524\236\277,e\r\276\255c4\276\346\366\311=.;l>\322\020\213?b\220\316?\261\254\036@\320]0?\032\367\256>\362-\013?\212P\300?9}\232?l7\002@\246\371\255?H\017\252>\006\332\204>T\264C?l\307\n?\320\373\375\274)a\343\277N\311\334\2776\245D\277\250$\256\275\252w\007\277\302\002s>\214\203\256<\356\031\304?\270\270\321\276z/\200\276\301\263o\277\303\250L\277\260\372y\275ft\347>\200?\002\274\3421\265\277\204@P\277\360\361R>430=\376\276\202\276\036\032\034?\254\313%>\307X\351>\304O\220= \341O\277\262\311\366\277\362\374\213\277l\313#\277\252\213\317>\204\002H\277\265qw\277\304l\250\277\247\326.\277t\250\371>H\233\275?\204p\204?\002\217\221?\253\326\221?8\377\340?\245R!?\325F\254>\320P\313>\332$\256>\332\222\271?t\345:?i\221\031?\360{h>\226\231\177\277\300F\262\277\3271g\277\307H6\277xk\367\276\226\322W\277l(\200\277\004\022\020?\226\203\223>;-\215\277D\370\315\277\211\002\341\277\002|\237\277L.\r\300\241\206\002\300\202\177\355\277X\347\363\276l\341\361\277\"\002\344\277\334\324\261\277p\333\332\275\227q\031\276\001O\336\276l\2666\276\3071\320>i:\360?j\032\247?\003C~?u\343\362>\240c\023?\260\317\327\275\237\262\343\277\346\013\023\300\034;\332\277\351\303D\277B\302\313>j\234\315=)\2430\276\266\310w\277\200dg<\335\032\306\277\233\301\235\277\350\362\264\277g&\206\277\362`M?\2029j?\250c\277=\357@\244>\014\006\231?\350\024A?b \345>7P\232>\277\037\t?\235\374D?p\007\316\276\333\343\177?V\317\303?F\221\251?\202\350|?` \310?\254\210\201?[8\227?\264\305\316?r\263\017@Gn\373?\004\323\350?\263\277\232?,\004S?\276\254L?\340\206-?\233\245B\277\222AP\276\221;\206\277\314B7>\330]\245>\3404q?\330y ?>\3158\277Q^\037\277\215\017\251\277\032\227\334\276XN\214\277\005S\215\277\340\036\312\274&[\024\277\336P*\276\010\r\"=\232\013$>\276\243\354>\274\333I?\204\210\006?\320(\352<d\332\225\275k)\274\277\\\223 \300b\212\257\277\323\322\205\277\326g\036\277\007\366\317\277x$v\277\253 \267\276\'\271\321>\271:\220\276\013\016\022\277.(\256\276\020\016w\275\363L\245\277u\246\206\277 \211f\277\034ff\277h\211\225\2776S\251\277H7\350\277L\315\214\277\323\361Z\277\265\216{\277\030,\223\277\010k\264\277\2200\252\276N\351\003>\200\366S\277\260\205h>\203S.?\316]\204?\326+\r@\033!\360?\020)\310=\261\347\034?\215/\025?W\362\370\276`.e>\n\314\270\275\370\016c\276\361\3355\277R\305\023\276\314\030\222>\270\026\235\274\242\3330\277\367\007\235\277\311x2\277\026\361\013\277\023>\336\276\200\014\321;\362^i?\360L\240=\355\210\016?z/#?\207dq?\310P\207?\331\277\314?z\362+@\215`\237? \343\204=l\250\350=\024\326Z\276\334a$\277|c\257\277N\203\352\277\335d\007\300\2736C\277\250\034\200\277\212\371&\277\251\230y\277\230|\235>?-\214?\203\255\034@\337]/@\256@\024@\201u\023@xl\004@\365\022??\220.\214?h}\207=\234I\207?\026\276\217?\020U\034\277\276\331\303\277\006\234x\277PT\353\275\222c\316>\244i\307=<XP\276\230\234\026?\253\323\017?\274\300q\277,\216\207\277\177\0040\277\331\032\214\276\2522\240\276\330T\210\274NU\327>\372\177\225?\002f0?`\266\276=\010sa<\300\n2?=\262\347>\273\214\315?\302U\320?0t\332?\247\266\257?\231\301\006@G\020>@\254|\376?\233\310R?\3116\254?\262\231h?\234\213\273?4E\207?\2668\262?f6\277?\211\371\252?N\232\376>|\032\177?\242\234\277?\346\260r?\010z\301?\352\262\344?\316)\301?\030\"+>\273\247,\277\256o\231\277\3074%?\201#\004@@\313r>\356q8>\307\004\252\276\354\2060>4`\213\277\224\354`\277\024\322\204>\360W_=\347\370\022\277\342\201\271\276@k\307\276\366\313\003?\020\276\324?(\256t?M\236\020@ur7@m\010\'@\212x\267?\3767m?@\364\033<<\277\201\276\026\241\245\277\200\333\032\275\266\210\226\275\363\2041\277b(3?p\002N\2762y\251?\334Q\254>\270\345,\276\2153H\277\\\312Q\277)\317T?\223\330n?\341\227 ?b\247b?\010\nS?\210\373\272?\200\252\226?W\372\315?\021\317e?h\342\364?\374Z\200?\264r\233?Z\250\234?\310\252W>\212\025\251>\"OJ\277\004\345\017\277n\266\206\277G\200\\\277\271\270\017\277%\335\246>E\023V>t\005\202?\323\244p?\326\314\203?\316_2?\234\314\007@p\206\274?pA\002@\276!+?\022Vt?\036*\320?\365\\\035@\000\316\013@\236\2009@\353\335\020@5\223\020@\3174\343?3\014\317?({\211?\324\364\t>T$<\2773$\306\276m\2722\277\036\334p\277_\340\001\277k\274\225\277&}\331\277\230\261\274\276me\037?\3553\273?\220\225\343>\210\252\327>>h\351>g[\223?.\352Z?\364\006\">h\n#>\221\306\014>RJ1\275\262\201\201\275\340\034\312\277\352\210\022\300(zK?\177i\023?<\370\303?s\252\221?\243j\365?d\224\231?@3e\275\215(\027?\232\310\275?gG\245?+<>?\\\332\240?`_.?V\031\207?0\206\216\275\2712\274\276:Z-\277,\341\221?\200\355\203\275\233\\\277\274, 3?\305\210\211?\343\251K?R\2002?]\317d?\210\242\221\276\220\3365?\"\354\021@%\227\031@\371Q\321?\246#\265>\0344\n?/\205\202>\376,\252\276RJB\277H\363\r\277?_k\276j\345\300? \243\370=\026\240*\276\302\260X\277 VU\275\352\265\372>\234\207\340>\344sX\276\2373.\276g\301\224\277sb\256\277\314\330p>\344\223+\277\330\247\350\277-\247\021\300K8\262\277\'l\323\277\206\376\021\300\203\271\242\277\251\205\310\277\022M%\300s\303[\300\240j\267\277\034\260S\277\247{\247\276\260w\270\274\271[\367\277&\007\255\277\347\034;\277\025\336\247\277\226r\206\277\240\316\352\277\203A\023\300\350n\370\2777\347\250\277\2547\324\277\217\341\342\277\244\374\025\300\254F\013\300\230\202z\277\310O\244\277\222\362p?\366\002%?\367\002\220?2\013\201?\255|r?\033\241~\277>Q\265\277Vu\217\277\004\275\321\276E\034e\277\'7\226\277\374\352\306\277r6F\277\204\275\t>K\354\331\276z\026\004\277\234\366\n\2772!T\277\033\373\203?\321\255\260>\370W%?\330A\233=`\366\014=J\211\010?N\342\242>\362\307\007\277\360\334\001\275<*\350>`\n\353>C?\276\27686\203\275\226\253\206\276\305Y@?\310\374}\27606e?\207&\005@\021h\026@\337\3602@\214\360C@\235\376V@ZU\354?\001\014\336?\243\302\033\277\326g\337\276\214,\241\276\242\211\302\275\002\340_\277\030D\236\276*\0047\277\331A\366\276\357\001\243>Xa5?\273\350]?\200i\357;\362,\202\277\000\363\004<\017\002\314\277k\203\276\277\3350\247\277\346\003\202\276\206\305n\277\322%\215>\375D\344=Wx\362>\261\003\373>KQ4?V\202o\277\335\255\354\277}\331\333\277\306\207\306\276X\341P\277\356\211\364\277\217h\342\277>_!\277\n\323\225?7\350{?\234]\243?\230\3242@se\230?\033\371/?\300\324\227?&\373\307?M\351\207?@\335;<i^Y>`\325k?\215_\\?n=J?\005\302\321>\310\254W>\353\322s?\033\362=?R\245\300?l|\002@\035\033p?~\303\240?\3269\251?\210\325\231?\2541w>{\233\360\277\002#\t\300\336\267\030\3006\355\005\300z\224\366\277T/\247\277\326L>\300C(\200\277\210I\311\276\353Bw\277O$\246\276\362\373\336\276f\024@\277\000YZ\276\326\262c\276\276V%?\277_\007?@\214\"\276F\251\212=a\202%?ub\002?\2544K?\362O\302>^\341a>s\342\n?\332\272\377>Y\252\030?\220X\002=\252R\342>\304\224\352=\271P7\277z\037\213\277\014\024L>)M9\276\344\254z\275\340(\342=Sx\221?\302\215\361?\272\343(?\013\352\244?\\\224\277?\272\214\354?\242<\231?1\230\212?\356>g?F\226\202?\206\020\341>h<)?\314>\221?\330U,\276V\312\326>\344[\014>\215\027\262\277a\306\005\277\024\247R\276\022\360<\275y\363o>\003\024)\276\321\222\325?\226|\256?\340Z1>\001\350v\277=\203\n\300A\302Z\277\0008\252\275|\037\364\276\230\241C\277L\017\331\277\270>\021\277\324h\240>j\2259\276\314\217\336=\306\225T\276\330\243\351>/\356S?{\273e?\305\3562?\263\2405?\370I\352\275d\252X\275l\030e?\336\305\333\276\026\177\273\277!\263\331\277w\223-\277\214+9>\274\265\023\275\004\220\234?\346\324\273>\326\351\033\276\205HR?\215\032\r?\373\340\213\277|G\031>f\212g?\370\314\341?\006I}?\361)\267>\304\227\221?\013\305\336?>\370\323>\210\250\230?nS\276?,(X? @_=Y\023\246\276\220\210\004\277r\230\026>\001\'G\277D\360\337\277\340\346s\277g{\260\277K~\210\277\000\343\334\277\020L\207\276\245zx\277\320\343\r\300<\002\017\277\353/\002?\260\321i?\006l\322?$\317\243?v\377\275>\035\247y?\240.2?z\006\317>\010\035\036?\366\266\227?@\217\223=\363\313=\277.TU\277\225d\202\276\365\230\032\277\211\210\037?\206\002[?L}\216?\373\275S?\342\262~?\214\322\"@\016_\204?2\235\266?\242\261\006@\237G\305?\202?\263>\244\264\366>\376#G?\300\212&\2757\231\027\277\320\"\250\274B\363]\277W\264\350\277\014\227\310\277d1/\300toT\300\32375\300\310\211\356\277J\210\025\300)\246\020\300\245\232\365\277\243\357}\277\370\034\324=o\255/\277\362\315\206\277\3140\037\276\266\236\034\277\314\201\236\276=/\262\277\316NE\277Y\2224?`\261\206>\317\341\364?\004G\003@R\257\020?\273<\004\277)\352f\277\350\007\226=\203lV=\"\351\022?\277\346\226>+\267\373>}\211\311>@\027\335;n\225\004\276B\265H\277,C\263\277\214\230\371\277\221\223\264\277\312\275\362\277\324\312\273\276{\024$\300KWV\300\354\205\331\277\337\002S\277X\022\234\275P\207\223>`O\377<\232N#\277\024Hw>\210^[>\014\301\231\276e\201\014\277_\004\252\277\"\355\003\300W+\005\300e\234\022\300\2400 \300d\330\013\300T\376p\277\267\307j\277A\214\224\277/\257\220\277\304\316\213\277z\311\237\277\035\207d\2772\263\206\277`\236\327=\003\217Z?\303W\257?\374\275\320?\243\364\277?\302\375\335?\266\210B?\376%\360>\322\237\240>\272\366\375>\0374\236>\206d\272>\037\035\031?l4\307>\217\261\265?\227\245\001@HKI?W\311\r@=7\377?\262K\204?2\355\317>\222E;\276!\240\200\277@\rL=\204\274\371>3\353\207>\"\276:?\3003C>H\004\251?\202\226\235?\204=\037?9S\220?\265[\037?\274q\223?\324\313\t?5\333\036?\022\322F?\340G\235?&\332\205?\277\225\212?\235A\000@GF\271?\356\224\220?\310\0256>\374\246 ?\212\256\271>\216\250\307>z\031\305?`[\">\0052d?H4\377=B\204)?^\036\214\276\322\025!?p\211_?\210R\333\275\333l$\277LN\252\275Jn\r?\206o\331>\031\213\225?6\276|?\260\352$>E\031\036>\344\351,?\362h\227?\333\205b\277\255Z\003?\236y\203>\036MN\277\2504\251>\000\355\272\272\257\363\323\275T+\276\276x\254\250\275P\234b>\272\266*>h|a\275\327\221d\277\000\257\236=p\314\356\276JZv\277\306y;\277u\357\033\277\237\217\232\277`\356|\275\203r\342>>\305\t\2775\327\227?\027\240X?~P\021?\227@R\277\354\230T\277\232\214\226\277\215#\331\277jl\004\300\0101\215\277\272\361\233>\206TE?\300^\276=\304\356v\277\020M\373\276\330 \022?T\364@\277\364nA\277\000I\t?\2715\307><\n\361>\1776\210?\230t\t?\266\221F?\312\207$?V\264\002\276\320\266\250\275\366f\347?\210\343\260?\364w\374>\210\234p=(\357U\277F\237\246\277\016\2644\277\260B\037><\231\246>A\371\036?x~\221>0\305\013?@\302`?i~9?\373\222\204?\344F\212?&\267\201?\225\257\221?\330\203\271?\226\236\000@\240\227\020@\240\024\010@\032p\217?\366\207u\277\336\2263\277Vc\333\277\225\007\307\277\256#\363\277\274\317\376\277\352\350\227\277\272\326\211\277\354\356\230\277\\\222\316\276\207\213\245\276\224:\361\276\357{\204\276\0063\336\277\276m\333\277@\245\377\277C\226 \300\342\332\r\300\272\037\360\277\247I\352\277\336i\200\277z8\240\277\030\005\027\277\034h\275\276\305\351\016\300\212:\240\277\210F.\276U`\035?\026\375\251?\351\352o?\361\306\265?\036`2?aw\000\277\323\276\211?Z\260!?\252\204>>_\220\237\277\253\346\306\277\366{?\277\022\007U\277\304\030U>\334\201,\277\266\3745\277\307\336\326\2771\376\257\277\204Z\035\277\346\250\217\277\326\271\225?$X\243?B)A?1\242\025?\346%\246\276\003\373\226>\200\222V\273\365fX?\305\021g?\240F4\275\310\031\342>\302\215s?g\3111?\007tp?\317\270\362>W\037\221>s\023\215\277\217r\220\277\226\361\235\277a\271C\277\022\306\036\276;6\233\277\363p\004?\260\001\216?+\"6\277\027\323(?|\342\206=\246\256\033>\264\033\305>o\316\337\276\030\005\237\277\317*\303\277\270\026\\\2772\212\345\276:C\204\277\337\344\035\300\342:a\300\277\312\206\300\330T4\3006\236\330\2778\034\337\277\020\271\r\277\350\272Y\2772\261\206?\342c\203>\007\367\007?\245\275N?t\260\001??L\207>\212\211\244\275=\234\252?R\367\350?\232t\022@\333(\334?e\317\024@\0201l@\335\347\247?`\205\364?@\226\232?\340d\214?\026Va?\300\331]\276\340\360`?\210\365G?\004E\245?\354@\034?\300\221@?\357\014\017?\232\235@?\300\213\'?\324\252\304>8\344\305\275\366g\323?\010\363\014\277\222\371\373\276\nIf\277!-\205\277\210R:\277K)\025\277\222{7\277Z\253[\276\352\262\332>\216(\014\277\344\246\256\277s\023\242\277\246W\343\277\3554$\300\t\261\025\300\300\230\346\277\026\001\244\277&S\213\276\304K\035\277\003})\277\242\014\235\277hQ\202\276\343\033Z\277\031\351\021@\344\214\326?\'\306\262?\030\037\341>\030\235F?\\\223D?\255S#?\010\240\270?SM\324?\344\232\225>\030h\034\276\325\260\204>\311!\274\276\202W\260\277D\"t\2768\013\366<F\217C>\231\373\003\276\036D\241?iK\203?s<\351?\274\r\244?\010\260\247?\000\002\210?\206\263u\276R\255k?h\330\376>\332\203\227?\2402\270?d\226\324?\243O\351?\033\350\n@\262\211\002@\234\371\021@\233\333\376?\227\364C?\330P??\210\226\216>nF3\277HA\030\277\3743\217\276 !\253\277!\270\222\277\262cC\277\223\310_\277[\'W\277\2376I\277\235\235]\277\234\317\363>\250\275g?q`\252?@\240\037?\342\237Q?\003x\273?\373\002\242?:Mu?=\030\345?\004\343\342?\036\240\221?\346i\032?-\321\216\276@\004\010\277F}\177\277\262\215e\277\274\245\001>\252\204=\277\252\303\370>n\035\256?!\035\336?\006R\226?Y\315\255?(\367\020@\213\017Y\277\274\314b>\366\376\216?ml\226?\307\220\267?D\216\037@?W\273?\213m\306?b\243\362>M\210V?\330\304\020?\226\214\244?v,\223?\202)\260\276o\313h\277\256\322\310\277\017\326\205\277N]%\277\322Gr\277c\226\233\277\224\364\266\2767Dr\276N\267\343\276.\217\033>\346f\244>\254\225Z\277\031\317\202\277\217g\313\276\316C\275\277\036\022\242\277z\331\r\277~\336\215\276\235a-><\261\033@\352 \367?\237\267\005@\346\320\n@\247k\360?\224\211\355?\230\332u?\034V\013@\275\\\254?\206;\226?\365\342*?\010\032\341?\354;\031?v\205\037?1\336\017?\n\3654?IJ\370>@\024\375>\024\244\\?\330\001_\276l\231\023\277KG\314\277wI\235\277uM\227\277\335\355\201\277\0168\226\277\372\025a\277\350\220\272\277\004Oa\277\345D\226\277\206\353\244\277\370\316\325\277\261\241\021\277\222EZ\277\270c\271\277\353\303\231\277\337k\333\277@\250\364\277\032\233\002\300\014\334\326\2764p\216\277\300\177\224>\330g\316?\320l0>n\016\002\277\226F\217\276\347f\213\276,;_\277\270X\350\276/\353\216?z\234.?\300\237;<x\034t\277\364\354\253\277\2568\265\277\022\257\032\277\0160\220\276L\277\030\277\230\t\266\275\347\303\317\276<q0\276\310\255#\277\236<\'\277~\247\005\275\376\322E\277\005K<?&~\261\276$\324\027\275\230&\036;\014\305\n?\376K\217?\235\345\032\277n\023\r\277\210\204\013>_\201\353>\221\302\226\276\265\311\032\277\360\306u\275%\254\322>\200\331\243<\335 \003?\230\016\034=\301\301\213\276d\"\030?\374>\204\277\200\366\350\277|\211\221\277|\256\341\277\340\032\323\275U5I?\256t\256?I,\013?\332\312C>\361\000\330>\360U\202?\336<\207>X\264p?-4\022@\273E\374?v\247\002@\020\357\334?\270x\252?.\273\256?\274k\377\276\254 \252\277\205\005\240\277\365e\371\277\316\006\233\277\254}\230\277f\365\207\277\026\377_\277\370q\264\276\350\351\241\277\001\351\023\300\360G\267\277\010\276\364\277\014\022\345\277\006\243\344\277X\351\250\277x\032\314\277\346&\007\277\334\026)\276t \310\276\200d\256\273\324\214\027\277A\027*\277\276\336\026\277\0200\355\275\242\306=?\365D\216>S\240\273>\254\271J\277-\226\300\276\276\354\254\277R\260\320\277f_\224\277\300;9\275\\~\250\274=m\364>p\271\231\275\230\211\316\276\n\030\202>\206 k\277\025,\312\2770\224E\277\0343\302\277\004\370\332\277\221L\262\277\311W\363\277)@\271\2779\350\255\277r\n\030\300\322E\010\300Z\306\032\300W\363\'\300<I\235\277\375R\220\277w\215p\277\246\205\241\277\352\247\237?\022U\023@Z\211@@\020\275v@k\277m@\010\235X@4\2460@y\322\013@\224\016\027@:f7?\022lC?\317\205&\277S~\363\276I3\263\276\2607\371\275zZ\325\275\370\211\024?\325 \220>\326M\037\277\330\336\322\277\215g\267\277\227\213n\277@@\261<\364vZ\276\303\0146\277\t\332\263\277E8\360\277Mv\234\277~\226\276\277-:\001\300\030t\323\277\263+1\277\360\313s>\316\223\366\2768\360e\275\024A\261>\314a\241?\036\307\005@\210v\204?zO\356?f\230\035@\315\375\024@f\234\244?\000\210N\272\346,J\276\023\225Y\277>p\214>\013\317\201>>\251\375=\322\224\331>\344`\025\277\340\234\224\274\320>\255\276h\026#\277H8\320=8\2435?l\225\300?u\352\207?\340c\013@<\177<@\0324)@\241 \373?\350\362\002>S$\301?\255\\*?\025\004\216>T\010\336>\220\225d?\356\010S?5\ng?\021\324\002?\307\002\021?\211\222t?\"5\213>2\004\234?\251\276_?\270\266 ?\020\361\376>\244\304\212?\344\343a>\036\205\374>\n\356\326\276IA\024\276 \265\236={jf\277 \271\033\276\036E\013=\241\211\340\276\260\310.=*6\317\276\021\257\322\276\373H\234\276\243\026\226?\020\211`?I\313\271>\331K\213\276 8\344\275\371\r\371>\336!\037\276I\241\340\276\321_\237\277Q:b\277\346\366\246\277\245U1\277\375\211\004\300hp\313\277\216\004]\277\264_\006\277\366\3521?\321\371d?\020o-\275\222\027\360\275^\346\250\276A:\025\277\\&\361\2760\332\243\276\033\220\224\276\353\232\344\275K{r>\262\036\201?\235\334F?\311:\001@\300\242\316?\262L\311?\340\356\000@V\2066@\023\227\021@\240\023\030?N\373\332>\021\304&>AW\006\276\353\001r\277\360\255\215=\304F\320\2762e\306\276\021+\336>\230:\344?\301\312\264?\3007\017\277\220\2136\277v\000;?\204Kb?\256\247e?@mE>\331\266\224\274 \302\231\276\246\266\010\277\330\352\025=B\310`\277\233P\256\276\254\303\'?\232\213\207\276\363\303)?\3645f?h>(?\013\330\211>j\316\366>\271.\320?+\221\"?\031\r\361?\ng\317?\210\363\267>\311\341<?\372Ff?\270\333.?\216\347\221?\333W\246?\360\275\305>n^P?\242\2572?\252\"W?8l\205?]\030\305?8\177\322?S\026\001@u\177\244?\034\313\341\276<\320\227=\206>%\277\350\320T\275\374\261\241\276\323S\'?\234\001K\276\316)\235\277\334V\214\277y\333=\277\000\223\307\276\245/\374>\034\355v?\n\346\226\276w\277%\276\326\205N\275N\211\324\277@\360\364\277\254\235\002\300\304\344\367\277><N\277\370\214\341\277\335p\306\277\330\217\246\277\034\366\253\277;\247\225\277L3\313\277\274M\237\277\234)\031\276\314Uk\277\200e\222\273\253hs?plM?\320\305\340?$\370\034@\215\257\337?$\013\374>Z!\255?q\272\331?v\236\201?\227\032\252?\340\343\251\275s\014\254>\255O\254\276\215\251\327>\372\003\331?f\2523?\340\355\313<\toV\277\006\307A\277\266\350\327\276\326\337y\277f\371\272\277\362\324\322\277\006n\343\277j;H\300`\022\025\300(A\267\277\007\201\337\277\007O\271\277\330\200\005>~|]=\302O\331>x\t\020?eW;?MEN?\000\014\207=\350\2151\277\330:\016\277\225\336Y\277^\303\263>*\003\031?\331\202\244>\332#\031\276\353\017\240\276\00066\275c\022\017?\255\305\367>\232\220\206\276&\354\227=\354\307\270\276Eh\266\276L\273,\277&\372\025?\334o\224=S\2404\276s\376N\277\204\232\247\277\266U\211\276`\222\220\276J\210+?\264qe\276\364M\370\275\300\332)\277n\223\352\276\273\006\233\2776-\271\277\361\351\325\277\231\270\t\300\274\376u\277x\311R\276\177/:?\266\264\260?v\246\005@V\035\t@(S\222?\010\207\377\275\251N\334\277\250\354\010\300\300z=\300B\360\016\300\225\013\311\277{\021s?\323&\267?\242c\016?v\322\206\2770h\221\276\364\017;\277\332\024\331\277\305L%\300\360%q\2777%\217\277:\2735?H\300]?\221\331\002?IG6?>\321\263?|\267\214?\3571\246?\376\267\322?\025\214\t@U\211\346?\007\377\222?LGQ>O\0225>\323*N?]\204\014\276\323\"\337\275\213\210,? P>?\004A\342?8\020\264>(\230b\276\3274\004\277\240\333\354\275\234\306\203?\330\017\347>\326rC>\016\022\302\276\220\364\001?_\335\004?\340-\204?\316\007\217?\257\355\351>\273e\333?a8\001?O@\215?\276\214X?`\006\250<\367\307\335\276\256\252\370\275<\333\246>[\2314\277<\345\276\275\221\221\341\276\244\306\006\277\240\312\314\276\240\027\215\277\332\'\252\276\312\215\233\277\217\344\245\277\326\277\253\276\220\250\264=\236\220\252?\254F\227?f\306\007@\340\016\003@\372\360\033@f\327L@\032\230<@,\363[?\021\353\002@x\351\264?`\236\356?\337\366\252?D\354\332?\022N!@xU8?dy\207?\200I\201\274\026M\271\276`?\273=\302\346:>\032aN?\220\0217=\225\006\036?\365\231\316>\255\010\313\276\336I\311\276\254+\037\277\356#\306\276\267\252\270?\232\323\202?~`\213?\274\327t>#\000\202\2766v\222>@@2?\227\346\313\276!\360\251\276\200\0256;\031\352\261<G\"\251<\330\321\366\276\371\200\027\277&8\311\277L\321q\277\366:\000\277\274\215\330\275 \020\317;\256\362\306\274\326\3514<\356\036\357\275Pr\366<\320-.?\020\\d?\320\014\312>DM\203?\277/\255>.\r\370>\2136\037?^{\033?\342\203\220\277d\016\211>v\233h?F\203F?\020+,\275\303#\315\276\366o\326\275\345w\204>\210\\\036\277\030\t>\277<\372\r\277\344KA\277H\251\372\275Ao\236\276\202\360\212>l\025\036>\333\331\303\276y\243\207\277\352\314P\277\240\230\331\277\334r\010\300\362Z\272\277\243<\030\300X]\225\277X\266\252\277Z\343\225\277\233Q*\277\034YG\276\241f5\276\3777\247?\022HT?\200=\227<\t\332\210\276qH\311\275\010\351\262>*\274h? &8>\250(\r?]\244\000?\0308\331\276\260Zb\275\237SY?\360B\021>\370I\237\276x^\t=Fm\223\277a\177\206\277\325\351\257\276\204\016@\277\273\360\270\277\267\343\260\277\000@M>\244d\304\276\024dX>H\362\363>\246\251\016?\240\215\020\277\320\371$=a\247\272\277\377\002\264\277<\225\202\277G\2063?\310t\t\276C\037\300\276\226\0102\277\347\302\353\276\036~\250\277\313\021D\277$N\305\277\244\203\347\277^\374I\277\346\026*?\336<\004\300\371\331\252\277\212\276\302\276T\310\302>`\252\210=#\251\341?\324\215\354?~\261\025@$\310\202?\240x\261>@\307\246?\302\323\371>\000\373\275\272kU\\>\344\376\243>6h\224\277`\024\254\277.Um\277\340\026\357\276\260\005[\277\354\363\271>\334\202j?\206\223J?\230\255\224?\\\251\222\277b\300\373>\270\030a?\020Y\303=\016\254\303=H\330\034?+\362o?\034\037{\276~@\253?\334\250\306?\006\240h?\006d\r?\323V\352? \325\322?t\307\336?N\010\017@9\314\014@\007^\004@\016\210\301?<\221\365?d\342\037@+\206\312?\314\314\246?\275B`?\314\314\006\300\217\305\357\277\000Y\310\276\005\002\347>\r;\005?C\335\327?\330\314\373?p\004\333?\\\024\244?D\326)?eq\217?\222\273\320>\320\031\326?>\254\244?\014\334\236\276$F\365=`M\244\277\323\024\240\277\322\271\227\277\204\251\245\277\326\340\033\277\213\364\321\277q\3420\277ZW\232\277\235b\007@\343\344\262?Ph\t@\305n\271?\033\001t?yN\225?n\200\'@4P\002@\031/\222?Ek\351>\261\037\362\276\010,\037=\006\250\201\275\347!\340\276\355\351\246\277\324\275\210\277\334\354?\276/J#\276Q\025\026\276\000:\025\272\212\346\301>\006H\245>\244P\177\277gc\221\277l8\307?\t\026f?\024]b\276K\346\237\276\361s\206\277\231\024\201\277\014K\241\277\376\221\247\277^\244t\277b\317a\277+\206\352\277\016\r\253\277\020\206\224\275\206\2578\277P\245\'>\005>\245\277\372Z\365\276r\242L\277\241K\362\277\250\231\256\276d\342\024\277\022z\251\277{\305\305\277\212\267\225\276\247x\277>\276\307\t\276\311vc>\3404]\275 \006\306:\31477\277\275\3461\277\021\301\037\277u\370\207\277T\177l\277\275\255=\277\240\337\'\276\2670\321\276\272\001B?\250\025\032?\315\314\320?\232~`@\327Q+@[\271\'@\257|;@\010P\r@\030\014~?.\212\004?\371\324\212?\206\226\010?PU\327>\264\334\026?\360\006\307\275\022\260\327=\373)\203>\340\231\027\275F\033\003\277\366k\203\277bXl\277w\247=\277G\2322\300`Fh\277\302\354\211\277\024\375\230\277\333\027\252\277(%\334\277n\322\240\277\356\340\320\276\376\340\377\2765\374\245\277\276y\037\300P\351\013\300i\323\026\300\277g\262\276\344r:\277\364]0\276\210Fu?J&:?\271\333\037?x\202\360>\273\014;?\364Bp\276\327lQ\277\034\250:\277\226\273\200\2770\361\243>\220\220\217\276\207\364\177\276-\372Q\277\360\333\031\277\304\344c\2760\220\036=\316;<?\350\307\225\276o\323\267\277\365\277\302\277\354\264p\277X\204C?\326(=?\204\200z>\n\316\022\277J.\212\276\276\200\020?X\0161\277\270\236~\277`\325\221=gt\214\276\364\221\021\277>\361\311\276_\232\000\277>(\314\276Fu$>\324\034\364>:4\346>\330\203\'?06\031\275\302\214\253\275V\035\206\276\000\321\226\274L\210\212\277\354\'{\277e\346\350\276\336|u\277\354\317\'\277i\222\230\276\250%\217\274\352M\004?\204L\301>\275\364\301\276/(\020\300\034\252\252\277\010\301\341\277\304Xg\277\'k\226\277\260\260\213>\325\357\304\27605%?\342\351\243?\265:\261?J\373J?\255\321D?U\235\005?\271M\n\277\310\220\341=zc\233\276\202\351>\277\2432\254\276K6c\277\326\034\231\277\346\241\316\277\327\003>\277\314\021_\277\255Y\235\276{\337\204\276\274\3661\276(,\207?~Y\362\276nJ\307\276\2136\365>x\244\004=:NG\277\000\314#;\247\216\222>F\274\353?\340q1\276\275\305\232?\307\317\361?\336\035\311?2k\347?e\016?\275Q\231-\275\273:\251\276\232\232I\276k\221\270\277\037\351\267\277_}\005\300?\264\256\277\376\375\016\300\345\310\333\277+q\250\277B\014D\277\347\266\247\277\272\264\245\277\227J\341\277z\252\357\277$\334\321>\250\026\203\276\273/\232>\270\002\346\276\364q\211\275^|K>\"\232a>\312;\226\2767\325\271\277\374\311\231\277r\r^\277\324\3145>t\2466\275!\202\220?\232\300r?H\0270>M\204\225?\256UJ?\372\037\315>\266*n\277\204]\017\277/\346\345>\346\317\214>\2128\245\275\007b\203\277\\\257\030\277\311\244\264\276\274\232\343=\321\320\002?\323b#?\206,\261?\200\314O\275\001~\204\277\251\211i\277\014\301R\276\027k\027\276I/+?\2000\346\275w\222\342>\252\375??\200\033\315<\251k\273\276\340\356\t\277\364\201\367\276\322\r\036\277\340\210\332>j\261~?\315\263\220?\351\2228@\334\217\206?\372\334\211?NF\233?\211\344\261?\346\031J?\036\270\231?3\266<?H\315\321<\370y\240\276\372\230I\277F\212\365\277\\\356\271\277]\243\204\277\302\314\254\277\321\327\211\277\021\252\357\277(I\026\3001\217\323\2770\344\017>\033\013\215\275 \237\016\277\224\342\303?J\336\300>8\177,?\337n\320?\n;$@\256\254\251?@\233\000@@w\312=\254\016\210\277\003T\235\277\235\000\323\2761z@\276~\355\311>\370M\263>\334\357\210?\230l\r>\257J^\276\030f\251>\272\210=?\014:Z?\016E\215?\310p\271?\000?\374<\277\345y>YM\n?\314,\321>\177\217\016?\234\\\371>0\370\274=\t-\033?SK\215?\024vv?s\'I?\205d\211?,n,>\312\341\376>1\037\010?X\236\201\275bM\353>\021}\334>y3\345>Trj?\352>\366?\000\347\266?^C\013@\214\217.@H\020%@\352\224\037@\340\032\n@\342\300\323?K\203-@\256pf@\231\323\"@\2544\001@[\354g?}\026;?\3303\275\276\342\235X\277\340\276\037@/\355\037@\314\274\035@Bl\370?2\300\030@\264\216\327?\204b\016@\243Y\306?\030P\323>\300\203\317\276\206\223|?_>\364>\250\026\001>\031\341\304>\354VP?\311\007\036?\314\006_?\256\000\257?\207\313\002@\245]\246?B\203\342?\364\021\327?\003e\301?\251\033\305?\346i\301\276/\027\362>\211=Y?\2778\317>\010\206\001>\200#\352?\242\272\330?s\024\245?\366\302\227?0\354\250?\264\034\264>\007B\274\277!M\252\277\250\207\357\276.w\363>6>|?\356\026\356?B\257\036@\334\250K@xR\n@\270\270(@\327\252%@~\003\320?\345\307I?\203\227\241>\026X\003?\2422\224>^\244\342>\010\266\225\275 K)\277\210r\335=\017\307\330\276\3624Z?\221\267\231?\216\026\314?g\207\362?r;\021@\272\035\020@\257\006\222?\270\205i?o.\314>8Cn\277j\343\246>\262\240\305>\260\215Q>4\010\372\276\344\220\202\277\325 ,\300\256S\365?\rG\017@\355LM?\312\342\335?\314s\317>\313\306/?\276\346%>\230\364\331>;\3631?.\0369?\024\376\275?r\367\360>)s\272\276\231\033\"\277Tk\372\276\232W\275\276\274\375x\277\340\373z\277\340\271A>\324\t\207\277\360\256n=\250\3612?\006Lu\277\212@,\277L\357\251\277\366p\327\277K y\277\262\224\005\277\221\301\010\277\353\225\270\277\306\260\310\2776P\002\300\223*\350\277\"\300\261\277\327\304\242\277>F\253\276\013\271+\276\032\033:?\332\311\260>\2243\025\2763:~\277\342\230R\277u\372\203\277\2140\316\277\357M\255\277\232}\317\276\311T\355>\347Y\253?\0360\325\276\201y\333\277>\256\263\277\373\261\257\277\370wo\277\351dR?\252\036\255\276\362B\243\277\337\020\215\277\250\206-\276\372\314\202\276\300k+?\017\336\342?\300\017.@\242\370\356?d\226]?\340\224M=\364\362\247?vo\222>\275\021v>g\206\242\277\203H\214\277\376\037\303\277@\305\244\274\002\343d\277\273\2316\277\204\225\321\277S0\255\277\233\316+\300\375\314\035\300\221\023\004\300\010\357\037\277<\210\232\276p\364\273<0\275\316;\021MX\277\3349\224\277\200^S?\216\032\302\276\234\256\215=\206\376\001\277\223\005\202\277\242[\003\277\333\024\003\277R\217\243\277\326,\271\276\336\366\204?\026\353a?\343\202\310\277X\010\326>\211:\255>\216\252Y?bw\201?\027\325T?z\342j?\366\360\223?3@\207?P\2700?`\215:\275\303\001\007\300\321\316\331\277\366\355d\277|\246\027\2772\235\275\277rc\214\276|\021+=\0233\317\276\220K>\277\276\307`\277T\245\237\277\030\366-\276\273\255\220\276\221i\235\276!\203\265\277~\337\302\277\212u\356\276\020\354\210<\225\351:?\370\331\027\276\350\036\006\275\306\235\346\276\214\323\225\275\016(\'?\222\262\324\276\320sP\277L]\211\277<\0274\277\313I\222\277\245\3356\277\340\017\006\276=\264\347>dB\252=\251\360*\277\312\216\032\300\247A\010\300$mZ\277\220\256\247?\256\343\257?\034\036V>4\226\016?\310\013)\2772_\205\276\372\305{\277)\026\205\277\177\244\000\300\202\227\030\277GJ6\277q\350B\277\334\370M\277rq<\277\022,\026\277B\350O\277t\247 ?\"\207\236?p\034|\275\247\r6?\230;X?\252\232\032@P\241N@^\376l?\004jU@S\330I@\315\250{@lwr@\224\026\022@u\264\314?5\275\331?>N\306?\303M\275?\207[\307?\236\325\271?\005\320\303?\321\037h?\224\356\376\276\010\372\217?0\261!=\375Co>.S\020\277\010\3427?\006\347\223?$\256\005>@\306\212?\030\332\314?\252\217S?\253\006A\277\220\203-\277\325\343S\277\247\2478?\332\244\210>\200d\"?8\203\213\276\216\016\317\275\037;\262>\264a\205?t\035\353?\026\214\213?\310\014\004>\351\276\246=`M{?H\245l?h\226\312?\364\313\276>=\221\000\277\336!\033?\036\221T?\237\327\364>2t\016?\036\320\225>\000I\206>J\033\305\275\332\033u\276(\235\333\276jX\271\276\357`\217\276\274\002\207\276\336\300\016?h\236q\276\200\037\304\276 \351\037\277P[9\277\\\270S\277!r\"\277\250\022\300\277\275\236\245\277\005;\007\277:ws?\344\320\231>\220\362r=jE\030\277N\262\214\276\304W.\277bp\250\276A\230\305\277 ;\246\277\244\013\244\2774\263\263>\275)\024?\277n\311\276\2208\213\277@)\200\277\216\337\t\277\311\007\014\277\272t#?N\231\252>\002\034\323\277x\331\217\277\004\243\254\277 \030\235\277pP\274\277@3\237>\200\020\215\272\240J\225\277/\003\342\277\260\026\216\277\343\257\266\277!\023r\277\247\207\022?\262\334i?2\306\226\276\\\016+\275\216\303\000\277\216\017\243\277-0Y\277\277\002\025\277\221\207\320\277\304\244*\277\246n\245\276\0008\266;b\027\024?]\275\254?N\331\314?\240h\232?DT#>\204\232\306>\336\310\037\276\352B\035\277\305\n\323\277\214,\210\276WQ\250\277\224\020l\277%\263\213\277\035\303\350\276.\027\335\276\024A@\277\376\003\340\276t\224\273\276p\251-?\370\262\005\276@\314\214\272\005\217d?\332\237z?/\031\207?\021\306\017@^\323\016@_R\253?\350\031\026@:\207\227?\335Sa?vD\253?\003u\363?u6\377?<\314\276?\017\202j?\311\351\375>l\035X\277-\336\212\277\024:(\277\320\253\330=JR\217\277\305\355H\277\010PP\277\016[\247\2778\252?\276\204\310Y?\'\212F?\2572\r?\n\202\211?\330\321\361=a\t\274\275zO\211\276\363D:\277\000\256\265\276\305e?\277X:\220\277\360@\t\300\332\037\342\277T(\370\277\220\341\354\277\206\313\243\276,\026\\?\006\315\361>\271\356\304>\370\203\245>\240\252\362\274\031\244\311\276\232{.\277\n\336\263\276\000\366Y\277\215j\271\277p\377N\277\305\274\034\277\n\256\021\276\247\250\016?!E\222?\021\274C?\276k\310?\212u\302?J\214\321?)_\306?F\360\306?\3728y?P\311\214?\251_\231\277\225\233Q\277\376\360\000\300\200\310|\274\211\324\035\300\275\247;\300\240!\273\277\262\252O\277\225%m\277x\257\324\277\214\363\306\277N\341\342\277\365\'\014\300\211\234\r\300\t\310\260\277\242=\215\276\"\\\221>\306\036\264=\031G\272?\215-\212?\203\225\035?\262J\222\277\356Q\201\277\\V\030\276\016\211\225\276\377\263?\277\024D\360\276\010;\244\277\266r/\277&Q,\276g\3152\277V\217\273\277\252\275\263\277\322\260U\277\204\376\001\276rJ\244\276\001\266)?\236\0373?&6\252?\347i\013@\210\352\263?TCD?@\274\201<\361%\325\276{N\254\276\340\356\024\277\224\233\342>\3468\257?=#\004\277u\242\253\277\251\031\276\277\335\314\271\277\277H\253\277B\312\031\277@}\t\277\205\205\350\276X>\000>m\337\351\275\3558\026\275\3423\010=\371]r\277\222\244\375\276txU?6\275\257? ]\033@\241d\215?\363xJ?\346\353\034\277NJ~\277\222\022\267\277\264\017\311\277\332\260A\300\021\247\216>,\266o\276\362\023\021>\014k\353\2763Z\254\276d\307]\275X\351\231\277\003\003\232\277>0>\277DP\260>\215X\342\276\204\206(\277\t\350\224\276y\330<?TS\021?:\212 \276+\2108\277\350Z\266\277\020\016\267\277\315\007W\277l\301,\277D\354\\>\2279\266?\204T\201>\356F$?\360P\223?\026 \\?\204\256]?S\255D?p3\034?\342\005N?\000+\307?\216u\007@\204\232\347?6\305\373>\216\002Y?,\361\002@g8\350?l\n @z\260\021@A\351\344?\246\274\037@\036\332\310?\201\034\023@\250\245+@\353J\002@\366\237\312?\256\345\257>\277\263W?\311\031\023?\300\215U?\252\320\374?OI\336?\304\034\224?D:l?\314:\014?\254\275[?N\331\313\277\222\255\207\277\226\004\276\277N\310\236\277\366\214\013\300\316k\312\277\300\340\320<hL&\277\'\224\021\300\tF\010\300a\3159\300wo]\300\353f\300\277.F\016\300\032|\345\277\211l\003@\300\345\224?\372\005\241>\374j\007\277\262$\264\277\336U\312\277\336n\377\277\272\312I\300\314\252:\300\342\004=\300!\323\312\277\262t\373\277\243A\275\277\3676\016\277lH\235\277~\312\341\276a\324\017\277\302+\017\2774\2172?=\231H?\016$\252>\0003l;\367\343w=\306s\312>\343\r(?\204\365\222?\204[ ?b\231\203?\262E\232\276\370\251Y\277\241$\007\300\3503\004\300L\010\037\300AV\345\277}V\002\300\312\036\261\277\300J\355\276\"\371\210\277\222\035\026\277\016\3509\276\240h\302\273`\257\230?K\325_\277p\327\213\277\254\263G\276^\245\273\276\242\205\312\277,\337\237\277\270\213\302\277\2210\234\277\001\035\225\277\2534i\277^\254\311\277\206\311\357\277\323\250r\277\221\204.\277f\353\202>\314v\312?D\031\346>\271\246\255>v\002\267?\242\202\302>\373\004\206?P\\\342=\221i\317\276]\335[\277\355\332\313\276P\352M?\372\263\223?\374\335\262?NC\n@\367F\t@\003\304\257\277\\<\213>,\373\326>b\353s\276\207\246+\277\3443;\277\346\365\276\277P\222Y\277\262\027\214\276\370_\231\275\376\363{?<b\013?\331\314\252\276\350\317\345\276\236v4?Q\\\246>?\327\310\276!\257\232>\247\222\001\277\276\232\276\277\346\021\262\277\260J\242\276\013\302\371\276y\210G\277\203f\376?\275\022\337?\0149\213?\022\363\243?\246\177\301>N\270\377>=M\022?\002\010+?\344/\226>\304\035+=\357\201\317\276\020\277\202=j\252\032?\320\224\274\276\025\377C\277(\250\253\277\356eX\277\234\321V>\251\245\313=\233~I?\210\325\014@\272\335[@\037g\370?\326Nd?\203b\260?\010\020X\276g\340\303\275\322\236\000?\261]\231?\345i\210?x\364\201?\315{\200?\023\024\364>:>\302?\016\200`?\310\315\236?0\\\014?*1\230?YD8?\224\331\354>\206`\217?\372b\371>\305\025W?P\212\332=\234\006\271>\360\375$?\251\304\014?f\275\231?\313\017[\276s\344\221?\224tU\276F\303`\277\305\3156\277\366N\264>\217~\357\276\206#>>\236\374b?p\226\254?\320\203\215?\332a\222\277\353h\311\277b\343\333\2770D\332\277\275p\316\277\253d\022\300\300\350\235\277\013\202\242\277\230\034\264\277\220\226\027?\341\334\353?/\323\003@\311\305~?\345{m>\234\3003\275[\337\252\276\222~F\277\376\347C\277\210Xx>XE?\277\0202\004>O\021>>|o\266\276d\261\342\275g%\273>T\225\374\276&\032\273\276\264\017\366\276\376\365\010>\220\013\226\277>\224\200?O\333\242>\002\241,\277<\255\305\276\246\026v\276\006\357,\277Z]\225\277>\005\352\276~\346S?\034M\313?\025\207\276?\200V\211\276\\\305{\276\240\265\225\274\343\3452\277\216N\236\276\243\000\306\277\213a\370\277\026\301\334\277\020\265\374\277\204\344\335\277\257\256\224\277^$\300\277\202\360\315\2770x\022\277\326%\030?T\006a?B\237\215?\272}\203?\327\225\363>\340\022\240?\246\220{?\230\211\305>@\342\t=\037\273\025\277\224\200\236\2770\306\230\276\034\266D\277\250_Y>zg\251>\300,\376><GT?d\312\006>\210\365\250>Z\\v\276H\016\251<\320\206\270>~)\215>\201m\025?\274\372?\277\222r\235\277\230\223\260\277/a\021\277NU\271\276\236Ux>\265\327%\300\022\221$\300\270N\232\276\000\375b<1\241@\277\366\tp\277\320\323\235=\022\004\261\276\307\360X\276X\323\034=\345\362d>\257\260$>\350c\227\274\312V\346\274LX\254\277M0\201\277&\213\331\277;\022\235\277\352\315y\277\\<\222\277\370\003[\276\030\361u?J\2314?\034\014[?`xG\277\317\'\314\2770\306\331\276B\370\272\277\256ff\277j\223p\277\010\325[\2776T\r\2778\006!?G\004?\277|\340\"\276\350T\014\276*-\222>\250\205&\277\256p\212\277\020R\257\277\371t\006\277\374ck\277\375\020>\2778S<\277\033\276\267\277\232\005L\277\367\332\203\277\212\037\345\277\025!\310\277fqH\277\243z\264\276\245\263\006\277\3463f\276\310\031\263>\270\3224\276\354+h\277\014\221\n\276\332&k?\231\336\"?\356\202\211>\202p\352>\271\200\257\276\301\203\305>\330\2146=\375\306\001\277\372\372\341\276\032KC\277\342^6\277\244&g>L\324I\2772\246\177\2776\353\230>\214\010\340\277j\364\r\300u\324\306\277\251\372 \300\r\263\002\300~L+\300\330\326\262\277T\305V\277\t\r\304\276Ej\332?\367\335\245?EH\224?\220\251\014\275\023,\246?L\242\255?\322\032\177?\354\242\270?\272\2342@\315\3517@\234\242\340?\233*,?\307\364\317>\202\307\213?\353\373j?\322\262\030?<\310O?\264\250\346?\257|\232?H\264\342?+N\273?*\340C?\260\224J\276.R\240\277\010\365\216\275\230\262\035\277\224\t\231=:\027$\276\026EW\276\374\331\317\276\035\001 \277]\004\237\277\343w\305\277\020\342\227\277\330~\003\276{o\232\277\240 d\275{\035\354\276\304\2364\277\264a\317\276tR\261\2778M\273\277}\235\223\277\022{\326\277\320\023\021\276\036\232K?\233\002\312?\220ya?\200\030\024\276:a\200?p\017n>\353\307\021>)*\311?\233\253\343?0\320\023@\312}\213?\317\265\302?\264`\250>\310\000\033=\234\327\002?\315sD\277\366\336\265?\3021\004@\266u\204>P\244\\\274\340E\237\272\305\230\241?`\220\356?\260o\355?8\013y>\3424\343\276t!\007\277\204\364\006\276i\006\223>5mQ\277\227\322\016?\371\311\005@\2263\254?\026b\376?\322O\210?8\rS\276\225\313\343\276d\354\206=\235f\033?\2215\252\276\262`.\277\250q\344\276\3269\353>l\033\305?\013\323\231?\200\216\332=\20790?\022\220\223>\244\377\030>\352\260\320\276\000Ak\276\375\323\002?j\372\251?\224\252\200?\333\220_?\232\r\254?\024\307\321>!n\305?r\224m?\300(\003<\\\214\013\277\332\374\337\277\0326\365\2770D\314\277\010\303\347\277\002T\357\277\235\231\243?\364,\'>\330\337l<B[>>\372I\272?h\226N@\330\3570@2\204\014@Zh\036@\316\256\026@J\023\300?&\303\276?\240^\221?\313t\014\277\000\016\t\275\243 !\277\0256!\277Fc\361\276\310\373\312\276\276\223\002?\002\360/\277\256\377\265\277\260\2500>\356\306\221?\317u\033\277A!\023\300C\216\366\277\014E\014\300\200\314\r\300r\270\002\300\337\334)\277A\251\200?\334\024\365?\206\246\231?\257\373_?\277\277\025@5}\010@x2\007@\350Y>?\350\335\324>P\367\200\274\244#}\277\377\220\244\276\017\033\231\276lx\244\275B\344\246\276\250,E\275U\206\355\276\266wR\277\244\272I\277P\362\221\277\261\337\200\277G\310\027\300\255&\225\277T\0254\277S\222A\277\260\220R\275\3430\245\276\3147\037\277\300%\n\276\313\371G?*\241D?<\305\226?<\274\002>\350\037\236\276\032\267\255\276\010\336\035\2771b\276\277\226\274\241\277\354w\230\277\276E\303\277\241t,\300fI\256=\233V\014?\320,\320\275\321\2657?\006\363\310>L\313\003?%>\207>\372G\310\275\200\256\265\276?\261\253?\021 \021@\324Y\261>\031\356.?\310\240\221\275\267\236A?@o\356=\370\223\346>#\344}>w\201\264>\354V\206=d\365V\276\246U\372>t\335\305\275\310/\036?J4\354>\312\033*?\252 T?\260\374S?\006y\303>lBM?\200\243Y=gr\237\277\374\246j\277J\036\242\277\267\303\307\277\004\273\345\276\236dT\277[1\377\277\272t\226\277\030\347v\276=\266\222\277\340\220\255\275xu\022\275\031\332\027\277\343\240i\276&\353^>\032\232\010?\310e\343=\221\2418\277\022p\243\277(\364=\277\002\246U\276=s)>v\224\241?\2237\220?\000\347P\276\003\325\200?\321|\215?\325\340_?\370\005\261?$\247\327?2\n\256?Y-,@\350\316W@\324z\024@\370t\037>\255\316\320\276\\\327\217\277\277\025\357\276\230\027\344\276\367\251\201\276y\232@\277\231\216\274\277\024L\242\277\024#\233>>~\235?R\344\226?\335\324\257?|/P?\001\035\260?H\342[>\344VP?\217q`?\230\240\251\276\016\t!>\034\332\307>@\235<\277\344\014V\277\327\243\223\277c\014}\277~\241\371\2764\224\247=\343HC?\3170\210?/k\211?U\340\037?r\357\313\277\260x\333=\353\331\250\276R\337\020\277Y-\336>as\220?\234\003\000@HUa>F\n<?\350t\217\276\374\362&\277\351W\255\277\304\317\010\277\334\301\203\276\210\233\355>\n\247W?\260\361\006?h\340U?\366\234\333?\211$\305?\250\275a?\300\215\027\275\263\273 \277\354{0\277\222y\314\276\027\005\227\277\002I\347\276\217\354\256>\010\007\013?\006\322\237\277hEU\277\273\327\215\276{\005t\277\274{\017\277\213\334\213\277\366l\241\277\330\230D\276K}0?e0&?\342\016\006>Q2r?\023\360\037?\255.2?*\340^?\313\315D\277\354\222\017>\361\010!?\\\034\200?Y\332[>\216\301\326\276K\310\231\276<\370\030\277\262\301\226\277l\205\017\276\340\271\270\276\222\225\004\276\233\264\'?\177\220\317?(\004\006@H\252\027@}\2233@@I:@z}H@87\036@\345O\334?\352X\204?,\277\216?\303\017\325?\006\372\302?T\270:?``\231<y\212\342\276\313\210\271\277\237\236\007\277a:\271\2775\216\231\277\214\305p>OA\203\2770l\230\277`\267\351\275-\027\003?\030y!\277\317\236\031?\331\377\264? \355\252?\224\227\026@\362\220$@49\335?3 8@\2772\007@\253\257\326?Vo\002@+\025\r@@S\373?\"\031L?\336\332\215?_X\371\276U\261p?(\004\210?\253\276\350>`\346\344>h&\343>t[m>\324\334<\277\334\347\365>\224\002\177?\030\301\321\275sa\304=\317\342g\277\3656,\277\265\367\245\276XIa>H\356\233\274\036\213\037\276\214%\243\277Z\022\023\300\202\317\235\277\332\370\364\277\222\031 \300\305\352-\300\355\310O\277~\344\226\277\353\303\025?\320\'\336?\214\231\203?$\242\276>0\216C?\202\243z?jBz?p.\212?~\357\310?\354\013\325?\363\256\230?\003\"h?5\321\317>\311\350\265?X\014\n@\270\013\t@\344=\342?q\261\330?!\352\212?\200\336\355\274\227\222y\277\212\216\\\277\257?f\2764\201J\276\200\353\360:8\262\205\277-\212U\277\032\307\201\277\202i\n\277\230_\022\275B\013Q\2774\021?\277t|\025?<E\225?\250y\365?\240Zl=\233C\233\277\356\271\306\276v@\201\275t\213S?\030\231)?\302*\203>\032`\215?{\332\241?\272\203\375?\267\246\234?\341\204\307\276\374\241\216\277\255\302f\277\364gL\277&\303\256\277~]\333\277oD\033\277\016\252\002\277X\346\303\277\332y\214\277\312\030\002\300\352\303\223\277\034\233b\277H\004;>*\366@?\010\224\227?4\356\351>\322\340#\276\364bA\277\"\265\306\276m7\200\277\370\365\r\276\'\003\033?\300+\206=\217?\031\300\332iL\300Uk\222\277\024\260J\277\266p\356\277\210t\320\277\240]\'\276v\331\024\2760.\331\275xa\250\274\217`\310\276\342\323\212\277\370\215\240\277Pv\330\276\256\341\341\276D\016\357\2763\005\227\276/\345x?;\007\337?\350;\207?<\235<?\252C(?\014.N?\364\277e\2761\336v?\267\262_?\242\030\232?\204\021\222?m\354r?\360\372\247?a\321\005?M/$?P\345\275>p\244r?\016\r\307?\367\'\242?\234N#?z\365\215?\315\2356?\232\032\023>\203\250\025\277\274\333\271\2764\320\255>6\366x\277v\366\r\300\332N\260\277\204~\033\276\001\326\355\276\224\0059\275\373\017\001\277Bl\317\276\021\344\307\277\346\207\345\277\240\366\243\277X\025\202\276\322J\371\276w\226\314\277U\310\322\277\201\303\266\277\250\177\235\277\253\253l\277\3121\277\276\366>\243\276\240\232\361\275]\255v\277\311$?\277\310\026\227\277\300\014E<\314\0204?0\t\023> \021\270\277F-\374\277\'\324\017\276\300\354\025\277\033\332\362\277\215^\242\277I\021\213\277\246\n\275\277C\335#\300#\346\354\277\347\264\r\300\273\203\003\300\224\363=\300h.O\300\354\3359\300CSU\300\357\"F\300S\327]\300\324\215)\300a\2605\300\241\301\307\277\240*_\2757i\n>\016\216\227=}\247P\277\200\000\007\300\266\337\231\276r\367y\277P\345y\277\t\247*\277\356\235]\276\245\027:\277\205\302\261\277\233\344\232\277>c\201\276\322L\031\277,\245C\277\n\222f\277\340\350h\276;?y\277\227o\357\276\216\201\224\276\241\240Y\277\236\002y\277\330\245\242\277\230*T\277\030\374\270?\310\332x\277D_\336\277\310\340\211\276\270\023U\277\274A\017\300\275\356\005\300\340]\264\277\252t\321\277r/ \277X\026v\277b\r\217\277\215\370\227\277\266\340\355\2778\037*\277\266\355\237\277\374\221\010\277\316\207\030?\254^\t>\034\352\373=j\264\373\276H\331^>\311\315\020>\221p\004?\tL\035?\205Bt?\3603\254>\340\376\'?\223bH;\324\000\217\277\212\247\311\276h\t\331\276\263\214;\277%\376\200\277\325_t\277\254,4>\010\331\320>\310\323\000?R:h?\017\264k?\"j\237?tS\237?\334,\276?#\212\273?\367\206\021?\204\342\313=B\233*\276\021fa\277\220\203\033\2754\317\215\277\300D\263\277\331g\n\300h\0236=\2105X?=\350\270?\"}1@\210\371;@^\232\021@xc\271?\024\342\251?\216M\n?2\261\020@/W\005@\377\314\316?i\360N?\r\242K?\210\360\333>\326}:\277b\262\326\276Y\3304\276\030\317\321<\305c\000\277`\310\351\275+E\341>\316\n\313?0\345\216?U\221A\277\362\025\233\277\376uA\277@\204\237>v\031]\277\004\232\010\276\366\353\261\276\017\362\326>\270\253x\275c,\250?<\037\374?\307\303.@\370\246/@\257\324\023@n\341J?V*~>\236\346g>8\261<?L\335\266?l7\376\276)7\215\277lnK\277\206*\331>V?R\277\265X\220?\330\327\373=\330F2\275\224\352f\276\364\371\307=\263\203\216\277\331{g\277\204\315\352\276\002\207\n\300\262\246\"\300\366bg\300\337\020_\300\303\367:\300(f\302\277\216\260j\277\324\021\277>\364\"\002\277\336E<\276\017\341l\277\344\"\250\277\n]\020\300\273X\361\277\374\003\361\277\300U \300=\265b?ZF,?\037\233\271>\200\034\334\273j\236O>\347\341\001\2774*\021\277\3218\225\277N.\266>\264\325\301?\0246\317?\352\356q@\337!\026@\303\346w?`\2013=\264\204\262>2u\367\276\256\350S\276[\"\220\277\212~\310\277\352Ix\277\024\021\306\277\226\345\316\277\350W\373\276\013\271\204?\302\333\224?\223\252Z?\031\336%?\200$\210?\277\275\342>e\226\315\276d\210\305\276\336\340}>\357\321\210?r&\276?4M\223?\254<3?\311\372\222>\016S\n\277V\274-\277dK\005\276\001\023;?\000\275\177?In\230?\036\001\267?\200\2256>7\'\226\277\350\333\250=N\226\314\276\332\277\'\277\017\355\n\277~:=\276#!\021\276\3516p?\261\342)?2\025E?\256\215i?\220\252\223=\245\216\362\276\340\021\177\275\\\325s\276\333/\246\277\224\234\333\277\014\243\363\277?\364\250\277\365\021\206\277\020Q\002\277$e~\277~\373\352>\362\251<?\202\002H>B\3602?\324~\325\276\211\031J\276`y\273\273\301*\030\277\2301\017=y\337C?\362\024\217?\316\312\214>\332\241\021\277r>j\277P1\301>\332)\236\276^\0317\2770 \374=\256D\306?;\021 ?\340r\307\275,\227\276>\230?\354\276\203\204\365\276(\021\316\277\223\354,\277\370\202\255\277\200.\242=\336B&\277|\324\\>B1\344\276~b\247?\022{\261>3p\227>S\200\260?\300:\006\275\031;d\276n\245\n?@\002\227\274\204\262\236>\333\257V?Z\252^?\270\344F>L\030??\356\001_?\226JM?\240\265\337=\352\237\306\276\202C~>\022w\307\276_\000\253\277\013\031\242\277\304}\235\277\023\326\213\277L\352\252\276\206\244R\276qe\240\277\252\332\313\276\3034\233?\007\216\032@\006\2219@\214AX@\245!\"@l\314\244?\305%\"?w\001)?6\211G?\255\005 ?\032\263\277\276\006Z\014>\246\276Y?\256\242V>\205\0171?p\017\246\276r\3438\277\000<\207;S9V>\214\335\312?@\3460\275x9\236>\366\353\342>\212\316\235\276\023\273\307\277\351y\016\300\272\376M\277\010!\324\277\322\033O\277n\244Z\276\324y\323?\231\034\203?<&0?\207\371\032\277\"\230G\276\220\235\366=\352\013H\277k\270\325\277\300;>\300\244\233L\277\353-N\277\010\227\215\276\353}\r\300dI\354\277\373\217\232\277j}\261\277\310\027\202\277\024\316\002\2761]g\277\210i\233\276\213)\274>\204\2542\277\211\214\\\277H/5>\266\376\326\2760\216\376=v\327r?\302H\242?w\251\202?\r\311\327?=x\030@\314\327\373>\226\343\014?ka\224\276\231\034\256\277\242A+\300x\274\336\277\302\002\331\277\355\302\263\277\2177\005\300\256\005^\300\035\327\017\300\022U\265\277\220\246\014\300s\365\'\300\334\246\002\300\022U\251\277&%\366\277&\257\336\277\224\330\030\300\010:\035\300\246\025\221\277\023IY\277\"\372\226>\346\307\363>\t\217K?t@\377??m\304?\341U\225?&\320\214\276\213s5\277\230\000\375\276R\014\311>\214\272\244=Z\2769\277\243\253\251\276\276\2300>&>J>\252\217\016\2773a\317\276\256\306D\277\"\250\324>\332\000~\276\005\005\307\275\225\t:\277\021\372\256\276\273\243\221\277\000\344\350\272\3700m>l\277\301>\343\037Y\277@\222\356\274\247\330\005\277\354\031\223\277I\274\363=4\025\333=\303\252\t?\224&\206?t\253\254?t\254\356?\017\r\212?\360m\310?&Q\265?\3268\350?1v\005@\n\201\036@8k\004@\031\036\262?\006\300c?\300\256\342?\334\323\241?y\':?\2729\367\276\210\271\034=k\353L\277\373/\271\276jm\035?\250e,=\270[=\275T\372\212=\364_\221\276~2\266>\177\020\365?\014@\313?k\034\353?\340\246Z>\314\010\263\276lI>\277\305\2168?{^K\277\310\336\233\277\274\277\252\277\352\354\247\277\307\231\204\277\356\324\205>5\3576?\001N\256?\356!\203?\232\260:?\320\367\034?\366=>?\022n\213?\021\327\344\276x\\\327>xu\276\276\344\020\336\276`K\033\274n0\324\276.6\333\275cT.\27627\313\277\003\204\200\277\362\246\216\276\234\035Y?\260\333|=\202xC?\226\375`?\313\355y?z\313\037?&\216\226?\260\361\274?/\343s?`\217{>+06\277E\016\266\277\203w\257\277\315\231/\277\224N+\276\000]\301:\377\003\210\276{Av\277\247\361\213\276\365=\231\277i)5\300\303}\013\300\036?\365\277\340Q\241=T\005\267=\325\336\224\277>w}\277\241W\362\276m\304\252\277\3265\373\277\250\244\214\277\226L\277\277\246\361\262\277\342\024\307\277\272)\n\300f\004\255\277\030\230\032\277it\240\276\242\203\\\277\260\222;\276Q\264 \277\344o@>\262\034\353>Tb\330?\270@\355?\240]\031@\377\256\355?f\343\010@\217K\303?\004%\201?n\276\244?\306\327\263?\236\275f?\226\327\177?\020\235\321?\3532\336?\271\374\231?\226\353\031?t\362\260=}\013\301>6\332[\277\264$\330\277\247\371\271\277\326k\027\277\006\002p>\211\253\242?6\242\252?\335\266\r?\003\321Z>@v\212\277t:\275\276\344&\277\276`8.\277@4\226>\032\271#\277q\365\371\276\370\251\227\275\217!8?\364Ld?\360\013M\276\240\370\220=N\265\017\277\366\361\212?\2245:?\236\tB?\344\033(?\256)\315\276\024\035t?^\346\006?N\246\200?\366\343\203\276\300\277\225\276x\002\240\275\016\302\036\275qG\225>q\230\212?\250\311z?\222A\322?\"&\244?Bi\020?\210\024\366>\032\215%>\222Q\026?>\003*?\313\344[?\023\357\370?vF\236?\256\221\315>\342\'\234=TMS?O\021\257?hv\340?\370\222\302?\2367\235>\336p\204=\000yi\276E\344R\277\247$\256\276\327\360R\276\200\367z\275\332\212N>\346q\224\276\356\313J\276\300?3<\3356Q\277\205\333\020?\322\027\r>I\030\214>\324\326K?\240\177D?\350`\016\276\302\252\315>\317\035\270\277\036\210\220?\250\251\216?\370\350\333? \203\252=\346\003\\=l\252&\276i\332(>\241\377\000?\333 \030?\010\363\005=\300\301\007\277\320\346\242?\200\036\237>\231Cu\277\000\2707:@\356\361\276fN\010>f\362p?\200R\210=\366xt\277\2048\305\277\027\372\366\277\371\302\266\277\247\322\n\300Q\234\225?\305=\205?@\350\024?\236vp?0:\356\275x\331T\276\3471[\277Z\223\332\277\n\322\277\277\340!k>\342\034\357?\265\263\266?\370e\324?)\266\373?\240\225N=\254\2449?5\360\005?\t37>g\332v?\037\034\243?\360\344\246?@\377\022?{\027\315>rUO?\233\272u>\350J\004?\006\343O>0\235\211?\206\361\273>\234\367\026?J\004\261?\252Y\341?\371\261\347?\306\314\212?d\014\335\276~@\033\276B\355\006?\200\370\021\273\240zD\277\022(\212\277\210#\313\277\022\020[\277~\354\270>Tz@\276\010E~=$\360P\277\337\336\027\277\360\'\265\277S\1779\275:.i\277z\312\204>\244\204\333>^\334\324>\336\265\207\277\200}l\276I|j\277`\210\007\276\200\275\\?z\253\303?\275S%?\375\312\320>\377\337\001>\315$B\277@\360I\274\207xl\277\010\322d>\342n\234\275\224Fj\276\204\331\256?\026\023N?*\337\300?\307\001Q?52\250?\'X\213?\007\212J?\210\367\204?\304\234\023@\340E\270?2\245\n?\220\245P\275\345LD\277K\372J?\026\031\204>y\316\n?_a\177?\340\\\372<\256C\342\276`;N\275\036$\205\276\037\332\225?\332\360*?\234\244i?\010\321\375=>\253\316\276\271\033O\277J\302\327\277\316\016\272\277*f\324\2771u\261\277\366]\r\300\260X\326\277WA\217\277t\247B\277\334pf\276G\352\373>@\\v>\344\310Q\276\207p\323\275`]:?\266E\000>\357/\246\275{\242O\277\305\263\004\277\371a\351>\342f\016\276\377\002\307\276\004\3068\277\300\212\223\275\360{\340\277\340a\253=\023\366\\\274\013mW\277W\337\330\277W21\277\373\303\037\3005\203\377\277\325\346I\300V\253\034\300\343\370\022\300\270\341E\300L\202\311\277\274\226\005?\002\2412>\265\r[\277\022\234\302\277\016\315\276\277!_\002\300\231\322\336\277\351\223\274\277\027\006\263\277\222\013\363\277\000\222x\275\322\272\342\275\265\257w>,\274l\277\370\331*\276\344\264\271\276\361D\260\277\314KR\277\014\340Z\276\275\013)\277\201>\223\276%\344\">LO\030\277\037\363\004\277o[#\277W\277\337\277\343\252\016\277L\265f\276\325\366\256>\nE\010\277Z0\177\276\306&\317\276\032\366\030\277\205\323?\277\202@\362\276,\244\351=Zn7\277\035b@?lCU>\257\320\032\276\205\343\335>\344\312\235?\275\302\326?\"\327\270?L\006\342?/$\"@rx\004@\303~\035@\"\343\006@z\342%@\2371\210@\236\242?@V\025_?\200)\304\275\024\036\212\276Y\3173\277\2224\210\277\314\2733>F\367\207>?\355\020\276\262\003\027=\343\307\343>\014}L?2\270\203\276\311\\^\277la\325\276\020NZ=\017\203F?\321G\016?~f\276?\200\244\364<\236\370,\275\000\361`;\001\036~\277\262PW\277\215~\270\277\347/\224\277\350\033H\277\270\324\236\277\014w\013\276\335\343\223>\360}4\275\t\323e\277\347 \216\277\216\365\373\276\014\276\210\277y\332\237\277\210\211\033\276\317\327\315>\n\215\204\277S\317\177\277H\'P\277\210\205\212\277\262\222\210\277\220\002R\277C\"\271\276\304\243\224=N\222\321\275\272\2709\277\026\201\022\277X\232\300\276\266@\030\277\240\004-?\004\203W\276/\222P\277\222\262\037\277\360\'\320\27538u?`\305\360\275\241Y\314>j\024\220=\341\343O?\r)\035?\2051%?*\323\216\277]\266o\277@c\000\277\373M4?G[\204?\227&\n?\020^\254\274\220\240\270>\030\216\362>\355\367L?rt\250?\352\366)@(\271-@\254\351\274?\255\010\301?0\202\273> \020,?\303\234\224?J\253\267\276\3367\003\275\003\2111?\030\310\266>\376\361P?]]\317>\264\370\311\275Z\226\270\276\035\266\264>\207\202\250>\034\210c?~F(@]M\005@8\205\367?\220\r\331?\376\243Z\277\263\331B\277\240\201K\275\352\364\247<\354\322\031\276\377\237\277=.)\235\277\030\246.\277\020\336\377\277\274z\020\300\005\200=\277\364>N\276L\366\006\300\356\344\321\277I!\265\277\200}\032\277\250w\006\277\241q\021\277\257\304\000\277\"\233i\277\246\223\317\277\017\355\331\277X\200\022\300\022!\306\277\337\354\373\277\2346\373\276q\243\276\277\324\035\304\276\374C#\2760\222\271\276\307\256\200\277\234\356\313>\032\307J?\"\373\242?\365\227\247\276l\341\311\277\264u\205\277\214\302\235\276\000v\225\276\320v\230?\\Yh\276=2>\277\340`v\277\033\306\202\277\000w#\273=I\341>\000\236\355;\314X\030<\020\310\001\277X\t\177\277\250\373>\277\312\024\375\277\323I\224\277-\226\367\276\205\036\230\276\306\254l>\220\r\374\274\315\022\232\277\331\350&\277\351=\340\276\214^\211\276\214\315V\276}\313\203\277\004\270\311\277~\241\373\277\272r\254\277\010\205\214\277\001e\241\277\206\n5\277ri?\277\003\177\331\277\211\320\265\277\201\'\255\277z;\324\277\342\300 \277\304\026Y\277\037I\345\277\360\353\342\277\0007\r\300\355M\013\300~\t\267\277\357B\342\277\036\177\n?rM\226?B\236\220?\326s\332?Vn;@\021\257N@a\372X@-\373B@\"7)@\334\234\334?\020\253\272?\300hp?\276\204H?\272\313\007?$0q?4\033\373?\034\322\365?{\376\233?\035\310\241?\034\001\321?P \365?\200\3321@\254\234\307?\214\256#?\\\345c\277\001%/\300\250\266\255\277\214\310\370\276\264\245\326\277\006\"y\277!\020\033\300&\200#\300\214d\315\277\027D\014\277\010\276#>L\207\304\276u\304\232\276~C\035\277\356\234\276\277\003>\377\277\252\304\r\2772\304&\276\352\214K\277\374\263\313\276\355\317\237>\t@a?\313 &?\322\373\256?\336\357\224>\266\225\237?\326\267\002@U\233+@=\355\003@:\013\031@\302\000\213?P\225\014@Lk\366>\362\027\346?\211\206\"@\211\207 @P\305j>\260\224\325<\270>\322?\341\033\270?\313\275s?\365\036\261?\210\004H?0\354+\275\345\353\001?\262,l?\200\t1\275\332\316\031\277\210IC=\345\016 ?7\264\206> \346\001?\260\"\303=\207-!>\306\324\265>\340\352\007\277\000\370^\276\320+]>N\252\244?2\275\344>\246I=?/\023\230?3\272\316?A\023\223?\245\343M?\213\350\233>>\261\255>\252`a?o(I\2772;o\276\277~\307\276\356\206\217\277\262YC<4\337M?Px2\276d\215\242>O_7?\314\250\264?|\375\231>\\\3321=n\274\250\277@\213\314\275\313\206v\276\262t\022\277z\254\020\277\2011\212\277\356\256\351\276\220\271\245\277\2669\205\276.\371\255=\231\252V\277\3229{\277\022I\253>\320\270m\276\301\274\257\275\320\360:\277\374\373\200?\344\212\235>\241\351\205>uy\212?\220\207\323?\034\351\324?\363~\003@\021B1@7\314\021@\210\2744@Q$%@W\273\350?\224\227\037@\230\332J?,\314\025>nN\001>\027\243\200>D\270\364\276w&\310>\014\334\252?B\320\223?\245\267)?\256\366\222?bF\002?,\253}<\350G\220?\370\344\251\277\371\3712\277\270\351\002\277\244\243\265\276{\204\355>\246\334\234\2772V\203\277\032\252\257\277\n\237\266\277\344\017\027\277\005#\326\277(\353+\276\233Jt>\372d\205\276\256h\336>\315\343\034\277\204th\277\240\0003\277\330m\234\277R\306\337\276\367\373\245>\347\365\201?\340g\215?\304\320+>\2468k?Z\235;\277\224b\332\277pr\250\2758\204\006>W\225\254\276\006\356\032\276\356\326\r\277\006%\213?wM\205?\320p\343?2\256U?\250\005\262?}\244e?\243\361.@\356\215\307?~\030#?\367\341N?b\206\325\276\324\337l>\336\327\224>\341\030\273>f\206\031>\355\304\014?\374?\365\275\010\222\321\274\026\241>>\252\243\\?wu\277?\320\361s?\306w7\277P\253\341=<3-\276\007\024Q>\367\2747?\254\377\371?$\351\306>\000Y\014=\353\003\352\274}\261W?\230R\341>\312:C?\026\275\223?(\246\'@S\237J@\250h\034@\343z\322\2774y(\300\202\362.\300\227\372\031\3006}\037\300g\001\n\300\335B3\300\200\306\316\277\247\361\234\277\230\300\022\277\230w\017\277\2266\242\276\201\265\203\276\274z\023\277\374y\222\277\t\337c\277\272o\254\276`\304Q\276\306@5\277xv\230\277\304\242\236\277|\360\n\277\300!\251; \211\264\276\021Z8?\260\247\221\275\312\377\230>q\357\257>D\014Y?\210N\263?\300N3?0*$\275\340\207\223\276\236\246\005\277\000\326\236\277a$\n\300\235>\322\277|\311*\3007\272\001\300\276\223\263\277\030\222\275\277\000w\001\300\220\0079\276.\035\240\276`\022R<8b\326\275\006\344\320\275\200@\327;8\302\207\277\334h\367>\310\247:=\003\267\216\276\350\213\032\277\030\276\255\275\"!\264\276\240\252d\275J\344\206\277\257\307\200\277Kz\252\2770$-\277\274\330\325\276\364s\224\277\226\313\t\3003x\035\300\033I\337\277\361\016-\300J\\\325\277\321\315\247\277\217\355\304\277\330\244N\276@\357\203>\206Z\003?\302N\233>lU\'>\236\316\260\276\341\214)\276\"e\255\276\370\274\215\277\340\242\367\277\340\375{\275\025\376\336\276\202\017\241\277\335I\202\277(+\017\277\212x\243\277\034:\022\277\246P\230\276 .\227>\036H\315>\030c1\275\244\223\311\275N\257\344=\262U\262>\220\375{?\217\256\324>\200+\317\274\010\312.?\366\"A?\326/\373\276\210\373-\276\336[\342\276|\366\306\276\325\"\244\277\340\271\325\277\003:\304\277\200p}\274|2F=\335\006\264\276\034\263Q\275u\277`\276\204P\337\275\367:+\277\357\357%?`+\212<\010,\212\2765PG?\030|\321>\206+&?\272*T?:\345\335?1\254\252=x\273\037\277\026\007\032\277\374\031\337\277:\262\022\300\334\363\237\277D\204\357\277`\274Y\277\224\313\024\277\246\230\204\276\000\301\244\272WiD\277\320\235\335\277<\003\214\2772\200\204\277\256\210\233\276\352\356\354>\031)8?F\225W?\002_\232?\350\t\032?\000(Q\272\377\317\r?\362Z\343>;\253\235\277\230\234\035\300\340\031\007\300\214\214\261\277\375\203\004\300\377s\277\277\302CA\277\034\307}\277\257\354\323\276o\252\240\276co+\277\3243\222\275\370\013\304>\022\2279?\365\251B\277\363\362\256\276\006\331\036?\312\213\223?g\356\004@@\220\242?^\307\005@\215\376\022@P!\363?\230A$@A\306u>Y\"\017?\037\263\243?\310\320s?\3421\312?8\024\271?\210o\236?r\331\003\277k\333\300\277@\343\256<\0010\350\276O\322\275\276\026/\233\276\242h\356\276\242)\002\300\226\225\364\277\3260\036\300$\t\377\277\273\334\254\277\"\354\205\277Q\316m\277h!J\276\304\030\014?\246\205\323?\212.\323\277,K\312\277\360\371\257\275\272E\276\277-\2530\300\364|\344\277\'\r\313\277x\243m\277J\315\255\277\026>g\277T\215\240\276\230\257\304\275\347[8\277\006\250\262\2777\336\031\277KH\205\277\273U;\277\206\333\252\277\226\205\353\276\340\340G\277\350\005\032\300\332\236\357\277\t\246\006\300lJ/\300\026\032&\277R\217)\277$\031w>\216T\000\277\277^\363\276`T2\274:\274\231\276HJ?\276X\330v\276f\325=\277.\317\273\2760\233\033\277\342\220\223\277>\013\316\277\277{\212\277\204\002\020>d\376?>\277^\253\276m;\264\277\025\261\247\277\227\365?\277\224b\001\276\277F\035?\340:\261>\360|\254>L\212\200>\020\312\331\276\300\323\023>T\016;=\364D\216=\333\032G>\227\'\222=\002\\F?\234\210.>!nL\277i\245\204\277\3235\223\277O\352\236\277\205\204\213\277\241K\177\277\337\253|\277\000\023I\277\003\213\217\276B\232T\277\377\207\222\277\204\312\036\276\031#\265=E#\376>z\005\267>D\206\352\275qat\277 \367\r\276\235\227g\277\\\302\201>\032\235\304>\340Hm\2753\356\250\276n[\266>\"\020\004>\226\363t>\200\251\345=\032\230[?\255]\243?pC\036\276\300\222\n\273zVI\275\376[\300\276\\\212\231>\r\322~\277A\247\231\277\210\304\254\275/h\262\277\272^\030>$\233=>\265|\020>\320\366\266?\354B\312?\260X\275?R\370\271?\366\025\361?|\356\344?~\266\272?\327V}?fW\027@\300PU@\231\242\202@\244\262a@R\"?@P\240\335?[<\014@\211\272\324?IJ\342?\271\320-@.\312\366?\246\'\024@\177r\014@\332-s>\350\317\032?lc\257>\262qe?\033\321\226?E\362\251?\006\351{?\365v6?h\352\231?f\216\262?)h\002@\301:^?\034\346\257?\270\005^?\000\300\266\275\027\377\245\277d\017\341\276\n\322\222\277\003a\207\277\006\036\251\276(\002v>$\273D?\212?\364>\006\330m?\267\273\220?\300\234\263>\211Qs\277\350\010b\276[87\276\360\375\222\277\000\020\225;K\360\036? \263D?\177T-?\320G\216\2770\311S\275\377\205[\276\250\211\245>\214\241\022?\016\3742>>\014\345\276\352\342\220\277\377\351\003\277D\337\363\277r\231>\277E\333\315\277j\027\224\277X\365O\277\324\005k\276A\265\230\2759\034\265?\254\016\006@Z\366\222?nS\265?}\263\223?h:p\276\004\312f>\354\340\013\275\226YH\277cj\207\277 \273\253=Z\333\225\277<\355\224\277\333\317x\277\000\254\366\274\327\177S\277N*\303>\365F\220\277\262\373\320\277r\355\002\277\247\024R?F\343\232?\325[\204=[\035\016\277\020K\255\277&\352\200\277(K\333\276\207\367\023\277\270\311\201?hX\204? n\305>(\345\247>\334|6?\200\215\233\274}\000+\277$\2026>t\000\245\275\013\2746\277\2447\005\277\257\r\263>\010\206\221?\250\t*?lT0>\221*b?lWP?$?\277?\332\021\274?\252\213\024?X\317\274>\032\351Z\276\372;\034>T\001\224\275BC\277\276\260\016\377\276\004\037Y\276\355\000\254>\n/U?`\036;\276n~\006?i8\213?\016\261\t?\014rr?}\2376?P\363l?&\034\035?\331\370\212?\347\377Y?0U\347>\035\247\226?\334\215 >\225\216\021?hm\'?\360\033?\277 \316<\277h\201\251>\"\304\243?H\217\233\276V\206\004\277 d\016\277\310\207r\277\033YC\277\272>a\277\214\022.\276\033^\365\276\366\274\254\277\324\316\202\277ZW\254\277\262\267*\300\250@\243\277\232W\323\277f\t7\300E\221\000\3004\343\260\276\347\267g\276q\214\320\274\312\004{>\2501\321\275\025\006\221\277D\021;\277\330\274\\\277V\"\216\277\230E\214\277\324\312\177\277\030\254\332\277\022\345y\277\223\003\001\300\273\211\263\277~\365\373\276\2256k\277^\315\321>\365\300\301\276\252\033Q\277\356-?\277(\004\263>\025\341\220\276\000\257\332<\365\246\213>\336\350\231\276\002\334\336\276\341f\216\277\341\246{\277IY\233\277\227\327\\\277\3046\221\276\312\353\335\275\311\t\n\277\355\022\247\277B\000\034\300\n\213\266\2776\356\260\277\222\246\306\277`\207\304\276t\300%\277\360&\315\277\270\231\325\277\005}:\300\216\260x\300\356\270\351\277\302\370~\277\232/%\277\321\034\022?.\211N?\314\223\030\277\024R\360\276\\0\315\277\030\323\230\276\316>\341>-6\227?tJ??4\2541?\200\367\267>\247\307\362>\241\006\302>\246\227B? \207\352\274\023\326\361>\036\nZ\277Ph\030\277\217\360%?\022\025\212>\360\236\306>\240\312\310\274\2222\333=\030.\226\276\246\224\260>\346\314K\277@\216\032\277\213F\245\276u\332\277>\322\335O?\260\302\345?\n\305r?\203/\003\277\205\016\301\277\360\233\220\275\355\3573\277\234\177\376\275\246T\005\277\240\336\237<N\222*\277\210\001L>[\222\023?#\205\305>W\262\016?\375\210\261?\302%\255?\324\203\350>\3114\247?\3316y?R\333\245?\323H\361\275\'\341\344\276\222\312!\277&y\251\277\265\365\212\277\333%\237\277,\365\006\277\370\201\242\275\337\214\004\2760;\361=\263\306\246\276^6\225?h91>p\234\036?\026C\271>(\324\316?\336\237\210?\013\200\203?\202/\312?\331.\376?j5\260?\357\370\334?\250f\020>\021h\346=\356\243\217?p\270\221>d\211\230>\234\210)\277/7\341\276\302\202\205\277&0\204\277\365v\224\277\216Y\311\276\270w\230\277\177XJ\277\026(\000?\337\006\r\300X\037R\277\244\022\000\300&\210\\\300-\307X\300\367<P\300r\235\346\277W\213>\277xA\245\2758\371\235=\317\325\010?\244 \333\277_E\221\276W\020)\277\335\002\260\277\360~*\277lq$\276~&&\277\300\362\306<{\236<\277\353`\245\277\001\021\225\277G\265\311\277\343\r\312\277\231\342\241\277R\215\252\277}\\\245\277}\010\321\277\026\030\330\276y\277\255\276\200\332m\277h\013\261\275\n\350\212\277\266\\\312\277OO\267\277\234s\351\277\t\372}?\317\236V?R*}?\356L\263?\n\252R?\330\350\221?\006k\341>i\247#>\374\216\246?(\1776?\232\311\017?\250tY\275\361\371\263\276\224\013\001\277b\375\246\277\037\253\217\277#\260E\277\215\354\026\277og\022\277`\263\275=I\305\205\277\\!\233\277h(1\276Gv;\276j\346\200?\026vy? \355,?n\255\020?N\210\300?N\\\314?i\350n?X\351\302?K\214p?\340\215\206?\020\323\235?\031&&\277\244\274\250>\235\224\013?\314\223\257?\010\024L?\3647\317\276\354\332\372=\250\216\335>\0074\261>\357\024\233\276\252\3172\276Xg\372>\271\003\215>|\003c?8\311\362?\241^3@\006\030>@UF\010@\3070\272?\226\3639?UD\354>bt\225?z\345f?e-\026?\224\302n\276.s+>\313\237\222?\200\315\213\274kR\375\275\303\223\003\277nON>Y\265\232?\356\243\004@\370\2200@\272R\035@\270v\014@\320>\241=\026$\313>\3669\004\276\343o\247\276\344\203N\275\3244\305>\235\273\333\276\274\022\225?\315\367\332?\252\337\016@\227\221\005@\n\350\256?\237=c?\236\036h?E\320\277>np\275?r\341\\?\021.\t\277^\024\034\2768AB\275\\|1\275!Rk=\343\211\307?\024\337\002@(E\204?\371\031]\277\300\365\315>\244\312\305\277\304\025G\277\311\254\014?bVW\277\330\205!\277\276H\206\276\372\373L\276\300\001\366<\345\345A\277\016\236\270\276\204k\353\275\'F\216\276\340\002#\277\035G\223\277~\235\312\277\211&\022\277\244\356[\276\356P\037\277\232Q\000\3006\222\336\277\310\352\273\277\257\022\253\277\013j4>\303\235\374>&\315{>\226\2172?\220\323w\276\n\033V>\207]\204?\002\370\'?H\020\035\276\256\0338\277\256h\376\276\025\020\177\277\220\201\017\276L\272\320\276\320I\"\277z\207\315\276\242N\360\276\344\233\266\275\376\356\244?\262\207\254?\350\212\307?p\366]?\261\002\001?\255\374\306?\352\220&\277cn\037\277\365\\\364>l\316\357>X\036\356\275\2310\322\275\014G\277<\013U\270?-0_?\344\030j?\2208/\275\274\016\003\277\215}\347>\030\037\230\275\240A\024?\227*x>NUp\277 \037\010\300i\016\272\277\304\374\301\276\340\301\024=]_\335\276\302:,\277j\200\276>w\204\315?\346(:@\261S\356?\344\026\036@pN\010@z\227\371?R*\226?NG\365?\233,p?\336\225\317>\024\363{? \375\223\274^\232\375\276o\253\032\277\314\333i\277\360\305d\276\320lO\277T;\224?\277E\335?\202u2@\262\020/@\240\232\r@\n\346\373?9\343\363?\221\263v?z\222w?\266p\320>\306\224\361>l5=?@\030\250<]\220\251>\300#9\277\317\007$\277\034\211t>\300U\t\277\220\312\007?V\231<?\274\350\303\276\230\250D?W\251\202?+\177\030?\236\tj?\266\373\314>Z%#?)\312\254?\'\260\241?h\203\264?\301\203\000?\312\2732>\240\357\362<r\263k\276n\340\362\276\026\2436\277vU\227\277\317\2705\277,\336j\277{\226E\277F\201\337\276&\363\263\277`\253\006\300\000\363\017\277\332\316\256>\210KT?\356\027\325>\310A\234?\225\"\244?\350\222\026>0\205\023?\244@]\277\372O?\277\370\270\242\275\304\327a=:\253\322=\2352\342>:\"N?\314\216\236\276\265\274\242\277\262/m\277\025[\321\276\251\276\315>Lx\340=\252\333\217?\333WK?\343\371\260>C-\221>+\363e?)+k?F\377\214?\334k\253\276d\037\020\277X\300\275\276\274Kq\277\021\366\213\277\303\031\355\277\336k\020\300\362\271\205\277\020\317s>\377P\016\276@>t\2761\351\034\277v\306\305\277\241\360\311\277N\351?\277\310\\\330\276\372j\360\2765w\003\300h\023 \300z\365\353\277\220}\004\276\262\030\r\277\326\335\202\276\273[\317\276\236\t\006?30\201?;\021\344?\306\336\245?\336tH?\000\203K\275g,\243\276\364)\\?\237\036-\277*Q\323\276\260\377\237=lX\003?L\024\323\275\344\226\202\276r\025\250\277~\252F\277\322\005`\277\216\361\032\300f\371k\277|+\023\300\370g\261\277\226\262\363\276\246\255\002>\340\363\323?\2000\"?\225\3576?\304c\270?\240\266\214>\230\255\010\277\020\246\212=u\026\215?>\017\016@m\243\307?\301\361\035?\261\363\013\277\211U\232>\220H\217=(\345Y?J$\330\276\270\272\223\276\216\315\265=!2\206?\000\207\344;@\\\211?D\027\201?\324N&?^\263\217?\360Y\022?\266\307F?\025n\317?l\003\004?\342\376\232>\360S\312?@s\276?:&\276?D\322\342\276)Vr?\250\270\r>\213~\215?\372\371\237?1\007\270?G\226\277?\307\031\237?\350\023\217?\263\307\245?\301\236]?\240s\222\275\022\322n\276\3227\363\276\242<\335\277\202\271f\277h\205\256=\267\365\213>\010P%\277_\205\t?\034\273\207\277l\035D\277P\263\374\275\313\201B\277\211\t\024\2778+\252\276\304q\361\277\035\375`\277\225K\003\300\002&k\277fh[\277l\330\250\276\036\357\225\277-j\n\300\002\005\034\300$\232\000\3004\230\346\277C\315A\277\020Sw=\274\222\202?4\236Z>\234yq\277\000eB;\232\376Z?g\033\030?\302vX?\370H\376?\340\250F>\322\177\010\276\002\022\016\300\330\356\304\277`\204Y\276\360T\217?\263U\326>\242)\\?\372&\353>\213\374\270>\204\0321\276\255\301\036?\321\350/?h\264\305\2764^\327\276\240\311\314<p\260\343>\264\357\371>X\351\"?\330\376\247?\232\216\350?QQ\364?\220\365B?\313\007d\277\210\234\257\275\224\263\241\276\0034Z>*f\354\275\\\231\240=\224yT\276.\334(\276\227\3002\276/W\215\2770$\017>\320KV\277\250\023]\277\276\013\331\2778\026\265\277\227\330\216\277z\345\213\277\264\362\337\277T\254\232\277j\213E\277\340\0201?\234U\275?\004u6?bwd?t\007^\276\262dF?(3\231?\376+\200?\332\303\375?\360\202\265?\326\334\375?\016\222\371?\022\305\231?YC\202?\310\201S\276C\346\222\276c\2647\277\247E\325\277\342\232\356\277\3533\237\277D\362q\276\364D\357>H\212??\200\203Z?\000Y\t\274\342\000\320=\263S\256\275\344y\304\276\332\322\014\300\t\'\376\277\265(\204\277G[\032\277N\254\007\300@\366b=QU\204?\255&\235?\250\305\304>\034Z\002\277\356\354\200\277d:\272\276\216-5\277\216\006\345\277$7\361\2773\270\302\277\366\235W\277N<\262\277i!\233\277\n\350\311>\031a\365\276\014\242\243\277j\250\026\300,\266\204\277\264\375\251\277\324\223\351\277I\323q\277\340\311\234\277\326f\037?\306\334D>\307{&?\274\005i?\2575j?\330\200\035@\306O\005@\024\362\375?\007r\273?nW\245?\312\004\324?\326\364\337? \353\320=\275\305\331>\336\373D?7\316\004\277P\202\252<\356\206\024?7\346\002?$\324\204\277\364<W\276\364\017\337\276x\234\266\277{K\013\300\207i\361\277\364\3134\277\310i\364>\354\247E?OV\336?7$_?\222\377\263?\300\2157>\006\267|>\276sM> \267\251<\224\276\345>\274\300&\276\034VH=V\374\254=lU\035\277}b\034\277_\t~\276\277\212\n>&\t\246=\200\343\237=\007y0\277\330\261M\276l\376f\277\211\376Z\2776\032\373>\035\305\220>`?\264\277\365\317\345\277\326\177\202\277PIo\277\305\213\025\300\343?\332\277F\373\300\277\027$!\277\226$\332\276^\244\303\2770\334G\277w\230\304\276#g\204\277\340\256S\276(\347\004?\010{\230\275b<`\2774\222@\277F5\243\277\361S~\277\014\'`?\250\245\222\275\302\022\312\276\335n\325\276p\201\247\276\004\017\"?\376\262\255?\255\225\300?i@\367?\000WN?\357\331\203?F\354:?\242\330\263>\351\262^>\270\002\207\276hG\251\275\344\330\212?\006\250\266?\306[H?f7\370?\326q\213?\321:\253?\336\013H?6\"\300?\247d\201\274\371\335V?\360\273\010@\010g\310?\225w(?\266\260\220>\273\332@?\004\r\336\276\362\315s>\026p\023?\002m\355>$\033*?\375\230r\277\023\216f\277\2639H\277\3566[\277\2325\270\277\226\222\007\277P)\337\274zZ>?\320\2454\275K\2719>N\234W\276\260\207!\275\250B\206\277Bl\326\277%\224\246\277#+\232\277\371L\022\277@\344\221\273\220\361\'?\300\341}\276d\223\207\277/<\r?^\344n\276\022>\002\276~\330D\2765u\016?]\271\327>8\376\006=`P\016>\2400\213?\032\005\335?\337`\014@\304\375\235?\\\205\243?\256\025\216?\300+l?\232\222\327\276V\346\212\276\036\265\262>L\375\031?\"v.>*\243\301?\307C\004?\252bA\277\022\367\315\2772\263\275\277T\377\362\277?{\213\277\213I)\277\360\247\031\275\243\306u?p\340\271=,lz\277|\216#\277&\"U\276\235\013\354\276$\2267\277\360r\346=\306\375\244?\324\274\021>]3\224?\257\332\031@\352\r\263?\356]\231>\372B\241=t\335m\277\370\357\361\277\346\335<\277\"\031\206\277\216\252\\\277\271\273\251\276)6\235\277\n,\331\277\357\377D\277d\335\361\275\324J\233\275\n\177\235?l\001\'\276\372\325\200\277\tK/\300i\247\362\277\311\255\253\277\335:>\300\372\'\264\277\037Gj\277\000\277\356;%x\207?]\377\033\2770m\222\276\006\342\376=u\006\276\277\016\306\236\276\364\337\200\276#\215\263\277\216\221\333\277\001z\272\277y\236H\277\326Az\276p\366\006\276\020*`?\240(M\275`\251h?\212\002\236?\336\216\344?X\340\026@\"\306\240?\264\006V>\272\334\336\276o\324\211\277\016\263\013\277\021\244\367\277\010\003-\300\370|\325\277\230Ww\277Z\260\031\300>\227\022\300*\244\277\277@\264a\275Z\311=\277\344\031\n>\353\270N\276\200\272\203\277\377\007\360\276\312\214\272\277iy\216\277S\327^\277\346\307=\277}BL\277/\246\364\277\343\303\002\300\007\205\330\277\002\254<\277\374X\035\277\236\266s>\006\227\331=&\'\205?\370\342\265=>~@>\244j#?\354\237\236?\344\006\301>\300|?<K\252\266\276\336I\330\275\"hi\276\217\346\222?L9\251>\272;\271?*+\221?\342\325\305>\225T\327?\224\005_?f-\277?\010;\215?L\216\343?\366\267\027?\216[s?\261\202\262>\032l\305>FI)\276\225\367\004\276\233\002\210\277S\355\003?\033\226_>\224\366\207=\241\027\231?\252\215B@\233\236\027@\202P\341?:\257\315?\245\210\322?\226\353\330?\200\010\320?\335\032\327?\230u\005@eG\"@L!B?\357\270\r\277^\225?\277V\270 \277Hj\272?r\023\006@l\036\340?>\030\025@\327\305\031@O}\010@\360\301\353>\330\005\244\277T\276U\276#\211\000\277>r\377>\023\026\236?\366V\212>\242og\276\304:\256>B\2535\277\000\264\327\276$\017\340=0@L?D/\303?`;\357\276\220o\202\276\020/\263=\304\212\263\276\007\325\226\277^6$\300\324\222\223\277\244J\236\277p\322\321\275HLC\277\266\356]\277t\365\004\3006o*\300\005#\346\277o\265l\277\237\274\222\276|P!\276<\204\265>\'S#@E\271\036@\311\3530@q \013@\270\355\246?\274\276\361\276\306[\204\277\377Q\235\277\324/\266\277\372,\014\300\r\315(\277`\343_\277!\332\256\277\260Q\306\277[#=\277\373\022\224\277\342M\300\276\314\331\314\276\362W\201>\205\211,\277\254\223\364\277\301\250\211\277\330\264Y\277\030\215\320\275w\211\265\277a\346\226\277\307D|\277\220i\204=\352\314>\275\331J\324>\016\n:\277\216{\'\277W7\002\277b\273\216\277\263\265\037>K\017q?\217\304\343>\204%\312>\0209\020=\303c\273?\240\027\261?\326_\264>\314l\253=kI9\277\2005\230>\362\273\024>\035]\255\276\rq5\277\n\246#\2763\332!?\320<\271<\342\3336\2740\300}\277\372\223\214\276J\322\203\277\367\346\256\277\252\013\037\277\220q\033\300V\220I\276\326\022f\277\306\352\n\277(ta?r\351\366?\277\252e?D\213\225\276@l\344\276\344\262\202\277p\2036\275\241\376\317\275`\225\326>(\274\030?\010\257\276\276x\244\364\275\325\367_\277\254\217\227\277\004\357\263\277\363\317\006\277\006\227\263\276[\3672\277\005\376\032\300\254\345V\277F\251\355\277m\341n\277H\221\321\277\242\203%\300\377\321\266\277p\212\212\277\"j%\300\002\003*\2779\265k\277\374va\277j\265n\277\223\213\023\277.\272\272\277\303\317\203\277\n\227\344\277`\203\336\277>.\310\276\311\212\255>?\340@\277\376$\023\277\3264\222\276\005&\001>`\310\304\277=V\332\277\222\267\241\277[\324\262>4\232\305?\0109\310?\211\337\020@ S\305?\310\236&\276Z\244+\2765\314.\276.\265\375\276\322F\024\277\210L\275\277y\027a\2777\032\273\277\003\355\225\277(\007\232\277x\324\372\277\213*\003\300y[\320\277 /\317\275\t\377\370\276\200x\244\275\221\273\250\277\274\340\373\276Ug\235>V{\017\300\310\373\004\3008\325\277\277\t\264\007\300]\246\334\277\203\260\002\277\254\343\276\277\022\200\025\300\362b\240\277\3402\006\277&Y_\277\214O\330\277&\373]\277\216\341\236\277\225N\225\277`\246\027\277\006y\217\277\273@^\277\363\200\267\277$\323\225\276\363.\351>\243zf>1\rN?\002f\377\276Q\226\270=\340(\034? \243\201\275\271D_?\354YY?hy\213?L\363\224?\031\316m?\240#\365?:\223\314?$`-?\004\267\363>\373+f?D\205\235?0\2233\2756\267\033?\375\024\237\276\242\325\310>\"\260\030?\324\275\377>\270T\230=\364\256\032?\351\035\311\276\245\254\342>\230<Z\277`\276\003=)\357\204\2770#\250\277\034\327\225\276.\036\255>DZ)\277O\347\327\276\274#\215>\205d\032?\350\270 ?\245\000\032?n\247\357>\204\220\025?\332\034f\277\313\023L\277\315\022#\3007*3\300v\343\211\277\0279\213\277\366\324\330>ix\305>*\316\227\276\362\212\330>,\353\037?[\"\262\277B\253\241\277\202\343Y\277\330n\207\275\320\004\203\277\034\306l\276\270zu>\353\357\210?\000\247u?\320\037o>\027&\335=|H\215=\\\212\335>\030\201k=\332^-\276\365D\201?\366P\270?\344\361\272?\274`\245\276\256\342P\277\007\306d\277\246\277\317\277^\266\310\277\333<\321\277\010Y\004\300\030\026\276\277v8\244\277\345oU\277\006\001\275\276x\240\026\277i\232\034\277\034\275\336\276\316\377!\277\250\242U\277\237C\022\277\216i\242\277<\200\003\300~\326\301\277\262\0042\300O\206\220\277\366\314\'\277Fg\345\277\312p\007\277Pb)\277\311\024(\277`,\365\275\374y\206\277\226\204e\276\0165\240=\r%_\276\374\277*=\235\320\357>\364\243\256=\336U\205?\306+\035@\306H\025@\357\235\031@\2658\344?\240\376\250\275\256\3538\277Db\037>\200\346\351>+l\352\276\3545\360>\200%\211\275\030,\332\275\257\177\200\277\257#\220\277\232K\210\277\274C\276\277^\202\262\277\330bc\277@A\"\276Q\201-\277\345L\236\277{\273\224\277!\033\222\277\204w\251>\262N9\276\214\212|\275L\353\331?\022\274\271?/\266\255?\306|\216?B\000\312?\202\213g?\251\3236?\0301\014?\361g\016@\311P\300?\360.\006?\215\235\021?\233J6?p\355\202?\252& ?__\031>m\274\233?\347/^?D\270\354\276\322\205N?\256\244\207?wC\264>v\272\243?[CO?\277-\271?\034y\234?e.\216?3\230\234?np\244\2767W\350\277\347\277\352\277X\263\326\277\256\302\355\277OO\333\277V\304\375\277\200\270\206\274\245\200<>\236\242 ?\030\262\216=\340${?!\200y?\315\203<?\232\323F?T\250J?\272!\351?\034\317\363?\306\003\314?\274\317A?\205;\211>jv\211=8\324/\276\206r\236\276\304\277p\277\010\300=\277\261zN\277\360\376\240\275\352\325I=\361\322 >\211\204\035?\317:\030?4\305M>\365\255w\277\263\372D\277\373uP?\014\212\225\276\213\203\004\277<\"\227? r\323?\245\215\237?\254\242\272?\207\304~?\256\333\324?UQ\211?\231nG?Q)\201?2H\330?\014\340\207?\'.\372?\031\357\252?\230\025\230?\346\276b?\255\2641?\226\377,>\366\301\202?,Re\276Ds5?`z\332\274\241P\211?Ug??\220\223\311?x_\316?\023\321\327?\317\330y?\3547\226\276(E\'\277\024\354X\277<\266\227\277\215\365\263\2773m\212\277\376.\251\277\276\033\004\300\336\244`\2776r_\277\340\255\252\274\226%t\276\r\207#\276\344,\300?\004\214\231?\"\346\233>\356\266\334\275\2669l\276\227\0221>5\316\210?e \344?\333\226&?T\237$\276\376\020y\277\300&\242\275S\016\023\277\327%q\277\010D\271\276\251[\230\276\253\374\t\277\270KS>;?-\277\252T\317\276\200\331\270\277\016\202\304\277\206\232N\277\335\230Q?\330\327\242?,\366\210?\336\016u?\305\023\030@\213\242\267?\341\244\376\276 \373\246<\034Q\000\277\010\000\320\2766a\352\275\034\305\000?\2041\273=\353$o\277S~\334\276\367\321\006\276E?\243\2762\345s>\351k\241>\240\254`?\201\022-?\000\235\027\273\374I\200\276\353\331P>\274\300\232>\025\302\035?zc\261>\253\336\200?9\374\323>\201[2?I\013\222?g\020\345?\324p\025?\030\223X\275\372\247=\277\333\2422?&\241^?lA\r\276\205\277>\276\257\177\246?\360\003\027?p\354\246\274\254\321&?\377\301A?\210\321\n\276\227C\023\277\3513\341\277:\261\250\277>\231\240\277\363\213f\277r\024\000?c\016H?\340\353\231?\243K-?3+\177\277\304 t\276NE#\277\034D1\277\204E<>\204k\017?@*\334\273*m\233\277>\335\225\277d(\014\300bD\037\300\036*\267\277\027d\032\300\374M\355\277\212\001\003\300\276\266\371\277I\272\376\2776\344\314\277\023z\221\277\360=\003\276\310p\202>\213?\273=\315\373\375>4V\221?fE\311>\224\224\301\276\364\316\010\277\330\255\r?\354u\235?\000(\336<\375\367r?\326\344|?\320\377J?\026\321\013?\314\272\307>\272\024^>\217p>\277p\344\260>\025\020\303\2760\211\377\276t\006R?B\327\366>`\014\006=a\252\242>q\221\364>\023\243\002\277/q\301\277@\220\263\277\031<`\277\215\\\020\277\002\361\020\277\240n\007?\340+S\275\210\030\337=L\222v>\275\330j>0\013V?X\277\257>r\te\277\271?\222\277\225\003\177\277@%\301\277\"\357\226\277\252\367>\277\246\215p\277\261\230\342\277\305\254#\300\313\336)\300\275\235D\300x}\035\300\310)\000\300\231\326\t\300I\214\335>@\033w>\256\370\370>\322%o?\032\375\343>\177Pf>Dyp=\'Q\035\277\233\225\326>\221h\232>j\342\255>\331\031\344>\002\217\246?\377\241\320?8\274\030@8\022\201?\352\r\215?MH\002\277|Z\n\277\002\r*?\003\206\220?1+U?w\216\362?\327P=?\316\310 \277\213/\372\276\303\210\375>\253&\004?\036!\357?\220*\306=\017\313\337>\014\335\321?>\264O@\016M)@\326\251\304?\356G\276?\023\034\202?\331\003\357>H\2550\277\240.3\275/\257P\276\272\030f>\235\243\005\277N\324^?\210id>FS\322\275\013\004\251?\356\357\320>\345\273\210\277\020\351\251\277\214B\312\277\332C\266\277\255\261\222\277\206\222&\277-\242\212\276b\001\241\276\315\006\271\277\244\031\257\277\206\311\316\277\340l%>\234@\002?c\354\317?H\013\357?D\263\227?\217\004\000@`!2@\342\361M@//\360?JA\033@\376k\313?\301\177\263?~\256\002?\202\232\003\277\332\025\346>\341\245\226\277\271\003\237\2771 \262\277\202\006\235\277\232\347M\277\322\253\251\277\200\247%<%\004\322\276$\277\316=\030\3322>\220\360\201?\233\010b?\261?8\277\314\221\\\276/+4\277\202>P\277\334Y\204\277@\223\276\277\225\t\202\277\262\233K\277e\016G\277j\023\014\277\323\215\'=\246[\334\277\340\241;\277/\372\337\277\245G\n\277\376\350\274\276\302\006H?\252\373j?\375\220\376>\336V\036\277\316{\276\277<\323j\277\342D\344\277\364\330\024\300+\273\001\300\372\271\266\277))\375\277E\020\255\277\326\205\305\277\227\2314\277\304\367@\277\335\221\322\277\003\271\004\300K\027\346\277^@\001\276l\002a? \025\336<!\\Y\2772x\246\277\250B#\276\026\234\344?\010V\027@\321=\333?\\JX@\232\244\373?\371\232\374?\037\014|?\350\356\216?\260b\216?@\256\016\276c \205\276LF\213>mD\"\277R|\307\277[<\266\277\275\177^\277\014\206^>\0300\341\276\317\002\211?@\216\217<\321\220\033?\364\037*\277H\004\030\277\365P\307\276\364\211B\276\357XV\277n\362i\277\375J\356\277\255\204\202\277\010\203v\2773\007\371\276\254\005\227\277\234LY\277\002\371\234\277^6\217\276H\244\200>B\216g?\270\274)\276\034[\212=\024\241B<b\014\270?\035\300\026?\356\023p?u\225(?\222\360\251\277z\260\365\277\300\034\026\277qB\373\276h[&\277\235?\"?W{\366??\216!?@>X=\014?\257\276n\307\204>\310\204\317>2\332\340>\326\302\355>\242\335\027?\340\274\037>\032\276\255>q\2760? r\023\276dB\327\276\261\306\312\276\000\032\026>H\230\r\300\"%\242\277\\A\270\277HCG>R}y?\0019K?\240t\204>\311\342Q>\032\372\306\276>dY\277h!J\277(\025\272\277\257B\022\277\325\252\234\277\202\\\210>\026n\034>\014\267\035?\306\300\023\276F\260\201>\2405D\274]\263*\277\374d\235\277\334@t>\344.\217? Q\234\276\314\237\300\276W\2648\277V\257\030\277\262\245\330\276\270\333C\277\244-&\276@\360\317>\004_m\277\247\224\252\276>\350\321\276g\223\211\276v\360\324\276\376\270\355>X#\243\275\367]\242\2753{$\277\200P\327\277\026\305\341\277\257L=\277\205TV\277C\035\031\277\307\227p\276$\'9\277\256\010\327\276\222\033]\277Q\324.\277\"\367\243\276\340\016\211\277\002\022J\277\346Y[\276lf*\277z8\214?\300\303\307?\311\273\306?VV\244>+C\215?\356\220R?b\327\227?\323`??\200w\307>{\262\020? \300Z?\230\203\307=WX\034?\376\226t?\230M\337=\326\354\346\276~\307\200\277jx\337\277\254\322\t\277\2406u\275Z\311C\277\221\373\037\277\244v\007?\3574\353>l\270\270>=\316#?\340\337\321?\202J\252?\257L\220?\030b<>MFT?`\332\260?\324\016\035?\300\2409\277d?\031?g\025\\?x\367\224\276j\200#>\322\207H\277\312\370\304\277\226\377%?\340\253P? \301\333\274\033\021\246?6\370\367>\244N\322\275O\314\026\300\353\231&\300\310P)\300\001\364\357\277\006J\324\277\242{<\277\232\r\204\277\303\303\270\277M\375\020\277\240\300i\277\350\366\036\2767\343\027\2761\255\362\276k3\235\277\004\000\031\277mk\260>oW\r\277\013\322\244>,\241\000\300h\207\267\277\210Nx\277\000\277c?:\253\244?\377\344\001@\213\031\212?\277dA\277,wB\277\340\360\027\277\236u\236\277\222\323\231>\'n@?\272\225\204?;\216\341?n*\205?0J\n?Y.\354>\334NL\277\356lx\276u\202\031?\372\203\333>\201\223\320>\342\372\244?2\035\203=c\232\021\277\367a\307\276\373\202\212\276\322\357\007\276\275\264s\277\323\223m\277s-J\277\022\262\227\2764\002M\277\004\020.\277\366\037\215?;;\236?\n(\177?\250\261\177>\200\240\361\276B\t\335\276ffX\276\212\270\241\276\236\2016?\345\363\203?\353\033]?\326\237}?\256g\014?c\2550\276\340\340\034<Qt}\276\241-Q?\216\271\300?\336\342\255?\264I\327?\320/Q>3dF\277\320f5\275.f\212\275\357\341\333>\022\026\003?\216\350\344>\360\020\006\277\"l\221\276\231\2761\300\001Q8\300A\217.\300\302\0164\300f\300\020\300_\376\303\277\017\265\000\300\036\0104\300w\210\333?$\267\336>L\304\207?4\220l\276\177\365\275?\232\024;?\234\214V?pL\302\275\261\t\205\277t\225\356\276\244\274\265\277\327\302\276\277\377\370\320\277\360o\211\276\342x\247\275\225\354T?\366w\000@\243\365U?\323\264\024?Sb\221?\003H\002?z\225F?:\200}?\360:\270?r\251\307>p\254\215\275\340J\236\2773\025\217\277\010\205\327\276\000\317<?0Z1=\270\032\315\276{\000\225\277V\357\370\277\022<g\277\332\352P\2778\264\266\275\265\246\323\276\226\341\010\300\370\223y\277?OF\277\240;\204\277@\254S\277M\211\323\277 E\302\275\004\263\216\276k\216\227?\\5\340>\303\322\254<\24444\276Cmg\277\356\245\216\276r\002\267\276\320\306\342\276\201\330;?\264\202\233?\244\366\210?@\275>\276a\227Q>y\363\375>t\232\363=\2244S?e\270\254?\262u\245?\217p\253?\216\025`?\313U\220?(=\250\275\315\331\034\277\366>\350\277K\270*\277e\254)?\367(\313>%\356\023?(\2255\277\250\356\341=0g]?\013\0245?\366\256\216?:\226c?\271\213\225\277\317\306\017\300\233K\026\300\326r\307\277p\026K>\362\206\017?\260\334\236\274\r\363r\277\022\312\234>\242d[?\310)\345=@0\231\277\314x\264\276\2500u\2776\026Y\277\250z\334\276\035 ~\277\262\334\270\277\242\034\304\277\266k\230\276^\257\001?b\311/?4\030\221\276\0327\272\276\034\341\337\276d!N\27726h\277v\353\223\276=6\245\277F\3664\277\374\201\217\277\312\314t\277\374v\224\277g\302\214\277|u5\27783\246\277,*\344\277\242\206\006\300\215\010\302\277\254%\217\277\212\263/?l\341\306>6\325\343=\356\023\177?\273\313\337?\250j\020@\340\2068@\016\010\010@ 1\020@\250\326\326?\332\371\000?R\261\301\276\266\373\222\277zs\003\300\277\207(\300\014\206\035\300r\223\004\300\206\275\343\2776m\204\277 \024\312\277V\365\373\277\345\303\376\277:0\367\277\271\300\250\277\242\235\362\277\276\262\317\277\305B\330\277\276%\325\277\037\035\334\277\327\263\306\277\316.\337\277$]:\300\270V\r\300&\023m\277\261\2312\277\340[\230\277\334\030+>\'\357\n\277\020U\322=\270\035n<<\275H\277\260Vk\275\031\276\031\2772\261\324\276\366\025\177>p\375\342\275\336*\265>[\335Y?\r\\\005@\363\217\327?\024\270\217?\207\037\221?\367\177o?N\225\261\276\267\014\007@c\261\203?z\355_?p\326\001>\310\031\253<\362\t\010\2757\034N>\023\316N\277\350x\335=4l+\277\2363\317>a>\241?\250K\304?|\251\226>p6\204>>*:\277\210\364\322\277\2761\007\300\216\225\032?\030\260\372\275\352\023\255\276j\323x>\316\2111?P\342\207?6\367\240>>\004\217\277G\333\257\277v\324\316\277\373\365\270\277;q\237\277\314\272\032\276\226\202\014@\340z\000@\020\254\241>\322\345`\276\233o\t?6!\277>\032A\200\277\336\242\240\277\351\275F\277\024\210\371\276\n\267\264\276\363\362\t?|%\351>\267T\316\276\354\231\030?\241kt?\350Vk?\254\315\211?b@\255?$I\271?\276$8?\005\025\247?\304s\361?\037\001.@\245\340\005@\036\356\375?\325\261\310?~\273\013?=J\271?V^\244?le\310\276\222\025h\277\372\002\216\277`5[\275?\\\245\275 \250\027?\234\004\243>\360\271\024>\344\305\357>?\374\277>\376\250|? \257\357\275Q\004\216\276\003\210\004\277\004j\301\277\003\375\210\277 \247\325\277;\363,\277\204\210j\277XzJ\276(\216\001\277\276\2015\277\370\2776\277Y\024\270\277\334\242\326\276\020\306\260\277$kV\277\215\371\307\277L\335\316\277\303SX\3001Zw\300I\350X\300\207\177=\300`A=\300\232o\t\300\236t\031\300_e\362\277pbr\276R`.\277@\235\205\275o\016\037\277C\025\210\276\270r\252\276e\353\275\277r\332l\277X@\372\276\020L\024\277\210\370R\276\261E\n?:\3509?\322\260\235>\370\231\265<\237\316\222\276&e\206\277\300\374\247\276(]Z\277\236\356\225\277@\273\r=\371\326\306\276\304\'\303=\237\353\241?4f\236\276\330\237\264\274\016\252o?W\274\001?n\223G\277\300q}=\366]\216\277\200\243x\277\374\032\265\276c\024\225>U\254k\277<]\202\276@\305\207\277\016\216\211\277\205\030\205\277\224\275\261\277\005\003\217\277Z\0061\300^ol\300F\224j\300\233C2\300\246\013\025\300F\373\034\300\204\252Q\300\350tV\300D^>\300\255m\252\277v\232\276\277\306\013\031\300\037\327\331\277\3275\010\300` *\277\364/\342\276\251\"\343\276\244u\321>\200\006x?.y<?\277Y\255>\315@\342\276\231\033\"?\345\031\316\276\357\t\322\276\250\340g\277\264\210\\\276\262\237J?G\351\022\277\032)\243\276lY\263\277P\316\343\275c\314\266>\246\344\334\276\200\342\014;\211R\266;\016?<?\374A\324=\367?\342\276 U\027=\246z\227=:S\231?\244\350Z>\263}3\277N\310\332\2765(\202\276$\265\204\276dYa=\253E\310\276\n.u\277vv\344\277\006_\222\277L\3364\276b\240v\276\2647\317>R\351\'?\307\330\201?\363e{?\215\200\366?\350\372\257>:\177\243=\355\300\202\277\213k\025\300\207\022\r\300>c\374\277\027\365\023\3005$\345\277Kj\272\277\177,\034\300\232\033\262\277\220\253\304\277^\324\345>x\361\240>`\322\"<\306\346\032>\322\222\020?\366\312\274\277\204-\233\277~.\007\300\035q\025\300\251$\351\277__U\277\202\375\004\300\366\243J\300\216\302l\300\323\315\221\300kik\300s\214q\300\242\275#\300\277w\027\300\202\200\235\277.\024\305\276\214_\230=\202w\267\276\032=p\2774k\207\277\005`\271\277\332\233\227\2778\'\326\275\313\010\317=8\235\361<\021\325>\277\270\342\027\277l\004\202\277y\365@\277;:\033\277\032G\216\277\3102]\2760\333\025?\324.~\276\364\312\"\277.\013H\277\016,\300\277\211a\234\277\206\222\272\277@\334\226\275\265BJ?\004\037\253\276\t\020\220?g\244\303?\0358\000@~\016\340?X\337\370?\3004\351?\260\245\255?\202\274\312?(Z\357?J\200\250?\310x->\231\023Q\276\251\266*\277<\211\371\2753,.\277\316\266\360\277\023\235\341\277\265\265\031\277\366T\235>\254\302\267>r\204}\276&2\314>\000z,=\374\323\336=\014\023\376\276\372\313\325\275\326\266<>2\267\331>\206|\260?\226c\r@\272Y_?Z1\256?\370O\303?\214^x?-\020\200?\036\263\360>\265o\354?\377T\334?\023\023\314?\242x\304?UA\252?\250|b>\273^K?@\226Q\274\236\254}?\324r=>\320\316j\276\316\364\215?\315\232\010?\010;\222\272x\026\342?\346\276\343?n\254\320?\357\2507?C\225\233?\374\235a?b\206\327?2\217*?\234g\211?\203\032\337?\245J\027?F\037\264>\034\312\370>]9\323>\302u\036>hgm\276^s\255\276\340n\275\274\250\370\312>\340VA?\tg ?\200\317\357\273o.\230\277>\212U?\213\332\037?\241\273\372>d\331\006\277f\031\240\277m<\322\277\217(\246\27739\024\277\234\375q\277\005\004\237?W4\241?\312\307\304>v\212\313\277\277\016Q\277\326[\350>(\316\225=xqw\274\234M=?\322>\307>\010=e?[j\004\277\370<\246?\034\016\214>bg:\277\3400\266\277\310]\203\277\340\220\265\277N\264\004\2770i\223<I;s\277\357\201\023\2776\221\302\277\362\232\261\277\236\204\330\2763\334\350\276\340\240\'\276\226\330\272\276\306\255{\276f\252o\276\304\251\315\277\227X\253\277)T\225\277^,\222>\214\266\234>\343\036,?P\036\027=\233\216\214\276\3719\004\277\351\273\010@\210\263\201?@\024|>\360kn\274E\025\000?\306\006f?\032\206;?\302\006\307\276/\205\227\276\264\027I\276}\223\212?\306\317\205?\326\271\030?\356\026\214>(\342\237?\017\002\215?\366\260\345>\037b\216?:V\020@\016%\326?\324\376\347?\246N(@\331g\010@\355N\332?;6\200=y\027\036\277\211\313*\277\320\331\253\277uF\331\277\212\203\362\276\314\031V?\273\363\231?0\222u>\242\017\201\277g\216\372\276\210\361\256?|4g>\261\377\313\276\210\031w=\016\354\004?l\347\334>,@\005\277\330\255>\277\212{\256\277\022[\240\277\324\021\226\2766n\201=\232\004\311\276\201\304&\277\353\035\t\277\235\263\027\300L\272\325\277G\374\030\300\221\260\272\277\210\303\210\277\351%\007?\300M5=\202k\021\277\2345\332\276\237Q_\277\335\315\260\276\376\375$\277\004!<\2766\336u?\215\335\243?\246?n?\373\324O?\352Y\361?\320$\357?\244\3064@;\2162@\276\267\330?s{9>\032\254\375>\034N\273\275\360\321o\277\272\315\257\277\n\036\212\277\224\322y>@\332\025\277J\026\177\277\337\337\243\277N}\371\277\346w\244\277?]\'\277N\034\351\277\020\202\370=\243\";?dBY?C\311\222>c\215n?\326h\027?\367x\366>\017\234\266?\214.\203?\240\210\304?:\331\253?\222I!?\232\312:?\237\313\256?\242\344\237?\022\322\321?Q\273\001@VN\007@\226L\034@\323\313\275?\230\3578@l\345\356?\335\333\275?N\220~?\246\"\035?\200\266\337=jQR?M\306\033?^\t\304?^u\202?y4h?\"\204\244>\245\225\303?\211\t\273?\177\035\004\300\254y\203\277\260\254\333\2776\255\026\277\340@\007?\207&\310\276\256f\313\276\322\2202>\224\324n?\340\350W=f+\264?TS\336?s\330\021@1\030\262?\010\343\017?W\234\236\277\\\237\207\276*e\310\277Y\310\016\300\372\207O\300;M?\300Vm\203\300 ]l\300\323\264V\3005\001\350?\254\265\336?\177g\003@U\321\323?.4\307?\017\322\212?\300\304\250>(\2674=\210\217\223\277`\216\204=v\243\340\276\210\014\333>\235\377\\?\344\215\226?8q\304?\276\037\300?~\315\202?\314\205C?\330^\300>(\307\311\276g;g\277\214P\004\277\307-U\277v\004#\277&#|\2776\212\265\277nn%\277r\263d\277VE-\277\\\"\024>\326\231\006?\004\243\202\276\210\364\322\274\317\032A?\250\264\022>\3102\010\277\033\302F?\030\224\362?y\224\007@\260\313\301?\260\276\002@\354,\006@X\025\207?\333\212x?\266\274\275?b\004\320?\032\2477@W)\027@[?~\275\301\375$?\336\017\216?l\031\223?m<\365>e\377\271?,\213\207?Vw8?/\202\255?\262\326\314>\3422\216>\003\354\246?s4\204?\325\r\230?\363\233\211?\230\310\331?\355.\002@\354+\321> E\351>\347tK?\222\343A\277\304\024\374\275\220\2717>Zv\217>\201\225c<P\3630\277\336\256\223\276K\347\225\277E\024\327\277\270y\257\2766\355`\277tGe\277\254s\207\277\362\206\356\277`t\'\277\204\205k\277\202\326S?\006\267\257?\000\303\026>\374\020\030\276\200\217\000<\371\361q\277n\007\202\277r/\200\2770L\227\276D7E\275 \302y\276$\001\005\275\005m]>\377^$\277\302\375\220\277\241\271\263\277HU\261\277~x\t\300\021\311?\277@\325\204\275\212^\351\277lj\226\277\304\274\222\277\262\r\\\277+\323d\277\244n2\276*\260\025?V8\370>\022NK?`\367\037?\215\311\220\276\217\370\232>0\337\252\277\313\274\206\2776\226\016\277F\005\315\276\2370/\276$(\354=\230 \217>v.\265\275\270l\256\277\021\337\301\277\357\005\034\277T3J\277\304\311\221?H\366\355?\364\021\003@E\350\207?\327\227\232?\330\341\037@,\321\224?\"\025\250?\334*M?0<\000?\024\263\235=z\227\211\277\361F=\277\026k\035\277\251\200\245\276\332^\347\277}/\001@\354Z9@`k\341\2750\020<\277\306\213\212\277*\342o\277GL\235\277\'\202n\277\305l\232\277\370\261}\277l\231\234\277\330\201\005\300\306\344\251\277{\020\273\277F\333\304\277T\336L?v\261\331>\013\001\372>\307\364\350>\037\347\361>R\260\177?\207xk?\250\226\030@\271\215\035@\312\034<?D?\235?&\250\347>?l\241>&\215\204?\242\217\326?\312\035\235?\364g\216?\016)\312\276#\250\177\277\355~\t\277\343\312p\2774\232R\277\211\341n\277\000E\221\276\2023\347>\333H\177>\213\325y?\316%\026?\322\223(\277v!/\276\374\377]\277\257\357&\277.\345;\277\033Y\255=\372\214^>\224\005\\\276f\264\217=e\202\334=\275\307\252?r\374\370?\332\023\201?\270I\026>\262\231\272>\370\245\037?4q\006\277\222J$>\230c\005\275\241F\201?\3120\201?~s\260?\357~\262?8B\312>\037&\032?\376\351\032?\370\2279?\360n\017>s\306\317>\261\372\245>\264\220\213\277\316\372\177\277\373\355\230\277\210\273\215\277\277\n\001\300\227\361k\277I\366\332\277\326\2249\277\022(\261\276\320d\037\275?\260\233\276,\353\312\275\033\275)?4\227\022\276\035\300\251\277\263\226\265\277\200\242\353\277\251S?\277\366\200\223>\365\304\340=\374\345\016\277S\313\244\277:\\\331\277\230z\345?\372\201\237?\375\r\323?@a{\276\234\013K=\274vG\276\272\305,\277F)\235\277\326I\231\276\376\004\270?\224J\372>\256\243\224>\354s\240\277\260\222\245>\026\266`?\315\313k?\027\207??8W7>0\360k?;]R?\325\205\354?\004\267\340>\226y\017?\206x\335?\301\203\261?a\010\232?\244L\251>+5\356\276\337#T\276\201\272b\277d\250y\276D\205V\276\351\323T\277\214\226!\2778\256\325\276\022j\247\276.IB\276\237\314C\277\345\351`\277\000\201\346\275~\226\t\276\362:\004?\220\376%\277b\235D\277\362\310\355\277\360\032\325>\005@\312\2770\243\332\277\0212\006\277>\254.\277\314\237\330>\000\000\035>=4\250\276\324I\334\276\304\277(>\360L\302>\014}\273\275\337\340\006\277h%\357\276b\242\267\277 }\313\277\302\223)\300j\013\246\277\027\330W\277\030\210l\276\"n\205\277\347\036R?\220\245\337>\221\222(?\210\301\341\275\340\027k?3\353\026?\351`\327?\024f\001@\21213@}t\236?!\314c?s\211\257?\364?\r?\235E\010?\032\022\254?P\000\234?\223\332|?\275\246\035?\311\2010?\210\257f?J\206\310?=Y\314?\276|\310?\312R\272?\326\204\236?\000\212\"?\206\240!@\244\346\215?\020\261\373?\201\234}?\334\304\027?\276\237V?\324\345|?\n\253y?\264\377H>\324\344\271\276\317\3207\277x\037\251\277\377\251\246\277\010\254\221\277\315$\303\277\024\203\023\277\317^\240\277j\352\311\277\314\215\020\300d\221\236\277&\3663\277\357\3553?_\311\202?\262\202\024?2\345\200?XC\272?\214Y*@d\327\257?\244%\231?\345\342\342?\342\267\273?|\363\035?|e\264?\312\321\337?\254\237\304>0\262\236\275\276\370\322\276\345\323\210\276\270\304??\252\271}?\254\214\033?B|e?@\332\217<\236\307o\276\225!\024\277\334\026b\277\2249_\276\211`\372\275v\323\352\276\210{\242\277@\231\016\276u\375\332=\022\374\242?\345\316V?\220>\332?\312\223\241?\300\226\223?pP\262?\261\301\003?\026NI>\365\t\033?Y\303\004@\213\031(@\255\2567@\010\233f?^G\243?\020\351\306?\347nD?\324\377\n>\232\254\316?.G\363>d\311\270\276\345/\207\277\320$`=\032\354\013?@\306\245<\275\337\344\275\362\264\275\276\001c\257?\210\270\373>-|\241?X\337/@\004i/@(k\310?\032\025\213?(\030\006@\341\303\335?\332\231\337?,\2124@}i\"@ZH\r@\343\001\337?\364\340\215?\312d\324\276\3117\033\277\000\211\366=H_\300\276VXq>\273\224\036\277@\353\002?\216\177j?\243\320]?\022\013:?\330\275\n@\300\346\322\275,\237B\277\210k\274\275\370\250\034\277\031\350\203>C\353]\277&\007y\277\262\233\346\277:\033\177\277\264(B\276\234F\350\276\236\276\023\276\361\225\342\276(\\\034\277\261c\262?\260\240\224?\302\351\314>\330\323H?\251,2?\256.\355>\307\260\225>\024\231\242?\350x\371>\020Z\376<^ \256=-*\017?C8\271>x\332}\277\031W\211\277\030=+\277\200\213\216<\001\037\362\275\226\006H\276\240Y\343>m\345\210\276\342[\234?\331\354/?\370\251\n>\270l\254>\344\351P?\224YR?%fg?\212\236\322?\216E\327?42A\277R\3474\276\202\343\036?\\\357B?;\350\326>\354\276[\276\261\0132\277\322\267\261\2768\311\025\277\302d\205\277+Y\252\277\300\327\201\277\332-=\277\000\234\247?\342\002\361>L\335\313\275\3162\226\2778\374\236\276\347\200\337?\226S\320>\303\030\213\276e\026\240\277\313ay\277](\t\300\252M\032\277\303\220\017\277\266\255\260\276\200$S\2735\270\276>/~r\277\343UH\277B#\023\277!\026]\277fY\246>\370\260\212\277_\t\022?\251+\207?\003\274P?|n\376>6\020W\276\226\003\353\276@\314\236?V\334\001@\367P\266?\023\375\033?\2355\202?@\256\332=\375\217\307\275\025\007\342=\004\240X\2764\">?\221g\270?\234r\002\277\200|I=\334$?\276\340\2261\274\314\273\">\200\213\331\276\2609\315=a\\\037?\033\242\305\276j9B\277\271]W\277\345\320\002\300\234eG\300\315\036\311\277/\353\337\277\346\035\025\2772\257\034>i\360\"\277\312I!?\372\263\035@$;\357>\240\017\213\274\272(\277\276\213GB?\271\231\237?\\J\270?\2404\313?\341\006\327?`\265\027@D\211\364?\005[\364?\366\364\352?\366f\250?\260\007\252\275\267).?\010\273\306?\330?\363>\216d\373\276-H\231\277\004\275\236\2773\256\007\300\347\316\320\277\221\374\243\277J{Y\277\204\267\240?\303<\247?Z\322\000@\022\375\025@\010@\032@0\360\250?(\201\242?\374\017\215?\031;\312?\275\266\'?T9J?Y\261$?\024Ug?\375\230\222?\362\351\367?\271\232\365?\342z\227?b\262\346?\2320\226?P\223\304>\003\234\242>\231\371\227\276D\013\027\277\234\366\224>\227\252+\277\030\262\345=\224!e\276\014\267\331\277\256\330\021\300\350K\026\277b\222s?h\314\023?\230\222K?\003D\220?b\3527?St@?\002\2237>\262\013\013?\313\367\250?\000\336^?\370\337\004>_\321\004\277\254[A>\265\004\253\277\000\225g=\311\314\225\277`\264&=\356\021j\275\210\244\274=\026N\345\276(,\211\277\265\032\001\300 \317\276\277Z)>\277\312\316\272\277=\221\204\277\277N\231\277R\204*\277l\303\t\277\274\331\202\277\346C\'\277\260\376\223\277\321\236T\277\340gt\277 z\313\277\000\024\004\275\214\235\313\275\226\036\013\276\270\2136>\354\225\216>\002\375\221\275H7\272>B\314\013\300\r|\312\277\222\203$\300\220P\026\300=\003\356\277fD\013\300h\345\317\277TX\355\277\314\017\262\277\002\027;\277I\036\361\277b\252\257\277\030\334`>q\272\253?__3?j\252\363\2761d\200>a\324:>\272 F>\345\347S\277\214\207\035\277J#~\277n\326\215\277\360Ur\275\220\n\224?6\264\003@\245\217:@\017\345-@\0063\364?\230n\023\276\024.\226>`\270\177\276\320\277\204\276\031\332\032\277:H\364\276\355\215:\277\017\003\022?\254o\345>0?\221\276\027\255\261\276q%\202?e\003n?\274\353J\276\221\361\275\275\336Y\014\277\223}\245\277Y\310\235\277pM\314\277\306\344\266\27685\026\277la\207=\244kZ\276Nr,\277RE\222\277o\205a\277h\250<\276\210?\352=f\250\267?\311\226\216?\340\301\020?\270\324?\275>]\365\275\366\334c\277\300\335\221\274\025\006w?\304\312\252?t\312\233>\301\014A>\364\321Q\275\220\010\306\277q\314\244\277\372\332\354\277\3236\005@\377D\021@\367\3211@\220\240\000@\200P\024<t\177o?B?\322?.7\234?\306R\233?\354\237\277>8-\026?\213:C\277<\270\366\276\210{\306\277\032\233\202\2772\024B\277\264\364\010\300A6\201\277\252i\317\277-$\003\277)I\222\276\202\\\307>@>\013=\305f\246>\301 2?\r1G?\022\036q?\"\207Y?\362]t?*6\014?\010\372\304\275\310i\022\277\323\240O\277l\302\236\277\342\237\266\277\253\310\241\277\377\006\230\277.9-\300e\233=\300x\034\376\277\215=\037\300\r\325#\300\001\351\t\300\375\244\327\277t\311\320\277\n#\345\277~\347\304\277<\214s\277\234\241D\276c\352\364\277\032D7\277\022\373\025\277D\326\227\276\035P4\277Ve\305\277\353/\243\277\235\"\263\277\321\206\006\277O\206\020\300\377\236@\300\341\361\357\277\243A<\277\000\000D\273\373\331\037\276\271\316\023?W\036\002?\310\357\r>\234\347\232?0`\361?\266c^?@\3634=l\010\207\276\372C\263?xq\325\276\342\357\332\275$\277\217\276f\334\226\276\213\354H\277\356\273\003\300\317\277#\300\3601\032\300\255aS\300\341\204\313\277\303\234\270\277p\213\307\2778\353E\277\210\n\237\276a\226\241\276\373\303\305\276\203v\331>\230\216J>`\356W\274\327.#?\264\306\257?pR\331?y@\334?\315\272\200?\226\326\347\276\001\nz\276\026\313\240>\320z\231\276\016\337\332\276\370na\277\300\027\230\274F\355:\277+uk\277@\306!<\371\203\277\277\031e\313\277Mb\254\277\335`\t\300\260\246\316\277Fs\230\277\371\t\033?;\263\201?\324~\242?3\022\\?\3578\013?\243\t\247?\017\017O?\\\312r\277\240\346\014\276\317)\240\276~\225T\277}y\020\277\'q\313\277\346p\322\276\254\212\234=\022\271\302?\022\347\024@F(^@\006\254U@\215\340!@\304\002\311?C\343I?V\330\240>dk\357\276\364(\004\276\"e\234\276\234\270\026?\306b\367>\n\260\207>\226b}?)\016r?\316s\251\2761(\310\276\267\035\275\277\204;\007\300<\t\n\300hx\266\277\216\316\354\277\227-\036\300\337\243\315\277 \341\351\277;\236\014\300R\024~\277\206\267C\277\334\nD\277\301\352\205\277\024\252j\277\307\333\210\277\376\322\031\277\314:\000\3002-\020\300\020\357\016\300\010\275\014\300I\037\002\300zOQ\277\256\251[?\024\321\243?@\232\020=\255\234\362>\314.\021?\177\025\204?\324\013\021\277\274\212\242=\034\003K\277\321\036\303\277\032\354\207\276\004mO\276\031\341%?\316\374\030?\231\232q>\002=\304\275X\376f\276\332\373x>*\241\237>,Q6\277\276\310\021?\322O\022>dl\320>P\226\332\274*7\275?S\r\242?ng<?\346\361\027>\273\201 \277H.{>(T\024?E\217a?r,\326?\025A??nz\273?\036\210\013@\207\322\344?\306\341i?\322\201\242?<NO?.\212-?\000\266;\277\322\203J\277\200:\231\275l0@?\211-\242?(\027F?\266C\332>a]\205?|\000\204>\000\353\304\272;\243\333?\256+\357?/\225\332?\036\336\214?`\206\207<\'\022K\277G\277\206\277\320\251\201\275\240\320\220?\222\227\274?\310\372\361?].\320?~\027u?z^e?T\211C>\306f~=\257\\>\275D\311$?\340\242 >\366\212g?\322G\314?\333\367%?2\261\013>\365\221\225\277\030\356\324\277d\243\271\277\272yb\277\204\231\234\276mD\342\277\r\n\000\300\010\375\007\300\2031\335\277\220\275\022\2771\336\220\277^i\243\277\326\032\260\277:\t6\277Ui\224\277\021\030#\277\014:I\277\206\301P\277D\206l>o\273\236?\326\033\372?\364\267 @\231\345\245\277F\013\241\277\013\252 \300\240\350\211\277\305h6\277ry\267\276\324\036\335\277\351\225!\300\340\357 \300\252\004\353\277\260\t}\276\025\3632\277\302{\223?\274\352\351?\034\220\213>Y\006\274?\222ae?\320\233r?x\266)\276\326rb\276\342\373\244\276\213k\311\276\337\264\336\276\304\320\374=\316\000)\276\347\260\217\275`\212`\277\337\210\000?\035\\\377>>Y0\276\250\006\230\274\022\037{=0\336\204?\005\266d?\246 \303?\032M\204?\010\277\247\276\226r\026?\234\010\020\277\340\326Z\277\025\344\003\277$\014\007>\003\033\351>\256\270i\276\203\222\001\276(\370\304\274\252\313\"\277\220i\277>\022\252\210>\252\263\237>\003u\007@\r\033\316?\014\312\230>\334nV\277\\\017\205>8<\014\276\001\273\027\277mP\244\277\302\n\201\277\304bX>\270\320g\277\310~\251\277\222\236`\277CL\200\277\376<\241\276 U\225\277@\266\220\2778\210\304\276\346\333\233\277I\nH?\216aW?Gd\256?j\001\312\277\036\313X\277\373\'\230\277\265\264\025\2776\243\306>\246\177\005\277\034:\220\276\002m\211\277\323\rf\277\260/]\276\257}\204\277\304h\222\276\026v#?\270Si\276c\231\014\277\360\301\245\276\032PD\2761k\204\277\211m\"\300uy\037\300\262\312\315\277jb\246\277\316;\313\277hq\304\277z\227/?\243b|? g\367=\274UH\277\374\373\253\2774A\232\277\357\003\215\277\232\355\317\277\316[\332\276\361\371\352\276\24455\277\3701G\277\016Y\321\277\230\036t\276\312=?\277\221\374\224\276&\351\023\277\005\232\002\277\030\317\257\276C\255\207\277\0057\345\276o\266\014\277b\352G\277 \037\215<`u\224?\210\224\261>\200\\\031\276a\262\252\276\201q\242?n\002:?\331\3602?\224\305\366>Z3}?lz\370>\024\006~?\354lx?*\324\023\277\022\312r\277t\253\334>\240\277M<\371\032\211\275[\364\212\276\246\205\201\276\2720i\277\\*\255\2772\232\312\276\323r\222\276|qb?<\355\213\277\344\203\212\277\0162F\277\274\022,\277\257\257\201\276E\310o>\200\217i\274\030\206\252<\330?\223?\362\376\212?\374\323\030?\337\364\344>P\302z>\377_3\277\342\021\334\277\274\"\345\277\342=\343\277\200\331\351<}5\244\276\026Bm\277\364\211H>\370y\362=\200\336\007?Ko\215?1\201\003\277;+\217?\016\343f?\211\364\334>\326\352t?\034\206P?\324h\242\276\331\014\226>\362d\211\275\"$\212>@\001G?\213T\200> }\313>\232\372T\277)h\037?\006\275\010>\037q\224?1\274!@pg0@\014\3650@\005\025\310?\241\222-?\342p\004\277hn\200>\210\224\005=\222\230\272\276k\240\345\277f;v\277$g\245\277\367\200}\277~j\352\276>\210u>K\007\336\277\236\350e\277\317\255\201\277\262$)\277\260\376;\276$\276t\277d\306\201\277X\257\343\277T/\377\277&\333\005\300|E\'\300\337\240\001\300&\244\r\300|\317\026\300!\227i\277J\251\352\276\025\344\206>\347\330\233?\352@\204?\320\360:>\026\251\262\276$\241\272\277P\305\207=\013\204\221>\377\232&\276\234\360\201\277\020\315\306\277\010\021\336\277\022\272\373\277\303\217\344\277\346\223,\300#\222\003\3006\375K\300\035\rB\300\022\355\014\300/-\003\300%#\342\277\264F\364\277\217\3765\300q1\005\300\364\230\204>\211\376e\276\226\227\275\276\330^5>M\237e?\225\010_?\210\250x?\341\237\343?,\322\263?q\r\225?6\261\243?Zf\005?\255\327&?\226\nr?\344\006,?\212\252\267?TV\365\276\260h,\275\260\030\033? \200\t\276S\004\223\277\211\021\260\277x7\r\276\206\226\022\276\000\205\025\277\326\373c\277\"\356\266\277\337s\014\277<G\251\277\207\330]\277\236\373\003\277 \253\032?\223\371\370?\233\216\014@^\366\006@\231\035\331?LY!@\300.\013@\332\302E@\016{E@\341\355-@6(\023@\262t\276?:\254\241?\037\366e?Q\374!?gw\357>\270\203\332?\333\355\014@[u\311?\242\330\021@Q\254\312?!n\250?\266\022\013?\227\222\216\276.\310\313>\002\332\255>\312\315 \276F\003j?\300|\312?\3106D@l\315\367?xg\031@\344\351\002@\240\316.@\216$*@\262X1?\000G\271\274\3310\370>\020\033\356<e\227\222?\342\0348?\243p\223=\240F\216?\323\335#?\356Y9?2\300\036?\207\275\321?>\027L?(+\223?\215e\233?~\377)?t\345\267>J\303\226=\273\242\002\277\366:#\277\000X\037\277kQ\201\276\256\341\201\276\322\370\231=q\334\026?\212\217\026>h\334\375\276\340\263)\274\336\303\276>8\272\263\275\240%U?T]\266?\226\210\362?\346\030\r@\264=\023@iK\t@\320\365\247=ZO\232?\020\224\326?\265#\201?[\352\177?\252f\177?\354B\010>\216^\304?Z\272\364?\016\303\346?\364\212\325>\354^\227\275\301X\242\277\264\350\237\277j|\375\277\201\221\013\300\206\214\037\300\3222\331\277\356\037I?(\260\212\2763\270\310\277\220\300&\300\250\215\264\277_\022\262\277z\376\371\277\343\237\007\300\220n\017\300c\320\014\300\016\266\213\277\315\251^\277\314\357\014>x\336,?\316\016\021>\327N>\277x\327b\277\240=\350\277J\315f\277p\0357\276M\200V?\216>\337>Z\030\203>`\317\377\273\214a\"\277@E\333<+\334\222?j\315\221>\275\270\230>\342\035\231\276\037\370s?$YT>V\256S>\016\267)\277^H8\277\221\n\177\277Fj\210\276\306\017\017\277\370t\205=\222\017o?\274\204\211?\002\233\246?\302\311\255>\334y\024\277\247\332\242>(\316\261\2754i\233>\016\266\211?E\013\007>\014\346\034\277??\252\2776\250\307\277\227\300\035\277\272\347\324\276\302\221\027\277\004W=?\226\277\264?t\204}?\370\031E?\271x-?TX/>ci\213?p\225%?\360\017\222?(\315\303? \004\327?\010\235\222?\000~\271?\340C\333?{\263\036@u\203\035@\344]\373?V\271\235?o`\302?\313\330\230?\223:\353\277\372\316\304\277\0066I\2770/\376\276\020\363\202=\016\246{?Hx\204?@\244\006?(\361\240?\230\270\202>.go\277(\017r\277\231\251\341\276(y\342\276\353\321;?\260\007\035\276\251\260\216>\253Pe?`Jd\275\206\261\320\277z\221\205\277\267\343\002>\316\267\027=\311[\225>G\362\244?B,\246?0[\017@\030:\031?\000\354\366\273\371|3?6-\304>\024\314\211\277.PE\277,\316\333\276I\027\341>\326\\\323>\333\204\233?\335\031u?\234\252\224?i.\n\277\213\003\352>\240fw\274c\314\201?,\202\233?\342?\360>\312\3266?\246U\232\277 s \300\030\335.\3005d\223\277^\313\275\277\340E5\277P\371}\277B\305\207\277\355z\225\277\252\000\221>\352\224\022?\350\301q\275\363\341s?\262\304{?\344\376\035>\330y\224>&`%?T\022\264?\005u\000@V \225?\255\3552?y\344\233?v)N?QH\342>H\202I=x\211\005\277DD\214>A\235\352\276>Q\207?\321\005\014@\262\3609?\350O\010\276s`\304\275a\276\222\276F\344\355\276P\356\257>\215\"\256\276R\307\243\276\212\350\263\277\364\352q\277\336K\377\277N\t:\300\201\3437\300b\203\302\277l\004<\277HA\363\277\220\353[\300\354\346*>\033IB?v\334\365>.7x\277\0263\214\276;\000\351\275\217:\256\277\240\266v=9\222\373\276^&\343\276P\256\355<+\341\244\277\360t\252\276px;?\336q?>\312M/\277\275;&\277\213\322\007?x\365\r\277o\364\014\277\242\030\242\276r\033B>p\331\266\276\321\317\016\277J\243\214\276\000+\222>H\343\230?\341\371\211?\272!A?\272\227\330?\314v7@\233\254\017@G\214\267?t\201\031?\346\303\311?5\373\021?|y\351=f\037\224\276]F\230>0+\242\275\026\225\031\275p;=?D\265\303>D\360V>\')\276\276\217\025\346\277\305i\312\277\366#g\277\264\362I?m\370\265>),\240\277HQ3>}f\213\2763\221\201\2778\274\036>\323`S?Hos?P\256=?\204\324/?\334N\006>\004\267$?\346C\217?,c-?\022\212\316>,]\245\276\230?J=\272\226^>\361\337\003?dwW?\365\252\255?DU\205?\335\274\200?GE\020\277\306\371\020?$\254\202>\363e\250>\220\206J?\374\260\246?\310\014\232\276(\350<?~\362\213>x\277\"?d<\324\276W\361\205\276\024\216n\276\347\276\217?T\311\024\276\347\350\025?>b\033\276\016mS\277T\013\203\276\206\354\312\275\356\236\037?^\330g>[&\014?\242M\001\277\3370\261?w\204\010@\201\t\202?\373!\214?\356\367\305?aD\273?&k\301?\364d??\200\016\013?\343\235\n@\0338\020@\260\334\007@\236\346\024@\216\201\321?\326\021\364>{\352\241>\'J\334\276\234\024r\277\343S\234\277\370\2542\277^w\337\276\357\371\260\277\016Ex\277\230\262\226\277Bt\247\277q\376!\300\336&\003\300\031\306\331\277)\034$\277Y\303\026?P\213\303?>c\017@\3266\016@]\270\325?\027\024\002?uS\001\300\210\350Y\300b{\336\277\215\215O\277p\251\373\276SG\016?\375\220\010@CD\374?\307}\037@\344$\265?\320JZ\277@\274x\274;\331\n=\326\351\211>\231\234\021\277\237\226\254\2774\331\356\277\002\363\033\300\346\001\343\277\021\205\203\277\004\325$?\206\331\317>\216\001\244?J\305\003@\337B\'@-\017\'@*8G@\357b\266?\'-9?\036hu>\226\324->\302\317E?x\002\312>w\036\261>\355\000\024>\307\032\177>\350\225M?\341\262\300\276{\356\033\277^\220y\277\231\251U\277\240\362E=\036\245.?3\352\310>2\003\303\2762C\010?\022\261\222?\032\345=?l\300}?8.\256?\2543\016?.\246i?\2323\314?\000\003=\274]I\005\277rH\'\277\246\370$\300&\362.\300$\321\272\277XZ?\277.\216\232?`\204J>\337q\212?Ci\232?\010W\247=9U\302\277\366\234\256\277\206\210+\300C\264\362\277\324\327\212\277\236I[\277\231\365\007\277L\2243?\356\2240>\243\321\322\276^t\217?H\212\312?WZ1@\207\205\307?\023\030\316?\320\222\354?\235q\361?\300y\324?T\234\317?\236\335\235?\014s\232\276\244\261 >\322*\374?\215\223\265?\210\367\273?$\314\367?z\272.@\023\223H@\377\035\212?\036~\240\276@\200]\277.\005\310\277\370d\253\277\200\331\243=!v\261\277\250\006+\277\271\307\034\300\260\373\307\2768\031\315\2775lX\277\300\352e<\364\372\032?\353Z\314>8\2566?\023}\246\277K\253:\277\255\337\223\276\332eP\277t\270\304\277\224\204\273\277n!\030\277JT\305?\345\232\206?(\3311?*\035 @d\261%@\364O6?R&\214\277\344D\306>\264\314\024\277\361\277\\\277\316C(\277<\353\321\275\034\236\213?vQp?DDJ>R\334^?\220S%\275\037\021\264\2775\222\263\277Zn\235\277\350\301\217\277\034\032\351\276\002!\020\277\210\255\224\277\337\037\233\277\362\357\222\276\307hT>\036_#\276@\020\204>\343K\240?J$\335>\342\307.>\235\322%\277\223\"\377\276LRX\277\262\336\240\277\256\236\215\276\016\352\347>\r!\225?\212=\016@\231\260U?\347B\376?\300\270\327?RE|?0E\024?\241\232@?\363\3300?i\226k?\332\254u?\\\370\007@\366t\376?\300\r\325?\211*\245?\022(\303?5c\225?iag?H\t\201?8\034\026@\226\002\001@@\031\320>\220rJ?<=\237?`UQ?\003(\270?!\302\201?C\346\003\300\220\256D\300\2075\n\300\003\2733\300@\312\356\277\204\272\030\300\213^\340\277v\030\017\300\2002\215\276\230\025\310\276\"o`?2\207\300>\246$\030@\370\360\016@\275$\031@RL\351?9X2@\204P\215@Cw]@z\rZ@\254\361)@2\205\346?\303\033w?=r\203?\346\242_?\317\344\007?\342o\221\276\363\243\247\276\222z\307\277\344\265:\300\260\255\344\277k\r\304\277\230n#\300\200\224\254\277<\256\263\277\314>M\277\256\370q\277\232\207\215\277\335t\207\277\335\251\301\2762\010\001\277\010\026\214\277\301&\204\277\253\265\214\277\003A\013\300ri\357\277z\342\326\277\326\246\235\277{:\031=\t\205~\277-\372\022\300\217\026\002\300\200_\334\277T\306\007\277\203q4\277\006c\215\276\300q&?\0212\003?}t\227\276 \027\357\276x\376#\277+\035=\277\327\264\013?\244d\274?KZ\313?\342\247f?+\367\214?\030\203\246\276\026\341\232\276:=\023>\0206\250>}\321\342>C\212\204?P\233 \276\332\023\t\276\265\301\367\276\t\035\206\277\220\366\217\277\010\025\017\277\203(\213\277-\334,\277\2633\003\300\353Js\277#\337V\277@\303\374>\352+\n\276>\312\247=\241\207\010\277\020\231\352\274\014t\224>u\320\226\276\224h\003\276\276\221N\276\303\2423\276QwM\277\021\210\210\277+C\363\277\340~\365\276\276\367\251\276\372X\266\277;\303\370\277\254\350%\300\236\235\003\300\220\350y\277|\240r\276G\034h?O\330`?:\000\326\276\212\230\323\277P\\\264\277lVZ\277\314\033\334\277\024T\037\300\324A\t\300\006\362_\300\337\375A\300\366eV\300t\257K\300\263@\274\277\211i\235\277I:\005?\021\275\254?\2406\377>(\254;>\216k\344\276P\237\331>\260w~?&\357f?\205\255u?@\257\223\275\333Y\232\277\257\335#\300\235\341B\300u\034(\300\002$\341\277.\312\352\277\006\366\361\277\360\317\022\300\316v\233\277>p\037\277\210!\202\277h\276A\276\310\365\006?\310(x?w\262\036\277 \023\324=s\272\252\275\233\371s?\260o\364\275\201\207\261\276\350\353\236\276\031\271\216\276{\3717>\3004\275;\2136_\2764>\350>\355\312\200?*)\224>\266\000\325?`.s\276\210$\023\277L8\361\276\\\330:\277\377v\013\277\343\225\203?\376\356-?\266\226\363>\006AR?\353\376\003?+ \310?*\372\260?\350\323\303\276\362\345\003\277\016\032\311\277\240\017\311\275`,0?\032\020\312?\340\007w=\272\223\274>\314\342n\277\201\212\323\277y\332\236\277\032\353\337\276\316mt\276\252_\373>|\230p>5\026C?\373wk?0\366\376>\016\237\353?\356_\264?#\271\232?\0212/?\234\020\036\276\014\214?\276r\305\315>\241\245\205\276\252\335p\276Kye?,\351>\277l\262w\277\304\275Q>F\250\037=\200@k?1\327\356?@\276\010=\r>\353\276\270+p>J\010\017?*\324*\277l\035\217\275\364\241\260\276w\005\257\276\204\\\353\276\271\000\034\277\222\363\341\276Y\231\216\277\304\326\005\3008\236\253\277h\207\336\275\200J\034\277\3664\001\276,#\034?b\350P?\320\311?>\254L\216=\030\361\317\275\246\026(?\201\317\236?\342\363\364>\205\005\252?2x\017@\316\244\007@\246$\304?\326\333\306>0S\307>j\362\212>\264\213\341>\266|9\276\314\313\212?\232\375C\276]<\005\277\374\234\252\276o\333\230>K\235\177\277\376\364\237\277\2116\311\277:5\037\277\030v\020?\326\305\017@\207\253\"@\261\374\361?\361\200\021@\205Q\365?b=\224?t\2558\276\312\227\342>/\327\235?\002\342\327?+\245\364?;\332@?K\\+?\210fP>0\017\232\277K\331\320>\306\333!\276\365\003\030\277\203=\344\277g5\333\277\000\24069\323\321\205\277:\337\222>\204@\356=0P\n?\304\t\227\276$\242\'\277\274\311\341\275\000\351D<D\352\226=D\000\363=\262\026\243?\314;\251\276\244\345\032?\027\202\302?d\320\203?\026,\000?\330\341\262>\342O7\277\353?\203>\224HL\277mZ?\277\034\'F\276\r\257\023?@K\361;\2023D\276 \022(\277\264\324^\277\002$n\276T\367A\275nG\227\276?\331u>\203\231\207>\002\034x>\260\007i\277\262&\304\277z\231\030\277A\367\303\277\346\214\226\277\030\226\021\277\034\304#\276\246V\375\275\315\271!?nQ8\277\243\3258\277Q\310h\277\273\354\025\277\350\314@\277\346\001a\277B\020\263\277B8\351\276\252\013\356\277\354T\365\277\224B\274\276\210\235\225\277\330\251\311\276\300\234R?\225V\273?\330\220\220?\262Q\222?pS\370?\225\224\307?x\371\305?;\255\250?(\201\235?H\374\244>+S\347\276b\357\006=\010\353\355\274\202 \274>`\256(\274E\261\301?L/\346?f`\326?\206j\315?\013\034\302?\210\000\010\277P\327|\2768G\023\277\346\0017\277\340\320\026\277t9\270\276\270\261\n\277\326\014q\277\010\\\251\276\362\352:\277@\210\211=\264\334\017\277\014\253\231\276\356\345\305\275\037h\342\277\021\373\224?\252\247\243?\310A\310\276\252T\370\276:\332\340\276\355\201e\277\304\345\202>\254\330\230=n\200a>^\255\301\275\340v}\276\200|\312\275\215\271\007\2774\244\333\277\261\303\325\277\216\314\255\276#% \277.\347\310>\330j\267>z\021\366\276w\332\006?\206h\204?\000\226\342?\314\272\273?\334\350\016\300+\314\326\277a\037\006\3000\263\267\277\240J\001\276`O\324;\227k\237?\032w\353\276j\017\242\2774*f\277\323\265\214\277\367m\371\276q\372\013?\365)\'?\313kd?$\276\356?rq\320?l\364\007?\247\337f?\270[\250?&\273\371?\206\246\200?\030\377\213\277`H\013\275\262\024\306\277\362\027\021\3004\031/\300\301\263.\300\206ly\300\207\215I\300\003\263\032\300~E\032\300@bd\275bJ\205\277\372$\355\276\353w\255>G\266\034?\t\333\231>wN\222>\272\206\231\276\r\227~\277J\240\263\277\276\347\236\277$\277T\276\364j\002?\352\345\241?\000\233\213?\010\236\260?\021]D?\247\026\224>\362\247%?\300\236\023\275\222\322r>\270\314\365>\nn\025\277Vg\177\277\222\251n\277@\371[\274|Y\001?\364\221\246?\203\233\216?d\244\t?T7\237?\203\360;?\000\244\334<M\230w\277s\327\245\277\343\307g\277\316\322\325\277\360\034\241\276\307z\274>:0\305=U\010\335>\232\333\004?h\237\213\275b8\371>`q\034?\007\240\207?\264@T\276\352\206(\275\370I\350\275\316N\032\277Y<\216>r\341\313>FCl?z3\213?pO4?L\204`\276-n\335\277x\204\234\277j\373\254>-\342\342\276\300\240)=\210\371T=l\212\334\274\025E\277? dG\277\351%\236\277\3205\252\277\360\257\305\275>\342U?\007\364\212?cg\303?X4@@\246s\036@2\367\364?(\306k>s\325N>\'\032:\277\3061\334\276\203\361.?\004\255\252?\372Q\002@\344w\255>4y\200\277\004\0322>\010y\210=\304\376,\277\000\367?<f\244*\277\321\277\014?qB\255?u\335O?\270yr?o\233\200?1\230<?`\323\312<\207\212\035?\332\357\004?e\317\200?\356\277\230?\311\205}?\350\373!>}[\037\277>\025\n?h\004\265?\270\240\326\276\320-m=D7F\277\200\260\201\277\272c\205\277\332\252\313\277b/\362\277\312M\312\277\203\036 \300\3254\222\277\377\210\212\277\027_E\277G\375\351\277~\377\031\300\370\342\224\277\235\334\253\277aT\352\277\2163\247\277f\006\261\277\367\254\201\277F\013\225>\014\256G=\275\314\311\2766\232$\277\246!\314>\275\"\255?\350\224=?\254)\005\276\024\022\257\275\"\230\267\277\310\001\236\277m\222K\277\360R\326\276(\234\277\276\023x\221\276\317\001Y\276\206\345\017>\212 \333\276k[f\276\020\200\224\277\000\004\214<\265\260\254\277\013\177[\277\202z\307\277\252[\277\277P\243$\277\000h\"\274\267\'\254>\230N\324>\367F\236>\352H\353>\374N\353>\216\2747?<\'\252?\233x\316?q\311\304?\255\256\033\3003A\360\277\347\374\306\277N\272\010\277\271\265r\277\2320\350\2778\023\255\277#e\233\277\021\271\360\277\022\274\r\300t/%\300\375e\032\300d}+\300\276T\352\277 \366\255\277\320\254y\277\354\220@\277hD\225\277:\312\350\277Q\236\320\277\337r\266\277\010\320\352\276(\256G\277\327\337>\300\366\272\254\274\225\260\301\275^\363\351\276(\372\227?\252L\243?\364\034\256>\212[g\276\250x)\277\376\2647?\340oR?\351\230\037?Q\216\230\276\300~\362=.;\020\277dN>\276\336!x\277f\223?\277\330\301\223\277\004x\254\2778\027\224\277\215\333\217\2770\023y\275\344\026\307\276\343K\224>\365\360D?\306\247\276?)1\255?\245~\002?\277\tn\277S\216\n\277\000\031\342\274\220.\347:\\\034\332>@\021\212<\334)t\276\002\300\311\276\261\032Q\277\261h\366\276,\230\277>\203\005Z?\342p\236?\343\366m?gJE?\252\016e?+\215\231?\031Z\036? \346O?\224\021j>\200\260\246?\343\365C@\363g\002@v\205\032?\254\2746>y\275\243\276\356\203\004\277\020\037\225\275D\247\336<S\363\346>\3334q>`a\003\275\213\302\272>p\305&\277\'\026o\277~\255\r\277\270\346\277=\264E\377>\360\314\216?L\335\216?X \371> \272\367\274d\0322\277\227\3657\277\247\314Z?D\362\r@\014\367\243?\000\013i\276*\353R\277D\327\006\276\217\300\334>\316\027\260\276\374\240\327\276\365\341a?\006\016\222?\226X\246?j\267\207?s\223\016@h\271\271?\324\251\205?H\004\302?p\237r?\335\314\235?-\276\225?\236\301\207?\001R4?\351\346r?\364\321e\2764\3660=\177\356\361\277*\3629\300\363\202\207\277\026\300\325\277\370\365|\276\350\257\354\274\360\204\206=\274\365\235=\336?y>LM\236>*\032G\277\265X\211\277\"X\241\277\377\222\210\277\246\262\361\276\215d\r?\212\247;\277n\362\303\276\370W\350\276[\216\221\277\023\335\024\300\320\014\332\277\260\325\273\277:\177\243?\240\\Y?\225!-?\024\352\214\276\342\354\245\276\270\263\323\274\270`\207\276\342\275\312\276\313\341A?\370\3027>^\211\202>\315\226\371=\315\221\324>\352\367\322\276\246\354\274\276\016\221\221\277\244CS\277tO\254>\036\025\263\276\252\263v\276\"\234\204?<\2748@)\310F@\027\004\024@\255^o?\2170d?\360\274\341?\005\314\224?\365qy?\233sK?\030\024>?\300\300?\274w\300$\2776!7\276\235.\032\277m\257\246>\037\306\211>\271<*?\016T\307>\\\205S\276H\221>\276\244\025\177>bM\200>\347\310O?@yy?R*\361?\016\037\337?\362\305\352?\240\325\215>s0a?\236\257\177?\241F\023@i\324\367?)\357\272?X\025L>\311c;>\326\203N\277\237b\024?\324\031Q?\355\317 ?\337\233\036?\245\237]?\360\317\205\276\000\210\002\271\277,\335>\252V}\276\202\306x\277\000r\344\277H^\'\300\230\371(\277 \264D\275pI#\273\320P\307\276\340F\325\274EA\213\276Dh\377>\352\002\200?\003f\016?\177\342\275\276\376!\033\277\350\204\226\277\322\254\200\277\240\232\007\275\2402\254>\n\201\331\276X^Q=\305\342\353>\024\273\035?\005\235\277\276\214\325s\275\326\t3>(\2453\277\357&/?\350P\220?\000\310-\2728\361\317\277\347\267\245\277\306\262\372\277\323\014\003\300\200\252\332\274\232\324R?t\370\206?\337:I?\260\277\330\275\253t\206>\032\240\337>ho\341\275w}\342\276[\255\227\276i\356v\277c\307a\277H\216\253=.\226\244\276q(\247\277\224\271\312\276\321\037\277?\206.\t@\346\221\017@\374\371!@~\363u?\320\230\366>\tS\222?A\217\336>\006\200\310?p\t\025>Y\305%?\200~\\?\210\350u?\002\364\224\276\317x\257\2772\014\266\2772\316\357\277\272\341\010\300\302\263\016\300\3266\235\277\265N\255\277\\D\030\277\1775?\277\3438\300\277\327A(\277\334s$>\206\214<\2773\275\310\276\036\335U\277P\013N?\222\022\361>\220\ty\277Q\334p\277\336d\233\277~=\247\277\213S\227\277\363H\315\277\240\335-\300\242<2\277\022O.\277\\\347\372\277>9\222\277c\005\017\300\030T\'\300\354\276\"\277\200\214M\275\262\004\274>\244Nh\276{\0215?\254\274\211>_\'7?\030`\306=\004[\331?\0307\001?\026\2639?\010\033\202\275I\276G>tY\236>\231y\223\277\214\210\n\277^\017U\277\272\257\007\300\024\302\325\277\373\222z\277\245\334\227\277&Hy\277\006\366\207\277|a^\276Ty\225?u\034\r?\324\037\264>\320]\030?F\3352\276Q\374\235\277 \302i=L&\001\277\351.\340\277\326\303\232>1\303W\277\216E\023\277\006\013.\277\256\361\365\276@<{=\356\0242\277H@\304\276\226D\344\276\215\022\354\276@\003(\277\350\320x\276\376\334/\276\257\250\232\277N\213\007\300/s\260\277\021T?\277\340\377\337\274\377%\240\277\264V\270\277x\247\371\277^\226\010\300\203\334\303\277\303,\351\277\217\000\261>R\212\341>\326\013@?\"\246\317?\364\2172@\377\272\024@\332/n@&\301\037@\202\213\345?\344\340\326>\t\265\336?\307\314\r@\311\227\377?R\356\336?X\243\310?Wj7?\254\275\026\276\273lY>Q/\220?S\301W? \250\310?\216\334!@\2706*@kG\010@\253\315\373\277r\014\026\300e\014\001\300\362\231\001\300\333\007\005\300Z\233\352\277\024\n\256\276\030{\026=\026\342\023>\216\367\260\275\226\203\020\277\371\256\005\277\274h\237\277\354\201*\277\305pl\277\n\211|\277\323\272\356\276\210T\211>`.\327>\201(\025?\277_\351>\000nD?\233\310\255?\232H\020?&\312\214>pWP\277\200u\223<\'\331\033\277\006\207\270\277\326\244\253\277\270\345\025\276:\263o\276\274;\004\277t\374\367\275\220`*?\270\236\360\275HD\224=\276{\274\276#*\307\276\210\312c?\224\312\203?\316\256\300?\037\352\341?\020\236\272\275\235i:\277\201\344\002\277\017W\277>\313\231\007?l\365\213>h{\231?\322u\371?\306\226\335?\032\022\320>\334\271\205=\315 >?\210\265\341>\002s\244\276\021\350<\276\370\277\232\277\274{O\277\366\017\003\277\217rz\276>Uy>\247-\n>eE/?\342\030H>\332a\240?\036V7?\241\254w\277m\221V\277\312)\342\276\304\327c\277\345C\246?\254\026\373?\267\217\314? \214\257?]7\201?\210\177\223?,\207\341\276\312\343\022?\030OG\276\340\003\345\277$\036\245\277Q\246\250\277\366\275\200\277\253~z\277\273\302<\277\255L\212\277:?\212\277\r\302\001\277p\250/\277I:\001\277\200*L>\002\325\022\277\224\021\235\277H/\373\277\250\036\355>T&\350\276\305HZ\277\334\002\006\2774\361\251\277\213\224L\277\222\367\322\277\356O\\\277\033~*\277\216\'\233\277J-i\277[Hv\277\245\234\217\277J\300\211\277\252\035\236\277\330\347\232\277\334\361\364\277\334\252\372\277\257 \373\277\256\343,\300\312\014g\277m\362\344\277\233o\003\300\372\263\001\300\222\204\036>\240j\273\273<\216~\277x;\275\277\352\023\330\277f}r\277\350\307\320\276j\202-\277\244M\206\277\251\003\003\277\231{G\277C\361\230\277\005\222!\300:\242\317\277\370T&>\004\010\227\276&\203\310\277Cm\023\277oW\317\277P\346\316\276o\'\210>`\356\224?G\007\220?>\337\204>x$\262?A\237\226?\200\273i=\310\317|?\350@a>\330T\206>$!E>\300\225M\275FJ\342>y\301`?8Z\024\276\266\262+?\000\354\243=\304\243t\276\352\313\237\276\036\267.?D\022\003@f\220\010@\372\035\253?]H\\?\375\323,?7\247\360>H)\022\276\366\333\364>$\277\256\277.\250Q\277\026f*\276\000\307\260>@\210e\276;v\030?[\235\367?P\353\206?\340\357\274=\343\253\237\277\230\355\341\277;\213\032\277`\265\360\274\353\370\">xB~\275|\356\315\276\2301A\276%\215\023\276\214+\353>6\016\244>\360`\312\276i\233\321\276\222\321\213\277\370n\301\277a\026I>\016\347\275\275\250O\177>*\264\005\276F\361\266\276\354\272\375=a\303\013\277\030\245\021\275-^F\276\312\237I?\240L\337>\221\001\205\276\003\007\013?4\017/?\317\255\024?\250S\212=\367\363\t?47\350\275\036,a?\013\013Z?\266\242\027@P4\301?\317U\324??\251\030?\342\201\005\276x\337e>\016T\017?\276N\305>\317d.\2771\367\003\277T\326\022\277\"|\254?\220\370\271?\336\234\361?\026k\312?c\262\316?gO8@\211\t1@\210\001\021@4 \332?\222\245\267?\240\311\005@\213Sp?\317\3073?\202G)?Ap\302>f\255S?d\010\034\276\004]7?\242\013{?$p\355?\341Dr?\334[\215?\302-}?\323\262\257>\274{\014\277\254!\224>f\243\367\276$\262\343\275Y\244g\277\264\364\252\277.\207*\277=|\252\276\360\313o?\3276\226??\300\246?\315\300\030@p\243\337?\363\233\021@\006\352\002@\300#\022@\361\300\234?U\241{\277e\217\177\277N!\332>\013\315\210?D\021z?$r>\276h\273\322=\3716\277\277Vt\377\276\032\320\341\277\367\206\257\277\335\371n\277;_\017\277|*K\277\005\227\037\277\035\335\225\277\230\355\234\276 \177F\277\243,\003\277\255\306\320>\206\260\022\2777\240\027?hT\306\276c<9\277\223\242Y?\214\317@>{\325*\276\304b\234?!\211\276?x\353\257?\326\312\"?V\330\207>)%J?SU\326?\3416\025?\234\271\351>*\t\010\276.\340\027?b\357\204>~\013f?\0202\343\276\022\255\211\277$\353\033\277\347r\353\276\3009\204\277\220\365{\2772n\n\300~\260\346\277\220\245s?\244\275\004?N\244j?\205\304\203?\360\314\354\275\242\356<?0r\211\276>\311\235=\216\030\206\276Z\243\233\276\304\274Y\277\304q\212\277\370\316\373=\177\312\217>\313\243p?\304^\235?\032U\"?4F\224>\232V\t?\212\335T\276b\313\002\277\2061B\276\240\373m>\266\246=?\230\241!\277s\341\212\277\377\306\336\277\322\271i\277\026\2761\277\346\243\374\277b\343\205\277\016\252\204\276\334\t\204=\007\331\204\275\222\314\333\275\325)\213\277\034\r3\277\374O\017\277\250\253\270\277\030\232\027\277H)\274\277V:e\277B*\366\276g?\270>*\370\316=\214\365o?GC9?\310\002%\276\345\2208@\372\376\364?\346\305\r@~t\020@t\200\006@\034\312\272?\364&\327?q-\265?\206\322\231>yh\202?\322\202<?\200\213\270\273Cs\277>\022+\004?\252v\230>\321jk?#\334y?SRr?r\357d?\322\026\233?XT\000?`>:\274\231\340\'>`\020\337\273\277>G>\347\205\310>\324Sq?=\233\020\277>\252\026\277\242u\232\276\260\366@\275\274\"\275=\016\362\031\275\316\243 ?\022\357\277\276\252\322\323\275\370\276\363\276M\365\322\277\250\355\004\276\206\224t\276\362\374\356=\234\270\031\277*\345y\277f\035\234\276\363\260\002\277\306\230\022\277\016\017C\276/\276^?\024\254\261?B`\333?6\330\033@\255\373\021@\264\257\271?\034\026S?8p\213\275\235\253\251>\376\215\321\277\r\233\331\277\032\321j\277\3148\356\277\323\034\t\277<\373\245>DQ\014\276\312\3714\277\216\"\256\277:\250\232\277n\335\302\276\010\205\017\277\261\022O\277Dl\227\276z\322\\\276\032\367\001\276\227\240q\277\255\021\003\300X\032\350\277Y;\233\277\031\023{\277Y\227w\277-K\035\277\355v\203\277\276\303=\277\253\2205\277x\333\222=\277\265d?_kG?\235`\244>\351\336\221>\210\364\345>Q\272\201?\357\034\232?\n{\304>\320\031\247>+\271\201\277\346\203\221\277\375\271[\277\254\024\263\277NS\">\030p\343>mn\216?\230\365g?\002B\363?v\010\023@\313a+@\260\215\003@\324(\261?,&\227?\313&\232?=J\256?<\213\014@\\\025\202?F`\276?\003\213\305?\215\021\200?\034c\240?k\246\323?\271\263\254?\300\"\177\275\375@\263\275$\244\244?&\013\342>U\320\025@`7\002@\306|\035@\305\276\016@\276\t\215?0\215#?X\350\370>XC\016@\271\347\363?\304\360\014@t\263\036@\372l\024?\215\320@?N\031l?\330\027\273\275\353&-\277(\312\201\277\220\221\200\277H\273Z\277\264\301\346>\315\237\312\276t\035\315=:;T>\361\237Z\277\317\326t?!\354\r@\300\224\232=\317!\305\276\377\246\240\277\344\t\302\277\332R\017\300}/\311\2770\246[>\237/\220>\340\225\236\275\240\246\242>\026\301p\277\035>;\277\204U;\277\346\352#\277\020\035\340\275R_\320\2772<\275\277P{\007>\030\313\264\276\302\327\315\277\332\266\006\300|\275s\277\375\316\333>\360\315l\277\355o\007\300#E~\277p\321\025\300`\320k\276#\"@\2773\243Q\277\256\035\367\276m\207\216?X\370\n\276\222\266\006\300\353\312\243\277\262\t\357\277m\200\230\277B\005\333\276\300\266\304>~\244\313\276hpW?\352k#?\201E\303>\226\204\023?^\016\001?\355\n\326\277r\271\006\277\374\tC\277Dc\300>F\242\214=t\200\373\276p\352\213>\222;f\276\370\306\341=gR2\277\324\356R\277\370\345\335\277\356\372\323\277\257\375C\277\0105}\277\006Y\333>\361$\242\276\2354.\277\242\207H\277\330=\340=\354\365\340=1\215\031>\331\373\306\276\315n\035\276\034>\240\277e\322q=\010\004N\276\252?\245\276e\036\276\276>\343/\277n\244z\276\333L\016\277\nj\002\277\343\220~?\003\034\241?\200X\250=\244g\260\277U\257K\277\350\214\250\276\276w>\277\306\241\300\277P\276?\277$\373\350\275z\306\242>j\323j\276n\007\323\276\010\371\277\277\004T\004\300\334\275r\277X\247^\277t\237l?\030xG>\244kI\277\366\361\033\277q\027$\277\336T\211\277N\306\325>mc\311>\021+\233>4\302\240=\356\255\010?z\243\370>y\007\225?\304R\371>\377s^\277\324\236~?\272\352*?\372\365\272>0hj?\265=]?\300\363\207?\020>\266?\0247\315\276<\353\257?\004~\035@\260\226\233?Bu\265?\247 \240?\035\225\271?`\346r?\004_\266?\234b(>\260\033\257\274:f\314=\004\023\026\276\264\325\200\277\222g\364\277\342n\377\277@\237\221\277Zd\006\277\216:\025>\344]\323>\3325M?\036\236c?\256\251\342>\000`z\270{\243\341>\002\323$?\210R\235?\"\377\331?|\005\316?\347,0?\002\031\310\276JNx\276^\312\022\276\255W\232\276\031\313\010\276\017\036\262\276\310\361]?R\373(?[\276\226?\257\035\355>\262\":?I\325\031@\302\007\003@\256 \315?x\200\204?\377\026\'?\343\304\t\277\024U\025\276.\216P\276u\272\376\277\247\372\035\300\034\007\035\277\373\331\335\277+\240I\277\332\217\027\276J\271\036\277\204\302\316\275Q\006\025\2777\301\313\276\026\000!\277Mg\357\276\215q\254?\334U\357?\261\217\347?\331\364\275?5\252\371?\346c\007@\017^\r@\371i\031@:8F?\257@Y?p#\266\275^z\016?\205\374f?\212\032;?\220!\273\276p\024P\277\303g?\277\355H\037\277\242X<\277\362Ph\277d\305\037\276\010\322\205\274\201a\274=\372\362*\277\026\242\234>\264\354\223\277\2126\343\277<\032\253\277%\020@\277\001\254\372\276XZ\371\276\'\371\022\277v\244\325\277P\313\323=?\324\372\276\342\031-?\365N[\277\321Q!\2776\306\276\276\322V\022\2770\267 \2770[\325>p\261\212<\\\2275?\312\354\037>~\030?\277\311\277\226\2760l\240\274;\266\023?\345\323\335\276\024\263G\277\232FX\277|\032\300\277)#\202\2776j\261\2770\251r\277|\260!\277p\031\301\277\005\276\210\277\224bg\276\366E\205>\273\334Z?0x\267\275\025\342\212\277`(\214\277\214\035\325\277`n\031\300d\351M\300\224\002S\300D\323\n\300D=\226\277m\325#?\260E\r\276\004\246;\277\300\365\305<\375\3213?\220\002\212=\257\316\002\277\322\\<\2778\256\325=O+J?@\261\306?\250\343\373?Te\300?4U\354\276\320\372\225\2769\037t>W\215\340> `\364>@\233-\276>\2727?b\320x?\000\311\337\274\365T\303>\214/\277?\274\036\372?25w?\350\010\260\275L\260\003\276\346\005u?\270\"\213\276k\177W\277\264\361|\277\250c|\277?\023\267\276!h\r\277\343\t \277l\330\367\275\276\014\212\277\202$\335\277&\004,\300\237\366\023\300\006\002\232\277\302\273C\277f\367B\277\370\020\276\275U\260\324\276\205C\327>l\233?\277\312\225.\276n\301\351>\372Bs\276\266\321D?\270\313\350\275j\314]=8\232\340\273\030f\034\2772}E>\326b2?\210\322H?\210\215M?M[i?\300\032\\?K\\\307>z@3\277\306\260L?\302t\253\276}\006\243\277\311\246s\277\336\355\034\277\352\036\245>p\035}?DY\221?\014#\333?\026\217<?\312\315\356\276\025\227v\276\220\371\231<\347\347\214?\327\362[?(\307\315?\1777\300?`\272\215?\200JD?\277\223??\360\224d=\345r\250?\026\365\203?\322%.?@\254L\276\240\246\265;\274\361\214>\224\230I\277I\347<?\366\326\016@*\032K?j\256\304>\304\322D?\244hj\277\020m?=~:\210\277`,L=\023\005s\277\260\223\210\277v\373\370\277\024\010\037\277#\374\212\277Ha\261\275\316\\\025\276[}\343>\005\020\266\276@\313\243;\347\3544\276X%\240\277TB\035\277<\2477\277\306\363q\277S\205\343\277a\2477\277&\014\352\277\263|\351\277\214\300\245\277\010s ?\204\026\234?\257\321\223?\364\353\\? \277\236>\025\022\255>0\234\211\276\226\264N\277J^]\276\333_\301\277\036\235\030\300g\001\265\277\002\237\243\277\340\010\247>\317\006\231>\035&\242?\241e\234?zu^?\0206\237?$\363Z?\300`\323<\221\264\032=\3565M?\n{\220?\213\250{?n\210\244?\254\273\222?\310p\023@O\255h?\340\252\327\274\001]5\277n\020\027?\370/-\277n\253\215?\021\t\023\277\372\313\375\276)fZ>\273\370u?\026\023\251>\304\364\251\277[\254q\277,\361\337\277\260\227\006\3000lD\276\332\236H\277\206x\346\277\013\333\233\277|L\375>\016/)\276\\@h\277&L\252\277\002\246\356\277\310\311\026\276\214\024\373>I1\223?Z\324T?\300\013\336\275\210z+?\324\272\213?\322\026t?lJ\016\277\210\210\306\275p\320\353\276\234\234\351>~w ?\340i\214<\257\352\213>\271E\'?\342\010\204?\364T\235?]%\265?\232O\031@\232E\272?hS\007\277U\305N\277\000\303L\277V\373\276\277\250u\332\277r\326\230\277d}\243>\034B(>\220\t$?\\7\'\276\002\020\014?\353\034\253>\340\2623<x\201\247\276V\233\r>\021B\213\275\346|\254?\274/\347?\224C\370?!\240\276?\200d\023>p\262\250>&Yt>\204\225:?\216.\000?\234\024\263?\240>\'\275\317\224V\277\031+w\277\255\034[\277x\227\003\2777\251\206>\272]\277>\212\356\026?\200\312\233=\310\251\265\276\206\355-?\332r6?l~V?\\B\226?\0369\r?\240q\'=T}\324\274L\223\342\277HQ$\300\273\336>\300\034\005?\300\336\206D\300\206\035t\300\235.k\300\353f@\300\310\321\000\300c\021 \300\272\237\310\277\255d\004\300\030\337\322\277s\242F\277\214\326e\277\352\305\367>k6\272\276 J\035>\342\231\332>~\260\251?\"X\337>tH\322>\002\030s>\276Y#?\340\211\307>V\336\305>\362\027j?JW\340?\254\326\304>\307k->,E\311>\330X\361=\241\273\221?c:\232?6\335\364?\236D\375?\222J\213?\020W\252\275`\305\263\274t\313_?\355\001\317\277\302\247\004\300\nK*\300\312\243f\300\324\366\260\277XJl\277\324\233\t\277\002\214\002>t\017-?\220\337,\2756<l\277\307\353\224\276\3306\200\276\002\337\341\276\000\213\277;\032Q\200\276\220\225\204\277<G\004\277<|\311=U\223\n\277P*v>.!\367=51k\277\267N4\277\023J\244?H\235\342>P\222h\277\372\235\257\277\246\233\344\277ID\254\277G\303\213\277\004\333\'\277.\314\357\276Q\227\327>\223\321\220>h\023\263\277\271\005\021\300(\276\357\277j\320\241\277Lhp\276pg >\206\350\031\277\027\335\240\277\025\252\305\277>M\037\277:\244V\277B\360\240\277(\313\372\276Zd\322>\360\222\035\277t\036\207=\327\223=\277\214\232\315\277>\216\256\277\264\366@\300\035a\001\300\356`\337\277N\260\305\277\372#F\277\026;\235\277drN\277\360\203\270\275\036\350\022\277\360\245??\331\353??V\016M?\004vg?\257N\023@$\362\000@\246\0008@\244\350\016@\340\334\010@\251$P\277\352\0212\277\210\241\255\276\362}#\277Xt\177\277d\305\260\277le\227>\322\263\360\276\344k/\277\354\212\252\277\355\013\214\277\023\354\017\300\350 \301\277\200RW=\263\221?\276\206\356\035?\\\300t\277\200\224\035\300w\226\307\277\344\201\355\276\250\201\341\275fI\201\276\351^v\276\032\005\266?B\243\004\300\312\372\016\300\330\215\350\277x\376%\300\324\3539\300\313\327\361\277\345\273\372\277\322\237\321\277\n-\026\277\256\\\370>C\354\300?\272\336\020@\264X6@@\221\021@\330\347\320?U\036\270?\021\257H?\274\305\343?1yx?d\344\244?\006=3?\212@G?Z\241\335?\320\244\003>\252l\n\277\314$\215\277\310UT\276\013v\341?\300M\262>\356[>\276q\034\010\277U\345\242\277bz\363\277\034\206\204\277\335\275\002\300B\320$\300\216\255#\300\237\3769\300P\375\033\300#[\013\3001\316\"\300\207\227d\300\311tT\300\227\306n\300\310\003%\300\234\323\026\300\300\203\"\300v\235j\300!&\201><\225,>\243D\352=\2701J\274\257{\226>\215\2248\277\217\225\305\277\234t\304\277\210\267\364\276\203N\206?\352aR?s\335<\277G\251\325\276\234B\004?\355?\244>\034\346L\276\036\203\323\276\024?2\277\240>\220\274,\'\201?\246\257Z?,\027}\276D\001,\277\244o\257\277S8[\277O\374\022\277\345\367\254\276\023Y\031\277\372\331\355\277`\255T\276\335\314\006?[U\264?p\357\315>N=E>\330\030\230?\204}y>B\0042?\226Q^?\332\260\017?\275&\221>q\032\241\277\216\252\342\277\230,$\300\232^\344\277\000 \323\277\330\220\033\276\246\324!\276K\025\005\277Q!\027?\274\375\207>^7c\276\025\351\017\276\001\016#\277\260RY\277\004i\377>2\025\255>h\372n\277\007\271\326\276\201\266\306\277\204\235\034\300\347\031\247\277\323\226\t\277,\'\027\277s@\203?S\363\276?\345\356\n?\032`\354\276w\207\317>!\n\222\277\010\355\023\277(\211\037\277\322?\307\277}p\r>\310u\252\276\226z\026\277\270\306\257\277\363\246\271\277\347<q\277\210\237\013\300\236\370\022\300\331\014\373\277\274\317\331\277P\000\274\275\217\302\276>IFv? \330\366<\316\333\224?\026\205\355?\241$\316?\013\004\243?\230\255\014@\264\231G@\243c_@\030Y\355?\025\245\343?\342\023\264?q\326T?\377D6?P@\353?\222\032#@vT\027@fO\034@\360u\371?\375\241\240?\206T\032?\333\027\232\276\330HK?\356\227\255?\000\217\216?\314\021\230>\304<\252\277\204\002\"\276\354\356\244>\353\036\262?^8/?\351\271\211?\030\346\331?U\330\234?mx\177?\373_G?\274L\362\277\200\240\277\276\232\326y\277 \346\304\276\202\035a?6\251\036@\216=\220?\007\201\214?\220\263\274=\363\0300?6\245\244?\370\304\212?X P>\276\204\"?\312\252\324>\346V\347>\234K\323\275TF\360\2768,u\277\372\276\206\277\002}\031\277\214|4\277j;M\277x~\330\277\254\361\n?N\336\315?\204\021\334?L\265\245>\000\307\016?\226\351\265>2\234L?(\366\371> \207L?\224O\272?\265c\023@\026\206\'?\"\272\237?.\306\265?\3325\236>\032%\022>\371\306\033?.\255\006>\372\3168\276\360\256\n\277\272aN>\220\"\034\275\301\230:\277\000\330f\275j\235\310?l\244\035?h|\230?\376j\377?s\271\026@\020\t\233>w\005\035?#$c\277\246\256\273>\376P\365>:\233{\276\267\350D?\034\207P\27663!\277*4\314>\310@g?+7\216?0bR?\330\265$?\000\'\243?\022\314\266>Z\006H\276\332`\255>\302\274\357>\374\020B\275\03512\277\006\311\214\276pU\033\274d7\001\276.e<=\r\315\003>,\370\220>\324\377\215?^\217\265>\226Q\232=`Dg\277\324H\312\277\3400\000\300\240b\272\277\002$\340\277\327&\024\300\223&\n\300\032\016\204\277\260\365b\276\003\334\354>{\276\262>\225\212\210?\367{\037?o\242\014\277\351?>\277\253\203\024\277\000\177\263>d\262\021\277V\236j\277\223p\213\2776*@\277\335\254:\2773gp?\357u\225?@\253\201\275\276^V>\000\327w\277\302\300\312\277dY\375\276\024\237\244\277\365{\311\277\027K\235\277\030\336\255\277\3576\270\277j\272\251\277\232\240\035\277x\006\362\277\337+\021\277^iQ\277D7\250\277&\272\211\277\310\026\031\276_\210\257\276\354%\244\276\216\023$\277\346.\330>\330\'\234?\024\312\216>~\317T>\037\257\306>c>\327\276\321l\020\277\312T\230\277p\226I\275U\302\263?t\274\273>P\222\211\275dQ\217\277L\346\t\277\017\205\246>\007\274\270\276\315\343\310>\273\217\032?\027+@?H\326\335?\252+W?\331\277%?\256\253\225?\311\2500\277D\237\245\276B\276\221\277\372\215\240\276=\272\254>\014\233\021=8\201\302>\016\253<?@w\030\274 2!?~\0107?::\302?<uZ?\377\033\331>\000z\003\277\033(\206\277>K\334\277\343\271\231\275\177\325\262\277c\327\361\277\356\264\236\277\230\334\245\277\277l\023\300\2256 \300\227\355\025\300\017d\373\277\267\365\034\277H\032W?\236w\364\276\233>\220\277R\200\034\300\'o\026\300:j\251\277`\260\246\277xZ\237\277F\204\263\277\354\331\315\277\323\201\034\300\365\237\301\277\234\253\272\277\332\362\245\277\265\307\021?L\267\225>-\270o\277a\334\303\276\277\037\317\276S\036\256\276\320\256H>\221z\374?X\311\237>.\2146?)\266^\277>=\274\277\033d\201\277\310BI\277@a\001?\341\237H?\0225z?4\320#?\000WW\274A \212?\034\305\351\276V\255!\277\324.\254\277\376\306\026\277\177\203\274\277\371\370\033\300~\003\324\277+S\251\277\353ep\277T\375X\277\212\244$\277\354\372L\277\366\014\003\300\266H\326\277l\022-\300\033\021\332\277\264N\303\277\234\025\374\276\362\036*>2Vq>\220\216O\276\325-\217\277.O\206\276|\006\022\277\305\026A?\017\007\244>B\275\227?_\001&?\244\355\343=?L\265>i9\016?-\020\314>\365\342+>d\002\204\276\344\034\020\276\336\321\225\276\027z\017?\334\310\237\275L\270\205\277\362C\306\277\274 \272\277\233&\207\2779PO\277\234\276\216\277d\243\017>w\343\021\276M\341T\277\302\353\216\277\364\330\001\300\030\353\004\300O\226\346\277\362\317Z\277\231r\361\2760\275E\277\230\265\200=~\nr\276\315N\005?\035G\262>\312\'}\276\344\225\027\277U\230\364>\352\230\001>dhz\277\333\306F\277\245\264\343\277\347\007\340\277g\261\367\277\355\301\301\277Rz\313\276\000 m\277\240YX\276\362:h?\364\023A>LC\251\276\034\026q\276\274\362\306>7\'i>\202z\303>}\270\014?f\021\204>\210\202\230\277n\252p\277\030M\037>\264\354\230\276Q`C>\362\242I>\032\320\231\277\275\017J\300I\257M\300\020\312\303\276H9?\275\306\360\242=\356\033\212?f\250E?Pr\321>\315q=?\364\356\347\276\372+T\277\310\210\273\277D\374\370\277\177\343$?\274\276\252?\360HK?\325\235\253?\250\260I>n\004\254\275OW\345>3\205\303>\224\251\323?*\370v?JP\305>C\004\257?F\226\337?n}\254?\237.\037@\233_\320?\255\332_?\274\335\021>\356\2103?\226\320\025@\201P\276?R\\\247?\006\013$?\303u\005\277\325z\207?=\2720?\256\236\356>LEd?s\341\220?\244\006\224>\016\'3\277\260\205\'=\021\244\241\276\\\207\002?\223\241\354>\354\263\243>b,\036>\001\204l>\276\013\276>\250W.?\330\260\036\276f\207+>\022V\305>\230\331n>\3500\207\277 j\250\275o\315\222>\000\"\3129\341n\010\277\340@c\277\033\315s\277\360\374\024\277@$\240=\016\257s\275ae\230\277\036\013\253\277\202\362$\300\010X \300V\272\016\300\352w\230\277!\004\204\277\222\026\225\277\240\314\245\277\355)\344\277\016%\003\277\203\252\257\276@n\005>;\016\036\2777\276`?)\300\r@\006\200Q@\370\006\003@XK\253\277\007(\t\300\336\2365\300\024j\242\277\360*:>\235w\275>1\272\362?I\227\367?\021y\210?>\225\013?n\323P?\332\\\031?(\377\276?\316\344\352?L\323\032@\252\013\240?\316\337\246?b#\005?\267\223\004\277\261-\262?\366!\014@\363\364\246?wUJ?\202\351\220?\355\003P?\344W\321?\322a\324?a\026\207?V\n/?f\347\315>\300\r\257>\005\201F?R\364\240?v\214\007?q^5?\247\326]?]n\223?\352U\262?\014\"G?\212\\{>\\\355\276=\000\t\n\273\005\002_\274\322\304\300\276\261\337\262\277\005\023\014\300\230i\r\300\000d\036\300O@b?\000$\361;2?o?\000L\250;\236\r\304\277\277!\226\277\321\r$\277\323\256\353\276\313\377\215\276J8\206\276\273\265\022\277fv\244\276{i\240?G\325\244?\231\341\200?\364\177\270?\362!\307>:CE?\366tl?\006{\202?*\006\257?\2209]>\236\252\221\276\316\337\261\277\244\351\201\277\304\307\346\276hzk\277\200bi>\321\026l>\200$\t\275x\227\243\275F\330\t\277\354\340\362\275\254\324\212<\t\260e\277Tu\'\277?Lj\277\306\242\264\277\024.\271\277C\007Z\277d\230f\277\016\201\021\300?\233\351\277\266\236Y\277<\010)>h\3067\277\350\337\216\275_8v?[\237\305>u\273l\277\344\260[\277m./?f\026\237?\005{/@6)\037@\t!\016@\354\310\007@k\344\363?\347\211\013?m@\237\276\211\024g\276V\324.\277\005\271\246\277\035\251D\277\366\237B\276\266j\201?h\305\356=dC\201\276B?\016?\230\212\305?\210\260\r?\002\"\"?\251\321\234\276\245\265\007>\351%t>fz\247\275^\227\266?R\243\234?rS\347>\240\001\304\274X\262\027\277\200b\313;p\021\314>\360[\347?\243\020\345?\336\346\224?T8\351?\212\021\020@\316?\251?\016\240\341?:\332\034@h\'\330?\3701\202?\366\203F?o\202\370>\324\367\301>\206nj\277&\341\204>:\352\247\277n\310\023\277I\007\342>\350\022\024?\364\225N?\244Nu>L\027\031\276M\224\377>\034\326\022\276_\212L\276\243\344 \276\336>\323>\300\201\'\275h\326\310?Z\360\252>\021j\"\277s~\273\277\213\351\203\277\266\177\325\2770\214\356\277$\364\313\276PQL\275w\274\026\277;\206\341\276+\321\344>_\275n?\263\t\254?\216K\362>\010A\022=D2l?Fj]?`\376\346\274\312]\'?\300v\023\277\320W\005\276+\255\347=*\351\030\277\3240\007?\337Q]?\301\344-?\020\224\026\275\304\367\246\277\235H\270\277V+\234\277\224\366\224\277\220\302\014\275L\3277\277\205\232\016\277]?\230>\353\r&?U5\226?\237\265\353?u\371\271?\\+\003@\237\335\236?u\252\277?\372\321\270?)\222\240?_\202\375?M\351(@2\274\372?G\205q?\370d\333?z\315\340?\241\323\267?\347\nj?\276B(\277\357\326\322\276\306Y\220\277T0\020\277Y2b\276{p\201\277P\275\313\277O\350\321\277[\314\211\277\200\2067\276\305`>\277\377\276\214\277\023.\342\277\023\367!\277\302\237Y\276PpT\277\370\223\270\277H(\331\277\332J\376\277+6\334\277e3+\277T\206G\277\037]\205\276\320\220\317\274\260c]\276w\026!\277\217r\202\277\222)\205\277\265\004\360\276\236\\?\277\010\205\305\277!\322\314\277\342\307\266\277p\361\203\277\356&<\277\322\372L\276\320y9\277L\302%\277\250\220\331>x=\\>h\262\222?iH\002?2\222\007\277\371\275\023?\314\330\230?\224]\306?D\355\206?\237q\272?\216\342\251>\346\3079\276;U\025\277\243\245\r\277+\3201@Ab\022@\366\204\377?\220\373\306?F\332\203?\330\300(?\030\376??\316|\271?j1N?\341y\202?\257m\334?\212\275\016@\220\362\370?hFs\276\340\225e=\337\3306?\000\271l>\332\266\220\276\260\033q?\370\277\211>7\031\201>h\240\022=\010<\271>D\301\023?\256\273.\277\305\202\204\277*\032\215\277`\334\336\277X\335\000\300\231:\331\2778\374Y\300=Z9\300j}/\300\241\202\227\277\330 \226\275\321\354r>\212\030|>\211\224I\2764=\006=l\002\001=\344\317\027\277z=L\2771\001\255\276\222\301{\277\323\034(\277t\005|>\350y\r?:0\315>h\247\036?H\245s\277\314\234\226\276\2320,?\225\022<?\320\2359?<\266\310\277\235>}\277\340\002\260\277m\320\270\277i}\033\300\234\016\344\276\374\232(\276\006\2542\277\014:\245\277)\233\266\277\236\275\361\277\272\255\013\300\364\034\361\277\352O\"\277 r\237<Z+\003?\350tZ\275Q9\350>\267\341=?\207*B?X\214\335=P!\215=\3447\233\276\374\300\003\276\352;\307\276kf\301\276$H \277e\245\344\276@\361\016?\254\222\235?\242G\315>\364\326\340=\347M\"?h\211+\277\223\342=\277x\356\327\276\352\316\004\277K\t\350>m\267\326\276`\316]=I\001\364\276\230\000\224\276J@1\277\326K8\2771Q\025\277\020\363\205\275\000\327\223>rrZ?IrE\277+\233H?\340u\001\275z\004\223?\036\224\215?\177\271_?`\r\'=\204!\356=\333j\272>6H\003?\237:\224\276\0267\331>\000s^?\261\276\373>%\265\274\276\210\246\311\276\377w\327>\n.\244>\023x\212?\342\352F?<\261l?\210\211\347?\317\010\365?\216\317\r@b{C?i)W?\230\363S?\220s\256?(\321\213?\000\2413\273i\215a\277H%\232\277\037-\214\277/_\203\277\223t\300\277\224\220\363\277\3677\245\277\t\032\261\277\357\333\002\300\334\327$\300\335L\007\300N\364B\300\33650\277c)\002\277\335!&\277\030N\021>|\225\"?\\\227\214\276\235 R?\\\353\221\276.\354\022\277\217\276x\276\374\311\374>5\255w?HI\215>\276^\216>y\267\350?\315\312\301?\240\325\300=\332\244\251\277\3415\234\277\260\333\235\276n@\271=\276\222\031\276x\n\300\277x\273f\277x\377\315\277\256\2620\277\277\233%\277bw\302\277@mc\276\374\302\310\276\367b\267\277\200Q\255\275\207vJ\277\242\311\022\277\034Q\234\277\013\345\235\277\216s\277\277&\327\021\300\224}W\277\320\006\221\277\221\263\233\277<\301\321\277\370\225\272\277,\3348\277\210\257\300>\327\302\t?\023\323\003?O(>\277\236\214\255<\007\031\202? \243\203=\260\347\264=s\246F\276<qa?\304B\354?c\313,?\310\310\355=V\200\213\276\254{\334>\036\257G?\020\246\304=\251L@>\362\031\203?\316]\241?\202\272\032\277x\210\245\277\203\356\344\277\2431\362\277<\326\307\277\224I\256\277t\206\233>\370\272\005?\304\221\261?\240k\234>\362\013\263=\203\023_\276\267\223)\277\310lz>\304\227\234?:\022A?\000\213\315\274N\343\323>m\256\272>\245\325\222\276\205\234\211\277E\230\305\276\310\3231\277\326\031\030\2765\330d>\226cP\277\2538e\277\211\224:\277\2228O\277\252\326\355\277\230xd\277\304\003 ?\r\026\214\276&\357\304>\252\352e\276bF\202\277\177\272\241\277\354\374$\2776/\025\277\2509\023\276R+\002>\213\234\312=\250\r\214\275m/\277?\261R\250?\241\336\274?\200\352!?l\326q\276Z\260S\276\234\227N=\360_\205\276\001\'\007?\214\257u?\251G\220?\254\352\335?\236p\362>]6\342?\204\324\316?_\326\204?X\320A\277\313\206\023\277\033c\341\277\360\034\352\276W\267\204\277V\232\007\277\236\204\322>\030.\027?\265n\244>\232\t\200\27630-\277x\030\006?\204U\271\275\230\337j\276\222\t\000\300[\371u\277\346\003\177\277\360\370\206\275\000\204\225\2777\200X\277RQ\257\277V\031\020\277R\256q?\350\324\001@\212\217\362?(\r\267?\230\033m?\264\371.>\013\010\235>\237&\"?\030d\376\275\325.\256?\010\324$?&\325\017@t{6@s\252\374?\327\270\317?\345\334\027?\221\335\n?\323\250\243?\204\242L>\267\305\000\277\266E\215\2774\227|\277\200\216\353;\035s\212\277$C\256\277\350%S\277\342\032\234\276\355\237\223\276\344\260\202\277\226}\n\277\274\004\032\277\340\371_>\376*\307\277\037\2321\277&\034\230>\362\314\264\275r\033\365\274\306-\n\277\200D\202\277*\000%\277\032\r\232\277\262\237\373\277\302\330\311\277\226D\376\277\301\311\214\277O8&\277 \245\261=\277\321\302?8\344\365>L\357\371>pU\177\275\237\327\276\277\321^\000\277*\032\022\277qw$\277\304\251\'\276\270~\371\275N\353\350?\3669\001@\220\334N>\310\244\006\276\354Zi>\265,(\277\000\214\304=\234y\272>\343\276\263>Z\177\252?\320\210(?\031\272\001?U\022O?\200\272\355\275\231\024\r\277V\204`\276\370\305D?\246J0?\207Eb??P\026?\234\223\007>\205I\327>P\300\r?T\026\260=\303N\036\277\000&\256\274\233\\\037?\306\023\005?\374#\202>\211\360\004@\2655\022@\203c\365?\274E\020@p2\313?\020f\001\276h:\020\274\304\363\250>\311\357~\277Ybp?\036\013\263?\016F\251?\030\221L>\020\017\210\276\330\233\220?\230$\010\277\374\235~\276\250g\275\276I\035\305\277\001d\250\277i\362\336\277e\017S\300ljM\300\354\302k\300\211^]\300\010*+\300\346\276\344\277\350\233\242\277\340HT>V\034\231>(4==\2643.\274G\371\357\275\003\246\r\277Q\035r\276\024\333\201\277.[N\277Ah\220\277\357{\036\277B\005\354>|\031\347?\036\2120?p\250\225\275\276\032\322==|\304\277\352\300U\277\214\377\214\277\030h\213\277\000b\225\274\237Q@?\266\037\314?\332Q\022@\346\243\204?9\271\365?}e\r?\273Z\225? \332\234=\236A=?T\220\n\276J\016\235\275E\324\222>\305\274\220>H\021\003?\022!l?h\247\203?T\304B?r\013_?\327Z\177\277\022A\302\277\210\217\344\277*E \300\004\025\350\277\342W\357\277\233(\262\277\032\225\177\277\200t\207\276\256\375\300\276\320\032G>\372ZD\277x\371\305=\005\023\273=\t1\354>@HG<\244\321\366\275\350\252\217?\\\224\'@\202M\242?\303\027\206?\247\300~?\240\311\222=>\352C?\226\332\202?\263\267g?\035\320\216?&\267\230>\016\202\254\277\332eO?z\246\322>Xq\007?\342\244\177?.&\372?\331\271\204?\227=\030?\2227H?\330\366\223?\304\226\206\277\371\005\323\276\223\302\352\276j\253\307>x\337\'\275\365\246\330>\204\234#?dH\272?[F\013@\020U\322? \304\321?\033S\276?\020NU?\020\366\210?\002\352\033?E71?$\014\212\276\022\341\320\276t\366l?\340\001*?\325\360W?:\303\261?\315[I?\362gb\277\310e\336?\351\215\227?I\327\031@\222q\253?,\320K?|1\016@\030\032\021@\256\374s?\230p\215?\034\232\346?M\203\005@\034\352\023@gr\200?0\372\201\275\371R\374\276\371/\245>\220\010\320?\273\241\257?Z\307\240?\000\304\222?\234\'\225?\276,\271?p\367\270?duT?k\315\261?\200\334\254?\342A/?\2248\240=E\276\001\277\271~<\277C\022X\277\235\237)?\n\376\356\276\000#4\274\313\032\354\276\274\021\003>\016\330\256\275P\347\246\276&9v\277\242DT\277\333\'\014\277\354\025\221=$\327G\274{\253\266\277\272\337D\277H\014\251>\264/I?V\203\335>\260\323$?24!>\r7\203?&\2275@\235\374\374?V\201K@0\202\006@0\234\200\275\216\366\324\2777k\355\277\374-u\277\273\2405\277\262;\237\277j\215\211\277\262\207\006\300\200;\\\275\342\225H=\2014\233?\227\263\371?\215\245\037@T\345\372?\245\277\267?j\313\027?d7\227?\001S \300(\350\031\300\276*\346\277\277\376\204\277Yg\r\277\336P\237\276`\250r\274?\237?>\036\346+?0\202\230\275\232\004&?\372\265\005@\315\233\307?\275B\306?:@\330?\330\335\274?Pz\033>`{3\277\320\0067\276\036&t\277/\236\231\276\263%\001\277\215x)\277H\316\263\277\302\264L\277\375\256\007\277y\357\216?\337;\363>C\024\017\277\3608\n\275I\3750\277\354.C\276\226dw\276\n\334\222?9j\365>\244\341O\277\306\177\270\277\017\353\250\277\244[B\300\205H8\300\037\373\001\300\2708\030\300\3076\321\277 \005\207>\224Z\206\277\332\256\313\277\354l\220>\322\333\025?\261U<\277|\365\256\276\311\330\270\277`\357\r>\365\263=\276\027#\265\277}\000!\300\320d[\300\357sQ\300B\267M\300\006t\352\277\220~\261\277\277\177\004\300~\344\312\2772\354\216\277#\350\262\277\270\243\216\276\314\232\307>\222b\272?\216^\361?\271:B??qQ?\200\344\017\275^mi?\320\310i?\226\343\202\276\314\216\245\276Dq`?TV[?\017\024\024?\354~:>h:\220\274^\327\033\275:\226\277?x\024\007@\317\215p?\213R\230?\335\026\233?\350\240\206?\304\010 ?\023^h?,5\013?\246\201\243\277l|\177\276\t\013\345\276\344_\225\275:\034\270\276\374\356\265>\374\212\322>\347\314*\277\001b\314\276\322c\003\277\254r\236>\200\215\303:\356Y\014\276\335,\330\276\014\005\317=\311\231g?XuL?\002\027\324\276\374\313\371=\337\261\034?p\277x\276\333\233\324\277\"\023\205\277\016\224(\277u\'$\277\202\3748\277\232\026\333\276\272\024\362\275\231\246\270\277z\372s?$\t\013?\274\224 \277z&j\276Yx\207\2762\226\270=bL\200?f]\265?3\376\376?\261\2475@\362_e?6+\323>d\034\370>\227]\272\276;\250(\277Z*\317\277\271/|\277\366\344\200\276\224X\370\276$\331@\277\000\332\036\273p\360B\277\013\315v\277\023\217\375\276(o\306=\202\337\367\276\004n\213?Q{\371>\223\371\265\276\274\006\032\275\247\206\242\276,\241\347\275d\357\230>@\335\000\277S\312\037\277\270.\317\277\367)\005\300`\245\367\276\020N\207<\364\261\337>B\337\274>\210\177\274?\320Y\243=V\305\275\276\322\354\351>\372\361\023\276\017P$\277\025\346,?\316\242\"?\004\274]><^\312\277{g\207\277\300V\335\277\274\267\201\277\000$\243\277\270\260\023\276\244\027G>1~\\\277x\354\017?-\035\213\276k\027Z?\340\026\212=E\375\203\277@\217\031\300\326\371\217\277b\312n\277\000^.=F\246\355>hO\275?\004\2349@\246\271\317?\023`\364?\027\017\326?\004\305%\277\244\365\'>065\275S\247\205\276\315\205\210\277\360\203\200\277fx\233\276z`\315\2760\035\204\277p\322\303\277\244\236k\277)9\256\276y\314\300\2767\243\221\276[\007c\277\343\2318\277\334\274\326\277$\314\354\277\232\356\204\277\357\036\350\276\237\023\357>\356\215\223>\027\257\371>\344\370\327=\002\341\220\277\251\321u\277\317\005\000\277>\274\016\276\275\367U\276\211\322\t>Z\331f>\342\353\033?\n\007\252?Y\302\311?t\336\356>\032\032\231\277\000d\213\273\256\303\035\277\020\304\375>&\221\032?\234\253\275>I\351\346?\006\324\245?\304)\270?\274\221I?\035C ?@,V?\261y\304>6\225\026\277\032x!\277FV\305\277B\361\000\300B\277\026\300\010\\&\300V\3755\300?8\253\277\"E\256\277\321=\357\277#M\335\277\255\366\272\277\200\316\331\274\266\213\343>T\324\212=\001dJ?\352\272\274\276\030]#>\344\253\330\275w\326g?D\216\311>/\245\321\276\303 \210\277\241<\226\277\004\334]\277P\"\323\275\314S\237\277,\357\226\277J[\316\277\004\333\264\276\242m<\277x\016\361\276\316\202\305\277\331>\250\277\000\363\365\276\255\332\234>\260I{>\216\322N>N\233\331\275h\307\221<?\205\332>(s\315?\333\035\221?\026\367\324?)\370L?\360\005\257?\330[\356?n\224-@gr\025?Y;4?\206\243V?\020\212M\275\206\316\330\277r<\317\277O\315\244\277&n4\277\315o\277\277\030\000\344\277rQ!\300\226\035-\300h\346\324\277\2571\250\277\355\203\212\277\240\014\220<\261\004\036\277/t\235\277\200\357\210\277\237\236\211\277+`R?\350\251\256?\032\241\260?\376\373\341?{\210-@rQj?\250\327B>\014\357\217\276L3\340\276\275\022\r\276\326\222\265\275\250\343\233?\240\264\014?l\357\244?X\350l>@3\344\273\255\344\222\277\236\271\247\277\316\317\210\277\001\215\232\277E\352a\277\327\230\200\277\216\343\300\277\027\331\221\277o]o\277o\336\360\276\356\256\010?\t\367\224?\241\357\220\275\353v\276\276\310R \277\250fZ\277\000\022\211\277\227:\361\277\305\362\227\277\010\321\204\277\320\301)=0U\337\276\270\265\352\276L\243\275\275\021\033j\277\375\345h\2779\3045\277\026`\246\276\243\226\213\276jI\020\2766\023\031\277\227`.\277\207\370!\277\274\363\303?\2469\370>\334\376\226?\256\345\003>\024\300\'\276N:\376>\300\337\024?i\310\202?\014\363\322?_MB?\006\362\246>\302\032\210?\226\216\270?\267f=?\243\370\344>\216kx\277\2003)<\303\252b>,\322\212\276^/\257?O \306?\340\312\302?`\314\343>\322\245\364>p\263U?\210\301Q\2762\251\035\276!\255N=l\277\270\276\216\023G\276\362N\014\277\212b3?n\216f?\276`\226>\230O\332\277\365\207\275\277*\261\247\277p\225\307\277\264\356\302>\220\2409?\262r\314>\342%\003\277l`\000\277\2172\341>\366\210\261>\366x\376=l\351\224>S\210\322>x`P\275\323(\236>\360[??\231\337\220\276\3002\361\276d\332\226\276\316<\035?\022\365\333>\024\316\234>\260\327\253\276%o\014\277\2400.\276F\366Y\277\222m\257\277\312`3\277\232\223\210\277\310n+\276\275R\351?\303v\307?`M\n@\t\006,@\251\0348@\337\366\006@\320\207<@\236\247\204?\002\234\251?\320\373~>-b\006\277\236pe>\236~\275\275?\213\'?L<\321?\364N\341?\377\024\200?\236\003\227>j\350\014\277H\004m\277\300\340Z\277z\220\356\276\327R\302\277\234\203\331\277T\240\334\277\2604\374\275N\020\003?\313\203\220>\276i\237=2a\n?\311\215\270>.S\311?\233l\240?rv>@;2m?\240\262\366=\031\347\366\275$-\257?\354\001\300?\353v\234?\374>t>\352\325\025?Y\366\311>\324\340Y?\001a\320>\216x|>\243\253\201\277\200\0015<sG\273>\350tR>D\357\004?\262\232:\277{S2\277\352\363\217\277\355\177\243\2776\212\350\277\301\367\277\277\006&\324\277\261D\312=E\307\254?\322\246%@\347\200\t@\247\n\317?\363\036\270?\244\212\340?\355v\312?\004?\203\276\242\205\222>tm\204\275W\002z>\037l$>\210\311C\277\354\252\320\2779\257\261\277j\026\014\277\216n\255?\262\3058?\204/W?\216\2423>\260XX\274l\356\246=\216.p?\346\226\375\276/t\252\276oZ\235>3\273\216?\246\356A?\366\371\334?\272\030\n?\342\320H\276\361P\241\276\024\273\362\276\013\223\342\2779g}\277/\227F\277\267\201H\277\340|\224\274\341\211\240>P\224\252>\240\372\325>\324\362\310\277\255\275\000\300\177m\307\2774\322\242\277\225\244\203\277\226\361\016\277|d>\277\360\271\236\277\037<\004\300\250\261\r\300d\227\273\2772\267\206\277\234\232\224\277\010\215\350\277\"\244\252\277\230q\223\277\230](\277\344\212\316\276\300\376\312<\317\345\221\277\374\000\027\300\375\307\'\300\206X\206\277\354\237\241\277\370\005\001\300F\266\272\277\2278\251\277.\253\355\277\220\336\257\276\251\261\241>\277\331\022>\304\303\033=\205\302\301>4\264\004\277\024\311\315\276\311\254\202>\312\362:?s\024\"@\211 %@j\252\235?\321\313\225?h\252\321>\242+\225?\214\246\226?\240\206\n@\310\3420@\371\375\342?lz\361?\372\327\243?\276$\216?\333C\227?\220\334\201?\212\324\204?d\006\005?\re\345?z\314\273?\206\205\354?\242<@?\370t\374\275\214r>\277\262\336\241>\336\205\361=\021\320\270>nx\005\276\260\335\022\276`a$\277\350D\261\277z\375\033\300\224\216\320\277<t\004\277\2420k\277\360W\263=\304\355\002>\000W\206=\006\366x\277d\204*\276j\215p\275YS\256=7h\014=\222\007\233\277\204\377$\277j\000\227\277x\301\037\277\263!4\277\300\t_\277\323\304\211\277\370\035\234\277xr\021\300T\215;\300\307\2504\300 \002/\300\035\214\023\300X\224\001\300^\325\025\300\355\217\324\277\256\330\206\277\024\035+\276\344\346\226=\315\034g\277jt\207\277\034.:>aVd?S\221-=\324\266g=\333\020&\277\277\370\220\277\361{\253\277\302Y\310\277\332Hu\277=\200[\2776\035h\277\207\265\215\277.\321\317>v3x?_u8?\257\270B?\017\320\262>\340v,?+\263\035?\3241c\277\321f\003\277\362\016\220\2770&\020>\203\366\344=\010\331^?/[\333>f\211\251\277|\310\354\276@\262\230;[4P\276\022\316\203\277\317\336\026\277i\0073\277\24283\277p\220h=\301j\003\276O\362S?\300\350\251\274\235\245\035\277nW\353\276\026\361\334>\022\216\033?ZU\233?\202\201\207?YB\337?4\\\246>\363z\254?\225\340!?l\021+>\214\347z\275\225V\341>\357\342\n?((G?\r~\203>\345O\226?\204\306f>P\247\005\277\302A\005\300\017\314\255\277\322\343\232\277\255%\300\277 \255r\277\247\017\352\276\230p!\277\314\300\003?\376<0>\032\034\311?E\320\230?~\322\314?\206K\225?\367\224_?\366\001\233?8\033\003>\326xG>\335R\217\277\351\213X\277K\310\300\277\200\244\n\276\3601\323\276\260\314\361>\000\023\345\274\313\234\246\2778\2404\277\246\004\204\277\216\364Y\277g\371)\277\252\034\004\300\372\340\371\277\221\223\010\300@\336\002\300Hi\365\277R\221\004\300\313\354\016\300=\212\277\277\340IQ\276\243\231\306?\024.\377?\340\245\227?P\235\373>\303R!?\374L\016?x\265 \275\241\345\237>\274\316x\275G\351\357={\233\304?`\266d>B\271\302>\233\001\327?Z\355\006@p\"\302?\020t\032\276\360\274\231\276V\331P\277zK\302\2773\240\226\277\242\036H\277\362\327\\\276\330\321=\275\317\035\023@\376h\341?\347\255\241?\3700\177\277\346\360\217>>\222\257\276\224\251g\277 \3722\277c\267\240\276\232k\271\276\262y\016\276\376\250\304>p3v=\305\345(?^|\203?;:u\277\270[5>@s\353>0\272z?\035\257\362>q\246\211?\375\3610@%\241\004@\006~\005@\247\312\030@NuG@\272\010\305?\024^\220?\270$\233?\246d\030@\352\314\223?\376m1?\262\241\007?\2508U=\034f\013\276\207\377\253\276\314\255]\277{Q\254\277\242\3520\277\037\246\336\277\021\355y\277H5\003\277\240\t8\275\0337\306>l1\001\276.\355\023\277TU\017\2767\350\035?\336\225\261?\014\000\350>\340\373w?\020\021\023\277@\214\245\277\200\356\345\276\255\307\376\276Vl\004?\262\306I?\370\253\306=\376\034\271?\203\007\236?\205\306\304?R<\321>Cf\022>\242\213\257?\320\244\"?D\275\341\276\320\010\311\276@F\226\277\314\330Q\277\021;Y\277h>\023\277\254\251Z\277\202\254^\277\016\323\223\277\222/\326\276d\014 ?\004\353 ?\211\n\001\300\344}\007\300\311\032\022\300\352\242N\277\200\024\275\276xL\254\277\311\373r\277:F\237\2770\213\236\277Z\3370\277\030\350\316\276\204-\327\277\364\250\272\277\010Lz\277\232\\\201\277p\263%=B\024f\277\024\023\323\277\014\020\355\277\344T\270\276\013\177\246\277\025\206\001\277\240\374\216>\0249\223>N\020\234>\357\223\233\277v\310\022?\364N\244\275i\2109\277\230 \241\277=w\t\300\346\247\253\277N\325\354\277\274\305\002\300r \231\277\026\336\351\277\014d\345\277\303\315\263\277(R\263\276\311\357\347\277\235Y\265\277Pq/\277\372\325i\276xJ\216>\262,\243>\303J\t\2775\235\226\277\234\n\324\277U\202A\277z\241`\276x\350\215>\001Ds?\016Y\242?6\353r?@\350$\275\334\r\245?\327\216y?Z\016a?zL\225?\240\313q=c=\227=\334^\201\276\027\2556\276J6\250>\260\256\013\275H\375o\275\202\373\r\276,\263\016\277.\363*\277\274\255?\276\325W<\277\177\222m\2770\372\202=\270\264,?\007Q\354>\363\302\203?\367j\220?\323\266\362>\326f\233>\353\371\304\276\371|\225\277\270<\321\277\214\273-\277Z9H\2770\032*>\2677\201>\244\303\013?\\\010\205?\356\233\371>\000\255\362\275\236\000\224\276\350&\'?\370&\022?\214\311\342=\237\320h?\330V\355?N\r\333?p\3233\277\317\323\215\277\022\344\036\277\004Y7\277\316\277G\277\031\230\271\277d\357\367\277p\2024\277\'h\215\277\004O\352\277<K\264\277\265\363\254\277\2626~\277\225\371C\277\036\203\316\277\334D\234\276 \203I\277w\177\240\277\206\034\374\277#\273\341\277\000\013\010=\341%\260?\250TM\276\354vT\277\274\355\r\277\324\3642\277\262\364\223\277Vvj\277\\\203V>{\212\312=\336\273\003=\274F\200\273\346\023\302\273\005\002\014\277\204@\230=\035\325)?x\263\240>,\2559?r\225)?\321\302S?\347\235\216>\031cl>22\340\276\220\177X\275s\305\227\276\257\002\212\277!\351Y\277\030\367E\276\316dv\276\326K\303\277\016\340\254\277\r\262\000\300\001\300\335\2770S4>&o\002>\264\262\010?>\316\331?\232\261\212?nh\223>\020<4\275a{\364\276I\202\317\276SF\204\277\313\033?\277\0006\333\272\214Z\236\276\243.b?\000\340\237\276\304I\232\276\250^\010@2_\225?\266z\276>\374\264\036\277^\371\250\276\010\253X\277\240l\213=\343\303\272?\364q/>(\274K=\374\265\341\276\327r\207?\030\322\300=\270\227\201\277p\225\272\2776\324\322\277\276\023\013\277Z}@>\333A\331\276Iw\234>\016\232\207\276\004x\021=\267\303\027?\376y\335>\365p\r?>Q\266?\330\225\010?N\305H?\350h\267?D\021_>\364\034\271>\344n[\276\353s\272\275>\257C>\243.\352>\270\036#\275\226x/\277\226\206\312\277\316\010\002\300\010T\221\277y\312\261\277!L\252\277\250<\354\277my\247\277\030\301\342\275\371\236\275>\264a\257=\026\201>\277\252\2239?\344,\231?\356F1?\316\037\203\276\347\232Q\276\036S\227\277\330\333\"\276l\325\265\274\302\257^\274\311\361)?\1771\232?.\365\222?\276\2034?F\347\223\277\241\221M\277B\247\334\276\035\202\354>\240\375\004\276\202\177!>&;Q?kj+?T\217\r>\251\373\017?\010t==\224\017\363?\242Z\303?\312|\346?\3769\354?:\210\323?\t\254\014@W\'\005@\200>\241=\360H\266?\305\263|?\374\023\222>:\236\226\277\217\261\257\277\271F\274\277\265\233\223\277[\347\226\277\026\024|\277\034\\\'\276\265\230\301\277\020\020\332\277\356K\002\300\211C=\277\311v\013\300\205\336\366\277\271\036b\277*\355\240\2764\035\'?\016P\250?\323\327\274?\024H]?\232HT?r \341>\275 \006?r\2343?\210(\250?\000\203\326\275\3708:?}\370J?\353l\224?^8\260?qz\255?\234\321q?\234\210\006@\222`\033?G\025Q?L&\203>\211\362\264?\377\311u?^\371\016?\244\351Y\276\360\242\370>\247uz?\214\025e\276$\371\273=G\005\241?\353\272Q?P\203\223?\336\370^?\004\001\272?W@\247?\\\014\325>\000NS>\000\0078<\036\302\017>\367_\357\276\270\266\307\276*-0\277\305\225\034\277\221\273\276\276=f??\376\263\264>\304;n?\302\034$?\313\207\352>\370\335D>\325aD?h0\344?-@\221?\201\356\346?8\336\004@\340\3337@\tGD@X\262\224>\006\021\302\275\202\213~\277s\004\201\277\240@E\275nME?7K\355>\344\235\\\2764L\327\276#\243\017\277\024R\302>\347\270\252?U\371\256?\222=\242?\006zY>\236\207\360\276N\220\300\276\030\354\303=x\005\032?\000\002;?\325\r9?Nx(>\24159?\344C\267?\375\270z?\301Qc?\304\225\263?\032\350\007@\211\316\334?84%\276\330|\321\276+v\266\277|n\352\277fR\367\277\313C\r\300^\321z\277F\321\315\277G~\261?\367\224\373>\265\245\276>\021\363\240\277dj\232\277\256\202\223\276e\360\240\277\342\277\227\276Z>R\277\275\310\245\277Dp\224\277\236\322H\2774\036\224\277\320U\353\277Qc\t\300\345\267\365\277\337?\035\300T\372\034\300\207\271\316\277\332\276\343\277\346\370#\300L>4\300\035\203\016\300\024>\314\277x\317\014\300\355\277\t>s8:\277\324\304c\277\340U6?\\\212\321?\020\341\252?\214\204\311?bt\234?\020\322n?\032{\271>.&6\277\001\312B\277\266\314*\276\333e0?\360\261\033\276@\270\233\277\363\367\301\277\206\003\210\276\256\303\'\277\334;\251\276@\256\020?n\271+?`7\212\275i\013\223\277\331\245\026?\336\3768>-.\231?s\300\352?\023\256s?\000\263{;\026\2255\276\312 Q?\244\023\302?\217\270\225?\000`p<\177\351\340\276!\r1\276\314\360\326\276TYK\277v\345\301>Pi\214\277\032\341\372\277\271\325&\277D\036\234\275\212\367\367=\205\374\214?\013\351\016?$\261\316=\233\260\351>\267\244\251\276$xv\277\330\345\256\277\005\302\231\277Y\366\276\277\242/E\300n7\204\300\215\035O\300\212\027>\300\342\374#\300\211W\002\300E\263\375\277\347\2706\277`\224`\276\221\327{>\353\236\323\277\260\353\353>:Kn\276Xb\301\276\'v\314\276\326\332\214\277\254\260N\277\230\246\206\277,\373P?,+\">\013\272\177\277\344\217.>]\252\216\276LJ\255=6:\316\276u\017\332>\314\331\222\276\274\364/\275.2j\277\374d-\277{c<\277p`\216\277\252\205\324\277\323\340\232\277\203\326p\277\360wG\277)>F\277\246\r5\3009w6\300\323sF\300\345\334\036\300\322I\034\300\251U\307>\010\030\236?\010/\002@\204&{?\340\342\035=P\2423<co\253?A\347N?\334\237\003>\307n\262\276\314\357\356\277\205\241\367\277@\276\331\27638I\276N\340\362=\250\t\\\277F\261r?\312\250\314\276s\266\201\277\305\"3\277\307\312\t\277\265\"\205\277:4m\277j\237]\277M\202\020?\322\321\277>*F\202?\2327+?x\275\222\276\3568\324>d#-?\237\206\213?t0j?\252\342\300?B\223\216?n\270\211? \344\313?\2302\r@\033\225\276?Xf\'\276l \312=Or\006\276\2364-?8Q=>\260\212\237>$@\257\276P\037 \277\306\354\266>\034+\002?@\207\313\275\237EA>\302P\343\277Xj\'\300\270\020\324\277*\347\370\276\356\316-\277\320\350\267\277,\263i\277\272\320\036\300\224\316\'\300\237x\343\277\372\006 \300\377\320\263\277\003\312\330\277\312\333\032\3000\251\021\300\201b\'\300\336\315\001\300\266\261\025\277\321A\037\277R\253\221\276\233\312i>@xB\277Xn\030\277\030Br\275\231\313s?=\344\014?4:\303=\026\002\376\276\350\314\273\276`\361\366=\026\2160?p\302\000\275\252\310\323\276\212X\201?\352NH?N\300\230?\024\2538@\025\302\016@\203s\250?K\017e?\256\'\030?*\252(>\0173\232\276^U\322\276\354^\t\277\206w\t\277\364\211\267>a\324\337\276\226!\200\277V\367\301\277\226\037\310\277\2051\246\277@\272\212=T[W>}.\211>\350\327\323\276,\306g\277R\347\312>\240\347\033<Y\264\273=\316\334\347>lhb\276Eo:\277\364\324\322\277\302\355\245\276\204\363=\277\340a\n\276\370\317\226\277>\215\272\277iV\236>1\330\326>P\301\020\277`\312\223\276HVu\276\'\022\213?:\350\240?Z\274\242>\326m\306?V.D?\270x\222\276\'n\203\277e\265\242\277\2325\255\276\3549\361>$\304\245=\000\3050\273bN:\277\303\352o\277I\355@\277&I\\\277\360\026E\277\356\310\020\277\371\267_\277\231\026\277\275\3746v\276\200A\370:\206\353\210\277\307\330\222\277@\207\376<\227\343\313>7\036\200?\312\201\303>\020T\222?\007\t%?H\327\214>\224k?\277\270\r=>`\204\265\274\330\335#=\244Xn\276\211J\203?\025\205&?\360r\213?j\255\334?\277\346\264?\262Z\222>\000F\365\276tm\t\277\254\252(\277\020h\313>\013\r\003>m\\\376>\320|-\276\213z$?\260H\252?\203z\301?\232\321f?\024\343D>^#\235\275\201\241h?\366ux?\2271\025?\252G\037>\310\177\006\276\320\367\223;,\322\314?\352&\"@<\236\343?%R\275?\360ne>\230\244\317?\266\3012>\200\260\225=\000`\031\267n6\233\277\001&[\277d\014$>\342(\342>H\230P?\274q\227\276\323\317\246\276\324V->\374b\276\277x\0102\276\214\353V\2768\345\371>t\017\227>@\252\322?u\"\212?xT\257>T\341\225?4g\232?X\372C?F\201\257?]\244\000@U?%\277\021\316@?\000\255\r\274\355c.>\224\204;>\340\352\231?\231\n5?\303\306\274>\222\267\\\276\351\"\'?lg\305>k\377\327>bM\300>q\271\251>\224\222\277\276\240\250c\275d%\257\276\000\202A\276*\324\023\275!\204W\276\034|\316\277p\303\372\275$\346\372>`~\034\274\ruy\277\374\266`\277\266p\347\276\230Q\272=\'>\212\277\032\220\237\277\356g9\300\307A\233\277q|6\277\234\215{\277\366\271\373>\357\007}>ck\001\277\211\361\337\277<\304\312\276r\\K\277\\\032\255>\005\233\365\276dH\206>\200\2760\275x\205$\276j \271\276\020W?>\333\2675\276\353\247\202\277\344\334\230?\362\302\r@q\305\005@\300k~>4\367\314\276\315:\004\277\243\233\276\276\230CH=\032{\204?\314\t\343>5\261\205>\367\032m?6\306\226?Ca\210? \022d=~\363\004\277\004\373\022\276\252\256\365\276\006\246\265\277\302S\327\277\260\377\205=\342\271\254\277F\n\254\277\250\200\313=\276bI\277 \350p\275\346K=\277*#:\277\272C\230\277\002\360\233\277\222h\251\277mV\204\277\221J\250\277\014\244\246\277\000/j\277\306\370\240\2769\252\372>\177\367H?\000\014\226\274\270\330!?\014]\303?\262\267\232?\366}:?\350\023&\277\204\2534\277\364\035\313\277\214\364?\277\023\212\226\277\302*\221\277\236\244\013?\010\234\324?\307\310\360?\313\276f?\364\2667\276q\235\013\277J<M\276\240P\301>\336\364U?\303\036\251?\340\252\270\276k\277\352>4\317\307\276\010\376\316\277\346W\354\276;\000\227\2768\275\022\275\224qN>\222\351\224\277\260\357\241\275\314\221\207?z[\325?gh\252\277\266\251\273\277~\372\213\277{\356\362\276n\235*\277x\305\352\275\273s\371\276\330\266M?$\3728\276\254|\260?+\341\214?P\210\255=\007\227\235\276\346\311\035\277\354\231\203\276\030\362\375<\352/\013\276\225)S\2770Q\254\277`@\021\277\3025)\277\035\367l?\236T\341?\357\003\247?\240\223\024\277\202\022\215>\000z\233\276\0328\311\276\244s\004\2770\373\250\275\026Lm=\351\260\353\276\022t\361\276\307\002\206\277\036e$\277@f\342\275~\242\307\276\020O\233>\244}\001\277\020\201\213<f%\256\276\014\367\255\277\360\"\226\275\003\252\035\277\002f\241\276(\252_?\0304\021>\254\375\023?\231\032\367>%\354\262?\237\211\251?\265`\023@\230$\256?\201G\022?0\344_>\300\253\325\276p^6\275\253\276\255>>X\034\277:\356\224>\321\250~\276\027\267\006?4*\306=\217\020\r?\303\034\245\277\337\202\253\277R\307\317\276#\016\216\277N\026x\277\317\237\222\277 \002\035\276b\331\226?\333\372\362\277\370\250\375\276\027<\234\277\270\205\201\277g\r\217\277\337\212Y\277\022!\014\277n\035C\277\335{*?\367\"\222?\236\004\007?\360E\010\277\330\324\036\276\304l\n\277\3728\013\276J6\033?\n\356\014\276$Uo?\354G\230?\006\220\200?\344B\264?#\255\354?\350\310\376?\016;\273?\350\255\322\276\372\323\252\277\037\253\320\277\245\246\315\277\020X\314\277H\346\212\276\300T\221\274D\267U\275\000\233\343>,jB?\370\035\306\275\324\301\225\276.}\263>\026+\035\277\356N\342\277fW\265\277w\241\354\277d\327\335\276\361E\374>@\336\245=@\t1\277\247M\210\277\006\025\261\277\002K\370\277u\010>\277\034\240\322\275_\321\035\277>\207\270\276<\250q\275B\003\200\277VoT\277\330}\362\277\002\354\220\277\323*+\277T\352\261\276\211p\216?\"\321\204?\353\337\006?\022\371]?\254\034-?\220\244\247\276 \307\354? Qj?G\022\335>\330\343O\276\345>\217\276X\344\256>r\354F\276\256\2731\277\320m\312>\\_0?\254J\210>\251\213x?\202\265+?\257E\212>\321[`?\312\225\374?\272\370=@p\220\351?\354\315\004@\31688@0\323\023@\264M\'@\256\235?@\250B\365?\372\301\001@l\342\262?\273z\252?\300rw> \327\014<d)\230\276\010\207\'\277\007R\002?(\265\237?\240\333*@\324\"\'@`\013\225?`@\320?\014\334\216?wB\264?\351\036\256?1)\367?D\203\247?\202\227\251?6\366\245?d\017=?\3177\005@\255/\334?\363l\014?\365R\r?\216\366\310>\"-\225>N\312\274\276\033s\234\277IA3\277F\002\214\277\275\336\344\277\303\336E\277\255\260\037\277W\001\367\276\034\353\217\277\300\203v\274\314\261\265<\337F\002?\342\213\232?\374\262\317?\'\036\356?o\357\372?J\267\277?iV,?A\371Z?\221\223$?\np\311>\3320\036?\336\035q\276\224\202~\277:\264\005\277\'7\221\276y\236a\277\344\236\215\277\022\232\237\277\273-\346\277D\366\251\276:C\301\275\242\307\"?<\207\244>C\024\363\276\364T\301\276\272R\344\276\224\215]\277\305\030K\277\244V\006\276\355\205#\277\t\'\022?\206\317x>F\202\206>\314\211\247\276\374\254\243=\034\022\020>\200\260\376\275p5d\277_\220\023\277\202\212\346\277\200\246\007\300/\036H\277p\322\310\276\nh\270>\231\t\203\277v\340\017\277\360`\355\277N\213\347\277\323\r$\300\205\317\016\300X\006>\277\205PJ\277\203\002E\277<D\033\277y\024Q\277\214\301\337>\263\241\351\276\264\274\330=kuY?<\241D?\020H\372>\2443\275?\217\226\311?Uu\216?\234\263\223?2r\243>G\036<\277X\365\223\277\030\327h\2770\365J=\357\263)?\274\233\021?\200\247u?\355\024\203\277\330p\242\277*\351,\277\304\273\010?\351T\036?\340y\235>\231$x?\204\313\242?\020\350/>\364\304\233\276a\275\214\276x%\r>\200 \277:\373\346\'\276\375\342\023\277\\\016\300\277d\020\016\300\333\301=\300\214\263\346\277j\374\365\277\336\204\025\300b\304(\300\363j\312\277%\232\346\277\032\020\000\300o\267\000\300\236A\026\300\265G\n\300\356\016$\300;e\022\3000\356\267\277\327dV\277v\275\307>v\007\021>\316\235\217\276\311$\'\277\251.\200\277\332@n\277\336\026\212\277\270\021\014>\212\357\217\276\317\222\367\276*@\203>\273rf\277\360\272v=\346\360I\277\232\003\332\277HF+\300\240\256\206\277[<\212\277\312\351\025\300\302f\016\300\032_\022\300\374\307 \300\322s\t\300mh\362\277\246Ut\277\3018\362\277\324|\253\277\247\227g\2770\216\202\277\275\025\236\277\212\361/\277\2149b\277\016\037h?p\332\177?(\375\356\276|o\252=P\330\237\274\026\331\227?\260\3042\276\342\263\254?\204\326H?`j\235\276F\000\321\276H\244\212=\340\016\311>t*]?\335nt\277`\277\241\277\3328\325\277j\2224\277_\270 \277PTm\277\355\333\207\277\320(2\277\303?e?\360\340\032@\257\275\024?:\267\013\276\020\376\340\276\030\344;\277\216\331\260>\264H\025?E\330{?AE\350>\242\253\205?E8\316?\261\213\303?V\311\242?\2205l=P!2\277\344\330\017\277~\017\304\277\022\306\336\277O\354\315\2776\373\n\300T\257\"\300\242\334\371\277\320\236\334\277(\321\000\300hN\301\276\344Z\272?\025\323u?\302\375S\277\002YT\277\210\265\362\277\260\375\245>Z\2511?V\265\326?\336Y\352?\206\333\251?X_\346>\312\022o>\370\027\342<\313\353[\277\364\275\344\276\232\214=>W[h\276\\\273\251\276\312$\270\277\2421\315\276a\340\235\277\215s\222\277+\244t\277&R\225>\341c\241\277/m\000\300\273\274\022\300\276\"\300\277j}~\277\366\272\215\277\3347\234\276\"\342\214\276\374\320\336=\003\215\252>\375\274\220?\014\r\014@;\007\335?\216\373\017@\220Bg?\245e\033@z{\034@p=w?8\202\231=L5D?\304\003\311?\004\026\\?j9\220\276\245Pt?\3626\375?\'a\253?\320\310S\276\346q\337\276\336\270;\276\251\247\324\277\"\026\222\277\372\330\370\277+%\317\277\355q\n\300J\"2\300\373\213\271\277\026u\372\276\200\253y;\366\\\237\277\007\352o\277\264}U?\002\345\306>\342\275\277?\313U\210?H\024K?\260\216\340\276\000Y\314<m\277\200?\325\005\236?\300Z\315?\267\363\377?gB\347?/\275\255?v\023\032@:B\024@\201\217\016@\r\202\253?-K\247?\250&\303\276`\362x<%\330\016>\244d\017\275\177:\270>\332V\212?\220<e?lm_?x\3773?rx\214?iD\037?\344\030\205\275\2223\302?\270\203\224\276\327\254\333?Vy\376?\033\254\313?\300\322g\277\2523#\277\326\222\300\277\343\202\216\277\365s\276\277~\203d\277vR\231\277\356\311 \300\021\335\007\300N\255o\300\251|6\300\273\'7\300R\302$\300\327RB\300j\347g\300\316\316r\300&4\216\277]\311_\277\020\t\215\277\340\343\005=\352mk=}\217\207\2768\363\376>0\333\324\274\000\216\370\272S\203q?\214\260/\276\021.\252?\006\023\320?\033M\264?\326\313\233?\274,o?\212\277\335?\263\367\324?\272\262\227?!b8?.\257??<\337:>Bx\207\277\224\333\267>\344\247\322?\022W\367?\276n\304?\244v\333?\242\355\333?\027;[\277\367\001\270\276P\214\373\276\016\251o\277\221u\322\276\214j\226\275\3061\024\277Q\276\351\276\n\313\"?\014b\363>\275\373\311?H\233J@\252\306\032@\031\\-@\260vm@G:B@v\215/@\206\372\r@\307&\317?\243$\014@I\375\027@\365\263\272?n\365\234?\"\217\241?\020J\262\277T\201e\277F\014\"\277>l\337\2766\303\002\276\022\325\320\276\3409\223<]\235+?\010\0377?\302@x>_\3075?\002\321\321?\000\034_\273\253;\343\275\017\243>?\350m\300?n\363\227?\363\226\r?t\363Y>gw\315>(2\246>X\233?\277\372\016\337>P$\332>}\370E?;i\320?\226\001\207?\345n\353?\277m\001@[\347\375?@\200\373>U!\240>\202\372L>B(\201\276\320\323\021\277rOl\277\'\340\036\277W\361t\277\330\351\021?\341\256\204?\030\307\317?\273\270-?LM\n?\260\307\272?j\374\001@,\373\204@\346\357L@\0133$@\264\031\200?\231|\213?90\272?\347$n?\364\213\r\276<\017\200\276\365kH>\240/\000?^\267>?5\355\270?\376\233\355?*\345\342?\344\375\206?\367l\224?\203y\241?\266\005W?\342\207\214?\010\022\243?\270\351\020@\326L>@\366E\222@\331\272e@\230i\237?5\311$?\365\243\361\277\020\\\332\275\007\002\332\276\000\2553\277\244ti\277\262\2422\277\245$+?\304\252\235=:\323\255\276\217\354S?\371~\345?\013\335v?\036\322\001@\212\325\336?_VC?\026%\031?\305\372\215\276s\262\">\272\036~?Xl\t?\300C[<\270V#\277\300\354\266\277Z \317\277>\220;?{E\r@\212o\310?\317d\267?\001Y\353?\357A\240?\232\305\272>\340\323\252\276D|;\277\nyM\277\350\034\316=0o\334?\254\367\247?j\362\034@\n\360\021@\026\350\375?\276\366\004@\320\250\365?L\363\366?\373\334\317?8G\037@z\310\311?\366\003\365?\225\340\316?R\370\243>\260\250\021?\264\215H\277|/\237\277\240y\002\277\321\362\006\277\364R\221?t\336X>\\\237\342>pJ\211=\241S5?\254\372\032?X\212\231\277\3408Q\275\022\245\364\276\312\362\275\277\236I\224\277\276H\265>\007\326\237?L\345\230?#lJ?f\324)?aem\277\301\335\314\277\306\257\'\276d\001b\277\026q\310\276\016F}\277\354\347\352\276\246\241\214\277\277mv\2775\272\000\300\264*,\277\366\010\377\276\242\354\255\276\306K~\277\211\302\222\277H\271\343\277\274\260\351\277\377<\027\277\270\235\343\2776U\203\277\304\314\027\277\327\347\332\276\230^^\275\025;\"\277\242\277\201\277\020\310M=C\260\227\277We$\277jL\333\277\365Q\276\277R\307{\277R\016D?7U\213>^\362\225>\200\317\330\275\3215\233\276Q3+\277k\333!\277\367\177.\277\244z\223\275g\026\206\277\324\333.>\376\212\243>\220\351\000@\276\200\n@Z\251\033@\254]\271?\240\036\n@\366Y\355?\361\261\303?\326c2?\016b\031?\360\310I>\360^\376>\324\030\013\277f\355\027\300\202\244\336\277\0077\337\277#\327\360\277\240\374\313\277\343&H\277\300\n\331\275\354x\217>\302\007\336\275\265j\037?\224\'\231?8\373\231\277\'\260r\277\200\214\204=r\031\345>\222\267\010\277\303\212o\2774$S\276\300\372\314;\316\0370\277y\377\213\277\350\363M\276\314\272)=5gO\277@\336r=\372\333\272\276h\376j\276D_\255\276\331\367@\276u\375\250\277j\307\251\276I\203\304\277vMS\277\023p\017?\345B\376?\337\303\225?\222\216\343\276I}\204\277\305s\204\277^>R\277B\243\321>PP\300>\001;u\277BT\230\276\'\263\236\277p\251/\277\354\226N\277z\263\242>x%\217?\213+\233?\310\200#?\210\367\356?w\347\031?\375\n\010@yX\304?Ti\215?.\363\031?ozG?$9d?7_\027?\316f\260\277;\177\030\277\022,^\277\304\035\346\276\372h\006\277v\344\314\276=\373\365\277~\265\357>\010\3649\277\000\215\261\2773\364{\277\300\265K\277\270\305o\277\317\017=\277\315\362|\277R\203\024\277\200\342\257= /c>\340\212\014\274?\022{\277xZ2\276\347M/?*\372v?\263\303\231?\210\265\266>\376\341O\276\204im=]\377$?\204\264\226?\030\312\324>\014@V\277,S\202\277\344\305\302\276\256X$\277\206\334;\277\352\243\312\276\355\247\217>\017\221\034?\245\236\033?\303{\351?\232U\204?\003\247\212?\032U\221\276/O\274\277\336)\304\277R\324\357\277`\027\377\277\345\'\317\277\202I1\277\304\247\200>\304\023c\277\3449\351\277\272d\305\277Y9\366\277X5\306\277\311\220\014?\300\276\204?\026)\207?G\"\236?\316\211\276?\023\377\207?{\356!\277U\177\337\277=\021\251\277|\235\310\277\027\224\250\277\370H\316\277E\232\247\277\334a\220\277\207dm\277\036\361z\277Y%\243\277\005\222\n\277 Co\277\223\001)\300d|B\3002\243^\300Ez\'\300\206i/\300\234\235c\277\346QD\277g\273\351\276\350t~=hO\361>\002\335\270>\315\364r\277\240\262\302\277\024\371\010\277(\006f\276\2710\240\277\317\036\265\277?\337i\277<$/\277\304\362a>\222\271\344\276\370\225\025\277l!\317\277P\352w\2760\273\001\277=#\262\277\202`+\277r\372\233\277\320\363\371\276Ma\311\277@.\014\2757-\325\276\232\033\267\2752\376\215\2774\271\030\276*\201]\276\324\263\021\276oA\206?\202\007\\?\250\3021\276vGK\276\330\324\256\277\010c\240\276ql\272\276\366\246\310\277\201\355\261\277\365\310\227\277([\277\277\220\022\264\277\242\361\252\277\353I\364\277\334X&?CS\375>6\036\237\276\223\330\265\276\345B\232\277\200\245_\276f\324\026?\254\211\240>\216xo\277\"S\247\277\000\333j\276\372\025\350\276lD\241?\320\273\002\277\310]\201\277v\240\264\277@\004\337\277G\363b\277H\276\214\277\224xe\276]\215\340\276.\363^>\226\346\254>m\013`?LA\342>\013\027\003@{\212\312\2723\242\245?E\360\221?`sn?\241\306\305?n\322\257?p\353Y\276eM\252\275\341\205-\276\304\375\026?\236\331r?P\274\321\275\304\202\023\277S4m\2765P\222\276\351\276\252\276M\212\201\276k\r\245\2773\302\027\277\000*\225=\202U\035?\306[|\276\201\006\210\276\374\033\322=uE\205\276\030\322\347\275\032N\204\275W\235\204\277\304\316\262\277E\305\344\277(\035\006\276\224\017R>q*\006\277\206sW\277M\235\206\276\340]\323;$\007K?\200\322\034=Y\245\007\276\001 \251\277\226I$\277$\337\320\277>~\212\277j\225\316\277\301\374\027\277p\250 >\274\235\263?\026t\265>\320\007^?\242\372D?}\275\301>\224\321\366\276NX.?\227,\274>\251T\"?0\332<>\200\270\342\276,}l\276N\363.?\226M\203?\177\333\224?\270~a>\243\215\220>\014\001\301\276\010\253\014\277\314\314#\277\257\217\277\277\376\3003\277\016\033\270\277\020\221\t\300\360\212\313\277\264\364\034\300\364p\n?\366\331\021?\370\342P>>\\\240?8e\251?\242\373\213?\266j\221?\377\350\277?\211\271\013?\252\002\200\276JW\254\277\\\361\001?\032\267\362>\222j\003\277S\215\240>vaT?\210\024$\277|w\212\277\201\027\235\2770K)\275\232\344\352>\000z\n\277\304\017\205\276`\363\220\276\010\200\233\276\233-p\276ft\224\277\030\204%>5\210p?\300\322\301?\260\355\320?re[?p\267\007?\205*\211\277\350\264\234\275qn\230\276\013{\222?\020W%\276aF(\277\204\251\017\277\023\231\201>Q\323\377\276x\316\210\275\257!\222?\\\331\364?8\240\263?f\330\013?\177i\306\276\343\376c=\303w^\276J\230\024?\200_Z?r\313\315\276\006\243\242\277\316\215\230\277\214\202\326\276\216\007_\277\366\353\231\277\370\347\252\277\276\340E\277\257\016_\277\\\356\215\277\200L\021\277\332oJ>\272\370\026?\367#w>\326\201\254\276\0328\332>\216\253-\277\211\2707?=\311\006?\300\316/\276,\346\013@\336\374+@\311P\r@\360\245h>\314\351P\276\000\301\307\276\273\002]?w\272\374?\340d\'>\341\220{?\005\200\245?\'\255\355?\"\375\332?\230\302\027\276F\371\222>V\001\207?\301\'\241?\322\372\260?\375\240\031@_E\367?\252\332\256?\304(\002@\263\303\026@\240|\237?x\320\225\276\344\236-?a\024\032\277\312U\243\277\315\374\261\277h9\256>\300\233\016?\031\326\306?\271\333\n@\350q\205?r\206\206?Z#\364\276^\031]>nW\233\276\270R\204<\302\347\217>\312\203\224?x\016\232>\360\247=\277\260\216\333=\014\316\264>\372\227\032?\310\213D?\300w*<a\377\301\277$\233\\\277NC\014\300\356\037<\277\\MI\277(\027\333>\234cZ?E\364\256?xx\033?[\235\360>\005\304\316>E\3000?\177^\323\277T\232\367\277\274\243\203\277\002\363&\277\372D\266\277\2121\344\277\036\004\t\300\006\312-\300\372_A\277\262\255\321>\031s\312?\314;\341?A\314G?\023b\030@iB\002@?\230\327?S\010\337?\300\337\233>f\261;?\250}]>mh\235?\335\313H?\207\301\236>\215\366\376>\213;\245?`\263\217?u\317$\277\375\025\\\277\370\023u\277\357\352\325\2777H\324\277`\035\037\277?\270\'\277r\271\236\276-\346\211\276!\200G\277\205%\213\2770\232p\276\n\304\t?\210\332:?t\\/?rZ\260\2761\254\250\277\240\261\247\275\345\255\264?4\016\t@\241\203\304?\2211\201?\300\n-=*\236\264\276&\365\030\277\374\005!\277\034\207[\277\371\350\023\277.\252*>a\007p\277\275\335\310\276\202\332\'>\346 !?t\341f?[\261\031?\010~\203\277 \334\214<4DK\276\314 \340\276l\266\205?\212\353\313?\214s\356\276\300\232X=\317\363O?Dm\020\277l\237U\277D+\320>\354\300L?hb\213=\026\301\245\276\006\360e\276(\313\271\274\254t;?,\034\333?\362C\333?@~\222?>\331\242?\2068\253?\214\275-?\004\342Z\276\024\340\213\276\354\250w\277\304\372\331\277\201n\227\277L!\007\300\354,\331\277\240\244\371\277\252\206g\277\335,\240\277\366\267F\277\305\3579\277Dr\331\277\021 \223\277\340^\315\277|\025\363\277b\224\352\277\014g\222\277\360{\254\275\2720\023?\270\356\264=/=\236?\300\367$<"
      }
    }
  }
}
node {
  name: "normalize_element/component_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 800
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        tensor_content: "\306\226D>\227DO\277\026+\005\277\304\203r\276.\'\246\276\313\'6\276\230\217\024\277\240!\250\277|[H\276\321C`\277\264\317b\2776\010X\277K\220\037\277l\303\315\275\235d\"\277\206\262A\277\005\323S\277\254L\214\277\210\275?\300\272\246\035\300y\365\020\300e\204\370\277\344\242\367\277\331\207\365\277\327}\257\277L\002\201\277\356\036\030\277\326\311&\277\302\211\245>\230P\003\276\327\333\025?\365\252\353>\307X\r?\364\032]?s\364%\277\304\024\250\277\200\016B\277\220\236\030=y\"V\277\355\202\004\277\255\030\235\276$Z\237\277J\353\240\277n%\301\2774\036\023\300\014G\275\277\3066\255\276n\361\021\277\336\212\246\276\014\335\323=.\201\t?\035\021\375>\202qU\277\240\202\256=X\324??j\037\017>\232\277q?` \344=\277\010\272>\200\221\307\275\353\023\020\277\227\326\013\277\320\210\255\277\000\\s\277\026$\221\277\303\255w\277\204Fy\276\210\006\241\277\005]\321\277\214\200\225\277\204W\023\300\203h\037\300\362\211!>\222\376m\276C\207\313\276\212\\{\277\225\357\017\277\326\221\231\276\377b2\277\216s\313\277C\220\003\300\343\373@\277z\234\026?\366\221n?\241\265N?g7\335>\030,\007?\247\354\245?\260\257h>\213f\230?\215\021\033@xx\311?RC\201?\003z9?\317o\201>R\325\377\276\332SR?\017\200[?p\261M=\277J\206?\307\007\002?J!A?L\000\217?\260\242\327>\263\n\016?\300\233\266?2d\366>\360\212\241>,c\310>(\210%\277\344\242\305\275di\221=\037-\213=\360\237\233\274\300\324\005\276?B\315\275w]\253?\004\373\256?\2126~?\026\276\035?\233\032\013?\265\307\025?*\375&>\336\023\021? \377`\274\r\343\r\277\367rP?\256?\341\276\306U7\277p\255\224\277u\235L\277\360\254\342\277i\316\251\277u<k\277Xu\265\277\204\035\371\276\000\232\225\277\314B\">\230<t\276\376;\351\277Y-\340\277\250\250\264>4\331\261>\340\261{?3\2268@&\244_@\311\355\367?B\203??Jru?\302!\217?\216\236\225>\304@\362>kJN\277zR\254\277\201\027}\277U<\332\276z\033\215\277n\250\227\277n\006;\277\n`\213\277\220v\352\277p\034\246\275U\321G?\001\003\272>\326(\036\276kQ\273\277v\020\365\276\363\025\205\277\217,\275>\270\342\250=\234\025\316=\340\035\353\276\220u\202\275\342V1>D[\r?-\235\347>\342\267&?\004D$\276A\214c\277\036\277\222>P>\312?\204\031(@\202\315W@!h)@\316d\020@\370\220\200?\356Op?!\357\217>\006\254S\2774w\243\277|&\262\277\030\360\264\277Z\264\265\276|\300\307\276\"\3317\276|\377\201\276\222\\#?\276\355\303?\244X\026@S\034\244?\234(\310>@\314W=\327\341-?\030cS?\006\273H?\370\361\215?0\363h\275\225\235\333\276\246\261\207\277N\004\246\277\016\371\324\277\000\320\243:\006\261V?\300\273\036@\317B\034@\242-\220?\202\253\222\277<0\313\276\"Fq\277!\276\207\277\221\022\350\276\027\274S\276\310|:>\235\330\316>\302\203\\?\347d\254?e\307\252?\346\260\272?\304 \300>\255>\257>\322\237^?\271\345\001\277\2764p\277\002\336\373\276\357\001\345\276]\243\257>d \223=\036\223\226\276$\302\257\275\310d\220\277\270;\333>\336\326\005?\\\035\254\275\330>\234?\274\320\204?\252\370\216?\327\177\262?%\374=?j\250\213>\360!@\277\236\302d\277GT\'\277W\261\002\277\007\017\330\276VI)?t\365\002?\274\326\017?\305\266\214>%\235\003\276\340\335\206\277q\332\032\277m_\204\277Dr\203\277j\035\213>\036\312\031?\342\333\216?\274f\370?\264\204\220>\200\274N>\017\317\221\2766X\212>\310\027\202>\321a\235\2777D\326\277\020\304\312\277T\367\377\277\207k\320\277;a\330\277\024\246\177\277\230\016\275\276\027\0219\277\245^\'\277h\356\307>\205\225\020>8\335\014\277\034\000f\277\372cD\277>\361\021\276\375\257\000\300\333g\301\277\\R\202\277\370\014\237=\361.@?\034\021Z\276\371\032I\277\324\236P\2770\3255\275\346x?\275\256&\226\276H\375\337\277\351\371\030\300\2142\242\277\3043\333\277\302\247\252\277\350\356>?\247\347/@\017K\007@\352\306\345?.\334C?\206P\313>c\236\314>tL4\277\355\036$@3\254\323?\031\2472?\300\271\362>\212\205j>\205\033\224\277\256|\205\276z\262\313\277n\013P\277\305\243\024\277*\343\234\277\227;q\277\000O\302;\215\200r\276\255\353\223\275\212\217D=\036\020\270\276\204\037\221\277\225\312\034\277\335\213\237>\330B\252>\304\021\373\275\203\301\240\277\200\037\313<\272\303\261\277Q\323\343\277\230\013\355\277\n\026\022\300<]!\300xU1\276\362\322G\277\306O\244\277\273\364\205\277G\004u\277\230,\271\275;\252\233>\254i9>\204\303\027>*~l?\224\347z?\000\246\027?\326\003\306>\344\325\267>@\304e?\316\003\236\277\034fA>^\370\024?\314\031\263\276\307o\014\276\322$\224>\254*N\275\225\337\177\277\302\366\032\277\024M\301?0\250\233?l\200\004@\274\300\260> \252\031\277G\020,\277e\226\005\277,!u\2778p,>\317\366{?M\256\031@M\033\023@\244V8@=\210\236?\021\362\234?Hy\222?\303\027\237?n\366\315? q\236=\033\351\244\277^>\253\277\220\003\215\277\362e\005\277\3408\033\275\030\322^>\346\n\005\277\230x\205\276\366a\273>T\306\277\275\217\022\241\276\334\216\206\277\241\363\325\276\210\013\336\275?\3771\277\321\022\216\277#\261\224\277\342\222\221\276\325\253g\277\351\rm\277\037\373\200\277\366\253\304\276\372o\251\277\263\222g\277L\273)?`\376\230<\3357\266=\" &\277\366\027\265\276\224\207\206\2774\314|\277\304\273O\277\020\247\253=}\357\316\276\267\265\255\276\362{\234\276\235\r\250>Q\033s>A\234\210>?\010\254>\272~\025\277\000\225m\273\021\331\243\276ee\314\276\264\230W\276\2306\234\277\316&\277\277F87\277\342\377$?\002\032\263>\250\'#=\214=\204?0\253\322?\224>\201?\305\254\221?@\016\261>TM\005?\330\267\246>\214\223\363=\260E\303>\302\312\036?xu\217>\002M\222?*\020\035@jr\365?l\035 @\205\201\030@OG\331?\215\272\242?\375\324\274?\000\251\203\273X \244>\036\374\241?\320\231\003\276\\\314\327\276n\027\037\277\031\222\273\2760_\277=\030Y\243?\031\256\223?\224\206\267\276.\261\233>\330hh>\275\320\261>\364\236v?\003\324N?\254\201\226\276\355`\211\277\261,\017\300\374|\300\277X)\322>\3311\317?%P\260?\312\001\237?\254\tv?T\177\030?\013\352\205?\240^y= \1779>q\013\032\277\261\032\314>\267\300V?\213M>?\256\003\003?P\230\005?R\203O?\200Z\350=\345\031\223?\206\025\303?\373\362\260?\320\252\030@\251)\003@\024)#@`\373Q\276\310*O\2772\304I\277n\033~\277\255j\007\300]\220\002\300\251$t\277$!&?`\331v?\t\350\020\277\032CN\276\315\321t?\324\374\303?\242/\026@\250\231\265?\0065\300?\334\272\242>\214Oe?\374Wu\276\327\266\207?\212w\021?x\357x\277\316?\204\277\026\234s\277\277\007U\277X*\314\277\301\204\010\300X\354\240\277\330\n\"\277\220\020\241=E\372%\277d(\207?p\201\217?\215\036\360>\010\"\201=\246\t^?\000\373\035\277\nB<?\326\n5> \223^<t\033\316\2751\242\333=(\336}?\360\034\377?N:\363?\347\267\312?\326e\362?,C\333?\354\224)@\232^\227?vE\202?\324\031\271?x\023d?i\2661?,9\227?\321\306+? SM\276\330\355\247\277\027\361\241\277 \353\304\276\002\3412\277uVd\277\330\3056\277\204\033\037>\316+\031>\024)\210=\212\3458\277\320$6>i; \277\232S\005\277\336(\223\276\334\217\324\276>E+\277j\251\003\277\036\001\237\277\247n+\277\350\205\255\277\rf\214\277*\275\372\276\310\210\263\2775\243\321\277)\206\002\3006\262:\277\0208\313\277J\365\272\277L\262\210\277\374|\250\277\360\337\270\2772V#\277\310~\277>\225\257c? \256\n=[\336\024>^\2536?\001{\324?\366\023\320?W\321\030@\240\223e@\260\344!@\266wE@\231\013o@\360\201\022@8\3465@CH(\2772\327W?\007g\242?\201\347\n@\326\241\020@\2264\020@\300\032F@\216\2621@\223\251\003@S9\252?\020C\341=\300\263\353\276\310~\014\277~j\375\276\256\224d\277\262s\034\277\'\306\256\276\024\363\001?{n\037?T&\306?\"\205\275?\300\342\351\275\263-;\277\026\034\350>\216\372\247?\372p\331?\034Pu?J<\001?\265\275\215?\331\263`?\037g\372?\257\205T@C#\323?p\277\324?\341\312\023@\354\312\256?s\316\252?\334*\330?B\205\300?\024Ob?#`\324?\236\037\275?\3121\234>\\^\222\277\364\034?\277\331S\023?\347%\377?\023\375\025@\3264\014>\255L0?w\247\201?\310\337\271>J\364w>;\346\235?Zw\221>[y8\276\330a\225>)\327\260>@W\036\2753\321\213\277\006\n\263\277\237c\006\277\200^\'\277\332?\376\276\0230\352\277L6K\277P\246\243=\326\242\235?\031V\005@\035\267\274?Z\315\336?,\325y?\020\264\033\276\250\352\201<\355\347\006\277\2261.>\356\021G?&7\210?\354\342i?J\356C?f\362L?=\327\216?\211\241\326>\217?\005\277w4\215\276\022Y\216\277\207\225\035\277\210\237\227=\345\272\354\276\212\027\t?t\304&\277\224$\030>\215\333\247?\254Mk?\353\352V?\317\030\'\277w\235w\277]Z\265\276\236\';\276\334\301\314\276\320S\207\277=\345\247\277T=\"\3002(\010\300\035\023a\277\270\320\271\277\300{\343\277\030&\323\277\257-P\277\240[*\275\303\263\344>\371\364X\277<\237\204\276$N\263=\266\321\025>\025T\226?\204\"->\202R8\277\272\362\261\277a\232O\300\361\340m\276\223c\265\2768UG\277\302\343f\277\023e\005\277\267\361\226\277\000\324\341\277So\201\277\347\267\020\300\032\363\232\277u\221\002\300\364\315\206\276c!.>\224YS\277P3N>\032\311\007?\022\3157?8\334\206=\016\270\346>\3350\265>\354\335G?@\267T=\302\001\347\276I\356K\277\353X\207?\352\310\230?\371F\213?\342o\216?\354\004\000@#\022\r@9\n|?\244t\225?\272\033\212>R\3439\276\321Oj?\"\343b?n\270\035@\002\035a@f\312\205@\201$X@\230\225\341?El\007@\360\033\327=^8\337=+U\026>+v\342>\370\304\316>\200^<\273B\034\206\276FN\241=\005\316\346\276\215\220\357>f\006J?t\013m?\203\304Y?@\336x\276\261\014\224\277\376\257\203\277`\303\214\277\272\353\013\300D_3\300\312\211 \300&3\005\300\300\301\222\277\004!X\277\3343}>\260\2369?H\254\344>r\021=?\333H\306?\214\034\336?\200\210\003?/z\225=\t8\021\2766\006B\277\200\006r\277\376\370q\277\204H\203\277\304>\020\276\254,r\277\003\260\252\276<\256x\277P\320;\276\"\276\253?W:\234?\250\203\242?\303\036\020?-&\226\276\330\205\230\275&\211\027\276\017\373\226\277\250 >\277z\002\240\277L\313\250\277\301\035\246\277N\221\312\2776\233f\2770\032A\277\310\024\233>h\361\n=\340\203V>\273bV?\032\nO?\252\224>?\336\237\274?\251\202\256?\314\325b>>Bq=\317z\217\2776\204\374\276\247\266\274\277\226\3034\277\000Xy:[\316\355\275JM\305>\017\272\"?~\352\261?\"\225/?\034\276\256>\\.d\276\250\022\332?p2\333?\366c\235?\341g\024@@\226\n@\022\0367@j\203\366?D2\005@\322\010\231?\252x\307?<2U?}\214,?(\234J>\345a\267>\351\372/?k\225\212>YT0?\267\2141?\260\347\260>\217\211(?\200\363\"\275\376\215i?\274:\033?\2443k>\370\016\212\276\200Q^\276*\352\364=\035v\211\276X\247Y\276\340\347\035\277(}y\277\004\377\005\276 \n!\277&\250\230\277\312C\217\276\337\036n?Z\316{?\224\245|?\363\357$?W<$\2772\343v\277^\210\206\277\033\021\030?\346\235\271\276 \224*<\017\366\251?@\027\217=\n\220$\277\315\274\024?\252\033K>\315\242\013?p\013B\275\363b\317?<t\035@\240z+@\032z\r@[\272\346?\242h\013@\324\216\354?\301e8?\t\r\211?\315\315\n@\016\203\274?\240Y\324?\201\215\255?x\024I?\027l]?>q\212?l\314T?\376\276l>\372x\303>\022\326E\276n\030\243\277\020\214K\277 ]\263<ci)?\236\253\217?2m0?\020\251\214=6[\267\275\021b\324=\2063\260>\010{)\277\356\2722?$ \007\276\342\007Y>\n\373\237>\260\214\037=/\344|?\205\354\362>\014e\266?\273E\212?\336\206\016?IP\373\276\256m\253?\240\331\350\275\201\354p=\2167L>z\360\212?\342\363\027?p9&>1k\370?\363\214\213?\267\214$?\254\214b>\365\215\332>\031\3754?\3061\321?\351\231j?N\013\034?Q\262\327?\244\255\266?^=\347>p\350;?\020\364\206=Lx\265>\337\001t?\000\225n?\250EW\276{R\277\275\242\236\005@\304\356=?\350Q*?\016~\330\276\333M\264\277\315\004\223\277d^\317\276\2304\022\2771\320\003?5\343+?L\026\311\276\31438?\340\025\231?\342k\316>):+?\314\347\202>\322\312\227?\200k\345>\350=`?\306\345\267?t\007\261?8\353\010@\202e\206?>\272\216>\350\374\210\277\267\033\206\2775\002K\277\301\033\216\276\274U\243>K1x>\026\250\271>@\023\232?\014\030\353>\000\020j\2731\254Y\276\224\025\211?\276`\245>\320\215X\277n\267\250\277\256\323\301\277\210\371\017\276`\205\n\277`\243\013=\246G1\277\306\317\226?|?@?@)\312?\264X\021@x\200\202\276v\375/?BgC>\263`r\276P^p\277\2603<\275H%\320>h>\273\275nz\204\277\334\252\004>\346\336\201=\377\241\227>L\352\000?\311\017G?\237*\003?]\310\313\276\000\016\022\300\0101?\3008\2545\300`\010\001\300@\370\271\277\252\240\223\276\004:\014\277<\242T\277\3168\n@\035I\261?\006l @\336C\206?H\036\207?\216p\331?*[\013@\022\005W@r\306H@\356\225\312?<G4?P,\240\276^\230\263\277\270\355\270\277\345\317\026\300,\333\003\300\213(\017\300\362\230\336\277\270\257\221\276&\267#?\276\006\031>x/\026\277M\n\234?\370\211\235?\276\032\212?pY\314?\002\301\354?N\347\241?Q\221\301?4r\243?\222\332\013@\227~\315?\n\341\253>\306\325\203>+\240\001\276\315\362\327>P\001\243>\356\375\334?\354\003\217?\036\330X?\332\177\357>\354\316\225?\177\220\261?K\224)@\264\206=@_E\201?\007\317\n?B\277\277>\006\323\351\277&\333\024\300\nW\331\277\240\200\001\300\213B\363\277\252\031\216\277\324Qy>\314?8\2778\265\257\277\300\272\213\274@5\t\277\234\002\006?6\271\031\276\003\272\246\276\250&\267\276\000s\037\275%\325F\277\222?Z\277zp\000\3001\370*\300\276\2038\277\337c(\277\235\211\034\277\266|~?\310\361\341\276KX)\277\243\342\'\277N\271 \277\244\375\374\275R&7?\034\034\005@\311\270\232?4\345\211>\221\371M\277Wc\301\276\351\322/\277F\275 \277\000t\344;\276\227Q?\t\3212?\\\371\001?\322\207\002?l\251\310>\212\006\215\277\030\261\353\277S\302\010\300\226\021~\277\200\001\004\300\330=\326\273m\363\271>\352\026\345\276\206B0?\372\327\024@\002\360\270?n\362\316?\036u\027@I\335 @|:\244?\002p\222?j\256\321?(+\264?\tw\370?\r=p?Z\223\373>\354U\201=\010\324\240\276TR\353=\211;\362=\372\315q\275\337\022\266\276\350\013\260\275\375\316\241\277H\341\271\276D\036\226>pb\260\276@\001\214\277\0366F\277\310v\261\275\252\2315=D\016\251>\372\311Y?\201\303b?\326\316\277?9\027\370?\376\034\376?\246\260\324?\340\261\260>p9`\275\322\341A>x\262\203?X\201\300\275\340\311\260\276\277\314\246\276\314hV?\352g;\2770\006F\276\320\310\310\277\307\210\206\277\354\217\235\277f\264\276\277\r\305\017\277=\200\244\277\210g\352\275\311\340\316\276ih\267\276d\026\350\277\000\356\305\277\034F\325\276\334o\243\275,\274\003\276\036\310\"?\213\036\202\277\226\256\367\277\037Y\307\277\250\261:\277*\205!\277OME\277\021\264\230\277\353\244\023\277\206\374\213\277\350\024\256\275\331,\017\277\234\001\304\277 ~T\276y\017\213?\312\313\002?\036\355\025\277\373\350v\276\312\270\n?w\356^>/\223l\276:\007^\276%\207\316\277}G\336\277\312\361\302\277\3075\030\300\0325\371\277\177\204\276\277\340e\027\276\320\3743\277|\342\026\276J\220=>\214y\006@Do\236?\327\026\371\277RG\266\277\026\335\007\300\000\377\251\276\026Sp\276\237\277:\276\314\306\206\276P%\210\276\321\333]\277:\002\003\300\026}(\300\034\302\t\300.\213\010\300\260\311\220\277@%*\277\224\272\311\277\036\203R\277z\004\326>D.\234?\370\005\204?\316\3313\277\020\240o>\013\223:>\006\3145>\344\372^?*@\016?.\252\003\277\244J\227=Rj\026?\022\364\020@\'\337\352?\320\337\340?\363\2641?\232_\"\277$>k>\320SE\274\020\032-\277\200\351\261\276\343\016\225\277\035\036\341\277\200\374\324\277\032\342e\277|6\n\276L\246\035?\250NS?\233\246J?\344\267u>\334\222\205\276\005\032e>\023 g?\262\005\221?\314\335/?@\326\326\274\0052\263>$\300Z\277$\251Z\277\r+e\277\2344\t\277\240\027R\276(\317\303\276\352\022K\277\210~\002\276/\274\351\276\0330(\277\260|\213\277\327(w\277p\334q>Q\344\226?\264\343+?\267\205$\277\364\212\255\276\344\342\016\277\014!Y\277(=\332\277\245\304\004\300\365C\301\277$\351\365\277\243\210\013\300\236\002\227\277\024y\351\277b\346\000\300\tp\023\300Zb1\300H\361\243\277\036s\231\277\225y\211\277\220\003/\277\203eT\277\024\271\366\276\216\320\027>\034\236 >uU,\276=\226\000\277\016\267z\277\223A\201\277\370\314\331\276\234\003\232>\223\2547?\300\350\227\274\214\327\023\276C\251\261=\244\3113\2765\332.\277\233=\207\276\305$\363\276\003{\372\277\364\343\255\277\254\272\227\277^*\365\276B\220s?`N=?*\266\375>\004\033G\276\026\364O\2779W\006?\225\001\364>\340\330\305<\002\311\034>\020n\207?\300\363\207\276A\323c?\026}\244\277\214W\316\277\244\210a\277\036\221\005\277\257NN\277\370\345\351\276\"8h\277{Zi\277^\302\261>{ul?<\321V?\200\t\362\275\356\201\002?3\376,?\320R\330?M\022\352?tE\210?(\250\362=1\341g>\nB\254\276m\215\237\277\252l\212\277>\273\001\277-\225\007@#2\016@\323\252\005@\222t.@}\366\020@\351|\327?o\301\013@X\246\365>pN\037?Lo\304> \224J>\342\343U?|k\320?\240$9>\213\350\032\277\022\324\366>\212hK\276\347\226/\277\220\310\'\276\254\262\005\277\356\260J\277\350\377\030\277#\365\250\277\316k\025\300\301\305\271\277\261%n\277\032C\267\277\030V\264\277g\210\211\277*w\310\277\237*\240\277\341\323e\277\342\213\226\277\220\221j\277b\025\033\277\004\n\355\277\017\264\231\277\001\317\233\277Ro\274\277^fi\277\302\240\r\277\214\360\223\277\327\217\022\300\200\005\223\277\2063\341\277\034\335\024\300a\245.\300$\014M\300\304W\362?\207\031\n@\374\275\022@.\026\243?\013@\003?x\220\223\275s\224\236\277\340t\007=\316;\037\276\250p\235\277<$#>_*\207?L\375\021?*y|\276\310\'\031\277\255\352\236>\212\372\201?P\322\337?\317\330z?\004~\270?\326\336D?\010\345\027?\211\342\320>\016\200F?\020\234C\277\232\346I\277\000\361\206\277\213\310\361\277\231>\215\277l\374)\277\332h\303>\266\351\250?f\265\332?\311(\'?&uk?\230\035\315\276:\215\265\276\344\035d>\264\263:?\254\034.?RCi?\007\334P?\004\276\037>\362\020\222?\300h\027>\202\030e>\343\337#?Q\325R\277\360!\260\274q\276\232\277\300*\220\277^\027v\277\242Q\254>\024\244\376>H-7?\201\247\003?6\233(?\252\'\232?\305\267\366?AS\327?\251#\255?V\211\262?\354\232\334\276\230:%\277f\344Y\277\325A`\277\366\223\337\277\262\2108\277\"\317\236\277\306\021\216\277\003\222a\277\327{\016\2770\365\363?\221u\224?0Z{?\320\rx?\3465\365\276I\340\256>Fq\226=\371\r\363?\344\357\221?\214\236\217>\365D\247?\010\331\372>\316\364:?V\304\247\276\\.\305=\371\315\350>)\314\362?\010\013\206?\274\341\202?\370`\r?\266\206\n?\030<!?\261\237-?\304Il?R\003Z\277&|a\277\370<\353\276V\371\253\276A\371\255\277\030\024\003\300\373\243Z\277g\276\"\277\274\241\275>\263\014\007?\352 \302\276 1O?\260^\336?tA\221\276d\225\030?\350\004\250=J<\023\276\350\036\037\277\234;\226>\230o\243\277d\337\220\277\307CU\277\2108\341\275\216\275\373>\n\301i?\302\023\202?U\020@?\273\373\304?N\t\224?R\246\325?\357Y\354?\007I\007@L/\\? \316\207\274Y\256D\277\256\243\360\276{\334\004\277\2646\276\276\331\213\261>?\007\317\276\235W\004?\225\263\355>0\213\265=O(q\277H\344P>\367\365K\276\032\3315>L\373\316>CY\300?0\262\341=\024\037O?P\233\376>)}\313\276#\365\377>\353\013$>\260{&\277\276\220\205\277\013\241\206\277l]s?\020\200\262?\316\316j?\230\327\301=@M\360;}\212\202\277I~\\\277\000M*<\202\243\005?b\333\242?\030\306\310?\226\021\234?R\245^?\315\347\304>\373\337\271\277\330\266F\277PJ\305\277n=\236\276\330\373\302\276\214\"\361\276\376\024\312>\244\361\377>\\\2042\277\334\003\224\2770\215\257>f\305\020\277&\366\374\276\204A|\277\237l\217\277\315\320\227\277\035x\253\277\237\340\265\277\222\377\372\277\214!\325\277p\251\345\277]\271\355\277\200\324\016\277\257\245\321\276\032\336\237\2778P\255\277\000\234\026\300>0\316\277\267\215w\277\355\232\210\277E\005\364\276:#?\277\'\325\365\276\232\223:\2776\275\262\277K\035\036\277\033\367\242?\210\033\010\276\225\006<?a\001\177\277\334K\204\277\220@t\275/\214\256>\362\223\213>\205#!?\312\000\367?<H\200?~%\223?\203K\215\277\n\311U\277\212\362\352\276\244\315\224\276\356\013H\277=\227\030?\234)A? \345\017>\020\373\025\276\265 \030\276\210\202\301?\342\353\301?L\030\257>\3245\364\275xz\344?F\207\234?c\334!?u\312x?,\200\364\276\352$\003\276\272\003\340>\354\312\241?\276v\221?\020\312L=\311 \226?\231\000\304?aV\316?\006\371R?Z\331C>\355\314\331\276z\031)\277\247\310\002\277*yJ\277N\264K\277\236\177u\276\250\244\020=\315\002V?:Q\332\276\200*\004\277\260A\213\275\024DT>X\310\273\276\236S\202\277\022v4\277\370\351\225>\316+\007\277\303\177\235>=c\335?Y\031\336\277G\306\320\277nd3\300\302\226\'\300XIO\300\374\271P\300m\"\020\300D\246I\277\274\255\352\277(\256\314\277`\351\014\276\2316\272=\303\226\326>\301\361\340?\020\234$@|\204\242?pc\324?I\264\215?\277`\224?\030\022\266?1k\354?\206`*@\302\267\335?\365P\013@`)~<\272{\215\277\340\234\306\277\021\017r\277\003\347\344\276^\253\252\277\266\243\213\277\342\373\311\277\274\345_\277\220!->B4\373\276?\265\211\277\205\\\234\277\270lu\277\220\302\335\277\256\264\342\2771F\251\277\320k[\277\261\251a\277\004l\353\276Bq\232>\362P\222\276\024\023\212\2760K\361\274\326\207\321?@\035\202?$\243\"@~\r\031@s\226\002@\260\337\373>\372B\310\276\\%h\277Oi\357\276*\001@?\366\307 \277\302\307W\277\000\314\256\2727Hh\276\016\317\233>\274\030_>\374\351\226>,\177&?U\355+?\204\326\232=\2169R=\330L2\276\030\262z\276\020R??\236Q\313\277\215\t\310\277-\345\361\277\265\263\243\277\311\341>\277aX-\277T\274\322\276\314\300\006\277\365\257M\277ZA\351\277 \322\242\276\3509,\277:X\210\277ZM\262\277\025I\260\277Ld\243\277$\321\324\277\271\247\345\277O\357\006\300\204y\026\277\034=\324\277\007l\247\277\320\320\003\300\322Y\310\277^y\313\277\360\245\326>\217\322\203\276~\025\254\277\342\016\207\276\344\2657\277\312\247N\277\000\316x\274\242!\014?\210D\325\276rGI\276\277\316\013\277\252A\260\277R\352\274\277v\024\346\277\271\252\321\277\360\235\013\277pA\026\276\327\r\001?\327\372\365>\251\017\210\277\020\202\353=\276{\017?\227h\241?\234\305~\276\247?\246\277\020}\314\276\2479\021\277\333\237\206\277\363+j\277\332b\215\277\370PE\277a\277\326\276\272\351\354\277\265\220\271\277\260:\237\275\022Vp\276f|\020\277\tR\205\277\207\\\024\300l7\352\276\370\211v>\016\215\002>\301\311\n?\022\215\272?\214\362\323\276\262\'\220\277R\342\002\277DHk\2772^Q\277X\177\203\277\273y\230?P}>?\264v\220\276\020\035\265\275\232\037\231\277C`$\277\376\255\253\277\200\254P>\304\240\016>\266\336\326?\366\370\023?A.\006?\327O\341>\276\031{>,\253\237>cp1?V\307\353\276I\0131\277\334$\333\277\354\221\233\277\032!\252\277#\330\250\277\350X\340\277g\0313\300BP\022\300/\335\215\277\020\326\"\277\240\366}\275\335\0276>\327\222\303>\313\352\204\277U\332\213\277\360\216\t\276g;\215>\245\371\207>RB\365\275\313\245\256\2774{\334\276\335\210\322\277j\3629\277^,\032\277\313\223\271\277\177?\320\277\001\032\201\277\240\',>\214;\216\276,\323t\277\312(\244\277\356\035\246\277\200\177\016\274\375\322\214?\020]\"=\250\200\344=\203}?=\017\327\033?\322\215\251?q.\260?\020\365\014>\362I\373>\000\306\315\274nc\221?B\032\363?|3L@\361\206f@\216\323\372?k\034\370?vTA?\267\251\026?\334\222\254=\022\250\036?\304\242\215\275K\010\343\274|\221\344>\374\030\356>\311ZV>\017f\271>\266\267(?\022\017\343?`\201\227?I\265j?\237\372!?\334\017K?F\345j?s\337\246?\022Y\336?.\022\246?AQ\320?L\254\357?\032X\255?\374\213\336>J\364\274>\354\255R?H\274\007\276\004o\035@q\375\321?\241*\316?o\323\226?\315\345U\2776\366\320\277\222\206r\277F\004\264\277\350\271\201\277-@\222\277&\231\r\277\366\020\214\276\261T\227\277\3540\231\276\306\331\227\276\006\006\005\277s\216\303\276\000\212P<\031bb?C\376\016\277\017)\317\2762\316\007?\240s\026\276\033\232\230\277\343\261Q?@Q\246=\027\204]\277j\262\232\277\347O\n\277\374\253\214=Y\013\254\276,\216s>U\023b?FQ\244>B\216g\276\263\236I>\360)&\275\361\301\262>\372J\334>\030\206\\\277\354\0349\300\317hS\300\037@\005\300,M\207\27724\313\276\'\247^\277\014\304t\277\357u\017\277\221\343\274>|\3023?\242\257\201?\000K\272?\230\372o?MV\007@\2643\314?p\310\357?\342\220\376?2. ?6\301\202>\210R\311\274\306\322\376\276\010\325`\277R\364\216\277\316{5\277\'t\246\277l\2066\277\200\'\367;\372\362\312>O\003\235>\341O]?=\364)?\032w.?\3214\317\277\346\367\336\277\224\256O\277*\375\324\2778F\022\300\030I\356\277]\305\330\277\000p\014\300(\246G\277\344\'\372>\010\016O\276\262\r\001?\256/(?8C\252\276\216\272\244\275\027pf\275\265#a>\304a\270\276\271\2775?V%W>\245\010\'\276\016\262C>Z\305z=\237\303\236\277\355\360$\277\232l\306>>a\022>\265\364\343>\275FY\277zP\230\277\r\253)\277\366\3430\276\207\023`?A\324\304?\205>A?\210Z<>\244\211\321>\000wW\275\024\001\304\275\312\307\313\276\020Lj\275\264\341=?\370\241k?\300\031\022\276#\244\346\275\322\3226=\372\321\242\274D\010\035=\232\037\341>V\026\032?\346#O?n\274{?\177>\013?\267\036b>\022\021/?\245E[?\334\374\336?]\346O?\376\362\343?Vr/?\330}\301?:\031\364>h\202\255?2o\331?\013ek?ZB\022?\032\243\241?{M\241?\307\200\277?\014l\206?\210\270\366?\202,\267?D~\216?\331\362[?\374\256\213?\226:v?#\370-?\375\205\016\277\357v\265>I\222\017?\247\250\n?\237\034\223\276\036\306\014\300\343\244E\300\360\201\346\277\314@\206\276\232K\255?\214\323;>\307bN?\r\035=?OoC?\346M\177?\207\026@?\236\362%?I\034\020?r\304F?\353\331\305?\370\205G?h\3242?eZ>\277\352\241\277\277\246\276\n\277\341\202\254\277\370@\373\276\340,8\277TI\264\276\350nA=\330!V?\2461o?fY\226?\275\375\234?;\322\363?\"b\246?\271\013o?\271\221\322>4C\331>\232\370\355=\336\343\317\276\376o!\277I\233\307\276\354>B\276$\203\220>2\177\372>\360G ?\372\244\344\276\220\332\232\277\3222\020\300l\3026\300(\264q\300z\'>\3006,*\300|1b\300xb_\300B\2757\300\001\2533\300\216\306\"\300\354\362\022\300\006\265\r\300\256\211\016\300\217\020\n\300\220\314\375\2777\356\277\277\000w\351\277){\264\277|of?\341\2663?\203\225\214?\350\371\026\276%&\020>\312WG\275\242\274\214\276\330\027m\277\356\033\353\277\276\305\"\300\260n \300*\327\314\277XQ\030\277\200\372\000=\315\r.?\340\226\317\274\333\036\243\276a\014\226\276`\030\361\276aC\225>\230\211`?h7\362?l\365\276?&\350\217?\316\201h?\352\023\212>\035\325\212>\366\204J?\034\327Z?ew]\277\022#\212\277\235\t\206\27721L\277ve\212\277c\275\217\277\n\315f\277\360\310l?_S,?\355v\251?,\025{?/\303:?@\\\376>^\376b\277\006\277\315\277\366\203\007\3008\024\304\277\235\232\245\277\225\221\256\277\310\020\212\276\200@\314;X\333$\277\211\330+\277&m\274\276\000^%\275@].?$\363\315?\315\021\'?\0023a>\000\006\254>\256$o>{\027\016?\027Y\306\276B\0345?\264u\"\277\036W^\276\236\341\327\276/[\245>N\217\034\276\217S\037\276\001\025_\277\352Q\360\277,\035\301\277,\224\355\276^u\267\277l\336\224\277u\231\035\300\276+/\277\222Z\224\276\222\256\230=2\036<?\213K\247?aT\245?\304\310O>\304,\331>\340\347+\274\226\177\211\277\213\207\270\277^!\002\300\274\333\020\300\217\220\223\277\333\035\224\277\277\205\233\277H\200\217\277\034\202c\276\350\322z\277t\316\021\300\212}T>i,t?\217\361\240?\236\253n?Z\300\203?`\006\270>e0\203\276x\275E>*8??\204\370\226\276\332\207x\276\220(\354\274ys\234?\222\307\016?\306L\\?\260NT?,\320\352?Q\223\002@f\275\"@\007\324\014@\205\303\032@al\022@\030\311\371?\270(\"@\026\"\260?a\364\221?K\362\223?\314\366\272>z\225\007?{\360\007?+\177\274>\312X!\277\000\230\031=\207S\210>~2\323>\264{\342?\213i\023@\305\251 @\372\303\013@\312\240\007@\365\222\373?N\210\366?\306\016\024@\311\317\365?\300\217J@=?\032@\362\256\025@:=\010@\026;\251\277Y\312\223\277\303\342\200\277?p\203\277\310:\246\275\337O\334?\216\034=?\224$\346>r\010\014\277\232\013W\277\340\217\304\275\356~*\277|\335]>?\344\253>\033\266f?\327\3072?\3026\343>\210!\206?r\230\263?\271\250\260?\030(\371>\227\257\r?d\216\304>\376]\023\2773\"\372\277\361\321\272\277N\236\230\277m4\203\277\320\273\023\277\030\002\304\276\000K\311\272\261GM?M\251\t@u\226T@Z\235x@\010b6@\223\320\333?\336y\023@\200K&@\016\014\003@\322\244\013@yw\230?n\231\020@#\234$@\3704Y>v\2679?^\220P?\027Z\265>@\242\313>\341\333\357?$F\223?9I\371>-\303`>\220Gd>\213?t?\331\246\206?\027\333D?!\357\342>h\005E?\341e\235?\017\260\373>\300\376\226?|\201m>SS\225?\014Z\210?J\2320?\260\370J\275\263\346y\277NU\215\277v\r\023\277\371ks\277@\031-\300\250y\023>\315:\264?\222\272\263?\226\003\220?\230tH?\216B\270>\0007\255?c\254A?\210*\316=\247\226\207>Y]\364=\356\265\257\276\253^\206\277\210\022\200\277\360\2350\277\004\225\220?\004\3568\276\360\212\263\276>\342\037\276\231\260\013?\312\325\217>\272@\325=H\256&\274\220\257\232\275\261\001\272>O\354\210\276p\346I\277z\351D\277tsP\277\230\260\236\276\204\017\217\27786J\277>2d\277\264\031\277>\326b\272=\3166\005\277\251`C\277\354\006\211\277\010\031a\277%\326a\277\376\316\303\277\370~@\276\374\277\320>8\222x\275\267\233\273\2764\306\276>\206\222:?\253rQ?\3408\322\273\260A\000\276x\375\341\277\270\010\276\277\356\243\026\277Q\355+?\240\347\214?\310\270\025\276\221\324t\277\266\370\252\277\366\265\013\300\365m\304\277U\325\255\277\302\256\264\277@\034\325\277\372jL\2774\254S>\230}o\27756,\277\014\304\353\277.\214\"\300B\024\236\277X#\005\300F\250\007\277\342\241)?\347\267\223>\264(\212?@Ct\275_\027\204\277G\214\r\277^\243\r>\270\"]?\263\275B?\356P\255>M\360\222\276{\217\367\275\r\353\004?\242*\240?\242\324\250?\200Nm?\220%\355?\351\336\306?|\253\343??\036\276?\237\227\031?\310\212\273>\030\3553\277\363\312\260\277\336\235\034?U\322\244?\310\213\314=\361h,?\330\331\326?\253\345\267?$\tW?|]\027\276%\021\300\277H\334\316\277\000}\177\275@\010\325?\302\374\374>rl%?Q\354\350?|\300\033@\235\344\322?\034\016\360>\232\305W?\320\241\237=\003=\247>\312\251s\276\223t\006>k\210\334>M\274-@T@D@\032\366\013?\020\330M>\234\361\261?r\237 ?M\013\031\277\374Ik>\022\263\022?\320\024\371\274\357/\241\277\252\266\027\277\000`\033:\255\266]\277\226d\213\277\300O\255\277]\034\350\277::\365\276\234\240P?\256v,?|\206=\276p\003V=\334\346q\274d\203\022>\214S\244\277\200\263\215\275\276\205\200\277]\265\247\276\320\233\242\274\373B\330\276hjF\275\246\373\213=I\347\"?v\362\250\277\204r\357\276\377w\221\277\304G\331\277\032)*\300\300\213#\300\216\306u\277V\242N\277c$\207\2770\"\232\277&ox\277=.\361\2773\252\220\277\246\323\250\277\302?+\277 U\332<\222rO?\020.I?\300l8<\306\021\274=\3513Q?\300\342\t>\010\323\262\275\332\336\024\277\222G\027>Dw-\277\324\235]>\257\340\246\277\347Z\321\277\r\222\245\277\300\326\311\277\270\nN\2762\352\215\276jy\277\275f\332\366>\324\244f?\264\030d>\202Y*?A0\007?\200:\267\273\316\2108\277\027\224\210\277\030w\321\277\360\202\203=\344eB=F\302\212\277\214\302\225\277\014\362\275\277$\301/\300\003@\364\277Uu\330\277\034\253D\277\220\371-?~U\257>\337\213\313?\277\232\000?VK\307>\030\324\301>\270W\207?\335\005_?\320A\245\275D\246\323\275(]\005\277X\331\354=\330\373\200\2766h$\276\310q?\277L\377\225?\322V\305>\341D\313\276\252|\221\276\202\024\334\276N\2728\277J\036\200\276-\230\\\276\336rg\277\264S\007\300\315@\004\300]^\350\277\230\272\017\2775\210\343\276\317\230\376>\033\371\265>\206K\017?\332\255v\277\333Z\334\276\335o\031\277&)\273\277\\\032:\277;\335=\277\3423\021\277 \025\217\277z\376\343\277\251\001\307\277\000h\340\277\r\265\257\277t\025\030\3002\230\311\277-\365\307\277F\321\351\277\000\371\345\276\302\246v?nhR?\024\032\357?{\241K?\206W&?\224\212~>\352\030\241\277F.\203\277\217\021Q\277\331x#?\027\"\211\276>;\210?\374@\010?7\323\213\27678\213\276Vb\222>\366D|?\256\'\310?\375\212\320?\264\302\203>\206\304\207>Aiq?\374!\357?\316V\262?\356\233\302?\037\371\005@\200\007%@]&\340?\343\243\233?@\2222\276\022\233\376>]\001&\277\300\216\317\277|\245\341\277_k\026\277\250;^?\030-\366?\200\013\345?\217R\025@\370\2647@V:\t@\253\034\277?\014\360\237?\343xg?\276G\256\276~\365\333\276\315\222\263\277h\251\026\277\350\302P=n\023S>\324\227$?\326\212\323>\302\373\201?l\341\247?\272\267>?\342\211\333>\177q\r>w\0165\277r\001\330?\n\317{?M\206\262?\241\302\255?\220\022\350?`u\357>vIK?\304\224_?\207{\210?\264\341\357?\347g\356?}\373&@\003 \272?\201\325\375?b\325\212?\214\210\252?\210\311I?\264\271\201\277\206\017\261>W\347\305?\334\372\205?\006x\264?\n\301\306?N\372\334>\352\330\347\276\237\323\365\276Z:\004\277|E.\276\263T\341>\227\023\361\276\2779\274\276\250\2170\275\247\236\000?\364\347f\2773m\213\277\330u\001\276\270\252\372\276(i\003\275\2772\001=^\032\350>\016c\342>\252\271\254>\254j\275\276\243\"\243\277\240\247>\277\001Y\265?\005\311\257?\220\200\221\275\236gE\277mo\216\276\237\362\001\277P\261\301\274j\t\225>\253\363)>R\275\346\276\000_;=x\324\014\277=\020\222\277\200\r\003\275 \006\210\2761ZK\276\"e\025\275\"Y\352>H\275\036?\236\307\'\276\253\3313\277\036\\N\277^\273\205\276\374f]\275\206\353\257=1\326\375\277\350\2377\276j\252\253\276\322x/\277\034A\306\276`)\272<j\206b=S\013]?\323\327\337>\357\364\275?\271\363\264?\214:e>\204\375!?\340\261A<?\225\212>c\313\237>\0042;?P\037\002@\002\324U?\204\205J?}\376\305?Pg)@\026\210\274?\206\245\270?n\237\216?\370\255\205=\261\266\300\277\213_\"\277\371\3157?:\221\006>,`\372>\364f\021\276\227\376*?\230#\261>\211N\227?\322V\004@\271\350\300?\005c\t@\004Z\310>S\217\213>hKO?\232\203\312?\210F\315?TW\352>\274\230\370\276\'v\211\276\317\2031>\376\367\204\275\317uT?\n\032,?#u\316\277X\275\225\277\375E\316\277\\\224\205\277\\\265\300\2760\240Q\277\335\271I\277\212-\222\277\301\361\223\2775D\343\276\005\361 \277\254-x\277\205\365\035\277\352@\220\277\334\350\225\277\265\366*\277\000\"]\277\326:\024\277\327\326\274\277\002ZQ\277\333\"\005\277\241gm?\347\262\311?/\352\001@\304\262\276\277\354\027\022\277\263jg\276/\323\016\277\\\254\232\277\224l\253\277x\347\311\277VB\000\300]\225\255\277\366\232\303\276*\007\300>\334\264\203\277\370\002R>Ks\265>\220\350\003>,\026r>\020\330E?X\026\326=+ +\277\221\036-\277\343c\312\276j\026\250\276Tw\004?\360G\001?\213e\271\277:\341\254\277\372\tX\277\306\340\253\277\270\030>\277\212\300\240\276\2207\322\276\265B\256\277R1\310\277\311\376\"\300\342\215 \300\2007\261\277\202K\353\276P\250(=\276[\205=\330\305/?\211\234,?8\271\212\277\342h\023\300\365\2141\300}\206@\300N\017\256\277\"q)\277zs\252\277\300\363F=\250\200\223;\232\315\240\276\266\217e\277\300\022w\276\242\277\273\276\356\251\341\277\224\030@\277\276\207\240\277\001\325L\277:Rj\277\210\030\213\275S\331\261\276\250g\230\277M\267\005\3000\371\304\275\322(\030\277\226\006\347\277D\221\214\277\023\200T\277\372?y\277\314 \236>\246}\264?\0206x?\316\263\016\277^Yt>\356-\032\277\256\025f\276\006;\030\277\233\2234\277\224>\202\277\310\313\204>p\233\314>\2763!?fC1\277&G\213\277w\372\316\277r\300\347\277\327\277\300\277\332\263\240\277\372\334g\277\372\340q\277\320\'U\277%\260\306\277*\361\365\276\263RW\277|L~\277\245[\265\277\320!D\277\340\036q\275n\307\220\276\016\372!\277\262;\"\277\270\030<\276\366\245\316=\240\350\351>#\244[>\325\210\230\277\2461\246\276\377B\233\276N\010\022?\336\266L>\t;\225?\212\263\207?^\366j?\230\315\365?\327\\\370?\362b\t@\216\232!@#\211\355?T9\276>2L(?\340\036\r<\005\017\250\277|fG\277 :\n\276\343\370\360\275\036\355\205?\203\226v?\344\246\265>\340^\004\274\212\2721?\374\'A?\360\202\200=\010\263\032\276\233\007\257?C\343\217?CB$\277$\262y\277\236\303\330>\223\277\010?\204\242\313>\262\315\007\276\264z\367<\004\213\230\277(Q\203\277F-\321\277\343\251\347\277\233\372\270\277\252}\250\277M9\350\277\367#\316\277I\025Z\277<\232\035\277\250\032\357\277#\247\271\277\362{\364\277\222\'\203\277\374BI\276\3479I?Q\025%?\024I\302\276\310\265a\276\250W\343\276\227\tw\277\356M\201\277\365\000S\277\254a\225>\214\016\231?X\321\345?\216\204|?\310\375\032\276\312\014\346\275\376\317\017?\220\013\314\274\204\264\223?\340\367[\275\231\313\331\275\203\223\303\276\324\240Q?\262`v>\275\263o?\304}\264\276\252\356\354\276\022\010\340\276\026\337\251\277bq\315\277\330\357\235\277\037\250F\277`(^\277\377\201H\277\246>k\276\303\n\274\277\233\313\"\277\256\357\207\277YJ\273\277S(\307\277\356\375g\277\000\230\335<\227\305\216=\020C\177\274\000v\356\276\310\226M\275 y\035\276*{\263\276 \345\337\276\240\344W\276\341\252+>\317\205<?t\000\303>\203\240\321\276<S\216\277\220\037\306\276\352LX\277\256\002\321\277(nj\276\342\332\246\2778\304\007\277\022Z\340>rw\264?B\227\t\277\017\226\253>Th\021\277\341>\240\277\334\304\250\277Z\333?\277\206.i\276\353\346\221\277\022:}\277\275\002p\277h\\\231\277\230\302\270\277\007\273\317\277\004\271\021\300Z\026\325\277\030s\031\300hs\351\277@\n\340\277\022\216\007\300\005\214\251\277 \267E\277\t\320\275\277&\242\307?\211<\213?<w\226>\205x\303\277\245G\030\300\316\017 \300\266\375\233\277\240P\000\277\r\234\225\277\365\307F\277\025\251t\277\302\213U\277\300r\361<\036\237\267\274\330\242\310\277\313h\025\277\302\240\200\277\034\263\025>\240\365\215\276\300#\271\276\022\300\215\276@.c>\225\300\261\276]!\347\276\034\361\235\276|\275\222\276\372\262\332=`}\300<\034\314\253<\265\245\352\274\374\234\033\277\376\326Z\277\206\014\215\276e\246c\277\243\355\313\277\214\276i\277n\327\245\277\260\331,>\n\230\215\276:\001\224>\032\356\330>,]\210\275\033+9=.\3667\2768rB\277\3524\236\277,e\r\2760[\361>\346\366\311=.;l>\322\020\213?b\220\316?\261\254\036@\320]0?\032\367\256>\362-\013?\212P\300?9}\232?l7\002@\246\371\255?H\017\252>\006\332\204>T\264C?l\307\n?\320\373\375\274)a\343\277N\311\334\2776\245D\277\250$\256\275\252w\007\277\302\002s>^:\312\276\356\031\304?\270\270\321\276z/\200\276\301\263o\277\303\250L\277\260\372y\275ft\347>\200?\002\274\3421\265\277\204@P\277\360\361R>430=\376\276\202\276\036\032\034?\254\313%>\307X\351>\304O\220= \341O\277\262\311\366\277\362\374\213\277l\313#\277\252\213\317>\204\002H\277\032\n5\277\304l\250\277\247\326.\277t\250\371>H\233\275?\204p\204?\002\217\221?\253\326\221?8\377\340?\245R!?\325F\254>\320P\313>\332$\256>\332\222\271?t\345:?i\221\031?\360{h>\226\231\177\277\300F\262\277\3271g\277\307H6\277xk\367\276\226\322W\277l(\200\277/\202\355\276\226\203\223>;-\215\277D\370\315\277\211\002\341\277\002|\237\277L.\r\300\241\206\002\300\202\177\355\277X\347\363\276l\341\361\277\"\002\344\277\334\324\261\277p\333\332\275\227q\031\276\001O\336\276l\2666\276\3071\320>i:\360?j\032\247?\003C~?u\343\362>\240c\023?\260\317\327\275R<\017\300\346\013\023\300\034;\332\277\351\303D\277B\302\313>j\234\315=)\2430\276\266\310w\277\200dg<\335\032\306\277\233\301\235\277\350\362\264\277g&\206\277\362`M?\2029j?\250c\277=\357@\244>\014\006\231?\350\024A?b \345>7P\232>\277\037\t?\235\374D?p\007\316\276\322\203\t\276V\317\303?F\221\251?\202\350|?` \310?\254\210\201?[8\227?\264\305\316?r\263\017@Gn\373?\004\323\350?\263\277\232?,\004S?\276\254L?\340\206-?\233\245B\277\222AP\276\221;\206\277\314B7>\330]\245>\3404q?\330y ?>\3158\277Q^\037\277*uP\277\032\227\334\276XN\214\277\005S\215\277\340\036\312\274&[\024\277\336P*\276\010\r\"=\232\013$>\276\243\354>\274\333I?\204\210\006?\320(\352<d\332\225\275k)\274\277\\\223 \300b\212\257\277\323\322\205\277\326g\036\277\007\366\317\277x$v\277\253 \267\276\'\271\321>\271:\220\276\002R\222\277.(\256\276\020\016w\275\363L\245\277u\246\206\277 \211f\277\034ff\277h\211\225\2776S\251\277H7\350\277L\315\214\277\323\361Z\277\265\216{\277\030,\223\277\010k\264\277\2200\252\276N\351\003>\200\366S\277\260\205h>\203S.?\316]\204?\326+\r@\033!\360?\020)\310=\217\017c>\215/\025?W\362\370\276`.e>\n\314\270\275\370\016c\276\361\3355\277R\305\023\276\314\030\222>\270\026\235\274\242\3330\277\367\007\235\277\311x2\277\026\361\013\277\023>\336\276\200\014\321;\362^i?\360L\240=\355\210\016?z/#?\207dq?\310P\207?\331\277\314?z\362+@O\254E@ \343\204=l\250\350=\024\326Z\276\334a$\277|c\257\277N\203\352\277\335d\007\300\2736C\277\250\034\200\277\212\371&\277\251\230y\277\230|\235>?-\214?\203\255\034@\337]/@\256@\024@\201u\023@xl\004@\365\022??\220.\214?h}\207=\234I\207?\026\276\217?\222\331\203?\276\331\303\277\006\234x\277PT\353\275\222c\316>\244i\307=<XP\276\230\234\026?\253\323\017?\274\300q\277,\216\207\277\177\0040\277\331\032\214\276\2522\240\276\330T\210\274NU\327>\372\177\225?\002f0?`\266\276=\010sa<\300\n2?=\262\347>\273\214\315?\302U\320?\365\362\200?\247\266\257?\231\301\006@G\020>@\254|\376?\233\310R?\3116\254?\262\231h?\234\213\273?4E\207?\2668\262?f6\277?\211\371\252?N\232\376>|\032\177?\242\234\277?\346\260r?\010z\301?\352\262\344?\316)\301?\030\"+>\273\247,\277\256o\231\277\3074%?n\270\201?@\313r>\356q8>\307\004\252\276\354\2060>4`\213\277\224\354`\277\024\322\204>\360W_=\347\370\022\277\342\201\271\276@k\307\276\366\313\003?\020\276\324?(\256t?M\236\020@ur7@m\010\'@\212x\267?\3767m?@\364\033<<\277\201\276\026\241\245\277\200\333\032\275\374U\301\276\363\2041\277b(3?p\002N\2762y\251?\334Q\254>\270\345,\276\2153H\277\\\312Q\277)\317T?\223\330n?\341\227 ?b\247b?\010\nS?\210\373\272?\200\252\226?W\372\315?\021\317e?h\342\364?\374Z\200?\264r\233?Z\250\234?\310\252W>\212\025\251> \3330=\004\345\017\277n\266\206\277G\200\\\277\271\270\017\277%\335\246>E\023V>t\005\202?\323\244p?\326\314\203?\316_2?\234\314\007@p\206\274?pA\002@\276!+?\022Vt?\036*\320?\365\\\035@\000\316\013@\236\2009@\353\335\020@5\223\020@\3174\343?3\014\317?K\325\335?\324\364\t>T$<\2773$\306\276m\2722\277\036\334p\277_\340\001\277k\274\225\277&}\331\277\230\261\274\276me\037?\3553\273?\220\225\343>\210\252\327>>h\351>g[\223?.\352Z?\364\006\">h\n#>\221\306\014>RJ1\275\262\201\201\275\340\034\312\277\352\210\022\300a\372\355\277\177i\023?<\370\303?s\252\221?\243j\365?d\224\231?@3e\275\215(\027?\232\310\275?gG\245?+<>?\\\332\240?`_.?V\031\207?0\206\216\275\2712\274\276:Z-\277,\341\221?\200\355\203\275\233\\\277\274, 3?\305\210\211?\343\251K?R\2002?J;\033?\210\242\221\276\220\3365?\"\354\021@%\227\031@\371Q\321?\246#\265>\0344\n?/\205\202>\376,\252\276RJB\277H\363\r\277?_k\276j\345\300? \243\370=\026\240*\276\302\260X\277 VU\275\352\265\372>\234\207\340>\344sX\276\2373.\276g\301\224\277sb\256\277\314\240\221\277\344\223+\277\330\247\350\277-\247\021\300K8\262\277\'l\323\277\206\376\021\300\203\271\242\277\251\205\310\277\022M%\300s\303[\300\240j\267\277\034\260S\277\247{\247\276\260w\270\274\271[\367\277&\007\255\277\347\034;\277\025\336\247\277\226r\206\277\240\316\352\277\203A\023\300\350n\370\2777\347\250\277\033\2178\277\217\341\342\277\244\374\025\300\254F\013\300\230\202z\277\310O\244\277\222\362p?\366\002%?\367\002\220?2\013\201?\255|r?\033\241~\277>Q\265\277Vu\217\277\004\275\321\276E\034e\277\'7\226\277\374\352\306\277r6F\277\204\275\t>K\354\331\276z\026\004\277\234\366\n\2772!T\277\340\236\371<\321\255\260>\370W%?\330A\233=`\366\014=J\211\010?N\342\242>\362\307\007\277\360\334\001\275<*\350>`\n\353>C?\276\27686\203\275\226\253\206\276\305Y@?\310\374}\27606e?\207&\005@\021h\026@\337\3602@\214\360C@\235\376V@ZU\354?\001\014\336?\356\200&@\326g\337\276\214,\241\276\242\211\302\275\002\340_\277\030D\236\276*\0047\277\331A\366\276\357\001\243>Xa5?\273\350]?\200i\357;\362,\202\277\000\363\004<\017\002\314\277k\203\276\277\3350\247\277\346\003\202\276\206\305n\277\322%\215>\375D\344=Wx\362>\261\003\373>KQ4?\226\272\260>\335\255\354\277}\331\333\277\306\207\306\276X\341P\277\356\211\364\277\217h\342\277>_!\277\n\323\225?7\350{?\234]\243?\230\3242@se\230?\033\371/?\300\324\227?&\373\307?M\351\207?@\335;<i^Y>`\325k?\215_\\?n=J?\005\302\321>\310\254W>\214\016\253?\033\362=?R\245\300?l|\002@\035\033p?~\303\240?\3269\251?\210\325\231?\2541w>{\233\360\277\002#\t\300\336\267\030\3006\355\005\300z\224\366\277T/\247\277\326L>\300C(\200\277\210I\311\276\353Bw\277O$\246\276\362\373\336\276f\024@\277\000YZ\276\326\262c\276\232\035\260>\277_\007?@\214\"\276F\251\212=a\202%?ub\002?\2544K?\362O\302>^\341a>s\342\n?\332\272\377>Y\252\030?\220X\002=\252R\342>\304\224\352=\271P7\277z\037\213\277\014\024L>)M9\276\344\254z\275\340(\342=Sx\221?\302\215\361?\272\343(?\356\322\321?\\\224\277?\272\214\354?\242<\231?1\230\212?\356>g?F\226\202?\206\020\341>h<)?\314>\221?\330U,\276V\312\326>\344[\014>\215\027\262\277a\306\005\277\024\247R\276\022\360<\275y\363o>\003\024)\276\321\222\325?\226|\256?\340Z1>\001\350v\277=\203\n\300\252>\346\277\0008\252\275|\037\364\276\230\241C\277L\017\331\277\270>\021\277\324h\240>j\2259\276\314\217\336=\306\225T\276\330\243\351>/\356S?{\273e?\305\3562?\263\2405?\370I\352\275d\252X\275l\030e?\336\305\333\276\026\177\273\277!\263\331\277w\223-\277\214+9>\274\265\023\275\237@\305\276\346\324\273>\326\351\033\276\205HR?\215\032\r?\373\340\213\277|G\031>f\212g?\370\314\341?\006I}?\361)\267>\304\227\221?\013\305\336?>\370\323>\210\250\230?nS\276?,(X? @_=Y\023\246\276\220\210\004\277r\230\026>\001\'G\277D\360\337\277\340\346s\277x\341=\277K~\210\277\000\343\334\277\020L\207\276\245zx\277\320\343\r\300<\002\017\277\353/\002?\260\321i?\006l\322?$\317\243?v\377\275>\035\247y?\240.2?z\006\317>\010\035\036?\366\266\227?@\217\223=\363\313=\277.TU\277\225d\202\276\365\230\032\277\211\210\037?\206\002[?\230\300\014>\373\275S?\342\262~?\214\322\"@\016_\204?2\235\266?\242\261\006@\237G\305?\202?\263>\244\264\366>\376#G?\300\212&\2757\231\027\277\320\"\250\274B\363]\277W\264\350\277\014\227\310\277d1/\300toT\300\32375\300\310\211\356\277J\210\025\300)\246\020\300\245\232\365\277\346\215\220\277\370\034\324=o\255/\277\362\315\206\277\3140\037\276\266\236\034\277\314\201\236\276=/\262\277\316NE\277Y\2224?`\261\206>\317\341\364?\004G\003@R\257\020?\273<\004\277)\352f\277\350\007\226=\203lV=\"\351\022?\277\346\226>+\267\373>}\211\311>@\027\335;n\225\004\276\027s\222?,C\263\277\214\230\371\277\221\223\264\277\312\275\362\277\324\312\273\276{\024$\300KWV\300\354\205\331\277\337\002S\277X\022\234\275P\207\223>`O\377<\232N#\277\024Hw>\210^[>\014\301\231\276e\201\014\277_\004\252\277\"\355\003\300W+\005\300e\234\022\300\2400 \300d\330\013\300\'\322\007\300\267\307j\277A\214\224\277/\257\220\277\304\316\213\277z\311\237\277\035\207d\2772\263\206\277`\236\327=\003\217Z?\303W\257?\374\275\320?\243\364\277?\302\375\335?\266\210B?\376%\360>\322\237\240>\272\366\375>\0374\236>\206d\272>\037\035\031?l4\307>\217\261\265?\227\245\001@T\340\303?W\311\r@=7\377?\262K\204?2\355\317>\222E;\276!\240\200\277@\rL=\204\274\371>3\353\207>\"\276:?\3003C>H\004\251?\202\226\235?\204=\037?9S\220?\265[\037?\274q\223?\324\313\t?5\333\036?\022\322F?\340G\235?&\332\205?\277\225\212?\230\235\354\275GF\271?\356\224\220?\310\0256>\374\246 ?\212\256\271>\216\250\307>z\031\305?`[\">\0052d?H4\377=B\204)?^\036\214\276\322\025!?p\211_?\210R\333\275\333l$\277LN\252\275Jn\r?\206o\331>\031\213\225?6\276|?\260\352$>E\031\036>\370z\030\274\362h\227?\333\205b\277\255Z\003?\236y\203>\036MN\277\2504\251>\000\355\272\272\257\363\323\275T+\276\276x\254\250\275P\234b>\272\266*>h|a\275\327\221d\277\000\257\236=p\314\356\276JZv\277\306y;\277u\357\033\277\237\217\232\277`\356|\275\203r\342>>\305\t\277\210E\244\277\027\240X?~P\021?\227@R\277\354\230T\277\232\214\226\277\215#\331\277jl\004\300\0101\215\277\272\361\233>\206TE?\300^\276=\304\356v\277\020M\373\276\330 \022?T\364@\277\364nA\277\000I\t?\2715\307><\n\361>\1776\210?\230t\t?\266\221F?\312\207$?\022\351\377\276\320\266\250\275\366f\347?\210\343\260?\364w\374>\210\234p=(\357U\277F\237\246\277\016\2644\277\260B\037><\231\246>A\371\036?x~\221>0\305\013?@\302`?i~9?\373\222\204?\344F\212?&\267\201?\225\257\221?\330\203\271?\226\236\000@\240\227\020@\240\024\010@\020q5@\366\207u\277\336\2263\277Vc\333\277\225\007\307\277\256#\363\277\274\317\376\277\352\350\227\277\272\326\211\277\354\356\230\277\\\222\316\276\207\213\245\276\224:\361\276\357{\204\276\0063\336\277\276m\333\277@\245\377\277C\226 \300\342\332\r\300\272\037\360\277\247I\352\277\336i\200\277z8\240\277\030\005\027\277\372u\362\276\305\351\016\300\212:\240\277\210F.\276U`\035?\026\375\251?\351\352o?\361\306\265?\036`2?aw\000\277\323\276\211?Z\260!?\252\204>>_\220\237\277\253\346\306\277\366{?\277\022\007U\277\304\030U>\334\201,\277\266\3745\277\307\336\326\2771\376\257\277\204Z\035\277\346\250\217\277\326\031\007\277$X\243?B)A?1\242\025?\346%\246\276\003\373\226>\200\222V\273\365fX?\305\021g?\240F4\275\310\031\342>\302\215s?g\3111?\007tp?\317\270\362>W\037\221>s\023\215\277\217r\220\277\226\361\235\277a\271C\277\022\306\036\276;6\233\277\363p\004?\260\001\216?\002\340\032?\027\323(?|\342\206=\246\256\033>\264\033\305>o\316\337\276\030\005\237\277\317*\303\277\270\026\\\2772\212\345\276:C\204\277\337\344\035\300\342:a\300\277\312\206\300\330T4\3006\236\330\2778\034\337\277\020\271\r\277\350\272Y\2772\261\206?\342c\203>\007\367\007?\245\275N?t\260\001?\354\023\n?\212\211\244\275=\234\252?R\367\350?\232t\022@\333(\334?e\317\024@\0201l@\335\347\247?`\205\364?@\226\232?\340d\214?\026Va?\300\331]\276\340\360`?\210\365G?\004E\245?\354@\034?\300\221@?\357\014\017?\232\235@?\300\213\'?\324\252\304>8\344\305\275\244\324\217\277\010\363\014\277\222\371\373\276\nIf\277!-\205\277\210R:\277K)\025\277\222{7\277Z\253[\276\352\262\332>\216(\014\277\344\246\256\277s\023\242\277\246W\343\277\3554$\300\t\261\025\300\300\230\346\277\026\001\244\277&S\213\276\304K\035\277\003})\277\242\014\235\277hQ\202\276\343\033Z\277|\003Y\277\344\214\326?\'\306\262?\030\037\341>\030\235F?\\\223D?\255S#?\010\240\270?SM\324?\344\232\225>\030h\034\276\325\260\204>\311!\274\276\202W\260\277D\"t\2768\013\366<F\217C>\231\373\003\276\036D\241?iK\203?s<\351?\274\r\244?\010\260\247?\000\002\210?\022\036\267?R\255k?h\330\376>\332\203\227?\2402\270?d\226\324?\243O\351?\033\350\n@\262\211\002@\234\371\021@\233\333\376?\227\364C?\330P??\210\226\216>nF3\277HA\030\277\3743\217\276 !\253\277!\270\222\277\262cC\277\223\310_\277[\'W\277\2376I\277\235\235]\277,\351\306\276\250\275g?q`\252?@\240\037?\342\237Q?\003x\273?\373\002\242?:Mu?=\030\345?\004\343\342?\036\240\221?\346i\032?-\321\216\276@\004\010\277F}\177\277\262\215e\277\274\245\001>\252\204=\277\252\303\370>n\035\256?!\035\336?\006R\226?Y\315\255?(\367\020@\302\"@?\274\314b>\366\376\216?ml\226?\307\220\267?D\216\037@?W\273?\213m\306?b\243\362>M\210V?\330\304\020?\226\214\244?v,\223?\202)\260\276o\313h\277\256\322\310\277\017\326\205\277N]%\277\322Gr\277c\226\233\277\224\364\266\2767Dr\276N\267\343\276.\217\033>\274\312\276\274\254\225Z\277\031\317\202\277\217g\313\276\316C\275\277\036\022\242\277z\331\r\277~\336\215\276\235a-><\261\033@\352 \367?\237\267\005@\346\320\n@\247k\360?\224\211\355?\230\332u?\034V\013@\275\\\254?\206;\226?\365\342*?\010\032\341?\354;\031?v\205\037?1\336\017?@\003\312>IJ\370>@\024\375>\024\244\\?\330\001_\276l\231\023\277KG\314\277wI\235\277uM\227\277\335\355\201\277\0168\226\277\372\025a\277\350\220\272\277\004Oa\277\345D\226\277\206\353\244\277\370\316\325\277\261\241\021\277\222EZ\277\270c\271\277\353\303\231\277\337k\333\277@\250\364\277\032\233\002\300\300 \006\2774p\216\277\300\177\224>\330g\316?\320l0>n\016\002\277\226F\217\276\347f\213\276,;_\277\270X\350\276/\353\216?z\234.?\300\237;<x\034t\277\364\354\253\277\2568\265\277\022\257\032\277\0160\220\276L\277\030\277\230\t\266\275\347\303\317\276<q0\276\310\255#\277\236<\'\277\272t)?\376\322E\277\005K<?&~\261\276$\324\027\275\230&\036;\014\305\n?\376K\217?\235\345\032\277n\023\r\277\210\204\013>_\201\353>\221\302\226\276\265\311\032\277\360\306u\275%\254\322>\200\331\243<\335 \003?\230\016\034=\301\301\213\276d\"\030?\374>\204\277\200\366\350\277|\211\221\277\363<\022\300\340\032\323\275U5I?\256t\256?I,\013?\332\312C>\361\000\330>\360U\202?\336<\207>X\264p?-4\022@\273E\374?v\247\002@\020\357\334?\270x\252?.\273\256?\274k\377\276\254 \252\277\205\005\240\277\365e\371\277\316\006\233\277\254}\230\277f\365\207\277\026\377_\277\362\307\265\276\350\351\241\277\001\351\023\300\360G\267\277\010\276\364\277\014\022\345\277\006\243\344\277X\351\250\277x\032\314\277\346&\007\277\334\026)\276t \310\276\200d\256\273\324\214\027\277A\027*\277\276\336\026\277\0200\355\275\242\306=?\365D\216>S\240\273>\254\271J\277-\226\300\276\276\354\254\277R\260\320\277b\343\323\277\300;9\275\\~\250\274=m\364>p\271\231\275\230\211\316\276\n\030\202>\206 k\277\025,\312\2770\224E\277\0343\302\277\004\370\332\277\221L\262\277\311W\363\277)@\271\2779\350\255\277r\n\030\300\322E\010\300Z\306\032\300W\363\'\300<I\235\277\375R\220\277w\215p\277\246\205\241\277\232\017\243\276\022U\023@Z\211@@\020\275v@k\277m@\010\235X@4\2460@y\322\013@\224\016\027@:f7?\022lC?\317\205&\277S~\363\276I3\263\276\2607\371\275zZ\325\275\370\211\024?\325 \220>\326M\037\277\330\336\322\277\215g\267\277\227\213n\277@@\261<\364vZ\276\270\376f\276\t\332\263\277E8\360\277Mv\234\277~\226\276\277-:\001\300\030t\323\277\263+1\277\360\313s>\316\223\366\2768\360e\275\024A\261>\314a\241?\036\307\005@\210v\204?zO\356?f\230\035@\315\375\024@f\234\244?\000\210N\272\346,J\276\023\225Y\277>p\214>\013\317\201>j;\261\275\322\224\331>\344`\025\277\340\234\224\274\320>\255\276h\026#\277H8\320=8\2435?l\225\300?u\352\207?\340c\013@<\177<@\0324)@\241 \373?\350\362\002>S$\301?\255\\*?\025\004\216>T\010\336>\220\225d?\356\010S?5\ng?\021\324\002?\307\002\021??\003w?\"5\213>2\004\234?\251\276_?\270\266 ?\020\361\376>\244\304\212?\344\343a>\036\205\374>\n\356\326\276IA\024\276 \265\236={jf\277 \271\033\276\036E\013=\241\211\340\276\260\310.=*6\317\276\021\257\322\276\373H\234\276\243\026\226?\020\211`?I\313\271>\331K\213\276\340\'\314\277\371\r\371>\336!\037\276I\241\340\276\321_\237\277Q:b\277\346\366\246\277\245U1\277\375\211\004\300hp\313\277\216\004]\277\264_\006\277\366\3521?\321\371d?\020o-\275\222\027\360\275^\346\250\276A:\025\277\\&\361\2760\332\243\276\033\220\224\276\353\232\344\275K{r>\262\036\201?\237A.@\311:\001@\300\242\316?\262L\311?\340\356\000@V\2066@\023\227\021@\240\023\030?N\373\332>\021\304&>AW\006\276\353\001r\277\360\255\215=\304F\320\2762e\306\276\021+\336>\230:\344?\301\312\264?\3007\017\277\220\2136\277v\000;?\204Kb?\256\247e?@mE>\000\213\t\273 \302\231\276\246\266\010\277\330\352\025=B\310`\277\233P\256\276\254\303\'?\232\213\207\276\363\303)?\3645f?h>(?\013\330\211>j\316\366>\271.\320?+\221\"?\031\r\361?\ng\317?\210\363\267>\311\341<?\372Ff?\270\333.?\216\347\221?\333W\246?\360\275\305>o\025\244>\242\2572?\252\"W?8l\205?]\030\305?8\177\322?S\026\001@u\177\244?\034\313\341\276<\320\227=\206>%\277\350\320T\275\374\261\241\276\323S\'?\234\001K\276\316)\235\277\334V\214\277y\333=\277\000\223\307\276\245/\374>\034\355v?\n\346\226\276w\277%\276\326\205N\275\2526c>@\360\364\277\254\235\002\300\304\344\367\277><N\277\370\214\341\277\335p\306\277\330\217\246\277\034\366\253\277;\247\225\277L3\313\277\274M\237\277\234)\031\276\314Uk\277\200e\222\273\253hs?plM?\320\305\340?$\370\034@\215\257\337?$\013\374>Z!\255?q\272\331?v\236\201?&\230\002?\340\343\251\275s\014\254>\255O\254\276\215\251\327>\372\003\331?f\2523?\340\355\313<\toV\277\006\307A\277\266\350\327\276\326\337y\277f\371\272\277\362\324\322\277\006n\343\277j;H\300`\022\025\300(A\267\277\007\201\337\277\007O\271\277\330\200\005>~|]=\302O\331>x\t\020?\203*\206\276MEN?\000\014\207=\350\2151\277\330:\016\277\225\336Y\277^\303\263>*\003\031?\331\202\244>\332#\031\276\353\017\240\276\00066\275c\022\017?\255\305\367>\232\220\206\276&\354\227=\354\307\270\276Eh\266\276L\273,\277&\372\025?\334o\224=S\2404\276s\376N\277\204\232\247\277\300\364\214\275`\222\220\276J\210+?\264qe\276\364M\370\275\300\332)\277n\223\352\276\273\006\233\2776-\271\277\361\351\325\277\231\270\t\300\274\376u\277x\311R\276\177/:?\266\264\260?v\246\005@V\035\t@(S\222?\010\207\377\275\251N\334\277\250\354\010\300\300z=\300B\360\016\300\225\013\311\277\311\377\255\277\323&\267?\242c\016?v\322\206\2770h\221\276\364\017;\277\332\024\331\277\305L%\300\360%q\2777%\217\277:\2735?H\300]?\221\331\002?IG6?>\321\263?|\267\214?\3571\246?\376\267\322?\025\214\t@U\211\346?\007\377\222?LGQ>O\0225>\323*N?\3419$?\323\"\337\275\213\210,? P>?\004A\342?8\020\264>(\230b\276\3274\004\277\240\333\354\275\234\306\203?\330\017\347>\326rC>\016\022\302\276\220\364\001?_\335\004?\340-\204?\316\007\217?\257\355\351>\273e\333?a8\001?O@\215?\276\214X?`\006\250<\367\307\335\276h\277\272\276<\333\246>[\2314\277<\345\276\275\221\221\341\276\244\306\006\277\240\312\314\276\240\027\215\277\332\'\252\276\312\215\233\277\217\344\245\277\326\277\253\276\220\250\264=\236\220\252?\254F\227?f\306\007@\340\016\003@\372\360\033@f\327L@\032\230<@,\363[?\021\353\002@x\351\264?`\236\356?\'\353\327?D\354\332?\022N!@xU8?dy\207?\200I\201\274\026M\271\276`?\273=\302\346:>\032aN?\220\0217=\225\006\036?\365\231\316>\255\010\313\276\336I\311\276\254+\037\277\356#\306\276\267\252\270?\232\323\202?~`\213?\274\327t>#\000\202\2766v\222>@@2?\000l\201>!\360\251\276\200\0256;\031\352\261<G\"\251<\330\321\366\276\371\200\027\277&8\311\277L\321q\277\366:\000\277\274\215\330\275 \020\317;\256\362\306\274\326\3514<\356\036\357\275Pr\366<\320-.?\020\\d?\320\014\312>DM\203?\277/\255>.\r\370>\2136\037?^{\033?\377\032\006?d\016\211>v\233h?F\203F?\020+,\275\303#\315\276\366o\326\275\345w\204>\210\\\036\277\030\t>\277<\372\r\277\344KA\277H\251\372\275Ao\236\276\202\360\212>l\025\036>\333\331\303\276y\243\207\277\352\314P\277\240\230\331\277\334r\010\300\362Z\272\277\243<\030\300X]\225\2770Zv\277Z\343\225\277\233Q*\277\034YG\276\241f5\276\3777\247?\022HT?\200=\227<\t\332\210\276qH\311\275\010\351\262>*\274h? &8>\250(\r?]\244\000?\0308\331\276\260Zb\275\237SY?\360B\021>\370I\237\276x^\t=Fm\223\277a\177\206\277\325\351\257\276\301\234\241>\273\360\270\277\267\343\260\277\000@M>\244d\304\276\024dX>H\362\363>\246\251\016?\240\215\020\277\320\371$=a\247\272\277\377\002\264\277<\225\202\277G\2063?\310t\t\276C\037\300\276\226\0102\277\347\302\353\276\036~\250\277\313\021D\277$N\305\277\244\203\347\277^\374I\277\346\026*?\200\000\375;\371\331\252\277\212\276\302\276T\310\302>`\252\210=#\251\341?\324\215\354?~\261\025@$\310\202?\240x\261>@\307\246?\302\323\371>\000\373\275\272kU\\>\344\376\243>6h\224\277`\024\254\277.Um\277\340\026\357\276\260\005[\277\354\363\271>\334\202j?\206\223J?\230\255\224?Ri7?b\300\373>\270\030a?\020Y\303=\016\254\303=H\330\034?+\362o?\034\037{\276~@\253?\334\250\306?\006\240h?\006d\r?\323V\352? \325\322?t\307\336?N\010\017@9\314\014@\007^\004@\016\210\301?<\221\365?d\342\037@+\206\312?\314\314\246?\275B`?U3\220>\217\305\357\277\000Y\310\276\005\002\347>\r;\005?C\335\327?\330\314\373?p\004\333?\\\024\244?D\326)?eq\217?\222\273\320>\320\031\326?>\254\244?\014\334\236\276$F\365=`M\244\277\323\024\240\277\322\271\227\277\204\251\245\277\326\340\033\277\213\364\321\277q\3420\277ZW\232\277\262\256\316\277\343\344\262?Ph\t@\305n\271?\033\001t?yN\225?n\200\'@4P\002@\031/\222?Ek\351>\261\037\362\276\010,\037=\006\250\201\275\347!\340\276\355\351\246\277\324\275\210\277\334\354?\276/J#\276Q\025\026\276\000:\025\272\212\346\301>\006H\245>\244P\177\277gc\221\277\034ev\276\t\026f?\024]b\276K\346\237\276\361s\206\277\231\024\201\277\014K\241\277\376\221\247\277^\244t\277b\317a\277+\206\352\277\016\r\253\277\020\206\224\275\206\2578\277P\245\'>\005>\245\277\372Z\365\276r\242L\277\241K\362\277\250\231\256\276d\342\024\277\022z\251\277{\305\305\277\212\267\225\276\236\031\026?\276\307\t\276\311vc>\3404]\275 \006\306:\31477\277\275\3461\277\021\301\037\277u\370\207\277T\177l\277\275\255=\277\240\337\'\276\2670\321\276\272\001B?\250\025\032?\315\314\320?\232~`@\327Q+@[\271\'@\257|;@\010P\r@\030\014~?.\212\004?\371\324\212?\250\'\336>PU\327>\264\334\026?\360\006\307\275\022\260\327=\373)\203>\340\231\027\275F\033\003\277\366k\203\277bXl\277w\247=\277G\2322\300`Fh\277\302\354\211\277\024\375\230\277\333\027\252\277(%\334\277n\322\240\277\356\340\320\276\376\340\377\2765\374\245\277\276y\037\300P\351\013\300i\323\026\300\301\205<\300\344r:\277\364]0\276\210Fu?J&:?\271\333\037?x\202\360>\273\014;?\364Bp\276\327lQ\277\034\250:\277\226\273\200\2770\361\243>\220\220\217\276\207\364\177\276-\372Q\277\360\333\031\277\304\344c\2760\220\036=\316;<?\350\307\225\276o\323\267\277\365\277\302\277\354\264p\277P(\177=\326(=?\204\200z>\n\316\022\277J.\212\276\276\200\020?X\0161\277\270\236~\277`\325\221=gt\214\276\364\221\021\277>\361\311\276_\232\000\277>(\314\276Fu$>\324\034\364>:4\346>\330\203\'?06\031\275\302\214\253\275V\035\206\276\000\321\226\274L\210\212\277\354\'{\277\014\217\376\277\336|u\277\354\317\'\277i\222\230\276\250%\217\274\352M\004?\204L\301>\275\364\301\276/(\020\300\034\252\252\277\010\301\341\277\304Xg\277\'k\226\277\260\260\213>\325\357\304\27605%?\342\351\243?\265:\261?J\373J?\255\321D?U\235\005?\271M\n\277\310\220\341=zc\233\276\\|\007>\2432\254\276K6c\277\326\034\231\277\346\241\316\277\327\003>\277\314\021_\277\255Y\235\276{\337\204\276\274\3661\276(,\207?~Y\362\276nJ\307\276\2136\365>x\244\004=:NG\277\000\314#;\247\216\222>F\274\353?\340q1\276\275\305\232?\307\317\361?\336\035\311?2k\347?\354\360\r@Q\231-\275\273:\251\276\232\232I\276k\221\270\277\037\351\267\277_}\005\300?\264\256\277\376\375\016\300\345\310\333\277+q\250\277B\014D\277\347\266\247\277\272\264\245\277\227J\341\277z\252\357\277$\334\321>\250\026\203\276\273/\232>\270\002\346\276\364q\211\275^|K>\"\232a>\312;\226\276(\274\r\277\374\311\231\277r\r^\277\324\3145>t\2466\275!\202\220?\232\300r?H\0270>M\204\225?\256UJ?\372\037\315>\266*n\277\204]\017\277/\346\345>\346\317\214>\2128\245\275\007b\203\277\\\257\030\277\311\244\264\276\274\232\343=\321\320\002?\323b#?\206,\261?\200\314O\275\026\355\226=\251\211i\277\014\301R\276\027k\027\276I/+?\2000\346\275w\222\342>\252\375??\200\033\315<\251k\273\276\340\356\t\277\364\201\367\276\322\r\036\277\340\210\332>j\261~?\315\263\220?\351\2228@\334\217\206?\372\334\211?NF\233?\211\344\261?\346\031J?\036\270\231?3\266<?n\345\352>\370y\240\276\372\230I\277F\212\365\277\\\356\271\277]\243\204\277\302\314\254\277\321\327\211\277\021\252\357\277(I\026\3001\217\323\2770\344\017>\033\013\215\275 \237\016\277\224\342\303?J\336\300>8\177,?\337n\320?\n;$@\256\254\251?@\233\000@@w\312=\254\016\210\277\003T\235\277DLR\2771z@\276~\355\311>\370M\263>\334\357\210?\230l\r>\257J^\276\030f\251>\272\210=?\014:Z?\016E\215?\310p\271?\000?\374<\277\345y>YM\n?\314,\321>\177\217\016?\234\\\371>0\370\274=\t-\033?SK\215?\024vv?s\'I?\205d\211?\374\210\030?\312\341\376>1\037\010?X\236\201\275bM\353>\021}\334>y3\345>Trj?\352>\366?\000\347\266?^C\013@\214\217.@H\020%@\352\224\037@\340\032\n@\342\300\323?K\203-@\256pf@\231\323\"@\2544\001@[\354g?}\026;?\3303\275\276\342\235X\277K\263\313\276/\355\037@\314\274\035@Bl\370?2\300\030@\264\216\327?\204b\016@\243Y\306?\030P\323>\300\203\317\276\206\223|?_>\364>\250\026\001>\031\341\304>\354VP?\311\007\036?\314\006_?\256\000\257?\207\313\002@\245]\246?B\203\342?\364\021\327?\003e\301?\251\033\305?C\332\240?/\027\362>\211=Y?\2778\317>\010\206\001>\200#\352?\242\272\330?s\024\245?\366\302\227?0\354\250?\264\034\264>\007B\274\277!M\252\277\250\207\357\276.w\363>6>|?\356\026\356?B\257\036@\334\250K@xR\n@\270\270(@\327\252%@~\003\320?\345\307I?\270\346P?\026X\003?\2422\224>^\244\342>\010\266\225\275 K)\277\210r\335=\017\307\330\276\3624Z?\221\267\231?\216\026\314?g\207\362?r;\021@\272\035\020@\257\006\222?\270\205i?o.\314>8Cn\277j\343\246>\262\240\305>\260\215Q>4\010\372\276\344\220\202\277\325 ,\300T\n\'\300\rG\017@\355LM?\312\342\335?\314s\317>\313\306/?\276\346%>\230\364\331>;\3631?.\0369?\024\376\275?r\367\360>)s\272\276\231\033\"\277Tk\372\276\232W\275\276\274\375x\277\340\373z\277\340\271A>\324\t\207\277\360\256n=\250\3612?\006Lu\277\212@,\277\206&\322\277\366p\327\277K y\277\262\224\005\277\221\301\010\277\353\225\270\277\306\260\310\2776P\002\300\223*\350\277\"\300\261\277\327\304\242\277>F\253\276\013\271+\276\032\033:?\332\311\260>\2243\025\2763:~\277\342\230R\277u\372\203\277\2140\316\277\357M\255\277\232}\317\276\311T\355>\347Y\253?\240\260\345?\201y\333\277>\256\263\277\373\261\257\277\370wo\277\351dR?\252\036\255\276\362B\243\277\337\020\215\277\250\206-\276\372\314\202\276\300k+?\017\336\342?\300\017.@\242\370\356?d\226]?\340\224M=\364\362\247?vo\222>\275\021v>g\206\242\277\203H\214\277\376\037\303\277@\305\244\274\220\264\031\277\273\2316\277\204\225\321\277S0\255\277\233\316+\300\375\314\035\300\221\023\004\300\010\357\037\277<\210\232\276p\364\273<0\275\316;\021MX\277\3349\224\277\200^S?\216\032\302\276\234\256\215=\206\376\001\277\223\005\202\277\242[\003\277\333\024\003\277R\217\243\277\326,\271\276\336\366\204?\026\353a?\'v\334?X\010\326>\211:\255>\216\252Y?bw\201?\027\325T?z\342j?\366\360\223?3@\207?P\2700?`\215:\275\303\001\007\300\321\316\331\277\366\355d\277|\246\027\2772\235\275\277rc\214\276|\021+=\0233\317\276\220K>\277\276\307`\277T\245\237\277\030\366-\276\273\255\220\276k\325Z\276!\203\265\277~\337\302\277\212u\356\276\020\354\210<\225\351:?\370\331\027\276\350\036\006\275\306\235\346\276\214\323\225\275\016(\'?\222\262\324\276\320sP\277L]\211\277<\0274\277\313I\222\277\245\3356\277\340\017\006\276=\264\347>dB\252=\251\360*\277\312\216\032\300\247A\010\300$mZ\277\260R\226\277\256\343\257?\034\036V>4\226\016?\310\013)\2772_\205\276\372\305{\277)\026\205\277\177\244\000\300\202\227\030\277GJ6\277q\350B\277\334\370M\277rq<\277\022,\026\277B\350O\277t\247 ?\"\207\236?p\034|\275\247\r6?\230;X?\252\232\032@P\241N@^\376l?6k\270?S\330I@\315\250{@lwr@\224\026\022@u\264\314?5\275\331?>N\306?\303M\275?\207[\307?\236\325\271?\005\320\303?\321\037h?\224\356\376\276\010\372\217?0\261!=\375Co>.S\020\277\010\3427?\006\347\223?$\256\005>@\306\212?\030\332\314?\252\217S?\000uK\273\220\203-\277\325\343S\277\247\2478?\332\244\210>\200d\"?8\203\213\276\216\016\317\275\037;\262>\264a\205?t\035\353?\026\214\213?\310\014\004>\351\276\246=`M{?H\245l?h\226\312?\364\313\276>=\221\000\277\336!\033?\036\221T?\237\327\364>2t\016?\036\320\225>\312fu?J\033\305\275\332\033u\276(\235\333\276jX\271\276\357`\217\276\274\002\207\276\336\300\016?h\236q\276\200\037\304\276 \351\037\277P[9\277\\\270S\277!r\"\277\250\022\300\277\275\236\245\277\005;\007\277:ws?\344\320\231>\220\362r=jE\030\277N\262\214\276\304W.\277bp\250\276\367\3471\276 ;\246\277\244\013\244\2774\263\263>\275)\024?\277n\311\276\2208\213\277@)\200\277\216\337\t\277\311\007\014\277\272t#?N\231\252>\002\034\323\277x\331\217\277\004\243\254\277 \030\235\277pP\274\277@3\237>\200\020\215\272\240J\225\277/\003\342\277\260\026\216\277\343\257\266\277!\023r\277Q \241\277\262\334i?2\306\226\276\\\016+\275\216\303\000\277\216\017\243\277-0Y\277\277\002\025\277\221\207\320\277\304\244*\277\246n\245\276\0008\266;b\027\024?]\275\254?N\331\314?\240h\232?DT#>\204\232\306>\336\310\037\276\352B\035\277\305\n\323\277\214,\210\276WQ\250\277\224\020l\277\320=\230\277\035\303\350\276.\027\335\276\024A@\277\376\003\340\276t\224\273\276p\251-?\370\262\005\276@\314\214\272\005\217d?\332\237z?/\031\207?\021\306\017@^\323\016@_R\253?\350\031\026@:\207\227?\335Sa?vD\253?\003u\363?u6\377?<\314\276?\017\202j?\311\351\375>\356\312T?-\336\212\277\024:(\277\320\253\330=JR\217\277\305\355H\277\010PP\277\016[\247\2778\252?\276\204\310Y?\'\212F?\2572\r?\n\202\211?\330\321\361=a\t\274\275zO\211\276\363D:\277\000\256\265\276\305e?\277X:\220\277\360@\t\300\332\037\342\277T(\370\277\220\341\354\277\014\322)\300,\026\\?\006\315\361>\271\356\304>\370\203\245>\240\252\362\274\031\244\311\276\232{.\277\n\336\263\276\000\366Y\277\215j\271\277p\377N\277\305\274\034\277\n\256\021\276\247\250\016?!E\222?\021\274C?\276k\310?\212u\302?J\214\321?)_\306?F\360\306?\3728y?P\311\214?$nv>\225\233Q\277\376\360\000\300\200\310|\274\211\324\035\300\275\247;\300\240!\273\277\262\252O\277\225%m\277x\257\324\277\214\363\306\277N\341\342\277\365\'\014\300\211\234\r\300\t\310\260\277\242=\215\276\"\\\221>\306\036\264=\031G\272?\215-\212?\203\225\035?\262J\222\277\356Q\201\277\\V\030\276\373a\361\276\377\263?\277\024D\360\276\010;\244\277\266r/\277&Q,\276g\3152\277V\217\273\277\252\275\263\277\322\260U\277\204\376\001\276rJ\244\276\001\266)?\236\0373?&6\252?\347i\013@\210\352\263?TCD?@\274\201<\361%\325\276{N\254\276\340\356\024\277\224\233\342>\3468\257?\216\340\360?u\242\253\277\251\031\276\277\335\314\271\277\277H\253\277B\312\031\277@}\t\277\205\205\350\276X>\000>m\337\351\275\3558\026\275\3423\010=\371]r\277\222\244\375\276txU?6\275\257? ]\033@\241d\215?\363xJ?\346\353\034\277NJ~\277\222\022\267\277\264\017\311\277\332\260A\300\010\206\r\300,\266o\276\362\023\021>\014k\353\2763Z\254\276d\307]\275X\351\231\277\003\003\232\277>0>\277DP\260>\215X\342\276\204\206(\277\t\350\224\276y\330<?TS\021?:\212 \276+\2108\277\350Z\266\277\020\016\267\277\315\007W\277l\301,\277D\354\\>\2279\266?\204T\201>z\225\352>\360P\223?\026 \\?\204\256]?S\255D?p3\034?\342\005N?\000+\307?\216u\007@\204\232\347?6\305\373>\216\002Y?,\361\002@g8\350?l\n @z\260\021@A\351\344?\246\274\037@\036\332\310?\201\034\023@\250\245+@\353J\002@\366\237\312?\256\345\257>\345`\267\276\311\031\023?\300\215U?\252\320\374?OI\336?\304\034\224?D:l?\314:\014?\254\275[?N\331\313\277\222\255\207\277\226\004\276\277N\310\236\277\366\214\013\300\316k\312\277\300\340\320<hL&\277\'\224\021\300\tF\010\300a\3159\300wo]\300\353f\300\277.F\016\300\032|\345\277\270W\032\300\300\345\224?\372\005\241>\374j\007\277\262$\264\277\336U\312\277\336n\377\277\272\312I\300\314\252:\300\342\004=\300!\323\312\277\262t\373\277\243A\275\277\3676\016\277lH\235\277~\312\341\276a\324\017\277\302+\017\2774\2172?=\231H?\016$\252>\0003l;\367\343w=\306s\312>\016\353\264>\204\365\222?\204[ ?b\231\203?\262E\232\276\370\251Y\277\241$\007\300\3503\004\300L\010\037\300AV\345\277}V\002\300\312\036\261\277\300J\355\276\"\371\210\277\222\035\026\277\016\3509\276\240h\302\273`\257\230?K\325_\277p\327\213\277\254\263G\276^\245\273\276\242\205\312\277,\337\237\277\207\250\274\277\2210\234\277\001\035\225\277\2534i\277^\254\311\277\206\311\357\277\323\250r\277\221\204.\277f\353\202>\314v\312?D\031\346>\271\246\255>v\002\267?\242\202\302>\373\004\206?P\\\342=\221i\317\276]\335[\277\355\332\313\276P\352M?\372\263\223?\374\335\262?NC\n@\367F\t@\222\n7@\\<\213>,\373\326>b\353s\276\207\246+\277\3443;\277\346\365\276\277P\222Y\277\262\027\214\276\370_\231\275\376\363{?<b\013?\331\314\252\276\350\317\345\276\236v4?Q\\\246>?\327\310\276!\257\232>\247\222\001\277\276\232\276\277\346\021\262\277\260J\242\276\013\302\371\276y\210G\277`n\"=\275\022\337?\0149\213?\022\363\243?\246\177\301>N\270\377>=M\022?\002\010+?\344/\226>\304\035+=\357\201\317\276\020\277\202=j\252\032?\320\224\274\276\025\377C\277(\250\253\277\356eX\277\234\321V>\251\245\313=\233~I?\210\325\014@\272\335[@\037g\370?\326Nd?\326\243\234?\010\020X\276g\340\303\275\322\236\000?\261]\231?\345i\210?x\364\201?\315{\200?\023\024\364>:>\302?\016\200`?\310\315\236?0\\\014?*1\230?YD8?\224\331\354>\206`\217?\372b\371>\305\025W?P\212\332=\234\006\271>\360\375$?\251\304\014?f\275\231?\374\261\031>s\344\221?\224tU\276F\303`\277\305\3156\277\366N\264>\217~\357\276\206#>>\236\374b?p\226\254?\320\203\215?\332a\222\277\353h\311\277b\343\333\2770D\332\277\275p\316\277\253d\022\300\300\350\235\277\013\202\242\277\230\034\264\277\220\226\027?\341\334\353?/\323\003@\311\305~?gD\371>\234\3003\275[\337\252\276\222~F\277\376\347C\277\210Xx>XE?\277\0202\004>O\021>>|o\266\276d\261\342\275g%\273>T\225\374\276&\032\273\276\264\017\366\276\376\365\010>\220\013\226\277>\224\200?O\333\242>\002\241,\277<\255\305\276\246\026v\276\006\357,\277Z]\225\277\342?\314\277~\346S?\034M\313?\025\207\276?\200V\211\276\\\305{\276\240\265\225\274\343\3452\277\216N\236\276\243\000\306\277\213a\370\277\026\301\334\277\020\265\374\277\204\344\335\277\257\256\224\277^$\300\277\202\360\315\2770x\022\277\326%\030?T\006a?B\237\215?\272}\203?\327\225\363>\340\022\240?\240\261$?\230\211\305>@\342\t=\037\273\025\277\224\200\236\2770\306\230\276\034\266D\277\250_Y>zg\251>\300,\376><GT?d\312\006>\210\365\250>Z\\v\276H\016\251<\320\206\270>~)\215>\201m\025?\274\372?\277\222r\235\277\230\223\260\277/a\021\277NU\271\276\236Ux>\2363\036>\022\221$\300\270N\232\276\000\375b<1\241@\277\366\tp\277\320\323\235=\022\004\261\276\307\360X\276X\323\034=\345\362d>\257\260$>\350c\227\274\312V\346\274LX\254\277M0\201\277&\213\331\277;\022\235\277\352\315y\277\\<\222\277\370\003[\276\030\361u?J\2314?\034\014[?M\025*?\317\'\314\2770\306\331\276B\370\272\277\256ff\277j\223p\277\010\325[\2776T\r\2778\006!?G\004?\277|\340\"\276\350T\014\276*-\222>\250\205&\277\256p\212\277\020R\257\277\371t\006\277\374ck\277\375\020>\2778S<\277\033\276\267\277\232\005L\277\367\332\203\277\212\037\345\277\313@\213\277fqH\277\243z\264\276\245\263\006\277\3463f\276\310\031\263>\270\3224\276\354+h\277\014\221\n\276\332&k?\231\336\"?\356\202\211>\202p\352>\271\200\257\276\301\203\305>\330\2146=\375\306\001\277\372\372\341\276\032KC\277\342^6\277\244&g>L\324I\2772\246\177\2776\353\230>X\320N>j\364\r\300u\324\306\277\251\372 \300\r\263\002\300~L+\300\330\326\262\277T\305V\277\t\r\304\276Ej\332?\367\335\245?EH\224?\220\251\014\275\023,\246?L\242\255?\322\032\177?\354\242\270?\272\2342@\315\3517@\234\242\340?\233*,?\307\364\317>\202\307\213?\353\373j?\302\347\r@<\310O?\264\250\346?\257|\232?H\264\342?+N\273?*\340C?\260\224J\276.R\240\277\010\365\216\275\230\262\035\277\224\t\231=:\027$\276\026EW\276\374\331\317\276\035\001 \277]\004\237\277\343w\305\277\020\342\227\277\330~\003\276{o\232\277\240 d\275{\035\354\276\304\2364\277\334\236\017\276tR\261\2778M\273\277}\235\223\277\022{\326\277\320\023\021\276\036\232K?\233\002\312?\220ya?\200\030\024\276:a\200?p\017n>\353\307\021>)*\311?\233\253\343?0\320\023@\312}\213?\317\265\302?\264`\250>\310\000\033=\234\327\002?\315sD\277\366\336\265?\3021\004@\211\005t?P\244\\\274\340E\237\272\305\230\241?`\220\356?\260o\355?8\013y>\3424\343\276t!\007\277\204\364\006\276i\006\223>5mQ\277\227\322\016?\371\311\005@\2263\254?\026b\376?\322O\210?8\rS\276\225\313\343\276d\354\206=\235f\033?\2215\252\276\262`.\277\250q\344\276\034\344\346\276l\033\305?\013\323\231?\200\216\332=\20790?\022\220\223>\244\377\030>\352\260\320\276\000Ak\276\375\323\002?j\372\251?\224\252\200?\333\220_?\232\r\254?\024\307\321>!n\305?r\224m?\300(\003<\\\214\013\277\332\374\337\277\0326\365\2770D\314\277\010\303\347\277\002T\357\277x\230\267\277\364,\'>\330\337l<B[>>\372I\272?h\226N@\330\3570@2\204\014@Zh\036@\316\256\026@J\023\300?&\303\276?\240^\221?\313t\014\277\000\016\t\275\243 !\277\0256!\277Fc\361\276\310\373\312\276\276\223\002?\002\360/\277\256\377\265\277\260\2500>\356\306\221?do\222>A!\023\300C\216\366\277\014E\014\300\200\314\r\300r\270\002\300\337\334)\277A\251\200?\334\024\365?\206\246\231?\257\373_?\277\277\025@5}\010@x2\007@\350Y>?\350\335\324>P\367\200\274\244#}\277\377\220\244\276\017\033\231\276lx\244\275B\344\246\276\250,E\275U\206\355\276k\344\201\277\244\272I\277P\362\221\277\261\337\200\277G\310\027\300\255&\225\277T\0254\277S\222A\277\260\220R\275\3430\245\276\3147\037\277\300%\n\276\313\371G?*\241D?<\305\226?<\274\002>\350\037\236\276\032\267\255\276\010\336\035\2771b\276\277\226\274\241\277\354w\230\277\276E\303\277\241t,\300\000\253\370\277\233V\014?\320,\320\275\321\2657?\006\363\310>L\313\003?%>\207>\372G\310\275\200\256\265\276?\261\253?\021 \021@\324Y\261>\031\356.?\310\240\221\275\267\236A?@o\356=\370\223\346>#\344}>w\201\264>\354V\206=d\365V\276\246U\372>t\335\305\275\310/\036?\3046\230>\312\033*?\252 T?\260\374S?\006y\303>lBM?\200\243Y=gr\237\277\374\246j\277J\036\242\277\267\303\307\277\004\273\345\276\236dT\277[1\377\277\272t\226\277\030\347v\276=\266\222\277\340\220\255\275xu\022\275\031\332\027\277\343\240i\276&\353^>\032\232\010?\310e\343=\367\027\260?\022p\243\277(\364=\277\002\246U\276=s)>v\224\241?\2237\220?\000\347P\276\003\325\200?\321|\215?\325\340_?\370\005\261?$\247\327?2\n\256?Y-,@\350\316W@\324z\024@\370t\037>\255\316\320\276\\\327\217\277\277\025\357\276\230\027\344\276\367\251\201\276y\232@\277wE\231\277\024L\242\277\024#\233>>~\235?R\344\226?\335\324\257?|/P?\001\035\260?H\342[>\344VP?\217q`?\230\240\251\276\016\t!>\034\332\307>@\235<\277\344\014V\277\327\243\223\277c\014}\277~\241\371\2764\224\247=\343HC?\3170\210?/k\211?U\340\037?\377\023\200\277\260x\333=\353\331\250\276R\337\020\277Y-\336>as\220?\234\003\000@HUa>F\n<?\350t\217\276\374\362&\277\351W\255\277\304\317\010\277\334\301\203\276\210\233\355>\n\247W?\260\361\006?h\340U?\366\234\333?\211$\305?\250\275a?\300\215\027\275\263\273 \277\354{0\277f\267$\277\027\005\227\277\002I\347\276\217\354\256>\010\007\013?\006\322\237\277hEU\277\273\327\215\276{\005t\277\274{\017\277\213\334\213\277\366l\241\277\330\230D\276K}0?e0&?\342\016\006>Q2r?\023\360\037?\255.2?*\340^?\313\315D\277\354\222\017>\361\010!?\\\034\200?\035\200y?\216\301\326\276K\310\231\276<\370\030\277\262\301\226\277l\205\017\276\340\271\270\276\222\225\004\276\233\264\'?\177\220\317?(\004\006@H\252\027@}\2233@@I:@z}H@87\036@\345O\334?\352X\204?,\277\216?\303\017\325?\006\372\302?T\270:?``\231<y\212\342\276\3307\355\275\237\236\007\277a:\271\2775\216\231\277\214\305p>OA\203\2770l\230\277`\267\351\275-\027\003?\030y!\277\317\236\031?\331\377\264? \355\252?\224\227\026@\362\220$@49\335?3 8@\2772\007@\253\257\326?Vo\002@+\025\r@@S\373?\"\031L?\336\332\215?w\001\t?U\261p?(\004\210?\253\276\350>`\346\344>h&\343>t[m>\324\334<\277\334\347\365>\224\002\177?\030\301\321\275sa\304=\317\342g\277\3656,\277\265\367\245\276XIa>H\356\233\274\036\213\037\276\214%\243\277Z\022\023\300\202\317\235\277\332\370\364\277\222\031 \300\305\352-\300\035\265)\300~\344\226\277\353\303\025?\320\'\336?\214\231\203?$\242\276>0\216C?\202\243z?jBz?p.\212?~\357\310?\354\013\325?\363\256\230?\003\"h?5\321\317>\311\350\265?X\014\n@\270\013\t@\344=\342?q\261\330?!\352\212?\200\336\355\274\227\222y\277\212\216\\\277\214%\205\2774\201J\276\200\353\360:8\262\205\277-\212U\277\032\307\201\277\202i\n\277\230_\022\275B\013Q\2774\021?\277t|\025?<E\225?\250y\365?\240Zl=\233C\233\277\356\271\306\276v@\201\275t\213S?\030\231)?\302*\203>\032`\215?{\332\241?\272\203\375?\267\246\234?\204\037\304?\374\241\216\277\255\302f\277\364gL\277&\303\256\277~]\333\277oD\033\277\016\252\002\277X\346\303\277\332y\214\277\312\030\002\300\352\303\223\277\034\233b\277H\004;>*\366@?\010\224\227?4\356\351>\322\340#\276\364bA\277\"\265\306\276m7\200\277\370\365\r\276\'\003\033?\300+\206=\324>\024\277\332iL\300Uk\222\277\024\260J\277\266p\356\277\210t\320\277\240]\'\276v\331\024\2760.\331\275xa\250\274\217`\310\276\342\323\212\277\370\215\240\277Pv\330\276\256\341\341\276D\016\357\2763\005\227\276/\345x?;\007\337?\350;\207?<\235<?\252C(?\014.N?\364\277e\276\020!-\277\267\262_?\242\030\232?\204\021\222?m\354r?\360\372\247?a\321\005?M/$?P\345\275>p\244r?\016\r\307?\367\'\242?\234N#?z\365\215?\315\2356?\232\032\023>\203\250\025\277\274\333\271\2764\320\255>6\366x\277v\366\r\300\332N\260\277\204~\033\276\001\326\355\276\212\316U\277\373\017\001\277Bl\317\276\021\344\307\277\346\207\345\277\240\366\243\277X\025\202\276\322J\371\276w\226\314\277U\310\322\277\201\303\266\277\250\177\235\277\253\253l\277\3121\277\276\366>\243\276\240\232\361\275]\255v\277\311$?\277\310\026\227\277\300\014E<\314\0204?0\t\023> \021\270\277F-\374\277\010X\200\277\300\354\025\277\033\332\362\277\215^\242\277I\021\213\277\246\n\275\277C\335#\300#\346\354\277\347\264\r\300\273\203\003\300\224\363=\300h.O\300\354\3359\300CSU\300\357\"F\300S\327]\300\324\215)\300a\2605\300\241\301\307\277\240*_\2757i\n>\016\216\227=}\247P\277\200\000\007\300\013v\253\277r\367y\277P\345y\277\t\247*\277\356\235]\276\245\027:\277\205\302\261\277\233\344\232\277>c\201\276\322L\031\277,\245C\277\n\222f\277\340\350h\276;?y\277\227o\357\276\216\201\224\276\241\240Y\277\236\002y\277\330\245\242\277\230*T\277\030\374\270?\310\332x\277D_\336\277\310\340\211\276\270%\364\276\274A\017\300\275\356\005\300\340]\264\277\252t\321\277r/ \277X\026v\277b\r\217\277\215\370\227\277\266\340\355\2778\037*\277\266\355\237\277\374\221\010\277\316\207\030?\254^\t>\034\352\373=j\264\373\276H\331^>\311\315\020>\221p\004?\tL\035?\205Bt?\3603\254>\340\376\'?\220\316\360\275\324\000\217\277\212\247\311\276h\t\331\276\263\214;\277%\376\200\277\325_t\277\254,4>\010\331\320>\310\323\000?R:h?\017\264k?\"j\237?tS\237?\334,\276?#\212\273?\367\206\021?\204\342\313=B\233*\276\021fa\277\220\203\033\2754\317\215\277\300D\263\277\331g\n\300\204\253&\300\2105X?=\350\270?\"}1@\210\371;@^\232\021@xc\271?\024\342\251?\216M\n?2\261\020@/W\005@\377\314\316?i\360N?\r\242K?\210\360\333>\326}:\277b\262\326\276Y\3304\276\030\317\321<\305c\000\277`\310\351\275+E\341>\316\n\313?0\345\216? \017\303?\362\025\233\277\376uA\277@\204\237>v\031]\277\004\232\010\276\366\353\261\276\017\362\326>\270\253x\275c,\250?<\037\374?\307\303.@\370\246/@\257\324\023@n\341J?V*~>\236\346g>8\261<?L\335\266?l7\376\276)7\215\277lnK\277\206*\331>V?R\277\240\357\340\277\330\327\373=\330F2\275\224\352f\276\364\371\307=\263\203\216\277\331{g\277\204\315\352\276\002\207\n\300\262\246\"\300\366bg\300\337\020_\300\303\367:\300(f\302\277\216\260j\277\324\021\277>\364\"\002\277\336E<\276\017\341l\277\344\"\250\277\n]\020\300\273X\361\277\374\003\361\277\300U \300\201\204\017\300ZF,?\037\233\271>\200\034\334\273j\236O>\347\341\001\2774*\021\277\3218\225\277N.\266>\264\325\301?\0246\317?\352\356q@\337!\026@\303\346w?`\2013=\264\204\262>2u\367\276\256\350S\276[\"\220\277\212~\310\277\352Ix\277\024\021\306\277\226\345\316\277\350W\373\276\032\313\321\276\302\333\224?\223\252Z?\031\336%?\200$\210?\277\275\342>e\226\315\276d\210\305\276\336\340}>\357\321\210?r&\276?4M\223?\254<3?\311\372\222>\016S\n\277V\274-\277dK\005\276\001\023;?\000\275\177?In\230?\036\001\267?\200\2256>7\'\226\277\350\333\250=\326\3478=\332\277\'\277\017\355\n\277~:=\276#!\021\276\3516p?\261\342)?2\025E?\256\215i?\220\252\223=\245\216\362\276\340\021\177\275\\\325s\276\333/\246\277\224\234\333\277\014\243\363\277?\364\250\277\365\021\206\277\020Q\002\277$e~\277~\373\352>\362\251<?\202\002H>B\3602?\241V\023\277\211\031J\276`y\273\273\301*\030\277\2301\017=y\337C?\362\024\217?\316\312\214>\332\241\021\277r>j\277P1\301>\332)\236\276^\0317\2770 \374=\256D\306?;\021 ?\340r\307\275,\227\276>\230?\354\276\203\204\365\276(\021\316\277\223\354,\277\370\202\255\277\200.\242=X%\266>|\324\\>B1\344\276~b\247?\022{\261>3p\227>S\200\260?\300:\006\275\031;d\276n\245\n?@\002\227\274\204\262\236>\333\257V?Z\252^?\270\344F>L\030??\356\001_?\226JM?\240\265\337=\352\237\306\276\202C~>\022w\307\276_\000\253\277\013\031\242\277\207\310\362\277\023\326\213\277L\352\252\276\206\244R\276qe\240\277\252\332\313\276\3034\233?\007\216\032@\006\2219@\214AX@\245!\"@l\314\244?\305%\"?w\001)?6\211G?\255\005 ?\032\263\277\276\006Z\014>\246\276Y?\256\242V>\205\0171?p\017\246\276r\3438\277\000<\207;\343\241k>\214\335\312?@\3460\275x9\236>\366\353\342>\212\316\235\276\023\273\307\277\351y\016\300\272\376M\277\010!\324\277\322\033O\277n\244Z\276\324y\323?\231\034\203?<&0?\207\371\032\277\"\230G\276\220\235\366=\352\013H\277k\270\325\277\300;>\300\244\233L\277\353-N\277\010\227\215\276\3747b\276dI\354\277\373\217\232\277j}\261\277\310\027\202\277\024\316\002\2761]g\277\210i\233\276\213)\274>\204\2542\277\211\214\\\277H/5>\266\376\326\2760\216\376=v\327r?\302H\242?w\251\202?\r\311\327?=x\030@\314\327\373>\226\343\014?ka\224\276\231\034\256\277\242A+\300\034\353\273\277\302\002\331\277\355\302\263\277\2177\005\300\256\005^\300\035\327\017\300\022U\265\277\220\246\014\300s\365\'\300\334\246\002\300\022U\251\277&%\366\277&\257\336\277\224\330\030\300\010:\035\300\246\025\221\277\023IY\277\"\372\226>\346\307\363>\t\217K?t@\377??m\304?\341U\225?&\320\214\276\3542\225=\230\000\375\276R\014\311>\214\272\244=Z\2769\277\243\253\251\276\276\2300>&>J>\252\217\016\2773a\317\276\256\306D\277\"\250\324>\332\000~\276\005\005\307\275\225\t:\277\021\372\256\276\273\243\221\277\000\344\350\272\3700m>l\277\301>\343\037Y\277@\222\356\274\247\330\005\277\354\031\223\277\250\267\370\2774\025\333=\303\252\t?\224&\206?t\253\254?t\254\356?\017\r\212?\360m\310?&Q\265?\3268\350?1v\005@\n\201\036@8k\004@\031\036\262?\006\300c?\300\256\342?\334\323\241?y\':?\2729\367\276\210\271\034=k\353L\277\373/\271\276jm\035?\250e,=\252C\030\277T\372\212=\364_\221\276~2\266>\177\020\365?\014@\313?k\034\353?\340\246Z>\314\010\263\276lI>\277\305\2168?{^K\277\310\336\233\277\274\277\252\277\352\354\247\277\307\231\204\277\356\324\205>5\3576?\001N\256?\356!\203?\232\260:?\320\367\034?\366=>?\022n\213?\354z >x\\\327>xu\276\276\344\020\336\276`K\033\274n0\324\276.6\333\275cT.\27627\313\277\003\204\200\277\362\246\216\276\234\035Y?\260\333|=\202xC?\226\375`?\313\355y?z\313\037?&\216\226?\260\361\274?/\343s?`\217{>+06\277E\016\266\277\203w\257\277\265X\001\300\224N+\276\000]\301:\377\003\210\276{Av\277\247\361\213\276\365=\231\277i)5\300\303}\013\300\036?\365\277\340Q\241=T\005\267=\325\336\224\277>w}\277\241W\362\276m\304\252\277\3265\373\277\250\244\214\277\226L\277\277\246\361\262\277\342\024\307\277\272)\n\300f\004\255\277\030\230\032\277%K\024\277\242\203\\\277\260\222;\276Q\264 \277\344o@>\262\034\353>Tb\330?\270@\355?\240]\031@\377\256\355?f\343\010@\217K\303?\004%\201?n\276\244?\306\327\263?\236\275f?\226\327\177?\020\235\321?\3532\336?\271\374\231?\226\353\031?t\362\260=}\013\301>6\332[\277v\330\355\276\247\371\271\277\326k\027\277\006\002p>\211\253\242?6\242\252?\335\266\r?\003\321Z>@v\212\277t:\275\276\344&\277\276`8.\277@4\226>\032\271#\277q\365\371\276\370\251\227\275\217!8?\364Ld?\360\013M\276\240\370\220=N\265\017\277\366\361\212?\2245:?\236\tB?\002\220\241>\256)\315\276\024\035t?^\346\006?N\246\200?\366\343\203\276\300\277\225\276x\002\240\275\016\302\036\275qG\225>q\230\212?\250\311z?\222A\322?\"&\244?Bi\020?\210\024\366>\032\215%>\222Q\026?>\003*?\313\344[?\023\357\370?vF\236?\256\221\315>\342\'\234=\215P\251\275O\021\257?hv\340?\370\222\302?\2367\235>\336p\204=\000yi\276E\344R\277\247$\256\276\327\360R\276\200\367z\275\332\212N>\346q\224\276\356\313J\276\300?3<\3356Q\277\205\333\020?\322\027\r>I\030\214>\324\326K?\240\177D?\350`\016\276\302\252\315>\317\035\270\277\334p\372\277\250\251\216?\370\350\333? \203\252=\346\003\\=l\252&\276i\332(>\241\377\000?\333 \030?\010\363\005=\300\301\007\277\320\346\242?\200\036\237>\231Cu\277\000\2707:@\356\361\276fN\010>f\362p?\200R\210=\366xt\277\2048\305\277\027\372\366\277\371\302\266\277\247\322\n\300\314\213\374\276\305=\205?@\350\024?\236vp?0:\356\275x\331T\276\3471[\277Z\223\332\277\n\322\277\277\340!k>\342\034\357?\265\263\266?\370e\324?)\266\373?\240\225N=\254\2449?5\360\005?\t37>g\332v?\037\034\243?\360\344\246?@\377\022?{\027\315>rUO?\332\200\216\276\350J\004?\006\343O>0\235\211?\206\361\273>\234\367\026?J\004\261?\252Y\341?\371\261\347?\306\314\212?d\014\335\276~@\033\276B\355\006?\200\370\021\273\240zD\277\022(\212\277\210#\313\277\022\020[\277~\354\270>Tz@\276\010E~=$\360P\277\337\336\027\277\360\'\265\277^$d\277:.i\277z\312\204>\244\204\333>^\334\324>\336\265\207\277\200}l\276I|j\277`\210\007\276\200\275\\?z\253\303?\275S%?\375\312\320>\377\337\001>\315$B\277@\360I\274\207xl\277\010\322d>\342n\234\275\224Fj\276\204\331\256?\026\023N?*\337\300?\307\001Q?\212\247\301\276\'X\213?\007\212J?\210\367\204?\304\234\023@\340E\270?2\245\n?\220\245P\275\345LD\277K\372J?\026\031\204>y\316\n?_a\177?\340\\\372<\256C\342\276`;N\275\036$\205\276\037\332\225?\332\360*?\234\244i?\010\321\375=>\253\316\276\271\033O\277J\302\327\277\344\t\024\300*f\324\2771u\261\277\366]\r\300\260X\326\277WA\217\277t\247B\277\334pf\276G\352\373>@\\v>\344\310Q\276\207p\323\275`]:?\266E\000>\357/\246\275{\242O\277\305\263\004\277\371a\351>\342f\016\276\377\002\307\276\004\3068\277\300\212\223\275\360{\340\277\340a\253=^\243#\277\013mW\277W\337\330\277W21\277\373\303\037\3005\203\377\277\325\346I\300V\253\034\300\343\370\022\300\270\341E\300L\202\311\277\274\226\005?\002\2412>\265\r[\277\022\234\302\277\016\315\276\277!_\002\300\231\322\336\277\351\223\274\277\027\006\263\277\222\013\363\277\000\222x\275\322\272\342\275\265\257w>\336\332\216>\370\331*\276\344\264\271\276\361D\260\277\314KR\277\014\340Z\276\275\013)\277\201>\223\276%\344\">LO\030\277\037\363\004\277o[#\277W\277\337\277\343\252\016\277L\265f\276\325\366\256>\nE\010\277Z0\177\276\306&\317\276\032\366\030\277\205\323?\277\202@\362\276,\244\351=Zn7\277\000r\274\274lCU>\257\320\032\276\205\343\335>\344\312\235?\275\302\326?\"\327\270?L\006\342?/$\"@rx\004@\303~\035@\"\343\006@z\342%@\2371\210@\236\242?@V\025_?\200)\304\275\024\036\212\276Y\3173\277\2224\210\277\314\2733>F\367\207>?\355\020\276\262\003\027=\343\0336\276\014}L?2\270\203\276\311\\^\277la\325\276\020NZ=\017\203F?\321G\016?~f\276?\200\244\364<\236\370,\275\000\361`;\001\036~\277\262PW\277\215~\270\277\347/\224\277\350\033H\277\270\324\236\277\014w\013\276\335\343\223>\360}4\275\t\323e\277\347 \216\277\216\365\373\276\006q\205\277y\332\237\277\210\211\033\276\317\327\315>\n\215\204\277S\317\177\277H\'P\277\210\205\212\277\262\222\210\277\220\002R\277C\"\271\276\304\243\224=N\222\321\275\272\2709\277\026\201\022\277X\232\300\276\266@\030\277\240\004-?\004\203W\276/\222P\277\222\262\037\277\360\'\320\27538u?`\305\360\275\360\201\n?j\024\220=\341\343O?\r)\035?\2051%?*\323\216\277]\266o\277@c\000\277\373M4?G[\204?\227&\n?\020^\254\274\220\240\270>\030\216\362>\355\367L?rt\250?\352\366)@(\271-@\254\351\274?\255\010\301?0\202\273> \020,?\303\234\224?J\253\267\276\201\304\r\276\003\2111?\030\310\266>\376\361P?]]\317>\264\370\311\275Z\226\270\276\035\266\264>\207\202\250>\034\210c?~F(@]M\005@8\205\367?\220\r\331?\376\243Z\277\263\331B\277\240\201K\275\352\364\247<\354\322\031\276\377\237\277=.)\235\277\030\246.\277\020\336\377\277\274z\020\300\377\312\350\277\364>N\276L\366\006\300\356\344\321\277I!\265\277\200}\032\277\250w\006\277\241q\021\277\257\304\000\277\"\233i\277\246\223\317\277\017\355\331\277X\200\022\300\022!\306\277\337\354\373\277\2346\373\276q\243\276\277\324\035\304\276\374C#\2760\222\271\276\307\256\200\277\234\356\313>\032\307J?\"\373\242?\324\217L?l\341\311\277\264u\205\277\214\302\235\276\000v\225\276\320v\230?\\Yh\276=2>\277\340`v\277\033\306\202\277\000w#\273=I\341>\000\236\355;\314X\030<\020\310\001\277X\t\177\277\250\373>\277\312\024\375\277\323I\224\277-\226\367\276\205\036\230\276\306\254l>\220\r\374\274\315\022\232\2774\350\307\276\351=\340\276\214^\211\276\214\315V\276}\313\203\277\004\270\311\277~\241\373\277\272r\254\277\010\205\214\277\001e\241\277\206\n5\277ri?\277\003\177\331\277\211\320\265\277\201\'\255\277z;\324\277\342\300 \277\304\026Y\277\037I\345\277\360\353\342\277\0007\r\300\355M\013\300~\t\267\277\357B\342\277\004\377\002\300rM\226?B\236\220?\326s\332?Vn;@\021\257N@a\372X@-\373B@\"7)@\334\234\334?\020\253\272?\300hp?\276\204H?\272\313\007?$0q?4\033\373?\034\322\365?{\376\233?\035\310\241?\034\001\321?P \365?\200\3321@\254\234\307?\214\256#?n\317\247?\001%/\300\250\266\255\277\214\310\370\276\264\245\326\277\006\"y\277!\020\033\300&\200#\300\214d\315\277\027D\014\277\010\276#>L\207\304\276u\304\232\276~C\035\277\356\234\276\277\003>\377\277\252\304\r\2772\304&\276\352\214K\277\374\263\313\276\355\317\237>\t@a?\313 &?\322\373\256?\272#\202>\266\225\237?\326\267\002@U\233+@=\355\003@:\013\031@\302\000\213?P\225\014@Lk\366>\362\027\346?\211\206\"@\211\207 @P\305j>\260\224\325<\270>\322?\341\033\270?\313\275s?\365\036\261?\210\004H?0\354+\275\345\353\001?\262,l?\200\t1\275\332\316\031\2776\311\246\276\345\016 ?7\264\206> \346\001?\260\"\303=\207-!>\306\324\265>\340\352\007\277\000\370^\276\320+]>N\252\244?2\275\344>\246I=?/\023\230?3\272\316?A\023\223?\245\343M?\213\350\233>>\261\255>\252`a?o(I\2772;o\276\277~\307\276\356\206\217\277\017\310\313\2764\337M?Px2\276d\215\242>O_7?\314\250\264?|\375\231>\\\3321=n\274\250\277@\213\314\275\313\206v\276\262t\022\277z\254\020\277\2011\212\277\356\256\351\276\220\271\245\277\2669\205\276.\371\255=\231\252V\277\3229{\277\022I\253>\320\270m\276\301\274\257\275\320\360:\277\252|\221\277\344\212\235>\241\351\205>uy\212?\220\207\323?\034\351\324?\363~\003@\021B1@7\314\021@\210\2744@Q$%@W\273\350?\224\227\037@\230\332J?,\314\025>nN\001>\027\243\200>D\270\364\276w&\310>\014\334\252?B\320\223?\245\267)?\256\366\222?bF\002?t\232\201?\350G\220?\370\344\251\277\371\3712\277\270\351\002\277\244\243\265\276{\204\355>\246\334\234\2772V\203\277\032\252\257\277\n\237\266\277\344\017\027\277\005#\326\277(\353+\276\233Jt>\372d\205\276\256h\336>\315\343\034\277\204th\277\240\0003\277\330m\234\277R\306\337\276\367\373\245>\347\365\201?\301\367\224?\304\320+>\2468k?Z\235;\277\224b\332\277pr\250\2758\204\006>W\225\254\276\006\356\032\276\356\326\r\277\006%\213?wM\205?\320p\343?2\256U?\250\005\262?}\244e?\243\361.@\356\215\307?~\030#?\367\341N?b\206\325\276\324\337l>\336\327\224>\341\030\273>\010\371\221?\355\304\014?\374?\365\275\010\222\321\274\026\241>>\252\243\\?wu\277?\320\361s?\306w7\277P\253\341=<3-\276\007\024Q>\367\2747?\254\377\371?$\351\306>\000Y\014=\353\003\352\274}\261W?\230R\341>\312:C?\026\275\223?(\246\'@S\237J@\250h\034@\274\264)@4y(\300\202\362.\300\227\372\031\3006}\037\300g\001\n\300\335B3\300\200\306\316\277\247\361\234\277\230\300\022\277\230w\017\277\2266\242\276\201\265\203\276\274z\023\277\374y\222\277\t\337c\277\272o\254\276`\304Q\276\306@5\277xv\230\277\304\242\236\277|\360\n\277\300!\251; \211\264\276\n\273Q>\260\247\221\275\312\377\230>q\357\257>D\014Y?\210N\263?\300N3?0*$\275\340\207\223\276\236\246\005\277\000\326\236\277a$\n\300\235>\322\277|\311*\3007\272\001\300\276\223\263\277\030\222\275\277\000w\001\300\220\0079\276.\035\240\276`\022R<8b\326\275\006\344\320\275\200@\327;\3720=>\334h\367>\310\247:=\003\267\216\276\350\213\032\277\030\276\255\275\"!\264\276\240\252d\275J\344\206\277\257\307\200\277Kz\252\2770$-\277\274\330\325\276\364s\224\277\226\313\t\3003x\035\300\033I\337\277\361\016-\300J\\\325\277\321\315\247\277\217\355\304\277\330\244N\276@\357\203>\206Z\003?X\234!>lU\'>\236\316\260\276\341\214)\276\"e\255\276\370\274\215\277\340\242\367\277\340\375{\275\025\376\336\276\202\017\241\277\335I\202\277(+\017\277\212x\243\277\034:\022\277\246P\230\276 .\227>\036H\315>\030c1\275\244\223\311\275N\257\344=\262U\262>\220\375{?\217\256\324>\200+\317\274\312\177\241?\366\"A?\326/\373\276\210\373-\276\336[\342\276|\366\306\276\325\"\244\277\340\271\325\277\003:\304\277\200p}\274|2F=\335\006\264\276\034\263Q\275u\277`\276\204P\337\275\367:+\277\357\357%?`+\212<\010,\212\2765PG?\030|\321>\206+&?\272*T?:\345\335?\323\177\264?x\273\037\277\026\007\032\277\374\031\337\277:\262\022\300\334\363\237\277D\204\357\277`\274Y\277\224\313\024\277\246\230\204\276\000\301\244\272WiD\277\320\235\335\277<\003\214\2772\200\204\277\256\210\233\276\352\356\354>\031)8?F\225W?\002_\232?\350\t\032?\000(Q\272\377\317\r?\362Z\343>\2714H?\230\234\035\300\340\031\007\300\214\214\261\277\375\203\004\300\377s\277\277\302CA\277\034\307}\277\257\354\323\276o\252\240\276co+\277\3243\222\275\370\013\304>\022\2279?\365\251B\277\363\362\256\276\006\331\036?\312\213\223?g\356\004@@\220\242?^\307\005@\215\376\022@P!\363?\230A$@g\240Z@Y\"\017?\037\263\243?\310\320s?\3421\312?8\024\271?\210o\236?r\331\003\277k\333\300\277@\343\256<\0010\350\276O\322\275\276\026/\233\276\242h\356\276\242)\002\300\226\225\364\277\3260\036\300$\t\377\277\273\334\254\277\"\354\205\277Q\316m\277h!J\276\304\030\014?\246\205\323?B}_?,K\312\277\360\371\257\275\272E\276\277-\2530\300\364|\344\277\'\r\313\277x\243m\277J\315\255\277\026>g\277T\215\240\276\230\257\304\275\347[8\277\006\250\262\2777\336\031\277KH\205\277\273U;\277\206\333\252\277\226\205\353\276\340\340G\277\350\005\032\300\332\236\357\277\t\246\006\300lJ/\300\303Vc\300R\217)\277$\031w>\216T\000\277\277^\363\276`T2\274:\274\231\276HJ?\276X\330v\276f\325=\277.\317\273\2760\233\033\277\342\220\223\277>\013\316\277\277{\212\277\204\002\020>d\376?>\277^\253\276m;\264\277\025\261\247\277\227\365?\277\224b\001\276\277F\035?\340:\261>9\256\224\276L\212\200>\020\312\331\276\300\323\023>T\016;=\364D\216=\333\032G>\227\'\222=\002\\F?\234\210.>!nL\277i\245\204\277\3235\223\277O\352\236\277\205\204\213\277\241K\177\277\337\253|\277\000\023I\277\003\213\217\276B\232T\277\377\207\222\277\204\312\036\276\031#\265=E#\376>\334\200\'?D\206\352\275qat\277 \367\r\276\235\227g\277\\\302\201>\032\235\304>\340Hm\2753\356\250\276n[\266>\"\020\004>\226\363t>\200\251\345=\032\230[?\255]\243?pC\036\276\300\222\n\273zVI\275\376[\300\276\\\212\231>\r\322~\277A\247\231\277\210\304\254\275/h\262\277 9)\277$\233=>\265|\020>\320\366\266?\354B\312?\260X\275?R\370\271?\366\025\361?|\356\344?~\266\272?\327V}?fW\027@\300PU@\231\242\202@\244\262a@R\"?@P\240\335?[<\014@\211\272\324?IJ\342?\271\320-@.\312\366?\246\'\024@\177r\014@p\203\t@\350\317\032?lc\257>\262qe?\033\321\226?E\362\251?\006\351{?\365v6?h\352\231?f\216\262?)h\002@\301:^?\034\346\257?\270\005^?\000\300\266\275\027\377\245\277d\017\341\276\n\322\222\277\003a\207\277\006\036\251\276(\002v>$\273D?\212?\364>\006\330m?Gz\"?\300\234\263>\211Qs\277\350\010b\276[87\276\360\375\222\277\000\020\225;K\360\036? \263D?\177T-?\320G\216\2770\311S\275\377\205[\276\250\211\245>\214\241\022?\016\3742>>\014\345\276\352\342\220\277\377\351\003\277D\337\363\277r\231>\277E\333\315\277j\027\224\277X\365O\277\223Q\033\277A\265\230\2759\034\265?\254\016\006@Z\366\222?nS\265?}\263\223?h:p\276\004\312f>\354\340\013\275\226YH\277cj\207\277 \273\253=Z\333\225\277<\355\224\277\333\317x\277\000\254\366\274\327\177S\277N*\303>\365F\220\277\262\373\320\277r\355\002\277\247\024R?F\343\232?\277\016\027?[\035\016\277\020K\255\277&\352\200\277(K\333\276\207\367\023\277\270\311\201?hX\204? n\305>(\345\247>\334|6?\200\215\233\274}\000+\277$\2026>t\000\245\275\013\2746\277\2447\005\277\257\r\263>\010\206\221?\250\t*?lT0>\221*b?lWP?$?\277?Gi\222?\252\213\024?X\317\274>\032\351Z\276\372;\034>T\001\224\275BC\277\276\260\016\377\276\004\037Y\276\355\000\254>\n/U?`\036;\276n~\006?i8\213?\016\261\t?\014rr?}\2376?P\363l?&\034\035?\331\370\212?\347\377Y?0U\347>\035\247\226?\334\215 >M\010\202?hm\'?\360\033?\277 \316<\277h\201\251>\"\304\243?H\217\233\276V\206\004\277 d\016\277\310\207r\277\033YC\277\272>a\277\214\022.\276\033^\365\276\366\274\254\277\324\316\202\277ZW\254\277\262\267*\300\250@\243\277\232W\323\277f\t7\300E\221\000\3004\343\260\276\347\267g\276\006\235(\276\312\004{>\2501\321\275\025\006\221\277D\021;\277\330\274\\\277V\"\216\277\230E\214\277\324\312\177\277\030\254\332\277\022\345y\277\223\003\001\300\273\211\263\277~\365\373\276\2256k\277^\315\321>\365\300\301\276\252\033Q\277\356-?\277(\004\263>\025\341\220\276\000\257\332<\365\246\213>\336\350\231\276\322\005\364\276\341f\216\277\341\246{\277IY\233\277\227\327\\\277\3046\221\276\312\353\335\275\311\t\n\277\355\022\247\277B\000\034\300\n\213\266\2776\356\260\277\222\246\306\277`\207\304\276t\300%\277\360&\315\277\270\231\325\277\005}:\300\216\260x\300\356\270\351\277\302\370~\277\232/%\277\321\034\022?.\211N?\365\032\341>\024R\360\276\\0\315\277\030\323\230\276\316>\341>-6\227?tJ??4\2541?\200\367\267>\247\307\362>\241\006\302>\246\227B? \207\352\274\023\326\361>\036\nZ\277Ph\030\277\217\360%?\022\025\212>\360\236\306>\240\312\310\274\2222\333=\030.\226\276\246\224\260>\346\314K\277\316\264]\277\213F\245\276u\332\277>\322\335O?\260\302\345?\n\305r?\203/\003\277\205\016\301\277\360\233\220\275\355\3573\277\234\177\376\275\246T\005\277\240\336\237<N\222*\277\210\001L>[\222\023?#\205\305>W\262\016?\375\210\261?\302%\255?\324\203\350>\3114\247?\3316y?R\333\245?\314^{?\'\341\344\276\222\312!\277&y\251\277\265\365\212\277\333%\237\277,\365\006\277\370\201\242\275\337\214\004\2760;\361=\263\306\246\276^6\225?h91>p\234\036?\026C\271>(\324\316?\336\237\210?\013\200\203?\202/\312?\331.\376?j5\260?\357\370\334?\250f\020>\021h\346=\316\347S>p\270\221>d\211\230>\234\210)\277/7\341\276\302\202\205\277&0\204\277\365v\224\277\216Y\311\276\270w\230\277\177XJ\277\026(\000?\337\006\r\300X\037R\277\244\022\000\300&\210\\\300-\307X\300\367<P\300r\235\346\277W\213>\277xA\245\2758\371\235=\317\325\010?\244 \333\277\212P\371\277W\020)\277\335\002\260\277\360~*\277lq$\276~&&\277\300\362\306<{\236<\277\353`\245\277\001\021\225\277G\265\311\277\343\r\312\277\231\342\241\277R\215\252\277}\\\245\277}\010\321\277\026\030\330\276y\277\255\276\200\332m\277h\013\261\275\n\350\212\277\266\\\312\277OO\267\277\234s\351\277\246\346!\277\317\236V?R*}?\356L\263?\n\252R?\330\350\221?\006k\341>i\247#>\374\216\246?(\1776?\232\311\017?\250tY\275\361\371\263\276\224\013\001\277b\375\246\277\037\253\217\277#\260E\277\215\354\026\277og\022\277`\263\275=I\305\205\277\\!\233\277h(1\276Gv;\276f\321.?\026vy? \355,?n\255\020?N\210\300?N\\\314?i\350n?X\351\302?K\214p?\340\215\206?\020\323\235?\031&&\277\244\274\250>\235\224\013?\314\223\257?\010\024L?\3647\317\276\354\332\372=\250\216\335>\0074\261>\357\024\233\276\252\3172\276Xg\372>\271\003\215>0\225\212\2768\311\362?\241^3@\006\030>@UF\010@\3070\272?\226\3639?UD\354>bt\225?z\345f?e-\026?\224\302n\276.s+>\313\237\222?\200\315\213\274kR\375\275\303\223\003\277nON>Y\265\232?\356\243\004@\370\2200@\272R\035@\270v\014@\320>\241=\244\013\310?\3669\004\276\343o\247\276\344\203N\275\3244\305>\235\273\333\276\274\022\225?\315\367\332?\252\337\016@\227\221\005@\n\350\256?\237=c?\236\036h?E\320\277>np\275?r\341\\?\021.\t\277^\024\034\2768AB\275\\|1\275!Rk=\343\211\307?\024\337\002@(E\204?b\346\237>\300\365\315>\244\312\305\277\304\025G\277\311\254\014?bVW\277\330\205!\277\276H\206\276\372\373L\276\300\001\366<\345\345A\277\016\236\270\276\204k\353\275\'F\216\276\340\002#\277\035G\223\277~\235\312\277\211&\022\277\244\356[\276\356P\037\277\232Q\000\3006\222\336\277\310\352\273\277\257\022\253\277h\002\267>\303\235\374>&\315{>\226\2172?\220\323w\276\n\033V>\207]\204?\002\370\'?H\020\035\276\256\0338\277\256h\376\276\025\020\177\277\220\201\017\276L\272\320\276\320I\"\277z\207\315\276\242N\360\276\344\233\266\275\376\356\244?\262\207\254?\350\212\307?p\366]?\261\002\001?\255\374\306?&\205\307?cn\037\277\365\\\364>l\316\357>X\036\356\275\2310\322\275\014G\277<\013U\270?-0_?\344\030j?\2208/\275\274\016\003\277\215}\347>\030\037\230\275\240A\024?\227*x>NUp\277 \037\010\300i\016\272\277\304\374\301\276\340\301\024=]_\335\276\302:,\277j\200\276>\360\361\031=\346(:@\261S\356?\344\026\036@pN\010@z\227\371?R*\226?NG\365?\233,p?\336\225\317>\024\363{? \375\223\274^\232\375\276o\253\032\277\314\333i\277\360\305d\276\320lO\277T;\224?\277E\335?\202u2@\262\020/@\240\232\r@\n\346\373?9\343\363?y\246\354?z\222w?\266p\320>\306\224\361>l5=?@\030\250<]\220\251>\300#9\277\317\007$\277\034\211t>\300U\t\277\220\312\007?V\231<?\274\350\303\276\230\250D?W\251\202?+\177\030?\236\tj?\266\373\314>Z%#?)\312\254?\'\260\241?h\203\264?\301\203\000?)1\311?\240\357\362<r\263k\276n\340\362\276\026\2436\277vU\227\277\317\2705\277,\336j\277{\226E\277F\201\337\276&\363\263\277`\253\006\300\000\363\017\277\332\316\256>\210KT?\356\027\325>\310A\234?\225\"\244?\350\222\026>0\205\023?\244@]\277\372O?\277\370\270\242\275\304\327a=\336}\021?\2352\342>:\"N?\314\216\236\276\265\274\242\277\262/m\277\025[\321\276\251\276\315>Lx\340=\252\333\217?\333WK?\343\371\260>C-\221>+\363e?)+k?F\377\214?\334k\253\276d\037\020\277X\300\275\276\274Kq\277\021\366\213\277\303\031\355\277\336k\020\300\362\271\205\277w\247\036\277\377P\016\276@>t\2761\351\034\277v\306\305\277\241\360\311\277N\351?\277\310\\\330\276\372j\360\2765w\003\300h\023 \300z\365\353\277\220}\004\276\262\030\r\277\326\335\202\276\273[\317\276\236\t\006?30\201?;\021\344?\306\336\245?\336tH?\000\203K\275g,\243\276\364)\\?P\312\027?*Q\323\276\260\377\237=lX\003?L\024\323\275\344\226\202\276r\025\250\277~\252F\277\322\005`\277\216\361\032\300f\371k\277|+\023\300\370g\261\277\226\262\363\276\246\255\002>\340\363\323?\2000\"?\225\3576?\304c\270?\240\266\214>\230\255\010\277\020\246\212=u\026\215?>\017\016@\303\017\343?\301\361\035?\261\363\013\277\211U\232>\220H\217=(\345Y?J$\330\276\270\272\223\276\216\315\265=!2\206?\000\207\344;@\\\211?D\027\201?\324N&?^\263\217?\360Y\022?\266\307F?\025n\317?l\003\004?\342\376\232>\360S\312?@s\276?:&\276?D\322\342\276{\273\256>\250\270\r>\213~\215?\372\371\237?1\007\270?G\226\277?\307\031\237?\350\023\217?\263\307\245?\301\236]?\240s\222\275\022\322n\276\3227\363\276\242<\335\277\202\271f\277h\205\256=\267\365\213>\010P%\277_\205\t?\034\273\207\277l\035D\277P\263\374\275\313\201B\277\211\t\024\277\235X\371\276\304q\361\277\035\375`\277\225K\003\300\002&k\277fh[\277l\330\250\276\036\357\225\277-j\n\300\002\005\034\300$\232\000\3004\230\346\277C\315A\277\020Sw=\274\222\202?4\236Z>\234yq\277\000eB;\232\376Z?g\033\030?\302vX?\370H\376?\340\250F>\322\177\010\276\205\256\300\276\330\356\304\277`\204Y\276\360T\217?\263U\326>\242)\\?\372&\353>\213\374\270>\204\0321\276\255\301\036?\321\350/?h\264\305\2764^\327\276\240\311\314<p\260\343>\264\357\371>X\351\"?\330\376\247?\232\216\350?QQ\364?\220\365B?\313\007d\277\210\234\257\275\224\263\241\276\"\251K?*f\354\275\\\231\240=\224yT\276.\334(\276\227\3002\276/W\215\2770$\017>\320KV\277\250\023]\277\276\013\331\2778\026\265\277\227\330\216\277z\345\213\277\264\362\337\277T\254\232\277j\213E\277\340\0201?\234U\275?\004u6?bwd?t\007^\276\262dF?(3\231?\331oF?\332\303\375?\360\202\265?\326\334\375?\016\222\371?\022\305\231?YC\202?\310\201S\276C\346\222\276c\2647\277\247E\325\277\342\232\356\277\3533\237\277D\362q\276\364D\357>H\212??\200\203Z?\000Y\t\274\342\000\320=\263S\256\275\344y\304\276\332\322\014\300\t\'\376\277\265(\204\2770\316\266\275N\254\007\300@\366b=QU\204?\255&\235?\250\305\304>\034Z\002\277\356\354\200\277d:\272\276\216-5\277\216\006\345\277$7\361\2773\270\302\277\366\235W\277N<\262\277i!\233\277\n\350\311>\031a\365\276\014\242\243\277j\250\026\300,\266\204\277\264\375\251\277\324\223\351\277I\323q\277\020$\336\276\326f\037?\306\334D>\307{&?\274\005i?\2575j?\330\200\035@\306O\005@\024\362\375?\007r\273?nW\245?\312\004\324?\326\364\337? \353\320=\275\305\331>\336\373D?7\316\004\277P\202\252<\356\206\024?7\346\002?$\324\204\277\364<W\276\364\017\337\276x\234\266\277S\032\357\277\207i\361\277\364\3134\277\310i\364>\354\247E?OV\336?7$_?\222\377\263?\300\2157>\006\267|>\276sM> \267\251<\224\276\345>\274\300&\276\034VH=V\374\254=lU\035\277}b\034\277_\t~\276\277\212\n>&\t\246=\200\343\237=\007y0\277\330\261M\276e\234)>\211\376Z\2776\032\373>\035\305\220>`?\264\277\365\317\345\277\326\177\202\277PIo\277\305\213\025\300\343?\332\277F\373\300\277\027$!\277\226$\332\276^\244\303\2770\334G\277w\230\304\276#g\204\277\340\256S\276(\347\004?\010{\230\275b<`\2774\222@\277F5\243\277\361S~\2776\020\r\277\250\245\222\275\302\022\312\276\335n\325\276p\201\247\276\004\017\"?\376\262\255?\255\225\300?i@\367?\000WN?\357\331\203?F\354:?\242\330\263>\351\262^>\270\002\207\276hG\251\275\344\330\212?\006\250\266?\306[H?f7\370?\326q\213?\321:\253?\336\013H?6\"\300?\232\267??\371\335V?\360\273\010@\010g\310?\225w(?\266\260\220>\273\332@?\004\r\336\276\362\315s>\026p\023?\002m\355>$\033*?\375\230r\277\023\216f\277\2639H\277\3566[\277\2325\270\277\226\222\007\277P)\337\274zZ>?\320\2454\275K\2719>N\234W\276\260\207!\275\313\315%?Bl\326\277%\224\246\277#+\232\277\371L\022\277@\344\221\273\220\361\'?\300\341}\276d\223\207\277/<\r?^\344n\276\022>\002\276~\330D\2765u\016?]\271\327>8\376\006=`P\016>\2400\213?\032\005\335?\337`\014@\304\375\235?\\\205\243?\256\025\216?\300+l?\300\201\304?V\346\212\276\036\265\262>L\375\031?\"v.>*\243\301?\307C\004?\252bA\277\022\367\315\2772\263\275\277T\377\362\277?{\213\277\213I)\277\360\247\031\275\243\306u?p\340\271=,lz\277|\216#\277&\"U\276\235\013\354\276$\2267\277\360r\346=\306\375\244?\324\274\021>\020\217D\276\257\332\031@\352\r\263?\356]\231>\372B\241=t\335m\277\370\357\361\277\346\335<\277\"\031\206\277\216\252\\\277\271\273\251\276)6\235\277\n,\331\277\357\377D\277d\335\361\275\324J\233\275\n\177\235?l\001\'\276\372\325\200\277\tK/\300i\247\362\277\311\255\253\277\335:>\300\372\'\264\277F\237\215\277\000\277\356;%x\207?]\377\033\2770m\222\276\006\342\376=u\006\276\277\016\306\236\276\364\337\200\276#\215\263\277\216\221\333\277\001z\272\277y\236H\277\326Az\276p\366\006\276\020*`?\240(M\275`\251h?\212\002\236?\336\216\344?X\340\026@\"\306\240?\264\006V>\272\334\336\276\260\377V\277\016\263\013\277\021\244\367\277\010\003-\300\370|\325\277\230Ww\277Z\260\031\300>\227\022\300*\244\277\277@\264a\275Z\311=\277\344\031\n>\353\270N\276\200\272\203\277\377\007\360\276\312\214\272\277iy\216\277S\327^\277\346\307=\277}BL\277/\246\364\277\343\303\002\300\007\205\330\277\002\254<\277%\201\261\276\236\266s>\006\227\331=&\'\205?\370\342\265=>~@>\244j#?\354\237\236?\344\006\301>\300|?<K\252\266\276\336I\330\275\"hi\276\217\346\222?L9\251>\272;\271?*+\221?\342\325\305>\225T\327?\224\005_?f-\277?\010;\215?L\216\343?\366\267\027?dL\264\276\261\202\262>\032l\305>FI)\276\225\367\004\276\233\002\210\277S\355\003?\033\226_>\224\366\207=\241\027\231?\252\215B@\233\236\027@\202P\341?:\257\315?\245\210\322?\226\353\330?\200\010\320?\335\032\327?\230u\005@eG\"@L!B?\357\270\r\277^\225?\277V\270 \277*?6\277r\023\006@l\036\340?>\030\025@\327\305\031@O}\010@\360\301\353>\330\005\244\277T\276U\276#\211\000\277>r\377>\023\026\236?\366V\212>\242og\276\304:\256>B\2535\277\000\264\327\276$\017\340=0@L?D/\303?`;\357\276\220o\202\276\020/\263=\304\212\263\276\353]\264\277^6$\300\324\222\223\277\244J\236\277p\322\321\275HLC\277\266\356]\277t\365\004\3006o*\300\005#\346\277o\265l\277\237\274\222\276|P!\276<\204\265>\'S#@E\271\036@\311\3530@q \013@\270\355\246?\274\276\361\276\306[\204\277\377Q\235\277\324/\266\277\372,\014\300(\310\371\277`\343_\277!\332\256\277\260Q\306\277[#=\277\373\022\224\277\342M\300\276\314\331\314\276\362W\201>\205\211,\277\254\223\364\277\301\250\211\277\330\264Y\277\030\215\320\275w\211\265\277a\346\226\277\307D|\277\220i\204=\352\314>\275\331J\324>\016\n:\277\216{\'\277W7\002\277b\273\216\277 \271\215=K\017q?\217\304\343>\204%\312>\0209\020=\303c\273?\240\027\261?\326_\264>\314l\253=kI9\277\2005\230>\362\273\024>\035]\255\276\rq5\277\n\246#\2763\332!?\320<\271<\342\3336\2740\300}\277\372\223\214\276J\322\203\277\367\346\256\277\252\013\037\277\220q\033\300\025\311\333\277\326\022f\277\306\352\n\277(ta?r\351\366?\277\252e?D\213\225\276@l\344\276\344\262\202\277p\2036\275\241\376\317\275`\225\326>(\274\030?\010\257\276\276x\244\364\275\325\367_\277\254\217\227\277\004\357\263\277\363\317\006\277\006\227\263\276[\3672\277\005\376\032\300\254\345V\277F\251\355\2777K\356\277H\221\321\277\242\203%\300\377\321\266\277p\212\212\277\"j%\300\002\003*\2779\265k\277\374va\277j\265n\277\223\213\023\277.\272\272\277\303\317\203\277\n\227\344\277`\203\336\277>.\310\276\311\212\255>?\340@\277\376$\023\277\3264\222\276\005&\001>`\310\304\277=V\332\277\222\267\241\277\270\202n\2764\232\305?\0109\310?\211\337\020@ S\305?\310\236&\276Z\244+\2765\314.\276.\265\375\276\322F\024\277\210L\275\277y\027a\2777\032\273\277\003\355\225\277(\007\232\277x\324\372\277\213*\003\300y[\320\277 /\317\275\t\377\370\276\200x\244\275\221\273\250\277\274\340\373\276Ug\235>\230i\024?\310\373\004\3008\325\277\277\t\264\007\300]\246\334\277\203\260\002\277\254\343\276\277\022\200\025\300\362b\240\277\3402\006\277&Y_\277\214O\330\277&\373]\277\216\341\236\277\225N\225\277`\246\027\277\006y\217\277\273@^\277\363\200\267\277$\323\225\276\363.\351>\243zf>1\rN?\002f\377\276\230\302(\275\340(\034? \243\201\275\271D_?\354YY?hy\213?L\363\224?\031\316m?\240#\365?:\223\314?$`-?\004\267\363>\373+f?D\205\235?0\2233\2756\267\033?\375\024\237\276\242\325\310>\"\260\030?\324\275\377>\270T\230=\364\256\032?\351\035\311\276\245\254\342>\361\261\342?`\276\003=)\357\204\2770#\250\277\034\327\225\276.\036\255>DZ)\277O\347\327\276\274#\215>\205d\032?\350\270 ?\245\000\032?n\247\357>\204\220\025?\332\034f\277\313\023L\277\315\022#\3007*3\300v\343\211\277\0279\213\277\366\324\330>ix\305>*\316\227\276\362\212\330>\014\212\353>[\"\262\277B\253\241\277\202\343Y\277\330n\207\275\320\004\203\277\034\306l\276\270zu>\353\357\210?\000\247u?\320\037o>\027&\335=|H\215=\\\212\335>\030\201k=\332^-\276\365D\201?\366P\270?\344\361\272?\274`\245\276\256\342P\277\007\306d\277\246\277\317\277^\266\310\277`\316\244\275\010Y\004\300\030\026\276\277v8\244\277\345oU\277\006\001\275\276x\240\026\277i\232\034\277\034\275\336\276\316\377!\277\250\242U\277\237C\022\277\216i\242\277<\200\003\300~\326\301\277\262\0042\300O\206\220\277\366\314\'\277Fg\345\277\312p\007\277Pb)\277\311\024(\277`,\365\275\374y\206\277\347_\226\277\0165\240=\r%_\276\374\277*=\235\320\357>\364\243\256=\336U\205?\306+\035@\306H\025@\357\235\031@\2658\344?\240\376\250\275\256\3538\277Db\037>\200\346\351>+l\352\276\3545\360>\200%\211\275\030,\332\275\257\177\200\277\257#\220\277\232K\210\277\274C\276\277^\202\262\277\005.\213\277@A\"\276Q\201-\277\345L\236\277{\273\224\277!\033\222\277\204w\251>\262N9\276\214\212|\275L\353\331?\022\274\271?/\266\255?\306|\216?B\000\312?\202\213g?\251\3236?\0301\014?\361g\016@\311P\300?\360.\006?\215\235\021?\233J6?p\355\202?\252& ?\0270G?m\274\233?\347/^?D\270\354\276\322\205N?\256\244\207?wC\264>v\272\243?[CO?\277-\271?\034y\234?e.\216?3\230\234?np\244\2767W\350\277\347\277\352\277X\263\326\277\256\302\355\277OO\333\277V\304\375\277\200\270\206\274\245\200<>\236\242 ?\030\262\216=\202.\236\275!\200y?\315\203<?\232\323F?T\250J?\272!\351?\034\317\363?\306\003\314?\274\317A?\205;\211>jv\211=8\324/\276\206r\236\276\304\277p\277\010\300=\277\261zN\277\360\376\240\275\352\325I=\361\322 >\211\204\035?\317:\030?4\305M>\365\255w\277\263\372D\277\222\203\232\277\014\212\225\276\213\203\004\277<\"\227? r\323?\245\215\237?\254\242\272?\207\304~?\256\333\324?UQ\211?\231nG?Q)\201?2H\330?\014\340\207?\'.\372?\031\357\252?\230\025\230?\346\276b?\255\2641?\226\377,>\366\301\202?,Re\276Ds5?`z\332\274\334f\000\277Ug??\220\223\311?x_\316?\023\321\327?\317\330y?\3547\226\276(E\'\277\024\354X\277<\266\227\277\215\365\263\2773m\212\277\376.\251\277\276\033\004\300\336\244`\2776r_\277\340\255\252\274\226%t\276\r\207#\276\344,\300?\004\214\231?\"\346\233>\356\266\334\275\2669l\276\346\n;\2775\316\210?e \344?\333\226&?T\237$\276\376\020y\277\300&\242\275S\016\023\277\327%q\277\010D\271\276\251[\230\276\253\374\t\277\270KS>;?-\277\252T\317\276\200\331\270\277\016\202\304\277\206\232N\277\335\230Q?\330\327\242?,\366\210?\336\016u?\305\023\030@\213\242\267?&o\021@ \373\246<\034Q\000\277\010\000\320\2766a\352\275\034\305\000?\2041\273=\353$o\277S~\334\276\367\321\006\276E?\243\2762\345s>\351k\241>\240\254`?\201\022-?\000\235\027\273\374I\200\276\353\331P>\274\300\232>\025\302\035?zc\261>\253\336\200?9\374\323>\201[2?|\326\227\276g\020\345?\324p\025?\030\223X\275\372\247=\277\333\2422?&\241^?lA\r\276\205\277>\276\257\177\246?\360\003\027?p\354\246\274\254\321&?\377\301A?\210\321\n\276\227C\023\277\3513\341\277:\261\250\277>\231\240\277\363\213f\277r\024\000?c\016H?\340\353\231?\243K-?\372f\360\276\304 t\276NE#\277\034D1\277\204E<>\204k\017?@*\334\273*m\233\277>\335\225\277d(\014\300bD\037\300\036*\267\277\027d\032\300\374M\355\277\212\001\003\300\276\266\371\277I\272\376\2776\344\314\277\023z\221\277\360=\003\276\310p\202>\213?\273=\315\373\375>4V\221?\343@\232?\224\224\301\276\364\316\010\277\330\255\r?\354u\235?\000(\336<\375\367r?\326\344|?\320\377J?\026\321\013?\314\272\307>\272\024^>\217p>\277p\344\260>\025\020\303\2760\211\377\276t\006R?B\327\366>`\014\006=a\252\242>q\221\364>\023\243\002\277/q\301\277@\220\263\277\216\263\355\277\215\\\020\277\002\361\020\277\240n\007?\340+S\275\210\030\337=L\222v>\275\330j>0\013V?X\277\257>r\te\277\271?\222\277\225\003\177\277@%\301\277\"\357\226\277\252\367>\277\246\215p\277\261\230\342\277\305\254#\300\313\336)\300\275\235D\300x}\035\300\310)\000\300\231\326\t\300\327\373\212\277@\033w>\256\370\370>\322%o?\032\375\343>\177Pf>Dyp=\'Q\035\277\233\225\326>\221h\232>j\342\255>\331\031\344>\002\217\246?\377\241\320?8\274\030@8\022\201?\352\r\215?MH\002\277|Z\n\277\002\r*?\003\206\220?1+U?w\216\362?\327P=?n\014Y>\213/\372\276\303\210\375>\253&\004?\036!\357?\220*\306=\017\313\337>\014\335\321?>\264O@\016M)@\326\251\304?\356G\276?\023\034\202?\331\003\357>H\2550\277\240.3\275/\257P\276\272\030f>\235\243\005\277N\324^?\210id>FS\322\275\013\004\251?\356\357\320>\264u@?\020\351\251\277\214B\312\277\332C\266\277\255\261\222\277\206\222&\277-\242\212\276b\001\241\276\315\006\271\277\244\031\257\277\206\311\316\277\340l%>\234@\002?c\354\317?H\013\357?D\263\227?\217\004\000@`!2@\342\361M@//\360?JA\033@\376k\313?\301\177\263?~\256\002?X\002\260=\332\025\346>\341\245\226\277\271\003\237\2771 \262\277\202\006\235\277\232\347M\277\322\253\251\277\200\247%<%\004\322\276$\277\316=\030\3322>\220\360\201?\233\010b?\261?8\277\314\221\\\276/+4\277\202>P\277\334Y\204\277@\223\276\277\225\t\202\277\262\233K\277e\016G\277j\023\014\277A\220\273\277\246[\334\277\340\241;\277/\372\337\277\245G\n\277\376\350\274\276\302\006H?\252\373j?\375\220\376>\336V\036\277\316{\276\277<\323j\277\342D\344\277\364\330\024\300+\273\001\300\372\271\266\277))\375\277E\020\255\277\326\205\305\277\227\2314\277\304\367@\277\335\221\322\277\003\271\004\300K\027\346\277\"9x\277l\002a? \025\336<!\\Y\2772x\246\277\250B#\276\026\234\344?\010V\027@\321=\333?\\JX@\232\244\373?\371\232\374?\037\014|?\350\356\216?\260b\216?@\256\016\276c \205\276LF\213>mD\"\277R|\307\277[<\266\277\275\177^\277\014\206^>\0300\341\276\312\216\037\277@\216\217<\321\220\033?\364\037*\277H\004\030\277\365P\307\276\364\211B\276\357XV\277n\362i\277\375J\356\277\255\204\202\277\010\203v\2773\007\371\276\254\005\227\277\234LY\277\002\371\234\277^6\217\276H\244\200>B\216g?\270\274)\276\034[\212=\024\241B<b\014\270?\035\300\026?\366;\223?u\225(?\222\360\251\277z\260\365\277\300\034\026\277qB\373\276h[&\277\235?\"?W{\366??\216!?@>X=\014?\257\276n\307\204>\310\204\317>2\332\340>\326\302\355>\242\335\027?\340\274\037>\032\276\255>q\2760? r\023\276dB\327\276\261\306\312\276\000\032\026>1\234\005?\"%\242\277\\A\270\277HCG>R}y?\0019K?\240t\204>\311\342Q>\032\372\306\276>dY\277h!J\277(\025\272\277\257B\022\277\325\252\234\277\202\\\210>\026n\034>\014\267\035?\306\300\023\276F\260\201>\2405D\274]\263*\277\374d\235\277\334@t>\344.\217?\322\214\373>\314\237\300\276W\2648\277V\257\030\277\262\245\330\276\270\333C\277\244-&\276@\360\317>\004_m\277\247\224\252\276>\350\321\276g\223\211\276v\360\324\276\376\270\355>X#\243\275\367]\242\2753{$\277\200P\327\277\026\305\341\277\257L=\277\205TV\277C\035\031\277\307\227p\276$\'9\277\374\014Z\277\222\033]\277Q\324.\277\"\367\243\276\340\016\211\277\002\022J\277\346Y[\276lf*\277z8\214?\300\303\307?\311\273\306?VV\244>+C\215?\356\220R?b\327\227?\323`??\200w\307>{\262\020? \300Z?\230\203\307=WX\034?\376\226t?\230M\337=\326\354\346\276|\304\210?jx\337\277\254\322\t\277\2406u\275Z\311C\277\221\373\037\277\244v\007?\3574\353>l\270\270>=\316#?\340\337\321?\202J\252?\257L\220?\030b<>MFT?`\332\260?\324\016\035?\300\2409\277d?\031?g\025\\?x\367\224\276j\200#>\322\207H\277\312\370\304\277\320l\300\277\340\253P? \301\333\274\033\021\246?6\370\367>\244N\322\275O\314\026\300\353\231&\300\310P)\300\001\364\357\277\006J\324\277\242{<\277\232\r\204\277\303\303\270\277M\375\020\277\240\300i\277\350\366\036\2767\343\027\2761\255\362\276k3\235\277\004\000\031\277mk\260>oW\r\277\013\322\244>lf\243\276h\207\267\277\210Nx\277\000\277c?:\253\244?\377\344\001@\213\031\212?\277dA\277,wB\277\340\360\027\277\236u\236\277\222\323\231>\'n@?\272\225\204?;\216\341?n*\205?0J\n?Y.\354>\334NL\277\356lx\276u\202\031?\372\203\333>\201\223\320>\342\372\244?\323R\316?c\232\021\277\367a\307\276\373\202\212\276\322\357\007\276\275\264s\277\323\223m\277s-J\277\022\262\227\2764\002M\277\004\020.\277\366\037\215?;;\236?\n(\177?\250\261\177>\200\240\361\276B\t\335\276ffX\276\212\270\241\276\236\2016?\345\363\203?\353\033]?\326\237}?\256g\014?<\365\243>\340\340\034<Qt}\276\241-Q?\216\271\300?\336\342\255?\264I\327?\320/Q>3dF\277\320f5\275.f\212\275\357\341\333>\022\026\003?\216\350\344>\360\020\006\277\"l\221\276\231\2761\300\001Q8\300A\217.\300\302\0164\300f\300\020\300_\376\303\277\017\265\000\300\036\0104\300\250\357\026\277$\267\336>L\304\207?4\220l\276\177\365\275?\232\024;?\234\214V?pL\302\275\261\t\205\277t\225\356\276\244\274\265\277\327\302\276\277\377\370\320\277\360o\211\276\342x\247\275\225\354T?\366w\000@\243\365U?\323\264\024?Sb\221?\003H\002?z\225F?:\200}?\360:\270?\200\376~?p\254\215\275\340J\236\2773\025\217\277\010\205\327\276\000\317<?0Z1=\270\032\315\276{\000\225\277V\357\370\277\022<g\277\332\352P\2778\264\266\275\265\246\323\276\226\341\010\300\370\223y\277?OF\277\240;\204\277@\254S\277M\211\323\277 E\302\275\004\263\216\276k\216\227?\\5\340>so\252?\24444\276Cmg\277\356\245\216\276r\002\267\276\320\306\342\276\201\330;?\264\202\233?\244\366\210?@\275>\276a\227Q>y\363\375>t\232\363=\2244S?e\270\254?\262u\245?\217p\253?\216\025`?\313U\220?(=\250\275\315\331\034\277\366>\350\277K\270*\277e\254)?2\303\342?%\356\023?(\2255\277\250\356\341=0g]?\013\0245?\366\256\216?:\226c?\271\213\225\277\317\306\017\300\233K\026\300\326r\307\277p\026K>\362\206\017?\260\334\236\274\r\363r\277\022\312\234>\242d[?\310)\345=@0\231\277\314x\264\276\2500u\2776\026Y\277\250z\334\27612b\277\262\334\270\277\242\034\304\277\266k\230\276^\257\001?b\311/?4\030\221\276\0327\272\276\034\341\337\276d!N\27726h\277v\353\223\276=6\245\277F\3664\277\374\201\217\277\312\314t\277\374v\224\277g\302\214\277|u5\27783\246\277,*\344\277\242\206\006\300\215\010\302\277\254%\217\277nh\000\277l\341\306>6\325\343=\356\023\177?\273\313\337?\250j\020@\340\2068@\016\010\010@ 1\020@\250\326\326?\332\371\000?R\261\301\276\266\373\222\277zs\003\300\277\207(\300\014\206\035\300r\223\004\300\206\275\343\2776m\204\277 \024\312\277V\365\373\277\345\303\376\277:0\367\277\271\300\250\277\032\255\026\277\276\262\317\277\305B\330\277\276%\325\277\037\035\334\277\327\263\306\277\316.\337\277$]:\300\270V\r\300&\023m\277\261\2312\277\340[\230\277\334\030+>\'\357\n\277\020U\322=\270\035n<<\275H\277\260Vk\275\031\276\031\2772\261\324\276\366\025\177>p\375\342\275\336*\265>[\335Y?`\033\210?\363\217\327?\024\270\217?\207\037\221?\367\177o?N\225\261\276\267\014\007@c\261\203?z\355_?p\326\001>\310\031\253<\362\t\010\2757\034N>\023\316N\277\350x\335=4l+\277\2363\317>a>\241?\250K\304?|\251\226>p6\204>>*:\277\210\364\322\277\2761\007\300:^\027\300\030\260\372\275\352\023\255\276j\323x>\316\2111?P\342\207?6\367\240>>\004\217\277G\333\257\277v\324\316\277\373\365\270\277;q\237\277\314\272\032\276\226\202\014@\340z\000@\020\254\241>\322\345`\276\233o\t?6!\277>\032A\200\277\336\242\240\277\351\275F\277\024\210\371\276\n\267\264\2762Z\005?|%\351>\267T\316\276\354\231\030?\241kt?\350Vk?\254\315\211?b@\255?$I\271?\276$8?\005\025\247?\304s\361?\037\001.@\245\340\005@\036\356\375?\325\261\310?~\273\013?=J\271?V^\244?le\310\276\222\025h\277\372\002\216\277`5[\275?\\\245\275R\306d?\234\004\243>\360\271\024>\344\305\357>?\374\277>\376\250|? \257\357\275Q\004\216\276\003\210\004\277\004j\301\277\003\375\210\277 \247\325\277;\363,\277\204\210j\277XzJ\276(\216\001\277\276\2015\277\370\2776\277Y\024\270\277\334\242\326\276\020\306\260\277$kV\277\215\371\307\277L\335\316\277\332\254\216\2771Zw\300I\350X\300\207\177=\300`A=\300\232o\t\300\236t\031\300_e\362\277pbr\276R`.\277@\235\205\275o\016\037\277C\025\210\276\270r\252\276e\353\275\277r\332l\277X@\372\276\020L\024\277\210\370R\276\261E\n?:\3509?\322\260\235>\370\231\265<\237\316\222\276P6\374\274\300\374\247\276(]Z\277\236\356\225\277@\273\r=\371\326\306\276\304\'\303=\237\353\241?4f\236\276\330\237\264\274\016\252o?W\274\001?n\223G\277\300q}=\366]\216\277\200\243x\277\374\032\265\276c\024\225>U\254k\277<]\202\276@\305\207\277\016\216\211\277\205\030\205\277\224\275\261\277\346\016\312\277Z\0061\300^ol\300F\224j\300\233C2\300\246\013\025\300F\373\034\300\204\252Q\300\350tV\300D^>\300\255m\252\277v\232\276\277\306\013\031\300\037\327\331\277\3275\010\300` *\277\364/\342\276\251\"\343\276\244u\321>\200\006x?.y<?\277Y\255>\315@\342\276\231\033\"?\311FI?\357\t\322\276\250\340g\277\264\210\\\276\262\237J?G\351\022\277\032)\243\276lY\263\277P\316\343\275c\314\266>\246\344\334\276\200\342\014;\211R\266;\016?<?\374A\324=\367?\342\276 U\027=\246z\227=:S\231?\244\350Z>\263}3\277N\310\332\2765(\202\276$\265\204\276({4\275\253E\310\276\n.u\277vv\344\277\006_\222\277L\3364\276b\240v\276\2647\317>R\351\'?\307\330\201?\363e{?\215\200\366?\350\372\257>:\177\243=\355\300\202\277\213k\025\300\207\022\r\300>c\374\277\027\365\023\3005$\345\277Kj\272\277\177,\034\300\232\033\262\277\220\253\304\277j\037g\277x\361\240>`\322\"<\306\346\032>\322\222\020?\366\312\274\277\204-\233\277~.\007\300\035q\025\300\251$\351\277__U\277\202\375\004\300\366\243J\300\216\302l\300\323\315\221\300kik\300s\214q\300\242\275#\300\277w\027\300\202\200\235\277.\024\305\276\214_\230=\202w\267\276\032=p\277\260\376\251\277\005`\271\277\332\233\227\2778\'\326\275\313\010\317=8\235\361<\021\325>\277\270\342\027\277l\004\202\277y\365@\277;:\033\277\032G\216\277\3102]\2760\333\025?\324.~\276\364\312\"\277.\013H\277\016,\300\277\211a\234\277\206\222\272\277@\334\226\275\265BJ?\004\037\253\276\t\020\220?g!\223?\0358\000@~\016\340?X\337\370?\3004\351?\260\245\255?\202\274\312?(Z\357?J\200\250?\310x->\231\023Q\276\251\266*\277<\211\371\2753,.\277\316\266\360\277\023\235\341\277\265\265\031\277\366T\235>\254\302\267>r\204}\276&2\314>\000z,=\374\323\336=\014\023\376\276\317\312h\277\326\266<>2\267\331>\206|\260?\226c\r@\272Y_?Z1\256?\370O\303?\214^x?-\020\200?\036\263\360>\265o\354?\377T\334?\023\023\314?\242x\304?UA\252?\250|b>\273^K?@\226Q\274\236\254}?\324r=>\320\316j\276\316\364\215?\315\232\010?\240\353y\276x\026\342?\346\276\343?n\254\320?\357\2507?C\225\233?\374\235a?b\206\327?2\217*?\234g\211?\203\032\337?\245J\027?F\037\264>\034\312\370>]9\323>\302u\036>hgm\276^s\255\276\340n\275\274\250\370\312>\340VA?\tg ?\200\317\357\273o.\230\277\\\341\323\276\213\332\037?\241\273\372>d\331\006\277f\031\240\277m<\322\277\217(\246\27739\024\277\234\375q\277\005\004\237?W4\241?\312\307\304>v\212\313\277\277\016Q\277\326[\350>(\316\225=xqw\274\234M=?\322>\307>\010=e?[j\004\277\370<\246?\034\016\214>bg:\277\024\213D>\310]\203\277\340\220\265\277N\264\004\2770i\223<I;s\277\357\201\023\2776\221\302\277\362\232\261\277\236\204\330\2763\334\350\276\340\240\'\276\226\330\272\276\306\255{\276f\252o\276\304\251\315\277\227X\253\277)T\225\277^,\222>\214\266\234>\343\036,?P\036\027=\233\216\214\276\3719\004\277N\216\027\276\210\263\201?@\024|>\360kn\274E\025\000?\306\006f?\032\206;?\302\006\307\276/\205\227\276\264\027I\276}\223\212?\306\317\205?\326\271\030?\356\026\214>(\342\237?\017\002\215?\366\260\345>\037b\216?:V\020@\016%\326?\324\376\347?\246N(@\331g\010@\355N\332?\321\243\221?y\027\036\277\211\313*\277\320\331\253\277uF\331\277\212\203\362\276\314\031V?\273\363\231?0\222u>\242\017\201\277g\216\372\276\210\361\256?|4g>\261\377\313\276\210\031w=\016\354\004?l\347\334>,@\005\277\330\255>\277\212{\256\277\022[\240\277\324\021\226\2766n\201=\232\004\311\276\222\250\254\276\353\035\t\277\235\263\027\300L\272\325\277G\374\030\300\221\260\272\277\210\303\210\277\351%\007?\300M5=\202k\021\277\2345\332\276\237Q_\277\335\315\260\276\376\375$\277\004!<\2766\336u?\215\335\243?\246?n?\373\324O?\352Y\361?\320$\357?\244\3064@;\2162@\276\267\330?\007\277\264?\032\254\375>\034N\273\275\360\321o\277\272\315\257\277\n\036\212\277\224\322y>@\332\025\277J\026\177\277\337\337\243\277N}\371\277\346w\244\277?]\'\277N\034\351\277\020\202\370=\243\";?dBY?C\311\222>c\215n?\326h\027?\367x\366>\017\234\266?\214.\203?\240\210\304?b\341\003@\222I!?\232\312:?\237\313\256?\242\344\237?\022\322\321?Q\273\001@VN\007@\226L\034@\323\313\275?\230\3578@l\345\356?\335\333\275?N\220~?\246\"\035?\200\266\337=jQR?M\306\033?^\t\304?^u\202?y4h?\"\204\244>\245\225\303?\211\t\273?\")\r?\254y\203\277\260\254\333\2776\255\026\277\340@\007?\207&\310\276\256f\313\276\322\2202>\224\324n?\340\350W=f+\264?TS\336?s\330\021@1\030\262?\010\343\017?W\234\236\277\\\237\207\276*e\310\277Y\310\016\300\372\207O\300;M?\300Vm\203\300 ]l\300\323\264V\300P\2244\300\254\265\336?\177g\003@U\321\323?.4\307?\017\322\212?\300\304\250>(\2674=\210\217\223\277`\216\204=v\243\340\276\210\014\333>\235\377\\?\344\215\226?8q\304?\276\037\300?~\315\202?\314\205C?\330^\300>(\307\311\276g;g\277\214P\004\277\307-U\277v\004#\277\206\341#\2776\212\265\277nn%\277r\263d\277VE-\277\\\"\024>\326\231\006?\004\243\202\276\210\364\322\274\317\032A?\250\264\022>\3102\010\277\033\302F?\030\224\362?y\224\007@\260\313\301?\260\276\002@\354,\006@X\025\207?\333\212x?\266\274\275?b\004\320?\032\2477@W)\027@\375\314\350?\301\375$?\336\017\216?l\031\223?m<\365>e\377\271?,\213\207?Vw8?/\202\255?\262\326\314>\3422\216>\003\354\246?s4\204?\325\r\230?\363\233\211?\230\310\331?\355.\002@\354+\321> E\351>\347tK?\222\343A\277\304\024\374\275\220\2717>Zv\217>E\304\246\276P\3630\277\336\256\223\276K\347\225\277E\024\327\277\270y\257\2766\355`\277tGe\277\254s\207\277\362\206\356\277`t\'\277\204\205k\277\202\326S?\006\267\257?\000\303\026>\374\020\030\276\200\217\000<\371\361q\277n\007\202\277r/\200\2770L\227\276D7E\275 \302y\276$\001\005\275\342\304\252\276\377^$\277\302\375\220\277\241\271\263\277HU\261\277~x\t\300\021\311?\277@\325\204\275\212^\351\277lj\226\277\304\274\222\277\262\r\\\277+\323d\277\244n2\276*\260\025?V8\370>\022NK?`\367\037?\215\311\220\276\217\370\232>0\337\252\277\313\274\206\2776\226\016\277F\005\315\2766\355\225\276$(\354=\230 \217>v.\265\275\270l\256\277\021\337\301\277\357\005\034\277T3J\277\304\311\221?H\366\355?\364\021\003@E\350\207?\327\227\232?\330\341\037@,\321\224?\"\025\250?\334*M?0<\000?\024\263\235=z\227\211\277\361F=\277\026k\035\277\251\200\245\276\332^\347\277\364g{\277\354Z9@`k\341\2750\020<\277\306\213\212\277*\342o\277GL\235\277\'\202n\277\305l\232\277\370\261}\277l\231\234\277\330\201\005\300\306\344\251\277{\020\273\277F\333\304\277T\336L?v\261\331>\013\001\372>\307\364\350>\037\347\361>R\260\177?\207xk?\250\226\030@\271\215\035@\262\202\266?D?\235?&\250\347>?l\241>&\215\204?\242\217\326?\312\035\235?\364g\216?\016)\312\276#\250\177\277\355~\t\277\343\312p\2774\232R\277\211\341n\277\000E\221\276\2023\347>\333H\177>\213\325y?\316%\026?\322\223(\277v!/\276\374\377]\277\257\357&\277.\345;\277\226Xj\277\372\214^>\224\005\\\276f\264\217=e\202\334=\275\307\252?r\374\370?\332\023\201?\270I\026>\262\231\272>\370\245\037?4q\006\277\222J$>\230c\005\275\241F\201?\3120\201?~s\260?\357~\262?8B\312>\037&\032?\376\351\032?\370\2279?\360n\017>s\306\317>\262\325y?\264\220\213\277\316\372\177\277\373\355\230\277\210\273\215\277\277\n\001\300\227\361k\277I\366\332\277\326\2249\277\022(\261\276\320d\037\275?\260\233\276,\353\312\275\033\275)?4\227\022\276\035\300\251\277\263\226\265\277\200\242\353\277\251S?\277\366\200\223>\365\304\340=\374\345\016\277S\313\244\277:\\\331\277G\010\274\277\372\201\237?\375\r\323?@a{\276\234\013K=\274vG\276\272\305,\277F)\235\277\326I\231\276\376\004\270?\224J\372>\256\243\224>\354s\240\277\260\222\245>\026\266`?\315\313k?\027\207??8W7>0\360k?;]R?\325\205\354?\004\267\340>\226y\017?\206x\335?.\231 @a\010\232?\244L\251>+5\356\276\337#T\276\201\272b\277d\250y\276D\205V\276\351\323T\277\214\226!\2778\256\325\276\022j\247\276.IB\276\237\314C\277\345\351`\277\000\201\346\275~\226\t\276\362:\004?\220\376%\277b\235D\277\362\310\355\277\360\032\325>\005@\312\2770\243\332\277\277i\277\277>\254.\277\314\237\330>\000\000\035>=4\250\276\324I\334\276\304\277(>\360L\302>\014}\273\275\337\340\006\277h%\357\276b\242\267\277 }\313\277\302\223)\300j\013\246\277\027\330W\277\030\210l\276\"n\205\277\347\036R?\220\245\337>\221\222(?\210\301\341\275\340\027k?3\353\026?x?\205?\024f\001@\21213@}t\236?!\314c?s\211\257?\364?\r?\235E\010?\032\022\254?P\000\234?\223\332|?\275\246\035?\311\2010?\210\257f?J\206\310?=Y\314?\276|\310?\312R\272?\326\204\236?\000\212\"?\206\240!@\244\346\215?\020\261\373?\201\234}?MHR?\276\237V?\324\345|?\n\253y?\264\377H>\324\344\271\276\317\3207\277x\037\251\277\377\251\246\277\010\254\221\277\315$\303\277\024\203\023\277\317^\240\277j\352\311\277\314\215\020\300d\221\236\277&\3663\277\357\3553?_\311\202?\262\202\024?2\345\200?XC\272?\214Y*@d\327\257?\304\373\333?\345\342\342?\342\267\273?|\363\035?|e\264?\312\321\337?\254\237\304>0\262\236\275\276\370\322\276\345\323\210\276\270\304??\252\271}?\254\214\033?B|e?@\332\217<\236\307o\276\225!\024\277\334\026b\277\2249_\276\211`\372\275v\323\352\276\210{\242\277@\231\016\276u\375\332=G\276\253\277\345\316V?\220>\332?\312\223\241?\300\226\223?pP\262?\261\301\003?\026NI>\365\t\033?Y\303\004@\213\031(@\255\2567@\010\233f?^G\243?\020\351\306?\347nD?\324\377\n>\232\254\316?.G\363>d\311\270\276\345/\207\277\320$`=\032\354\013?@\306\245<l?\373>\362\264\275\276\001c\257?\210\270\373>-|\241?X\337/@\004i/@(k\310?\032\025\213?(\030\006@\341\303\335?\332\231\337?,\2124@}i\"@ZH\r@\343\001\337?\364\340\215?\312d\324\276\3117\033\277\000\211\366=H_\300\276VXq>\273\224\036\277@\353\002?\212` >\243\320]?\022\013:?\330\275\n@\300\346\322\275,\237B\277\210k\274\275\370\250\034\277\031\350\203>C\353]\277&\007y\277\262\233\346\277:\033\177\277\264(B\276\234F\350\276\236\276\023\276\361\225\342\276(\\\034\277\261c\262?\260\240\224?\302\351\314>\330\323H?\251,2?\256.\355><4\275?\024\231\242?\350x\371>\020Z\376<^ \256=-*\017?C8\271>x\332}\277\031W\211\277\030=+\277\200\213\216<\001\037\362\275\226\006H\276\240Y\343>m\345\210\276\342[\234?\331\354/?\370\251\n>\270l\254>\344\351P?\224YR?%fg?\212\236\322?\216E\327?\"\020\n@R\3474\276\202\343\036?\\\357B?;\350\326>\354\276[\276\261\0132\277\322\267\261\2768\311\025\277\302d\205\277+Y\252\277\300\327\201\277\332-=\277\000\234\247?\342\002\361>L\335\313\275\3162\226\2778\374\236\276\347\200\337?\226S\320>\303\030\213\276e\026\240\277\313ay\277](\t\300p\222\r\300\303\220\017\277\266\255\260\276\200$S\2735\270\276>/~r\277\343UH\277B#\023\277!\026]\277fY\246>\370\260\212\277_\t\022?\251+\207?\003\274P?|n\376>6\020W\276\226\003\353\276@\314\236?V\334\001@\367P\266?\023\375\033?\2355\202?@\256\332=\375\217\307\275\344d\202=\004\240X\2764\">?\221g\270?\234r\002\277\200|I=\334$?\276\340\2261\274\314\273\">\200\213\331\276\2609\315=a\\\037?\033\242\305\276j9B\277\271]W\277\345\320\002\300\234eG\300\315\036\311\277/\353\337\277\346\035\025\2772\257\034>i\360\"\277\312I!?\372\263\035@\276f\202?\240\017\213\274\272(\277\276\213GB?\271\231\237?\\J\270?\2404\313?\341\006\327?`\265\027@D\211\364?\005[\364?\366\364\352?\366f\250?\260\007\252\275\267).?\010\273\306?\330?\363>\216d\373\276-H\231\277\004\275\236\2773\256\007\300\347\316\320\277\221\374\243\277J{Y\277@\341\311\277\303<\247?Z\322\000@\022\375\025@\010@\032@0\360\250?(\201\242?\374\017\215?\031;\312?\275\266\'?T9J?Y\261$?\024Ug?\375\230\222?\362\351\367?\271\232\365?\342z\227?b\262\346?\2320\226?P\223\304>\003\234\242>\231\371\227\276D\013\027\277\234\366\224>\273\326W>\030\262\345=\224!e\276\014\267\331\277\256\330\021\300\350K\026\277b\222s?h\314\023?\230\222K?\003D\220?b\3527?St@?\002\2237>\262\013\013?\313\367\250?\000\336^?\370\337\004>_\321\004\277\254[A>\265\004\253\277\000\225g=\311\314\225\277`\264&=\356\021j\275I<\010\276\026N\345\276(,\211\277\265\032\001\300 \317\276\277Z)>\277\312\316\272\277=\221\204\277\277N\231\277R\204*\277l\303\t\277\274\331\202\277\346C\'\277\260\376\223\277\321\236T\277\340gt\277 z\313\277\000\024\004\275\214\235\313\275\226\036\013\276\270\2136>\354\225\216>\002\375\221\275H7\272>\305\006=?\r|\312\277\222\203$\300\220P\026\300=\003\356\277fD\013\300h\345\317\277TX\355\277\314\017\262\277\002\027;\277I\036\361\277b\252\257\277\030\334`>q\272\253?__3?j\252\363\2761d\200>a\324:>\272 F>\345\347S\277\214\207\035\277J#~\277n\326\215\277\360Ur\275\256\241l?6\264\003@\245\217:@\017\345-@\0063\364?\230n\023\276\024.\226>`\270\177\276\320\277\204\276\031\332\032\277:H\364\276\355\215:\277\017\003\022?\254o\345>0?\221\276\027\255\261\276q%\202?e\003n?\274\353J\276\221\361\275\275\336Y\014\277\223}\245\277Y\310\235\277pM\314\277!k\240\27785\026\277la\207=\244kZ\276Nr,\277RE\222\277o\205a\277h\250<\276\210?\352=f\250\267?\311\226\216?\340\301\020?\270\324?\275>]\365\275\366\334c\277\300\335\221\274\025\006w?\304\312\252?t\312\233>\301\014A>\364\321Q\275\220\010\306\277q\314\244\277\372\332\354\277\324\020\211\277\377D\021@\367\3211@\220\240\000@\200P\024<t\177o?B?\322?.7\234?\306R\233?\354\237\277>8-\026?\213:C\277<\270\366\276\210{\306\277\032\233\202\2772\024B\277\264\364\010\300A6\201\277\252i\317\277-$\003\277)I\222\276\202\\\307>@>\013=\305f\246>\246\314S\277\r1G?\022\036q?\"\207Y?\362]t?*6\014?\010\372\304\275\310i\022\277\323\240O\277l\302\236\277\342\237\266\277\253\310\241\277\377\006\230\277.9-\300e\233=\300x\034\376\277\215=\037\300\r\325#\300\001\351\t\300\375\244\327\277t\311\320\277\n#\345\277~\347\304\277<\214s\277\007\351\303\276c\352\364\277\032D7\277\022\373\025\277D\326\227\276\035P4\277Ve\305\277\353/\243\277\235\"\263\277\321\206\006\277O\206\020\300\377\236@\300\341\361\357\277\243A<\277\000\000D\273\373\331\037\276\271\316\023?W\036\002?\310\357\r>\234\347\232?0`\361?\266c^?@\3634=l\010\207\276z\203o>xq\325\276\342\357\332\275$\277\217\276f\334\226\276\213\354H\277\356\273\003\300\317\277#\300\3601\032\300\255aS\300\341\204\313\277\303\234\270\277p\213\307\2778\353E\277\210\n\237\276a\226\241\276\373\303\305\276\203v\331>\230\216J>`\356W\274\327.#?\264\306\257?pR\331?y@\334?\260\207\247?\226\326\347\276\001\nz\276\026\313\240>\320z\231\276\016\337\332\276\370na\277\300\027\230\274F\355:\277+uk\277@\306!<\371\203\277\277\031e\313\277Mb\254\277\335`\t\300\260\246\316\277Fs\230\277\371\t\033?;\263\201?\324~\242?3\022\\?\3578\013?\243\t\247?\017\017O?\374\365\255?\240\346\014\276\317)\240\276~\225T\277}y\020\277\'q\313\277\346p\322\276\254\212\234=\022\271\302?\022\347\024@F(^@\006\254U@\215\340!@\304\002\311?C\343I?V\330\240>dk\357\276\364(\004\276\"e\234\276\234\270\026?\306b\367>\n\260\207>\226b}?)\016r?\024\222\344\2761(\310\276\267\035\275\277\204;\007\300<\t\n\300hx\266\277\216\316\354\277\227-\036\300\337\243\315\277 \341\351\277;\236\014\300R\024~\277\206\267C\277\334\nD\277\301\352\205\277\024\252j\277\307\333\210\277\376\322\031\277\314:\000\3002-\020\300\020\357\016\300\010\275\014\300I\037\002\300zOQ\277\200\r\221\277\024\321\243?@\232\020=\255\234\362>\314.\021?\177\025\204?\324\013\021\277\274\212\242=\034\003K\277\321\036\303\277\032\354\207\276\004mO\276\031\341%?\316\374\030?\231\232q>\002=\304\275X\376f\276\332\373x>*\241\237>,Q6\277\276\310\021?\322O\022>dl\320>P\226\332\274Y\210\337>S\r\242?ng<?\346\361\027>\273\201 \277H.{>(T\024?E\217a?r,\326?\025A??nz\273?\036\210\013@\207\322\344?\306\341i?\322\201\242?<NO?.\212-?\000\266;\277\322\203J\277\200:\231\275l0@?\211-\242?(\027F?\266C\332>\240~L=|\000\204>\000\353\304\272;\243\333?\256+\357?/\225\332?\036\336\214?`\206\207<\'\022K\277G\277\206\277\320\251\201\275\240\320\220?\222\227\274?\310\372\361?].\320?~\027u?z^e?T\211C>\306f~=\257\\>\275D\311$?\340\242 >\366\212g?\322G\314?\010!\273?2\261\013>\365\221\225\277\030\356\324\277d\243\271\277\272yb\277\204\231\234\276mD\342\277\r\n\000\300\010\375\007\300\2031\335\277\220\275\022\2771\336\220\277^i\243\277\326\032\260\277:\t6\277Ui\224\277\021\030#\277\014:I\277\206\301P\277D\206l>o\273\236?\326\033\372?\364\267 @\364I\341?F\013\241\277\013\252 \300\240\350\211\277\305h6\277ry\267\276\324\036\335\277\351\225!\300\340\357 \300\252\004\353\277\260\t}\276\025\3632\277\302{\223?\274\352\351?\034\220\213>Y\006\274?\222ae?\320\233r?x\266)\276\326rb\276\342\373\244\276\213k\311\276\337\264\336\276\304\320\374=\304y\216?\347\260\217\275`\212`\277\337\210\000?\035\\\377>>Y0\276\250\006\230\274\022\037{=0\336\204?\005\266d?\246 \303?\032M\204?\010\277\247\276\226r\026?\234\010\020\277\340\326Z\277\025\344\003\277$\014\007>\003\033\351>\256\270i\276\203\222\001\276(\370\304\274\252\313\"\277\220i\277>\320\356?\276\252\263\237>\003u\007@\r\033\316?\014\312\230>\334nV\277\\\017\205>8<\014\276\001\273\027\277mP\244\277\302\n\201\277\304bX>\270\320g\277\310~\251\277\222\236`\277CL\200\277\376<\241\276 U\225\277@\266\220\2778\210\304\276\346\333\233\277I\nH?\216aW?Gd\256?^&\244?\036\313X\277\373\'\230\277\265\264\025\2776\243\306>\246\177\005\277\034:\220\276\002m\211\277\323\rf\277\260/]\276\257}\204\277\304h\222\276\026v#?\270Si\276c\231\014\277\360\301\245\276\032PD\2761k\204\277\211m\"\300uy\037\300\262\312\315\277jb\246\277\316;\313\277hq\304\277\337\310\214\277\243b|? g\367=\274UH\277\374\373\253\2774A\232\277\357\003\215\277\232\355\317\277\316[\332\276\361\371\352\276\24455\277\3701G\277\016Y\321\277\230\036t\276\312=?\277\221\374\224\276&\351\023\277\005\232\002\277\030\317\257\276C\255\207\277\0057\345\276o\266\014\277b\352G\277 \037\215<*A\203>\210\224\261>\200\\\031\276a\262\252\276\201q\242?n\002:?\331\3602?\224\305\366>Z3}?lz\370>\024\006~?\354lx?*\324\023\277\022\312r\277t\253\334>\240\277M<\371\032\211\275[\364\212\276\246\205\201\276\2720i\277\\*\255\2772\232\312\276\323r\222\276|qb?$!\247?\344\203\212\277\0162F\277\274\022,\277\257\257\201\276E\310o>\200\217i\274\030\206\252<\330?\223?\362\376\212?\374\323\030?\337\364\344>P\302z>\377_3\277\342\021\334\277\274\"\345\277\342=\343\277\200\331\351<}5\244\276\026Bm\277\364\211H>\370y\362=\200\336\007?Ko\215?\212&Y?;+\217?\016\343f?\211\364\334>\326\352t?\034\206P?\324h\242\276\331\014\226>\362d\211\275\"$\212>@\001G?\213T\200> }\313>\232\372T\277)h\037?\006\275\010>\037q\224?1\274!@pg0@\014\3650@\005\025\310?\241\222-?\342p\004\277hn\200>\370\206\017?\222\230\272\276k\240\345\277f;v\277$g\245\277\367\200}\277~j\352\276>\210u>K\007\336\277\236\350e\277\317\255\201\277\262$)\277\260\376;\276$\276t\277d\306\201\277X\257\343\277T/\377\277&\333\005\300|E\'\300\337\240\001\300&\244\r\300|\317\026\300!\227i\277J\251\352\276\232t\230\276\347\330\233?\352@\204?\320\360:>\026\251\262\276$\241\272\277P\305\207=\013\204\221>\377\232&\276\234\360\201\277\020\315\306\277\010\021\336\277\022\272\373\277\303\217\344\277\346\223,\300#\222\003\3006\375K\300\035\rB\300\022\355\014\300/-\003\300%#\342\277\264F\364\277\217\3765\300q1\005\300\357G\253\277\211\376e\276\226\227\275\276\330^5>M\237e?\225\010_?\210\250x?\341\237\343?,\322\263?q\r\225?6\261\243?Zf\005?\255\327&?\226\nr?\344\006,?\212\252\267?TV\365\276\260h,\275\260\030\033? \200\t\276S\004\223\277\211\021\260\277x7\r\276\206\226\022\2762\027G\277\326\373c\277\"\356\266\277\337s\014\277<G\251\277\207\330]\277\236\373\003\277 \253\032?\223\371\370?\233\216\014@^\366\006@\231\035\331?LY!@\300.\013@\332\302E@\016{E@\341\355-@6(\023@\262t\276?:\254\241?\037\366e?Q\374!?gw\357>\270\203\332?B\233\311?[u\311?\242\330\021@Q\254\312?!n\250?\266\022\013?\227\222\216\276.\310\313>\002\332\255>\312\315 \276F\003j?\300|\312?\3106D@l\315\367?xg\031@\344\351\002@\240\316.@\216$*@\262X1?\000G\271\274\3310\370>\020\033\356<e\227\222?\342\0348?*U\'?\240F\216?\323\335#?\356Y9?2\300\036?\207\275\321?>\027L?(+\223?\215e\233?~\377)?t\345\267>J\303\226=\273\242\002\277\366:#\277\000X\037\277kQ\201\276\256\341\201\276\322\370\231=q\334\026?\212\217\026>h\334\375\276\340\263)\274\336\303\276>8\272\263\275\225\235\201?T]\266?\226\210\362?\346\030\r@\264=\023@iK\t@\320\365\247=ZO\232?\020\224\326?\265#\201?[\352\177?\252f\177?\354B\010>\216^\304?Z\272\364?\016\303\346?\364\212\325>\354^\227\275\301X\242\277\264\350\237\277j|\375\277\201\221\013\300\206\214\037\300\3222\331\277\233\222\342\277(\260\212\2763\270\310\277\220\300&\300\250\215\264\277_\022\262\277z\376\371\277\343\237\007\300\220n\017\300c\320\014\300\016\266\213\277\315\251^\277\314\357\014>x\336,?\316\016\021>\327N>\277x\327b\277\240=\350\277J\315f\277p\0357\276M\200V?\216>\337>Z\030\203>`\317\377\273`\310\332\275@E\333<+\334\222?j\315\221>\275\270\230>\342\035\231\276\037\370s?$YT>V\256S>\016\267)\277^H8\277\221\n\177\277Fj\210\276\306\017\017\277\370t\205=\222\017o?\274\204\211?\002\233\246?\302\311\255>\334y\024\277\247\332\242>(\316\261\2754i\233>\016\266\211?\213\232\274?\014\346\034\277??\252\2776\250\307\277\227\300\035\277\272\347\324\276\302\221\027\277\004W=?\226\277\264?t\204}?\370\031E?\271x-?TX/>ci\213?p\225%?\360\017\222?(\315\303? \004\327?\010\235\222?\000~\271?\340C\333?{\263\036@u\203\035@\344]\373?\214\275a?o`\302?\313\330\230?\223:\353\277\372\316\304\277\0066I\2770/\376\276\020\363\202=\016\246{?Hx\204?@\244\006?(\361\240?\230\270\202>.go\277(\017r\277\231\251\341\276(y\342\276\353\321;?\260\007\035\276\251\260\216>\253Pe?`Jd\275\206\261\320\277z\221\205\277@y\033\277\316\267\027=\311[\225>G\362\244?B,\246?0[\017@\030:\031?\000\354\366\273\371|3?6-\304>\024\314\211\277.PE\277,\316\333\276I\027\341>\326\\\323>\333\204\233?\335\031u?\234\252\224?i.\n\277\213\003\352>\240fw\274c\314\201?,\202\233?\342?\360>\024\371\324\275\246U\232\277 s \300\030\335.\3005d\223\277^\313\275\277\340E5\277P\371}\277B\305\207\277\355z\225\277\252\000\221>\352\224\022?\350\301q\275\363\341s?\262\304{?\344\376\035>\330y\224>&`%?T\022\264?\005u\000@V \225?\255\3552?y\344\233?v)N?\346\316\n?H\202I=x\211\005\277DD\214>A\235\352\276>Q\207?\321\005\014@\262\3609?\350O\010\276s`\304\275a\276\222\276F\344\355\276P\356\257>\215\"\256\276R\307\243\276\212\350\263\277\364\352q\277\336K\377\277N\t:\300\201\3437\300b\203\302\277l\004<\277HA\363\277\220\353[\300:<<\300\033IB?v\334\365>.7x\277\0263\214\276;\000\351\275\217:\256\277\240\266v=9\222\373\276^&\343\276P\256\355<+\341\244\277\360t\252\276px;?\336q?>\312M/\277\275;&\277\213\322\007?x\365\r\277o\364\014\277\242\030\242\276r\033B>p\331\266\276\321\317\016\277\266\276|>\000+\222>H\343\230?\341\371\211?\272!A?\272\227\330?\314v7@\233\254\017@G\214\267?t\201\031?\346\303\311?5\373\021?|y\351=f\037\224\276]F\230>0+\242\275\026\225\031\275p;=?D\265\303>D\360V>\')\276\276\217\025\346\277\305i\312\277\366#g\277\216Yy\277m\370\265>),\240\277HQ3>}f\213\2763\221\201\2778\274\036>\323`S?Hos?P\256=?\204\324/?\334N\006>\004\267$?\346C\217?,c-?\022\212\316>,]\245\276\230?J=\272\226^>\361\337\003?dwW?\365\252\255?DU\205?\335\274\200?\337\276f?\306\371\020?$\254\202>\363e\250>\220\206J?\374\260\246?\310\014\232\276(\350<?~\362\213>x\277\"?d<\324\276W\361\205\276\024\216n\276\347\276\217?T\311\024\276\347\350\025?>b\033\276\016mS\277T\013\203\276\206\354\312\275\356\236\037?^\330g>[&\014?\242M\001\277\314\206\275\277w\204\010@\201\t\202?\373!\214?\356\367\305?aD\273?&k\301?\364d??\200\016\013?\343\235\n@\0338\020@\260\334\007@\236\346\024@\216\201\321?\326\021\364>{\352\241>\'J\334\276\234\024r\277\343S\234\277\370\2542\277^w\337\276\357\371\260\277\016Ex\277\230\262\226\277Z\340}\277q\376!\300\336&\003\300\031\306\331\277)\034$\277Y\303\026?P\213\303?>c\017@\3266\016@]\270\325?\027\024\002?uS\001\300\210\350Y\300b{\336\277\215\215O\277p\251\373\276SG\016?\375\220\010@CD\374?\307}\037@\344$\265?\320JZ\277@\274x\274;\331\n=\014Q\222>\231\234\021\277\237\226\254\2774\331\356\277\002\363\033\300\346\001\343\277\021\205\203\277\004\325$?\206\331\317>\216\001\244?J\305\003@\337B\'@-\017\'@*8G@\357b\266?\'-9?\036hu>\226\324->\302\317E?x\002\312>w\036\261>\355\000\024>\307\032\177>\350\225M?\320\013\227?{\356\033\277^\220y\277\231\251U\277\240\362E=\036\245.?3\352\310>2\003\303\2762C\010?\022\261\222?\032\345=?l\300}?8.\256?\2543\016?.\246i?\2323\314?\000\003=\274]I\005\277rH\'\277\246\370$\300&\362.\300$\321\272\277XZ?\277.\216\232?\204\361\217>\337q\212?Ci\232?\010W\247=9U\302\277\366\234\256\277\206\210+\300C\264\362\277\324\327\212\277\236I[\277\231\365\007\277L\2243?\356\2240>\243\321\322\276^t\217?H\212\312?WZ1@\207\205\307?\023\030\316?\320\222\354?\235q\361?\300y\324?T\234\317?\236\335\235?\213\033\007@\244\261 >\322*\374?\215\223\265?\210\367\273?$\314\367?z\272.@\023\223H@\377\035\212?\036~\240\276@\200]\277.\005\310\277\370d\253\277\200\331\243=!v\261\277\250\006+\277\271\307\034\300\260\373\307\2768\031\315\2775lX\277\300\352e<\364\372\032?\353Z\314>8\2566?a\356 ?K\253:\277\255\337\223\276\332eP\277t\270\304\277\224\204\273\277n!\030\277JT\305?\345\232\206?(\3311?*\035 @d\261%@\364O6?R&\214\277\344D\306>\264\314\024\277\361\277\\\277\316C(\277<\353\321\275\034\236\213?vQp?DDJ>R\334^?\220S%\275\\\252\231?5\222\263\277Zn\235\277\350\301\217\277\034\032\351\276\002!\020\277\210\255\224\277\337\037\233\277\362\357\222\276\307hT>\036_#\276@\020\204>\343K\240?J$\335>\342\307.>\235\322%\277\223\"\377\276LRX\277\262\336\240\277\256\236\215\276\016\352\347>\r!\225?\212=\016@\231\260U?\225;\013?\300\270\327?RE|?0E\024?\241\232@?\363\3300?i\226k?\332\254u?\\\370\007@\366t\376?\300\r\325?\211*\245?\022(\303?5c\225?iag?H\t\201?8\034\026@\226\002\001@@\031\320>\220rJ?<=\237?`UQ?\003(\270?!\302\201?\360\371\256=\220\256D\300\2075\n\300\003\2733\300@\312\356\277\204\272\030\300\213^\340\277v\030\017\300\2002\215\276\230\025\310\276\"o`?2\207\300>\246$\030@\370\360\016@\275$\031@RL\351?9X2@\204P\215@Cw]@z\rZ@\254\361)@2\205\346?\303\033w?=r\203?\303,\222?\317\344\007?\342o\221\276\363\243\247\276\222z\307\277\344\265:\300\260\255\344\277k\r\304\277\230n#\300\200\224\254\277<\256\263\277\314>M\277\256\370q\277\232\207\215\277\335t\207\277\335\251\301\2762\010\001\277\010\026\214\277\301&\204\277\253\265\214\277\003A\013\300ri\357\277z\342\326\277\326\246\235\277\230s\251\277\t\205~\277-\372\022\300\217\026\002\300\200_\334\277T\306\007\277\203q4\277\006c\215\276\300q&?\0212\003?}t\227\276 \027\357\276x\376#\277+\035=\277\327\264\013?\244d\274?KZ\313?\342\247f?+\367\214?\030\203\246\276\026\341\232\276:=\023>\0206\250>}\321\342>\316\246\224>P\233 \276\332\023\t\276\265\301\367\276\t\035\206\277\220\366\217\277\010\025\017\277\203(\213\277-\334,\277\2633\003\300\353Js\277#\337V\277@\303\374>\352+\n\276>\312\247=\241\207\010\277\020\231\352\274\014t\224>u\320\226\276\224h\003\276\276\221N\276\303\2423\276QwM\277\021\210\210\277\301?\242\277\340~\365\276\276\367\251\276\372X\266\277;\303\370\277\254\350%\300\236\235\003\300\220\350y\277|\240r\276G\034h?O\330`?:\000\326\276\212\230\323\277P\\\264\277lVZ\277\314\033\334\277\024T\037\300\324A\t\300\006\362_\300\337\375A\300\366eV\300t\257K\300\263@\274\277\211i\235\277\"p\215\277\021\275\254?\2406\377>(\254;>\216k\344\276P\237\331>\260w~?&\357f?\205\255u?@\257\223\275\333Y\232\277\257\335#\300\235\341B\300u\034(\300\002$\341\277.\312\352\277\006\366\361\277\360\317\022\300\316v\233\277>p\037\277\210!\202\277h\276A\276\310\365\006?\310(x?\336\017\376\276 \023\324=s\272\252\275\233\371s?\260o\364\275\201\207\261\276\350\353\236\276\031\271\216\276{\3717>\3004\275;\2136_\2764>\350>\355\312\200?*)\224>\266\000\325?`.s\276\210$\023\277L8\361\276\\\330:\277\377v\013\277\343\225\203?\376\356-?\266\226\363>\006AR?\276D\237?+ \310?*\372\260?\350\323\303\276\362\345\003\277\016\032\311\277\240\017\311\275`,0?\032\020\312?\340\007w=\272\223\274>\314\342n\277\201\212\323\277y\332\236\277\032\353\337\276\316mt\276\252_\373>|\230p>5\026C?\373wk?0\366\376>\016\237\353?\356_\264?#\271\232?\020\304\255?\234\020\036\276\014\214?\276r\305\315>\241\245\205\276\252\335p\276Kye?,\351>\277l\262w\277\304\275Q>F\250\037=\200@k?1\327\356?@\276\010=\r>\353\276\270+p>J\010\017?*\324*\277l\035\217\275\364\241\260\276w\005\257\276\204\\\353\276\271\000\034\277\222\363\341\276\334\261W?\304\326\005\3008\236\253\277h\207\336\275\200J\034\277\3664\001\276,#\034?b\350P?\320\311?>\254L\216=\030\361\317\275\246\026(?\201\317\236?\342\363\364>\205\005\252?2x\017@\316\244\007@\246$\304?\326\333\306>0S\307>j\362\212>\264\213\341>\266|9\276\314\313\212?\364\242\206?]<\005\277\374\234\252\276o\333\230>K\235\177\277\376\364\237\277\2116\311\277:5\037\277\030v\020?\326\305\017@\207\253\"@\261\374\361?\361\200\021@\205Q\365?b=\224?t\2558\276\312\227\342>/\327\235?\002\342\327?+\245\364?;\332@?K\\+?\210fP>0\017\232\277\352t\334\277\306\333!\276\365\003\030\277\203=\344\277g5\333\277\000\24069\323\321\205\277:\337\222>\204@\356=0P\n?\304\t\227\276$\242\'\277\274\311\341\275\000\351D<D\352\226=D\000\363=\262\026\243?\314;\251\276\244\345\032?\027\202\302?d\320\203?\026,\000?\330\341\262>\342O7\277OX\021?\224HL\277mZ?\277\034\'F\276\r\257\023?@K\361;\2023D\276 \022(\277\264\324^\277\002$n\276T\367A\275nG\227\276?\331u>\203\231\207>\002\034x>\260\007i\277\262&\304\277z\231\030\277A\367\303\277\346\214\226\277\030\226\021\277\034\304#\276\246V\375\275\315\271!?\360-\246?\243\3258\277Q\310h\277\273\354\025\277\350\314@\277\346\001a\277B\020\263\277B8\351\276\252\013\356\277\354T\365\277\224B\274\276\210\235\225\277\330\251\311\276\300\234R?\225V\273?\330\220\220?\262Q\222?pS\370?\225\224\307?x\371\305?;\255\250?(\201\235?H\374\244>+S\347\276Of\227\277\010\353\355\274\202 \274>`\256(\274E\261\301?L/\346?f`\326?\206j\315?\013\034\302?\210\000\010\277P\327|\2768G\023\277\346\0017\277\340\320\026\277t9\270\276\270\261\n\277\326\014q\277\010\\\251\276\362\352:\277@\210\211=\264\334\017\277\014\253\231\276\356\345\305\275\037h\342\277\034d\245\277\252\247\243?\310A\310\276\252T\370\276:\332\340\276\355\201e\277\304\345\202>\254\330\230=n\200a>^\255\301\275\340v}\276\200|\312\275\215\271\007\2774\244\333\277\261\303\325\277\216\314\255\276#% \277.\347\310>\330j\267>z\021\366\276w\332\006?\206h\204?\000\226\342?\314\272\273?\216\222N?+\314\326\277a\037\006\3000\263\267\277\240J\001\276`O\324;\227k\237?\032w\353\276j\017\242\2774*f\277\323\265\214\277\367m\371\276q\372\013?\365)\'?\313kd?$\276\356?rq\320?l\364\007?\247\337f?\270[\250?&\273\371?\206\246\200?\030\377\213\277`H\013\275\303\313\001\277\362\027\021\3004\031/\300\301\263.\300\206ly\300\207\215I\300\003\263\032\300~E\032\300@bd\275bJ\205\277\372$\355\276\353w\255>G\266\034?\t\333\231>wN\222>\272\206\231\276\r\227~\277J\240\263\277\276\347\236\277$\277T\276\364j\002?\352\345\241?\000\233\213?\010\236\260?f\2212?\247\026\224>\362\247%?\300\236\023\275\222\322r>\270\314\365>\nn\025\277Vg\177\277\222\251n\277@\371[\274|Y\001?\364\221\246?\203\233\216?d\244\t?T7\237?\203\360;?\000\244\334<M\230w\277s\327\245\277\343\307g\277\316\322\325\277\360\034\241\276\307z\274>:0\305=\375\026\r\277\232\333\004?h\237\213\275b8\371>`q\034?\007\240\207?\264@T\276\352\206(\275\370I\350\275\316N\032\277Y<\216>r\341\313>FCl?z3\213?pO4?L\204`\276-n\335\277x\204\234\277j\373\254>-\342\342\276\300\240)=\210\371T=l\212\334\274\025E\277?\242\236\206?\351%\236\277\3205\252\277\360\257\305\275>\342U?\007\364\212?cg\303?X4@@\246s\036@2\367\364?(\306k>s\325N>\'\032:\277\3061\334\276\203\361.?\004\255\252?\372Q\002@\344w\255>4y\200\277\004\0322>\010y\210=\304\376,\277\000\367?<f\244*\277\026L\262\276qB\255?u\335O?\270yr?o\233\200?1\230<?`\323\312<\207\212\035?\332\357\004?e\317\200?\356\277\230?\311\205}?\350\373!>}[\037\277>\025\n?h\004\265?\270\240\326\276\320-m=D7F\277\200\260\201\277\272c\205\277\332\252\313\277b/\362\277\312M\312\277=\265\325\277\3254\222\277\377\210\212\277\027_E\277G\375\351\277~\377\031\300\370\342\224\277\235\334\253\277aT\352\277\2163\247\277f\006\261\277\367\254\201\277F\013\225>\014\256G=\275\314\311\2766\232$\277\246!\314>\275\"\255?\350\224=?\254)\005\276\024\022\257\275\"\230\267\277\310\001\236\277m\222K\277\201\311\004\300(\234\277\276\023x\221\276\317\001Y\276\206\345\017>\212 \333\276k[f\276\020\200\224\277\000\004\214<\265\260\254\277\013\177[\277\202z\307\277\252[\277\277P\243$\277\000h\"\274\267\'\254>\230N\324>\367F\236>\352H\353>\374N\353>\216\2747?<\'\252?\233x\316?q\311\304?\236\250\347?3A\360\277\347\374\306\277N\272\010\277\271\265r\277\2320\350\2778\023\255\277#e\233\277\021\271\360\277\022\274\r\300t/%\300\375e\032\300d}+\300\276T\352\277 \366\255\277\320\254y\277\354\220@\277hD\225\277:\312\350\277Q\236\320\277\337r\266\277\010\320\352\276(\256G\277\327\337>\300\204S3\300\225\260\301\275^\363\351\276(\372\227?\252L\243?\364\034\256>\212[g\276\250x)\277\376\2647?\340oR?\351\230\037?Q\216\230\276\300~\362=.;\020\277dN>\276\336!x\277f\223?\277\330\301\223\277\004x\254\2778\027\224\277\215\333\217\2770\023y\275\344\026\307\276\343K\224>\346(\204?\306\247\276?)1\255?\245~\002?\277\tn\277S\216\n\277\000\031\342\274\220.\347:\\\034\332>@\021\212<\334)t\276\002\300\311\276\261\032Q\277\261h\366\276,\230\277>\203\005Z?\342p\236?\343\366m?gJE?\252\016e?+\215\231?\031Z\036? \346O?\224\021j>\254\022\306=\343\365C@\363g\002@v\205\032?\254\2746>y\275\243\276\356\203\004\277\020\037\225\275D\247\336<S\363\346>\3334q>`a\003\275\213\302\272>p\305&\277\'\026o\277~\255\r\277\270\346\277=\264E\377>\360\314\216?L\335\216?X \371> \272\367\274d\0322\277\227\3657\277d=\006\277D\362\r@\014\367\243?\000\013i\276*\353R\277D\327\006\276\217\300\334>\316\027\260\276\374\240\327\276\365\341a?\006\016\222?\226X\246?j\267\207?s\223\016@h\271\271?\324\251\205?H\004\302?p\237r?\335\314\235?-\276\225?\236\301\207?\001R4?\351\346r?\364\321e\2760\036\352\275\177\356\361\277*\3629\300\363\202\207\277\026\300\325\277\370\365|\276\350\257\354\274\360\204\206=\274\365\235=\336?y>LM\236>*\032G\277\265X\211\277\"X\241\277\377\222\210\277\246\262\361\276\215d\r?\212\247;\277n\362\303\276\370W\350\276[\216\221\277\023\335\024\300\320\014\332\277\260\325\273\277\330\255\315\277\240\\Y?\225!-?\024\352\214\276\342\354\245\276\270\263\323\274\270`\207\276\342\275\312\276\313\341A?\370\3027>^\211\202>\315\226\371=\315\221\324>\352\367\322\276\246\354\274\276\016\221\221\277\244CS\277tO\254>\036\025\263\276\252\263v\276\"\234\204?<\2748@)\310F@\027\004\024@n\212n?\2170d?\360\274\341?\005\314\224?\365qy?\233sK?\030\024>?\300\300?\274w\300$\2776!7\276\235.\032\277m\257\246>\037\306\211>\271<*?\016T\307>\\\205S\276H\221>\276\244\025\177>bM\200>\347\310O?@yy?R*\361?\016\037\337?\362\305\352?\304`\222?s0a?\236\257\177?\241F\023@i\324\367?)\357\272?X\025L>\311c;>\326\203N\277\237b\024?\324\031Q?\355\317 ?\337\233\036?\245\237]?\360\317\205\276\000\210\002\271\277,\335>\252V}\276\202\306x\277\000r\344\277H^\'\300\230\371(\277 \264D\275pI#\273y\342\007?\340F\325\274EA\213\276Dh\377>\352\002\200?\003f\016?\177\342\275\276\376!\033\277\350\204\226\277\322\254\200\277\240\232\007\275\2402\254>\n\201\331\276X^Q=\305\342\353>\024\273\035?\005\235\277\276\214\325s\275\326\t3>(\2453\277\357&/?\350P\220?\000\310-\2728\361\317\277\357\213\310\277\306\262\372\277\323\014\003\300\200\252\332\274\232\324R?t\370\206?\337:I?\260\277\330\275\253t\206>\032\240\337>ho\341\275w}\342\276[\255\227\276i\356v\277c\307a\277H\216\253=.\226\244\276q(\247\277\224\271\312\276\321\037\277?\206.\t@\346\221\017@\374\371!@~\363u?^f\200?\tS\222?A\217\336>\006\200\310?p\t\025>Y\305%?\200~\\?\210\350u?\002\364\224\276\317x\257\2772\014\266\2772\316\357\277\272\341\010\300\302\263\016\300\3266\235\277\265N\255\277\\D\030\277\1775?\277\3438\300\277\327A(\277\334s$>\206\214<\2773\275\310\276\036\335U\277&\366Z\277\222\022\361>\220\ty\277Q\334p\277\336d\233\277~=\247\277\213S\227\277\363H\315\277\240\335-\300\242<2\277\022O.\277\\\347\372\277>9\222\277c\005\017\300\030T\'\300\354\276\"\277\200\214M\275\262\004\274>\244Nh\276{\0215?\254\274\211>_\'7?\030`\306=\004[\331?\235\247v?\026\2639?\010\033\202\275I\276G>tY\236>\231y\223\277\214\210\n\277^\017U\277\272\257\007\300\024\302\325\277\373\222z\277\245\334\227\277&Hy\277\006\366\207\277|a^\276Ty\225?u\034\r?\324\037\264>\320]\030?F\3352\276Q\374\235\277 \302i=L&\001\277\351.\340\277\210}H\2771\303W\277\216E\023\277\006\013.\277\256\361\365\276@<{=\356\0242\277H@\304\276\226D\344\276\215\022\354\276@\003(\277\350\320x\276\376\334/\276\257\250\232\277N\213\007\300/s\260\277\021T?\277\340\377\337\274\377%\240\277\264V\270\277x\247\371\277^\226\010\300\203\334\303\277\303,\351\277\3049+\300R\212\341>\326\013@?\"\246\317?\364\2172@\377\272\024@\332/n@&\301\037@\202\213\345?\344\340\326>\t\265\336?\307\314\r@\311\227\377?R\356\336?X\243\310?Wj7?\254\275\026\276\273lY>Q/\220?S\301W? \250\310?\216\334!@\2706*@kG\010@8\222\320?r\014\026\300e\014\001\300\362\231\001\300\333\007\005\300Z\233\352\277\024\n\256\276\030{\026=\026\342\023>\216\367\260\275\226\203\020\277\371\256\005\277\274h\237\277\354\201*\277\305pl\277\n\211|\277\323\272\356\276\210T\211>`.\327>\201(\025?\277_\351>\000nD?\233\310\255?\232H\020?\\\244\r>pWP\277\200u\223<\'\331\033\277\006\207\270\277\326\244\253\277\270\345\025\276:\263o\276\274;\004\277t\374\367\275\220`*?\270\236\360\275HD\224=\276{\274\276#*\307\276\210\312c?\224\312\203?\316\256\300?\037\352\341?\020\236\272\275\235i:\277\201\344\002\277\017W\277>\313\231\007?\266\261\242\276h{\231?\322u\371?\306\226\335?\032\022\320>\334\271\205=\315 >?\210\265\341>\002s\244\276\021\350<\276\370\277\232\277\274{O\277\366\017\003\277\217rz\276>Uy>\247-\n>eE/?\342\030H>\332a\240?\036V7?\241\254w\277m\221V\277\312)\342\276\304\327c\277\250\204<\277\254\026\373?\267\217\314? \214\257?]7\201?\210\177\223?,\207\341\276\312\343\022?\030OG\276\340\003\345\277$\036\245\277Q\246\250\277\366\275\200\277\253~z\277\273\302<\277\255L\212\277:?\212\277\r\302\001\277p\250/\277I:\001\277\200*L>\002\325\022\277\224\021\235\277H/\373\277\3045\322\277T&\350\276\305HZ\277\334\002\006\2774\361\251\277\213\224L\277\222\367\322\277\356O\\\277\033~*\277\216\'\233\277J-i\277[Hv\277\245\234\217\277J\300\211\277\252\035\236\277\330\347\232\277\334\361\364\277\334\252\372\277\257 \373\277\256\343,\300\312\014g\277m\362\344\277\233o\003\300\372\263\001\300\016o[\277\240j\273\273<\216~\277x;\275\277\352\023\330\277f}r\277\350\307\320\276j\202-\277\244M\206\277\251\003\003\277\231{G\277C\361\230\277\005\222!\300:\242\317\277\370T&>\004\010\227\276&\203\310\277Cm\023\277oW\317\277P\346\316\276o\'\210>`\356\224?G\007\220?>\337\204>\"f\360=A\237\226?\200\273i=\310\317|?\350@a>\330T\206>$!E>\300\225M\275FJ\342>y\301`?8Z\024\276\266\262+?\000\354\243=\304\243t\276\352\313\237\276\036\267.?D\022\003@f\220\010@\372\035\253?]H\\?\375\323,?7\247\360>H)\022\276\366\333\364>\236\212\"?.\250Q\277\026f*\276\000\307\260>@\210e\276;v\030?[\235\367?P\353\206?\340\357\274=\343\253\237\277\230\355\341\277;\213\032\277`\265\360\274\353\370\">xB~\275|\356\315\276\2301A\276%\215\023\276\214+\353>6\016\244>\360`\312\276i\233\321\276\222\321\213\277\370n\301\277\026\334\244\276\016\347\275\275\250O\177>*\264\005\276F\361\266\276\354\272\375=a\303\013\277\030\245\021\275-^F\276\312\237I?\240L\337>\221\001\205\276\003\007\013?4\017/?\317\255\024?\250S\212=\367\363\t?47\350\275\036,a?\013\013Z?\266\242\027@P4\301?\317U\324??\251\030?\372TS>x\337e>\016T\017?\276N\305>\317d.\2771\367\003\277T\326\022\277\"|\254?\220\370\271?\336\234\361?\026k\312?c\262\316?gO8@\211\t1@\210\001\021@4 \332?\222\245\267?\240\311\005@\213Sp?\317\3073?\202G)?Ap\302>f\255S?d\010\034\276$8A>\242\013{?$p\355?\341Dr?\334[\215?\302-}?\323\262\257>\274{\014\277\254!\224>f\243\367\276$\262\343\275Y\244g\277\264\364\252\277.\207*\277=|\252\276\360\313o?\3276\226??\300\246?\315\300\030@p\243\337?\363\233\021@\006\352\002@\300#\022@\361\300\234?\334\013(\276e\217\177\277N!\332>\013\315\210?D\021z?$r>\276h\273\322=\3716\277\277Vt\377\276\032\320\341\277\367\206\257\277\335\371n\277;_\017\277|*K\277\005\227\037\277\035\335\225\277\230\355\234\276 \177F\277\243,\003\277\255\306\320>\206\260\022\2777\240\027?hT\306\276c<9\277v;\223>\214\317@>{\325*\276\304b\234?!\211\276?x\353\257?\326\312\"?V\330\207>)%J?SU\326?\3416\025?\234\271\351>*\t\010\276.\340\027?b\357\204>~\013f?\0202\343\276\022\255\211\277$\353\033\277\347r\353\276\3009\204\277\220\365{\2772n\n\300~\260\346\277T\314\214\276\244\275\004?N\244j?\205\304\203?\360\314\354\275\242\356<?0r\211\276>\311\235=\216\030\206\276Z\243\233\276\304\274Y\277\304q\212\277\370\316\373=\177\312\217>\313\243p?\304^\235?\032U\"?4F\224>\232V\t?\212\335T\276b\313\002\277\2061B\276\240\373m>\266\246=?*q\027?s\341\212\277\377\306\336\277\322\271i\277\026\2761\277\346\243\374\277b\343\205\277\016\252\204\276\334\t\204=\007\331\204\275\222\314\333\275\325)\213\277\034\r3\277\374O\017\277\250\253\270\277\030\232\027\277H)\274\277V:e\277B*\366\276g?\270>*\370\316=\214\365o?GC9?\310\002%\276\006\347\203?\372\376\364?\346\305\r@~t\020@t\200\006@\034\312\272?\364&\327?q-\265?\206\322\231>yh\202?\322\202<?\200\213\270\273Cs\277>\022+\004?\252v\230>\321jk?#\334y?SRr?r\357d?\322\026\233?XT\000?`>:\274\231\340\'>`\020\337\2738\371U?\347\205\310>\324Sq?=\233\020\277>\252\026\277\242u\232\276\260\366@\275\274\"\275=\016\362\031\275\316\243 ?\022\357\277\276\252\322\323\275\370\276\363\276M\365\322\277\250\355\004\276\206\224t\276\362\374\356=\234\270\031\277*\345y\277f\035\234\276\363\260\002\277\306\230\022\277\016\017C\276/\276^?\304W9?B`\333?6\330\033@\255\373\021@\264\257\271?\034\026S?8p\213\275\235\253\251>\376\215\321\277\r\233\331\277\032\321j\277\3148\356\277\323\034\t\277<\373\245>DQ\014\276\312\3714\277\216\"\256\277:\250\232\277n\335\302\276\010\205\017\277\261\022O\277Dl\227\276z\322\\\276\032\367\001\276\371\321\221>\255\021\003\300X\032\350\277Y;\233\277\031\023{\277Y\227w\277-K\035\277\355v\203\277\276\303=\277\253\2205\277x\333\222=\277\265d?_kG?\235`\244>\351\336\221>\210\364\345>Q\272\201?\357\034\232?\n{\304>\320\031\247>+\271\201\277\346\203\221\277\375\271[\277\254\024\263\277\034\361\033\300\030p\343>mn\216?\230\365g?\002B\363?v\010\023@\313a+@\260\215\003@\324(\261?,&\227?\313&\232?=J\256?<\213\014@\\\025\202?F`\276?\003\213\305?\215\021\200?\034c\240?k\246\323?\271\263\254?\300\"\177\275\375@\263\275$\244\244?&\013\342>\240./\277`7\002@\306|\035@\305\276\016@\276\t\215?0\215#?X\350\370>XC\016@\271\347\363?\304\360\014@t\263\036@\372l\024?\215\320@?N\031l?\330\027\273\275\353&-\277(\312\201\277\220\221\200\277H\273Z\277\264\301\346>\315\237\312\276t\035\315=:;T>\361\237Z\277\235P;?!\354\r@\300\224\232=\317!\305\276\377\246\240\277\344\t\302\277\332R\017\300}/\311\2770\246[>\237/\220>\340\225\236\275\240\246\242>\026\301p\277\035>;\277\204U;\277\346\352#\277\020\035\340\275R_\320\2772<\275\277P{\007>\030\313\264\276\302\327\315\277\332\266\006\300|\275s\277\244)`\276\360\315l\277\355o\007\300#E~\277p\321\025\300`\320k\276#\"@\2773\243Q\277\256\035\367\276m\207\216?X\370\n\276\222\266\006\300\353\312\243\277\262\t\357\277m\200\230\277B\005\333\276\300\266\304>~\244\313\276hpW?\352k#?\201E\303>\226\204\023?^\016\001?\355\n\326\277=\214\205\277\374\tC\277Dc\300>F\242\214=t\200\373\276p\352\213>\222;f\276\370\306\341=gR2\277\324\356R\277\370\345\335\277\356\372\323\277\257\375C\277\0105}\277\006Y\333>\361$\242\276\2354.\277\242\207H\277\330=\340=\354\365\340=1\215\031>\331\373\306\276\315n\035\276\034>\240\277R\265\277\276\010\004N\276\252?\245\276e\036\276\276>\343/\277n\244z\276\333L\016\277\nj\002\277\343\220~?\003\034\241?\200X\250=\244g\260\277U\257K\277\350\214\250\276\276w>\277\306\241\300\277P\276?\277$\373\350\275z\306\242>j\323j\276n\007\323\276\010\371\277\277\004T\004\300\334\275r\277\306\032\004\277t\237l?\030xG>\244kI\277\366\361\033\277q\027$\277\336T\211\277N\306\325>mc\311>\021+\233>4\302\240=\356\255\010?z\243\370>y\007\225?\304R\371>\377s^\277\324\236~?\272\352*?\372\365\272>0hj?\265=]?\300\363\207?\020>\266?\0247\315\276\025=\312\276\004~\035@\260\226\233?Bu\265?\247 \240?\035\225\271?`\346r?\004_\266?\234b(>\260\033\257\274:f\314=\004\023\026\276\264\325\200\277\222g\364\277\342n\377\277@\237\221\277Zd\006\277\216:\025>\344]\323>\3325M?\036\236c?\256\251\342>\000`z\270{\243\341>D\363\005\277\210R\235?\"\377\331?|\005\316?\347,0?\002\031\310\276JNx\276^\312\022\276\255W\232\276\031\313\010\276\017\036\262\276\310\361]?R\373(?[\276\226?\257\035\355>\262\":?I\325\031@\302\007\003@\256 \315?x\200\204?\377\026\'?\343\304\t\277\024U\025\276.\216P\276+\016>\277\247\372\035\300\034\007\035\277\373\331\335\277+\240I\277\332\217\027\276J\271\036\277\204\302\316\275Q\006\025\2777\301\313\276\026\000!\277Mg\357\276\215q\254?\334U\357?\261\217\347?\331\364\275?5\252\371?\346c\007@\017^\r@\371i\031@:8F?\257@Y?p#\266\275^z\016?\240\004\335<\212\032;?\220!\273\276p\024P\277\303g?\277\355H\037\277\242X<\277\362Ph\277d\305\037\276\010\322\205\274\201a\274=\372\362*\277\026\242\234>\264\354\223\277\2126\343\277<\032\253\277%\020@\277\001\254\372\276XZ\371\276\'\371\022\277v\244\325\277P\313\323=?\324\372\276\342\031-?\370\007\327\276\321Q!\2776\306\276\276\322V\022\2770\267 \2770[\325>p\261\212<\\\2275?\312\354\037>~\030?\277\311\277\226\2760l\240\274;\266\023?\345\323\335\276\024\263G\277\232FX\277|\032\300\277)#\202\2776j\261\2770\251r\277|\260!\277p\031\301\277\005\276\210\277\224bg\276\200:\377\275\273\334Z?0x\267\275\025\342\212\277`(\214\277\214\035\325\277`n\031\300d\351M\300\224\002S\300D\323\n\300D=\226\277m\325#?\260E\r\276\004\246;\277\300\365\305<\375\3213?\220\002\212=\257\316\002\277\322\\<\2778\256\325=O+J?@\261\306?\250\343\373?Te\300?e3\261?\320\372\225\2769\037t>W\215\340> `\364>@\233-\276>\2727?b\320x?\000\311\337\274\365T\303>\214/\277?\274\036\372?25w?\350\010\260\275L\260\003\276\346\005u?\270\"\213\276k\177W\277\264\361|\277\250c|\277?\023\267\276!h\r\277\343\t \277l\330\367\275\314\365*\276\202$\335\277&\004,\300\237\366\023\300\006\002\232\277\302\273C\277f\367B\277\370\020\276\275U\260\324\276\205C\327>l\233?\277\312\225.\276n\301\351>\372Bs\276\266\321D?\270\313\350\275j\314]=8\232\340\273\030f\034\2772}E>\326b2?\210\322H?\210\215M?M[i?\200]\222\273K\\\307>z@3\277\306\260L?\302t\253\276}\006\243\277\311\246s\277\336\355\034\277\352\036\245>p\035}?DY\221?\014#\333?\026\217<?\312\315\356\276\025\227v\276\220\371\231<\347\347\214?\327\362[?(\307\315?\1777\300?`\272\215?\200JD?\277\223??\360\224d=\353\257\236\277\026\365\203?\322%.?@\254L\276\240\246\265;\274\361\214>\224\230I\277I\347<?\366\326\016@*\032K?j\256\304>\304\322D?\244hj\277\020m?=~:\210\277`,L=\023\005s\277\260\223\210\277v\373\370\277\024\010\037\277#\374\212\277Ha\261\275\316\\\025\276[}\343>:DW?@\313\243;\347\3544\276X%\240\277TB\035\277<\2477\277\306\363q\277S\205\343\277a\2477\277&\014\352\277\263|\351\277\214\300\245\277\010s ?\204\026\234?\257\321\223?\364\353\\? \277\236>\025\022\255>0\234\211\276\226\264N\277J^]\276\333_\301\277\036\235\030\300g\001\265\277\333K\242\277\340\010\247>\317\006\231>\035&\242?\241e\234?zu^?\0206\237?$\363Z?\300`\323<\221\264\032=\3565M?\n{\220?\213\250{?n\210\244?\254\273\222?\310p\023@O\255h?\340\252\327\274\001]5\277n\020\027?\370/-\277n\253\215?\021\t\023\277\372\313\375\276|\005\260\276\273\370u?\026\023\251>\304\364\251\277[\254q\277,\361\337\277\260\227\006\3000lD\276\332\236H\277\206x\346\277\013\333\233\277|L\375>\016/)\276\\@h\277&L\252\277\002\246\356\277\310\311\026\276\214\024\373>I1\223?Z\324T?\300\013\336\275\210z+?\324\272\213?\322\026t?\316\214w?\210\210\306\275p\320\353\276\234\234\351>~w ?\340i\214<\257\352\213>\271E\'?\342\010\204?\364T\235?]%\265?\232O\031@\232E\272?hS\007\277U\305N\277\000\303L\277V\373\276\277\250u\332\277r\326\230\277d}\243>\034B(>\220\t$?\\7\'\276\002\020\014?\311\206\372\276\340\2623<x\201\247\276V\233\r>\021B\213\275\346|\254?\274/\347?\224C\370?!\240\276?\200d\023>p\262\250>&Yt>\204\225:?\216.\000?\234\024\263?\240>\'\275\317\224V\277\031+w\277\255\034[\277x\227\003\2777\251\206>\272]\277>\212\356\026?\200\312\233=\020\301h?\206\355-?\332r6?l~V?\\B\226?\0369\r?\240q\'=T}\324\274L\223\342\277HQ$\300\273\336>\300\034\005?\300\336\206D\300\206\035t\300\235.k\300\353f@\300\310\321\000\300c\021 \300\272\237\310\277\255d\004\300\030\337\322\277s\242F\277\214\326e\277\352\305\367>\214\016\001\277 J\035>\342\231\332>~\260\251?\"X\337>tH\322>\002\030s>\276Y#?\340\211\307>V\336\305>\362\027j?JW\340?\254\326\304>\307k->,E\311>\330X\361=\241\273\221?c:\232?6\335\364?\236D\375?\222J\213?\020W\252\275`\305\263\274t\313_?\252j~?\302\247\004\300\nK*\300\312\243f\300\324\366\260\277XJl\277\324\233\t\277\002\214\002>t\017-?\220\337,\2756<l\277\307\353\224\276\3306\200\276\002\337\341\276\000\213\277;\032Q\200\276\220\225\204\277<G\004\277<|\311=U\223\n\277P*v>.!\367=51k\277\267N4\277@P|<H\235\342>P\222h\277\372\235\257\277\246\233\344\277ID\254\277G\303\213\277\004\333\'\277.\314\357\276Q\227\327>\223\321\220>h\023\263\277\271\005\021\300(\276\357\277j\320\241\277Lhp\276pg >\206\350\031\277\027\335\240\277\025\252\305\277>M\037\277:\244V\277B\360\240\277(\313\372\276\374|\233\277\360\222\035\277t\036\207=\327\223=\277\214\232\315\277>\216\256\277\264\366@\300\035a\001\300\356`\337\277N\260\305\277\372#F\277\026;\235\277drN\277\360\203\270\275\036\350\022\277\360\245??\331\353??V\016M?\004vg?\257N\023@$\362\000@\246\0008@\244\350\016@\340\334\010@\377\035\001@\352\0212\277\210\241\255\276\362}#\277Xt\177\277d\305\260\277le\227>\322\263\360\276\344k/\277\354\212\252\277\355\013\214\277\023\354\017\300\350 \301\277\200RW=\263\221?\276\206\356\035?\\\300t\277\200\224\035\300w\226\307\277\344\201\355\276\250\201\341\275fI\201\276\351^v\276\032\005\266?b\314\300?\312\372\016\300\330\215\350\277x\376%\300\324\3539\300\313\327\361\277\345\273\372\277\322\237\321\277\n-\026\277\256\\\370>C\354\300?\272\336\020@\264X6@@\221\021@\330\347\320?U\036\270?\021\257H?\274\305\343?1yx?d\344\244?\006=3?\212@G?Z\241\335?\320\244\003>\366\212\252?\314$\215\277\310UT\276\013v\341?\300M\262>\356[>\276q\034\010\277U\345\242\277bz\363\277\034\206\204\277\335\275\002\300B\320$\300\216\255#\300\237\3769\300P\375\033\300#[\013\3001\316\"\300\207\227d\300\311tT\300\227\306n\300\310\003%\300\234\323\026\300\300\203\"\300v\235j\300\006\231.\300<\225,>\243D\352=\2701J\274\257{\226>\215\2248\277\217\225\305\277\234t\304\277\210\267\364\276\203N\206?\352aR?s\335<\277G\251\325\276\234B\004?\355?\244>\034\346L\276\036\203\323\276\024?2\277\240>\220\274,\'\201?\246\257Z?,\027}\276D\001,\277\244o\257\277\237\274*\300O\374\022\277\345\367\254\276\023Y\031\277\372\331\355\277`\255T\276\335\314\006?[U\264?p\357\315>N=E>\330\030\230?\204}y>B\0042?\226Q^?\332\260\017?\275&\221>q\032\241\277\216\252\342\277\230,$\300\232^\344\277\000 \323\277\330\220\033\276\246\324!\276K\025\005\277\271\220\216\277\274\375\207>^7c\276\025\351\017\276\001\016#\277\260RY\277\004i\377>2\025\255>h\372n\277\007\271\326\276\201\266\306\277\204\235\034\300\347\031\247\277\323\226\t\277,\'\027\277s@\203?S\363\276?\345\356\n?\032`\354\276w\207\317>!\n\222\277\010\355\023\277(\211\037\277\322?\307\277\364U\236\276\310u\252\276\226z\026\277\270\306\257\277\363\246\271\277\347<q\277\210\237\013\300\236\370\022\300\331\014\373\277\274\317\331\277P\000\274\275\217\302\276>IFv? \330\366<\316\333\224?\026\205\355?\241$\316?\013\004\243?\230\255\014@\264\231G@\243c_@\030Y\355?\025\245\343?\342\023\264?|\245\334>\377D6?P@\353?\222\032#@vT\027@fO\034@\360u\371?\375\241\240?\206T\032?\333\027\232\276\330HK?\356\227\255?\000\217\216?\314\021\230>\304<\252\277\204\002\"\276\354\356\244>\353\036\262?^8/?\351\271\211?\030\346\331?U\330\234?mx\177?\373_G?\307\253\220?\200\240\277\276\232\326y\277 \346\304\276\202\035a?6\251\036@\216=\220?\007\201\214?\220\263\274=\363\0300?6\245\244?\370\304\212?X P>\276\204\"?\312\252\324>\346V\347>\234K\323\275TF\360\2768,u\277\372\276\206\277\002}\031\277\214|4\277j;M\277x~\330\277\322D\336\277N\336\315?\204\021\334?L\265\245>\000\307\016?\226\351\265>2\234L?(\366\371> \207L?\224O\272?\265c\023@\026\206\'?\"\272\237?.\306\265?\3325\236>\032%\022>\371\306\033?.\255\006>\372\3168\276\360\256\n\277\272aN>\220\"\034\275\301\230:\277\000\330f\275xW\210?l\244\035?h|\230?\376j\377?s\271\026@\020\t\233>w\005\035?#$c\277\246\256\273>\376P\365>:\233{\276\267\350D?\034\207P\27663!\277*4\314>\310@g?+7\216?0bR?\330\265$?\000\'\243?\022\314\266>Z\006H\276\332`\255>\302\274\357>N\341S\277\03512\277\006\311\214\276pU\033\274d7\001\276.e<=\r\315\003>,\370\220>\324\377\215?^\217\265>\226Q\232=`Dg\277\324H\312\277\3400\000\300\240b\272\277\002$\340\277\327&\024\300\223&\n\300\032\016\204\277\260\365b\276\003\334\354>{\276\262>\225\212\210?\367{\037?\252~\005>\351?>\277\253\203\024\277\000\177\263>d\262\021\277V\236j\277\223p\213\2776*@\277\335\254:\2773gp?\357u\225?@\253\201\275\276^V>\000\327w\277\302\300\312\277dY\375\276\024\237\244\277\365{\311\277\027K\235\277\030\336\255\277\3576\270\277j\272\251\277\232\240\035\277x\006\362\277\007\326\343\277^iQ\277D7\250\277&\272\211\277\310\026\031\276_\210\257\276\354%\244\276\216\023$\277\346.\330>\330\'\234?\024\312\216>~\317T>\037\257\306>c>\327\276\321l\020\277\312T\230\277p\226I\275U\302\263?t\274\273>P\222\211\275dQ\217\277L\346\t\277\017\205\246>\007\274\270\276@\013\\?\273\217\032?\027+@?H\326\335?\252+W?\331\277%?\256\253\225?\311\2500\277D\237\245\276B\276\221\277\372\215\240\276=\272\254>\014\233\021=8\201\302>\016\253<?@w\030\274 2!?~\0107?::\302?<uZ?\377\033\331>\000z\003\277\033(\206\277>K\334\277\036\340\031\277\177\325\262\277c\327\361\277\356\264\236\277\230\334\245\277\277l\023\300\2256 \300\227\355\025\300\017d\373\277\267\365\034\277H\032W?\236w\364\276\233>\220\277R\200\034\300\'o\026\300:j\251\277`\260\246\277xZ\237\277F\204\263\277\354\331\315\277\323\201\034\300\365\237\301\277\234\253\272\277\332\362\245\2772\244\225\277L\267\225>-\270o\277a\334\303\276\277\037\317\276S\036\256\276\320\256H>\221z\374?X\311\237>.\2146?)\266^\277>=\274\277\033d\201\277\310BI\277@a\001?\341\237H?\0225z?4\320#?\000WW\274A \212?\034\305\351\276V\255!\277\324.\254\277\376\306\026\277\250\266s\275\371\370\033\300~\003\324\277+S\251\277\353ep\277T\375X\277\212\244$\277\354\372L\277\366\014\003\300\266H\326\277l\022-\300\033\021\332\277\264N\303\277\234\025\374\276\362\036*>2Vq>\220\216O\276\325-\217\277.O\206\276|\006\022\277\305\026A?\017\007\244>B\275\227?_\001&?H\331z??L\265>i9\016?-\020\314>\365\342+>d\002\204\276\344\034\020\276\336\321\225\276\027z\017?\334\310\237\275L\270\205\277\362C\306\277\274 \272\277\233&\207\2779PO\277\234\276\216\277d\243\017>w\343\021\276M\341T\277\302\353\216\277\364\330\001\300\030\353\004\300O\226\346\277\362\317Z\277H\274\000\2760\275E\277\230\265\200=~\nr\276\315N\005?\035G\262>\312\'}\276\344\225\027\277U\230\364>\352\230\001>dhz\277\333\306F\277\245\264\343\277\347\007\340\277g\261\367\277\355\301\301\277Rz\313\276\000 m\277\240YX\276\362:h?\364\023A>LC\251\276\034\026q\276\274\362\306>>\016g?\202z\303>}\270\014?f\021\204>\210\202\230\277n\252p\277\030M\037>\264\354\230\276Q`C>\362\242I>\032\320\231\277\275\017J\300I\257M\300\020\312\303\276H9?\275\306\360\242=\356\033\212?f\250E?Pr\321>\315q=?\364\356\347\276\372+T\277\310\210\273\277D\374\370\277\214\221\213\277\274\276\252?\360HK?\325\235\253?\250\260I>n\004\254\275OW\345>3\205\303>\224\251\323?*\370v?JP\305>C\004\257?F\226\337?n}\254?\237.\037@\233_\320?\255\332_?\274\335\021>\356\2103?\226\320\025@\201P\276?R\\\247?\006\013$?\303u\005\277\354\\\224\275=\2720?\256\236\356>LEd?s\341\220?\244\006\224>\016\'3\277\260\205\'=\021\244\241\276\\\207\002?\223\241\354>\354\263\243>b,\036>\001\204l>\276\013\276>\250W.?\330\260\036\276f\207+>\022V\305>\230\331n>\3500\207\277 j\250\275o\315\222>\000\"\3129\002\371\272>\340@c\277\033\315s\277\360\374\024\277@$\240=\016\257s\275ae\230\277\036\013\253\277\202\362$\300\010X \300V\272\016\300\352w\230\277!\004\204\277\222\026\225\277\240\314\245\277\355)\344\277\016%\003\277\203\252\257\276@n\005>;\016\036\2777\276`?)\300\r@\006\200Q@\370\006\003@\302\250N?\007(\t\300\336\2365\300\024j\242\277\360*:>\235w\275>1\272\362?I\227\367?\021y\210?>\225\013?n\323P?\332\\\031?(\377\276?\316\344\352?L\323\032@\252\013\240?\316\337\246?b#\005?\267\223\004\277\261-\262?\366!\014@\363\364\246?wUJ?\202\351\220?@\266\257?\344W\321?\322a\324?a\026\207?V\n/?f\347\315>\300\r\257>\005\201F?R\364\240?v\214\007?q^5?\247\326]?]n\223?\352U\262?\014\"G?\212\\{>\\\355\276=\000\t\n\273\005\002_\274\322\304\300\276\261\337\262\277\005\023\014\300\230i\r\300\000d\036\300\336a\010\300\000$\361;2?o?\000L\250;\236\r\304\277\277!\226\277\321\r$\277\323\256\353\276\313\377\215\276J8\206\276\273\265\022\277fv\244\276{i\240?G\325\244?\231\341\200?\364\177\270?\362!\307>:CE?\366tl?\006{\202?*\006\257?\2209]>\236\252\221\276\316\337\261\277\274W\373\276\304\307\346\276hzk\277\200bi>\321\026l>\200$\t\275x\227\243\275F\330\t\277\354\340\362\275\254\324\212<\t\260e\277Tu\'\277?Lj\277\306\242\264\277\024.\271\277C\007Z\277d\230f\277\016\201\021\300?\233\351\277\266\236Y\277<\010)>h\3067\277\350\337\216\275_8v?$\347\307\276u\273l\277\344\260[\277m./?f\026\237?\005{/@6)\037@\t!\016@\354\310\007@k\344\363?\347\211\013?m@\237\276\211\024g\276V\324.\277\005\271\246\277\035\251D\277\366\237B\276\266j\201?h\305\356=dC\201\276B?\016?\230\212\305?\210\260\r?\002\"\"?\2526p?\245\265\007>\351%t>fz\247\275^\227\266?R\243\234?rS\347>\240\001\304\274X\262\027\277\200b\313;p\021\314>\360[\347?\243\020\345?\336\346\224?T8\351?\212\021\020@\316?\251?\016\240\341?:\332\034@h\'\330?\3701\202?\366\203F?o\202\370>\324\367\301>@G?<&\341\204>:\352\247\277n\310\023\277I\007\342>\350\022\024?\364\225N?\244Nu>L\027\031\276M\224\377>\034\326\022\276_\212L\276\243\344 \276\336>\323>\300\201\'\275h\326\310?Z\360\252>\021j\"\277s~\273\277\213\351\203\277\266\177\325\2770\214\356\277$\364\313\276PQL\275H`\250=;\206\341\276+\321\344>_\275n?\263\t\254?\216K\362>\010A\022=D2l?Fj]?`\376\346\274\312]\'?\300v\023\277\320W\005\276+\255\347=*\351\030\277\3240\007?\337Q]?\301\344-?\020\224\026\275\304\367\246\277\235H\270\277V+\234\277\224\366\224\277\220\302\014\275\354s0\276\205\232\016\277]?\230>\353\r&?U5\226?\237\265\353?u\371\271?\\+\003@\237\335\236?u\252\277?\372\321\270?)\222\240?_\202\375?M\351(@2\274\372?G\205q?\370d\333?z\315\340?\241\323\267?\347\nj?\276B(\277\357\326\322\276\306Y\220\277T0\020\277\\m\324\277{p\201\277P\275\313\277O\350\321\277[\314\211\277\200\2067\276\305`>\277\377\276\214\277\023.\342\277\023\367!\277\302\237Y\276PpT\277\370\223\270\277H(\331\277\332J\376\277+6\334\277e3+\277T\206G\277\037]\205\276\320\220\317\274\260c]\276w\026!\277\217r\202\277\222)\205\277\23171\277\236\\?\277\010\205\305\277!\322\314\277\342\307\266\277p\361\203\277\356&<\277\322\372L\276\320y9\277L\302%\277\250\220\331>x=\\>h\262\222?iH\002?2\222\007\277\371\275\023?\314\330\230?\224]\306?D\355\206?\237q\272?\216\342\251>\346\3079\276;U\025\277\243\245\r\277\201\363\333\277Ab\022@\366\204\377?\220\373\306?F\332\203?\330\300(?\030\376??\316|\271?j1N?\341y\202?\257m\334?\212\275\016@\220\362\370?hFs\276\340\225e=\337\3306?\000\271l>\332\266\220\276\260\033q?\370\277\211>7\031\201>h\240\022=\010<\271>D\301\023?|r\244?\305\202\204\277*\032\215\277`\334\336\277X\335\000\300\231:\331\2778\374Y\300=Z9\300j}/\300\241\202\227\277\330 \226\275\321\354r>\212\030|>\211\224I\2764=\006=l\002\001=\344\317\027\277z=L\2771\001\255\276\222\301{\277\323\034(\277t\005|>\350y\r?:0\315>@\247\235?H\245s\277\314\234\226\276\2320,?\225\022<?\320\2359?<\266\310\277\235>}\277\340\002\260\277m\320\270\277i}\033\300\234\016\344\276\374\232(\276\006\2542\277\014:\245\277)\233\266\277\236\275\361\277\272\255\013\300\364\034\361\277\352O\"\277 r\237<Z+\003?\350tZ\275Q9\350>\266\010(?\207*B?X\214\335=P!\215=\3447\233\276\374\300\003\276\352;\307\276kf\301\276$H \277e\245\344\276@\361\016?\254\222\235?\242G\315>\364\326\340=\347M\"?h\211+\277\223\342=\277x\356\327\276\352\316\004\277K\t\350>m\267\326\276`\316]=I\001\364\276\230\000\224\276\246\300\233?\326K8\2771Q\025\277\020\363\205\275\000\327\223>rrZ?IrE\277+\233H?\340u\001\275z\004\223?\036\224\215?\177\271_?`\r\'=\204!\356=\333j\272>6H\003?\237:\224\276\0267\331>\000s^?\261\276\373>%\265\274\276\210\246\311\276\377w\327>\n.\244>kH\221?\342\352F?<\261l?\210\211\347?\317\010\365?\216\317\r@b{C?i)W?\230\363S?\220s\256?(\321\213?\000\2413\273i\215a\277H%\232\277\037-\214\277/_\203\277\223t\300\277\224\220\363\277\3677\245\277\t\032\261\277\357\333\002\300\334\327$\300\335L\007\300N\364B\300\n\352\367\277c)\002\277\335!&\277\030N\021>|\225\"?\\\227\214\276\235 R?\\\353\221\276.\354\022\277\217\276x\276\374\311\374>5\255w?HI\215>\276^\216>y\267\350?\315\312\301?\240\325\300=\332\244\251\277\3415\234\277\260\333\235\276n@\271=\276\222\031\276x\n\300\277x\273f\277\206\225\360\277\256\2620\277\277\233%\277bw\302\277@mc\276\374\302\310\276\367b\267\277\200Q\255\275\207vJ\277\242\311\022\277\034Q\234\277\013\345\235\277\216s\277\277&\327\021\300\224}W\277\320\006\221\277\221\263\233\277<\301\321\277\370\225\272\277,\3348\277\210\257\300>\327\302\t?\023\323\003?O(>\277\240\016\367\275\007\031\202? \243\203=\260\347\264=s\246F\276<qa?\304B\354?c\313,?\310\310\355=V\200\213\276\254{\334>\036\257G?\020\246\304=\251L@>\362\031\203?\316]\241?\202\272\032\277x\210\245\277\203\356\344\277\2431\362\277<\326\307\277\224I\256\277t\206\233>\370\272\005?\220\231i?\240k\234>\362\013\263=\203\023_\276\267\223)\277\310lz>\304\227\234?:\022A?\000\213\315\274N\343\323>m\256\272>\245\325\222\276\205\234\211\277E\230\305\276\310\3231\277\326\031\030\2765\330d>\226cP\277\2538e\277\211\224:\277\2228O\277\252\326\355\277\230xd\277\304\003 ?\342\315\344?&\357\304>\252\352e\276bF\202\277\177\272\241\277\354\374$\2776/\025\277\2509\023\276R+\002>\213\234\312=\250\r\214\275m/\277?\261R\250?\241\336\274?\200\352!?l\326q\276Z\260S\276\234\227N=\360_\205\276\001\'\007?\214\257u?\251G\220?\254\352\335?\236p\362>&O\243?\204\324\316?_\326\204?X\320A\277\313\206\023\277\033c\341\277\360\034\352\276W\267\204\277V\232\007\277\236\204\322>\030.\027?\265n\244>\232\t\200\27630-\277x\030\006?\204U\271\275\230\337j\276\222\t\000\300[\371u\277\346\003\177\277\360\370\206\275\000\204\225\2777\200X\277RQ\257\277\032\250$?R\256q?\350\324\001@\212\217\362?(\r\267?\230\033m?\264\371.>\013\010\235>\237&\"?\030d\376\275\325.\256?\010\324$?&\325\017@t{6@s\252\374?\327\270\317?\345\334\027?\221\335\n?\323\250\243?\204\242L>\267\305\000\277\266E\215\2774\227|\277\200\216\353;Z\276\035\274$C\256\277\350%S\277\342\032\234\276\355\237\223\276\344\260\202\277\226}\n\277\274\004\032\277\340\371_>\376*\307\277\037\2321\277&\034\230>\362\314\264\275r\033\365\274\306-\n\277\200D\202\277*\000%\277\032\r\232\277\262\237\373\277\302\330\311\277\226D\376\277\301\311\214\277O8&\277 \245\261=V\230N>8\344\365>L\357\371>pU\177\275\237\327\276\277\321^\000\277*\032\022\277qw$\277\304\251\'\276\270~\371\275N\353\350?\3669\001@\220\334N>\310\244\006\276\354Zi>\265,(\277\000\214\304=\234y\272>\343\276\263>Z\177\252?\320\210(?\031\272\001?U\022O?\200\272\355\275\316O7=V\204`\276\370\305D?\246J0?\207Eb??P\026?\234\223\007>\205I\327>P\300\r?T\026\260=\303N\036\277\000&\256\274\233\\\037?\306\023\005?\374#\202>\211\360\004@\2655\022@\203c\365?\274E\020@p2\313?\020f\001\276h:\020\274\304\363\250>\311\357~\277\031?\340\277\036\013\263?\016F\251?\030\221L>\020\017\210\276\330\233\220?\230$\010\277\374\235~\276\250g\275\276I\035\305\277\001d\250\277i\362\336\277e\017S\300ljM\300\354\302k\300\211^]\300\010*+\300\346\276\344\277\350\233\242\277\340HT>V\034\231>(4==\2643.\274G\371\357\275\\\212\355\275Q\035r\276\024\333\201\277.[N\277Ah\220\277\357{\036\277B\005\354>|\031\347?\036\2120?p\250\225\275\276\032\322==|\304\277\352\300U\277\214\377\214\277\030h\213\277\000b\225\274\237Q@?\266\037\314?\332Q\022@\346\243\204?9\271\365?}e\r?\273Z\225? \332\234=f0\027\275T\220\n\276J\016\235\275E\324\222>\305\274\220>H\021\003?\022!l?h\247\203?T\304B?r\013_?\327Z\177\277\022A\302\277\210\217\344\277*E \300\004\025\350\277\342W\357\277\233(\262\277\032\225\177\277\200t\207\276\256\375\300\276\320\032G>\372ZD\277x\371\305=\005\023\273=\200;\024\277@HG<\244\321\366\275\350\252\217?\\\224\'@\202M\242?\303\027\206?\247\300~?\240\311\222=>\352C?\226\332\202?\263\267g?\035\320\216?&\267\230>\016\202\254\277\332eO?z\246\322>Xq\007?\342\244\177?.&\372?\331\271\204?\227=\030?\2227H?\330\366\223?c\350\262?\371\005\323\276\223\302\352\276j\253\307>x\337\'\275\365\246\330>\204\234#?dH\272?[F\013@\020U\322? \304\321?\033S\276?\020NU?\020\366\210?\002\352\033?E71?$\014\212\276\022\341\320\276t\366l?\340\001*?\325\360W?:\303\261?\315[I?\362gb\277>\357H\277\351\215\227?I\327\031@\222q\253?,\320K?|1\016@\030\032\021@\256\374s?\230p\215?\034\232\346?M\203\005@\034\352\023@gr\200?0\372\201\275\371R\374\276\371/\245>\220\010\320?\273\241\257?Z\307\240?\000\304\222?\234\'\225?\276,\271?p\367\270?duT?\034\215\264?\200\334\254?\342A/?\2248\240=E\276\001\277\271~<\277C\022X\277\235\237)?\n\376\356\276\000#4\274\313\032\354\276\274\021\003>\016\330\256\275P\347\246\276&9v\277\242DT\277\333\'\014\277\354\025\221=$\327G\274{\253\266\277\272\337D\277H\014\251>\264/I?V\203\335>\327\376\353>24!>\r7\203?&\2275@\235\374\374?V\201K@0\202\006@0\234\200\275\216\366\324\2777k\355\277\374-u\277\273\2405\277\262;\237\277j\215\211\277\262\207\006\300\200;\\\275\342\225H=\2014\233?\227\263\371?\215\245\037@T\345\372?\245\277\267?j\313\027?d7\227?\210\376\277?(\350\031\300\276*\346\277\277\376\204\277Yg\r\277\336P\237\276`\250r\274?\237?>\036\346+?0\202\230\275\232\004&?\372\265\005@\315\233\307?\275B\306?:@\330?\330\335\274?Pz\033>`{3\277\320\0067\276\036&t\277/\236\231\276\263%\001\277\215x)\277H\316\263\277G0\245\277\375\256\007\277y\357\216?\337;\363>C\024\017\277\3608\n\275I\3750\277\354.C\276\226dw\276\n\334\222?9j\365>\244\341O\277\306\177\270\277\017\353\250\277\244[B\300\205H8\300\037\373\001\300\2708\030\300\3076\321\277 \005\207>\224Z\206\277\332\256\313\277\354l\220>\322\333\025?\212:\353>|\365\256\276\311\330\270\277`\357\r>\365\263=\276\027#\265\277}\000!\300\320d[\300\357sQ\300B\267M\300\006t\352\277\220~\261\277\277\177\004\300~\344\312\2772\354\216\277#\350\262\277\270\243\216\276\314\232\307>\222b\272?\216^\361?\271:B??qQ?\200\344\017\275^mi?\312\314\213?\226\343\202\276\314\216\245\276Dq`?TV[?\017\024\024?\354~:>h:\220\274^\327\033\275:\226\277?x\024\007@\317\215p?\213R\230?\335\026\233?\350\240\206?\304\010 ?\023^h?,5\013?\246\201\243\277l|\177\276\t\013\345\276\344_\225\275:\034\270\276\374\356\265>\230\374\242?\347\314*\277\001b\314\276\322c\003\277\254r\236>\200\215\303:\356Y\014\276\335,\330\276\014\005\317=\311\231g?XuL?\002\027\324\276\374\313\371=\337\261\034?p\277x\276\333\233\324\277\"\023\205\277\016\224(\277u\'$\277\202\3748\277\232\026\333\276\272\024\362\275\231\246\270\277z\372s?\262\246\310?\274\224 \277z&j\276Yx\207\2762\226\270=bL\200?f]\265?3\376\376?\261\2475@\362_e?6+\323>d\034\370>\227]\272\276;\250(\277Z*\317\277\271/|\277\366\344\200\276\224X\370\276$\331@\277\000\332\036\273p\360B\277\013\315v\277\023\217\375\276(o\306=\340\321e=\004n\213?Q{\371>\223\371\265\276\274\006\032\275\247\206\242\276,\241\347\275d\357\230>@\335\000\277S\312\037\277\270.\317\277\367)\005\300`\245\367\276\020N\207<\364\261\337>B\337\274>\210\177\274?\320Y\243=V\305\275\276\322\354\351>\372\361\023\276\017P$\277\025\346,?\316\242\"?\000\346\024;<^\312\277{g\207\277\300V\335\277\274\267\201\277\000$\243\277\270\260\023\276\244\027G>1~\\\277x\354\017?-\035\213\276k\027Z?\340\026\212=E\375\203\277@\217\031\300\326\371\217\277b\312n\277\000^.=F\246\355>hO\275?\004\2349@\246\271\317?\023`\364?\027\017\326?N\377n?\244\365\'>065\275S\247\205\276\315\205\210\277\360\203\200\277fx\233\276z`\315\2760\035\204\277p\322\303\277\244\236k\277)9\256\276y\314\300\2767\243\221\276[\007c\277\343\2318\277\334\274\326\277$\314\354\277\232\356\204\277\357\036\350\276\237\023\357>\356\215\223>\027\257\371>\344\370\327=?\276\213\277\251\321u\277\317\005\000\277>\274\016\276\275\367U\276\211\322\t>Z\331f>\342\353\033?\n\007\252?Y\302\311?t\336\356>\032\032\231\277\000d\213\273\256\303\035\277\020\304\375>&\221\032?\234\253\275>I\351\346?\006\324\245?\304)\270?\274\221I?\035C ?@,V?\261y\304><K\325=\032x!\277FV\305\277B\361\000\300B\277\026\300\010\\&\300V\3755\300?8\253\277\"E\256\277\321=\357\277#M\335\277\255\366\272\277\200\316\331\274\266\213\343>T\324\212=\001dJ?\352\272\274\276\030]#>\344\253\330\275w\326g?D\216\311>/\245\321\276\303 \210\277\241<\226\277\024\3368\277P\"\323\275\314S\237\277,\357\226\277J[\316\277\004\333\264\276\242m<\277x\016\361\276\316\202\305\277\331>\250\277\000\363\365\276\255\332\234>\260I{>\216\322N>N\233\331\275h\307\221<?\205\332>(s\315?\333\035\221?\026\367\324?)\370L?\360\005\257?\330[\356?n\224-@\';$@Y;4?\206\243V?\020\212M\275\206\316\330\277r<\317\277O\315\244\277&n4\277\315o\277\277\030\000\344\277rQ!\300\226\035-\300h\346\324\277\2571\250\277\355\203\212\277\240\014\220<\261\004\036\277/t\235\277\200\357\210\277\237\236\211\277+`R?\350\251\256?\032\241\260?\376\373\341?\0169\372?rQj?\250\327B>\014\357\217\276L3\340\276\275\022\r\276\326\222\265\275\250\343\233?\240\264\014?l\357\244?X\350l>@3\344\273\255\344\222\277\236\271\247\277\316\317\210\277\001\215\232\277E\352a\277\327\230\200\277\216\343\300\277\027\331\221\277o]o\277o\336\360\276\356\256\010?\t\367\224?\231\024\335?\353v\276\276\310R \277\250fZ\277\000\022\211\277\227:\361\277\305\362\227\277\010\321\204\277\320\301)=0U\337\276\270\265\352\276L\243\275\275\021\033j\277\375\345h\2779\3045\277\026`\246\276\243\226\213\276jI\020\2766\023\031\277\227`.\277\207\370!\277\274\363\303?\2469\370>\334\376\226?\200K\017<\024\300\'\276N:\376>\300\337\024?i\310\202?\014\363\322?_MB?\006\362\246>\302\032\210?\226\216\270?\267f=?\243\370\344>\216kx\277\2003)<\303\252b>,\322\212\276^/\257?O \306?\340\312\302?`\314\343>\322\245\364>p\263U?\210\301Q\2762\251\035\276f\016\372=l\277\270\276\216\023G\276\362N\014\277\212b3?n\216f?\276`\226>\230O\332\277\365\207\275\277*\261\247\277p\225\307\277\264\356\302>\220\2409?\262r\314>\342%\003\277l`\000\277\2172\341>\366\210\261>\366x\376=l\351\224>S\210\322>x`P\275\323(\236>\360[??\270bX?\3002\361\276d\332\226\276\316<\035?\022\365\333>\024\316\234>\260\327\253\276%o\014\277\2400.\276F\366Y\277\222m\257\277\312`3\277\232\223\210\277\310n+\276\275R\351?\303v\307?`M\n@\t\006,@\251\0348@\337\366\006@\320\207<@\236\247\204?\002\234\251?\320\373~>R\307\252>\236pe>\236~\275\275?\213\'?L<\321?\364N\341?\377\024\200?\236\003\227>j\350\014\277H\004m\277\300\340Z\277z\220\356\276\327R\302\277\234\203\331\277T\240\334\277\2604\374\275N\020\003?\313\203\220>\276i\237=2a\n?\311\215\270>.S\311?\233l\240?rv>@+\254 @\240\262\366=\031\347\366\275$-\257?\354\001\300?\353v\234?\374>t>\352\325\025?Y\366\311>\324\340Y?\001a\320>\216x|>\243\253\201\277\200\0015<sG\273>\350tR>D\357\004?\262\232:\277{S2\277\352\363\217\277\355\177\243\2776\212\350\277\301\367\277\277\006&\324\277\270&t\277E\307\254?\322\246%@\347\200\t@\247\n\317?\363\036\270?\244\212\340?\355v\312?\004?\203\276\242\205\222>tm\204\275W\002z>\037l$>\210\311C\277\354\252\320\2779\257\261\277j\026\014\277\216n\255?\262\3058?\204/W?\216\2423>\260XX\274l\356\246=\216.p?\244X\227?/t\252\276oZ\235>3\273\216?\246\356A?\366\371\334?\272\030\n?\342\320H\276\361P\241\276\024\273\362\276\013\223\342\2779g}\277/\227F\277\267\201H\277\340|\224\274\341\211\240>P\224\252>\240\372\325>\324\362\310\277\255\275\000\300\177m\307\2774\322\242\277\225\244\203\277\226\361\016\277\250\007/\277\360\271\236\277\037<\004\300\250\261\r\300d\227\273\2772\267\206\277\234\232\224\277\010\215\350\277\"\244\252\277\230q\223\277\230](\277\344\212\316\276\300\376\312<\317\345\221\277\374\000\027\300\375\307\'\300\206X\206\277\354\237\241\277\370\005\001\300F\266\272\277\2278\251\277.\253\355\277\220\336\257\276\251\261\241>\2568\003@\304\303\033=\205\302\301>4\264\004\277\024\311\315\276\311\254\202>\312\362:?s\024\"@\211 %@j\252\235?\321\313\225?h\252\321>\242+\225?\214\246\226?\240\206\n@\310\3420@\371\375\342?lz\361?\372\327\243?\276$\216?\333C\227?\220\334\201?\212\324\204?d\006\005?1\277\'?z\314\273?\206\205\354?\242<@?\370t\374\275\214r>\277\262\336\241>\336\205\361=\021\320\270>nx\005\276\260\335\022\276`a$\277\350D\261\277z\375\033\300\224\216\320\277<t\004\277\2420k\277\360W\263=\304\355\002>\000W\206=\006\366x\277d\204*\276j\215p\275YS\256=Z^\255<\222\007\233\277\204\377$\277j\000\227\277x\301\037\277\263!4\277\300\t_\277\323\304\211\277\370\035\234\277xr\021\300T\215;\300\307\2504\300 \002/\300\035\214\023\300X\224\001\300^\325\025\300\355\217\324\277\256\330\206\277\024\035+\276\344\346\226=\315\034g\277jt\207\277\034.:>aVd?\366\023g?\324\266g=\333\020&\277\277\370\220\277\361{\253\277\302Y\310\277\332Hu\277=\200[\2776\035h\277\207\265\215\277.\321\317>v3x?_u8?\257\270B?\017\320\262>\340v,?+\263\035?\3241c\277\321f\003\277\362\016\220\2770&\020>\203\366\344=\010\331^?/[\333>\210:h?|\310\354\276@\262\230;[4P\276\022\316\203\277\317\336\026\277i\0073\277\24283\277p\220h=\301j\003\276O\362S?\300\350\251\274\235\245\035\277nW\353\276\026\361\334>\022\216\033?ZU\233?\202\201\207?YB\337?4\\\246>\363z\254?\225\340!?l\021+>\214\347z\275\332\217\037\277\357\342\n?((G?\r~\203>\345O\226?\204\306f>P\247\005\277\302A\005\300\017\314\255\277\322\343\232\277\255%\300\277 \255r\277\247\017\352\276\230p!\277\314\300\003?\376<0>\032\034\311?E\320\230?~\322\314?\206K\225?\367\224_?\366\001\233?8\033\003>\326xG>9\007\201>\351\213X\277K\310\300\277\200\244\n\276\3601\323\276\260\314\361>\000\023\345\274\313\234\246\2778\2404\277\246\004\204\277\216\364Y\277g\371)\277\252\034\004\300\372\340\371\277\221\223\010\300@\336\002\300Hi\365\277R\221\004\300\313\354\016\300=\212\277\277\340IQ\276\243\231\306?\024.\377?\340\245\227?\200\227\276\274\303R!?\374L\016?x\265 \275\241\345\237>\274\316x\275G\351\357={\233\304?`\266d>B\271\302>\233\001\327?Z\355\006@p\"\302?\020t\032\276\360\274\231\276V\331P\277zK\302\2773\240\226\277\242\036H\277\362\327\\\276\330\321=\275\317\035\023@\376h\341?\347\255\241?\304\236q?\346\360\217>>\222\257\276\224\251g\277 \3722\277c\267\240\276\232k\271\276\262y\016\276\376\250\304>p3v=\305\345(?^|\203?;:u\277\270[5>@s\353>0\272z?\035\257\362>q\246\211?\375\3610@%\241\004@\006~\005@\247\312\030@NuG@\272\010\305?\010\037\313?\270$\233?\246d\030@\352\314\223?\376m1?\262\241\007?\2508U=\034f\013\276\207\377\253\276\314\255]\277{Q\254\277\242\3520\277\037\246\336\277\021\355y\277H5\003\277\240\t8\275\0337\306>l1\001\276.\355\023\277TU\017\2767\350\035?\336\225\261?\014\000\350>\340\373w?9\"\275?@\214\245\277\200\356\345\276\255\307\376\276Vl\004?\262\306I?\370\253\306=\376\034\271?\203\007\236?\205\306\304?R<\321>Cf\022>\242\213\257?\320\244\"?D\275\341\276\320\010\311\276@F\226\277\314\330Q\277\021;Y\277h>\023\277\254\251Z\277\202\254^\277\016\323\223\277\222/\326\276\242\310\242>\004\353 ?\211\n\001\300\344}\007\300\311\032\022\300\352\242N\277\200\024\275\276xL\254\277\311\373r\277:F\237\2770\213\236\277Z\3370\277\030\350\316\276\204-\327\277\364\250\272\277\010Lz\277\232\\\201\277p\263%=B\024f\277\024\023\323\277\014\020\355\277\344T\270\276\013\177\246\277\025\206\001\277Y\240\340>\0249\223>N\020\234>\357\223\233\277v\310\022?\364N\244\275i\2109\277\230 \241\277=w\t\300\346\247\253\277N\325\354\277\274\305\002\300r \231\277\026\336\351\277\014d\345\277\303\315\263\277(R\263\276\311\357\347\277\235Y\265\277Pq/\277\372\325i\276xJ\216>\262,\243>\303J\t\277B\361\242\276\234\n\324\277U\202A\277z\241`\276x\350\215>\001Ds?\016Y\242?6\353r?@\350$\275\334\r\245?\327\216y?Z\016a?zL\225?\240\313q=c=\227=\334^\201\276\027\2556\276J6\250>\260\256\013\275H\375o\275\202\373\r\276,\263\016\277.\363*\277\274\255?\276P\337#\277\177\222m\2770\372\202=\270\264,?\007Q\354>\363\302\203?\367j\220?\323\266\362>\326f\233>\353\371\304\276\371|\225\277\270<\321\277\214\273-\277Z9H\2770\032*>\2677\201>\244\303\013?\\\010\205?\356\233\371>\000\255\362\275\236\000\224\276\350&\'?\370&\022?\214\311\342=K\264j?\330V\355?N\r\333?p\3233\277\317\323\215\277\022\344\036\277\004Y7\277\316\277G\277\031\230\271\277d\357\367\277p\2024\277\'h\215\277\004O\352\277<K\264\277\265\363\254\277\2626~\277\225\371C\277\036\203\316\277\334D\234\276 \203I\277w\177\240\277\206\034\374\277#\273\341\277\000\013\010=\252\265~?\250TM\276\354vT\277\274\355\r\277\324\3642\277\262\364\223\277Vvj\277\\\203V>{\212\312=\336\273\003=\274F\200\273\346\023\302\273\005\002\014\277\204@\230=\035\325)?x\263\240>,\2559?r\225)?\321\302S?\347\235\216>\031cl>22\340\276\220\177X\275s\305\227\276\t\333#?!\351Y\277\030\367E\276\316dv\276\326K\303\277\016\340\254\277\r\262\000\300\001\300\335\2770S4>&o\002>\264\262\010?>\316\331?\232\261\212?nh\223>\020<4\275a{\364\276I\202\317\276SF\204\277\313\033?\277\0006\333\272\214Z\236\276\243.b?\000\340\237\276\304I\232\276\376\t\272\2762_\225?\266z\276>\374\264\036\277^\371\250\276\010\253X\277\240l\213=\343\303\272?\364q/>(\274K=\374\265\341\276\327r\207?\030\322\300=\270\227\201\277p\225\272\2776\324\322\277\276\023\013\277Z}@>\333A\331\276Iw\234>\016\232\207\276\004x\021=\267\303\027?\376y\335>#D\347>>Q\266?\330\225\010?N\305H?\350h\267?D\021_>\364\034\271>\344n[\276\353s\272\275>\257C>\243.\352>\270\036#\275\226x/\277\226\206\312\277\316\010\002\300\010T\221\277y\312\261\277!L\252\277\250<\354\277my\247\277\030\301\342\275\371\236\275>\264a\257=\026\201>\277\252\200\007\277\344,\231?\356F1?\316\037\203\276\347\232Q\276\036S\227\277\330\333\"\276l\325\265\274\302\257^\274\311\361)?\1771\232?.\365\222?\276\2034?F\347\223\277\241\221M\277B\247\334\276\035\202\354>\240\375\004\276\202\177!>&;Q?kj+?T\217\r>\251\373\017?\010t==\223w\007>\242Z\303?\312|\346?\3769\354?:\210\323?\t\254\014@W\'\005@\200>\241=\360H\266?\305\263|?\374\023\222>:\236\226\277\217\261\257\277\271F\274\277\265\233\223\277[\347\226\277\026\024|\277\034\\\'\276\265\230\301\277\020\020\332\277\356K\002\300\211C=\277\311v\013\300\205\336\366\277\320bM\277*\355\240\2764\035\'?\016P\250?\323\327\274?\024H]?\232HT?r \341>\275 \006?r\2343?\210(\250?\000\203\326\275\3708:?}\370J?\353l\224?^8\260?qz\255?\234\321q?\234\210\006@\222`\033?G\025Q?L&\203>\211\362\264?\377\311u?l\267\'?\244\351Y\276\360\242\370>\247uz?\214\025e\276$\371\273=G\005\241?\353\272Q?P\203\223?\336\370^?\004\001\272?W@\247?\\\014\325>\000NS>\000\0078<\036\302\017>\367_\357\276\270\266\307\276*-0\277\305\225\034\277\221\273\276\276=f??\376\263\264>\304;n?\374\031u?\313\207\352>\370\335D>\325aD?h0\344?-@\221?\201\356\346?8\336\004@\340\3337@\tGD@X\262\224>\006\021\302\275\202\213~\277s\004\201\277\240@E\275nME?7K\355>\344\235\\\2764L\327\276#\243\017\277\024R\302>\347\270\252?U\371\256?\222=\242?\213\213\227?\236\207\360\276N\220\300\276\030\354\303=x\005\032?\000\002;?\325\r9?Nx(>\24159?\344C\267?\375\270z?\301Qc?\304\225\263?\032\350\007@\211\316\334?84%\276\330|\321\276+v\266\277|n\352\277fR\367\277\313C\r\300^\321z\277F\321\315\277G~\261?\340\267,>\265\245\276>\021\363\240\277dj\232\277\256\202\223\276e\360\240\277\342\277\227\276Z>R\277\275\310\245\277Dp\224\277\236\322H\2774\036\224\277\320U\353\277Qc\t\300\345\267\365\277\337?\035\300T\372\034\300\207\271\316\277\332\276\343\277\346\370#\300L>4\300\035\203\016\300\024>\314\277x\317\014\300\267@\243\277s8:\277\324\304c\277\340U6?\\\212\321?\020\341\252?\214\204\311?bt\234?\020\322n?\032{\271>.&6\277\001\312B\277\266\314*\276\333e0?\360\261\033\276@\270\233\277\363\367\301\277\206\003\210\276\256\303\'\277\334;\251\276@\256\020?n\271+?`7\212\275i\013\223\277\014\027\244\277\336\3768>-.\231?s\300\352?\023\256s?\000\263{;\026\2255\276\312 Q?\244\023\302?\217\270\225?\000`p<\177\351\340\276!\r1\276\314\360\326\276TYK\277v\345\301>Pi\214\277\032\341\372\277\271\325&\277D\036\234\275\212\367\367=\205\374\214?\013\351\016?$\261\316=\3770\034?\267\244\251\276$xv\277\330\345\256\277\005\302\231\277Y\366\276\277\242/E\300n7\204\300\215\035O\300\212\027>\300\342\374#\300\211W\002\300E\263\375\277\347\2706\277`\224`\276\221\327{>\353\236\323\277\260\353\353>:Kn\276Xb\301\276\'v\314\276\326\332\214\277\254\260N\277\230\246\206\277 YE\275,+\">\013\272\177\277\344\217.>]\252\216\276LJ\255=6:\316\276u\017\332>\314\331\222\276\274\364/\275.2j\277\374d-\277{c<\277p`\216\277\252\205\324\277\323\340\232\277\203\326p\277\360wG\277)>F\277\246\r5\3009w6\300\323sF\300\345\334\036\300\322I\034\300\000\037\353\277\010\030\236?\010/\002@\204&{?\340\342\035=P\2423<co\253?A\347N?\334\237\003>\307n\262\276\314\357\356\277\205\241\367\277@\276\331\27638I\276N\340\362=\250\t\\\277F\261r?\312\250\314\276s\266\201\277\305\"3\277\307\312\t\277\265\"\205\277:4m\277j\237]\277\334u7\277\322\321\277>*F\202?\2327+?x\275\222\276\3568\324>d#-?\237\206\213?t0j?\252\342\300?B\223\216?n\270\211? \344\313?\2302\r@\033\225\276?Xf\'\276l \312=Or\006\276\2364-?8Q=>\260\212\237>$@\257\276P\037 \277\306\354\266>\370~\215=@\207\313\275\237EA>\302P\343\277Xj\'\300\270\020\324\277*\347\370\276\356\316-\277\320\350\267\277,\263i\277\272\320\036\300\224\316\'\300\237x\343\277\372\006 \300\377\320\263\277\003\312\330\277\312\333\032\3000\251\021\300\201b\'\300\336\315\001\300\266\261\025\277\321A\037\277R\253\221\276\233\312i>\332\375l?Xn\030\277\030Br\275\231\313s?=\344\014?4:\303=\026\002\376\276\350\314\273\276`\361\366=\026\2160?p\302\000\275\252\310\323\276\212X\201?\352NH?N\300\230?\024\2538@\025\302\016@\203s\250?K\017e?\256\'\030?*\252(>\0173\232\276^U\322\276\354^\t\2779\274\346\277\364\211\267>a\324\337\276\226!\200\277V\367\301\277\226\037\310\277\2051\246\277@\272\212=T[W>}.\211>\350\327\323\276,\306g\277R\347\312>\240\347\033<Y\264\273=\316\334\347>lhb\276Eo:\277\364\324\322\277\302\355\245\276\204\363=\277\340a\n\276\370\317\226\277>\215\272\277\230\273\375\2771\330\326>P\301\020\277`\312\223\276HVu\276\'\022\213?:\350\240?Z\274\242>\326m\306?V.D?\270x\222\276\'n\203\277e\265\242\277\2325\255\276\3549\361>$\304\245=\000\3050\273bN:\277\303\352o\277I\355@\277&I\\\277\360\026E\277\356\310\020\277\371\267_\277dZ\216\277\3746v\276\200A\370:\206\353\210\277\307\330\222\277@\207\376<\227\343\313>7\036\200?\312\201\303>\020T\222?\007\t%?H\327\214>\224k?\277\270\r=>`\204\265\274\330\335#=\244Xn\276\211J\203?\025\205&?\360r\213?j\255\334?\277\346\264?\262Z\222>\000F\365\276K|\334\277\254\252(\277\020h\313>\013\r\003>m\\\376>\320|-\276\213z$?\260H\252?\203z\301?\232\321f?\024\343D>^#\235\275\201\241h?\366ux?\2271\025?\252G\037>\310\177\006\276\320\367\223;,\322\314?\352&\"@<\236\343?%R\275?\360ne>\230\244\317?\313y\214?\200\260\225=\000`\031\267n6\233\277\001&[\277d\014$>\342(\342>H\230P?\274q\227\276\323\317\246\276\324V->\374b\276\277x\0102\276\214\353V\2768\345\371>t\017\227>@\252\322?u\"\212?xT\257>T\341\225?4g\232?X\372C?F\201\257?]\244\000@\223G\370?\021\316@?\000\255\r\274\355c.>\224\204;>\340\352\231?\231\n5?\303\306\274>\222\267\\\276\351\"\'?lg\305>k\377\327>bM\300>q\271\251>\224\222\277\276\240\250c\275d%\257\276\000\202A\276*\324\023\275!\204W\276\034|\316\277p\303\372\275$\346\372>`~\034\274\000\353\022\277\374\266`\277\266p\347\276\230Q\272=\'>\212\277\032\220\237\277\356g9\300\307A\233\277q|6\277\234\215{\277\366\271\373>\357\007}>ck\001\277\211\361\337\277<\304\312\276r\\K\277\\\032\255>\005\233\365\276dH\206>\200\2760\275x\205$\276j \271\276\020W?>\333\2675\276@\262\223\277\344\334\230?\362\302\r@q\305\005@\300k~>4\367\314\276\315:\004\277\243\233\276\276\230CH=\032{\204?\314\t\343>5\261\205>\367\032m?6\306\226?Ca\210? \022d=~\363\004\277\004\373\022\276\252\256\365\276\006\246\265\277\302S\327\277\260\377\205=\342\271\254\277F\n\254\277\255r\260\277\276bI\277 \350p\275\346K=\277*#:\277\272C\230\277\002\360\233\277\222h\251\277mV\204\277\221J\250\277\014\244\246\277\000/j\277\306\370\240\2769\252\372>\177\367H?\000\014\226\274\270\330!?\014]\303?\262\267\232?\366}:?\350\023&\277\204\2534\277\364\035\313\277\214\364?\277\210\360\024\276\302*\221\277\236\244\013?\010\234\324?\307\310\360?\313\276f?\364\2667\276q\235\013\277J<M\276\240P\301>\336\364U?\303\036\251?\340\252\270\276k\277\352>4\317\307\276\010\376\316\277\346W\354\276;\000\227\2768\275\022\275\224qN>\222\351\224\277\260\357\241\275\314\221\207?z[\325?rAZ?\266\251\273\277~\372\213\277{\356\362\276n\235*\277x\305\352\275\273s\371\276\330\266M?$\3728\276\254|\260?+\341\214?P\210\255=\007\227\235\276\346\311\035\277\354\231\203\276\030\362\375<\352/\013\276\225)S\2770Q\254\277`@\021\277\3025)\277\035\367l?\236T\341?\357\003\247?Bt\275?\202\022\215>\000z\233\276\0328\311\276\244s\004\2770\373\250\275\026Lm=\351\260\353\276\022t\361\276\307\002\206\277\036e$\277@f\342\275~\242\307\276\020O\233>\244}\001\277\020\201\213<f%\256\276\014\367\255\277\360\"\226\275\003\252\035\277\002f\241\276(\252_?\0304\021>\254\375\023?\247\206\224\276%\354\262?\237\211\251?\265`\023@\230$\256?\201G\022?0\344_>\300\253\325\276p^6\275\253\276\255>>X\034\277:\356\224>\321\250~\276\027\267\006?4*\306=\217\020\r?\303\034\245\277\337\202\253\277R\307\317\276#\016\216\277N\026x\277\317\237\222\277 \002\035\276b\331\226?\"\022\247?\370\250\375\276\027<\234\277\270\205\201\277g\r\217\277\337\212Y\277\022!\014\277n\035C\277\335{*?\367\"\222?\236\004\007?\360E\010\277\330\324\036\276\304l\n\277\3728\013\276J6\033?\n\356\014\276$Uo?\354G\230?\006\220\200?\344B\264?#\255\354?\350\310\376?\016;\273?D0\321?\372\323\252\277\037\253\320\277\245\246\315\277\020X\314\277H\346\212\276\300T\221\274D\267U\275\000\233\343>,jB?\370\035\306\275\324\301\225\276.}\263>\026+\035\277\356N\342\277fW\265\277w\241\354\277d\327\335\276\361E\374>@\336\245=@\t1\277\247M\210\277\006\025\261\277\002K\370\277@\200\331\277\034\240\322\275_\321\035\277>\207\270\276<\250q\275B\003\200\277VoT\277\330}\362\277\002\354\220\277\323*+\277T\352\261\276\211p\216?\"\321\204?\353\337\006?\022\371]?\254\034-?\220\244\247\276 \307\354? Qj?G\022\335>\330\343O\276\345>\217\276X\344\256>r\354F\276\372^@\276\320m\312>\\_0?\254J\210>\251\213x?\202\265+?\257E\212>\321[`?\312\225\374?\272\370=@p\220\351?\354\315\004@\31688@0\323\023@\264M\'@\256\235?@\250B\365?\372\301\001@l\342\262?\273z\252?\300rw> \327\014<d)\230\276\010\207\'\277H\342>?(\265\237?\240\333*@\324\"\'@`\013\225?`@\320?\014\334\216?wB\264?\351\036\256?1)\367?D\203\247?\202\227\251?6\366\245?d\017=?\3177\005@\255/\334?\363l\014?\365R\r?\216\366\310>\"-\225>N\312\274\276\033s\234\277IA3\277F\002\214\277\222(\030\277\303\336E\277\255\260\037\277W\001\367\276\034\353\217\277\300\203v\274\314\261\265<\337F\002?\342\213\232?\374\262\317?\'\036\356?o\357\372?J\267\277?iV,?A\371Z?\221\223$?\np\311>\3320\036?\336\035q\276\224\202~\277:\264\005\277\'7\221\276y\236a\277\344\236\215\277D\272\201\276\273-\346\277D\366\251\276:C\301\275\242\307\"?<\207\244>C\024\363\276\364T\301\276\272R\344\276\224\215]\277\305\030K\277\244V\006\276\355\205#\277\t\'\022?\206\317x>F\202\206>\314\211\247\276\374\254\243=\034\022\020>\200\260\376\275p5d\277_\220\023\277\202\212\346\277\200\246\007\300\214\374\031\300p\322\310\276\nh\270>\231\t\203\277v\340\017\277\360`\355\277N\213\347\277\323\r$\300\205\317\016\300X\006>\277\205PJ\277\203\002E\277<D\033\277y\024Q\277\214\301\337>\263\241\351\276\264\274\330=kuY?<\241D?\020H\372>\2443\275?\217\226\311?Uu\216?\234\263\223?\002\315L?G\036<\277X\365\223\277\030\327h\2770\365J=\357\263)?\274\233\021?\200\247u?\355\024\203\277\330p\242\277*\351,\277\304\273\010?\351T\036?\340y\235>\231$x?\204\313\242?\020\350/>\364\304\233\276a\275\214\276x%\r>\200 \277:\373\346\'\276\375\342\023\277\\\016\300\277h\213\302\276\333\301=\300\214\263\346\277j\374\365\277\336\204\025\300b\304(\300\363j\312\277%\232\346\277\032\020\000\300o\267\000\300\236A\026\300\265G\n\300\356\016$\300;e\022\3000\356\267\277\327dV\277v\275\307>v\007\021>\316\235\217\276\311$\'\277\251.\200\277\332@n\277\336\026\212\277\270\021\014>f\276\274\276\317\222\367\276*@\203>\273rf\277\360\272v=\346\360I\277\232\003\332\277HF+\300\240\256\206\277[<\212\277\312\351\025\300\302f\016\300\032_\022\300\374\307 \300\322s\t\300mh\362\277\246Ut\277\3018\362\277\324|\253\277\247\227g\2770\216\202\277\275\025\236\277\212\361/\277\2149b\277\260\255\334\276p\332\177?(\375\356\276|o\252=P\330\237\274\026\331\227?\260\3042\276\342\263\254?\204\326H?`j\235\276F\000\321\276H\244\212=\340\016\311>t*]?\335nt\277`\277\241\277\3328\325\277j\2224\277_\270 \277PTm\277\355\333\207\277\320(2\277\303?e?\360\340\032@\227.\330?:\267\013\276\020\376\340\276\030\344;\277\216\331\260>\264H\025?E\330{?AE\350>\242\253\205?E8\316?\261\213\303?V\311\242?\2205l=P!2\277\344\330\017\277~\017\304\277\022\306\336\277O\354\315\2776\373\n\300T\257\"\300\242\334\371\277\320\236\334\277(\321\000\300hN\301\276\224\375\010\277\025\323u?\302\375S\277\002YT\277\210\265\362\277\260\375\245>Z\2511?V\265\326?\336Y\352?\206\333\251?X_\346>\312\022o>\370\027\342<\313\353[\277\364\275\344\276\232\214=>W[h\276\\\273\251\276\312$\270\277\2421\315\276a\340\235\277\215s\222\277+\244t\277&R\225>/gU?/m\000\300\273\274\022\300\276\"\300\277j}~\277\366\272\215\277\3347\234\276\"\342\214\276\374\320\336=\003\215\252>\375\274\220?\014\r\014@;\007\335?\216\373\017@\220Bg?\245e\033@z{\034@p=w?8\202\231=L5D?\304\003\311?\004\026\\?j9\220\276\245Pt?\352\000\202\276\'a\253?\320\310S\276\346q\337\276\336\270;\276\251\247\324\277\"\026\222\277\372\330\370\277+%\317\277\355q\n\300J\"2\300\373\213\271\277\026u\372\276\200\253y;\366\\\237\277\007\352o\277\264}U?\002\345\306>\342\275\277?\313U\210?H\024K?\260\216\340\276\000Y\314<m\277\200?:,\351?\300Z\315?\267\363\377?gB\347?/\275\255?v\023\032@:B\024@\201\217\016@\r\202\253?-K\247?\250&\303\276`\362x<%\330\016>\244d\017\275\177:\270>\332V\212?\220<e?lm_?x\3773?rx\214?iD\037?\344\030\205\275\2223\302?\270\203\224\276V?\227\275Vy\376?\033\254\313?\300\322g\277\2523#\277\326\222\300\277\343\202\216\277\365s\276\277~\203d\277vR\231\277\356\311 \300\021\335\007\300N\255o\300\251|6\300\273\'7\300R\302$\300\327RB\300j\347g\300\316\316r\300&4\216\277]\311_\277\020\t\215\277\340\343\005=\352mk=\275\035r?8\363\376>0\333\324\274\000\216\370\272S\203q?\214\260/\276\021.\252?\006\023\320?\033M\264?\326\313\233?\274,o?\212\277\335?\263\367\324?\272\262\227?!b8?.\257??<\337:>Bx\207\277\224\333\267>\344\247\322?\022W\367?\276n\304?\244v\333?\242\355\333?r\376\013@\367\001\270\276P\214\373\276\016\251o\277\221u\322\276\214j\226\275\3061\024\277Q\276\351\276\n\313\"?\014b\363>\275\373\311?H\233J@\252\306\032@\031\\-@\260vm@G:B@v\215/@\206\372\r@\307&\317?\243$\014@I\375\027@\365\263\272?n\365\234?\"\217\241?\246\353N\277T\201e\277F\014\"\277>l\337\2766\303\002\276\022\325\320\276\3409\223<]\235+?\010\0377?\302@x>_\3075?\002\321\321?\000\034_\273\253;\343\275\017\243>?\350m\300?n\363\227?\363\226\r?t\363Y>gw\315>(2\246>X\233?\277\372\016\337>P$\332>2\'G?;i\320?\226\001\207?\345n\353?\277m\001@[\347\375?@\200\373>U!\240>\202\372L>B(\201\276\320\323\021\277rOl\277\'\340\036\277W\361t\277\330\351\021?\341\256\204?\030\307\317?\273\270-?LM\n?\260\307\272?j\374\001@,\373\204@\346\357L@\0133$@<V\321?\231|\213?90\272?\347$n?\364\213\r\276<\017\200\276\365kH>\240/\000?^\267>?5\355\270?\376\233\355?*\345\342?\344\375\206?\367l\224?\203y\241?\266\005W?\342\207\214?\010\022\243?\270\351\020@\326L>@\366E\222@\331\272e@\230i\237?5\311$?\366\264\275?\020\\\332\275\007\002\332\276\000\2553\277\244ti\277\262\2422\277\245$+?\304\252\235=:\323\255\276\217\354S?\371~\345?\013\335v?\036\322\001@\212\325\336?_VC?\026%\031?\305\372\215\276s\262\">\272\036~?Xl\t?\300C[<\270V#\277\300\354\266\277Z \317\277\254\210>\277{E\r@\212o\310?\317d\267?\001Y\353?\357A\240?\232\305\272>\340\323\252\276D|;\277\nyM\277\350\034\316=0o\334?\254\367\247?j\362\034@\n\360\021@\026\350\375?\276\366\004@\320\250\365?L\363\366?\373\334\317?8G\037@z\310\311?\366\003\365?\225\340\316?\3663\323?\260\250\021?\264\215H\277|/\237\277\240y\002\277\321\362\006\277\364R\221?t\336X>\\\237\342>pJ\211=\241S5?\254\372\032?X\212\231\277\3408Q\275\022\245\364\276\312\362\275\277\236I\224\277\276H\265>\007\326\237?L\345\230?#lJ?f\324)?aem\277\301\335\314\277\262e\253\277d\001b\277\026q\310\276\016F}\277\354\347\352\276\246\241\214\277\277mv\2775\272\000\300\264*,\277\366\010\377\276\242\354\255\276\306K~\277\211\302\222\277H\271\343\277\274\260\351\277\377<\027\277\270\235\343\2776U\203\277\304\314\027\277\327\347\332\276\230^^\275\025;\"\277\242\277\201\277\020\310M=\203\247R?We$\277jL\333\277\365Q\276\277R\307{\277R\016D?7U\213>^\362\225>\200\317\330\275\3215\233\276Q3+\277k\333!\277\367\177.\277\244z\223\275g\026\206\277\324\333.>\376\212\243>\220\351\000@\276\200\n@Z\251\033@\254]\271?\240\036\n@\366Y\355?\361\261\303?\314.\205>\016b\031?\360\310I>\360^\376>\324\030\013\277f\355\027\300\202\244\336\277\0077\337\277#\327\360\277\240\374\313\277\343&H\277\300\n\331\275\354x\217>\302\007\336\275\265j\037?\224\'\231?8\373\231\277\'\260r\277\200\214\204=r\031\345>\222\267\010\277\303\212o\2774$S\276\300\372\314;\323\207\226\274y\377\213\277\350\363M\276\314\272)=5gO\277@\336r=\372\333\272\276h\376j\276D_\255\276\331\367@\276u\375\250\277j\307\251\276I\203\304\277vMS\277\023p\017?\345B\376?\337\303\225?\222\216\343\276I}\204\277\305s\204\277^>R\277B\243\321>PP\300>\001;u\277\252 7\277\'\263\236\277p\251/\277\354\226N\277z\263\242>x%\217?\213+\233?\310\200#?\210\367\356?w\347\031?\375\n\010@yX\304?Ti\215?.\363\031?ozG?$9d?7_\027?\316f\260\277;\177\030\277\022,^\277\304\035\346\276\372h\006\277v\344\314\276=\373\365\277\301\323\230\277\010\3649\277\000\215\261\2773\364{\277\300\265K\277\270\305o\277\317\017=\277\315\362|\277R\203\024\277\200\342\257= /c>\340\212\014\274?\022{\277xZ2\276\347M/?*\372v?\263\303\231?\210\265\266>\376\341O\276\204im=]\377$?\204\264\226?\030\312\324>\014@V\277\224j\337\277\344\305\302\276\256X$\277\206\334;\277\352\243\312\276\355\247\217>\017\221\034?\245\236\033?\303{\351?\232U\204?\003\247\212?\032U\221\276/O\274\277\336)\304\277R\324\357\277`\027\377\277\345\'\317\277\202I1\277\304\247\200>\304\023c\277\3449\351\277\272d\305\277Y9\366\277X5\306\277\001:\313\277\300\276\204?\026)\207?G\"\236?\316\211\276?\023\377\207?{\356!\277U\177\337\277=\021\251\277|\235\310\277\027\224\250\277\370H\316\277E\232\247\277\334a\220\277\207dm\277\036\361z\277Y%\243\277\005\222\n\277 Co\277\223\001)\300d|B\3002\243^\300Ez\'\300\206i/\300\344[\372\277\346QD\277g\273\351\276\350t~=hO\361>\002\335\270>\315\364r\277\240\262\302\277\024\371\010\277(\006f\276\2710\240\277\317\036\265\277?\337i\277<$/\277\304\362a>\222\271\344\276\370\225\025\277l!\317\277P\352w\2760\273\001\277=#\262\277\202`+\277r\372\233\277\320\363\371\276\242i\221\277@.\014\2757-\325\276\232\033\267\2752\376\215\2774\271\030\276*\201]\276\324\263\021\276oA\206?\202\007\\?\250\3021\276vGK\276\330\324\256\277\010c\240\276ql\272\276\366\246\310\277\201\355\261\277\365\310\227\277([\277\277\220\022\264\277\242\361\252\277\353I\364\277\334X&?CS\375>\026\215Q\277\223\330\265\276\345B\232\277\200\245_\276f\324\026?\254\211\240>\216xo\277\"S\247\277\000\333j\276\372\025\350\276lD\241?\320\273\002\277\310]\201\277v\240\264\277@\004\337\277G\363b\277H\276\214\277\224xe\276]\215\340\276.\363^>\226\346\254>m\013`?LA\342>\013\027\003@\347<a?3\242\245?E\360\221?`sn?\241\306\305?n\322\257?p\353Y\276eM\252\275\341\205-\276\304\375\026?\236\331r?P\274\321\275\304\202\023\277S4m\2765P\222\276\351\276\252\276M\212\201\276k\r\245\2773\302\027\277\000*\225=\202U\035?\306[|\276\201\006\210\276\374\033\322=\227\2609>\030\322\347\275\032N\204\275W\235\204\277\304\316\262\277E\305\344\277(\035\006\276\224\017R>q*\006\277\206sW\277M\235\206\276\340]\323;$\007K?\200\322\034=Y\245\007\276\001 \251\277\226I$\277$\337\320\277>~\212\277j\225\316\277\301\374\027\277p\250 >\274\235\263?\026t\265>\302\244\003?\242\372D?}\275\301>\224\321\366\276NX.?\227,\274>\251T\"?0\332<>\200\270\342\276,}l\276N\363.?\226M\203?\177\333\224?\270~a>\243\215\220>\014\001\301\276\010\253\014\277\314\314#\277\257\217\277\277\376\3003\277\016\033\270\277\020\221\t\300\360\212\313\277\264\364\034\300\211fM\300\366\331\021?\370\342P>>\\\240?8e\251?\242\373\213?\266j\221?\377\350\277?\211\271\013?\252\002\200\276JW\254\277\\\361\001?\032\267\362>\222j\003\277S\215\240>vaT?\210\024$\277|w\212\277\201\027\235\2770K)\275\232\344\352>\000z\n\277\304\017\205\276`\363\220\276\234\260\235\277\233-p\276ft\224\277\030\204%>5\210p?\300\322\301?\260\355\320?re[?p\267\007?\205*\211\277\350\264\234\275qn\230\276\013{\222?\020W%\276aF(\277\204\251\017\277\023\231\201>Q\323\377\276x\316\210\275\257!\222?\\\331\364?8\240\263?f\330\013?\177i\306\276\006\\\033\277\303w^\276J\230\024?\200_Z?r\313\315\276\006\243\242\277\316\215\230\277\214\202\326\276\216\007_\277\366\353\231\277\370\347\252\277\276\340E\277\257\016_\277\\\356\215\277\200L\021\277\332oJ>\272\370\026?\367#w>\326\201\254\276\0328\332>\216\253-\277\211\2707?=\311\006?\300\316/\276+\rz\277\336\374+@\311P\r@\360\245h>\314\351P\276\000\301\307\276\273\002]?w\272\374?\340d\'>\341\220{?\005\200\245?\'\255\355?\"\375\332?\230\302\027\276F\371\222>V\001\207?\301\'\241?\322\372\260?\375\240\031@_E\367?\252\332\256?\304(\002@\263\303\026@\240|\237?\224\327_>\344\236-?a\024\032\277\312U\243\277\315\374\261\277h9\256>\300\233\016?\031\326\306?\271\333\n@\350q\205?r\206\206?Z#\364\276^\031]>nW\233\276\270R\204<\302\347\217>\312\203\224?x\016\232>\360\247=\277\260\216\333=\014\316\264>\372\227\032?\310\213D?\300w*<\332c\204>$\233\\\277NC\014\300\356\037<\277\\MI\277(\027\333>\234cZ?E\364\256?xx\033?[\235\360>\005\304\316>E\3000?\177^\323\277T\232\367\277\274\243\203\277\002\363&\277\372D\266\277\2121\344\277\036\004\t\300\006\312-\300\372_A\277\262\255\321>\031s\312?\314;\341?\202\252\270?\023b\030@iB\002@?\230\327?S\010\337?\300\337\233>f\261;?\250}]>mh\235?\335\313H?\207\301\236>\215\366\376>\213;\245?`\263\217?u\317$\277\375\025\\\277\370\023u\277\357\352\325\2777H\324\277`\035\037\277?\270\'\277r\271\236\276-\346\211\276!\200G\277\335\037\023\2770\232p\276\n\304\t?\210\332:?t\\/?rZ\260\2761\254\250\277\240\261\247\275\345\255\264?4\016\t@\241\203\304?\2211\201?\300\n-=*\236\264\276&\365\030\277\374\005!\277\034\207[\277\371\350\023\277.\252*>a\007p\277\275\335\310\276\202\332\'>\346 !?t\341f?$i(?\010~\203\277 \334\214<4DK\276\314 \340\276l\266\205?\212\353\313?\214s\356\276\300\232X=\317\363O?Dm\020\277l\237U\277D+\320>\354\300L?hb\213=\026\301\245\276\006\360e\276(\313\271\274\254t;?,\034\333?\362C\333?@~\222?>\331\242?\2068\253?`A\246?\004\342Z\276\024\340\213\276\354\250w\277\304\372\331\277\201n\227\277L!\007\300\354,\331\277\240\244\371\277\252\206g\277\335,\240\277\366\267F\277\305\3579\277Dr\331\277\021 \223\277\340^\315\277|\025\363\277b\224\352\277\014g\222\277\360{\254\275\2720\023?\270\356\264=/=\236?\300\367$<\260`y>"
      }
    }
  }
}
node {
  name: "normalize_element/component_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 800
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "normalize_element/component_0"
  input: "normalize_element/component_1"
  input: "normalize_element/component_2"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "filename"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "CacheDataset"
  op: "CacheDataset"
  input: "TensorSliceDataset"
  input: "filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 500
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "CacheDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 4
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "BatchDatasetV2"
  op: "BatchDatasetV2"
  input: "ShuffleDataset"
  input: "batch_size"
  input: "drop_remainder"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 4
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
}
node {
  name: "normalize_element_1/component_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        tensor_content: "\033\261\314?\310\260\346>8w\001\275\001\021\243\276\310\227\360\276\274\336\250\275\340\260w>\016\032g\276,~\010?|L\241?\002\304\321?\256\220\273?\t\312%?v\324\002@\256\237\005@\342L\335?\344i\206?\374\226\250?\322\353\252?\360u\263>\247\257\214?[\232\"?\331\007\202?\356\022\203?3.\225\277\306r\367\276}V\204\277w\352\313\277l\243\366\277\200\370\'=\360\330\266\276\331\237A\276_\312I\276C\340j>H\'\231\274o\316y\277&\227\244\277o1\334\277\214\227\031\277\352\304]\277\342I\004\300<~\035\277\321.\315\277\346\037\\\277[\016f\277\000V;\274V\232[>\016\264\306\275z\227\256>E\234\205>\337\363*>\324\016\036\277\253 E\2778\201\231\277q\010\240\277\326\0322\277\002U\302\277\315\336\265\277nD\344\277\306\016\320\277\231\344\222\277\331\247|\277i\354\271\277\304\335\360\276o\365h\276\266\204\236\277\375I\226\277|\022c\277\312\357\224\277\201\216\213\277\265\321\360\277\300o\024\300\223\357\371\276\345\274\225\277J\355\307\276\350!\330>\200\'=\274\3742\203>_`\267=\036RH?\tK\263?\343\364\001@\376\345$?p\276\344?\200\260%@\362\243d@n\2003@z\242\335?\032\371\222?\354\261\242?\003\274\275?\356\211\355>\220X\347?#I\343?\000\354\331?\374\356,?0\226\003?N\304\005>\351\300]>b\210\372>m\210\210?\206?\340>\216a\362>{\231\276>p\233E>%\0100?(5g?\340\377\027?$t\215?H\022}?\2303\231\277Vr\224\277^\237\261\276hLV=\350\302\331>\365\314\277?`6-@J\325\005@\340\034N?\267#\213>M!h?(\353\301=\321\021\030\277\000Fo;\333w >\240Y\241\276\230hN=dw\231?~\301\237?\357\354c?6H\001@\306\204\370?\277\273\332?_\230\205?&(\034?\200\300a>n6\202>?\354M?\303\rT?,\302\315\276\266Ud>\334\342!?7\275l?\247\230\216?\271$\323>P\377\376\275\247\017-\277\340\273%=\200\325S\274}/\001?v\2242?\2005\307\274EK\355>\3245t?\252\021\272?\370\210\246?lP\024@6\362\354?\032\333\224?\205\345\241?\273r\327?\230>\367?\020\020\350?|G\365>\267\234\005@#t0?\376\360/>\2204\233>X\244\216\277\027\370\027?\240.\231>7\346]\276rR\206=\234\023\312\276`\342\224\274|\203\026?\3103\177?\000h\240?.\226\206?\326\342^?vj\307?\312\222\346?\346o\324?\306\322\031?\224[<?.\340N?z\262w>-1-?r,D\277\304\332\244\277\272\306\227\277\347\375\260\277\034\241&\277\335l\206\276*\371<\277d\277\202\277\306\014\245\277\216\224\334\277\204\270\350\277\024\205\020\300j3\354\277%\013\334\277\021/!\277m\266\224\276\270\305\377\276\271\240\021\300\370\242\254\276M\225~?.\352\230?Yh\022@\376\272\020@4\025\036@~\357\267?\317\204\214?\"\000\223?JNk?\351\205\023\276^\036\037\277 \013\217\276\307Q\370\275\020\346\241?t\261\207>\246\371\353\276\315\334\305\276\300\332q\277FS\327\277\017V\271\277\300\315\333\274\032!\261>gL\312>\207\314\202?\332S\000?\274\236\337\275_\026\203\276\346\271\363>\006\222\324?\335^\274?\242\365\263?8\230\351?\\}\005@\014.\251\276\340\242Q\2778\263\317\276\ti\226\276m\'R>\363T\035\276\'\351\036?2\334D?$\233b?yZ6?f\374\371\276\257\2579\276;\277o?\000\223\212\277\251\355\363\276@)$\27559\334>\346\344z?y/\366>n\207\307>\343\225\031?\261\005\027?\301\305/?\314\307/\276\312\334\357\276\024\3075\277\000\335i\274\224X\303\277\245\360\205\277\260\242\'\2752\211\310> \336\356<6\300\001\300\257\231\364\277\360\313\255\277^\004\224\277m\277n\277\324\243\273\277|\002\221\277\013\326@\277\266~5\277P\324`=\274c0?\027\242q?\345gN?*|\304?\363\002\273?Dlg\277\374\242\260?\350\320\301?\006\2129?\254\343\262>\000\261\201<O\301\350\274\210\220\234\273x\365\031?bX\214?\262\333\264?\366\247\006@\351\374n?c\373\256>\216\226\033?\370h\027=\267RA\276\007\203\341\277\rH\352\277\226\265k\277\004\323\200\276W\250\036?\236>\264?\257k[?\240\006j?-\331\354>\364F\326\275\2321\237?n2\230?T\347\333?\324\n\232>L\007S?\000*\214<\307\264\223?i@\002?\211G\272>\304\337\204?\3408\243\276\236\246b?\200\344\246\275\254\341\365<\036\334\336\275\374S\303?\244b\271>\236\036\244?\230A\363?,\235\250?\023\322]?\227\255\227?\330n\260?\000p\033=\316\332\257\277Y\360\022\277\216!\007\277\250_(\276\026\356@\276\0024\006?\010\272q?W\376\326>s\331\314?\2121\007@D\003\341?b\030\363>\002\020\251> R7\277\216\177\253\277\334\370\274>:\333Z?\250\245\244?\252\342\037?&\277\221?\360\205 ?d\226\214>@\374\361>3\"\312>\320\230\204?\232/\266\276\310.\245\277,LW\277\262\273\370\277\264\006\327\2770c\333\277|\262\234\277\020\317\244\277M\263\032\277\346\230\255\277\306\260\300\276\362\tT\277\273\021\006?\263,\034?>\257V>h\307\276\274t\312m?\237\373\351>\370gW?\376\016\342?QV\350?\240\302\240=`\267\035\276oxv>n\035\037>\275\004\\\277\027tM\277a~2\277\\{\007>\231\312\206?\023\\\337?H,%@\'\320 @\351\2757@\260=\014@\235`\333?\026\246\313?%\317\275?\374\243\244?,\010\201?P\366\306\275Sn\356=\355CO?\236\233\332>BA\247?U\260\215?\330\330\277=\222U\217\276\0000\211<?^\277= \254]?{\345\222?0f\277?Y\0215@\236\032O@\234\266a@\262\210\362?^\013\307?\177\177\202?\342\003\320?Mu\247?\214\374\245\276F\202>\277\002\360\356\276h\304\305>\177\332\240?\026\257/?\370\002\314\276DU{\276?\0327\277\000\006\334\274&;%\277}\245\302\277\200\334\035\275\345\177\255\276,R[\277l\370\317>\357\257\022?\245\245[>z\024\202>\\\352\231=\312\2129\277fd@\277\247\254\016\277\301\307l? \326e?\216\330\236?z\261\367>2\246-@\202<P@vk\350?g\000X?\237Q\201?\177\204]?\240\364\353=\324H\364=3\017\256?Z\270\206?Q\324\037?~\215\357>r\030\033\276:1\030\300\344\241\217\277E)\313\277\303\376q\277\344\024g\276TyZ\275\370\2229\277[\027\235\276\320\257x\277\335\203\262\277=\224\256\277\350\220\321\277\000\003\223\277\344\364\225\276\346W\347\276\2020F\277\314\377\202?P\237\344=\024\000\372>\010\306v?\374QH>\221\226\026>\244\211\026\276\306Hb\276}d.\277\202\351\022\276\334\236a>\311.\031\277P\nj=\376\031F\276&\364\312\275\002\350\005\276\245v\326> \355s=\"QZ\277\337\375 \277\203F)\300\334d\324\277\320\307\270\277rGj\277#\316\220?\346@\257>\'X\262>Ee\343>D\257\320?\354i\027@\342\215\331?/\276\n@\036\343\r@\035j\236?\366\324\313?k\016\311?j\230\205?\346\365\253?,\022\013?J\013f?6\n\021?\370\265\237=\325\362\213\276n\204T\277\200>\222\277\326%\337\277\"\263s\277ww\244\277\3110x\276r\3743\277(\200 ?`\032\253\274\006\257q=a\343\203>\n.d>\312\320L\277\257\000\336\276Z2\365>\222\262\202?8/\300?\206 \377>*\206\013\277\340\226\202>\201[_?>\365G?\226\376\027?yf\346?(\251\030@vOF@\032\324\303?\242\352\306? \267\332=\255\021Q\300\237\320\010\300\267\005\013\300\272D\243\277\230\251L>~4\177\277\256M\244\277\tP\301\277z\307\315\277\016\322\353\277\365\326\022\300\024 \003\300\273\316\001\300\207\354-\277\325\317{\277\261\261\017\300\361\333\303\277\220\007U\277\213-;\277mf)?\356\314)?l\324\234?\307{\274?\325T\266?\341\310\215\276\216\2113\277\256\257\324\277J\226S\277G\006u\277\n\367\221\277\002W\216>Q\025\260?\014\177\330?R\337A?W\227\006\277R\235\002?\333R\224?j\304\305>;\346\335>>6\231\276\023#\013\277\240\3409\276\374z\324\2760\277\275\274\033\370\317\277z\370|\277\004lL\277\002\325{\277*\243E?\316\325\353>Y\253\210\276\353P\373>\2041j?B\204\201?p\213\r?\254-\360\275(\\\224=\014\002\251\275\\\036R\2776\317\303\277\354\"\375\277B\254\021\300\314P\204\277@\'\270>w\367\276>\256*5?\372\217(\277\302}\235\276\336*W>\307\327\'\276\265\224n>\372r\262>\276\317\336:\263\002\024?\026q\\\276\344G\304\276\364\t\030\277\213\025\314\277f\373\375\2772D\207\277\242\013\227\277&\203u\277\006F\031\277&d]?\020\312\230?~A\235?\006\300\304>\222\313&?\362\3656\277\312\2306\277\234;\300\276 \210\251\277o.\265\277\344|D\277\212\316#\277z\242\202\277\026\257\026\277\330=\017\277H,\273=\177\221\264\275\305\034U>\360O\215?\220\026\262?\331\327\327?\271\311\363?\020l\341?\220\354\005@z\032\360?\304\316\016?&\364\014\276\312_4\276\206:\035\277\376H\242\276\373\272\317>\372\023X?\246\244\374>\326\307\344\276\246C@\277\250b%\277\025\204\245\276XF/?>\310V?\212\'!?\310H\221\275\330q\202?\375\030\246?\n(\314?2[{?C%d?\362\372q?\360\266\211=7H0\277`U.>\256H;\277\010\t\247\277c\373\300\277\244C\254>\263\264\247\276Y|\202\277 EY\277x\270\\\277JP\243\277\022\3716\277\274\177\274>\356}\320\276\352!l>\365\022?\27601\213\274\036\357\260>H\346 ?\317\'\312>K\302\373\276d\333\217\277\346\252]\277\240\200\210\277\2549)\300\006}\334\277\363g\222\277\006U\216\277\252f\266\277\000<\235\277:\367\240\2775e\006\277\254w\003\277\270\227\336\277S\361\345\277M\275\207\277(\306\236\277\021\0337@\206\267\265?QO\247?q\334\265?\\-Z>\366\302o\277\352-c\277\035D\257\277SY\021\300\202\335\004\300\246\245\024\300\246\303T\300\356k\020\300\375x\335\277\010{\014\300\213\242L\300[\266\'\300\224\301\361\277h\326\375\277\342l\237\277X\235_\277\364%\351\277d4\317\277\177[\035\277\366t\033\277\001\237\255\277\344\354\233\277\276\334K\277fb\016\277 \302\342<\325\241z>n\260\350>\3730\257?P$\246?\250i\264?\253\352\366?\360f\240?&\3003\277\2217\t\300\247S\034\300~a\225\277\373\006\030\300\007\371\365\277r\024\005\277\266\322\210\277\240\000[\277\255?\274\277p\315\316\276y\037\017?T\305\265\276\332 \"\2778)\247\277,=\361\277\316\3331\277\300%I\274\314h\021\276\177\360$?\240\276\\?\314\323\206?\302\317\360?\033A\351?\252\214\236?\2074k?\202AN\277\300rQ<\0060\264?\276uv?7\344f?\320[\262>\\\205\312?\242g\354?\2261\202?\340\375\\\277\2165\256\276D\240(>\035\363\\?\234\325u?-\250\t@ \321\t@\266\213\016@\014\216\270?!C\331?\340\220\333=pm\302;>2\017?\330q_?\334\324N??\221\235?r\265\372?l\273(@\276\305\276?\021\256\314?\354\360\264?{\224\221?\372\005\333?\327\346\233?gE\335\276\242Sk\277\364\365B\277*)\033\277\0318\375\276\275\354\344\276\314\326\025?K>\031?\330\201)> \304\270?,\325(?\275\267\006?\254\240\225?+1\311?t\333\253?\334\330\327?\273\205\333?\256\340\200?\312(\321?@2\342?`\216\261?\304\330\304?\211\364O?\317>\243>\200\261\322\276\032\237\220\277|\231\222\277\244\']>\222\211\232\2760~)\277\240\240\323>\"\346\313>\325X\201?\225y\212?9\231\273?\3431*?\t\013\013\277f\211\013?\260\205\263=#Y\203\277Q\204\200\277\201\370S\277P\313\262=\245\343\370?\353\371.@\016b!@\255\344I@I@k@\331\027\354>\211QH>#e[\276\350\375\362\276\\%G>\256]~?\200g\275<\2573\022?,e<?\211\237.?\310O\377\276Z\341(\277\221|\254\277\373\\\215\277\222\227\023\300m\305\360\277t\215\271\277D\246@\277+\020\200\277{\243Y\277N<\246\277\2566\276\277e&\273\277\233\010y\277A\355\256\276\362\273\255?\356\315U?\311\025-?\370\305\013\276\305\334\334=0\024\030\277 ]\272\277\230\234\267>z3\255?B\006\033?/\334\366?\271\225\014@\360R\023?\337\0212?^\"\010?63D\2770\367\014=\216\267+\275\357\301\250\277\352\037\320\276\350\374V\2775\304\243\276L!\n\2766\3166?\340\205\272=Z\230\243?\202p\332?\010\327\230?\331\022\204?\264\352\242?\275\306\222?\310x\335?\230\325\n\276\312\016\270>\374,\010\277\212\375\222\277\344\234v\277\234\363T>\021\031l\2763\266\207\277\215\363\226\277Z\315\346\277.U\302\277J\325\n\300\366\324\216\277 \343\303\276\310\267Q\277\311Ox?0$==\355f_?`\357\212?\202\342\361?\250\323\025@\344$\n@\006_\306?`\016\273=J\255\033\276\016\375\033\277\240a\264\276N\260\006\277\036\373\272\277\240F\305\277~x\016\300\272\203\031\277\010>\200?\230E\\?\360~\306>Da\005\277\025\355\373\276\202\232\022\277v\267{\276Y\321\210?u\242\303?:\026\304?\032\266\205?\326v&? i\252<-D.\277\037%\346\276\211\325\270>\206\204t?\204\267\257>m\021\241>p\350\376\276\221\277\312\277\036\261\324\277(l\262>\346! \277\260LU\277\206~\370\276\021\275\351>\024\247\243>\332d\255\276\214\217\236\277\232\177\266\2760\377\313>t\220\362=g\"1>6\227\002?\2066\346\276?\254\374>\224\204\203>,DP?\0070d?\303}\304>\210#\255=\271\311\365>\210\264\356?\340d\253?(\332\r?\244\372\260?\0207\355\276\260w\260\277\230\352\272\277Zf8\3006A\317\277\037Ys\277\271k\250\276\304*\226=\202(\375?\205\277\227?\356\010\356?\204\223\317?\250N\257>o\316\207?\006\262\226>p[\">\301L\000?g\340\250?\003\330z?\356\233\013?\250\037H\277 s\274\275\247\032@?\344\210\210>\260\350\257\274\326\303\236>\340\250\301;\215\304M\277\030_\216\276\251\202\215?\226C\232?\221>\036?\032\371\023?\344\014\206? \275\201\275W\272\224\277\374\246\263\277b\026\233\277H\216\363\277A\036\236\277\007\236\025\300\000\0030\300\t\360\000\300\261\335\224\277\\\010\030\277\037\316\364\276\342\254\342\277\010\300\331\277\336\377\231\277Z\323\207\277\\\360\341\277\033\225,\277\310\201\262>\363\035m\277\370\031/>!\354s?\273\311L\277\000e^\277\350U\223\276\225\'\303\277\246+\033\300\0248Y\277d\345\215\277\327$\226\277\200\177\216\277\246\263\221\277:4\010\277\2407\240\277j\333X\2774\362\344\2778g\370\277X\274_\300\236\244\013\300P\357\345\277^d\253\277h\026\201\277|\200\022>\3316\202?\256\210\223>4\210\026\277\003\013\240\277\260\266\022\277\304^\r\277j\006\310\276\177\3428\277|\327\002>7[\221>M\322\243?\226N\307?\266L\362>\267\200*?\2000*>\257\345-\276\231C\345>\220U\206\274\354D\022\277\312\3258\277\266\214\363>r\375.>\351b\233>\273\272\210?\311z#@\317y\r@p\322,@\245\245\000>\263\312\205\2775\244]\277{\364.\277\343\237\300\277\251\336\031\277\\\200\255=\002E\356>\303\023\260>\314\320\304><[\222\277\003/\031\300C\177\034\300\315\315\377\277\235.\321\277\307\260\256\277 U\233\277:\256\334\277\344\3660\300\214F\350\277_0\013\300\374\027\371\277sJ\320\277\265@r\277\276\342\034\277H\216W\277\270\020\361\277\260\276\212=\311\034x?\257\341\203?Ha\207?\277\335\305?\225\034\301?Az@?\240\362\204\275\021\304>\277\300fT\274\332\331\'>\331\370\245>>\356\031>w\371\313\276\250\345\333=\000\347h:\345\262`?\\,M>\250\004\272>\220\266\340<\377$H\277\272L\006@\231u\324?\252#\257?\344*\343?\\\226\321?\014\306\307?\032\252\316?J\022\'?\032Tl?\306\266\303?\352L\007@\324\342\234?\202?\025?\223\370\367?\346\326~@\231\355n@#\005,@\016\222\022@\004)\323>\016\275g>4\362\036>\261\315\217\2756\374Q?*5\224?\370\030\252\2764\337\207\276D\232`?\235a\023?~\341\276?\310`B?0-\003@j5\006@j\373\343?\342\303\246?\333Q\r@\276\332\035@\200\324(@\252\035L@\034V\007@\240\326n?\035i\213?\213\016\323>u\335\336\276\036y\276>E\370\220\276\333n\347>\020\200A?t\245K\276|\020\307?/\230\244?\272a_?P\tQ\275\177:\353\276\336^\216\277&\003\316\277\210X\372\277+\372\302\2775\273\332\277\212u\210\277\200\244Y\276\261\212)\276\0375\257\277\320\341\006\300\220\220\267\275\361Y\231>\354l\213?\020F0?\022w\222\276\232\002\365\276\215\003\334\276D\211\027\277r\"\210\276\026\376\"\277\340\232\262\277\240O\346\277 pa\276_\215 \277\354\010\020\300\027C\r\300\220\304\372\277\265}w\277A#\020\277\031W\372\276\243w\003\277b\241X>T\321\003?\302\335r\277\356\203\215\277Oi\251\277|\326\334\277\314C\272\277\3152\247\277\360\007\355=j\315\020?\360V\245<\202\242\364\276\020\310\216\277\000\320\010;\317\325\315\277G5\243\277(4\024\300\200b]>\0068H>sM\332>\321\357\"?{=\016?\324i\342?\262G;@\202\303&@\300\006n?Tq.?HT\237>0\3546?\316\233Q>\206\335\022\276\033\037;?\352n#?\314\361\365>\365\355\211?`\275\333?t\354\017\277\340Eb=<5\032\276\264\200\315\276o\231\252>\244\253\307>P#\024\277)\020\032\277\374\301\354\276,R\322=\254\251 ?\370\350\332?\230N\037?x\241\343\277V{\317\277g@\323\277\r\024\210\277H!\357\277\177P\300\277?e\314\277\037!\347\277\317\375\224\277\264<I>b\021\326\276{A6\276\\\265\370>\025p\204\276\215\321\313\275\357[\230\277\\\314.>\370\235[?X\345\177?1\022\232?\355\274\227?\220G\004?\360\003U\275\326\\\013?`*\203>\310\020_\277\327\246[\277\010S\271=\244\274\034?\270\017\212?\237\002\331?\322eW@\242C-@\240\265\373?\014\336\373?\236\346\343\277\"\253\371\276l\204\303=\356\375&\277`\205\311\274\2308K\277\300ke\276;\225\000\277\310\257\307\277\004U?\300\022\243Y\277\272^\333>f\333K\2766\031\272\276\311m9\277\034\350\223\276\220Sv\274w\246B\277MO\000\300F\240\365\277Z\243%\300\317\375\002\300*\266\006\300\002\362\001\300\236\315\025>\024 \247?P\347\244\276\340\272@\277\334\233s\277.\000\343\277\010\250\346\277\030\260\027\3005O\025\300IQ\240\277\226\021\215\276\301\311\235\276\226_@\277:8\276\276:\3435\277%\370\024\277\333\373\036\277\243\350\213\277\234\351\213\277\300u\300=)\330\007>p\345]>OR\230=L\265\235>\025J\221?\360{W\275\224\240\341\275\3677&\276\324\250\227\276(\\g\276\270\247\300\276\223<\275>\366\2079?U\233U\277\026pq\277\367*\031\300x\225x\2765\221\247\277\312\177\353\277T\271\246\2770\355\236=\324\372\014\277\365\365\371\276\266M\034?\006Y/\277*\330\311\276\224V\275\277\016\366P\277\024]\371>xyG?\240\332\334\277\241<\256\277\177\254\274\277+\277\213\277\337\013q\277\300\334p\277X\253\312>\377u\204\276\241\330\021\277h\234\204\277\273\010H?p3\203\276z\001\306>\344\236\025?\030^\325>\352\360\201>\252\360\276\276\266#:?\212\372)>^\240\'\277O\361\204\277\370^3\276\334b\230\276H\241\313\277?J=\277\214\227[\277\360\332\241\275\355}$\277\350\355\205=\327\316v?e\031\260>a\303m\277\375\014\004\300\302\314\032\300\242\001\370\277\323\275\003\300\26274\277\000\375\234\275\322A\333\275_\267\366>\227?\334\276]\260\313>T\377\213\277P\200\006\277\222\222\021?P7\241>\306u)=n\257\315?\360X\303?v\327\215>H$\201\276\215\246\251\277\302\250\206\277\010\271W\277\200\360=\276\006\275y\277KO\344\276\306(\346>\\:u?\232%\375?\366EA@\357\207\365?\305R\271?\203\332\213?$yo\276\330\344\333\276\177\343\207?\214\035\376>\024\"\254=\327\232\244?\371<\005\277N\375b\277\010\321\307\277\270\253\024\300\024\2030\300\243\221\004\300~\372\\\277\304\304\350\276\214R\004\277)\3565\276\376\031\271\276\246.\300\275aoM?H\031\245?eI\000?6@3>v\353\262\276\202\322\256\275`\035\355;\030_\022\277\370\266\023\277F\207&>\003\276\237>h,\224\276\231\"\237\276\200*\344=;\242%\277\236\341\254\276\334\360\256\2760\315\030\276g8\300?(q\343?\231P`?\027J\337>\324\034c\277`2 \277\366\031J\277\250\004\372\276\343?t?\300\341\262=\336\357\026?)\300s?\032h\270?\010+\345?\210\351\346?;\310\001@\214\010{?\330\232D>\214\367\365>\244\253\t>\246KH\275\"m\017\277:\215\271\277`I\n\300\307r\007\3002\300\201\277\206[\263\277\316\030%\277\326\263\234>\232\362\316\276\260\202\207\277bq\266\277p\323[\276g\226\364>\240`\375\274\306\221z?S\340\214?\324F\251?;\037\001?\365\242E>\315\375\211\277h\257&>\246\224\245=\320,\317>x\263\264?we\336?\253b\321?\026\345k?\222}^?\242\266\006?\016\275_?:_\340>\342\211\340\276\021\r\201\277\232\275\204\2771\254$\300Ip\001\300\\\334E\300\034P\337\277\366\'\313\277\303\361\"\300&\034p\277@\210f<\370\'\'>\245\356\177\277\3774\224\277\327T\220\277^\377\360\277\003a\\\277h~\021\276\215&\036\277f,\247\276\311\300\275>r\371\363=\322\211\242\276 \332(\277np\277\277r\322g\277\013\0042\277z\207\373>&4}?\200d\001\275\203g\363> \303U=<\235K\277\246\330\263>\357V\211\276e\235\322\277\030*<\277\210F\033\276\225\204\364\276A\314f\277\032\374_\277\213\214\313\276\340\247\017<\200 R?\324\263\224?\267u\013@\256\331\261?D\026\253>\035\305\023?\022Af?\210b\276?\023\013\237?\022\315\005?\227\273\r?\302\003\">\210\2271\275\205\214}?`\264\002\275\326\340\325?;H\216?X\352\357?`\232\370>\343\354\242\276\3460\004?\\\033\277?\356\224\252?p\213\001@\320\251Z?\270\3705\276p;4\276\201\370\220\277$\326\301\277\320V\323\277<z\270\277\314!\264\277\262\265\014\300Z\305\035\300Nf\251\277$\257\207\2772Z\305\276\270\376\021\277r\324Z\277tw5\277(\033\220\275\034t\276\276\241\t\217?\257\264\337=l\217-\276>\2069?\227L\235?W\241\231?\227[\316?\224}\'@\276u\263?\253\005\332?\r\322\241?\274xs?\010\322\264?\t\331\324?\231q\217?\356PP?p\351\\\275|\027y\275\222C\273\276>24?\362&}\277\270\355\334\277P\315\000\300Z\263C\300\270\201#\300\033_]\276*\036\\\277 \021\276\275\265\214\312\276\036b]\277y{8\277M*\260\276Xet=c\206\020\276\246\014M>\023Qv?f\246\240>E\246\333>\262\361\177\276y\027\000>en\017\277\021\304\032\277\200\213\213\273J9\223\276\211\356`?\010\270\203?\374\313\203?\360\n\030\277z\354@>\2748\302\276H\006-?6\225\'>\237P\036\277Z\363g>\274\014\034\277\260\342\004=\"/\227\276#\203U\277\303\317y\277n\261\362\277X\304N>\317\362\210?\226y\325?\240\201\276?\254J\'@\240\204_@\214\200\376?\211\r\347?vO3\277\026\317X\277b\342\225\277\274\350w\277\240<\237\277\013\252\214>2^R?\236\263n?\021\346\367?\354\244\237>\352\207\370\276\002RL\277@u\326\277\312\363\004\300\255\251\033\300\224\214\324\277[\230\317\277z\251\203\277*\360\006\277w\204}\277\340\353\216\274\224\277\304\277\030\035\303\277\267\r\341\277\000C\035\277\323\343\013\277\246\302F\277P\323)\276\236\302s\276(=\010>\341d\310\276\335\354x\276\360\236\010\275)\211b\277\346\347\200\277\3724F\277\300\010\325=\322\254\210\277\302\305\t\277\316\024\016\277\277\351\214>\371z\003>\245Ke?)u\223>\356Q\235\276\037\330\223\276\027K/?=\366\332>\203\206\256?\002\032\351?\370Q\254?\013\244\005@u2\007@\2558\r?`L\244=\222\020\251\276\0305\351\275\033\3506\277\277^\207\277\030\030\220\277\376\302\357\277|*\212\277\026\314\210\277\246\377\375\276\177\327\200?\201\244%?\3529\332>\214l >\002\332\006?\311\354f?\004L\363\276\264?+?b\215\022>G\036\277>zH\257?\177S\002?\344$d\276P\277\245:e\202\226>\2630\302?\322\345\226>UjA\276\270\2244\2762\243\224>7\377\312\276w\207Y\277\253\353 \277\322\207\010\277;\215\'\277Z\353\333\276 \204\344\276\275\303\017?\254T\300>Cs\241?f\215\"?;\237??\257L\010\277\202fp\277\224;->{G=?\277\316\256?>\237\002\300\251\362\241\277hp\206\277\036\375\306\276u\365t\276\210\253\217\277i\235\374\276o\230\333>Vq\242\276\"\264\021\277uM*\277`\256D\277h\270_\277\0349\340\276X\340U=\\\002\202\277\246\201\266>\032\310\334=\340\340t>\357\265\215\276\334\335\224=\346\3070\277#\236\340\2778\024\254\277\255}\016@\246\233\231?\306\356\271?\210p\377>\212wB\276\315\266\023\277\010dv\277\337N\200\277r\205\305>\302.h?\177\313\340?0J\216?\260\214\333?\321\252\031@\330\026\334?\2515\366?\346\245\017?\251\342\245?\322\234\276?\334\343\246?X\331;>k\311\362?\257\300\245?H\003\327?\303\314\327?^\213\217?>\361\237>\244$\334>\014\372V\276\300}[\277\340\227L=\364X\356?\224\0063@oc\211?$\221\003><T\252?\266w\267?,\222\231?%\343\210?\020L\207=\202e\023>\034AL\277\214\0227\277\014\360\r\276\006\017\023=3X\032\277]\033\023\277*\223_\276;\221\005\300\327\004f\277\363\376F\2774\003\242\277\364{\t\276\355\216\236?\224\270]\276\253\376.?\216\227\263>\340q\274?\001\350\331?9\236)@\3424\262?\026\"\253?-\023\331?\002\363\007?\321\235\267?Rm\360?I\273\030@)0\016@\350u\231?d\345\256?\243\246v?\352\313\214?\362\270\234\277\305Q\217\277\226R\247\276z\031&\276S\245\212\277|\\.\277\026@\375\276?\'\334\276HJ\272\275\226\036\254\276\362\343\347>bB\263\276\300L\216\277X\374\"\300Ab\002\300*n\221\277\330x$\277\020)\034\276\005\331\361\276\347\230s\276\201\264\216\276\240P\004\277m\024\216\277\002\006\016\277\245\350p\277QY\222\276\353w\217\276\274\013!=\324J\367\276d\004.?\2105\273>\031\024\000>\2221,\277zo\211\277\252\227\322\277p\037^\277\313\247\333\2776\271;\277\240\303\363\277\322\377\003\300H\377\312\277\354\010\260\277\236\261\026\300\010\315\353\276\026\217b\277\330\0135\277b\026\234\277\221!\215\277\346\033Y\274\376x*?x\tL?P\330\300?D(\"?>^\312?\210\277\370?R<\"@\256\214%@\210\261\261>\n\030\357>z\355\242\277\272\214\257\277\226\006\311\277\ni\337\277`\227\037\300N4\270\277\207?A\277*\227\354>\240\023\305\275\037\204\314>\256\235\252?\356MI?b\201\333?\032\"\332\274\303[\362\276\037\2236\276*\\\346\277d\251\302\277b0\022\277\002\203*>\010#\277>\223\205\236?5,x?\006\223\n@\014\343\023@\214\350B@\024\031m@j\330p@\030\257g@\277\325f@\3472A@\241\223\r@WN\t@s\340\003@{\252\203?HL\224?\350\305$?\235\343\307>\"?\231?8\305B>Q\333\300?h\023\002?+q\344>\304\"T>@\n\001<\003\350\021\277\300\227\336\276\370P7\275\274\301\246=\252\247\321=\251\021^\277Nt\024\277\356\222\237\277gx\002\300\232h\366\277\237\306\375\277\030-\032\300\200\234\256\277\221L\t\300\224S\240\277\310!\226\277#|,\275\306P\264>\002^\003@\245\275\345?\216\300\360?\304\334\344?\223\235\335?F2\350>\n\344\220?\347\306M?n\272I?\262l\021>/&\205\277\330\275\235\276\276\236\204\276\\\265\303>\260\331\326?\013\301\345?\036\000\235?\223\"\230?\373Y\017?0\221\235?pD\237=\177\334U?\034\245\242?\305\242\322?\335\355\223?\253\200\361?j\344\307?P\303\240=\005(\232\276\351]P\277v4U\277\000X|\272L\270\356\277P\373\311=\2205\t\275th\020>\322J\t=\020\230E=\274=\006\276P/T\277\"\014!\277sU\206\276#\200\230\276\2362\303\277\271P\274\277\233\365\236?G\310w\275\350\013\215?5D3\277\320c\317?\324:\337?\303\336\324?b\004\363?D\246*?yY\003?\037\324y\2776?\374\276\220\362\251\275\274+\322>\304\375Q\277\204\356\343\277\0209\006\300C\3137\277\236s\306\276 \341\307=\036Cw>\362\305\361\275\346\270\254\276\370\375\362\276\347\352\347\276\312@\251>\346\034\362>\271)\240?K\327\332?\210#\202?\320M\007?\030\275.\276.\347\202\276\356!\031\277\243\030R\2774\317\255\277t\004\232\277\002\217\334\277\221/L\2777=\022?W\037\276?\216\306\213?\377`\030?:\201\025?\227bV?\006\200 @6\020\344?\255\220\243?\252\024\266?\350\302\t?KM\221?\356\031<?\246\344\310?\266\352\320>:\224\331>\342@\371>\260|\362<\247\244\353\276K\276\347\276\304\333s\2773U\320\2763}\237>\260\344\030\275z\360\231?\274N\215?\202\340\253?Ib%?\302oY?*iu?rm\310?5J\213?L\016\200>\000\332\236\272\365\317\375?0\313\202?\223\250\352>\2464J?\0348\277\276j\311P\277\2369\007\300\024\006\027\300\242\276\002\300\341\372\236\277\330\326\377\276\303\215\247\276.\340\355\276\320\023\025\275\003\035\343\277\260\255\237\276\\ \352\276&\002\205\277\200\331\327=`R\213?\370o\227?wx\224?\352B\244?\"T\336>\376\201\213=B\310\215\274Jh\204>Z\001\277\276\026\2043\277\006;\323\276\013Y\026\276\231\204e\277B\314\t\277\316\227T\276\272\363\261\277 T\200=\027\241)\2773\213E?Z\377%?&\230\330?\265\321\201?\210\037\306=\330\234\305>\r\240\341\276\325\244\335>j\360\177\277r#\311\276\246\243Z\277\254b6?\271\372\202?\252\213\217?\260N}?\276\013\"?\364\244\250?\203\371N?,\210\261?\360\270&?\226\177\224?\0205^\276\303 \230\276\006PC\277\332g\207\277\272C\371\276=|%\277D\002T?$1\254?.S\335>\214\350C\276#\207\351\277\231UB\277\023F\003\277L\271\304\276\317(\341\277\307\220\360\277\037N\022\300V\347\006\300i\370\t\300\247y\335\277x\356\262\277(\030\351\276sN\240\276D\014\210=\375N\306\275\272P\034\277\372\0349\277+rC?t\325o?\3306\001\276D(\227\277\207\010\347\277`\177\200\277H\303\263=\226\316Z>\026\273\350>H\250!\275\3344X\274\324\r\025?RrD?]\312\262?H\000\201?\364\004\266?Ja\311?h\305\013?n-H?\340\236\007=|\331\030\276\337.(\277\263\237+\277\250\303\276\276u-\360\276\362\213\034\277DA\372=\360ES?\'\214\337?\317A/?\316\203\277>\306\270K\277&\256\340\277_\261\313\277\024\236\247\277\251\344^\277\r\0345\277\306\026\256\276\3004\006\300\335\307\373\277M\321\346\277\346\327\274\277\207\n\245\277\343E\234\277\004\211^>\212-\223\276\242\023}\277`\251\307\275\367V\361\275$\233\221>\237V\334\276\306\265\272\277\240\336\226\276\312^\307\277\203\321\303\277\024\027\263\277\363\016\205\277\310\322\232\276\001p%?\267!\201\276\354\313T\2752\300c\277\250\216\327\277\023\016\303\277\210t\317\277.\002\353\277\320\031\235\277\0067\306\277T\037\016\300\253H\374\277=\301\001\300\201\302Q\277\311\317k\277&\320\252>\tp\261>p\337\266<\016\005\022?|\350\206?\330\273\021?\261=K?\006\261\202?N\264\273?\242\032\343>$\320-?o\342%?\266\340\007@\371\210\227?(\335\222>\336_\035?\017,\224?\371Qb?\326\264\010?Zek>\244\235\367\276\000\372\300\275T\274\306>\226\240\250>\204\263\002\277\002\310\177\277~/\246\277\346\311\240\277\035\303d\277Y\361\204\277\024\270\276\277\255%\016\300\276\020J\277\332\301q\277#g\222?\322\"\236?\340\022\020@)mu?\276\366\336?ru\017@8\225\365?\233\203\305?\326b]?\000\016\224\275\362IC\277\034!}\277=\006\362\276\307H\227>\366,\267\277&\233\336\276f\310\315>\362j\200\277\230p\310\275\303;\000?\220\033\216<\222\371\205?\nC\262>N\247\007?\334.\312\277\003\347\201\277\350\177\r\277\345N\337\277}\301\347\277F\346\344\277\366\345\001\300\220&\303\276f\321\345><\340:?\252\030\003\277h\214\313\277\346\013_\277\326N\235\277\364\247\020\277\314\352\205\277\230\347\007\277\"\017[\277\346\017\331\277\030\005\373\277\024,\252\277\320\256\353\276<\224\373>\004M\347>K\0313>\230\371\270?\374\033+@\330\030\003@\036\r\365?$\322\321?\rm\257?\224D\026\277\330\350\353\275.\365\237\276\206\361{?\014\307\265?\363\023\303?\300>\253\276\362p\010\277\013\340-\277\260\356\037\277 \002*\277\3441[\277Dt\370\276;\013\020\276\327Y\217>:-\'>\252\271\333>"
      }
    }
  }
}
node {
  name: "normalize_element_1/component_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        tensor_content: "\310\260\346>8w\001\275\001\021\243\276\310\227\360\276\274\336\250\275\340\260w>\016\032g\276,~\010?|L\241?\002\304\321?\256\220\273?\t\312%?v\324\002@\256\237\005@\342L\335?\344i\206?\374\226\250?\322\353\252?\360u\263>\247\257\214?[\232\"?\331\007\202?\356\022\203?B4B?\306r\367\276}V\204\277w\352\313\277l\243\366\277\200\370\'=\360\330\266\276\331\237A\276_\312I\276C\340j>H\'\231\274o\316y\277&\227\244\277o1\334\277\214\227\031\277\352\304]\277\342I\004\300<~\035\277\321.\315\277\346\037\\\277[\016f\277\000V;\274V\232[>\016\264\306\275\206-4?E\234\205>\337\363*>\324\016\036\277\253 E\2778\201\231\277q\010\240\277\326\0322\277\002U\302\277\315\336\265\277nD\344\277\306\016\320\277\231\344\222\277\331\247|\277i\354\271\277\304\335\360\276o\365h\276\266\204\236\277\375I\226\277|\022c\277\312\357\224\277\201\216\213\277\265\321\360\277\300o\024\300^\221\267\277\345\274\225\277J\355\307\276\350!\330>\200\'=\274\3742\203>_`\267=\036RH?\tK\263?\343\364\001@\376\345$?p\276\344?\200\260%@\362\243d@n\2003@z\242\335?\032\371\222?\354\261\242?\003\274\275?\356\211\355>\220X\347?#I\343?\000\354\331?\374\356,?6\376\200?N\304\005>\351\300]>b\210\372>m\210\210?\206?\340>\216a\362>{\231\276>p\233E>%\0100?(5g?\340\377\027?$t\215?H\022}?\2303\231\277Vr\224\277^\237\261\276hLV=\350\302\331>\365\314\277?`6-@J\325\005@\340\034N?\267#\213>\2155\233?(\353\301=\321\021\030\277\000Fo;\333w >\240Y\241\276\230hN=dw\231?~\301\237?\357\354c?6H\001@\306\204\370?\277\273\332?_\230\205?&(\034?\200\300a>n6\202>?\354M?\303\rT?,\302\315\276\266Ud>\334\342!?7\275l?\247\230\216?\333\030\200?P\377\376\275\247\017-\277\340\273%=\200\325S\274}/\001?v\2242?\2005\307\274EK\355>\3245t?\252\021\272?\370\210\246?lP\024@6\362\354?\032\333\224?\205\345\241?\273r\327?\230>\367?\020\020\350?|G\365>\267\234\005@#t0?\376\360/>\2204\233>z!1?\027\370\027?\240.\231>7\346]\276rR\206=\234\023\312\276`\342\224\274|\203\026?\3103\177?\000h\240?.\226\206?\326\342^?vj\307?\312\222\346?\346o\324?\306\322\031?\224[<?.\340N?z\262w>-1-?r,D\277\304\332\244\277\272\306\227\277\347\375\260\277\260Q<\277\335l\206\276*\371<\277d\277\202\277\306\014\245\277\216\224\334\277\204\270\350\277\024\205\020\300j3\354\277%\013\334\277\021/!\277m\266\224\276\270\305\377\276\271\240\021\300\370\242\254\276M\225~?.\352\230?Yh\022@\376\272\020@4\025\036@~\357\267?\317\204\214?\"\000\223?JNk?\200\034\242<^\036\037\277 \013\217\276\307Q\370\275\020\346\241?t\261\207>\246\371\353\276\315\334\305\276\300\332q\277FS\327\277\017V\271\277\300\315\333\274\032!\261>gL\312>\207\314\202?\332S\000?\274\236\337\275_\026\203\276\346\271\363>\006\222\324?\335^\274?\242\365\263?8\230\351?\\}\005@0\271\300?\340\242Q\2778\263\317\276\ti\226\276m\'R>\363T\035\276\'\351\036?2\334D?$\233b?yZ6?f\374\371\276\257\2579\276;\277o?\000\223\212\277\251\355\363\276@)$\27559\334>\346\344z?y/\366>n\207\307>\343\225\031?\261\005\027?\301\305/?\314\307/\276\326\321\347\276\024\3075\277\000\335i\274\224X\303\277\245\360\205\277\260\242\'\2752\211\310> \336\356<6\300\001\300\257\231\364\277\360\313\255\277^\004\224\277m\277n\277\324\243\273\277|\002\221\277\013\326@\277\266~5\277P\324`=\274c0?\027\242q?\345gN?*|\304?\363\002\273?Dlg\277\224\013\264\277\350\320\301?\006\2129?\254\343\262>\000\261\201<O\301\350\274\210\220\234\273x\365\031?bX\214?\262\333\264?\366\247\006@\351\374n?c\373\256>\216\226\033?\370h\027=\267RA\276\007\203\341\277\rH\352\277\226\265k\277\004\323\200\276W\250\036?\236>\264?\257k[?\240\006j?e\304\\?\364F\326\275\2321\237?n2\230?T\347\333?\324\n\232>L\007S?\000*\214<\307\264\223?i@\002?\211G\272>\304\337\204?\3408\243\276\236\246b?\200\344\246\275\254\341\365<\036\334\336\275\374S\303?\244b\271>\236\036\244?\230A\363?,\235\250?\023\322]?\227\255\227?pp\324\275\000p\033=\316\332\257\277Y\360\022\277\216!\007\277\250_(\276\026\356@\276\0024\006?\010\272q?W\376\326>s\331\314?\2121\007@D\003\341?b\030\363>\002\020\251> R7\277\216\177\253\277\334\370\274>:\333Z?\250\245\244?\252\342\037?&\277\221?\360\205 ?d\226\214>\265\021J?3\"\312>\320\230\204?\232/\266\276\310.\245\277,LW\277\262\273\370\277\264\006\327\2770c\333\277|\262\234\277\020\317\244\277M\263\032\277\346\230\255\277\306\260\300\276\362\tT\277\273\021\006?\263,\034?>\257V>h\307\276\274t\312m?\237\373\351>\370gW?\376\016\342?QV\350?\350?\034@`\267\035\276oxv>n\035\037>\275\004\\\277\027tM\277a~2\277\\{\007>\231\312\206?\023\\\337?H,%@\'\320 @\351\2757@\260=\014@\235`\333?\026\246\313?%\317\275?\374\243\244?,\010\201?P\366\306\275Sn\356=\355CO?\236\233\332>BA\247?a`\004@\330\330\277=\222U\217\276\0000\211<?^\277= \254]?{\345\222?0f\277?Y\0215@\236\032O@\234\266a@\262\210\362?^\013\307?\177\177\202?\342\003\320?Mu\247?\214\374\245\276F\202>\277\002\360\356\276h\304\305>\177\332\240?\026\257/?\370\002\314\276DU{\276\224o\354\276\000\006\334\274&;%\277}\245\302\277\200\334\035\275\345\177\255\276,R[\277l\370\317>\357\257\022?\245\245[>z\024\202>\\\352\231=\312\2129\277fd@\277\247\254\016\277\301\307l? \326e?\216\330\236?z\261\367>2\246-@\202<P@vk\350?g\000X?\237Q\201?\032\234\222?\240\364\353=\324H\364=3\017\256?Z\270\206?Q\324\037?~\215\357>r\030\033\276:1\030\300\344\241\217\277E)\313\277\303\376q\277\344\024g\276TyZ\275\370\2229\277[\027\235\276\320\257x\277\335\203\262\277=\224\256\277\350\220\321\277\000\003\223\277\344\364\225\276\346W\347\276\2020F\277&\360\262>P\237\344=\024\000\372>\010\306v?\374QH>\221\226\026>\244\211\026\276\306Hb\276}d.\277\202\351\022\276\334\236a>\311.\031\277P\nj=\376\031F\276&\364\312\275\002\350\005\276\245v\326> \355s=\"QZ\277\337\375 \277\203F)\300\334d\324\277\320\307\270\277rGj\277\002F\334\276\346@\257>\'X\262>Ee\343>D\257\320?\354i\027@\342\215\331?/\276\n@\036\343\r@\035j\236?\366\324\313?k\016\311?j\230\205?\346\365\253?,\022\013?J\013f?6\n\021?\370\265\237=\325\362\213\276n\204T\277\200>\222\277\326%\337\277\"\263s\277ww\244\277\206a\242\277r\3743\277(\200 ?`\032\253\274\006\257q=a\343\203>\n.d>\312\320L\277\257\000\336\276Z2\365>\222\262\202?8/\300?\206 \377>*\206\013\277\340\226\202>\201[_?>\365G?\226\376\027?yf\346?(\251\030@vOF@\032\324\303?\242\352\306? \267\332=*\354\343\276\237\320\010\300\267\005\013\300\272D\243\277\230\251L>~4\177\277\256M\244\277\tP\301\277z\307\315\277\016\322\353\277\365\326\022\300\024 \003\300\273\316\001\300\207\354-\277\325\317{\277\261\261\017\300\361\333\303\277\220\007U\277\213-;\277mf)?\356\314)?l\324\234?\307{\274?\325T\266?z\377E@\216\2113\277\256\257\324\277J\226S\277G\006u\277\n\367\221\277\002W\216>Q\025\260?\014\177\330?R\337A?W\227\006\277R\235\002?\333R\224?j\304\305>;\346\335>>6\231\276\023#\013\277\240\3409\276\374z\324\2760\277\275\274\033\370\317\277z\370|\277\004lL\277\002\325{\277WI&\277\316\325\353>Y\253\210\276\353P\373>\2041j?B\204\201?p\213\r?\254-\360\275(\\\224=\014\002\251\275\\\036R\2776\317\303\277\354\"\375\277B\254\021\300\314P\204\277@\'\270>w\367\276>\256*5?\372\217(\277\302}\235\276\336*W>\307\327\'\276\265\224n>\372r\262>\351\340M\277\263\002\024?\026q\\\276\344G\304\276\364\t\030\277\213\025\314\277f\373\375\2772D\207\277\242\013\227\277&\203u\277\006F\031\277&d]?\020\312\230?~A\235?\006\300\304>\222\313&?\362\3656\277\312\2306\277\234;\300\276 \210\251\277o.\265\277\344|D\277\212\316#\277z\242\202\277\324\014\355\276\330=\017\277H,\273=\177\221\264\275\305\034U>\360O\215?\220\026\262?\331\327\327?\271\311\363?\020l\341?\220\354\005@z\032\360?\304\316\016?&\364\014\276\312_4\276\206:\035\277\376H\242\276\373\272\317>\372\023X?\246\244\374>\326\307\344\276\246C@\277\250b%\277\025\204\245\276\034[\246\277>\310V?\212\'!?\310H\221\275\330q\202?\375\030\246?\n(\314?2[{?C%d?\362\372q?\360\266\211=7H0\277`U.>\256H;\277\010\t\247\277c\373\300\277\244C\254>\263\264\247\276Y|\202\277 EY\277x\270\\\277JP\243\277\022\3716\277\274\177\274>\303\255\220\276\352!l>\365\022?\27601\213\274\036\357\260>H\346 ?\317\'\312>K\302\373\276d\333\217\277\346\252]\277\240\200\210\277\2549)\300\006}\334\277\363g\222\277\006U\216\277\252f\266\277\000<\235\277:\367\240\2775e\006\277\254w\003\277\270\227\336\277S\361\345\277M\275\207\277(\306\236\277\306.\212\276\206\267\265?QO\247?q\334\265?\\-Z>\366\302o\277\352-c\277\035D\257\277SY\021\300\202\335\004\300\246\245\024\300\246\303T\300\356k\020\300\375x\335\277\010{\014\300\213\242L\300[\266\'\300\224\301\361\277h\326\375\277\342l\237\277X\235_\277\364%\351\277d4\317\277\177[\035\277u[_\277\001\237\255\277\344\354\233\277\276\334K\277fb\016\277 \302\342<\325\241z>n\260\350>\3730\257?P$\246?\250i\264?\253\352\366?\360f\240?&\3003\277\2217\t\300\247S\034\300~a\225\277\373\006\030\300\007\371\365\277r\024\005\277\266\322\210\277\240\000[\277\255?\274\277p\315\316\276X^X\277T\305\265\276\332 \"\2778)\247\277,=\361\277\316\3331\277\300%I\274\314h\021\276\177\360$?\240\276\\?\314\323\206?\302\317\360?\033A\351?\252\214\236?\2074k?\202AN\277\300rQ<\0060\264?\276uv?7\344f?\320[\262>\\\205\312?\242g\354?\2261\202?\306w\t@\2165\256\276D\240(>\035\363\\?\234\325u?-\250\t@ \321\t@\266\213\016@\014\216\270?!C\331?\340\220\333=pm\302;>2\017?\330q_?\334\324N??\221\235?r\265\372?l\273(@\276\305\276?\021\256\314?\354\360\264?{\224\221?\372\005\333?\327\346\233?\335\233\237?\242Sk\277\364\365B\277*)\033\277\0318\375\276\275\354\344\276\314\326\025?K>\031?\330\201)> \304\270?,\325(?\275\267\006?\254\240\225?+1\311?t\333\253?\334\330\327?\273\205\333?\256\340\200?\312(\321?@2\342?`\216\261?\304\330\304?\211\364O?\317>\243>p?\212?\032\237\220\277|\231\222\277\244\']>\222\211\232\2760~)\277\240\240\323>\"\346\313>\325X\201?\225y\212?9\231\273?\3431*?\t\013\013\277f\211\013?\260\205\263=#Y\203\277Q\204\200\277\201\370S\277P\313\262=\245\343\370?\353\371.@\016b!@\255\344I@I@k@\017 -@\211QH>#e[\276\350\375\362\276\\%G>\256]~?\200g\275<\2573\022?,e<?\211\237.?\310O\377\276Z\341(\277\221|\254\277\373\\\215\277\222\227\023\300m\305\360\277t\215\271\277D\246@\277+\020\200\277{\243Y\277N<\246\277\2566\276\277e&\273\277\233\010y\277P{E\275\362\273\255?\356\315U?\311\025-?\370\305\013\276\305\334\334=0\024\030\277 ]\272\277\230\234\267>z3\255?B\006\033?/\334\366?\271\225\014@\360R\023?\337\0212?^\"\010?63D\2770\367\014=\216\267+\275\357\301\250\277\352\037\320\276\350\374V\2775\304\243\276L!\n\276Izh\277\340\205\272=Z\230\243?\202p\332?\010\327\230?\331\022\204?\264\352\242?\275\306\222?\310x\335?\230\325\n\276\312\016\270>\374,\010\277\212\375\222\277\344\234v\277\234\363T>\021\031l\2763\266\207\277\215\363\226\277Z\315\346\277.U\302\277J\325\n\300\366\324\216\277 \343\303\276\310\267Q\277d\300\247>0$==\355f_?`\357\212?\202\342\361?\250\323\025@\344$\n@\006_\306?`\016\273=J\255\033\276\016\375\033\277\240a\264\276N\260\006\277\036\373\272\277\240F\305\277~x\016\300\272\203\031\277\010>\200?\230E\\?\360~\306>Da\005\277\025\355\373\276\202\232\022\277v\267{\276\211\317\325>u\242\303?:\026\304?\032\266\205?\326v&? i\252<-D.\277\037%\346\276\211\325\270>\206\204t?\204\267\257>m\021\241>p\350\376\276\221\277\312\277\036\261\324\277(l\262>\346! \277\260LU\277\206~\370\276\021\275\351>\024\247\243>\332d\255\276\214\217\236\277\232\177\266\276\324m\201\275t\220\362=g\"1>6\227\002?\2066\346\276?\254\374>\224\204\203>,DP?\0070d?\303}\304>\210#\255=\271\311\365>\210\264\356?\340d\253?(\332\r?\244\372\260?\0207\355\276\260w\260\277\230\352\272\277Zf8\3006A\317\277\037Ys\277\271k\250\276\304*\226=H.\215?\205\277\227?\356\010\356?\204\223\317?\250N\257>o\316\207?\006\262\226>p[\">\301L\000?g\340\250?\003\330z?\356\233\013?\250\037H\277 s\274\275\247\032@?\344\210\210>\260\350\257\274\326\303\236>\340\250\301;\215\304M\277\030_\216\276\251\202\215?\226C\232?\221>\036?Mj\333?\344\014\206? \275\201\275W\272\224\277\374\246\263\277b\026\233\277H\216\363\277A\036\236\277\007\236\025\300\000\0030\300\t\360\000\300\261\335\224\277\\\010\030\277\037\316\364\276\342\254\342\277\010\300\331\277\336\377\231\277Z\323\207\277\\\360\341\277\033\225,\277\310\201\262>\363\035m\277\370\031/>!\354s?D\342\340\276\000e^\277\350U\223\276\225\'\303\277\246+\033\300\0248Y\277d\345\215\277\327$\226\277\200\177\216\277\246\263\221\277:4\010\277\2407\240\277j\333X\2774\362\344\2778g\370\277X\274_\300\236\244\013\300P\357\345\277^d\253\277h\026\201\277|\200\022>\3316\202?\256\210\223>4\210\026\277D@6?\260\266\022\277\304^\r\277j\006\310\276\177\3428\277|\327\002>7[\221>M\322\243?\226N\307?\266L\362>\267\200*?\2000*>\257\345-\276\231C\345>\220U\206\274\354D\022\277\312\3258\277\266\214\363>r\375.>\351b\233>\273\272\210?\311z#@\317y\r@p\322,@\022\034\023@\263\312\205\2775\244]\277{\364.\277\343\237\300\277\251\336\031\277\\\200\255=\002E\356>\303\023\260>\314\320\304><[\222\277\003/\031\300C\177\034\300\315\315\377\277\235.\321\277\307\260\256\277 U\233\277:\256\334\277\344\3660\300\214F\350\277_0\013\300\374\027\371\277sJ\320\277\265@r\277\022\300\032\300H\216W\277\270\020\361\277\260\276\212=\311\034x?\257\341\203?Ha\207?\277\335\305?\225\034\301?Az@?\240\362\204\275\021\304>\277\300fT\274\332\331\'>\331\370\245>>\356\031>w\371\313\276\250\345\333=\000\347h:\345\262`?\\,M>\250\004\272>\220\266\340<\377$H\277t4;>\231u\324?\252#\257?\344*\343?\\\226\321?\014\306\307?\032\252\316?J\022\'?\032Tl?\306\266\303?\352L\007@\324\342\234?\202?\025?\223\370\367?\346\326~@\231\355n@#\005,@\016\222\022@\004)\323>\016\275g>4\362\036>\261\315\217\2756\374Q?*5\224?\212u\300?4\337\207\276D\232`?\235a\023?~\341\276?\310`B?0-\003@j5\006@j\373\343?\342\303\246?\333Q\r@\276\332\035@\200\324(@\252\035L@\034V\007@\240\326n?\035i\213?\213\016\323>u\335\336\276\036y\276>E\370\220\276\333n\347>\020\200A?t\245K\276\302)\231\276/\230\244?\272a_?P\tQ\275\177:\353\276\336^\216\277&\003\316\277\210X\372\277+\372\302\2775\273\332\277\212u\210\277\200\244Y\276\261\212)\276\0375\257\277\320\341\006\300\220\220\267\275\361Y\231>\354l\213?\020F0?\022w\222\276\232\002\365\276\215\003\334\276D\211\027\277r\"\210\276\037\230\232\276\340\232\262\277\240O\346\277 pa\276_\215 \277\354\010\020\300\027C\r\300\220\304\372\277\265}w\277A#\020\277\031W\372\276\243w\003\277b\241X>T\321\003?\302\335r\277\356\203\215\277Oi\251\277|\326\334\277\314C\272\277\3152\247\277\360\007\355=j\315\020?\360V\245<\202\242\364\276\3578\334\276\000\320\010;\317\325\315\277G5\243\277(4\024\300\200b]>\0068H>sM\332>\321\357\"?{=\016?\324i\342?\262G;@\202\303&@\300\006n?Tq.?HT\237>0\3546?\316\233Q>\206\335\022\276\033\037;?\352n#?\314\361\365>\365\355\211?`\275\333?\020\231\020>\340Eb=<5\032\276\264\200\315\276o\231\252>\244\253\307>P#\024\277)\020\032\277\374\301\354\276,R\322=\254\251 ?\370\350\332?\230N\037?x\241\343\277V{\317\277g@\323\277\r\024\210\277H!\357\277\177P\300\277?e\314\277\037!\347\277\317\375\224\277\264<I>b\021\326\276/\246\215>\\\265\370>\025p\204\276\215\321\313\275\357[\230\277\\\314.>\370\235[?X\345\177?1\022\232?\355\274\227?\220G\004?\360\003U\275\326\\\013?`*\203>\310\020_\277\327\246[\277\010S\271=\244\274\034?\270\017\212?\237\002\331?\322eW@\242C-@\240\265\373?\014\336\373?\376\253\303?\"\253\371\276l\204\303=\356\375&\277`\205\311\274\2308K\277\300ke\276;\225\000\277\310\257\307\277\004U?\300\022\243Y\277\272^\333>f\333K\2766\031\272\276\311m9\277\034\350\223\276\220Sv\274w\246B\277MO\000\300F\240\365\277Z\243%\300\317\375\002\300*\266\006\300\002\362\001\300O\252\203\277\024 \247?P\347\244\276\340\272@\277\334\233s\277.\000\343\277\010\250\346\277\030\260\027\3005O\025\300IQ\240\277\226\021\215\276\301\311\235\276\226_@\277:8\276\276:\3435\277%\370\024\277\333\373\036\277\243\350\213\277\234\351\213\277\300u\300=)\330\007>p\345]>OR\230=L\265\235>\377\237\003>\360{W\275\224\240\341\275\3677&\276\324\250\227\276(\\g\276\270\247\300\276\223<\275>\366\2079?U\233U\277\026pq\277\367*\031\300x\225x\2765\221\247\277\312\177\353\277T\271\246\2770\355\236=\324\372\014\277\365\365\371\276\266M\034?\006Y/\277*\330\311\276\224V\275\277\016\366P\277\000\352\234\275xyG?\240\332\334\277\241<\256\277\177\254\274\277+\277\213\277\337\013q\277\300\334p\277X\253\312>\377u\204\276\241\330\021\277h\234\204\277\273\010H?p3\203\276z\001\306>\344\236\025?\030^\325>\352\360\201>\252\360\276\276\266#:?\212\372)>^\240\'\277O\361\204\277\370^3\276\216\345\231>H\241\313\277?J=\277\214\227[\277\360\332\241\275\355}$\277\350\355\205=\327\316v?e\031\260>a\303m\277\375\014\004\300\302\314\032\300\242\001\370\277\323\275\003\300\26274\277\000\375\234\275\322A\333\275_\267\366>\227?\334\276]\260\313>T\377\213\277P\200\006\277\222\222\021?P7\241>:\3205\277n\257\315?\360X\303?v\327\215>H$\201\276\215\246\251\277\302\250\206\277\010\271W\277\200\360=\276\006\275y\277KO\344\276\306(\346>\\:u?\232%\375?\366EA@\357\207\365?\305R\271?\203\332\213?$yo\276\330\344\333\276\177\343\207?\214\035\376>\024\"\254=\327\232\244?`\210U\275N\375b\277\010\321\307\277\270\253\024\300\024\2030\300\243\221\004\300~\372\\\277\304\304\350\276\214R\004\277)\3565\276\376\031\271\276\246.\300\275aoM?H\031\245?eI\000?6@3>v\353\262\276\202\322\256\275`\035\355;\030_\022\277\370\266\023\277F\207&>\003\276\237>h,\224\276\271z\262\277\200*\344=;\242%\277\236\341\254\276\334\360\256\2760\315\030\276g8\300?(q\343?\231P`?\027J\337>\324\034c\277`2 \277\366\031J\277\250\004\372\276\343?t?\300\341\262=\336\357\026?)\300s?\032h\270?\010+\345?\210\351\346?;\310\001@\214\010{?\330\232D>\214\003\235?\244\253\t>\246KH\275\"m\017\277:\215\271\277`I\n\300\307r\007\3002\300\201\277\206[\263\277\316\030%\277\326\263\234>\232\362\316\276\260\202\207\277bq\266\277p\323[\276g\226\364>\240`\375\274\306\221z?S\340\214?\324F\251?;\037\001?\365\242E>\315\375\211\277h\257&>\301\300#\277\320,\317>x\263\264?we\336?\253b\321?\026\345k?\222}^?\242\266\006?\016\275_?:_\340>\342\211\340\276\021\r\201\277\232\275\204\2771\254$\300Ip\001\300\\\334E\300\034P\337\277\366\'\313\277\303\361\"\300&\034p\277@\210f<\370\'\'>\245\356\177\277\3774\224\277\224P\236\277^\377\360\277\003a\\\277h~\021\276\215&\036\277f,\247\276\311\300\275>r\371\363=\322\211\242\276 \332(\277np\277\277r\322g\277\013\0042\277z\207\373>&4}?\200d\001\275\203g\363> \303U=<\235K\277\246\330\263>\357V\211\276e\235\322\277\030*<\277\210F\033\2760\271\363\276A\314f\277\032\374_\277\213\214\313\276\340\247\017<\200 R?\324\263\224?\267u\013@\256\331\261?D\026\253>\035\305\023?\022Af?\210b\276?\023\013\237?\022\315\005?\227\273\r?\302\003\">\210\2271\275\205\214}?`\264\002\275\326\340\325?;H\216?X\352\357?`\232\370>\352\202y?\3460\004?\\\033\277?\356\224\252?p\213\001@\320\251Z?\270\3705\276p;4\276\201\370\220\277$\326\301\277\320V\323\277<z\270\277\314!\264\277\262\265\014\300Z\305\035\300Nf\251\277$\257\207\2772Z\305\276\270\376\021\277r\324Z\277tw5\277(\033\220\275\034t\276\276\241\t\217?4\035\276?l\217-\276>\2069?\227L\235?W\241\231?\227[\316?\224}\'@\276u\263?\253\005\332?\r\322\241?\274xs?\010\322\264?\t\331\324?\231q\217?\356PP?p\351\\\275|\027y\275\222C\273\276>24?\362&}\277\270\355\334\277P\315\000\300Z\263C\300\270\201#\300<H\005\300*\036\\\277 \021\276\275\265\214\312\276\036b]\277y{8\277M*\260\276Xet=c\206\020\276\246\014M>\023Qv?f\246\240>E\246\333>\262\361\177\276y\027\000>en\017\277\021\304\032\277\200\213\213\273J9\223\276\211\356`?\010\270\203?\374\313\203?\360\n\030\277z\354@>\330\346\024\277H\006-?6\225\'>\237P\036\277Z\363g>\274\014\034\277\260\342\004=\"/\227\276#\203U\277\303\317y\277n\261\362\277X\304N>\317\362\210?\226y\325?\240\201\276?\254J\'@\240\204_@\214\200\376?\211\r\347?vO3\277\026\317X\277b\342\225\277\274\350w\277\240<\237\277xF\\\2772^R?\236\263n?\021\346\367?\354\244\237>\352\207\370\276\002RL\277@u\326\277\312\363\004\300\255\251\033\300\224\214\324\277[\230\317\277z\251\203\277*\360\006\277w\204}\277\340\353\216\274\224\277\304\277\030\035\303\277\267\r\341\277\000C\035\277\323\343\013\277\246\302F\277P\323)\276\236\302s\276\20549\277\341d\310\276\335\354x\276\360\236\010\275)\211b\277\346\347\200\277\3724F\277\300\010\325=\322\254\210\277\302\305\t\277\316\024\016\277\277\351\214>\371z\003>\245Ke?)u\223>\356Q\235\276\037\330\223\276\027K/?=\366\332>\203\206\256?\002\032\351?\370Q\254?\013\244\005@u2\007@\210\266\351?`L\244=\222\020\251\276\0305\351\275\033\3506\277\277^\207\277\030\030\220\277\376\302\357\277|*\212\277\026\314\210\277\246\377\375\276\177\327\200?\201\244%?\3529\332>\214l >\002\332\006?\311\354f?\004L\363\276\264?+?b\215\022>G\036\277>zH\257?\177S\002?\344$d\276\351:\236\277e\202\226>\2630\302?\322\345\226>UjA\276\270\2244\2762\243\224>7\377\312\276w\207Y\277\253\353 \277\322\207\010\277;\215\'\277Z\353\333\276 \204\344\276\275\303\017?\254T\300>Cs\241?f\215\"?;\237??\257L\010\277\202fp\277\224;->{G=?\277\316\256?8C~?\251\362\241\277hp\206\277\036\375\306\276u\365t\276\210\253\217\277i\235\374\276o\230\333>Vq\242\276\"\264\021\277uM*\277`\256D\277h\270_\277\0349\340\276X\340U=\\\002\202\277\246\201\266>\032\310\334=\340\340t>\357\265\215\276\334\335\224=\346\3070\277#\236\340\2778\024\254\277@h\243\277\246\233\231?\306\356\271?\210p\377>\212wB\276\315\266\023\277\010dv\277\337N\200\277r\205\305>\302.h?\177\313\340?0J\216?\260\214\333?\321\252\031@\330\026\334?\2515\366?\346\245\017?\251\342\245?\322\234\276?\334\343\246?X\331;>k\311\362?\257\300\245?H\003\327?ZJ\031@^\213\217?>\361\237>\244$\334>\014\372V\276\300}[\277\340\227L=\364X\356?\224\0063@oc\211?$\221\003><T\252?\266w\267?,\222\231?%\343\210?\020L\207=\202e\023>\034AL\277\214\0227\277\014\360\r\276\006\017\023=3X\032\277]\033\023\277*\223_\276\256+b\277\327\004f\277\363\376F\2774\003\242\277\364{\t\276\355\216\236?\224\270]\276\253\376.?\216\227\263>\340q\274?\001\350\331?9\236)@\3424\262?\026\"\253?-\023\331?\002\363\007?\321\235\267?Rm\360?I\273\030@)0\016@\350u\231?d\345\256?\243\246v?\352\313\214?\004\263\355>\305Q\217\277\226R\247\276z\031&\276S\245\212\277|\\.\277\026@\375\276?\'\334\276HJ\272\275\226\036\254\276\362\343\347>bB\263\276\300L\216\277X\374\"\300Ab\002\300*n\221\277\330x$\277\020)\034\276\005\331\361\276\347\230s\276\201\264\216\276\240P\004\277m\024\216\277\002\006\016\277M\301\032\277QY\222\276\353w\217\276\274\013!=\324J\367\276d\004.?\2105\273>\031\024\000>\2221,\277zo\211\277\252\227\322\277p\037^\277\313\247\333\2776\271;\277\240\303\363\277\322\377\003\300H\377\312\277\354\010\260\277\236\261\026\300\010\315\353\276\026\217b\277\330\0135\277b\026\234\277\221!\215\277\261\231v\277\376x*?x\tL?P\330\300?D(\"?>^\312?\210\277\370?R<\"@\256\214%@\210\261\261>\n\030\357>z\355\242\277\272\214\257\277\226\006\311\277\ni\337\277`\227\037\300N4\270\277\207?A\277*\227\354>\240\023\305\275\037\204\314>\256\235\252?\356MI?b\201\333?\313^\035@\303[\362\276\037\2236\276*\\\346\277d\251\302\277b0\022\277\002\203*>\010#\277>\223\205\236?5,x?\006\223\n@\014\343\023@\214\350B@\024\031m@j\330p@\030\257g@\277\325f@\3472A@\241\223\r@WN\t@s\340\003@{\252\203?HL\224?\350\305$?\303R\007?\"?\231?8\305B>Q\333\300?h\023\002?+q\344>\304\"T>@\n\001<\003\350\021\277\300\227\336\276\370P7\275\274\301\246=\252\247\321=\251\021^\277Nt\024\277\356\222\237\277gx\002\300\232h\366\277\237\306\375\277\030-\032\300\200\234\256\277\221L\t\300\224S\240\277\310!\226\277\224\013\003\300\306P\264>\002^\003@\245\275\345?\216\300\360?\304\334\344?\223\235\335?F2\350>\n\344\220?\347\306M?n\272I?\262l\021>/&\205\277\330\275\235\276\276\236\204\276\\\265\303>\260\331\326?\013\301\345?\036\000\235?\223\"\230?\373Y\017?0\221\235?pD\237=\177\334U?\002\224\201?\305\242\322?\335\355\223?\253\200\361?j\344\307?P\303\240=\005(\232\276\351]P\277v4U\277\000X|\272L\270\356\277P\373\311=\2205\t\275th\020>\322J\t=\020\230E=\274=\006\276P/T\277\"\014!\277sU\206\276#\200\230\276\2362\303\277\271P\274\277\233\365\236?J\3719?\350\013\215?5D3\277\320c\317?\324:\337?\303\336\324?b\004\363?D\246*?yY\003?\037\324y\2776?\374\276\220\362\251\275\274+\322>\304\375Q\277\204\356\343\277\0209\006\300C\3137\277\236s\306\276 \341\307=\036Cw>\362\305\361\275\346\270\254\276\370\375\362\276\347\352\347\2764\307l?\346\034\362>\271)\240?K\327\332?\210#\202?\320M\007?\030\275.\276.\347\202\276\356!\031\277\243\030R\2774\317\255\277t\004\232\277\002\217\334\277\221/L\2777=\022?W\037\276?\216\306\213?\377`\030?:\201\025?\227bV?\006\200 @6\020\344?\255\220\243?\252\024\266?\334\252k?KM\221?\356\031<?\246\344\310?\266\352\320>:\224\331>\342@\371>\260|\362<\247\244\353\276K\276\347\276\304\333s\2773U\320\2763}\237>\260\344\030\275z\360\231?\274N\215?\202\340\253?Ib%?\302oY?*iu?rm\310?5J\213?L\016\200>\000\332\236\272B\325\001?0\313\202?\223\250\352>\2464J?\0348\277\276j\311P\277\2369\007\300\024\006\027\300\242\276\002\300\341\372\236\277\330\326\377\276\303\215\247\276.\340\355\276\320\023\025\275\003\035\343\277\260\255\237\276\\ \352\276&\002\205\277\200\331\327=`R\213?\370o\227?wx\224?\352B\244?\"T\336>\035\315\010\277B\310\215\274Jh\204>Z\001\277\276\026\2043\277\006;\323\276\013Y\026\276\231\204e\277B\314\t\277\316\227T\276\272\363\261\277 T\200=\027\241)\2773\213E?Z\377%?&\230\330?\265\321\201?\210\037\306=\330\234\305>\r\240\341\276\325\244\335>j\360\177\277r#\311\276\246\243Z\277\300X\001\276\271\372\202?\252\213\217?\260N}?\276\013\"?\364\244\250?\203\371N?,\210\261?\360\270&?\226\177\224?\0205^\276\303 \230\276\006PC\277\332g\207\277\272C\371\276=|%\277D\002T?$1\254?.S\335>\214\350C\276#\207\351\277\231UB\277\023F\003\277L\271\304\2769ez?\307\220\360\277\037N\022\300V\347\006\300i\370\t\300\247y\335\277x\356\262\277(\030\351\276sN\240\276D\014\210=\375N\306\275\272P\034\277\372\0349\277+rC?t\325o?\3306\001\276D(\227\277\207\010\347\277`\177\200\277H\303\263=\226\316Z>\026\273\350>H\250!\275\3344X\274\2215V\277RrD?]\312\262?H\000\201?\364\004\266?Ja\311?h\305\013?n-H?\340\236\007=|\331\030\276\337.(\277\263\237+\277\250\303\276\276u-\360\276\362\213\034\277DA\372=\360ES?\'\214\337?\317A/?\316\203\277>\306\270K\277&\256\340\277_\261\313\277\024\236\247\277\005\221\227\277\r\0345\277\306\026\256\276\3004\006\300\335\307\373\277M\321\346\277\346\327\274\277\207\n\245\277\343E\234\277\004\211^>\212-\223\276\242\023}\277`\251\307\275\367V\361\275$\233\221>\237V\334\276\306\265\272\277\240\336\226\276\312^\307\277\203\321\303\277\024\027\263\277\363\016\205\277\310\322\232\276\001p%?\337\022\265>\354\313T\2752\300c\277\250\216\327\277\023\016\303\277\210t\317\277.\002\353\277\320\031\235\277\0067\306\277T\037\016\300\253H\374\277=\301\001\300\201\302Q\277\311\317k\277&\320\252>\tp\261>p\337\266<\016\005\022?|\350\206?\330\273\021?\261=K?\006\261\202?N\264\273?\242\032\343>T\324P?o\342%?\266\340\007@\371\210\227?(\335\222>\336_\035?\017,\224?\371Qb?\326\264\010?Zek>\244\235\367\276\000\372\300\275T\274\306>\226\240\250>\204\263\002\277\002\310\177\277~/\246\277\346\311\240\277\035\303d\277Y\361\204\277\024\270\276\277\255%\016\300\276\020J\277\332\301q\277\360\271\t\300\322\"\236?\340\022\020@)mu?\276\366\336?ru\017@8\225\365?\233\203\305?\326b]?\000\016\224\275\362IC\277\034!}\277=\006\362\276\307H\227>\366,\267\277&\233\336\276f\310\315>\362j\200\277\230p\310\275\303;\000?\220\033\216<\222\371\205?\nC\262>N\247\007?\030Y\002?\003\347\201\277\350\177\r\277\345N\337\277}\301\347\277F\346\344\277\366\345\001\300\220&\303\276f\321\345><\340:?\252\030\003\277h\214\313\277\346\013_\277\326N\235\277\364\247\020\277\314\352\205\277\230\347\007\277\"\017[\277\346\017\331\277\030\005\373\277\024,\252\277\320\256\353\276<\224\373>\004M\347>\324?\322>\230\371\270?\374\033+@\330\030\003@\036\r\365?$\322\321?\rm\257?\224D\026\277\330\350\353\275.\365\237\276\206\361{?\014\307\265?\363\023\303?\300>\253\276\362p\010\277\013\340-\277\260\356\037\277 \002*\277\3441[\277Dt\370\276;\013\020\276\327Y\217>:-\'>\252\271\333>\344\370r?"
      }
    }
  }
}
node {
  name: "normalize_element_1/component_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 100
          }
        }
        tensor_content: "\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@"
      }
    }
  }
}
node {
  name: "TensorSliceDataset_1"
  op: "TensorSliceDataset"
  input: "normalize_element_1/component_0"
  input: "normalize_element_1/component_1"
  input: "normalize_element_1/component_2"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_size_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 4
      }
    }
  }
}
node {
  name: "drop_remainder_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "BatchDatasetV2_1"
  op: "BatchDatasetV2"
  input: "TensorSliceDataset_1"
  input: "batch_size_1"
  input: "drop_remainder_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 4
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
}
node {
  name: "normalize_element_2/component_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        tensor_content: "\332k\220\276vf_?S\254\032?\376\2778\277\320\346\023\275H\353<\277\010n\362\276\325\241\216\276\377^\343>\322\322\260>,\342z?\352|7?\267\371\020@\270\341\323?\030\272\363>\360\022\210<\224\364\303>\223\310\000?\350f\226?4\367d>\202m\000\277\232\374>\277>M:\277L\252\360\276\022\265h>d\271[?\030?\353=\371!\010\277\315(\271>\211-\000\2775\030\370\276 X\230<\022\026C=8\367%>\305F#\276\030n\005\277!\325\214?\036\306\225>\242\016\226\275\367\251\377\275\007\030\254=\232R\350>$u\010\277\336\000}\276\344\364+\277\325\316\034\300\327\317\030\300\346Z\000\300\346 \250?`\354\227\275\252\372\235\276w\001\353\277\235+\350\277\262Wm\277+c\353\277\261\277\350\277*p\275\277dxI\277\332o\333\276U\246\256\276p\005\234\276\373\237\021>b\301/\277$^\202\277\225\343\226\277\240K\252\2748\310V\277\200.\226<)Fh\277X\346]>\200\227z\274yU\371>\0001`>%GE\277 9\023=3\345\240\277s\030\365\277a\213g\277\344\277l\277\306\222\306\2772\270\203\277 @\370\275S\202\311>\212\251\036>\203\276\254?\024\224\273?\3602\002@\373\233\"@b\274\031@\277a\313?\226\377\235?\356\024\300?\010~\231\276D?\373\276\362\3524\277+I+\277\240\330\253>\000\265Z\274\236y\252\277\345\037(\277t\272R\277\363G\203\277\320\225n>\342\222[\277\362\035\037\300@\243;\300\360\303B\300\020s<\300\023\022\030\300BEF\3007|I\3007u&\300\353f=\300\324\370g\300\270\341=\300\324\363\302\277\344\003\265\277\247\336\032\277\256 K\277\034\r\326\277\223\004}>Z\300\320?SM\002@\222\035A?\347\251G?\331\272;?\260a\032?\250\205\212?\326\363\220?\n#\344>(\312=\275c\r\001?F\036{?\3200w?\020\014\262?f\033\255>\274\242\246?\324\035\305?D\356\n@\024\210\001@\355\211:?\214\020\177?Vx\273?\332d\252?C\224\013\277m\326\257?=\3236?\314\363\350?\330\247\333?\234\031\004?\316{\001@P\251\274?\326\272A@b\312\016@V\314X?\300\271\021\274\365#j>\302&,@)\346\031@uc\303?\264r\300\276\365\327\014\277<Sm>\220\1773\275!\\\014?\304\271O?\270\250\223?\214\0000?\rx2\277\234\0223\277\323\362\323\276\234\223n\2770\310\373\277,\312!\300\202Q\t\300\3524A\300z\253\337\277T\220\342\277\300B\266\276%\373;\277\332\000\234\277m\377b\277\332}{\277?]x\277.\247\344\277u4\037\300\2215Q\300{\312C\300/\2207\300\236\032\341\277\370\0242\300\264\263?\300\177\245%\277e\300\272\276?\360\333>\3448\220=A\224\010?\202\232N?\331\207\373>Z\367S\276s\375\003?Lxh?\230\027\020@\332m\255?\301,\234?\230\006\232=\364\373\342?\000\230A\273_Y\207\276\232\221\232\276\325\365\230\276\017B&?\223\356\353?.\206\201?\310\252\034\276\234\202}\275\317\373Z\277\350\333^\276\016\343\330\276\304,\301\277B\344\344\277\366\3619\300\000\3544\300\366\3300\300\330\004d\300\017\354\030\300\304\303\254\277\223\363]\277\372{\001\277\243h\204\277f\362\341\277\365\356l\277\212A\376\277\316\206\307\277\217L\201\277\256\014\206>\n\200;??\267;?$z\220>\252p\342>\006\n\335?\270Z\273?F\201Z?|\027\242?\212\2726?\236\034\235?F\235\223?\000\211/<\337\273\331\277\242\324\223\277r\214,\277\222\315P\277\341\022\207\276M\237\007\277\014\005\262\275>\377\177\277\351\324\307\277\375\321\323\277\256\003\325\2776\257\230\277\226\220\327\277O\331\370\277\3700\234\277\356\307\360\276\010u\207?\203\220\226?\354e\355?\252i+@g\302\t@zS\332?L\023:@\233\222F@yDN@#\370&@\t\"\234?N\330M?\254\211X\276\017g\322\275xT\\\277@C/\277MQ\222\277\236\347\'\277~\000\217\276\327{\263\276\342-\335\277T\021\020\300\024|\002\277g\230\340\277\016\355`\276\t\005/?`v\236=\360?l>e\302u\276\350\206d\275b \252?\210\006\036?\026\345\'?\354\212B>\316U\206>R\216x\276\3342\036\277P\365\376\277\312-\350\277\000\346\031\300\202\332\233\277\270\032\317\277\n6{\277h\342\207\276d\006\311=\025\206\241?&\005p?L-!>\240\323\023?]\363b?\216\304\254?\317\330\336?\217\272\r@\344t3@j\031\261?\230P\231?6\212\242>\244\020\010\277\304\325\313>\253w\017?F\314A\276`rH\274\305\350\270\274\242>\005?>@;?\210\352\370>\3547%\277\342B\325>Y\220\266?P\327\337=p\372\345>/\367\211?&z\022\277\0224\204?\222N\247?XT\273?-\036\304?p\377m@\257%c@t\235-@\007\340\000@\262\000\306?\343\341\312?\317\031\366?\222\027\276?{\346\373?\223=\362?\363\312\364?\376>\346?z\272\237?\010\215\207\275\372\251\242>\341&\006@\262\007\375?\235\204\366?\220\034\370\276\016\320\303?\256\023r?\235\032\313?\237\201\310?\300\354\326?\232\302-@u\005\002@\230A\000?\262\024\321\276\254\001\035?\340\255\243\275d\003\252=S\254\017\277\354>\024\277\244\216Z\276\r\250!>\000\327\226>\371@\360=\332\365]?\270\245\022?i\224.?\327d<?\020\312\225>\215-T>\032\004-?^N8?ch\024?\310\203\000\276M\257\020\276a\225T>\340ze<\205\247\363>S\347&?`.\205\276\002\300\260\277\214+\032\276\000\261\210;\355\207\206\276\230\351\267\275\242\223#\275`\310U\276\347\3239>\375\255\253\276\220\275\001\277\210\364A\275gr\000\277\320J\034>\330)\227<U\334\201\277WH\201\277\240\303\360\275\334\177\336>\204\230!?^2h>T[\346?\260\316\017?\200\260\t\275Dh\235>\256\273\226?\234\274\307>\372\334\345=\247\332G\277\327\373i\277\264\2038>\244i\214?\232\035c?\214\003\317?\344\005\244?\344\'\272\276\024\2142\277\367X\201\277\350*\270\277\202\310\346>`~$\276/\331g>]W@?0\246\307=\224\270\001>n\035{>\245\367\036\277\214\256f>\360|\215\275\371\211\306\275z\032\234\277\321\'\201\277\264\360\326\277\230\3739\276m\247\242\277^\032\313\2771\207\020\277u\325\212\277\3632\210\277\361\304\345\277\227\033k\277\314\266\207\276\202s\004\277\336\020\260?ap\005@\324\037\202?\266@\260\276 \252\307>\224\302\205?h\371\225?R\227\331?\010\246\236?\357\223\016@\302[\262?Td)?N\277\226\277\377]\007\300E\273\007\300\364\217\344\276\241\206\225?\312y\205\2774\201\363\276\343\023z\276\205\210\"\276G\262\236\277tb\330\2779@\321\277\337\255\260\276\3069\264\276^\375\241>>`1?\374$A?\030\026$>:\211\030?|\314\r?\252\2668?\324n\330>}\310|>>\331X?\376\355\257?I \211?\232)\023@\310\363\266?9\272\316?\000e\235?w\247??i\004\202?\032\"y?\306\240\024?\324\370\303?\250`\357>\256 D?\302\343\354>\241\024N\277\230\302\212\277z\240\240\277\"\232\205\277\002\243N\277(\026\252>\255\227\223?`y0=\274\274\270\277E>\032\277\300zF>\325J\266?p\320\322\275b\372`\275\324\253)\276\204G\250\277\016\350\253\277\300So\275s\033Q?xGo\276X\200T>\337\257->\247\236\346\277!\373\277\277\316\032\007\300\341\253\304\277\306\3022\300\375j\220\277\335U\324\276Bl8?l`\001?\330P.?\344N\254\276\2001\333=\232\014\361>+\302L?\365\023W?\224\272\310?\027r\313?\021\216\'?4\263\277>\007\302\'\277\362s\317>\032\213\006\276e\351\266\276\026\031S?S\256\254>\224\200\203\277\230\375\214\277\363\250S\277.\366C\277\321\334|\277\266\026>\277Q\363\211\276L\353\226\276\203Y\225\277\240\352u\276P\304\371\276\245\276\027?\214\271\310=ES\000\277\252\335\234>E\316\023\277\360|\235\276\353\267\271>\261S\256\276\340\221S?v/\247?\302\367\227?\376B\231?\213\357\225>\261\215.>2\016\003>}\017\260>N\245=?\2209\222\276$\264\331\276\334Bm\277\350~J\277\340CB\2776\272K\277\027\332\325\276#\200\224\276\252\361\202\275,\3331>@\252N>(\371\204>\237\355\254?\364\352\322?*\306\241?4!\007@\2414\006@\320\343\377?\344\300\330?=\251;?\245\334\007@z\"\253?V\315\024@Kw\017@\002#\371?\225\3701?\360^6?\314Q\024?\3330\206\276\213\024\355\276\301\233\263? L`\276\311\242\016\277\254\231\277\277\305\033\002\300\344\364\010\300!\337&\300\277\254%\300$\222\263\277\224\346\022\300\n5\204\277b\247\243\277\350\361\343\275\337\2331\277\210H\250\276\250~6\277\\\200g>Xa\345\276\240\207s\274R\"\212?\2772c@\360l\216@\315\013\205@\213\354E@\230\3776@h=l?Z\240\240?\034\235\036@\010\301\000@\224\240\277?\226oA?,\250\264?\022;\364>\200\257#<\002\256\243\2778P\320\276\177<\213\276x9+\276\002\262\305>\351\203\\?\317\310\343>\305C\337?ct\024?\304d\236\2756I\307?\346w\313?\330\310c\277\266\360\277>0\221Z?\031S\034?5\263\017?FD\252\276\260\205\327\276\262mw>\314v\212?\214\372\017@{\234\263?\304c\245?\26795?\236\316\337?\0366\t@\362l\254>\261z_>\274\251\"?\222V\t?\306\242f>i\204\217\277\010yG\276\206\305\211?<c\334?\365\316)@x\365\013@FT\201?\260\035\301?\330\336\215?\352Z\014@Z\'V?PI5\276|\316\206>+\177H\276\215\247N\276\370\301\345\275\313\334\211>\370^h\276\030f}\275\373\244\207?(Q\227\276\311,\303\277\356\315\371\277\335 \035\300\340\306\341\277 \300\353\275e\345\014?\030\020y\277\200\320{<<\247\335\276\034\336\304\277\324\035\317\277\230oZ\276r\247\241?x\273\254\276\334\366%?Gb\214?\256=\227?$\306\254?u\373\246?Q\205x?\177\247\203?\266&\312?\372\233B\277\026l\200\277\243\241\177\277\\\277\021>\251\342\236?ur\255?2#\310?\020\322\370?V\345\347?\237\375\235?\376%\371?\273\261\023@ln\306?,\203\034@\333c)@S\201\026@\352(\272?\200\311\262?\177\222\267?\333\262\224?k\202\244?!`x?\227n(?\020\251\351<\313\345\370\276\225J\202?\006\332\216?\364\030\205?w)\257>\230\230u\276v\017\243\276\242\304J?\nha?\203\241\222?\2502\225>%\261\253?\202\3334@\013\2441@\204\022M@\271\312\'@\020WS@\037\313?@_\3526@\311\252*@\301\272\031@&\346\354?\250\263\350?@K\271?\3167\253?NQ\347?`L\347?x\265\230\276\300\257v\276\\\353\335\276B!\262\277\266Gq\277\032]4\2771k\230\277`\027\333\274ft_\277N\367\200\277\026W\233\276F[%?B\2178>\322R\007?\"a\243>\373U\033?\3108\276\276`\356\235\274\026\031\002\277fU$>\031\021u\277\034\374\267=\355f\222>4$R\2778\035\r\277\364mx\277>:\205\277i\024y\277\260\262*\275\002\363\266?\264z @\246\007\034@\367\337\353?\033F\025@\202/\001@\223S\351?\254m\271?Z\010^?\340s!\275D]\247\277\242g\276\277\024{\212\277<1\314\277[\276\205\277V\206X\277G\253\207\277\010\211\006\300V\366F\300\360\020\005\300\034\200\017\300 \224\017\300Uz\350\277p\221\344\275\244\014\020\277+Gk\276\235\023/?\356\266\312?[\333\251?~\225\254?\314\242\035@\276U\240?\207\320\365?\034\223o?\254\251_?\273\317L\277a\364\"\277F\335e\277\032\357\236\277\\\225\232\277*\264O?\244`C>\360Xp?\326\001\243?x\357}?\224.\343?\214/\323?\020h\317>N\216\030?\310\034\307?\320\024\344?\n\252\253?\272\350^?\216\020\002?.\237[?\013p\255?\000\235\315=\254\177#\276\212i\022\300\024\'\026\300\3441\254\277\303L\252\277\036\256\033\2773;\244>\304\257\212\276j\274\201=~\001>?\257\322\027?\300\010p=\264\223\306>c:\222>i\024\'?\300*W\274\204\311\t\277\340\370\014<T\023\004@\206TJ?\002\036\306>\364\370`?f\264,?*\002?>\304\212\260\276 #L?\331\265\n?&\325\036?,\2406?\004\267\262?(\234\333?\210S`?\355\360\323>.\310\206?\220\024\004?\3026\332?g\324T?\265\016\263?\316\004\t@\240\315\000@\036K\244?al\376?\200w\315?(\205\351?p|\255=1\"&\277\201\274/\277!\246\203\277\200\354\303\276\346k\020\277\275_\235\276\205U\314\276\203\345,\277B\271Y\277J\243X\277.C\302?8o\347?a=+?f\233\216>@\026<\273\362nr?Y\"\333>\251GP?\020\275z?\r\263k?\332\274%\277\355\262\216\277,\267#>\240\222\221>\363?\031?\025\341\214?b\236\031?l\322W?Z\374\255?\276\350\017?\312o\233\276\352I\310\275\212\347\271=v\262\245>\200N-?\244\305\310>2\251\007\276V\363;\2766\365\261\277P\003\221\277\215\234\317\277\255\255\315\277\014\327\252\277\007\210_\277\270Vd\277\013o/\277E?\205\277u\334\024\277\326L\373>\240sD<o\216\">\300\274\216\275\263\376\r>\277\327\256=\230E\270>\277\ts?\244\326g?\276\307\257?\275(\372>\000#\030?B!\002?\007\341\001@0\2068>y3F\277\260I\034?\202\245\335>?\305\326>`&\n\274\265\"&?\001DB?\303<\022?\242c\013>\022K\177?\306\206\333?\220\367\331?\350\016\357?\267\240\236?&\272x?Xk\311\276}0E\276\352\346#?Dmu>\017\223\020\277t\246\220\276X\304\213=\013i\351>d\'~?\005\257\226?P\006\036=,\245\227?\240\r\\\275>u\221\277\303\006\027?\216\271\246?Ne+?\202\217w?\254\330\334\276\022\247\276\276Q\2256\276d\364\025=\301\352\304?v\001\251?\356\267\234?0?\035?+\003\203?\322V\201?\370W\265\277\000\034\246\273\023s%\277\312\236?\276l8\014= ^\320>\332\214k\276\320\027\264>\257V\375\276\322V\035\277\376\371}\277\206%x\277\303\257\n\277b\3658\277\240I\027>\250\030\231>\324q\014?Tz\032>\\z\267?4(-?~\216J?\334\346\201?\n\356g?\023\266\032?U$\302?d\370\367>\036#\036\277\376\034Y\276\'@\220?\240\361\315?\264\330\301?\370/%@F\274\242?\003\005\273?\032\224\323?4\360\210?.\337p?s\201]?\325c:?\236\201\307?H\032\206?4\353\231?81>?\212\255\302>\304\233\202\275\265\261Y?\204\331\211?\372\330\254>$\003B>\301\354&\276\325\026t\277T\226\227\276\200\242\233=2]\221>_eb\277A\310\207\277s*{\277\253\362\033\3003\305\t\300U&Z\277\374V\205>%\017\361>\230\237\351=d;F?[\006U?(\310\224?\236\242\367?4\200\304?\031\303\267?\323D\203?\301}\201?\302\222`?\352m\200\276\307\350\204\277\302\366I\277~ \222\277\300\217\033\276\200V\035;a}K\277\363\0336\277\031H!\277\r{\212\277;\242\214\277\225\227}\277\361\240^\277/\262t\277\366/\234\277j\270p\277\3735\365\276z\210e>\360]\200?\033\322\207?UT\004?i\247i\277\022\313\016\277\244\316\352\275T;\233?$\364\266?;,\004?\301\210\372?\0258\004@\300\326\331?t \363?\357\007T?L\254P>\2007\313<\377\307m>\226}\275\276\334\000`\276\325e\017\300b\257G\300\307\316\272\277\t|4\277\034\017\r\277\240m\250\277\350$\203\277\272\215\363\277\255\0257\277\362\220\013\277t\r\216\277\030\235\030\277k\230\257\276\342\022)>\366\216\364\277\242(q\277\242\200|\277 \217b>r1\200\276\270\344X=\235\325\366\276_7\304>\031\331\214?;D\337?\310\302K?\210d%?\274O\256>\242\006%?\256\004\245? \201\253>\262\323\311?\254=i?\314\240\033>\302M\321\276\010\200\352>D\353\221?(\202\310?\030\371$@<\000\373>\201\004\230?\014QG?\020vD>\023\tD?\360\006,\276u\204??\233\035Y?,\343\235?\347L\013@\036\347\027@\022\347\376?\351\262u?\264\301.?\234PE?\016\210\324?\314\330\247>\302D\014\276\323\204\242\275\276\224\003?g\2737?tJ\004\277x\214D\277\372\367\267\277~\251\341\277\320\353d\276\230\324\231<\245_\026?\252\303\t?\342\010\212\277\343\026!?:\234]?X\231\246?\004 \266?\250\335l?\326\236%?6\367\220?\016\317\206?\017\032`?\344>\353\276\251\202\307\276I\005\326>\374t\370>I\246\370>sl7\277#\344\006\276\245\327\231>\233\003.?p\345g?uF\324>\253\245\331>\250\212\251?u\272\207?\355\3374?\230\220\204?\270\225\210>\013\332\220?\254mF>xf\213\276<}h\2752(\266\277zK\004\300\2324\022\300R>I\300\245%\373\277\002\3760\300?)\267\277^\303\031\300\240\262c\277\343\241\321\275\340\024\265\276\024\362J\276uA\311\276R;\014\276r\'\227=\3325\245\276\364\333.\277\363\025\217\276V?\236\277\232\346\302>X\231\"?\336\023\213?%\337\255?h\242\263?\3640\212?\362\326\033@N\322H@\212\222\032@\001$\265?6\356\205?n=(?6\r;?\3733\216?\345F\334?\360EX?BU\013?\000S#\275H\224\004?5@\177>T\345\260>\311\200\201>\000\235\226=\377pt\277\213\037\237\277?\203\014\300G\201\023\300\312\027\\\300\314\234\235\300\377\213\232\300RVO\300\264\005\370\277\2209\202\277\254\270\366\276u\271\357\276\027\037\212\277\271\022\240\277,\223;\277\275\236O\277g\202#\277Q\177\377\276<8~\277\211\203\335\276j\026\337\277\332\025\"\277\256\022\034\276\ng\\\275\225\335\272\277\220\007\335\277\021\"\320\277\370\232N\2770%B=\2426\225>CK\277?\320|l\276\032\010\'\277X\035\324\2778\213X\277\310L\357\277\364Y\255\277xgP\276\342\025\345\276E\204\034?\rK!@\340o @\322T\n@zB\256?h6\324?f\332\035@\330\220/@\366\177T@\204\311^@\007,2@m\344\014@\370q\254?H\302\226?\220\333\355?\264\231\000@\036f\006@<\360\355?LL\202?6\234\211>U\362\216?\230B\334?\336\033\021?Y\370\354>/\372\216\277\224\236a>\322T&?\264\331Z>1#%>E\352\322\2771\217.\300\002*U\277\266W\023\277H\274\274\2772\322\340\277>or\277\225\315\357\277fSv\277H\376\243\277K\316\255\277 \224[=\334UG>\271\347\205?\024\3216\276y\0240>z<\216>\312/\177?\346\013r?u\2253\276n\231\204\276w\376\213\277\275y\350\277\317u\253\277\177=\036\277\nV\204\277\336\377\016\300\240_\315\277\334\376\234\277\2144\277\277\202\034<\277\336\341\242\277u\220\247\277\231\365$\300I{\n\3009U\312\277\010\363`\277\234\364)\277 \n\032\277&k\317\277]\217\004\300\355\010x\277\000\366T\277\214\262\016?N\302\322\276\260\210\374\276\333f\252\277\240P\201\277\274,>>\333\377\305\276\300\207\241;\021\321\233?\367\203A?\"X\317\276\251*\307\276\325\263m\277;l\200\277\220B\217\277\3202\346\275\007\013\027\277\300\237\332;\276\323|\276DLw?C\214\036@p\310\256?\350\267\347>\202h\252>m\320\234\277\024\3141>Tn\"=\2557:\277\n$\223\276\2749\256\276\300\312&\277\276\\\337\276\313y\260\276\253\214\316\276\3425\004\300\201\377\311\277`\250<=\272-\227\276\300m\203\276\227g\305\276Z0$\277\223\300k\277>\022\372\277\334\034!\300\324\243\245\277\034\366\235\277D\223\"\277~\022\356\277a{\326\275&\216\371\275\210p\022?\373m.?dS\220?\334\220a\276}j\314\276\034(\000\277u\213\240\277\000\356;\274\244\326Z\277\341\376\232\277\354h\217\277\204\010\223\277z\366\234\277\362z\220\277\202z\260\277\233\036\252\2770\246n\277\264V\241\277\244\206\254\277\362L\323\277\361\267(\300\006\335\204\277\226~\026?f\206\322\276`\364\266\277\260\310\206>\026&e\277\357|:\277d\254W>\357/\242>\227\016\275?\324\275n>\366\000\254?\2003n\2762B\332\275;\347\337\276YRo\276\020\007+\274\226w\241=le\237\277\220`f\275\365\276d\277\221|\251\276\371J\024\277\320XM\276\020\307R?\336 \201?h\326\325?f\215\215?\314\263\237>ir\252?\225&^?\321\347\273?.3\344?%\307%@\341\242\030@$\303\367?\307%\004@K\303\226?\367`L?`@(=\350\353\375\275\210s\303\275\253\213C?p8\261\276\361\021Z\277:\243\034\277\232\231*\277\232&\254\277N`\316\277\270\240\304>%\200)?\376\001\337\276\224w9?\202\245\032@\223e\202?\376\204\267?\004\027(@\261\367\t@(\320\001@\224\205\027@J\216\t@\325}\356?\271\322\302?\220f\247=\215\243\303>\0101\002?\356\333\025>\005}m?\220\333\334?\3420#?\250\262\233\275\003\207\317?\305X\005?\320c\005?\n\315+?\220Pm\276\336\221(\277\000\016B;\265\024\002@\300\342\037@*\247E@\324\343\323?\343Bx?\272\035\025?\320\331M\277\374\372\246\277\232k\236\277\274*\236\276gd\220?\362\352\241?\016\034\265?,\002\276\276v\276\004\2770\304\344>\300<\345\274m\037[\277gX\007\277\377\266\222\277d\025\366\276E\240\363\276\270\277\245\276\036\253\243>\362QT?.\236]?\240z\276?}\311\237?\363C\313?iM\341?TB\231?\000F\222\273\202\214\237>\247\226\031\276\220cE\277D\321D\277\200\351\234;\223\204\'?b\335\276?\200\211\251<|a1\277\017\210\002\277n\370\374\276\020\215\222\277\201\2676\277\024\245\370\2768E\356\276\3679\255\277w7\203\277v\200\242\277\360B8\275\221\013a?M 0\277\330\250\256>\317P\337\276q\333\301\276Df\237=\277\266Z\277\032\"\373\276\325\223o\276\32553\277|/X\277r\205\242\2772;;\300\311\361\005\300\024R3\277vF\213\277_$\\\276s\202\377?\360\324\r@$i\'?&[A?\\c\341>\353\3229?`\241\264<\003(\177<\006\360y?\230\n\006@aW\372?$\245\377?f\331\216?\014\335*>*\266\243>N\301!?z\232C>\234\257#?\222\247P>g\022p\276\016OK\277\000\310\246\272\200Q=?o\241#\277\250\217\240\277%\024\305\277\370\217\371\277\206\002\315\277\310\232\035\2771\'3?\342\353\254?\001k\020?\244\231|? \'@>\227\003{?$\222\251?D\037\261>n\233\022\276\256\275%\277\023A\270\277\264\213\272\277h\257\020\300VdI\300\001o\021\300\014\341\377\277<\026\025\300\336!\331\277c\254\344<`P\003\277\333S-\277:}\010\277\354\201\323\277\372\017+\300\336\213\347\277\204S\344\277\t\251\352\277\346\310m\277\313\272[\277\260\364\327\275K,\207\277|\325\337\276\007\200\005\277\374}m\277khl? \2620\276H\346\316\2778\271\347\277D\263\025\277N\227-\2776\267}\277\3626\022\300!\007\373>;c\257>\247g\253>l\352$?p\021\314\276:\2331\277\266\377`\276\357\302\251?\272l\033?@\005\205>\032E\333?\347\027\326?|y\226>\314\032\253\275\3320M\276L\000=\276t\2134\275\021W]\276\370k\203>\355c\326\276\004(g?\017b\364?\034\276\023@\347O\350?\322\325O\277PF\233=Sx\230>\356\023\315\277U]\203\277\354\264\237\276A0\215\277@\217z=\366\3703\276t\267p=C\017N?\347]\214>\035X\260?P\2606>\202*\035>\362\003\351\276\246\214\247\276\255\030\241\277\"\337Y\277<\312\006\277\034}\345\275J\374\234>Ji\260> \356\214?k\241\006=Nm\262>\250y\235\275\224\333{>\241\272G?\231\003+@\\\273\352?mb\007@T\275\355?\326\366\236?<\320<?\374\225\t\276\226.\\\275\033\312\031?\276xg?n\237\231>\314\241W??\355\"@20\264?,Q7?\210\376Q>lv\260>jf*\276DN\251\276/\016\002@\371l\001@\372`\004@?\246\t@\362\207\340?_\364\311?\207\243/?\276\365c>\010\321\277>\356\032\212>\030\205\337\276\234i\030\277\360 \253<\206R\215?\313\323\200?\nvO?\304U\244?\000[\225?*\327\215\277\356\353\313\276\324\377\227\277\r\362\030\300X\014\362\277G\217\217\2773\033\010@\217\033\276?\207i\201?m\332\233?\344Gr?\300!\360\274v\365\324\276\312\342\333\276D\204\276\277m\210\266\277h\225\322\276$\205`\277\343\n\225\276\340\210\277<\201y2\276\337@F?n\203\302?\274d\363?\2071\326?_\345\024@\013,\326?Q\332\006@\205\317\257?.\004.\277\3700)\2778\340{\275\2736\026>.\362O?H7\277>|k\002?De%>\230\000\311>\324\017\t\276\206\315\007\2764s\000?\001[\322?\032\312n?\306\272\212\276\323\274O\277\366q\345\277\316\376\351\277\306\346\026\300\320;\246\277\360\247\261\277\t\240\226\277hEC\277\272u\217\277!\256\252\277\245\024G\277\025\036g?\225\357\214?\377%\334?\024b\207?\177\355Y?\221Jl?\365\031\371?\327\r\323?3Z\016@\323\366\354?{R\247?\320\021{?\216!\300?\327\240\270?\312B\006?\275&i?rq\235?\207b\210?=\315\004\277\360}\005\277\350=\231\277\330\025\305\277\340\337\226\277\n\t\023?\230m\">\325\233s?uZ]?\010\010\t?\376\375Y\276\025\027)?x|\030>\244 \270?\350\035=?\372\305G?\017W@?\254\320\000?\367\022\321>\021\014\216\277\205\321\r\300\335\276\276\277|\222\214\277\"\206\356\277\361\210\177\277\277\370e\277\020\311\323=2\260\253\277\214\322\035\276\2532%\277\267Sj?&\374\\?\035\314\272?\300^\025\275;\354C? \210O=fR9?\377\"\360>&\000Y?\215\340\207?\034\270\241?\264\347\001@\324\233\206?\270\257\034?\314\340\226?\360\'\237>9\020M?\320x\243?B\247\227?\020p\007\275\370L\265\277\222\001\213?\317GL?j0\335=\216\240\212\277\205cG\277\031\266u\277\336\252\305\277\252\n\313\277\214!\032\300TP\371\277D\027e\277\203\301\263\277\026&\256\276\340=d>.\372\302\276\216-[\276p&\203?t\244\261>)\205L?\0305\332?\316\245\375?^\367\263?\2113g?e\237t?D\036\214?\332\261\341?+\316)>\301\367j\276nd\331\276\304\362\243\275U=\224?\013\\\223?\326z\333?\376\373x?a\021\000\277\363\305\346>\300F\273=_u\311>\356W\273>\256\210\270=\216]\\?\224\240\227>\306\002\323?>%\031@\027D7@*\231B@\037\327\"@d\214O@\252G\020@o\307[@\240\267\213\277\371VA\277\320N`\277(\321\232\275\372\361h\277\204~\360\276\325@\214\277\260\374\256\275\033M:?\254\350\326=\214U\033?\300Y\354;\215\277\005\277.5\r\277\022\362\312\277h%\312\277$\303\364\276\203\332J\277\272\225{\276\342\0006?8X2>\370i\247>\2642\013\276\301\343\022?\355\267\\\277\033\252\371\277\033\323\030\300\000\342\224\274\035Z\013?\262tO?\335\364\001@(\014\002@\365\313\027@\037\340\003@\345v-?\303\235\021@\0224\003?O\212\221>\315\371\026?V\026\031\277\256v\311\276v\220=\277\000\2642\277\316\345k\277\200hJ\274CD\230>\250\357m=\035\337\013?\372\275b\276\014T\017\277U\323\367\277$\263\002\300`\211\343\275\016\007\013\277\200l\311\276\201\352n?\254\313\271?\263\207\025@-\241\000@\035u\372?\210`\031@\370_*@&U\354?\210\240;@\337\347&@\311\370\365?\263f\236?So\240?(B\261?\353u\212?B\177\310?\271\370\263?@\313\202>\226\031\230\275\213\310\235?\244\224r?\275p\352>\211\0258?\270\270\327\276o\223\214\277\247\354r\277\200\370\'=\310\376\234\276x9\215\277\255\221\215\277|_\342\277\026\315l\277\356*b\277`\324\206\277I\316\275\276\364l\004\277b\372N\277\206\374\216\277\331\033\247\277 \243\021\277\326k\245\277D\327\215?\310\034\356?\006\304\303?\366\253\327?\3474\352?\222\216\220?\3109X?e\361\231>\367\265\204?\346\365\260?\307\366\252?\311\007\303?\322\350\024@\317\237\202?\226\310\304>\030\225\276?f\021\301?3\262\221?\222\234l?If\315?\375$\230?$f\357>\326}\226\276\375/\252?\214X\257\277H\240\311\276t\223\326=\020\352\206\276\000\355\317\273\027\332\227\275\343<\260\277\364c\307>]|/\277*\013\307>^!\377>\010\264\313?d\335\022@\024Y\222\276\370\300\326\274\025\357P?H\013R\2766\320\271>T\243G>\344De\275\223[}\275]\023g?\216h\021?\2245\"?\344U\244\276\032)\n\277\334\250h>L\342\316\276B\353\321\275\303x\247>\356\334\001\276\006S\211\275\300\317S:\356\220\227=5\303\307>B\373\361?NZ\313?d\347\326?\006\234\377?P\245\261?\324\226\027@\340\304\273?6!\322?\364\r\346?tW\230>\376I\235=i\013a=\221i\005\275w4\310\277\246]\305\2770,\214\277\213_\232\277:r\256\277\010(d\276+\261\033?\225\355\317?\202G=?\274\357\000\277ja\227\276\370\211\211>\027\332r?\324\315\312??\016[?\260p\257=\210cn=e9@?f\352\261?\000!7?\315\325\034?\341\365(?\006\226{?`,\251=7\337\247\276\264C\246=7\363\020?\312\363\217?$.~\276\3037\313\276\316\364t\277P\341\210\276|\236p?\320\360\302=H([=N\373G?\226\260\307?x\215??\240\260\317?\315\342\355?\233\274\224?\0221\311?(\007Z?8\016\364=\220nt>\232\302F>\225\210\237>p%\240\276+*\206>\344\036p\277\233g\336\276UP:\276\2506\254\276\241\257\217\277\270rq\277X\n\206\277\254\365\225\277\264X\233\277!<\203\277C\227\242\277\306>\241\277\312\367\223\277,\212t\276\250f\313>\225F@>\246F\363\275m\035\257>e\257\322>\255\3063>\252\210\001?t~K?\315d\303>>\306\372\277\217\353r\277\302K\002\300\334\027\232\2778>\200\277\030\022\337>\\\2572\276\222\3272?Pm\020?\300\330\222?J\002\246>\240P,?|\245\340>\007\027\266>h\377<=\345?\022?\n!|\276\204\257D\277v!\025\277N\255L\277l1\306\277\014In\277\243\222\213\277\331\005\312\277\343\352\014@\367\t\002@F\225\030?t\034\303\276*>\246\277p\332\325\277\302u\215\277J\232\367\277\244\370\200\277UYx\277\022\266*\277P;I? S\237\274\376\241\224>\212\357!\277\242+\273\277\325\302\333\277\022\344\245\277\333\023\030\300\237 .\300\266\233#\300\260\276\225\276pJS\277`\330\211\274\274\242F?\207\365\226?\225O\330?F\021\005@\262gh?\242\257\224?\323\235\246?\034\336\250>\324k\021@\010\\\023@\016\021\332?\224Y\215?b\315&?R~`?\240\217\241?\346\023\326?\037\306\307?\363n\240?h\315V>\033l\'?R\213\216?8 C>z\035>\277Cd!\277\013\031\270\276\014\236\227\277j\261\245\276\214\252\261?\300Gv=\260mX\277\340\262\005\277T\322+\276\334\242\256\275\200\007\005>\310\316\243>\034\364\245?\262\345\311>\240p\221?4\202\003?\362\002\027?\020|\301\276}\365\214>\340\257#\277\230\003\321=\021\213\317\277@;\275\277!t\325\277`p\264\277H\304\231?\351\243\224?D\344\356>\rK#?\245\r\005@\316\201\034?\274\371\365>\370\037\033\275\242\210j\277\344\357Q\276\\\0010?\000\036\310\272\331\221\370>\376d\023\277\300\t\360=\245\266\201?\3668\211?\004\213o?H?r\276\n\"\324\276Li\034>\021\355\225\277\000\216\221\2776\267\276\277\334\354\271\277x\332\334\277 \033\006\300\340z\307\277\266G\035\300\350\247\301\277\322\361X\277|\3675?C\265\001@Li\344?\276\205#@\371}\204?4\031\320>\322\2230\276;RU\2762#\017\277,i\210=\275)8>\243\323\276>fZ\"\277\200\364\270<8\220\215\277S\372\007\277\202\301F\277\034U<\274\315\336-?:\341\t>\013S\326>p\344H=\262\333\256>\225q\023?\342\366\331>\t]\221>\313\317K?8\221\236=\333\222y>\320\t>?C\030E? \013\255?\335\354\177?4D\276?\014\\\035@Y\007\"@\215:\005@@\337\343?\250\033%@b)\\?\000\3165\275\'\034\370\276\324\220\206\277\237\254F\277T\222P\277\213>F\277P\345\010\277\025\244\005\277\255}\345\277h\034m\277\237D\300\276X\313\245\276\024\241V\277& \326\277\004\225\r\300\364\346\324\276+\211\233\277\023\242A\2774\275b\277\201\327\335\277#\336\210\277\276\262\n\300J\362\234\277L\305P\277\347\003\t\300\362\251U\277=P\005?9\372\231?p\323f\277\000\353\273=\rmO\277y\372\031\277\262\367U>\356\367\017?q\276\326?\250\340\377\276n\363\036\277\350\017\200>\350\233\223\277\016\013\272>\220\334\270\274\217/B?2\226\236?-\244E?n\344\332?G\014C?\236{P?\346_\242?r\370\333?\224\2134\277>\\\306\277\310\344\244\276$o\276>\333q\234>\005\253\247>D\216\256?\005\232\327?\3602!>\257\272\002\277\200c\273=\203\267\235=*\2779\275\320\3758\277&\324\371\277\247X&\300P\311\212\277r\336\213\276\275\301E?\000\032\333;\310\352\352?\362\356\352?>\233U?\335R\215?"
      }
    }
  }
}
node {
  name: "normalize_element_2/component_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        tensor_content: "vf_?S\254\032?\376\2778\277\320\346\023\275H\353<\277\010n\362\276\325\241\216\276\377^\343>\322\322\260>,\342z?\352|7?\267\371\020@\270\341\323?\030\272\363>\360\022\210<\224\364\303>\223\310\000?\350f\226?4\367d>\202m\000\277\232\374>\277>M:\277L\252\360\276\205A\215\277d\271[?\030?\353=\371!\010\277\315(\271>\211-\000\2775\030\370\276 X\230<\022\026C=8\367%>\305F#\276\030n\005\277!\325\214?\036\306\225>\242\016\226\275\367\251\377\275\007\030\254=\232R\350>$u\010\277\336\000}\276\344\364+\277\325\316\034\300\327\317\030\300\346Z\000\300\037\225\321\277`\354\227\275\252\372\235\276w\001\353\277\235+\350\277\262Wm\277+c\353\277\261\277\350\277*p\275\277dxI\277\332o\333\276U\246\256\276p\005\234\276\373\237\021>b\301/\277$^\202\277\225\343\226\277\240K\252\2748\310V\277\200.\226<)Fh\277X\346]>\200\227z\274yU\371>\334\346\275=%GE\277 9\023=3\345\240\277s\030\365\277a\213g\277\344\277l\277\306\222\306\2772\270\203\277 @\370\275S\202\311>\212\251\036>\203\276\254?\024\224\273?\3602\002@\373\233\"@b\274\031@\277a\313?\226\377\235?\356\024\300?\010~\231\276D?\373\276\362\3524\277+I+\277\316\026\257\277\000\265Z\274\236y\252\277\345\037(\277t\272R\277\363G\203\277\320\225n>\342\222[\277\362\035\037\300@\243;\300\360\303B\300\020s<\300\023\022\030\300BEF\3007|I\3007u&\300\353f=\300\324\370g\300\270\341=\300\324\363\302\277\344\003\265\277\247\336\032\277\256 K\277\034\r\326\277\000\030\316\277Z\300\320?SM\002@\222\035A?\347\251G?\331\272;?\260a\032?\250\205\212?\326\363\220?\n#\344>(\312=\275c\r\001?F\036{?\3200w?\020\014\262?f\033\255>\274\242\246?\324\035\305?D\356\n@\024\210\001@\355\211:?\214\020\177?Vx\273?\332d\252?\350\347\336?m\326\257?=\3236?\314\363\350?\330\247\333?\234\031\004?\316{\001@P\251\274?\326\272A@b\312\016@V\314X?\300\271\021\274\365#j>\302&,@)\346\031@uc\303?\264r\300\276\365\327\014\277<Sm>\220\1773\275!\\\014?\304\271O?\270\250\223?\214\0000?UE\020?\234\0223\277\323\362\323\276\234\223n\2770\310\373\277,\312!\300\202Q\t\300\3524A\300z\253\337\277T\220\342\277\300B\266\276%\373;\277\332\000\234\277m\377b\277\332}{\277?]x\277.\247\344\277u4\037\300\2215Q\300{\312C\300/\2207\300\236\032\341\277\370\0242\300\264\263?\300D2\034\300e\300\272\276?\360\333>\3448\220=A\224\010?\202\232N?\331\207\373>Z\367S\276s\375\003?Lxh?\230\027\020@\332m\255?\301,\234?\230\006\232=\364\373\342?\000\230A\273_Y\207\276\232\221\232\276\325\365\230\276\017B&?\223\356\353?.\206\201?\310\252\034\276\234\202}\275\262\343\234<\350\333^\276\016\343\330\276\304,\301\277B\344\344\277\366\3619\300\000\3544\300\366\3300\300\330\004d\300\017\354\030\300\304\303\254\277\223\363]\277\372{\001\277\243h\204\277f\362\341\277\365\356l\277\212A\376\277\316\206\307\277\217L\201\277\256\014\206>\n\200;??\267;?$z\220>\252p\342>\241\177\246?\270Z\273?F\201Z?|\027\242?\212\2726?\236\034\235?F\235\223?\000\211/<\337\273\331\277\242\324\223\277r\214,\277\222\315P\277\341\022\207\276M\237\007\277\014\005\262\275>\377\177\277\351\324\307\277\375\321\323\277\256\003\325\2776\257\230\277\226\220\327\277O\331\370\277\3700\234\277\356\307\360\276y\250\213\276\203\220\226?\354e\355?\252i+@g\302\t@zS\332?L\023:@\233\222F@yDN@#\370&@\t\"\234?N\330M?\254\211X\276\017g\322\275xT\\\277@C/\277MQ\222\277\236\347\'\277~\000\217\276\327{\263\276\342-\335\277T\021\020\300\024|\002\277g\230\340\277\220\272\032\276\t\005/?`v\236=\360?l>e\302u\276\350\206d\275b \252?\210\006\036?\026\345\'?\354\212B>\316U\206>R\216x\276\3342\036\277P\365\376\277\312-\350\277\000\346\031\300\202\332\233\277\270\032\317\277\n6{\277h\342\207\276d\006\311=\025\206\241?&\005p?L-!>\206\322\236?]\363b?\216\304\254?\317\330\336?\217\272\r@\344t3@j\031\261?\230P\231?6\212\242>\244\020\010\277\304\325\313>\253w\017?F\314A\276`rH\274\305\350\270\274\242>\005?>@;?\210\352\370>\3547%\277\342B\325>Y\220\266?P\327\337=p\372\345>/\367\211?N\303\235>\0224\204?\222N\247?XT\273?-\036\304?p\377m@\257%c@t\235-@\007\340\000@\262\000\306?\343\341\312?\317\031\366?\222\027\276?{\346\373?\223=\362?\363\312\364?\376>\346?z\272\237?\010\215\207\275\372\251\242>\341&\006@\262\007\375?\235\204\366?\220\034\370\276\254\032\n>\256\023r?\235\032\313?\237\201\310?\300\354\326?\232\302-@u\005\002@\230A\000?\262\024\321\276\254\001\035?\340\255\243\275d\003\252=S\254\017\277\354>\024\277\244\216Z\276\r\250!>\000\327\226>\371@\360=\332\365]?\270\245\022?i\224.?\327d<?\020\312\225>\215-T>x\323\226\277^N8?ch\024?\310\203\000\276M\257\020\276a\225T>\340ze<\205\247\363>S\347&?`.\205\276\002\300\260\277\214+\032\276\000\261\210;\355\207\206\276\230\351\267\275\242\223#\275`\310U\276\347\3239>\375\255\253\276\220\275\001\277\210\364A\275gr\000\277\320J\034>\330)\227<\226\263@?WH\201\277\240\303\360\275\334\177\336>\204\230!?^2h>T[\346?\260\316\017?\200\260\t\275Dh\235>\256\273\226?\234\274\307>\372\334\345=\247\332G\277\327\373i\277\264\2038>\244i\214?\232\035c?\214\003\317?\344\005\244?\344\'\272\276\024\2142\277\367X\201\277\350*\270\277\340\304\226\277`~$\276/\331g>]W@?0\246\307=\224\270\001>n\035{>\245\367\036\277\214\256f>\360|\215\275\371\211\306\275z\032\234\277\321\'\201\277\264\360\326\277\230\3739\276m\247\242\277^\032\313\2771\207\020\277u\325\212\277\3632\210\277\361\304\345\277\227\033k\277\314\266\207\276\202s\004\2770\261\025?ap\005@\324\037\202?\266@\260\276 \252\307>\224\302\205?h\371\225?R\227\331?\010\246\236?\357\223\016@\302[\262?Td)?N\277\226\277\377]\007\300E\273\007\300\364\217\344\276\241\206\225?\312y\205\2774\201\363\276\343\023z\276\205\210\"\276G\262\236\277tb\330\2779@\321\277\024\236\007\300\3069\264\276^\375\241>>`1?\374$A?\030\026$>:\211\030?|\314\r?\252\2668?\324n\330>}\310|>>\331X?\376\355\257?I \211?\232)\023@\310\363\266?9\272\316?\000e\235?w\247??i\004\202?\032\"y?\306\240\024?\324\370\303?\250`\357>\222p\024?\302\343\354>\241\024N\277\230\302\212\277z\240\240\277\"\232\205\277\002\243N\277(\026\252>\255\227\223?`y0=\274\274\270\277E>\032\277\300zF>\325J\266?p\320\322\275b\372`\275\324\253)\276\204G\250\277\016\350\253\277\300So\275s\033Q?xGo\276X\200T>\337\257->\320\214\016\277!\373\277\277\316\032\007\300\341\253\304\277\306\3022\300\375j\220\277\335U\324\276Bl8?l`\001?\330P.?\344N\254\276\2001\333=\232\014\361>+\302L?\365\023W?\224\272\310?\027r\313?\021\216\'?4\263\277>\007\302\'\277\362s\317>\032\213\006\276e\351\266\276\026\031S?v\\\311?\224\200\203\277\230\375\214\277\363\250S\277.\366C\277\321\334|\277\266\026>\277Q\363\211\276L\353\226\276\203Y\225\277\240\352u\276P\304\371\276\245\276\027?\214\271\310=ES\000\277\252\335\234>E\316\023\277\360|\235\276\353\267\271>\261S\256\276\340\221S?v/\247?\302\367\227?\376B\231?\222\216\352?\261\215.>2\016\003>}\017\260>N\245=?\2209\222\276$\264\331\276\334Bm\277\350~J\277\340CB\2776\272K\277\027\332\325\276#\200\224\276\252\361\202\275,\3331>@\252N>(\371\204>\237\355\254?\364\352\322?*\306\241?4!\007@\2414\006@\320\343\377?\344\300\330?\"\272\275?\245\334\007@z\"\253?V\315\024@Kw\017@\002#\371?\225\3701?\360^6?\314Q\024?\3330\206\276\213\024\355\276\301\233\263? L`\276\311\242\016\277\254\231\277\277\305\033\002\300\344\364\010\300!\337&\300\277\254%\300$\222\263\277\224\346\022\300\n5\204\277b\247\243\277\350\361\343\275\210\207\007\277\210H\250\276\250~6\277\\\200g>Xa\345\276\240\207s\274R\"\212?\2772c@\360l\216@\315\013\205@\213\354E@\230\3776@h=l?Z\240\240?\034\235\036@\010\301\000@\224\240\277?\226oA?,\250\264?\022;\364>\200\257#<\002\256\243\2778P\320\276\177<\213\276\357:\210?\002\262\305>\351\203\\?\317\310\343>\305C\337?ct\024?\304d\236\2756I\307?\346w\313?\330\310c\277\266\360\277>0\221Z?\031S\034?5\263\017?FD\252\276\260\205\327\276\262mw>\314v\212?\214\372\017@{\234\263?\304c\245?\26795?\236\316\337?\0366\t@~\213\370?\261z_>\274\251\"?\222V\t?\306\242f>i\204\217\277\010yG\276\206\305\211?<c\334?\365\316)@x\365\013@FT\201?\260\035\301?\330\336\215?\352Z\014@Z\'V?PI5\276|\316\206>+\177H\276\215\247N\276\370\301\345\275\313\334\211>\370^h\276\030f}\275T\213\304>(Q\227\276\311,\303\277\356\315\371\277\335 \035\300\340\306\341\277 \300\353\275e\345\014?\030\020y\277\200\320{<<\247\335\276\034\336\304\277\324\035\317\277\230oZ\276r\247\241?x\273\254\276\334\366%?Gb\214?\256=\227?$\306\254?u\373\246?Q\205x?\177\247\203?\266&\312?F{\300?\026l\200\277\243\241\177\277\\\277\021>\251\342\236?ur\255?2#\310?\020\322\370?V\345\347?\237\375\235?\376%\371?\273\261\023@ln\306?,\203\034@\333c)@S\201\026@\352(\272?\200\311\262?\177\222\267?\333\262\224?k\202\244?!`x?\227n(?\020\251\351<,\235\322\275\225J\202?\006\332\216?\364\030\205?w)\257>\230\230u\276v\017\243\276\242\304J?\nha?\203\241\222?\2502\225>%\261\253?\202\3334@\013\2441@\204\022M@\271\312\'@\020WS@\037\313?@_\3526@\311\252*@\301\272\031@&\346\354?\250\263\350?@K\271?l9<?NQ\347?`L\347?x\265\230\276\300\257v\276\\\353\335\276B!\262\277\266Gq\277\032]4\2771k\230\277`\027\333\274ft_\277N\367\200\277\026W\233\276F[%?B\2178>\322R\007?\"a\243>\373U\033?\3108\276\276`\356\235\274\026\031\002\277fU$>\031\021u\277bx/\277\355f\222>4$R\2778\035\r\277\364mx\277>:\205\277i\024y\277\260\262*\275\002\363\266?\264z @\246\007\034@\367\337\353?\033F\025@\202/\001@\223S\351?\254m\271?Z\010^?\340s!\275D]\247\277\242g\276\277\024{\212\277<1\314\277[\276\205\277V\206X\277\234y;\277\010\211\006\300V\366F\300\360\020\005\300\034\200\017\300 \224\017\300Uz\350\277p\221\344\275\244\014\020\277+Gk\276\235\023/?\356\266\312?[\333\251?~\225\254?\314\242\035@\276U\240?\207\320\365?\034\223o?\254\251_?\273\317L\277a\364\"\277F\335e\277\032\357\236\277\\\225\232\277|\357\215\277\244`C>\360Xp?\326\001\243?x\357}?\224.\343?\214/\323?\020h\317>N\216\030?\310\034\307?\320\024\344?\n\252\253?\272\350^?\216\020\002?.\237[?\013p\255?\000\235\315=\254\177#\276\212i\022\300\024\'\026\300\3441\254\277\303L\252\277\036\256\033\2773;\244>\250\253\007\276j\274\201=~\001>?\257\322\027?\300\010p=\264\223\306>c:\222>i\024\'?\300*W\274\204\311\t\277\340\370\014<T\023\004@\206TJ?\002\036\306>\364\370`?f\264,?*\002?>\304\212\260\276 #L?\331\265\n?&\325\036?,\2406?\004\267\262?(\234\333?7?\335?\355\360\323>.\310\206?\220\024\004?\3026\332?g\324T?\265\016\263?\316\004\t@\240\315\000@\036K\244?al\376?\200w\315?(\205\351?p|\255=1\"&\277\201\274/\277!\246\203\277\200\354\303\276\346k\020\277\275_\235\276\205U\314\276\203\345,\277B\271Y\277J\243X\277\3704\231\2778o\347?a=+?f\233\216>@\026<\273\362nr?Y\"\333>\251GP?\020\275z?\r\263k?\332\274%\277\355\262\216\277,\267#>\240\222\221>\363?\031?\025\341\214?b\236\031?l\322W?Z\374\255?\276\350\017?\312o\233\276\352I\310\275\212\347\271=v\262\245>\000\251j<\244\305\310>2\251\007\276V\363;\2766\365\261\277P\003\221\277\215\234\317\277\255\255\315\277\014\327\252\277\007\210_\277\270Vd\277\013o/\277E?\205\277u\334\024\277\326L\373>\240sD<o\216\">\300\274\216\275\263\376\r>\277\327\256=\230E\270>\277\ts?\244\326g?\276\307\257?\346j=@\000#\030?B!\002?\007\341\001@0\2068>y3F\277\260I\034?\202\245\335>?\305\326>`&\n\274\265\"&?\001DB?\303<\022?\242c\013>\022K\177?\306\206\333?\220\367\331?\350\016\357?\267\240\236?&\272x?Xk\311\276}0E\276\352\346#?Dmu>N\373\222?t\246\220\276X\304\213=\013i\351>d\'~?\005\257\226?P\006\036=,\245\227?\240\r\\\275>u\221\277\303\006\027?\216\271\246?Ne+?\202\217w?\254\330\334\276\022\247\276\276Q\2256\276d\364\025=\301\352\304?v\001\251?\356\267\234?0?\035?+\003\203?\322V\201?\316\301o?\000\034\246\273\023s%\277\312\236?\276l8\014= ^\320>\332\214k\276\320\027\264>\257V\375\276\322V\035\277\376\371}\277\206%x\277\303\257\n\277b\3658\277\240I\027>\250\030\231>\324q\014?Tz\032>\\z\267?4(-?~\216J?\334\346\201?\n\356g?\023\266\032?<\226\026?d\370\367>\036#\036\277\376\034Y\276\'@\220?\240\361\315?\264\330\301?\370/%@F\274\242?\003\005\273?\032\224\323?4\360\210?.\337p?s\201]?\325c:?\236\201\307?H\032\206?4\353\231?81>?\212\255\302>\304\233\202\275\265\261Y?\204\331\211?\372\330\254>\332\200J\277\301\354&\276\325\026t\277T\226\227\276\200\242\233=2]\221>_eb\277A\310\207\277s*{\277\253\362\033\3003\305\t\300U&Z\277\374V\205>%\017\361>\230\237\351=d;F?[\006U?(\310\224?\236\242\367?4\200\304?\031\303\267?\323D\203?\301}\201?\302\222`?\364W^\276\307\350\204\277\302\366I\277~ \222\277\300\217\033\276\200V\035;a}K\277\363\0336\277\031H!\277\r{\212\277;\242\214\277\225\227}\277\361\240^\277/\262t\277\366/\234\277j\270p\277\3735\365\276z\210e>\360]\200?\033\322\207?UT\004?i\247i\277\022\313\016\277\244\316\352\275f<u\277$\364\266?;,\004?\301\210\372?\0258\004@\300\326\331?t \363?\357\007T?L\254P>\2007\313<\377\307m>\226}\275\276\334\000`\276\325e\017\300b\257G\300\307\316\272\277\t|4\277\034\017\r\277\240m\250\277\350$\203\277\272\215\363\277\255\0257\277\362\220\013\277t\r\216\277\261\035\365\276k\230\257\276\342\022)>\366\216\364\277\242(q\277\242\200|\277 \217b>r1\200\276\270\344X=\235\325\366\276_7\304>\031\331\214?;D\337?\310\302K?\210d%?\274O\256>\242\006%?\256\004\245? \201\253>\262\323\311?\254=i?\314\240\033>\302M\321\276\010\200\352>D\2231?(\202\310?\030\371$@<\000\373>\201\004\230?\014QG?\020vD>\023\tD?\360\006,\276u\204??\233\035Y?,\343\235?\347L\013@\036\347\027@\022\347\376?\351\262u?\264\301.?\234PE?\016\210\324?\314\330\247>\302D\014\276\323\204\242\275\276\224\003?g\2737?\0248\277?x\214D\277\372\367\267\277~\251\341\277\320\353d\276\230\324\231<\245_\026?\252\303\t?\342\010\212\277\343\026!?:\234]?X\231\246?\004 \266?\250\335l?\326\236%?6\367\220?\016\317\206?\017\032`?\344>\353\276\251\202\307\276I\005\326>\374t\370>I\246\370>sl7\277\254\034\326\277\245\327\231>\233\003.?p\345g?uF\324>\253\245\331>\250\212\251?u\272\207?\355\3374?\230\220\204?\270\225\210>\013\332\220?\254mF>xf\213\276<}h\2752(\266\277zK\004\300\2324\022\300R>I\300\245%\373\277\002\3760\300?)\267\277^\303\031\300\240\262c\277*\361\002\277\340\024\265\276\024\362J\276uA\311\276R;\014\276r\'\227=\3325\245\276\364\333.\277\363\025\217\276V?\236\277\232\346\302>X\231\"?\336\023\213?%\337\255?h\242\263?\3640\212?\362\326\033@N\322H@\212\222\032@\001$\265?6\356\205?n=(?6\r;?\3733\216?n\307\227?\360EX?BU\013?\000S#\275H\224\004?5@\177>T\345\260>\311\200\201>\000\235\226=\377pt\277\213\037\237\277?\203\014\300G\201\023\300\312\027\\\300\314\234\235\300\377\213\232\300RVO\300\264\005\370\277\2209\202\277\254\270\366\276u\271\357\276\027\037\212\277\271\022\240\277,\223;\277N+\266\277g\202#\277Q\177\377\276<8~\277\211\203\335\276j\026\337\277\332\025\"\277\256\022\034\276\ng\\\275\225\335\272\277\220\007\335\277\021\"\320\277\370\232N\2770%B=\2426\225>CK\277?\320|l\276\032\010\'\277X\035\324\2778\213X\277\310L\357\277\364Y\255\277xgP\276\342\025\345\276\342\217&?\rK!@\340o @\322T\n@zB\256?h6\324?f\332\035@\330\220/@\366\177T@\204\311^@\007,2@m\344\014@\370q\254?H\302\226?\220\333\355?\264\231\000@\036f\006@<\360\355?LL\202?6\234\211>U\362\216?\230B\334?\336\033\021?Y\370\354>\370;\004\277\224\236a>\322T&?\264\331Z>1#%>E\352\322\2771\217.\300\002*U\277\266W\023\277H\274\274\2772\322\340\277>or\277\225\315\357\277fSv\277H\376\243\277K\316\255\277 \224[=\334UG>\271\347\205?\024\3216\276y\0240>z<\216>\312/\177?\346\013r?\026m\027?n\231\204\276w\376\213\277\275y\350\277\317u\253\277\177=\036\277\nV\204\277\336\377\016\300\240_\315\277\334\376\234\277\2144\277\277\202\034<\277\336\341\242\277u\220\247\277\231\365$\300I{\n\3009U\312\277\010\363`\277\234\364)\277 \n\032\277&k\317\277]\217\004\300\355\010x\277\000\366T\277\334;\242\276N\302\322\276\260\210\374\276\333f\252\277\240P\201\277\274,>>\333\377\305\276\300\207\241;\021\321\233?\367\203A?\"X\317\276\251*\307\276\325\263m\277;l\200\277\220B\217\277\3202\346\275\007\013\027\277\300\237\332;\276\323|\276DLw?C\214\036@p\310\256?\350\267\347>\202h\252>\2569%>\024\3141>Tn\"=\2557:\277\n$\223\276\2749\256\276\300\312&\277\276\\\337\276\313y\260\276\253\214\316\276\3425\004\300\201\377\311\277`\250<=\272-\227\276\300m\203\276\227g\305\276Z0$\277\223\300k\277>\022\372\277\334\034!\300\324\243\245\277\034\366\235\277D\223\"\277~\022\356\277\305\206\252\277&\216\371\275\210p\022?\373m.?dS\220?\334\220a\276}j\314\276\034(\000\277u\213\240\277\000\356;\274\244\326Z\277\341\376\232\277\354h\217\277\204\010\223\277z\366\234\277\362z\220\277\202z\260\277\233\036\252\2770\246n\277\264V\241\277\244\206\254\277\362L\323\277\361\267(\300\006\335\204\277\270DR\277f\206\322\276`\364\266\277\260\310\206>\026&e\277\357|:\277d\254W>\357/\242>\227\016\275?\324\275n>\366\000\254?\2003n\2762B\332\275;\347\337\276YRo\276\020\007+\274\226w\241=le\237\277\220`f\275\365\276d\277\221|\251\276\371J\024\277\320XM\276\020\307R?\0363\207\276h\326\325?f\215\215?\314\263\237>ir\252?\225&^?\321\347\273?.3\344?%\307%@\341\242\030@$\303\367?\307%\004@K\303\226?\367`L?`@(=\350\353\375\275\210s\303\275\253\213C?p8\261\276\361\021Z\277:\243\034\277\232\231*\277\232&\254\277N`\316\277\337+\025\277%\200)?\376\001\337\276\224w9?\202\245\032@\223e\202?\376\204\267?\004\027(@\261\367\t@(\320\001@\224\205\027@J\216\t@\325}\356?\271\322\302?\220f\247=\215\243\303>\0101\002?\356\333\025>\005}m?\220\333\334?\3420#?\250\262\233\275\003\207\317?\305X\005?\007q\322?\n\315+?\220Pm\276\336\221(\277\000\016B;\265\024\002@\300\342\037@*\247E@\324\343\323?\343Bx?\272\035\025?\320\331M\277\374\372\246\277\232k\236\277\274*\236\276gd\220?\362\352\241?\016\034\265?,\002\276\276v\276\004\2770\304\344>\300<\345\274m\037[\277gX\007\277\344\034(>d\025\366\276E\240\363\276\270\277\245\276\036\253\243>\362QT?.\236]?\240z\276?}\311\237?\363C\313?iM\341?TB\231?\000F\222\273\202\214\237>\247\226\031\276\220cE\277D\321D\277\200\351\234;\223\204\'?b\335\276?\200\211\251<|a1\277\017\210\002\277n\370\374\276Bc\037?\201\2676\277\024\245\370\2768E\356\276\3679\255\277w7\203\277v\200\242\277\360B8\275\221\013a?M 0\277\330\250\256>\317P\337\276q\333\301\276Df\237=\277\266Z\277\032\"\373\276\325\223o\276\32553\277|/X\277r\205\242\2772;;\300\311\361\005\300\024R3\277vF\213\277\202\317\215>s\202\377?\360\324\r@$i\'?&[A?\\c\341>\353\3229?`\241\264<\003(\177<\006\360y?\230\n\006@aW\372?$\245\377?f\331\216?\014\335*>*\266\243>N\301!?z\232C>\234\257#?\222\247P>g\022p\276\016OK\277\000\310\246\272\200Q=?&2\230>\250\217\240\277%\024\305\277\370\217\371\277\206\002\315\277\310\232\035\2771\'3?\342\353\254?\001k\020?\244\231|? \'@>\227\003{?$\222\251?D\037\261>n\233\022\276\256\275%\277\023A\270\277\264\213\272\277h\257\020\300VdI\300\001o\021\300\014\341\377\277<\026\025\300\336!\331\277\to?\277`P\003\277\333S-\277:}\010\277\354\201\323\277\372\017+\300\336\213\347\277\204S\344\277\t\251\352\277\346\310m\277\313\272[\277\260\364\327\275K,\207\277|\325\337\276\007\200\005\277\374}m\277khl? \2620\276H\346\316\2778\271\347\277D\263\025\277N\227-\2776\267}\277\3626\022\300{jz\277;c\257>\247g\253>l\352$?p\021\314\276:\2331\277\266\377`\276\357\302\251?\272l\033?@\005\205>\032E\333?\347\027\326?|y\226>\314\032\253\275\3320M\276L\000=\276t\2134\275\021W]\276\370k\203>\355c\326\276\004(g?\017b\364?\034\276\023@\347O\350?\204jt?PF\233=Sx\230>\356\023\315\277U]\203\277\354\264\237\276A0\215\277@\217z=\366\3703\276t\267p=C\017N?\347]\214>\035X\260?P\2606>\202*\035>\362\003\351\276\246\214\247\276\255\030\241\277\"\337Y\277<\312\006\277\034}\345\275J\374\234>Ji\260> \356\214?\002\177\246?Nm\262>\250y\235\275\224\333{>\241\272G?\231\003+@\\\273\352?mb\007@T\275\355?\326\366\236?<\320<?\374\225\t\276\226.\\\275\033\312\031?\276xg?n\237\231>\314\241W??\355\"@20\264?,Q7?\210\376Q>lv\260>jf*\276DN\251\276>j\302\277\371l\001@\372`\004@?\246\t@\362\207\340?_\364\311?\207\243/?\276\365c>\010\321\277>\356\032\212>\030\205\337\276\234i\030\277\360 \253<\206R\215?\313\323\200?\nvO?\304U\244?\000[\225?*\327\215\277\356\353\313\276\324\377\227\277\r\362\030\300X\014\362\277G\217\217\277\254\260\'\277\217\033\276?\207i\201?m\332\233?\344Gr?\300!\360\274v\365\324\276\312\342\333\276D\204\276\277m\210\266\277h\225\322\276$\205`\277\343\n\225\276\340\210\277<\201y2\276\337@F?n\203\302?\274d\363?\2071\326?_\345\024@\013,\326?Q\332\006@\205\317\257?.\004.\277\214GB\2768\340{\275\2736\026>.\362O?H7\277>|k\002?De%>\230\000\311>\324\017\t\276\206\315\007\2764s\000?\001[\322?\032\312n?\306\272\212\276\323\274O\277\366q\345\277\316\376\351\277\306\346\026\300\320;\246\277\360\247\261\277\t\240\226\277hEC\277\272u\217\277!\256\252\277l\313\372\276\025\036g?\225\357\214?\377%\334?\024b\207?\177\355Y?\221Jl?\365\031\371?\327\r\323?3Z\016@\323\366\354?{R\247?\320\021{?\216!\300?\327\240\270?\312B\006?\275&i?rq\235?\207b\210?=\315\004\277\360}\005\277\350=\231\277\330\025\305\277\340\337\226\277L1\253\277\230m\">\325\233s?uZ]?\010\010\t?\376\375Y\276\025\027)?x|\030>\244 \270?\350\035=?\372\305G?\017W@?\254\320\000?\367\022\321>\021\014\216\277\205\321\r\300\335\276\276\277|\222\214\277\"\206\356\277\361\210\177\277\277\370e\277\020\311\323=2\260\253\277\214\322\035\276\240\350n;\267Sj?&\374\\?\035\314\272?\300^\025\275;\354C? \210O=fR9?\377\"\360>&\000Y?\215\340\207?\034\270\241?\264\347\001@\324\233\206?\270\257\034?\314\340\226?\360\'\237>9\020M?\320x\243?B\247\227?\020p\007\275\370L\265\277\222\001\213?\317GL?2\023\223\276\216\240\212\277\205cG\277\031\266u\277\336\252\305\277\252\n\313\277\214!\032\300TP\371\277D\027e\277\203\301\263\277\026&\256\276\340=d>.\372\302\276\216-[\276p&\203?t\244\261>)\205L?\0305\332?\316\245\375?^\367\263?\2113g?e\237t?D\036\214?\332\261\341?\223\325\251?\301\367j\276nd\331\276\304\362\243\275U=\224?\013\\\223?\326z\333?\376\373x?a\021\000\277\363\305\346>\300F\273=_u\311>\356W\273>\256\210\270=\216]\\?\224\240\227>\306\002\323?>%\031@\027D7@*\231B@\037\327\"@d\214O@\252G\020@o\307[@\307u8@\371VA\277\320N`\277(\321\232\275\372\361h\277\204~\360\276\325@\214\277\260\374\256\275\033M:?\254\350\326=\214U\033?\300Y\354;\215\277\005\277.5\r\277\022\362\312\277h%\312\277$\303\364\276\203\332J\277\272\225{\276\342\0006?8X2>\370i\247>\2642\013\276\301\343\022?K>\033?\033\252\371\277\033\323\030\300\000\342\224\274\035Z\013?\262tO?\335\364\001@(\014\002@\365\313\027@\037\340\003@\345v-?\303\235\021@\0224\003?O\212\221>\315\371\026?V\026\031\277\256v\311\276v\220=\277\000\2642\277\316\345k\277\200hJ\274CD\230>\250\357m=\035\337\013?\246\324\351?\014T\017\277U\323\367\277$\263\002\300`\211\343\275\016\007\013\277\200l\311\276\201\352n?\254\313\271?\263\207\025@-\241\000@\035u\372?\210`\031@\370_*@&U\354?\210\240;@\337\347&@\311\370\365?\263f\236?So\240?(B\261?\353u\212?B\177\310?\271\370\263?\272\301@?\226\031\230\275\213\310\235?\244\224r?\275p\352>\211\0258?\270\270\327\276o\223\214\277\247\354r\277\200\370\'=\310\376\234\276x9\215\277\255\221\215\277|_\342\277\026\315l\277\356*b\277`\324\206\277I\316\275\276\364l\004\277b\372N\277\206\374\216\277\331\033\247\277 \243\021\277\326k\245\277t\353\224\277\310\034\356?\006\304\303?\366\253\327?\3474\352?\222\216\220?\3109X?e\361\231>\367\265\204?\346\365\260?\307\366\252?\311\007\303?\322\350\024@\317\237\202?\226\310\304>\030\225\276?f\021\301?3\262\221?\222\234l?If\315?\375$\230?$f\357>\326}\226\276\375/\252?\214\217I?H\240\311\276t\223\326=\020\352\206\276\000\355\317\273\027\332\227\275\343<\260\277\364c\307>]|/\277*\013\307>^!\377>\010\264\313?d\335\022@\024Y\222\276\370\300\326\274\025\357P?H\013R\2766\320\271>T\243G>\344De\275\223[}\275]\023g?\216h\021?\2245\"?\227\014\035\277\032)\n\277\334\250h>L\342\316\276B\353\321\275\303x\247>\356\334\001\276\006S\211\275\300\317S:\356\220\227=5\303\307>B\373\361?NZ\313?d\347\326?\006\234\377?P\245\261?\324\226\027@\340\304\273?6!\322?\364\r\346?tW\230>\376I\235=i\013a=\221i\005\275\020\325\245\277\246]\305\2770,\214\277\213_\232\277:r\256\277\010(d\276+\261\033?\225\355\317?\202G=?\274\357\000\277ja\227\276\370\211\211>\027\332r?\324\315\312??\016[?\260p\257=\210cn=e9@?f\352\261?\000!7?\315\325\034?\341\365(?\006\226{?`,\251=\333\322\324=\264C\246=7\363\020?\312\363\217?$.~\276\3037\313\276\316\364t\277P\341\210\276|\236p?\320\360\302=H([=N\373G?\226\260\307?x\215??\240\260\317?\315\342\355?\233\274\224?\0221\311?(\007Z?8\016\364=\220nt>\232\302F>\225\210\237>p%\240\276@r\252<\344\036p\277\233g\336\276UP:\276\2506\254\276\241\257\217\277\270rq\277X\n\206\277\254\365\225\277\264X\233\277!<\203\277C\227\242\277\306>\241\277\312\367\223\277,\212t\276\250f\313>\225F@>\246F\363\275m\035\257>e\257\322>\255\3063>\252\210\001?t~K?\315d\303>p\336\r\275\217\353r\277\302K\002\300\334\027\232\2778>\200\277\030\022\337>\\\2572\276\222\3272?Pm\020?\300\330\222?J\002\246>\240P,?|\245\340>\007\027\266>h\377<=\345?\022?\n!|\276\204\257D\277v!\025\277N\255L\277l1\306\277\014In\277\243\222\213\277\331\005\312\277\016\375\027\277\367\t\002@F\225\030?t\034\303\276*>\246\277p\332\325\277\302u\215\277J\232\367\277\244\370\200\277UYx\277\022\266*\277P;I? S\237\274\376\241\224>\212\357!\277\242+\273\277\325\302\333\277\022\344\245\277\333\023\030\300\237 .\300\266\233#\300\260\276\225\276pJS\277`\330\211\274]\020\372\277\207\365\226?\225O\330?F\021\005@\262gh?\242\257\224?\323\235\246?\034\336\250>\324k\021@\010\\\023@\016\021\332?\224Y\215?b\315&?R~`?\240\217\241?\346\023\326?\037\306\307?\363n\240?h\315V>\033l\'?R\213\216?8 C>z\035>\277Cd!\277!1\257\277\014\236\227\277j\261\245\276\214\252\261?\300Gv=\260mX\277\340\262\005\277T\322+\276\334\242\256\275\200\007\005>\310\316\243>\034\364\245?\262\345\311>\240p\221?4\202\003?\362\002\027?\020|\301\276}\365\214>\340\257#\277\230\003\321=\021\213\317\277@;\275\277!t\325\277`p\264\277b\002+\300\351\243\224?D\344\356>\rK#?\245\r\005@\316\201\034?\274\371\365>\370\037\033\275\242\210j\277\344\357Q\276\\\0010?\000\036\310\272\331\221\370>\376d\023\277\300\t\360=\245\266\201?\3668\211?\004\213o?H?r\276\n\"\324\276Li\034>\021\355\225\277\000\216\221\2776\267\276\277\004\341\007\300x\332\334\277 \033\006\300\340z\307\277\266G\035\300\350\247\301\277\322\361X\277|\3675?C\265\001@Li\344?\276\205#@\371}\204?4\031\320>\322\2230\276;RU\2762#\017\277,i\210=\275)8>\243\323\276>fZ\"\277\200\364\270<8\220\215\277S\372\007\277\202\301F\277\370\033D\277\315\336-?:\341\t>\013S\326>p\344H=\262\333\256>\225q\023?\342\366\331>\t]\221>\313\317K?8\221\236=\333\222y>\320\t>?C\030E? \013\255?\335\354\177?4D\276?\014\\\035@Y\007\"@\215:\005@@\337\343?\250\033%@b)\\?\000\3165\275\251\356\324>\324\220\206\277\237\254F\277T\222P\277\213>F\277P\345\010\277\025\244\005\277\255}\345\277h\034m\277\237D\300\276X\313\245\276\024\241V\277& \326\277\004\225\r\300\364\346\324\276+\211\233\277\023\242A\2774\275b\277\201\327\335\277#\336\210\277\276\262\n\300J\362\234\277L\305P\277\347\003\t\300=s\010\300=P\005?9\372\231?p\323f\277\000\353\273=\rmO\277y\372\031\277\262\367U>\356\367\017?q\276\326?\250\340\377\276n\363\036\277\350\017\200>\350\233\223\277\016\013\272>\220\334\270\274\217/B?2\226\236?-\244E?n\344\332?G\014C?\236{P?\346_\242?r\370\333?\327\306\036?>\\\306\277\310\344\244\276$o\276>\333q\234>\005\253\247>D\216\256?\005\232\327?\3602!>\257\272\002\277\200c\273=\203\267\235=*\2779\275\320\3758\277&\324\371\277\247X&\300P\311\212\277r\336\213\276\275\301E?\000\032\333;\310\352\352?\362\356\352?>\233U?\335R\215?\241\031\336?"
      }
    }
  }
}
node {
  name: "normalize_element_2/component_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 100
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "TensorSliceDataset_2"
  op: "TensorSliceDataset"
  input: "normalize_element_2/component_0"
  input: "normalize_element_2/component_1"
  input: "normalize_element_2/component_2"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_size_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 100
      }
    }
  }
}
node {
  name: "drop_remainder_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "BatchDatasetV2_2"
  op: "BatchDatasetV2"
  input: "TensorSliceDataset_2"
  input: "batch_size_2"
  input: "drop_remainder_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
}
node {
  name: "OneShotIterator"
  op: "OneShotIterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dataset_factory"
    value {
      func {
        name: "_make_dataset_GkR6eGQT6sA"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 4
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "OneShotIterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "OneShotIterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 4
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 4
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "transpose/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transpose"
  op: "Transpose"
  input: "IteratorGetNext"
  input: "transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "transpose_1/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transpose_1"
  op: "Transpose"
  input: "IteratorGetNext:1"
  input: "transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Cast"
  op: "Cast"
  input: "IteratorGetNext:2"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "Shape"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Tile/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\n\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Tile"
  op: "Tile"
  input: "transpose"
  input: "Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Tile_1/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\n\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Tile_1"
  op: "Tile"
  input: "transpose_1"
  input: "Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Tile_2/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "Tile_2"
  op: "Tile"
  input: "Cast"
  input: "Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Max"
  op: "Max"
  input: "Tile_2"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\030\000\000\000(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_1"
  op: "StridedSlice"
  input: "Shape_1"
  input: "strided_slice_1/stack"
  input: "strided_slice_1/stack_1"
  input: "strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "TensorArray"
  op: "TensorArrayV3"
  input: "strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: false
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "TensorArrayUnstack/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\030\000\000\000(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "TensorArrayUnstack/Shape"
  input: "TensorArrayUnstack/strided_slice/stack"
  input: "TensorArrayUnstack/strided_slice/stack_1"
  input: "TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack/range"
  op: "Range"
  input: "TensorArrayUnstack/range/start"
  input: "TensorArrayUnstack/strided_slice"
  input: "TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "TensorArray"
  input: "TensorArrayUnstack/range"
  input: "Tile"
  input: "TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Tile"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Shape_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\030\000\000\000(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_2"
  op: "StridedSlice"
  input: "Shape_2"
  input: "strided_slice_2/stack"
  input: "strided_slice_2/stack_1"
  input: "strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "TensorArray_1"
  op: "TensorArrayV3"
  input: "strided_slice_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: false
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "TensorArrayUnstack_1/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\030\000\000\000(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_1/strided_slice"
  op: "StridedSlice"
  input: "TensorArrayUnstack_1/Shape"
  input: "TensorArrayUnstack_1/strided_slice/stack"
  input: "TensorArrayUnstack_1/strided_slice/stack_1"
  input: "TensorArrayUnstack_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "TensorArrayUnstack_1/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_1/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_1/range"
  op: "Range"
  input: "TensorArrayUnstack_1/range/start"
  input: "TensorArrayUnstack_1/strided_slice"
  input: "TensorArrayUnstack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "TensorArray_1"
  input: "TensorArrayUnstack_1/range"
  input: "Tile_1"
  input: "TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Tile_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Shape_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\030\000\000\000(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_3/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_3"
  op: "StridedSlice"
  input: "Shape_3"
  input: "strided_slice_3/stack"
  input: "strided_slice_3/stack_1"
  input: "strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_4/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_4"
  op: "StridedSlice"
  input: "Shape_3"
  input: "strided_slice_4/stack"
  input: "strided_slice_4/stack_1"
  input: "strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "Reshape"
  op: "Reshape"
  input: "Tile_1"
  input: "Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3038218021392822
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3038218021392822
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "mlp/data_encoder_0/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "mlp/data_encoder_0/kernel/Initializer/random_uniform/max"
  input: "mlp/data_encoder_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "mlp/data_encoder_0/kernel/Initializer/random_uniform/RandomUniform"
  input: "mlp/data_encoder_0/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Initializer/random_uniform"
  op: "Add"
  input: "mlp/data_encoder_0/kernel/Initializer/random_uniform/mul"
  input: "mlp/data_encoder_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "mlp/data_encoder_0/kernel"
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Assign"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_0/kernel"
  input: "mlp/data_encoder_0/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "mlp/data_encoder_0/bias"
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias/Assign"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_0/bias"
  input: "mlp/data_encoder_0/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_0/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_0/MatMul"
  op: "MatMul"
  input: "Reshape"
  input: "mlp/data_encoder_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "mlp/data_encoder_0/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_0/BiasAdd"
  op: "BiasAdd"
  input: "mlp/data_encoder_0/MatMul"
  input: "mlp/data_encoder_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "mlp/data_encoder_0/Relu"
  op: "Relu"
  input: "mlp/data_encoder_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21650634706020355
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21650634706020355
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "mlp/data_encoder_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "mlp/data_encoder_1/kernel/Initializer/random_uniform/max"
  input: "mlp/data_encoder_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "mlp/data_encoder_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "mlp/data_encoder_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "mlp/data_encoder_1/kernel/Initializer/random_uniform/mul"
  input: "mlp/data_encoder_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "mlp/data_encoder_1/kernel"
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_1/kernel"
  input: "mlp/data_encoder_1/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "mlp/data_encoder_1/bias"
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias/Assign"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_1/bias"
  input: "mlp/data_encoder_1/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_1/MatMul"
  op: "MatMul"
  input: "mlp/data_encoder_0/Relu"
  input: "mlp/data_encoder_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "mlp/data_encoder_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_1/BiasAdd"
  op: "BiasAdd"
  input: "mlp/data_encoder_1/MatMul"
  input: "mlp/data_encoder_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "mlp/data_encoder_1/Relu"
  op: "Relu"
  input: "mlp/data_encoder_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Reshape_1/shape/2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "Reshape_1/shape"
  op: "Pack"
  input: "strided_slice_3"
  input: "strided_slice_4"
  input: "Reshape_1/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_1"
  op: "Reshape"
  input: "mlp/data_encoder_1/Relu"
  input: "Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Shape_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\030\000\000\000(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_5/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_5"
  op: "StridedSlice"
  input: "Shape_4"
  input: "strided_slice_5/stack"
  input: "strided_slice_5/stack_1"
  input: "strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "TensorArray_2"
  op: "TensorArrayV3"
  input: "strided_slice_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: false
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "TensorArrayUnstack_2/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\030\000\000\000(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_2/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_2/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_2/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_2/strided_slice"
  op: "StridedSlice"
  input: "TensorArrayUnstack_2/Shape"
  input: "TensorArrayUnstack_2/strided_slice/stack"
  input: "TensorArrayUnstack_2/strided_slice/stack_1"
  input: "TensorArrayUnstack_2/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "TensorArrayUnstack_2/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_2/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_2/range"
  op: "Range"
  input: "TensorArrayUnstack_2/range/start"
  input: "TensorArrayUnstack_2/strided_slice"
  input: "TensorArrayUnstack_2/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "TensorArray_2"
  input: "TensorArrayUnstack_2/range"
  input: "Reshape_1"
  input: "TensorArray_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ReverseSequence"
  op: "ReverseSequence"
  input: "Reshape_1"
  input: "Tile_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 1
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 0
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "rnn/LSTMCellZeroState/Const"
  input: "rnn/LSTMCellZeroState/Const_1"
  input: "rnn/LSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/zeros"
  op: "Fill"
  input: "rnn/LSTMCellZeroState/concat"
  input: "rnn/LSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "rnn/LSTMCellZeroState/Const_4"
  input: "rnn/LSTMCellZeroState/Const_5"
  input: "rnn/LSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "rnn/LSTMCellZeroState/concat_1"
  input: "rnn/LSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/Const_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "rnn/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\030\000\000\000(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "rnn/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/strided_slice"
  op: "StridedSlice"
  input: "rnn/Shape"
  input: "rnn/strided_slice/stack"
  input: "rnn/strided_slice/stack_1"
  input: "rnn/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "rnn/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "rnn/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/concat"
  op: "ConcatV2"
  input: "rnn/Const"
  input: "rnn/Const_1"
  input: "rnn/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/zeros"
  op: "Fill"
  input: "rnn/concat"
  input: "rnn/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/time"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/TensorArray"
  op: "TensorArrayV3"
  input: "rnn/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 40
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "rnn/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "rnn/TensorArray_1"
  op: "TensorArrayV3"
  input: "rnn/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 40
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "rnn/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\030\000\000\000(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "rnn/TensorArrayUnstack/Shape"
  input: "rnn/TensorArrayUnstack/strided_slice/stack"
  input: "rnn/TensorArrayUnstack/strided_slice/stack_1"
  input: "rnn/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/range"
  op: "Range"
  input: "rnn/TensorArrayUnstack/range/start"
  input: "rnn/TensorArrayUnstack/strided_slice"
  input: "rnn/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "rnn/TensorArray_1"
  input: "rnn/TensorArrayUnstack/range"
  input: "ReverseSequence"
  input: "rnn/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReverseSequence"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/Maximum/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/Maximum"
  op: "Maximum"
  input: "rnn/Maximum/x"
  input: "rnn/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/Minimum"
  op: "Minimum"
  input: "rnn/strided_slice"
  input: "rnn/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/iteration_counter"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/while/Enter"
  op: "Enter"
  input: "rnn/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Enter_1"
  op: "Enter"
  input: "rnn/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Enter_2"
  op: "Enter"
  input: "rnn/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Enter_3"
  op: "Enter"
  input: "rnn/LSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Enter_4"
  op: "Enter"
  input: "rnn/LSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Merge"
  op: "Merge"
  input: "rnn/while/Enter"
  input: "rnn/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Merge_1"
  op: "Merge"
  input: "rnn/while/Enter_1"
  input: "rnn/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Merge_2"
  op: "Merge"
  input: "rnn/while/Enter_2"
  input: "rnn/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Merge_3"
  op: "Merge"
  input: "rnn/while/Enter_3"
  input: "rnn/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Merge_4"
  op: "Merge"
  input: "rnn/while/Enter_4"
  input: "rnn/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Less"
  op: "Less"
  input: "rnn/while/Merge"
  input: "rnn/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Less/Enter"
  op: "Enter"
  input: "rnn/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Less_1"
  op: "Less"
  input: "rnn/while/Merge_1"
  input: "rnn/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Less_1/Enter"
  op: "Enter"
  input: "rnn/Minimum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/LogicalAnd"
  op: "LogicalAnd"
  input: "rnn/while/Less"
  input: "rnn/while/Less_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/LoopCond"
  op: "LoopCond"
  input: "rnn/while/LogicalAnd"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Switch"
  op: "Switch"
  input: "rnn/while/Merge"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Switch_1"
  op: "Switch"
  input: "rnn/while/Merge_1"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Switch_2"
  op: "Switch"
  input: "rnn/while/Merge_2"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Switch_3"
  op: "Switch"
  input: "rnn/while/Merge_3"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Switch_4"
  op: "Switch"
  input: "rnn/while/Merge_4"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Identity"
  op: "Identity"
  input: "rnn/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Identity_1"
  op: "Identity"
  input: "rnn/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Identity_2"
  op: "Identity"
  input: "rnn/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Identity_3"
  op: "Identity"
  input: "rnn/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Identity_4"
  op: "Identity"
  input: "rnn/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/add/y"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/while/add"
  op: "AddV2"
  input: "rnn/while/Identity"
  input: "rnn/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "rnn/while/TensorArrayReadV3/Enter"
  input: "rnn/while/Identity_1"
  input: "rnn/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "rnn/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "rnn/lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.125
      }
    }
  }
}
node {
  name: "rnn/lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.125
      }
    }
  }
}
node {
  name: "rnn/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "rnn/lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "rnn/lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "rnn/lstm_cell/kernel/Initializer/random_uniform/max"
  input: "rnn/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "rnn/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "rnn/lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "rnn/lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "rnn/lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "rnn/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "rnn/lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/lstm_cell/kernel/Assign"
  op: "Assign"
  input: "rnn/lstm_cell/kernel"
  input: "rnn/lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/lstm_cell/kernel/read"
  op: "Identity"
  input: "rnn/lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "rnn/lstm_cell/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/lstm_cell/bias/Assign"
  op: "Assign"
  input: "rnn/lstm_cell/bias"
  input: "rnn/lstm_cell/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/lstm_cell/bias/read"
  op: "Identity"
  input: "rnn/lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/concat/axis"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/concat"
  op: "ConcatV2"
  input: "rnn/while/TensorArrayReadV3"
  input: "rnn/while/Identity_4"
  input: "rnn/while/lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/MatMul"
  op: "MatMul"
  input: "rnn/while/lstm_cell/concat"
  input: "rnn/while/lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "rnn/while/lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "rnn/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "rnn/while/lstm_cell/MatMul"
  input: "rnn/while/lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "rnn/while/lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "rnn/lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/lstm_cell/Const"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/split/split_dim"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/split"
  op: "Split"
  input: "rnn/while/lstm_cell/split/split_dim"
  input: "rnn/while/lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "rnn/while/lstm_cell/add/y"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/add"
  op: "AddV2"
  input: "rnn/while/lstm_cell/split:2"
  input: "rnn/while/lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "rnn/while/lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/mul"
  op: "Mul"
  input: "rnn/while/lstm_cell/Sigmoid"
  input: "rnn/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "rnn/while/lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/Tanh"
  op: "Tanh"
  input: "rnn/while/lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/mul_1"
  op: "Mul"
  input: "rnn/while/lstm_cell/Sigmoid_1"
  input: "rnn/while/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/add_1"
  op: "AddV2"
  input: "rnn/while/lstm_cell/mul"
  input: "rnn/while/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "rnn/while/lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/Tanh_1"
  op: "Tanh"
  input: "rnn/while/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/mul_2"
  op: "Mul"
  input: "rnn/while/lstm_cell/Sigmoid_2"
  input: "rnn/while/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "rnn/while/Identity_1"
  input: "rnn/while/lstm_cell/mul_2"
  input: "rnn/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "rnn/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/add_1/y"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/while/add_1"
  op: "AddV2"
  input: "rnn/while/Identity_1"
  input: "rnn/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/NextIteration"
  op: "NextIteration"
  input: "rnn/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/NextIteration_1"
  op: "NextIteration"
  input: "rnn/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/NextIteration_2"
  op: "NextIteration"
  input: "rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/NextIteration_3"
  op: "NextIteration"
  input: "rnn/while/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/NextIteration_4"
  op: "NextIteration"
  input: "rnn/while/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Exit"
  op: "Exit"
  input: "rnn/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Exit_1"
  op: "Exit"
  input: "rnn/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Exit_2"
  op: "Exit"
  input: "rnn/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Exit_3"
  op: "Exit"
  input: "rnn/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Exit_4"
  op: "Exit"
  input: "rnn/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "rnn/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "rnn/TensorArray"
  input: "rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/TensorArrayStack/range"
  op: "Range"
  input: "rnn/TensorArrayStack/range/start"
  input: "rnn/TensorArrayStack/TensorArraySizeV3"
  input: "rnn/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "rnn/TensorArray"
  input: "rnn/TensorArrayStack/range"
  input: "rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 40
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "rnn/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\030\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "rnn/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "ReverseSequence_1"
  op: "ReverseSequence"
  input: "rnn/TensorArrayStack/TensorArrayGatherV3"
  input: "Tile_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 1
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 0
    }
  }
}
node {
  name: "Shape_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\030\000\000\000(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_6/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_6"
  op: "StridedSlice"
  input: "Shape_5"
  input: "strided_slice_6/stack"
  input: "strided_slice_6/stack_1"
  input: "strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "TensorArray_3"
  op: "TensorArrayV3"
  input: "strided_slice_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: false
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "TensorArrayUnstack_3/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\030\000\000\000(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_3/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_3/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_3/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_3/strided_slice"
  op: "StridedSlice"
  input: "TensorArrayUnstack_3/Shape"
  input: "TensorArrayUnstack_3/strided_slice/stack"
  input: "TensorArrayUnstack_3/strided_slice/stack_1"
  input: "TensorArrayUnstack_3/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "TensorArrayUnstack_3/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_3/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_3/range"
  op: "Range"
  input: "TensorArrayUnstack_3/range/start"
  input: "TensorArrayUnstack_3/strided_slice"
  input: "TensorArrayUnstack_3/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_3/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "TensorArray_3"
  input: "TensorArrayUnstack_3/range"
  input: "ReverseSequence_1"
  input: "TensorArray_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReverseSequence_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Shape_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "strided_slice_7/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_7"
  op: "StridedSlice"
  input: "Shape_6"
  input: "strided_slice_7/stack"
  input: "strided_slice_7/stack_1"
  input: "strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Max_1"
  op: "Max"
  input: "Cast"
  input: "Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SequenceMask/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SequenceMask/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SequenceMask/Range"
  op: "Range"
  input: "SequenceMask/Const"
  input: "Max_1"
  input: "SequenceMask/Const_1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "SequenceMask/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "SequenceMask/ExpandDims"
  op: "ExpandDims"
  input: "Cast"
  input: "SequenceMask/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "SequenceMask/Cast"
  op: "Cast"
  input: "SequenceMask/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "SequenceMask/Less"
  op: "Less"
  input: "SequenceMask/Range"
  input: "SequenceMask/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "SequenceMask/Cast_1"
  op: "Cast"
  input: "SequenceMask/Less"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "transpose_2/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transpose_2"
  op: "Transpose"
  input: "SequenceMask/Cast_1"
  input: "transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "Tile_3/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "Tile_3"
  op: "Tile"
  input: "transpose_2"
  input: "Tile_3/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "mask_ta"
  op: "TensorArrayV3"
  input: "Max_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "TensorArrayUnstack_4/Shape"
  op: "Shape"
  input: "Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "TensorArrayUnstack_4/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_4/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_4/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_4/strided_slice"
  op: "StridedSlice"
  input: "TensorArrayUnstack_4/Shape"
  input: "TensorArrayUnstack_4/strided_slice/stack"
  input: "TensorArrayUnstack_4/strided_slice/stack_1"
  input: "TensorArrayUnstack_4/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "TensorArrayUnstack_4/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_4/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_4/range"
  op: "Range"
  input: "TensorArrayUnstack_4/range/start"
  input: "TensorArrayUnstack_4/strided_slice"
  input: "TensorArrayUnstack_4/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_4/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "mask_ta"
  input: "TensorArrayUnstack_4/range"
  input: "Tile_3"
  input: "mask_ta:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Tile_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "mul"
  op: "Mul"
  input: "strided_slice"
  input: "mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/ExpandDims"
  op: "ExpandDims"
  input: "mul"
  input: "LSTMCellZeroState/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "LSTMCellZeroState/ExpandDims"
  input: "LSTMCellZeroState/Const"
  input: "LSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/zeros"
  op: "Fill"
  input: "LSTMCellZeroState/concat"
  input: "LSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTMCellZeroState/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "mul"
  input: "LSTMCellZeroState/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/ExpandDims_2"
  op: "ExpandDims"
  input: "mul"
  input: "LSTMCellZeroState/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "LSTMCellZeroState/ExpandDims_2"
  input: "LSTMCellZeroState/Const_2"
  input: "LSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "LSTMCellZeroState/concat_1"
  input: "LSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTMCellZeroState/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/ExpandDims_3"
  op: "ExpandDims"
  input: "mul"
  input: "LSTMCellZeroState/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "zeros/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "zeros/mul"
  op: "Mul"
  input: "mul"
  input: "zeros/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros/Less/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "zeros/Less"
  op: "Less"
  input: "zeros/mul"
  input: "zeros/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros/packed/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "zeros/packed"
  op: "Pack"
  input: "mul"
  input: "zeros/packed/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "zeros"
  op: "Fill"
  input: "zeros/packed"
  input: "zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "zeros_1/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "zeros_1/mul"
  op: "Mul"
  input: "mul"
  input: "zeros_1/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_1/Less/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "zeros_1/Less"
  op: "Less"
  input: "zeros_1/mul"
  input: "zeros_1/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_1/packed/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "zeros_1/packed"
  op: "Pack"
  input: "mul"
  input: "zeros_1/packed/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "zeros_1"
  op: "Fill"
  input: "zeros_1/packed"
  input: "zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "log_weights_ta"
  op: "TensorArrayV3"
  input: "Max_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "resampled_ta"
  op: "TensorArrayV3"
  input: "Max_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "zeros_2/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "zeros_2/mul"
  op: "Mul"
  input: "zeros_2/mul/x"
  input: "strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_2/Less/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "zeros_2/Less"
  op: "Less"
  input: "zeros_2/mul"
  input: "zeros_2/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_2/packed/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "zeros_2/packed"
  op: "Pack"
  input: "zeros_2/packed/0"
  input: "strided_slice_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "zeros_2/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "zeros_2"
  op: "Fill"
  input: "zeros_2/packed"
  input: "zeros_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "zeros_3/Less/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "zeros_3/Less"
  op: "Less"
  input: "strided_slice_7"
  input: "zeros_3/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_3/packed"
  op: "Pack"
  input: "strided_slice_7"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "zeros_3/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "zeros_3"
  op: "Fill"
  input: "zeros_3/packed"
  input: "zeros_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/Enter"
  op: "Enter"
  input: "Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/Enter_1"
  op: "Enter"
  input: "LSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/Enter_2"
  op: "Enter"
  input: "LSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/Enter_3"
  op: "Enter"
  input: "zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/Enter_4"
  op: "Enter"
  input: "zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/Enter_5"
  op: "Enter"
  input: "while/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/Enter_6"
  op: "Enter"
  input: "log_weights_ta:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/Enter_7"
  op: "Enter"
  input: "resampled_ta:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/Enter_8"
  op: "Enter"
  input: "zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/Enter_9"
  op: "Enter"
  input: "zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/Merge"
  op: "Merge"
  input: "while/Enter"
  input: "while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Merge_1"
  op: "Merge"
  input: "while/Enter_1"
  input: "while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Merge_2"
  op: "Merge"
  input: "while/Enter_2"
  input: "while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Merge_3"
  op: "Merge"
  input: "while/Enter_3"
  input: "while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Merge_4"
  op: "Merge"
  input: "while/Enter_4"
  input: "while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Merge_5"
  op: "Merge"
  input: "while/Enter_5"
  input: "while/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Merge_6"
  op: "Merge"
  input: "while/Enter_6"
  input: "while/NextIteration_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Merge_7"
  op: "Merge"
  input: "while/Enter_7"
  input: "while/NextIteration_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Merge_8"
  op: "Merge"
  input: "while/Enter_8"
  input: "while/NextIteration_8"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Merge_9"
  op: "Merge"
  input: "while/Enter_9"
  input: "while/NextIteration_9"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Less"
  op: "Less"
  input: "while/Merge"
  input: "while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Less/Enter"
  op: "Enter"
  input: "Max_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/LoopCond"
  op: "LoopCond"
  input: "while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Switch"
  op: "Switch"
  input: "while/Merge"
  input: "while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Switch_1"
  op: "Switch"
  input: "while/Merge_1"
  input: "while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Switch_2"
  op: "Switch"
  input: "while/Merge_2"
  input: "while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Switch_3"
  op: "Switch"
  input: "while/Merge_3"
  input: "while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Switch_4"
  op: "Switch"
  input: "while/Merge_4"
  input: "while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Switch_5"
  op: "Switch"
  input: "while/Merge_5"
  input: "while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Merge_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Switch_6"
  op: "Switch"
  input: "while/Merge_6"
  input: "while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Merge_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Switch_7"
  op: "Switch"
  input: "while/Merge_7"
  input: "while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Merge_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Switch_8"
  op: "Switch"
  input: "while/Merge_8"
  input: "while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Merge_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/Switch_9"
  op: "Switch"
  input: "while/Merge_9"
  input: "while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Merge_9"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/Identity"
  op: "Identity"
  input: "while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Identity_1"
  op: "Identity"
  input: "while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Identity_2"
  op: "Identity"
  input: "while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Identity_3"
  op: "Identity"
  input: "while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Identity_4"
  op: "Identity"
  input: "while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Identity_5"
  op: "Identity"
  input: "while/Switch_5:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Identity_6"
  op: "Identity"
  input: "while/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Identity_7"
  op: "Identity"
  input: "while/Switch_7:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Identity_8"
  op: "Identity"
  input: "while/Switch_8:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/Identity_9"
  op: "Identity"
  input: "while/Switch_9:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "while/TensorArrayReadV3/Enter"
  input: "while/Identity"
  input: "while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "mask_ta"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "TensorArrayUnstack_4/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/TensorArrayReadV3_1"
  op: "TensorArrayReadV3"
  input: "while/TensorArrayReadV3_1/Enter"
  input: "while/Identity"
  input: "while/TensorArrayReadV3_1/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/TensorArrayReadV3_1/Enter"
  op: "Enter"
  input: "TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/TensorArrayReadV3_1/Enter_1"
  op: "Enter"
  input: "TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/TensorArrayReadV3_2"
  op: "TensorArrayReadV3"
  input: "while/TensorArrayReadV3_2/Enter"
  input: "while/Identity"
  input: "while/TensorArrayReadV3_2/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/TensorArrayReadV3_2/Enter"
  op: "Enter"
  input: "TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/TensorArrayReadV3_2/Enter_1"
  op: "Enter"
  input: "TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp/data_encoder_0/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter"
  op: "Enter"
  input: "mlp/data_encoder_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp/data_encoder_0/MatMul"
  op: "MatMul"
  input: "while/TensorArrayReadV3_1"
  input: "while/mlp/data_encoder_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "while/mlp/data_encoder_0/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter"
  op: "Enter"
  input: "mlp/data_encoder_0/bias"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp/data_encoder_0/BiasAdd"
  op: "BiasAdd"
  input: "while/mlp/data_encoder_0/MatMul"
  input: "while/mlp/data_encoder_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "while/mlp/data_encoder_0/Relu"
  op: "Relu"
  input: "while/mlp/data_encoder_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp/data_encoder_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter"
  op: "Enter"
  input: "mlp/data_encoder_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp/data_encoder_1/MatMul"
  op: "MatMul"
  input: "while/mlp/data_encoder_0/Relu"
  input: "while/mlp/data_encoder_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "while/mlp/data_encoder_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter"
  op: "Enter"
  input: "mlp/data_encoder_1/bias"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp/data_encoder_1/BiasAdd"
  op: "BiasAdd"
  input: "while/mlp/data_encoder_1/MatMul"
  input: "while/mlp/data_encoder_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "while/mlp/data_encoder_1/Relu"
  op: "Relu"
  input: "while/mlp/data_encoder_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/concat/axis"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/concat"
  op: "ConcatV2"
  input: "while/mlp/data_encoder_1/Relu"
  input: "while/Identity_3"
  input: "while/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\300\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1157275140285492
      }
    }
  }
}
node {
  name: "lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1157275140285492
      }
    }
  }
}
node {
  name: "lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "lstm_cell/kernel/Initializer/random_uniform/max"
  input: "lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_cell/kernel/Assign"
  op: "Assign"
  input: "lstm_cell/kernel"
  input: "lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_cell/kernel/read"
  op: "Identity"
  input: "lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "lstm_cell/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_cell/bias/Assign"
  op: "Assign"
  input: "lstm_cell/bias"
  input: "lstm_cell/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_cell/bias/read"
  op: "Identity"
  input: "lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "while/lstm_cell/concat/axis"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/lstm_cell/concat"
  op: "ConcatV2"
  input: "while/concat"
  input: "while/Identity_2"
  input: "while/lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "while/lstm_cell/MatMul"
  op: "MatMul"
  input: "while/lstm_cell/concat"
  input: "while/lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "while/lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "while/lstm_cell/MatMul"
  input: "while/lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "while/lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/lstm_cell/Const"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "while/lstm_cell/split/split_dim"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/lstm_cell/split"
  op: "Split"
  input: "while/lstm_cell/split/split_dim"
  input: "while/lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "while/lstm_cell/add/y"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "while/lstm_cell/add"
  op: "AddV2"
  input: "while/lstm_cell/split:2"
  input: "while/lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "while/lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/lstm_cell/mul"
  op: "Mul"
  input: "while/lstm_cell/Sigmoid"
  input: "while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "while/lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/lstm_cell/Tanh"
  op: "Tanh"
  input: "while/lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/lstm_cell/mul_1"
  op: "Mul"
  input: "while/lstm_cell/Sigmoid_1"
  input: "while/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/lstm_cell/add_1"
  op: "AddV2"
  input: "while/lstm_cell/mul"
  input: "while/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "while/lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/lstm_cell/Tanh_1"
  op: "Tanh"
  input: "while/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/lstm_cell/mul_2"
  op: "Mul"
  input: "while/lstm_cell/Sigmoid_2"
  input: "while/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/concat_1/concat_dim"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/concat_1/concat"
  op: "Identity"
  input: "while/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21650634706020355
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21650634706020355
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform/max"
  input: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform/RandomUniform"
  input: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform"
  op: "Add"
  input: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform/mul"
  input: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_2/prior_fcnet_0/kernel"
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_0/kernel"
  input: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_2/prior_fcnet_0/bias"
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_0/bias"
  input: "while/mlp_2/prior_fcnet_0/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_2/prior_fcnet_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/MatMul"
  op: "MatMul"
  input: "while/concat_1/concat"
  input: "while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_2/prior_fcnet_0/bias"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/BiasAdd"
  op: "BiasAdd"
  input: "while/mlp_2/prior_fcnet_0/MatMul"
  input: "while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/Relu"
  op: "Relu"
  input: "while/mlp_2/prior_fcnet_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1767766922712326
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1767766922712326
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform/max"
  input: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform/mul"
  input: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_2/prior_fcnet_1/kernel"
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_1/kernel"
  input: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_2/prior_fcnet_1/bias"
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_1/bias"
  input: "while/mlp_2/prior_fcnet_1/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_2/prior_fcnet_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/MatMul"
  op: "MatMul"
  input: "while/mlp_2/prior_fcnet_0/Relu"
  input: "while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_2/prior_fcnet_1/bias"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/BiasAdd"
  op: "BiasAdd"
  input: "while/mlp_2/prior_fcnet_1/MatMul"
  input: "while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/Relu"
  op: "Relu"
  input: "while/mlp_2/prior_fcnet_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "while/Const_1"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "while/split/split_dim"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/split"
  op: "Split"
  input: "while/split/split_dim"
  input: "while/mlp_2/prior_fcnet_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 2
    }
  }
}
node {
  name: "while/add/y"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "while/add"
  op: "AddV2"
  input: "while/split:1"
  input: "while/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Softplus"
  op: "Softplus"
  input: "while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Maximum/y"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/Maximum"
  op: "Maximum"
  input: "while/Softplus"
  input: "while/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal/loc"
  op: "Identity"
  input: "while/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal/scale"
  op: "Identity"
  input: "while/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/TensorArrayReadV3_3"
  op: "TensorArrayReadV3"
  input: "while/TensorArrayReadV3_3/Enter"
  input: "while/Identity"
  input: "while/TensorArrayReadV3_3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/TensorArrayReadV3_3/Enter"
  op: "Enter"
  input: "TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/TensorArrayReadV3_3/Enter_1"
  op: "Enter"
  input: "TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/Normal/mean/ones_like/Shape"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "while/Normal/mean/ones_like/Const"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "while/Normal/mean/ones_like"
  op: "Fill"
  input: "while/Normal/mean/ones_like/Shape"
  input: "while/Normal/mean/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/Normal/mean/mul"
  op: "Mul"
  input: "while/Normal/loc"
  input: "while/Normal/mean/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/concat_2/axis"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/concat_2"
  op: "ConcatV2"
  input: "while/lstm_cell/mul_2"
  input: "while/TensorArrayReadV3_3"
  input: "while/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1767766922712326
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1767766922712326
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform/max"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform/RandomUniform"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform"
  op: "Add"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform/mul"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_4/approximate_posterior_fcnet_0/kernel"
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_4/approximate_posterior_fcnet_0/bias"
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/MatMul"
  op: "MatMul"
  input: "while/concat_2"
  input: "while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/BiasAdd"
  op: "BiasAdd"
  input: "while/mlp_4/approximate_posterior_fcnet_0/MatMul"
  input: "while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/Relu"
  op: "Relu"
  input: "while/mlp_4/approximate_posterior_fcnet_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1767766922712326
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1767766922712326
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform/max"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform/mul"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_4/approximate_posterior_fcnet_1/kernel"
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_4/approximate_posterior_fcnet_1/bias"
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/MatMul"
  op: "MatMul"
  input: "while/mlp_4/approximate_posterior_fcnet_0/Relu"
  input: "while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/BiasAdd"
  op: "BiasAdd"
  input: "while/mlp_4/approximate_posterior_fcnet_1/MatMul"
  input: "while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/Relu"
  op: "Relu"
  input: "while/mlp_4/approximate_posterior_fcnet_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "while/Const_2"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "while/split_1/split_dim"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/split_1"
  op: "Split"
  input: "while/split_1/split_dim"
  input: "while/mlp_4/approximate_posterior_fcnet_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 2
    }
  }
}
node {
  name: "while/add_1/y"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "while/add_1"
  op: "AddV2"
  input: "while/split_1:1"
  input: "while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Softplus_1"
  op: "Softplus"
  input: "while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Maximum_1/y"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/Maximum_1"
  op: "Maximum"
  input: "while/Softplus_1"
  input: "while/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/add_2"
  op: "AddV2"
  input: "while/split_1"
  input: "while/Normal/mean/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/loc"
  op: "Identity"
  input: "while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/scale"
  op: "Identity"
  input: "while/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/sample_shape"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/batch_shape_tensor/batch_shape"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/concat/values_0"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/concat/axis"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/concat"
  op: "ConcatV2"
  input: "while/Normal_1/sample/concat/values_0"
  input: "while/Normal_1/batch_shape_tensor/batch_shape"
  input: "while/Normal_1/sample/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/random_normal/mean"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/random_normal/stddev"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "while/Normal_1/sample/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "while/Normal_1/sample/random_normal/mul"
  op: "Mul"
  input: "while/Normal_1/sample/random_normal/RandomStandardNormal"
  input: "while/Normal_1/sample/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/random_normal"
  op: "Add"
  input: "while/Normal_1/sample/random_normal/mul"
  input: "while/Normal_1/sample/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/mul"
  op: "Mul"
  input: "while/Normal_1/sample/random_normal"
  input: "while/Normal_1/scale"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/add"
  op: "AddV2"
  input: "while/Normal_1/sample/mul"
  input: "while/Normal_1/loc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/Shape"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/strided_slice/stack"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/strided_slice/stack_1"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/strided_slice/stack_2"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/strided_slice"
  op: "StridedSlice"
  input: "while/Normal_1/sample/Shape"
  input: "while/Normal_1/sample/strided_slice/stack"
  input: "while/Normal_1/sample/strided_slice/stack_1"
  input: "while/Normal_1/sample/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "while/Normal_1/sample/concat_1/axis"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/concat_1"
  op: "ConcatV2"
  input: "while/Normal_1/sample/sample_shape"
  input: "while/Normal_1/sample/strided_slice"
  input: "while/Normal_1/sample/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/Reshape"
  op: "Reshape"
  input: "while/Normal_1/sample/add"
  input: "while/Normal_1/sample/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21650634706020355
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21650634706020355
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform/max"
  input: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform/RandomUniform"
  input: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform"
  op: "Add"
  input: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform/mul"
  input: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_1/latent_encoder_0/kernel"
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_0/kernel"
  input: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_1/latent_encoder_0/bias"
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_0/bias"
  input: "while/mlp_1/latent_encoder_0/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_1/latent_encoder_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/MatMul"
  op: "MatMul"
  input: "while/Normal_1/sample/Reshape"
  input: "while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_1/latent_encoder_0/bias"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/BiasAdd"
  op: "BiasAdd"
  input: "while/mlp_1/latent_encoder_0/MatMul"
  input: "while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/Relu"
  op: "Relu"
  input: "while/mlp_1/latent_encoder_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21650634706020355
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21650634706020355
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform/max"
  input: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform/mul"
  input: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_1/latent_encoder_1/kernel"
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_1/kernel"
  input: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_1/latent_encoder_1/bias"
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_1/bias"
  input: "while/mlp_1/latent_encoder_1/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_1/latent_encoder_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/MatMul"
  op: "MatMul"
  input: "while/mlp_1/latent_encoder_0/Relu"
  input: "while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_1/latent_encoder_1/bias"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/BiasAdd"
  op: "BiasAdd"
  input: "while/mlp_1/latent_encoder_1/MatMul"
  input: "while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/Relu"
  op: "Relu"
  input: "while/mlp_1/latent_encoder_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/concat_3/axis"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/concat_3"
  op: "ConcatV2"
  input: "while/mlp_1/latent_encoder_1/Relu"
  input: "while/lstm_cell/mul_2"
  input: "while/concat_3/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1767766922712326
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1767766922712326
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform/max"
  input: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform/RandomUniform"
  input: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform"
  op: "Add"
  input: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform/mul"
  input: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_3/generative_fcnet_0/kernel"
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_0/kernel"
  input: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_3/generative_fcnet_0/bias"
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_0/bias"
  input: "while/mlp_3/generative_fcnet_0/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_3/generative_fcnet_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/MatMul"
  op: "MatMul"
  input: "while/concat_3"
  input: "while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_3/generative_fcnet_0/bias"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/BiasAdd"
  op: "BiasAdd"
  input: "while/mlp_3/generative_fcnet_0/MatMul"
  input: "while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/Relu"
  op: "Relu"
  input: "while/mlp_3/generative_fcnet_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.30151134729385376
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.30151134729385376
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform/max"
  input: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform/mul"
  input: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_3/generative_fcnet_1/kernel"
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_1/kernel"
  input: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_3/generative_fcnet_1/bias"
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_1/bias"
  input: "while/mlp_3/generative_fcnet_1/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_3/generative_fcnet_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/MatMul"
  op: "MatMul"
  input: "while/mlp_3/generative_fcnet_0/Relu"
  input: "while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_3/generative_fcnet_1/bias"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/BiasAdd"
  op: "BiasAdd"
  input: "while/mlp_3/generative_fcnet_1/MatMul"
  input: "while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/Relu"
  op: "Relu"
  input: "while/mlp_3/generative_fcnet_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "while/Const_3"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "while/split_2/split_dim"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/split_2"
  op: "Split"
  input: "while/split_2/split_dim"
  input: "while/mlp_3/generative_fcnet_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 2
    }
  }
}
node {
  name: "while/add_3/y"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.25
      }
    }
  }
}
node {
  name: "while/add_3"
  op: "AddV2"
  input: "while/split_2:1"
  input: "while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "while/Softplus_2"
  op: "Softplus"
  input: "while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "while/Maximum_2/y"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/Maximum_2"
  op: "Maximum"
  input: "while/Softplus_2"
  input: "while/Maximum_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_2/loc"
  op: "Identity"
  input: "while/split_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_2/scale"
  op: "Identity"
  input: "while/Maximum_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_2/log_prob/standardize/sub"
  op: "Sub"
  input: "while/TensorArrayReadV3_2"
  input: "while/Normal_2/loc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_2/log_prob/standardize/truediv"
  op: "RealDiv"
  input: "while/Normal_2/log_prob/standardize/sub"
  input: "while/Normal_2/scale"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_2/log_prob/Square"
  op: "Square"
  input: "while/Normal_2/log_prob/standardize/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_2/log_prob/mul/x"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5
      }
    }
  }
}
node {
  name: "while/Normal_2/log_prob/mul"
  op: "Mul"
  input: "while/Normal_2/log_prob/mul/x"
  input: "while/Normal_2/log_prob/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_2/log_prob/Log"
  op: "Log"
  input: "while/Normal_2/scale"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_2/log_prob/add/x"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9189385175704956
      }
    }
  }
}
node {
  name: "while/Normal_2/log_prob/add"
  op: "AddV2"
  input: "while/Normal_2/log_prob/add/x"
  input: "while/Normal_2/log_prob/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_2/log_prob/sub"
  op: "Sub"
  input: "while/Normal_2/log_prob/mul"
  input: "while/Normal_2/log_prob/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "while/Sum/reduction_indices"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "while/Sum"
  op: "Sum"
  input: "while/Normal_2/log_prob/sub"
  input: "while/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "while/Normal/log_prob/standardize/sub"
  op: "Sub"
  input: "while/Normal_1/sample/Reshape"
  input: "while/Normal/loc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal/log_prob/standardize/truediv"
  op: "RealDiv"
  input: "while/Normal/log_prob/standardize/sub"
  input: "while/Normal/scale"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal/log_prob/Square"
  op: "Square"
  input: "while/Normal/log_prob/standardize/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal/log_prob/mul/x"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5
      }
    }
  }
}
node {
  name: "while/Normal/log_prob/mul"
  op: "Mul"
  input: "while/Normal/log_prob/mul/x"
  input: "while/Normal/log_prob/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal/log_prob/Log"
  op: "Log"
  input: "while/Normal/scale"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal/log_prob/add/x"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9189385175704956
      }
    }
  }
}
node {
  name: "while/Normal/log_prob/add"
  op: "AddV2"
  input: "while/Normal/log_prob/add/x"
  input: "while/Normal/log_prob/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal/log_prob/sub"
  op: "Sub"
  input: "while/Normal/log_prob/mul"
  input: "while/Normal/log_prob/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Sum_1/reduction_indices"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "while/Sum_1"
  op: "Sum"
  input: "while/Normal/log_prob/sub"
  input: "while/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "while/Normal_1/log_prob/standardize/sub"
  op: "Sub"
  input: "while/Normal_1/sample/Reshape"
  input: "while/Normal_1/loc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/log_prob/standardize/truediv"
  op: "RealDiv"
  input: "while/Normal_1/log_prob/standardize/sub"
  input: "while/Normal_1/scale"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/log_prob/Square"
  op: "Square"
  input: "while/Normal_1/log_prob/standardize/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/log_prob/mul/x"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5
      }
    }
  }
}
node {
  name: "while/Normal_1/log_prob/mul"
  op: "Mul"
  input: "while/Normal_1/log_prob/mul/x"
  input: "while/Normal_1/log_prob/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/log_prob/Log"
  op: "Log"
  input: "while/Normal_1/scale"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/log_prob/add/x"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9189385175704956
      }
    }
  }
}
node {
  name: "while/Normal_1/log_prob/add"
  op: "AddV2"
  input: "while/Normal_1/log_prob/add/x"
  input: "while/Normal_1/log_prob/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/log_prob/sub"
  op: "Sub"
  input: "while/Normal_1/log_prob/mul"
  input: "while/Normal_1/log_prob/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Sum_2/reduction_indices"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "while/Sum_2"
  op: "Sum"
  input: "while/Normal_1/log_prob/sub"
  input: "while/Sum_2/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "while/add_4"
  op: "AddV2"
  input: "while/Sum_1"
  input: "while/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "while/sub"
  op: "Sub"
  input: "while/add_4"
  input: "while/Sum_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "while/mul"
  op: "Mul"
  input: "while/sub"
  input: "while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "while/Reshape/shape/0"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "while/Reshape/shape"
  op: "Pack"
  input: "while/Reshape/shape/0"
  input: "while/Reshape/shape/Enter"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "while/Reshape/shape/Enter"
  op: "Enter"
  input: "strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/Reshape"
  op: "Reshape"
  input: "while/mul"
  input: "while/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/add_5"
  op: "AddV2"
  input: "while/Identity_8"
  input: "while/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/Shape"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "while/strided_slice/stack"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/strided_slice/stack_1"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/strided_slice/stack_2"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/strided_slice"
  op: "StridedSlice"
  input: "while/Shape"
  input: "while/strided_slice/stack"
  input: "while/strided_slice/stack_1"
  input: "while/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "while/ReduceLogSumExp/Max/reduction_indices"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp/Max"
  op: "Max"
  input: "while/add_5"
  input: "while/ReduceLogSumExp/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "while/ReduceLogSumExp/IsFinite"
  op: "IsFinite"
  input: "while/ReduceLogSumExp/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp/zeros_like"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp/Select"
  op: "Select"
  input: "while/ReduceLogSumExp/IsFinite"
  input: "while/ReduceLogSumExp/Max"
  input: "while/ReduceLogSumExp/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp/StopGradient"
  op: "StopGradient"
  input: "while/ReduceLogSumExp/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp/Sub"
  op: "Sub"
  input: "while/add_5"
  input: "while/ReduceLogSumExp/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp/Exp"
  op: "Exp"
  input: "while/ReduceLogSumExp/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp/Sum/reduction_indices"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp/Sum"
  op: "Sum"
  input: "while/ReduceLogSumExp/Exp"
  input: "while/ReduceLogSumExp/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "while/ReduceLogSumExp/Log"
  op: "Log"
  input: "while/ReduceLogSumExp/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp/Shape"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp/Reshape"
  op: "Reshape"
  input: "while/ReduceLogSumExp/StopGradient"
  input: "while/ReduceLogSumExp/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp/Add"
  op: "Add"
  input: "while/ReduceLogSumExp/Log"
  input: "while/ReduceLogSumExp/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/mul_1/x"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "while/mul_1"
  op: "Mul"
  input: "while/mul_1/x"
  input: "while/ReduceLogSumExp/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/mul_2/x"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "while/mul_2"
  op: "Mul"
  input: "while/mul_2/x"
  input: "while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_1/Max/reduction_indices"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_1/Max"
  op: "Max"
  input: "while/mul_2"
  input: "while/ReduceLogSumExp_1/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "while/ReduceLogSumExp_1/IsFinite"
  op: "IsFinite"
  input: "while/ReduceLogSumExp_1/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_1/zeros_like"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_1/Select"
  op: "Select"
  input: "while/ReduceLogSumExp_1/IsFinite"
  input: "while/ReduceLogSumExp_1/Max"
  input: "while/ReduceLogSumExp_1/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_1/StopGradient"
  op: "StopGradient"
  input: "while/ReduceLogSumExp_1/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_1/Sub"
  op: "Sub"
  input: "while/mul_2"
  input: "while/ReduceLogSumExp_1/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_1/Exp"
  op: "Exp"
  input: "while/ReduceLogSumExp_1/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_1/Sum/reduction_indices"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_1/Sum"
  op: "Sum"
  input: "while/ReduceLogSumExp_1/Exp"
  input: "while/ReduceLogSumExp_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "while/ReduceLogSumExp_1/Log"
  op: "Log"
  input: "while/ReduceLogSumExp_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_1/Shape"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_1/Reshape"
  op: "Reshape"
  input: "while/ReduceLogSumExp_1/StopGradient"
  input: "while/ReduceLogSumExp_1/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_1/Add"
  op: "Add"
  input: "while/ReduceLogSumExp_1/Log"
  input: "while/ReduceLogSumExp_1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/sub_1"
  op: "Sub"
  input: "while/mul_1"
  input: "while/ReduceLogSumExp_1/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ToFloat"
  op: "Cast"
  input: "while/strided_slice"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/truediv/y"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "while/truediv"
  op: "RealDiv"
  input: "while/ToFloat"
  input: "while/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Log"
  op: "Log"
  input: "while/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/LessEqual"
  op: "LessEqual"
  input: "while/sub_1"
  input: "while/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_2/Max/reduction_indices"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_2/Max"
  op: "Max"
  input: "while/add_5"
  input: "while/ReduceLogSumExp_2/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "while/ReduceLogSumExp_2/IsFinite"
  op: "IsFinite"
  input: "while/ReduceLogSumExp_2/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_2/zeros_like"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_2/Select"
  op: "Select"
  input: "while/ReduceLogSumExp_2/IsFinite"
  input: "while/ReduceLogSumExp_2/Max"
  input: "while/ReduceLogSumExp_2/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_2/StopGradient"
  op: "StopGradient"
  input: "while/ReduceLogSumExp_2/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_2/Sub"
  op: "Sub"
  input: "while/add_5"
  input: "while/ReduceLogSumExp_2/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_2/Exp"
  op: "Exp"
  input: "while/ReduceLogSumExp_2/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_2/Sum/reduction_indices"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_2/Sum"
  op: "Sum"
  input: "while/ReduceLogSumExp_2/Exp"
  input: "while/ReduceLogSumExp_2/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "while/ReduceLogSumExp_2/Log"
  op: "Log"
  input: "while/ReduceLogSumExp_2/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_2/Add"
  op: "Add"
  input: "while/ReduceLogSumExp_2/Log"
  input: "while/ReduceLogSumExp_2/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/sub_2"
  op: "Sub"
  input: "while/add_5"
  input: "while/ReduceLogSumExp_2/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/transpose/perm"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "while/transpose"
  op: "Transpose"
  input: "while/sub_2"
  input: "while/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "while/Categorical/probs"
  op: "Softmax"
  input: "while/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "while/Categorical/batch_rank"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/Categorical/logits_shape"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "while/Categorical/event_size"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "while/Categorical/batch_shape"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "while/Categorical/sample/sample_shape"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "while/Categorical/sample/sample_shape_1"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "while/Categorical/sample/multinomial/Multinomial/num_samples"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "while/Categorical/sample/multinomial/Multinomial"
  op: "Multinomial"
  input: "while/transpose"
  input: "while/Categorical/sample/multinomial/Multinomial/num_samples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "output_dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "while/Categorical/sample/transpose/perm"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "while/Categorical/sample/transpose"
  op: "Transpose"
  input: "while/Categorical/sample/multinomial/Multinomial"
  input: "while/Categorical/sample/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/Categorical/batch_shape_tensor/batch_shape"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "while/Categorical/sample/concat/values_0"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "while/Categorical/sample/concat/axis"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/Categorical/sample/concat"
  op: "ConcatV2"
  input: "while/Categorical/sample/concat/values_0"
  input: "while/Categorical/batch_shape_tensor/batch_shape"
  input: "while/Categorical/sample/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "while/Categorical/sample/Reshape"
  op: "Reshape"
  input: "while/Categorical/sample/transpose"
  input: "while/Categorical/sample/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/Categorical/sample/Shape"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "while/Categorical/sample/strided_slice/stack"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/Categorical/sample/strided_slice/stack_1"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/Categorical/sample/strided_slice/stack_2"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/Categorical/sample/strided_slice"
  op: "StridedSlice"
  input: "while/Categorical/sample/Shape"
  input: "while/Categorical/sample/strided_slice/stack"
  input: "while/Categorical/sample/strided_slice/stack_1"
  input: "while/Categorical/sample/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "while/Categorical/sample/concat_1/axis"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/Categorical/sample/concat_1"
  op: "ConcatV2"
  input: "while/Categorical/sample/sample_shape_1"
  input: "while/Categorical/sample/strided_slice"
  input: "while/Categorical/sample/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "while/Categorical/sample/Reshape_1"
  op: "Reshape"
  input: "while/Categorical/sample/Reshape"
  input: "while/Categorical/sample/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/StopGradient"
  op: "StopGradient"
  input: "while/Categorical/sample/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/range/start"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/range/delta"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/range"
  op: "Range"
  input: "while/range/start"
  input: "while/Reshape/shape/Enter"
  input: "while/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ExpandDims/dim"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/ExpandDims"
  op: "ExpandDims"
  input: "while/range"
  input: "while/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/mul_3"
  op: "Mul"
  input: "while/StopGradient"
  input: "while/Reshape/shape/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/add_6"
  op: "AddV2"
  input: "while/mul_3"
  input: "while/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/Reshape_1/shape"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "while/Reshape_1"
  op: "Reshape"
  input: "while/add_6"
  input: "while/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "while/GatherV2/axis"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/GatherV2"
  op: "GatherV2"
  input: "while/lstm_cell/add_1"
  input: "while/Reshape_1"
  input: "while/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "while/GatherV2_1/axis"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/GatherV2_1"
  op: "GatherV2"
  input: "while/lstm_cell/mul_2"
  input: "while/Reshape_1"
  input: "while/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "while/GatherV2_2/axis"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/GatherV2_2"
  op: "GatherV2"
  input: "while/mlp_1/latent_encoder_1/Relu"
  input: "while/Reshape_1"
  input: "while/GatherV2_2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "while/GatherV2_3/axis"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/GatherV2_3"
  op: "GatherV2"
  input: "while/lstm_cell/mul_2"
  input: "while/Reshape_1"
  input: "while/GatherV2_3/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "while/strided_slice_1/stack"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/strided_slice_1/stack_1"
  op: "Pack"
  input: "while/Reshape/shape/Enter"
  input: "^while/Identity"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "while/strided_slice_1/stack_2"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/strided_slice_1"
  op: "StridedSlice"
  input: "while/TensorArrayReadV3"
  input: "while/strided_slice_1/stack"
  input: "while/strided_slice_1/stack_1"
  input: "while/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "while/Greater/y"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/Greater"
  op: "Greater"
  input: "while/strided_slice_1"
  input: "while/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "while/LogicalAnd"
  op: "LogicalAnd"
  input: "while/LessEqual"
  input: "while/Greater"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ToFloat_1"
  op: "Cast"
  input: "while/LogicalAnd"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/Tile/multiples"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "while/Tile"
  op: "Tile"
  input: "while/LogicalAnd"
  input: "while/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "while/Select"
  op: "Select"
  input: "while/Tile"
  input: "while/GatherV2"
  input: "while/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Select_1"
  op: "Select"
  input: "while/Tile"
  input: "while/GatherV2_1"
  input: "while/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Select_2"
  op: "Select"
  input: "while/Tile"
  input: "while/GatherV2_2"
  input: "while/mlp_1/latent_encoder_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Select_3"
  op: "Select"
  input: "while/Tile"
  input: "while/GatherV2_3"
  input: "while/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_3/Max/reduction_indices"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_3/Max"
  op: "Max"
  input: "while/add_5"
  input: "while/ReduceLogSumExp_3/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "while/ReduceLogSumExp_3/IsFinite"
  op: "IsFinite"
  input: "while/ReduceLogSumExp_3/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_3/zeros_like"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_3/Select"
  op: "Select"
  input: "while/ReduceLogSumExp_3/IsFinite"
  input: "while/ReduceLogSumExp_3/Max"
  input: "while/ReduceLogSumExp_3/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_3/StopGradient"
  op: "StopGradient"
  input: "while/ReduceLogSumExp_3/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_3/Sub"
  op: "Sub"
  input: "while/add_5"
  input: "while/ReduceLogSumExp_3/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_3/Exp"
  op: "Exp"
  input: "while/ReduceLogSumExp_3/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_3/Sum/reduction_indices"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_3/Sum"
  op: "Sum"
  input: "while/ReduceLogSumExp_3/Exp"
  input: "while/ReduceLogSumExp_3/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "while/ReduceLogSumExp_3/Log"
  op: "Log"
  input: "while/ReduceLogSumExp_3/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_3/Shape"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_3/Reshape"
  op: "Reshape"
  input: "while/ReduceLogSumExp_3/StopGradient"
  input: "while/ReduceLogSumExp_3/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_3/Add"
  op: "Add"
  input: "while/ReduceLogSumExp_3/Log"
  input: "while/ReduceLogSumExp_3/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ToFloat_2/x"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "while/ToFloat_2"
  op: "Cast"
  input: "while/ToFloat_2/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Log_1"
  op: "Log"
  input: "while/ToFloat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/sub_3"
  op: "Sub"
  input: "while/ReduceLogSumExp_3/Add"
  input: "while/Log_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/sub_4/y"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/sub_4"
  op: "Sub"
  input: "while/Less/Enter"
  input: "while/sub_4/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Less_1"
  op: "Less"
  input: "while/Identity"
  input: "while/sub_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/cond/Switch"
  op: "Switch"
  input: "while/Less_1"
  input: "while/Less_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/cond/switch_t"
  op: "Identity"
  input: "while/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/cond/switch_f"
  op: "Identity"
  input: "while/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/cond/pred_id"
  op: "Identity"
  input: "while/Less_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/cond/mul"
  op: "Mul"
  input: "while/cond/mul/Switch:1"
  input: "while/cond/mul/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/cond/mul/Switch"
  op: "Switch"
  input: "while/sub_3"
  input: "while/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/sub_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/cond/mul/Switch_1"
  op: "Switch"
  input: "while/ToFloat_1"
  input: "while/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ToFloat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/cond/Switch_1"
  op: "Switch"
  input: "while/sub_3"
  input: "while/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/sub_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/cond/Merge"
  op: "Merge"
  input: "while/cond/Switch_1"
  input: "while/cond/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/add_7"
  op: "AddV2"
  input: "while/Identity_9"
  input: "while/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "while/Identity"
  input: "while/add_5"
  input: "while/Identity_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/add_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "log_weights_ta"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/add_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/TensorArrayWrite_1/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  input: "while/Identity"
  input: "while/ToFloat_1"
  input: "while/Identity_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ToFloat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "resampled_ta"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ToFloat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/strided_slice_2/stack"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "while/strided_slice_2/stack_1"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "while/strided_slice_2/stack_2"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "while/strided_slice_2"
  op: "StridedSlice"
  input: "while/ToFloat_1"
  input: "while/strided_slice_2/stack"
  input: "while/strided_slice_2/stack_1"
  input: "while/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "while/Tile_1/multiples"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "while/Tile_1"
  op: "Tile"
  input: "while/strided_slice_2"
  input: "while/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/sub_5/x"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "while/sub_5"
  op: "Sub"
  input: "while/sub_5/x"
  input: "while/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/mul_4"
  op: "Mul"
  input: "while/add_5"
  input: "while/sub_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_4/Max/reduction_indices"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_4/Max"
  op: "Max"
  input: "while/mul_4"
  input: "while/ReduceLogSumExp_4/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "while/ReduceLogSumExp_4/IsFinite"
  op: "IsFinite"
  input: "while/ReduceLogSumExp_4/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_4/zeros_like"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_4/Select"
  op: "Select"
  input: "while/ReduceLogSumExp_4/IsFinite"
  input: "while/ReduceLogSumExp_4/Max"
  input: "while/ReduceLogSumExp_4/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_4/StopGradient"
  op: "StopGradient"
  input: "while/ReduceLogSumExp_4/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_4/Sub"
  op: "Sub"
  input: "while/mul_4"
  input: "while/ReduceLogSumExp_4/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_4/Exp"
  op: "Exp"
  input: "while/ReduceLogSumExp_4/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_4/Sum/reduction_indices"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_4/Sum"
  op: "Sum"
  input: "while/ReduceLogSumExp_4/Exp"
  input: "while/ReduceLogSumExp_4/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "while/ReduceLogSumExp_4/Log"
  op: "Log"
  input: "while/ReduceLogSumExp_4/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_4/Add"
  op: "Add"
  input: "while/ReduceLogSumExp_4/Log"
  input: "while/ReduceLogSumExp_4/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/sub_6"
  op: "Sub"
  input: "while/mul_4"
  input: "while/ReduceLogSumExp_4/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/add_8/y"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/add_8"
  op: "AddV2"
  input: "while/Identity"
  input: "while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Const_4"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/NextIteration"
  op: "NextIteration"
  input: "while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/NextIteration_1"
  op: "NextIteration"
  input: "while/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/NextIteration_2"
  op: "NextIteration"
  input: "while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/NextIteration_3"
  op: "NextIteration"
  input: "while/Select_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/NextIteration_4"
  op: "NextIteration"
  input: "while/Select_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/NextIteration_5"
  op: "NextIteration"
  input: "while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/NextIteration_6"
  op: "NextIteration"
  input: "while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/NextIteration_7"
  op: "NextIteration"
  input: "while/TensorArrayWrite_1/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/NextIteration_8"
  op: "NextIteration"
  input: "while/sub_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/NextIteration_9"
  op: "NextIteration"
  input: "while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/Exit"
  op: "Exit"
  input: "while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Exit_1"
  op: "Exit"
  input: "while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Exit_2"
  op: "Exit"
  input: "while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Exit_3"
  op: "Exit"
  input: "while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Exit_4"
  op: "Exit"
  input: "while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Exit_5"
  op: "Exit"
  input: "while/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Exit_6"
  op: "Exit"
  input: "while/Switch_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Exit_7"
  op: "Exit"
  input: "while/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Exit_8"
  op: "Exit"
  input: "while/Switch_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/Exit_9"
  op: "Exit"
  input: "while/Switch_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "log_weights_ta"
  input: "while/Exit_6"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@log_weights_ta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@log_weights_ta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@log_weights_ta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayStack/range"
  op: "Range"
  input: "TensorArrayStack/range/start"
  input: "TensorArrayStack/TensorArraySizeV3"
  input: "TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@log_weights_ta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "log_weights_ta"
  input: "TensorArrayStack/range"
  input: "while/Exit_6"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@log_weights_ta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 4
        }
      }
    }
  }
}
node {
  name: "TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "resampled_ta"
  input: "while/Exit_7"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resampled_ta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resampled_ta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resampled_ta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayStack_1/range"
  op: "Range"
  input: "TensorArrayStack_1/range/start"
  input: "TensorArrayStack_1/TensorArraySizeV3"
  input: "TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resampled_ta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "resampled_ta"
  input: "TensorArrayStack_1/range"
  input: "while/Exit_7"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resampled_ta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
}
node {
  name: "transpose_3/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transpose_3"
  op: "Transpose"
  input: "TensorArrayStack/TensorArrayGatherV3"
  input: "transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "ToFloat"
  op: "Cast"
  input: "Cast"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "truediv"
  op: "RealDiv"
  input: "while/Exit_9"
  input: "ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "truediv"
  input: "Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean_1"
  op: "Mean"
  input: "while/Exit_9"
  input: "Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_ll_per_seq/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "train_ll_per_seq"
      }
    }
  }
}
node {
  name: "train_ll_per_seq"
  op: "ScalarSummary"
  input: "train_ll_per_seq/tags"
  input: "Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_ll_per_t/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "train_ll_per_t"
      }
    }
  }
}
node {
  name: "train_ll_per_t"
  op: "ScalarSummary"
  input: "train_ll_per_t/tags"
  input: "Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Neg"
  op: "Neg"
  input: "Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/f_count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_1"
  op: "Enter"
  input: "gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/Merge"
  op: "Merge"
  input: "gradients/f_count_1"
  input: "gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch"
  op: "Switch"
  input: "gradients/Merge"
  input: "while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Add/y"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add"
  op: "Add"
  input: "gradients/Switch:1"
  input: "gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration"
  op: "NextIteration"
  input: "gradients/Add"
  input: "^gradients/while/GatherV2_grad/Reshape_1/StackPushV2"
  input: "^gradients/while/Maximum_1_grad/GreaterEqual/StackPushV2"
  input: "^gradients/while/Maximum_2_grad/GreaterEqual/StackPushV2"
  input: "^gradients/while/Maximum_grad/GreaterEqual/StackPushV2"
  input: "^gradients/while/Normal/log_prob/Log_grad/Reciprocal/StackPushV2"
  input: "^gradients/while/Normal/log_prob/Square_grad/Mul/StackPushV2"
  input: "^gradients/while/Normal/log_prob/mul_grad/Mul/StackPushV2"
  input: "^gradients/while/Normal/log_prob/standardize/truediv_grad/Neg/StackPushV2"
  input: "^gradients/while/Normal/mean/mul_grad/Mul/StackPushV2"
  input: "^gradients/while/Normal/mean/mul_grad/Mul_1/StackPushV2"
  input: "^gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/StackPushV2"
  input: "^gradients/while/Normal_1/log_prob/Square_grad/Mul/StackPushV2"
  input: "^gradients/while/Normal_1/log_prob/mul_grad/Mul/StackPushV2"
  input: "^gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg/StackPushV2"
  input: "^gradients/while/Normal_1/sample/mul_grad/Mul_1/StackPushV2"
  input: "^gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/StackPushV2"
  input: "^gradients/while/Normal_2/log_prob/Square_grad/Mul/StackPushV2"
  input: "^gradients/while/Normal_2/log_prob/mul_grad/Mul/StackPushV2"
  input: "^gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg/StackPushV2"
  input: "^gradients/while/ReduceLogSumExp_3/Exp_grad/mul/StackPushV2"
  input: "^gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal/StackPushV2"
  input: "^gradients/while/ReduceLogSumExp_4/Exp_grad/mul/StackPushV2"
  input: "^gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal/StackPushV2"
  input: "^gradients/while/Select_grad/Select/StackPushV2"
  input: "^gradients/while/Softplus_1_grad/Sigmoid/StackPushV2"
  input: "^gradients/while/Softplus_2_grad/Sigmoid/StackPushV2"
  input: "^gradients/while/Softplus_grad/Sigmoid/StackPushV2"
  input: "^gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  input: "^gradients/while/cond/Merge_grad/StackPushV2"
  input: "^gradients/while/cond/mul_grad/Mul/f_sync"
  input: "^gradients/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  input: "^gradients/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  input: "^gradients/while/lstm_cell/mul_2_grad/Mul/StackPushV2"
  input: "^gradients/while/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  input: "^gradients/while/lstm_cell/mul_grad/Mul/StackPushV2"
  input: "^gradients/while/lstm_cell/mul_grad/Mul_1/StackPushV2"
  input: "^gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul/StackPushV2"
  input: "^gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul/StackPushV2"
  input: "^gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad/StackPushV2"
  input: "^gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul/StackPushV2"
  input: "^gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul/StackPushV2"
  input: "^gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/StackPushV2"
  input: "^gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul/StackPushV2"
  input: "^gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul/StackPushV2"
  input: "^gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad/StackPushV2"
  input: "^gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul/StackPushV2"
  input: "^gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul/StackPushV2"
  input: "^gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad/StackPushV2"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul/StackPushV2"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul/StackPushV2"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad/StackPushV2"
  input: "^gradients/while/mul_4_grad/Mul/StackPushV2"
  input: "^gradients/while/mul_4_grad/Mul_1/StackPushV2"
  input: "^gradients/while/mul_grad/Mul/StackPushV2"
  input: "^gradients/while/mul_grad/Mul_1/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_2"
  op: "Exit"
  input: "gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_1"
  op: "Enter"
  input: "gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/Merge_1"
  op: "Merge"
  input: "gradients/b_count_1"
  input: "gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/Merge_1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/b_count_2"
  op: "LoopCond"
  input: "gradients/GreaterEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_1"
  op: "Switch"
  input: "gradients/Merge_1"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sub"
  op: "Sub"
  input: "gradients/Switch_1:1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_1"
  op: "NextIteration"
  input: "gradients/Sub"
  input: "^gradients/while/Select_grad/Select/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_3"
  op: "Exit"
  input: "gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Neg_grad/Neg"
  op: "Neg"
  input: "gradients/Fill"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/Neg_grad/Neg"
  input: "gradients/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Tile"
  op: "Tile"
  input: "gradients/Mean_grad/Reshape"
  input: "gradients/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 4.0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/Mean_grad/Tile"
  input: "gradients/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/truediv_grad/Shape"
  input: "gradients/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/Mean_grad/truediv"
  input: "ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/truediv_grad/RealDiv"
  input: "gradients/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/truediv_grad/Sum"
  input: "gradients/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/Neg"
  op: "Neg"
  input: "while/Exit_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/truediv_grad/Neg"
  input: "ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/truediv_grad/RealDiv_1"
  input: "ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/mul"
  op: "Mul"
  input: "gradients/Mean_grad/truediv"
  input: "gradients/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/truediv_grad/mul"
  input: "gradients/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/truediv_grad/Sum_1"
  input: "gradients/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/truediv_grad/Reshape"
  input: "^gradients/truediv_grad/Reshape_1"
}
node {
  name: "gradients/truediv_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/truediv_grad/Reshape"
  input: "^gradients/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/truediv_grad/Reshape_1"
  input: "^gradients/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/truediv_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros"
  op: "Fill"
  input: "gradients/zeros/shape_as_tensor"
  input: "gradients/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_1/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_1"
  op: "Fill"
  input: "gradients/zeros_1/shape_as_tensor"
  input: "gradients/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_2/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/zeros_2/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_2"
  op: "Fill"
  input: "gradients/zeros_2/shape_as_tensor"
  input: "gradients/zeros_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_3/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/zeros_3/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_3"
  op: "Fill"
  input: "gradients/zeros_3/shape_as_tensor"
  input: "gradients/zeros_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/Exit_9_grad/b_exit"
  op: "Enter"
  input: "gradients/truediv_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Exit_6_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Exit_7_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Exit_8_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Switch_9_grad/b_switch"
  op: "Merge"
  input: "gradients/while/Exit_9_grad/b_exit"
  input: "gradients/while/Switch_9_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "gradients/while/Exit_1_grad/b_exit"
  input: "gradients/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/while/Exit_2_grad/b_exit"
  input: "gradients/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/while/Exit_3_grad/b_exit"
  input: "gradients/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Switch_8_grad/b_switch"
  op: "Merge"
  input: "gradients/while/Exit_8_grad/b_exit"
  input: "gradients/while/Switch_8_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_9_grad/Switch"
  op: "Switch"
  input: "gradients/while/Switch_9_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_9_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_9_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Merge_9_grad/Switch"
}
node {
  name: "gradients/while/Merge_9_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Merge_9_grad/Switch"
  input: "^gradients/while/Merge_9_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_9_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_9_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Merge_9_grad/Switch:1"
  input: "^gradients/while/Merge_9_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_9_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "gradients/while/Switch_1_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Merge_1_grad/Switch"
}
node {
  name: "gradients/while/Merge_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Merge_1_grad/Switch"
  input: "^gradients/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Merge_1_grad/Switch:1"
  input: "^gradients/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Merge_2_grad/Switch"
}
node {
  name: "gradients/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Merge_2_grad/Switch"
  input: "^gradients/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Merge_2_grad/Switch:1"
  input: "^gradients/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Merge_3_grad/Switch"
}
node {
  name: "gradients/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Merge_3_grad/Switch"
  input: "^gradients/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Merge_3_grad/Switch:1"
  input: "^gradients/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_8_grad/Switch"
  op: "Switch"
  input: "gradients/while/Switch_8_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_8_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_8_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Merge_8_grad/Switch"
}
node {
  name: "gradients/while/Merge_8_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Merge_8_grad/Switch"
  input: "^gradients/while/Merge_8_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_8_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_8_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Merge_8_grad/Switch:1"
  input: "^gradients/while/Merge_8_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_8_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Enter_9_grad/Exit"
  op: "Exit"
  input: "gradients/while/Merge_9_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "gradients/while/Merge_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Enter_8_grad/Exit"
  op: "Exit"
  input: "gradients/while/Merge_8_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_7_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Merge_9_grad/tuple/control_dependency_1"
}
node {
  name: "gradients/while/add_7_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Merge_9_grad/tuple/control_dependency_1"
  input: "^gradients/while/add_7_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_9_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_7_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Merge_9_grad/tuple/control_dependency_1"
  input: "^gradients/while/add_7_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_9_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Select_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Select_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/Select_grad/zeros_like"
  op: "Fill"
  input: "gradients/while/Select_grad/zeros_like/shape_as_tensor"
  input: "gradients/while/Select_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/while/Select_grad/Select"
  op: "Select"
  input: "gradients/while/Select_grad/Select/StackPopV2"
  input: "gradients/while/Merge_1_grad/tuple/control_dependency_1"
  input: "gradients/while/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Select_grad/Select/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Tile"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Select_grad/Select/f_acc"
  op: "StackV2"
  input: "gradients/while/Select_grad/Select/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Tile"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Select_grad/Select/Enter"
  op: "Enter"
  input: "gradients/while/Select_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Select_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Select_grad/Select/Enter"
  input: "while/Tile"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Select_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Select_grad/Select/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/while/Select_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Select_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Select_grad/Select/b_sync"
  op: "ControlTrigger"
  input: "^gradients/while/GatherV2_grad/Reshape_1/StackPopV2"
  input: "^gradients/while/Maximum_1_grad/GreaterEqual/StackPopV2"
  input: "^gradients/while/Maximum_2_grad/GreaterEqual/StackPopV2"
  input: "^gradients/while/Maximum_grad/GreaterEqual/StackPopV2"
  input: "^gradients/while/Normal/log_prob/Log_grad/Reciprocal/StackPopV2"
  input: "^gradients/while/Normal/log_prob/Square_grad/Mul/StackPopV2"
  input: "^gradients/while/Normal/log_prob/mul_grad/Mul/StackPopV2"
  input: "^gradients/while/Normal/log_prob/standardize/truediv_grad/Neg/StackPopV2"
  input: "^gradients/while/Normal/mean/mul_grad/Mul/StackPopV2"
  input: "^gradients/while/Normal/mean/mul_grad/Mul_1/StackPopV2"
  input: "^gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/StackPopV2"
  input: "^gradients/while/Normal_1/log_prob/Square_grad/Mul/StackPopV2"
  input: "^gradients/while/Normal_1/log_prob/mul_grad/Mul/StackPopV2"
  input: "^gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg/StackPopV2"
  input: "^gradients/while/Normal_1/sample/mul_grad/Mul_1/StackPopV2"
  input: "^gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/StackPopV2"
  input: "^gradients/while/Normal_2/log_prob/Square_grad/Mul/StackPopV2"
  input: "^gradients/while/Normal_2/log_prob/mul_grad/Mul/StackPopV2"
  input: "^gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg/StackPopV2"
  input: "^gradients/while/ReduceLogSumExp_3/Exp_grad/mul/StackPopV2"
  input: "^gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal/StackPopV2"
  input: "^gradients/while/ReduceLogSumExp_4/Exp_grad/mul/StackPopV2"
  input: "^gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal/StackPopV2"
  input: "^gradients/while/Select_grad/Select/StackPopV2"
  input: "^gradients/while/Softplus_1_grad/Sigmoid/StackPopV2"
  input: "^gradients/while/Softplus_2_grad/Sigmoid/StackPopV2"
  input: "^gradients/while/Softplus_grad/Sigmoid/StackPopV2"
  input: "^gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  input: "^gradients/while/cond/Merge_grad/StackPopV2"
  input: "^gradients/while/cond/mul_grad/Mul/StackPopV2"
  input: "^gradients/while/cond/mul_grad/Mul_1/StackPopV2"
  input: "^gradients/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "^gradients/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "^gradients/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "^gradients/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "^gradients/while/lstm_cell/mul_grad/Mul/StackPopV2"
  input: "^gradients/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  input: "^gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul/StackPopV2"
  input: "^gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul/StackPopV2"
  input: "^gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad/StackPopV2"
  input: "^gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul/StackPopV2"
  input: "^gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul/StackPopV2"
  input: "^gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/StackPopV2"
  input: "^gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul/StackPopV2"
  input: "^gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul/StackPopV2"
  input: "^gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad/StackPopV2"
  input: "^gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul/StackPopV2"
  input: "^gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul/StackPopV2"
  input: "^gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad/StackPopV2"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul/StackPopV2"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul/StackPopV2"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad/StackPopV2"
  input: "^gradients/while/mul_4_grad/Mul/StackPopV2"
  input: "^gradients/while/mul_4_grad/Mul_1/StackPopV2"
  input: "^gradients/while/mul_grad/Mul/StackPopV2"
  input: "^gradients/while/mul_grad/Mul_1/StackPopV2"
}
node {
  name: "gradients/while/Select_grad/Select_1"
  op: "Select"
  input: "gradients/while/Select_grad/Select/StackPopV2"
  input: "gradients/while/Select_grad/zeros_like"
  input: "gradients/while/Merge_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Select_grad/Select"
  input: "^gradients/while/Select_grad/Select_1"
}
node {
  name: "gradients/while/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Select_grad/Select"
  input: "^gradients/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Select_grad/Select_1"
  input: "^gradients/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Select_1_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Select_1_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/Select_1_grad/zeros_like"
  op: "Fill"
  input: "gradients/while/Select_1_grad/zeros_like/shape_as_tensor"
  input: "gradients/while/Select_1_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/while/Select_1_grad/Select"
  op: "Select"
  input: "gradients/while/Select_grad/Select/StackPopV2"
  input: "gradients/while/Merge_2_grad/tuple/control_dependency_1"
  input: "gradients/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Select_1_grad/Select_1"
  op: "Select"
  input: "gradients/while/Select_grad/Select/StackPopV2"
  input: "gradients/while/Select_1_grad/zeros_like"
  input: "gradients/while/Merge_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Select_1_grad/Select"
  input: "^gradients/while/Select_1_grad/Select_1"
}
node {
  name: "gradients/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Select_1_grad/Select"
  input: "^gradients/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Select_1_grad/Select_1"
  input: "^gradients/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Select_2_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Select_2_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/Select_2_grad/zeros_like"
  op: "Fill"
  input: "gradients/while/Select_2_grad/zeros_like/shape_as_tensor"
  input: "gradients/while/Select_2_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/while/Select_2_grad/Select"
  op: "Select"
  input: "gradients/while/Select_grad/Select/StackPopV2"
  input: "gradients/while/Merge_3_grad/tuple/control_dependency_1"
  input: "gradients/while/Select_2_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Select_2_grad/Select_1"
  op: "Select"
  input: "gradients/while/Select_grad/Select/StackPopV2"
  input: "gradients/while/Select_2_grad/zeros_like"
  input: "gradients/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Select_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Select_2_grad/Select"
  input: "^gradients/while/Select_2_grad/Select_1"
}
node {
  name: "gradients/while/Select_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Select_2_grad/Select"
  input: "^gradients/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Select_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Select_2_grad/Select_1"
  input: "^gradients/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_6_grad/BroadcastGradientArgs/s0"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/sub_6_grad/BroadcastGradientArgs/s1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/sub_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/sub_6_grad/BroadcastGradientArgs/s0"
  input: "gradients/while/sub_6_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_6_grad/Neg"
  op: "Neg"
  input: "gradients/while/Merge_8_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_6_grad/Sum/reduction_indices"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/sub_6_grad/Sum"
  op: "Sum"
  input: "gradients/while/sub_6_grad/Neg"
  input: "gradients/while/sub_6_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/sub_6_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/sub_6_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/sub_6_grad/Sum"
  input: "gradients/while/sub_6_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_6_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Merge_8_grad/tuple/control_dependency_1"
  input: "^gradients/while/sub_6_grad/Reshape"
}
node {
  name: "gradients/while/sub_6_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Merge_8_grad/tuple/control_dependency_1"
  input: "^gradients/while/sub_6_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_8_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_6_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/sub_6_grad/Reshape"
  input: "^gradients/while/sub_6_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/sub_6_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/cond/Merge_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/cond/pred_id"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/cond/Merge_grad/f_acc"
  op: "StackV2"
  input: "gradients/while/cond/Merge_grad/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/cond/pred_id"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/cond/Merge_grad/Enter"
  op: "Enter"
  input: "gradients/while/cond/Merge_grad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/cond/Merge_grad/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/cond/Merge_grad/Enter"
  input: "while/cond/pred_id"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/cond/Merge_grad/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/cond/Merge_grad/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/while/cond/Merge_grad/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/cond/Merge_grad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/while/add_7_grad/tuple/control_dependency_1"
  input: "gradients/while/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_9_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/while/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/cond/Merge_grad/cond_grad"
  input: "^gradients/while/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_9_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/cond/Merge_grad/cond_grad:1"
  input: "^gradients/while/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_9_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000\000\000\000\000@\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/Cast"
  op: "Cast"
  input: "gradients/while/GatherV2_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/Size"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/ExpandDims/dim"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/while/GatherV2_grad/Size"
  input: "gradients/while/GatherV2_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/strided_slice/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/strided_slice/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/strided_slice/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/while/GatherV2_grad/Cast"
  input: "gradients/while/GatherV2_grad/strided_slice/stack"
  input: "gradients/while/GatherV2_grad/strided_slice/stack_1"
  input: "gradients/while/GatherV2_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/concat/axis"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/concat"
  op: "ConcatV2"
  input: "gradients/while/GatherV2_grad/ExpandDims"
  input: "gradients/while/GatherV2_grad/strided_slice"
  input: "gradients/while/GatherV2_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Select_grad/tuple/control_dependency"
  input: "gradients/while/GatherV2_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/GatherV2_grad/Reshape_1/StackPopV2"
  input: "gradients/while/GatherV2_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/Reshape_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/Reshape_1/f_acc"
  op: "StackV2"
  input: "gradients/while/GatherV2_grad/Reshape_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/Reshape_1/Enter"
  op: "Enter"
  input: "gradients/while/GatherV2_grad/Reshape_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/Reshape_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/GatherV2_grad/Reshape_1/Enter"
  input: "while/Reshape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/Reshape_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/GatherV2_grad/Reshape_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/Reshape_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/GatherV2_grad/Reshape_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/GatherV2_1_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000\000\000\000\000@\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_1_grad/Cast"
  op: "Cast"
  input: "gradients/while/GatherV2_1_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_1_grad/Size"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_1_grad/ExpandDims/dim"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_1_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/while/GatherV2_1_grad/Size"
  input: "gradients/while/GatherV2_1_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_1_grad/strided_slice/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_1_grad/strided_slice/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_1_grad/strided_slice/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_1_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/while/GatherV2_1_grad/Cast"
  input: "gradients/while/GatherV2_1_grad/strided_slice/stack"
  input: "gradients/while/GatherV2_1_grad/strided_slice/stack_1"
  input: "gradients/while/GatherV2_1_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/while/GatherV2_1_grad/concat/axis"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_1_grad/concat"
  op: "ConcatV2"
  input: "gradients/while/GatherV2_1_grad/ExpandDims"
  input: "gradients/while/GatherV2_1_grad/strided_slice"
  input: "gradients/while/GatherV2_1_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Select_1_grad/tuple/control_dependency"
  input: "gradients/while/GatherV2_1_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/GatherV2_grad/Reshape_1/StackPopV2"
  input: "gradients/while/GatherV2_1_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_2_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000\000\000\000\000@\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_2_grad/Cast"
  op: "Cast"
  input: "gradients/while/GatherV2_2_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_2_grad/Size"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_2_grad/ExpandDims/dim"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_2_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/while/GatherV2_2_grad/Size"
  input: "gradients/while/GatherV2_2_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_2_grad/strided_slice/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_2_grad/strided_slice/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_2_grad/strided_slice/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_2_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/while/GatherV2_2_grad/Cast"
  input: "gradients/while/GatherV2_2_grad/strided_slice/stack"
  input: "gradients/while/GatherV2_2_grad/strided_slice/stack_1"
  input: "gradients/while/GatherV2_2_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/while/GatherV2_2_grad/concat/axis"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_2_grad/concat"
  op: "ConcatV2"
  input: "gradients/while/GatherV2_2_grad/ExpandDims"
  input: "gradients/while/GatherV2_2_grad/strided_slice"
  input: "gradients/while/GatherV2_2_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Select_2_grad/tuple/control_dependency"
  input: "gradients/while/GatherV2_2_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/GatherV2_grad/Reshape_1/StackPopV2"
  input: "gradients/while/GatherV2_2_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/sub_6_grad/tuple/control_dependency_1"
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/sub_6_grad/tuple/control_dependency_1"
  input: "^gradients/while/ReduceLogSumExp_4/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/sub_6_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/sub_6_grad/tuple/control_dependency_1"
  input: "^gradients/while/ReduceLogSumExp_4/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/sub_6_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Switch_9_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/while/add_7_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/Switch_2"
  op: "Switch"
  input: "gradients/Const"
  input: "gradients/while/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Const"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/cond/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/while/cond/Merge_grad/tuple/control_dependency"
  input: "gradients/Switch_2:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul"
  op: "Mul"
  input: "gradients/while/cond/Merge_grad/tuple/control_dependency_1"
  input: "gradients/while/cond/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ToFloat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/while/cond/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ToFloat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/while/cond/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/cond/mul_grad/Mul/StackPushV2/Switch:1"
  input: "while/cond/mul/Switch_1:1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul/StackPushV2/Switch"
  op: "Switch"
  input: "gradients/while/cond/mul_grad/Mul/Enter"
  input: "while/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/cond/mul_grad/Mul/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul/f_sync"
  op: "ControlTrigger"
  input: "^gradients/while/cond/mul_grad/Mul/StackPushV2"
  input: "^gradients/while/cond/mul_grad/Mul_1/StackPushV2"
}
node {
  name: "gradients/while/cond/mul_grad/Mul/Switch"
  op: "Switch"
  input: "gradients/while/cond/mul_grad/Mul/Switch/Enter"
  input: "gradients/while/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ToFloat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul/Switch/Enter"
  op: "Enter"
  input: "gradients/while/cond/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ToFloat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/cond/mul_grad/Mul/Switch:1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/while/cond/Merge_grad/tuple/control_dependency_1"
  input: "gradients/while/cond/mul_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/sub_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/cond/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/sub_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/while/cond/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/cond/mul_grad/Mul_1/StackPushV2/Switch:1"
  input: "while/cond/mul/Switch:1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul_1/StackPushV2/Switch"
  op: "Switch"
  input: "gradients/while/cond/mul_grad/Mul_1/Enter"
  input: "while/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/cond/mul_grad/Mul_1/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul_1/Switch"
  op: "Switch"
  input: "gradients/while/cond/mul_grad/Mul_1/Switch/Enter"
  input: "gradients/while/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/sub_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul_1/Switch/Enter"
  op: "Enter"
  input: "gradients/while/cond/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/sub_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/cond/mul_grad/Mul_1/Switch:1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/cond/mul_grad/Mul"
  input: "^gradients/while/cond/mul_grad/Mul_1"
}
node {
  name: "gradients/while/cond/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/cond/mul_grad/Mul"
  input: "^gradients/while/cond/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/cond/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/cond/mul_grad/Mul_1"
  input: "^gradients/while/cond/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/cond/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal/StackPopV2"
  input: "^gradients/while/ReduceLogSumExp_4/Add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ReduceLogSumExp_4/Sum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal/f_acc"
  op: "StackV2"
  input: "gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ReduceLogSumExp_4/Sum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal/Enter"
  op: "Enter"
  input: "gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal/Enter"
  input: "while/ReduceLogSumExp_4/Sum"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Log_grad/mul"
  op: "Mul"
  input: "gradients/while/ReduceLogSumExp_4/Add_grad/tuple/control_dependency"
  input: "gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Const_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/Switch_3"
  op: "Switch"
  input: "gradients/Const_1"
  input: "gradients/while/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Const_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/cond/mul/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/Switch_3"
  input: "gradients/while/cond/mul_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/Cast/x"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/Cast_1/x"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/Size"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/add"
  op: "AddV2"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/Cast_1/x"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/add"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/range/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/range/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/range"
  op: "Range"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/range/start"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/Size"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/Fill/value"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/Shape"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/range"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/mod"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/Cast/x"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/Maximum/x"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/Maximum/y"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/Maximum/x"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/floordiv/x"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/floordiv/x"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/ReduceLogSumExp_4/Log_grad/mul"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/Tile/multiples"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/Reshape"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN"
  op: "AddN"
  input: "gradients/while/cond/Switch_1_grad/cond_grad"
  input: "gradients/while/cond/mul/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/cond/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_3_grad/BroadcastGradientArgs/s0"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/while/sub_3_grad/BroadcastGradientArgs/s1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/sub_3_grad/BroadcastGradientArgs/s0"
  input: "gradients/while/sub_3_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_3_grad/Neg"
  op: "Neg"
  input: "gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_3_grad/Sum/reduction_indices"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/sub_3_grad/Sum"
  op: "Sum"
  input: "gradients/while/sub_3_grad/Neg"
  input: "gradients/while/sub_3_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/sub_3_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/sub_3_grad/Sum"
  input: "gradients/while/sub_3_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/AddN"
  input: "^gradients/while/sub_3_grad/Reshape"
}
node {
  name: "gradients/while/sub_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/AddN"
  input: "^gradients/while/sub_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/cond/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/sub_3_grad/Reshape"
  input: "^gradients/while/sub_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/sub_3_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul"
  op: "Mul"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/Tile"
  input: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ReduceLogSumExp_4/Exp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul/f_acc"
  op: "StackV2"
  input: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ReduceLogSumExp_4/Exp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul/Enter"
  op: "Enter"
  input: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul/Enter"
  input: "while/ReduceLogSumExp_4/Exp"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/sub_3_grad/tuple/control_dependency"
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/sub_3_grad/tuple/control_dependency"
  input: "^gradients/while/ReduceLogSumExp_3/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/cond/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/sub_3_grad/tuple/control_dependency"
  input: "^gradients/while/ReduceLogSumExp_3/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/cond/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sub_grad/Neg"
  op: "Neg"
  input: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sub_grad/Sum/reduction_indices"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sub_grad/Sum"
  op: "Sum"
  input: "gradients/while/ReduceLogSumExp_4/Sub_grad/Neg"
  input: "gradients/while/ReduceLogSumExp_4/Sub_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sub_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/ReduceLogSumExp_4/Sub_grad/Sum"
  input: "gradients/while/ReduceLogSumExp_4/Sub_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/ReduceLogSumExp_4/Exp_grad/mul"
  input: "^gradients/while/ReduceLogSumExp_4/Sub_grad/Reshape"
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul"
  input: "^gradients/while/ReduceLogSumExp_4/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_4/Exp_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/ReduceLogSumExp_4/Sub_grad/Reshape"
  input: "^gradients/while/ReduceLogSumExp_4/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_4/Sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal/StackPopV2"
  input: "^gradients/while/ReduceLogSumExp_3/Add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ReduceLogSumExp_3/Sum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal/f_acc"
  op: "StackV2"
  input: "gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ReduceLogSumExp_3/Sum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal/Enter"
  op: "Enter"
  input: "gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal/Enter"
  input: "while/ReduceLogSumExp_3/Sum"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Log_grad/mul"
  op: "Mul"
  input: "gradients/while/ReduceLogSumExp_3/Add_grad/tuple/control_dependency"
  input: "gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Reshape_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/ReduceLogSumExp_3/Add_grad/tuple/control_dependency_1"
  input: "gradients/while/ReduceLogSumExp_3/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_1"
  op: "AddN"
  input: "gradients/while/ReduceLogSumExp_4/Add_grad/tuple/control_dependency_1"
  input: "gradients/while/ReduceLogSumExp_4/Sub_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/sub_6_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sum_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/ReduceLogSumExp_3/Log_grad/mul"
  input: "gradients/while/ReduceLogSumExp_3/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sum_grad/Tile/multiples"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/while/ReduceLogSumExp_3/Sum_grad/Reshape"
  input: "gradients/while/ReduceLogSumExp_3/Sum_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul"
  op: "Mul"
  input: "gradients/while/ReduceLogSumExp_3/Sum_grad/Tile"
  input: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ReduceLogSumExp_3/Exp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul/f_acc"
  op: "StackV2"
  input: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ReduceLogSumExp_3/Exp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul/Enter"
  op: "Enter"
  input: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul/Enter"
  input: "while/ReduceLogSumExp_3/Exp"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sub_grad/Neg"
  op: "Neg"
  input: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sub_grad/Sum/reduction_indices"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sub_grad/Sum"
  op: "Sum"
  input: "gradients/while/ReduceLogSumExp_3/Sub_grad/Neg"
  input: "gradients/while/ReduceLogSumExp_3/Sub_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sub_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/ReduceLogSumExp_3/Sub_grad/Sum"
  input: "gradients/while/ReduceLogSumExp_3/Sub_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/ReduceLogSumExp_3/Exp_grad/mul"
  input: "^gradients/while/ReduceLogSumExp_3/Sub_grad/Reshape"
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul"
  input: "^gradients/while/ReduceLogSumExp_3/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_3/Exp_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/ReduceLogSumExp_3/Sub_grad/Reshape"
  input: "^gradients/while/ReduceLogSumExp_3/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_3/Sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_2"
  op: "AddN"
  input: "gradients/while/ReduceLogSumExp_3/Reshape_grad/Reshape"
  input: "gradients/while/ReduceLogSumExp_3/Sub_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_3/Reshape_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_3"
  op: "AddN"
  input: "gradients/while/sub_6_grad/tuple/control_dependency"
  input: "gradients/while/ReduceLogSumExp_4/Sub_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_8_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/Mul"
  op: "Mul"
  input: "gradients/AddN_3"
  input: "gradients/while/mul_4_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/sub_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/while/mul_4_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/sub_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mul_4_grad/Mul/Enter"
  input: "while/sub_5"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mul_4_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/Mul_1"
  op: "Mul"
  input: "gradients/AddN_3"
  input: "gradients/while/mul_4_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/add_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/mul_4_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/add_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/while/mul_4_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mul_4_grad/Mul_1/Enter"
  input: "while/add_5"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mul_4_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mul_4_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mul_4_grad/Mul"
  input: "^gradients/while/mul_4_grad/Mul_1"
}
node {
  name: "gradients/while/mul_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mul_4_grad/Mul"
  input: "^gradients/while/mul_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mul_4_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mul_4_grad/Mul_1"
  input: "^gradients/while/mul_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mul_4_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_4"
  op: "AddN"
  input: "gradients/while/ReduceLogSumExp_3/Sub_grad/tuple/control_dependency"
  input: "gradients/while/mul_4_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_3/Exp_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_5_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/AddN_4"
}
node {
  name: "gradients/while/add_5_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/AddN_4"
  input: "^gradients/while/add_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_3/Exp_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_5_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/AddN_4"
  input: "^gradients/while/add_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_3/Exp_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Reshape_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "gradients/while/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/add_5_grad/tuple/control_dependency_1"
  input: "gradients/while/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Switch_8_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/while/add_5_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mul_grad/Mul"
  op: "Mul"
  input: "gradients/while/Reshape_grad/Reshape"
  input: "gradients/while/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/while/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mul_grad/Mul/Enter"
  input: "while/TensorArrayReadV3"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/while/Reshape_grad/Reshape"
  input: "gradients/while/mul_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/while/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mul_grad/Mul_1/Enter"
  input: "while/sub"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mul_grad/Mul"
  input: "^gradients/while/mul_grad/Mul_1"
}
node {
  name: "gradients/while/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mul_grad/Mul"
  input: "^gradients/while/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mul_grad/Mul_1"
  input: "^gradients/while/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_grad/Neg"
  op: "Neg"
  input: "gradients/while/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mul_grad/tuple/control_dependency"
  input: "^gradients/while/sub_grad/Neg"
}
node {
  name: "gradients/while/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mul_grad/tuple/control_dependency"
  input: "^gradients/while/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/sub_grad/Neg"
  input: "^gradients/while/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/sub_grad/tuple/control_dependency"
}
node {
  name: "gradients/while/add_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/sub_grad/tuple/control_dependency"
  input: "^gradients/while/add_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/sub_grad/tuple/control_dependency"
  input: "^gradients/while/add_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/Cast/x"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/Cast_1/x"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/Size"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/add"
  op: "AddV2"
  input: "gradients/while/Sum_2_grad/Cast_1/x"
  input: "gradients/while/Sum_2_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/mod"
  op: "FloorMod"
  input: "gradients/while/Sum_2_grad/add"
  input: "gradients/while/Sum_2_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/range/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/range/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/range"
  op: "Range"
  input: "gradients/while/Sum_2_grad/range/start"
  input: "gradients/while/Sum_2_grad/Size"
  input: "gradients/while/Sum_2_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/Fill/value"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/Fill"
  op: "Fill"
  input: "gradients/while/Sum_2_grad/Shape"
  input: "gradients/while/Sum_2_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/while/Sum_2_grad/range"
  input: "gradients/while/Sum_2_grad/mod"
  input: "gradients/while/Sum_2_grad/Cast/x"
  input: "gradients/while/Sum_2_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/Maximum/x"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/Maximum/y"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/Maximum"
  op: "Maximum"
  input: "gradients/while/Sum_2_grad/Maximum/x"
  input: "gradients/while/Sum_2_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/floordiv/x"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/while/Sum_2_grad/floordiv/x"
  input: "gradients/while/Sum_2_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/sub_grad/tuple/control_dependency_1"
  input: "gradients/while/Sum_2_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/Tile/multiples"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/Tile"
  op: "Tile"
  input: "gradients/while/Sum_2_grad/Reshape"
  input: "gradients/while/Sum_2_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_1_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/add_4_grad/tuple/control_dependency"
  input: "gradients/while/Sum_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_1_grad/Tile/multiples"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Sum_1_grad/Tile"
  op: "Tile"
  input: "gradients/while/Sum_1_grad/Reshape"
  input: "gradients/while/Sum_1_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/Cast/x"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/Cast_1/x"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/Size"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/add"
  op: "AddV2"
  input: "gradients/while/Sum_grad/Cast_1/x"
  input: "gradients/while/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/while/Sum_grad/add"
  input: "gradients/while/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/range/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/range/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/range"
  op: "Range"
  input: "gradients/while/Sum_grad/range/start"
  input: "gradients/while/Sum_grad/Size"
  input: "gradients/while/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/Fill/value"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/while/Sum_grad/Shape"
  input: "gradients/while/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/while/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/while/Sum_grad/range"
  input: "gradients/while/Sum_grad/mod"
  input: "gradients/while/Sum_grad/Cast/x"
  input: "gradients/while/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/Maximum/x"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/Maximum/y"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/while/Sum_grad/Maximum/x"
  input: "gradients/while/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/floordiv/x"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/while/Sum_grad/floordiv/x"
  input: "gradients/while/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/add_4_grad/tuple/control_dependency_1"
  input: "gradients/while/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/Tile/multiples"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/while/Sum_grad/Reshape"
  input: "gradients/while/Sum_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/sub_grad/Neg"
  op: "Neg"
  input: "gradients/while/Sum_2_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal_1/log_prob/sub_grad/Neg"
  input: "^gradients/while/Sum_2_grad/Tile"
}
node {
  name: "gradients/while/Normal_1/log_prob/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Sum_2_grad/Tile"
  input: "^gradients/while/Normal_1/log_prob/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_2_grad/Tile"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal_1/log_prob/sub_grad/Neg"
  input: "^gradients/while/Normal_1/log_prob/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/log_prob/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/sub_grad/Neg"
  op: "Neg"
  input: "gradients/while/Sum_1_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal/log_prob/sub_grad/Neg"
  input: "^gradients/while/Sum_1_grad/Tile"
}
node {
  name: "gradients/while/Normal/log_prob/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Sum_1_grad/Tile"
  input: "^gradients/while/Normal/log_prob/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_1_grad/Tile"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal/log_prob/sub_grad/Neg"
  input: "^gradients/while/Normal/log_prob/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal/log_prob/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/sub_grad/Neg"
  op: "Neg"
  input: "gradients/while/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal_2/log_prob/sub_grad/Neg"
  input: "^gradients/while/Sum_grad/Tile"
}
node {
  name: "gradients/while/Normal_2/log_prob/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Sum_grad/Tile"
  input: "^gradients/while/Normal_2/log_prob/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_grad/Tile"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal_2/log_prob/sub_grad/Neg"
  input: "^gradients/while/Normal_2/log_prob/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_2/log_prob/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/BroadcastGradientArgs/s0"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/BroadcastGradientArgs/s1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/Normal_1/log_prob/mul_grad/BroadcastGradientArgs/s0"
  input: "gradients/while/Normal_1/log_prob/mul_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/Mul"
  op: "Mul"
  input: "gradients/while/Normal_1/log_prob/sub_grad/tuple/control_dependency"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_1/log_prob/Square"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_1/log_prob/Square"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Mul/Enter"
  input: "while/Normal_1/log_prob/Square"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/Sum/reduction_indices"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/Sum"
  op: "Sum"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Mul"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Sum"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Mul_1/Const"
  input: "gradients/while/Normal_1/log_prob/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/Mul_1/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal_1/log_prob/mul_grad/Mul_1"
  input: "^gradients/while/Normal_1/log_prob/mul_grad/Reshape"
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Reshape"
  input: "^gradients/while/Normal_1/log_prob/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/log_prob/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Mul_1"
  input: "^gradients/while/Normal_1/log_prob/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/log_prob/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/add_grad/Sum/reduction_indices"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/add_grad/Sum"
  op: "Sum"
  input: "gradients/while/Normal_1/log_prob/sub_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal_1/log_prob/add_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/add_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Normal_1/log_prob/add_grad/Sum"
  input: "gradients/while/Normal_1/log_prob/add_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal_1/log_prob/add_grad/Reshape"
  input: "^gradients/while/Normal_1/log_prob/sub_grad/tuple/control_dependency_1"
}
node {
  name: "gradients/while/Normal_1/log_prob/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal_1/log_prob/add_grad/Reshape"
  input: "^gradients/while/Normal_1/log_prob/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/log_prob/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal_1/log_prob/sub_grad/tuple/control_dependency_1"
  input: "^gradients/while/Normal_1/log_prob/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/log_prob/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/Mul"
  op: "Mul"
  input: "gradients/while/Normal/log_prob/sub_grad/tuple/control_dependency"
  input: "gradients/while/Normal/log_prob/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal/log_prob/Square"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal/log_prob/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal/log_prob/Square"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/while/Normal/log_prob/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal/log_prob/mul_grad/Mul/Enter"
  input: "while/Normal/log_prob/Square"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal/log_prob/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal/log_prob/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/Sum/reduction_indices"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/Sum"
  op: "Sum"
  input: "gradients/while/Normal/log_prob/mul_grad/Mul"
  input: "gradients/while/Normal/log_prob/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Normal/log_prob/mul_grad/Sum"
  input: "gradients/while/Normal/log_prob/mul_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/while/Normal/log_prob/mul_grad/Mul_1/Const"
  input: "gradients/while/Normal/log_prob/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/Mul_1/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal/log_prob/mul_grad/Mul_1"
  input: "^gradients/while/Normal/log_prob/mul_grad/Reshape"
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal/log_prob/mul_grad/Reshape"
  input: "^gradients/while/Normal/log_prob/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal/log_prob/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal/log_prob/mul_grad/Mul_1"
  input: "^gradients/while/Normal/log_prob/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal/log_prob/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/add_grad/Sum/reduction_indices"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/add_grad/Sum"
  op: "Sum"
  input: "gradients/while/Normal/log_prob/sub_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal/log_prob/add_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/add_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Normal/log_prob/add_grad/Sum"
  input: "gradients/while/Normal/log_prob/add_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal/log_prob/add_grad/Reshape"
  input: "^gradients/while/Normal/log_prob/sub_grad/tuple/control_dependency_1"
}
node {
  name: "gradients/while/Normal/log_prob/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal/log_prob/add_grad/Reshape"
  input: "^gradients/while/Normal/log_prob/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal/log_prob/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal/log_prob/sub_grad/tuple/control_dependency_1"
  input: "^gradients/while/Normal/log_prob/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal/log_prob/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/BroadcastGradientArgs/s0"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/BroadcastGradientArgs/s1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/Normal_2/log_prob/mul_grad/BroadcastGradientArgs/s0"
  input: "gradients/while/Normal_2/log_prob/mul_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/Mul"
  op: "Mul"
  input: "gradients/while/Normal_2/log_prob/sub_grad/tuple/control_dependency"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_2/log_prob/Square"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_2/log_prob/Square"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Mul/Enter"
  input: "while/Normal_2/log_prob/Square"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/Sum/reduction_indices"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/Sum"
  op: "Sum"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Mul"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Sum"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Mul_1/Const"
  input: "gradients/while/Normal_2/log_prob/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/Mul_1/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal_2/log_prob/mul_grad/Mul_1"
  input: "^gradients/while/Normal_2/log_prob/mul_grad/Reshape"
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Reshape"
  input: "^gradients/while/Normal_2/log_prob/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_2/log_prob/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Mul_1"
  input: "^gradients/while/Normal_2/log_prob/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_2/log_prob/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/add_grad/Sum/reduction_indices"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/add_grad/Sum"
  op: "Sum"
  input: "gradients/while/Normal_2/log_prob/sub_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal_2/log_prob/add_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/add_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Normal_2/log_prob/add_grad/Sum"
  input: "gradients/while/Normal_2/log_prob/add_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal_2/log_prob/add_grad/Reshape"
  input: "^gradients/while/Normal_2/log_prob/sub_grad/tuple/control_dependency_1"
}
node {
  name: "gradients/while/Normal_2/log_prob/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal_2/log_prob/add_grad/Reshape"
  input: "^gradients/while/Normal_2/log_prob/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_2/log_prob/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal_2/log_prob/sub_grad/tuple/control_dependency_1"
  input: "^gradients/while/Normal_2/log_prob/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_2/log_prob/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Square_grad/Const"
  op: "Const"
  input: "^gradients/while/Normal_1/log_prob/mul_grad/tuple/control_dependency_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Square_grad/Mul"
  op: "Mul"
  input: "gradients/while/Normal_1/log_prob/Square_grad/Mul/StackPopV2"
  input: "gradients/while/Normal_1/log_prob/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Square_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_1/log_prob/standardize/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Square_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal_1/log_prob/Square_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_1/log_prob/standardize/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Square_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/while/Normal_1/log_prob/Square_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Square_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal_1/log_prob/Square_grad/Mul/Enter"
  input: "while/Normal_1/log_prob/standardize/truediv"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Square_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal_1/log_prob/Square_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Square_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal_1/log_prob/Square_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Square_grad/Mul_1"
  op: "Mul"
  input: "gradients/while/Normal_1/log_prob/mul_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal_1/log_prob/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/StackPopV2"
  input: "^gradients/while/Normal_1/log_prob/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_1/scale"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_1/scale"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/Enter"
  op: "Enter"
  input: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/Enter"
  input: "while/Normal_1/scale"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Log_grad/mul"
  op: "Mul"
  input: "gradients/while/Normal_1/log_prob/add_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Square_grad/Const"
  op: "Const"
  input: "^gradients/while/Normal/log_prob/mul_grad/tuple/control_dependency_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Square_grad/Mul"
  op: "Mul"
  input: "gradients/while/Normal/log_prob/Square_grad/Mul/StackPopV2"
  input: "gradients/while/Normal/log_prob/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Square_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal/log_prob/standardize/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Square_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal/log_prob/Square_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal/log_prob/standardize/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Square_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/while/Normal/log_prob/Square_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Square_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal/log_prob/Square_grad/Mul/Enter"
  input: "while/Normal/log_prob/standardize/truediv"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Square_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal/log_prob/Square_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Square_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal/log_prob/Square_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Square_grad/Mul_1"
  op: "Mul"
  input: "gradients/while/Normal/log_prob/mul_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal/log_prob/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/StackPopV2"
  input: "^gradients/while/Normal/log_prob/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal/scale"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal/scale"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/Enter"
  op: "Enter"
  input: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/Enter"
  input: "while/Normal/scale"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Log_grad/mul"
  op: "Mul"
  input: "gradients/while/Normal/log_prob/add_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal/log_prob/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Square_grad/Const"
  op: "Const"
  input: "^gradients/while/Normal_2/log_prob/mul_grad/tuple/control_dependency_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Square_grad/Mul"
  op: "Mul"
  input: "gradients/while/Normal_2/log_prob/Square_grad/Mul/StackPopV2"
  input: "gradients/while/Normal_2/log_prob/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Square_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_2/log_prob/standardize/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Square_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal_2/log_prob/Square_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_2/log_prob/standardize/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Square_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/while/Normal_2/log_prob/Square_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Square_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal_2/log_prob/Square_grad/Mul/Enter"
  input: "while/Normal_2/log_prob/standardize/truediv"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Square_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal_2/log_prob/Square_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Square_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal_2/log_prob/Square_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Square_grad/Mul_1"
  op: "Mul"
  input: "gradients/while/Normal_2/log_prob/mul_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal_2/log_prob/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/StackPopV2"
  input: "^gradients/while/Normal_2/log_prob/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_2/scale"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_2/scale"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/Enter"
  op: "Enter"
  input: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/Enter"
  input: "while/Normal_2/scale"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Log_grad/mul"
  op: "Mul"
  input: "gradients/while/Normal_2/log_prob/add_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Shape"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/while/Normal_1/log_prob/Square_grad/Mul_1"
  input: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/RealDiv"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Sum"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg"
  op: "Neg"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_1/log_prob/standardize/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_1/log_prob/standardize/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg/Enter"
  op: "Enter"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg/Enter"
  input: "while/Normal_1/log_prob/standardize/sub"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg"
  input: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/RealDiv_1"
  input: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/mul"
  op: "Mul"
  input: "gradients/while/Normal_1/log_prob/Square_grad/Mul_1"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/mul"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Sum_1"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal_1/log_prob/standardize/truediv_grad/Reshape"
  input: "^gradients/while/Normal_1/log_prob/standardize/truediv_grad/Reshape_1"
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Reshape"
  input: "^gradients/while/Normal_1/log_prob/standardize/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/log_prob/standardize/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Reshape_1"
  input: "^gradients/while/Normal_1/log_prob/standardize/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/log_prob/standardize/truediv_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Shape"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/while/Normal/log_prob/Square_grad/Mul_1"
  input: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/RealDiv"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Sum"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/Neg"
  op: "Neg"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Neg/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/Neg/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal/log_prob/standardize/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/Neg/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Neg/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal/log_prob/standardize/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/Neg/Enter"
  op: "Enter"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/Neg/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Neg/Enter"
  input: "while/Normal/log_prob/standardize/sub"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/Neg/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Neg/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/Neg/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Neg"
  input: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/RealDiv_1"
  input: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/mul"
  op: "Mul"
  input: "gradients/while/Normal/log_prob/Square_grad/Mul_1"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/mul"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Sum_1"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal/log_prob/standardize/truediv_grad/Reshape"
  input: "^gradients/while/Normal/log_prob/standardize/truediv_grad/Reshape_1"
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Reshape"
  input: "^gradients/while/Normal/log_prob/standardize/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal/log_prob/standardize/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Reshape_1"
  input: "^gradients/while/Normal/log_prob/standardize/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal/log_prob/standardize/truediv_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Shape"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/while/Normal_2/log_prob/Square_grad/Mul_1"
  input: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/RealDiv"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Sum"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg"
  op: "Neg"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_2/log_prob/standardize/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_2/log_prob/standardize/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg/Enter"
  op: "Enter"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg/Enter"
  input: "while/Normal_2/log_prob/standardize/sub"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg"
  input: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/RealDiv_1"
  input: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/mul"
  op: "Mul"
  input: "gradients/while/Normal_2/log_prob/Square_grad/Mul_1"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/mul"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Sum_1"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal_2/log_prob/standardize/truediv_grad/Reshape"
  input: "^gradients/while/Normal_2/log_prob/standardize/truediv_grad/Reshape_1"
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Reshape"
  input: "^gradients/while/Normal_2/log_prob/standardize/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_2/log_prob/standardize/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Reshape_1"
  input: "^gradients/while/Normal_2/log_prob/standardize/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_2/log_prob/standardize/truediv_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/sub_grad/Neg"
  op: "Neg"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal_1/log_prob/standardize/sub_grad/Neg"
  input: "^gradients/while/Normal_1/log_prob/standardize/truediv_grad/tuple/control_dependency"
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/tuple/control_dependency"
  input: "^gradients/while/Normal_1/log_prob/standardize/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/log_prob/standardize/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal_1/log_prob/standardize/sub_grad/Neg"
  input: "^gradients/while/Normal_1/log_prob/standardize/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/log_prob/standardize/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/sub_grad/Neg"
  op: "Neg"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal/log_prob/standardize/sub_grad/Neg"
  input: "^gradients/while/Normal/log_prob/standardize/truediv_grad/tuple/control_dependency"
}
node {
  name: "gradients/while/Normal/log_prob/standardize/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/tuple/control_dependency"
  input: "^gradients/while/Normal/log_prob/standardize/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal/log_prob/standardize/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal/log_prob/standardize/sub_grad/Neg"
  input: "^gradients/while/Normal/log_prob/standardize/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal/log_prob/standardize/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_5"
  op: "AddN"
  input: "gradients/while/Normal/log_prob/Log_grad/mul"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal/log_prob/Log_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/sub_grad/Neg"
  op: "Neg"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal_2/log_prob/standardize/sub_grad/Neg"
  input: "^gradients/while/Normal_2/log_prob/standardize/truediv_grad/tuple/control_dependency"
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/tuple/control_dependency"
  input: "^gradients/while/Normal_2/log_prob/standardize/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_2/log_prob/standardize/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal_2/log_prob/standardize/sub_grad/Neg"
  input: "^gradients/while/Normal_2/log_prob/standardize/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_2/log_prob/standardize/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_6"
  op: "AddN"
  input: "gradients/while/Normal_2/log_prob/Log_grad/mul"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_2/log_prob/Log_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/Shape_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/zeros/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/zeros"
  op: "Fill"
  input: "gradients/while/Maximum_grad/Shape_2"
  input: "gradients/while/Maximum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/while/Maximum_grad/GreaterEqual/StackPopV2"
  input: "gradients/while/Maximum_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Softplus"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "gradients/while/Maximum_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Softplus"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/while/Maximum_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Maximum_grad/GreaterEqual/Enter"
  input: "while/Softplus"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Maximum_grad/GreaterEqual/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Maximum_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/Maximum_grad/Shape"
  input: "gradients/while/Maximum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/Select"
  op: "Select"
  input: "gradients/while/Maximum_grad/GreaterEqual"
  input: "gradients/AddN_5"
  input: "gradients/while/Maximum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/Sum"
  op: "Sum"
  input: "gradients/while/Maximum_grad/Select"
  input: "gradients/while/Maximum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Maximum_grad/Sum"
  input: "gradients/while/Maximum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/Select_1"
  op: "Select"
  input: "gradients/while/Maximum_grad/GreaterEqual"
  input: "gradients/while/Maximum_grad/zeros"
  input: "gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/Sum_1"
  op: "Sum"
  input: "gradients/while/Maximum_grad/Select_1"
  input: "gradients/while/Maximum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/Maximum_grad/Sum_1"
  input: "gradients/while/Maximum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Maximum_grad/Reshape"
  input: "^gradients/while/Maximum_grad/Reshape_1"
}
node {
  name: "gradients/while/Maximum_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Maximum_grad/Reshape"
  input: "^gradients/while/Maximum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Maximum_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Maximum_grad/Reshape_1"
  input: "^gradients/while/Maximum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Maximum_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/Shape_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/zeros/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/zeros"
  op: "Fill"
  input: "gradients/while/Maximum_2_grad/Shape_2"
  input: "gradients/while/Maximum_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/while/Maximum_2_grad/GreaterEqual/StackPopV2"
  input: "gradients/while/Maximum_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Softplus_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "gradients/while/Maximum_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Softplus_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/while/Maximum_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Maximum_2_grad/GreaterEqual/Enter"
  input: "while/Softplus_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Maximum_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Maximum_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/Maximum_2_grad/Shape"
  input: "gradients/while/Maximum_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/Select"
  op: "Select"
  input: "gradients/while/Maximum_2_grad/GreaterEqual"
  input: "gradients/AddN_6"
  input: "gradients/while/Maximum_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/Sum"
  op: "Sum"
  input: "gradients/while/Maximum_2_grad/Select"
  input: "gradients/while/Maximum_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Maximum_2_grad/Sum"
  input: "gradients/while/Maximum_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/Select_1"
  op: "Select"
  input: "gradients/while/Maximum_2_grad/GreaterEqual"
  input: "gradients/while/Maximum_2_grad/zeros"
  input: "gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/while/Maximum_2_grad/Select_1"
  input: "gradients/while/Maximum_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/Maximum_2_grad/Sum_1"
  input: "gradients/while/Maximum_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Maximum_2_grad/Reshape"
  input: "^gradients/while/Maximum_2_grad/Reshape_1"
}
node {
  name: "gradients/while/Maximum_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Maximum_2_grad/Reshape"
  input: "^gradients/while/Maximum_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Maximum_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Maximum_2_grad/Reshape_1"
  input: "^gradients/while/Maximum_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Maximum_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Softplus_grad/Sigmoid"
  op: "Sigmoid"
  input: "gradients/while/Softplus_grad/Sigmoid/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Softplus_grad/Sigmoid/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Softplus_grad/Sigmoid/f_acc"
  op: "StackV2"
  input: "gradients/while/Softplus_grad/Sigmoid/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Softplus_grad/Sigmoid/Enter"
  op: "Enter"
  input: "gradients/while/Softplus_grad/Sigmoid/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Softplus_grad/Sigmoid/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Softplus_grad/Sigmoid/Enter"
  input: "while/add"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Softplus_grad/Sigmoid/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Softplus_grad/Sigmoid/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Softplus_grad/Sigmoid/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Softplus_grad/Sigmoid/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Softplus_grad/mul"
  op: "Mul"
  input: "gradients/while/Maximum_grad/tuple/control_dependency"
  input: "gradients/while/Softplus_grad/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Softplus_2_grad/Sigmoid"
  op: "Sigmoid"
  input: "gradients/while/Softplus_2_grad/Sigmoid/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Softplus_2_grad/Sigmoid/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/add_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Softplus_2_grad/Sigmoid/f_acc"
  op: "StackV2"
  input: "gradients/while/Softplus_2_grad/Sigmoid/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/add_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Softplus_2_grad/Sigmoid/Enter"
  op: "Enter"
  input: "gradients/while/Softplus_2_grad/Sigmoid/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Softplus_2_grad/Sigmoid/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Softplus_2_grad/Sigmoid/Enter"
  input: "while/add_3"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Softplus_2_grad/Sigmoid/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Softplus_2_grad/Sigmoid/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Softplus_2_grad/Sigmoid/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Softplus_2_grad/Sigmoid/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Softplus_2_grad/mul"
  op: "Mul"
  input: "gradients/while/Maximum_2_grad/tuple/control_dependency"
  input: "gradients/while/Softplus_2_grad/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_grad/BroadcastGradientArgs/s0"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/add_grad/BroadcastGradientArgs/s1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/add_grad/BroadcastGradientArgs/s0"
  input: "gradients/while/add_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_grad/Sum/reduction_indices"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/add_grad/Sum"
  op: "Sum"
  input: "gradients/while/Softplus_grad/mul"
  input: "gradients/while/add_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/add_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/add_grad/Sum"
  input: "gradients/while/add_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Softplus_grad/mul"
  input: "^gradients/while/add_grad/Reshape"
}
node {
  name: "gradients/while/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Softplus_grad/mul"
  input: "^gradients/while/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Softplus_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/add_grad/Reshape"
  input: "^gradients/while/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_3_grad/BroadcastGradientArgs/s0"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/add_3_grad/BroadcastGradientArgs/s1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/add_3_grad/BroadcastGradientArgs/s0"
  input: "gradients/while/add_3_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_3_grad/Sum/reduction_indices"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/add_3_grad/Sum"
  op: "Sum"
  input: "gradients/while/Softplus_2_grad/mul"
  input: "gradients/while/add_3_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/add_3_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/add_3_grad/Sum"
  input: "gradients/while/add_3_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Softplus_2_grad/mul"
  input: "^gradients/while/add_3_grad/Reshape"
}
node {
  name: "gradients/while/add_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Softplus_2_grad/mul"
  input: "^gradients/while/add_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Softplus_2_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/add_3_grad/Reshape"
  input: "^gradients/while/add_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/add_3_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/split_2_grad/concat"
  op: "ConcatV2"
  input: "gradients/while/Normal_2/log_prob/standardize/sub_grad/tuple/control_dependency_1"
  input: "gradients/while/add_3_grad/tuple/control_dependency"
  input: "gradients/while/split_2_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/split_2_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/while/split_2_grad/concat"
  input: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad/Enter"
  op: "Enter"
  input: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad/Enter"
  input: "while/mlp_3/generative_fcnet_1/Relu"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_3/generative_fcnet_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad"
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad"
  input: "^gradients/while/mlp_3/generative_fcnet_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_3/generative_fcnet_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_3/generative_fcnet_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul/Enter"
  input: "while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/Enter"
  input: "while/mlp_3/generative_fcnet_0/Relu"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1"
  input: "^gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/tuple/control_dependency"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/while/mlp_3/generative_fcnet_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_3/generative_fcnet_0/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_3/generative_fcnet_0/Relu_grad/ReluGrad"
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_3/generative_fcnet_0/Relu_grad/ReluGrad"
  input: "^gradients/while/mlp_3/generative_fcnet_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_3/generative_fcnet_0/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_3/generative_fcnet_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_3/generative_fcnet_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul/Enter"
  input: "while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/concat_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/concat_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1/Enter"
  input: "while/concat_3"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1"
  input: "^gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_3_grad/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/concat_3_grad/Rank"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/while/concat_3_grad/mod"
  op: "FloorMod"
  input: "gradients/while/concat_3_grad/Const"
  input: "gradients/while/concat_3_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_3_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/concat_3_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/concat_3_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/while/concat_3_grad/mod"
  input: "gradients/while/concat_3_grad/Shape"
  input: "gradients/while/concat_3_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_3_grad/Slice"
  op: "Slice"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/tuple/control_dependency"
  input: "gradients/while/concat_3_grad/ConcatOffset"
  input: "gradients/while/concat_3_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_3_grad/Slice_1"
  op: "Slice"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/tuple/control_dependency"
  input: "gradients/while/concat_3_grad/ConcatOffset:1"
  input: "gradients/while/concat_3_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/concat_3_grad/Slice"
  input: "^gradients/while/concat_3_grad/Slice_1"
}
node {
  name: "gradients/while/concat_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/concat_3_grad/Slice"
  input: "^gradients/while/concat_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/concat_3_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/concat_3_grad/Slice_1"
  input: "^gradients/while/concat_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/concat_3_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_7/strided_slice/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/AddN_7/strided_slice/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/AddN_7/strided_slice/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/AddN_7/strided_slice"
  op: "StridedSlice"
  input: "gradients/while/GatherV2_2_grad/Cast"
  input: "gradients/AddN_7/strided_slice/stack"
  input: "gradients/AddN_7/strided_slice/stack_1"
  input: "gradients/AddN_7/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/AddN_7/inputs_1"
  op: "UnsortedSegmentSum"
  input: "gradients/while/GatherV2_2_grad/Reshape"
  input: "gradients/while/GatherV2_2_grad/Reshape_1"
  input: "gradients/AddN_7/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_7"
  op: "AddN"
  input: "gradients/while/Select_2_grad/tuple/control_dependency_1"
  input: "gradients/AddN_7/inputs_1"
  input: "gradients/while/concat_3_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/AddN_7"
  input: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/Enter"
  op: "Enter"
  input: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/Enter"
  input: "while/mlp_1/latent_encoder_1/Relu"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_1/latent_encoder_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad"
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad"
  input: "^gradients/while/mlp_1/latent_encoder_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_1/latent_encoder_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_1/latent_encoder_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_1/latent_encoder_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/while/mlp_1/latent_encoder_1/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul/Enter"
  input: "while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/while/mlp_1/latent_encoder_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/Enter"
  input: "while/mlp_1/latent_encoder_0/Relu"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_1/latent_encoder_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1"
  input: "^gradients/while/mlp_1/latent_encoder_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/tuple/control_dependency"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_1/latent_encoder_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/while/mlp_1/latent_encoder_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_1/latent_encoder_0/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_1/latent_encoder_0/Relu_grad/ReluGrad"
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_1/latent_encoder_0/Relu_grad/ReluGrad"
  input: "^gradients/while/mlp_1/latent_encoder_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_1/latent_encoder_0/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_1/latent_encoder_0/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_1/latent_encoder_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_1/latent_encoder_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/while/mlp_1/latent_encoder_0/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul/Enter"
  input: "while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/while/mlp_1/latent_encoder_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_1/sample/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_1/sample/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1/Enter"
  input: "while/Normal_1/sample/Reshape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_1/latent_encoder_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1"
  input: "^gradients/while/mlp_1/latent_encoder_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_8"
  op: "AddN"
  input: "gradients/while/Normal_1/log_prob/standardize/sub_grad/tuple/control_dependency"
  input: "gradients/while/Normal/log_prob/standardize/sub_grad/tuple/control_dependency"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/log_prob/standardize/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/Reshape_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/AddN_8"
  input: "gradients/while/Normal_1/sample/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_1/latent_encoder_0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/add_grad/BroadcastGradientArgs/s0"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/add_grad/BroadcastGradientArgs/s1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/Normal_1/sample/add_grad/BroadcastGradientArgs/s0"
  input: "gradients/while/Normal_1/sample/add_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/add_grad/Sum/reduction_indices"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/add_grad/Sum"
  op: "Sum"
  input: "gradients/while/Normal_1/sample/Reshape_grad/Reshape"
  input: "gradients/while/Normal_1/sample/add_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/add_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Normal_1/sample/add_grad/Sum"
  input: "gradients/while/Normal_1/sample/add_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal_1/sample/Reshape_grad/Reshape"
  input: "^gradients/while/Normal_1/sample/add_grad/Reshape"
}
node {
  name: "gradients/while/Normal_1/sample/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal_1/sample/Reshape_grad/Reshape"
  input: "^gradients/while/Normal_1/sample/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/sample/Reshape_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal_1/sample/add_grad/Reshape"
  input: "^gradients/while/Normal_1/sample/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/sample/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/Mul"
  op: "Mul"
  input: "gradients/while/Normal_1/sample/add_grad/tuple/control_dependency"
  input: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/while/Normal_1/sample/mul_grad/Mul_1/StackPopV2"
  input: "gradients/while/Normal_1/sample/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_1/sample/random_normal"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal_1/sample/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_1/sample/random_normal"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/while/Normal_1/sample/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal_1/sample/mul_grad/Mul_1/Enter"
  input: "while/Normal_1/sample/random_normal"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal_1/sample/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal_1/sample/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/Sum/reduction_indices"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/Sum"
  op: "Sum"
  input: "gradients/while/Normal_1/sample/mul_grad/Mul_1"
  input: "gradients/while/Normal_1/sample/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Normal_1/sample/mul_grad/Sum"
  input: "gradients/while/Normal_1/sample/mul_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal_1/sample/mul_grad/Mul"
  input: "^gradients/while/Normal_1/sample/mul_grad/Reshape"
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal_1/sample/mul_grad/Mul"
  input: "^gradients/while/Normal_1/sample/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/sample/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal_1/sample/mul_grad/Reshape"
  input: "^gradients/while/Normal_1/sample/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/sample/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_9"
  op: "AddN"
  input: "gradients/while/Normal_1/log_prob/standardize/sub_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal_1/sample/add_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/log_prob/standardize/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_10"
  op: "AddN"
  input: "gradients/while/Normal_1/log_prob/Log_grad/mul"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal_1/sample/mul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/log_prob/Log_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/AddN_9"
}
node {
  name: "gradients/while/add_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/AddN_9"
  input: "^gradients/while/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/log_prob/standardize/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/AddN_9"
  input: "^gradients/while/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/log_prob/standardize/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/Shape_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/zeros/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/zeros"
  op: "Fill"
  input: "gradients/while/Maximum_1_grad/Shape_2"
  input: "gradients/while/Maximum_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/while/Maximum_1_grad/GreaterEqual/StackPopV2"
  input: "gradients/while/Maximum_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Softplus_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "gradients/while/Maximum_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Softplus_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/while/Maximum_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Maximum_1_grad/GreaterEqual/Enter"
  input: "while/Softplus_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Maximum_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Maximum_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/Maximum_1_grad/Shape"
  input: "gradients/while/Maximum_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/Select"
  op: "Select"
  input: "gradients/while/Maximum_1_grad/GreaterEqual"
  input: "gradients/AddN_10"
  input: "gradients/while/Maximum_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/Sum"
  op: "Sum"
  input: "gradients/while/Maximum_1_grad/Select"
  input: "gradients/while/Maximum_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Maximum_1_grad/Sum"
  input: "gradients/while/Maximum_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/Select_1"
  op: "Select"
  input: "gradients/while/Maximum_1_grad/GreaterEqual"
  input: "gradients/while/Maximum_1_grad/zeros"
  input: "gradients/AddN_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/while/Maximum_1_grad/Select_1"
  input: "gradients/while/Maximum_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/Maximum_1_grad/Sum_1"
  input: "gradients/while/Maximum_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Maximum_1_grad/Reshape"
  input: "^gradients/while/Maximum_1_grad/Reshape_1"
}
node {
  name: "gradients/while/Maximum_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Maximum_1_grad/Reshape"
  input: "^gradients/while/Maximum_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Maximum_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Maximum_1_grad/Reshape_1"
  input: "^gradients/while/Maximum_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Maximum_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/Mul"
  op: "Mul"
  input: "gradients/while/add_2_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal/mean/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal/mean/ones_like"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal/mean/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal/mean/ones_like"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/while/Normal/mean/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal/mean/mul_grad/Mul/Enter"
  input: "while/Normal/mean/ones_like"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal/mean/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal/mean/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/while/add_2_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal/mean/mul_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal/loc"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal/mean/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal/loc"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/while/Normal/mean/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal/mean/mul_grad/Mul_1/Enter"
  input: "while/Normal/loc"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal/mean/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal/mean/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal/mean/mul_grad/Mul"
  input: "^gradients/while/Normal/mean/mul_grad/Mul_1"
}
node {
  name: "gradients/while/Normal/mean/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal/mean/mul_grad/Mul"
  input: "^gradients/while/Normal/mean/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal/mean/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal/mean/mul_grad/Mul_1"
  input: "^gradients/while/Normal/mean/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal/mean/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Softplus_1_grad/Sigmoid"
  op: "Sigmoid"
  input: "gradients/while/Softplus_1_grad/Sigmoid/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Softplus_1_grad/Sigmoid/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Softplus_1_grad/Sigmoid/f_acc"
  op: "StackV2"
  input: "gradients/while/Softplus_1_grad/Sigmoid/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Softplus_1_grad/Sigmoid/Enter"
  op: "Enter"
  input: "gradients/while/Softplus_1_grad/Sigmoid/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Softplus_1_grad/Sigmoid/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Softplus_1_grad/Sigmoid/Enter"
  input: "while/add_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Softplus_1_grad/Sigmoid/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Softplus_1_grad/Sigmoid/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Softplus_1_grad/Sigmoid/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Softplus_1_grad/Sigmoid/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Softplus_1_grad/mul"
  op: "Mul"
  input: "gradients/while/Maximum_1_grad/tuple/control_dependency"
  input: "gradients/while/Softplus_1_grad/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_11"
  op: "AddN"
  input: "gradients/while/Normal/log_prob/standardize/sub_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal/mean/mul_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal/log_prob/standardize/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_1_grad/Sum/reduction_indices"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/while/Softplus_1_grad/mul"
  input: "gradients/while/add_1_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/add_1_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/add_1_grad/Sum"
  input: "gradients/while/add_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Softplus_1_grad/mul"
  input: "^gradients/while/add_1_grad/Reshape"
}
node {
  name: "gradients/while/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Softplus_1_grad/mul"
  input: "^gradients/while/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Softplus_1_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/add_1_grad/Reshape"
  input: "^gradients/while/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/AddN_11"
  input: "gradients/while/add_grad/tuple/control_dependency"
  input: "gradients/while/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/split_1_grad/concat"
  op: "ConcatV2"
  input: "gradients/while/add_2_grad/tuple/control_dependency"
  input: "gradients/while/add_1_grad/tuple/control_dependency"
  input: "gradients/while/split_1_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/split_1_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/while/split_grad/concat"
  input: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad/Enter"
  op: "Enter"
  input: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad/Enter"
  input: "while/mlp_2/prior_fcnet_1/Relu"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/while/split_1_grad/concat"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad/Enter"
  op: "Enter"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad/Enter"
  input: "while/mlp_4/approximate_posterior_fcnet_1/Relu"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_2/prior_fcnet_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad"
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad"
  input: "^gradients/while/mlp_2/prior_fcnet_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_2/prior_fcnet_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_2/prior_fcnet_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad"
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul/Enter"
  input: "while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/Enter"
  input: "while/mlp_2/prior_fcnet_0/Relu"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1"
  input: "^gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul/Enter"
  input: "while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/Enter"
  input: "while/mlp_4/approximate_posterior_fcnet_0/Relu"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/tuple/control_dependency"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/tuple/control_dependency"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/while/mlp_2/prior_fcnet_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_2/prior_fcnet_0/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_2/prior_fcnet_0/Relu_grad/ReluGrad"
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_2/prior_fcnet_0/Relu_grad/ReluGrad"
  input: "^gradients/while/mlp_2/prior_fcnet_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_2/prior_fcnet_0/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_2/prior_fcnet_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_2/prior_fcnet_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_0/Relu_grad/ReluGrad"
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/Relu_grad/ReluGrad"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_4/approximate_posterior_fcnet_0/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul/Enter"
  input: "while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/concat_1/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/concat_1/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1/Enter"
  input: "while/concat_1/concat"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1"
  input: "^gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul/Enter"
  input: "while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/concat_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/concat_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1/Enter"
  input: "while/concat_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_2_grad/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/concat_2_grad/Rank"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/while/concat_2_grad/mod"
  op: "FloorMod"
  input: "gradients/while/concat_2_grad/Const"
  input: "gradients/while/concat_2_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_2_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/concat_2_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/concat_2_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/while/concat_2_grad/mod"
  input: "gradients/while/concat_2_grad/Shape"
  input: "gradients/while/concat_2_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_2_grad/Slice"
  op: "Slice"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/tuple/control_dependency"
  input: "gradients/while/concat_2_grad/ConcatOffset"
  input: "gradients/while/concat_2_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_2_grad/Slice_1"
  op: "Slice"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/tuple/control_dependency"
  input: "gradients/while/concat_2_grad/ConcatOffset:1"
  input: "gradients/while/concat_2_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/concat_2_grad/Slice"
  input: "^gradients/while/concat_2_grad/Slice_1"
}
node {
  name: "gradients/while/concat_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/concat_2_grad/Slice"
  input: "^gradients/while/concat_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/concat_2_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/concat_2_grad/Slice_1"
  input: "^gradients/while/concat_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/concat_2_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_12/strided_slice/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/AddN_12/strided_slice/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/AddN_12/strided_slice/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/AddN_12/strided_slice"
  op: "StridedSlice"
  input: "gradients/while/GatherV2_1_grad/Cast"
  input: "gradients/AddN_12/strided_slice/stack"
  input: "gradients/AddN_12/strided_slice/stack_1"
  input: "gradients/AddN_12/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/AddN_12/inputs_1"
  op: "UnsortedSegmentSum"
  input: "gradients/while/GatherV2_1_grad/Reshape"
  input: "gradients/while/GatherV2_1_grad/Reshape_1"
  input: "gradients/AddN_12/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_12"
  op: "AddN"
  input: "gradients/while/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/AddN_12/inputs_1"
  input: "gradients/while/concat_3_grad/tuple/control_dependency_1"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/tuple/control_dependency"
  input: "gradients/while/concat_2_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/AddN_12"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul/Enter"
  input: "while/lstm_cell/Tanh_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/AddN_12"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  input: "while/lstm_cell/Sigmoid_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/lstm_cell/mul_2_grad/Mul"
  input: "^gradients/while/lstm_cell/mul_2_grad/Mul_1"
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul"
  input: "^gradients/while/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/mul_2_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul_1"
  input: "^gradients/while/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/mul_2_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/TensorArrayReadV3_3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/TensorArrayReadV3_3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/TensorArrayReadV3_3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/while/TensorArrayReadV3_3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/TensorArrayReadV3_3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  input: "gradients/while/concat_2_grad/tuple/control_dependency_1"
  input: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  op: "StackV2"
  input: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "while/Identity"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/while/lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "gradients/while/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/b_acc_1"
  input: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/Add"
  op: "Add"
  input: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/Switch:1"
  input: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_13/strided_slice/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/AddN_13/strided_slice/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/AddN_13/strided_slice/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/AddN_13/strided_slice"
  op: "StridedSlice"
  input: "gradients/while/GatherV2_grad/Cast"
  input: "gradients/AddN_13/strided_slice/stack"
  input: "gradients/AddN_13/strided_slice/stack_1"
  input: "gradients/AddN_13/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/AddN_13/inputs_1"
  op: "UnsortedSegmentSum"
  input: "gradients/while/GatherV2_grad/Reshape"
  input: "gradients/while/GatherV2_grad/Reshape_1"
  input: "gradients/AddN_13/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_13"
  op: "AddN"
  input: "gradients/while/Select_grad/tuple/control_dependency_1"
  input: "gradients/AddN_13/inputs_1"
  input: "gradients/while/lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/AddN_13"
}
node {
  name: "gradients/while/lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/AddN_13"
  input: "^gradients/while/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/AddN_13"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/AddN_13"
  input: "^gradients/while/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/AddN_13"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "TensorArray_2"
  input: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@TensorArray_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/b_acc_3"
  input: "^gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@TensorArray_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "TensorArrayUnstack_2/range"
  input: "gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/while/TensorArrayReadV3_3/Enter_1_grad/b_acc_3"
}
node {
  name: "gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/b_acc_3"
  input: "^gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/TensorArrayReadV3_3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/Mul"
  op: "Mul"
  input: "gradients/while/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "gradients/while/lstm_cell/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/while/lstm_cell/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/while/lstm_cell/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/lstm_cell/mul_grad/Mul/Enter"
  input: "while/Identity_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/lstm_cell/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/lstm_cell/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/while/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "gradients/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/lstm_cell/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/while/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/lstm_cell/mul_grad/Mul_1/Enter"
  input: "while/lstm_cell/Sigmoid"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/lstm_cell/mul_grad/Mul"
  input: "^gradients/while/lstm_cell/mul_grad/Mul_1"
}
node {
  name: "gradients/while/lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/lstm_cell/mul_grad/Mul"
  input: "^gradients/while/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/lstm_cell/mul_grad/Mul_1"
  input: "^gradients/while/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul/Enter"
  input: "while/lstm_cell/Tanh"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  input: "while/lstm_cell/Sigmoid_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/lstm_cell/mul_1_grad/Mul"
  input: "^gradients/while/lstm_cell/mul_1_grad/Mul_1"
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul"
  input: "^gradients/while/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/mul_1_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul_1"
  input: "^gradients/while/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Reshape_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\300\003\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "gradients/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  input: "gradients/while/lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/while/lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "gradients/while/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/Reshape_1_grad/Reshape"
  input: "mlp/data_encoder_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_grad/Sum/reduction_indices"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "gradients/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/while/lstm_cell/add_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/lstm_cell/add_grad/Sum"
  input: "gradients/while/lstm_cell/add_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "^gradients/while/lstm_cell/add_grad/Reshape"
}
node {
  name: "gradients/while/lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "^gradients/while/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/lstm_cell/add_grad/Reshape"
  input: "^gradients/while/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/while/lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/mlp/data_encoder_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mlp/data_encoder_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/mlp/data_encoder_1/Relu_grad/ReluGrad"
}
node {
  name: "gradients/mlp/data_encoder_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mlp/data_encoder_1/Relu_grad/ReluGrad"
  input: "^gradients/mlp/data_encoder_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mlp/data_encoder_1/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mlp/data_encoder_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/mlp/data_encoder_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mlp/data_encoder_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/while/lstm_cell/Tanh_grad/TanhGrad"
  input: "gradients/while/lstm_cell/add_grad/tuple/control_dependency"
  input: "gradients/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/while/lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/mlp/data_encoder_1/BiasAdd_grad/tuple/control_dependency"
  input: "mlp/data_encoder_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "mlp/data_encoder_0/Relu"
  input: "gradients/mlp/data_encoder_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mlp/data_encoder_1/MatMul_grad/MatMul"
  input: "^gradients/mlp/data_encoder_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/mlp/data_encoder_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mlp/data_encoder_1/MatMul_grad/MatMul"
  input: "^gradients/mlp/data_encoder_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mlp/data_encoder_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mlp/data_encoder_1/MatMul_grad/MatMul_1"
  input: "^gradients/mlp/data_encoder_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mlp/data_encoder_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/while/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/lstm_cell/split_grad/concat"
}
node {
  name: "gradients/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/lstm_cell/split_grad/concat"
  input: "^gradients/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/mlp/data_encoder_1/MatMul_grad/tuple/control_dependency"
  input: "mlp/data_encoder_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/while/lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "while/lstm_cell/concat"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/while/lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/while/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/lstm_cell/MatMul_grad/MatMul_1"
  input: "^gradients/while/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/while/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/mlp/data_encoder_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mlp/data_encoder_0/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/mlp/data_encoder_0/Relu_grad/ReluGrad"
}
node {
  name: "gradients/mlp/data_encoder_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mlp/data_encoder_0/Relu_grad/ReluGrad"
  input: "^gradients/mlp/data_encoder_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mlp/data_encoder_0/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mlp/data_encoder_0/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/mlp/data_encoder_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mlp/data_encoder_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/concat_grad/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/while/lstm_cell/concat_grad/Const"
  input: "gradients/while/lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/concat_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/concat_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/while/lstm_cell/concat_grad/mod"
  input: "gradients/while/lstm_cell/concat_grad/Shape"
  input: "gradients/while/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "gradients/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/while/lstm_cell/concat_grad/ConcatOffset"
  input: "gradients/while/lstm_cell/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/while/lstm_cell/concat_grad/ConcatOffset:1"
  input: "gradients/while/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/lstm_cell/concat_grad/Slice"
  input: "^gradients/while/lstm_cell/concat_grad/Slice_1"
}
node {
  name: "gradients/while/lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/lstm_cell/concat_grad/Slice"
  input: "^gradients/while/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/lstm_cell/concat_grad/Slice_1"
  input: "^gradients/while/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "gradients/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "gradients/while/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/mlp/data_encoder_0/BiasAdd_grad/tuple/control_dependency"
  input: "mlp/data_encoder_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Reshape"
  input: "gradients/mlp/data_encoder_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mlp/data_encoder_0/MatMul_grad/MatMul"
  input: "^gradients/mlp/data_encoder_0/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/mlp/data_encoder_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mlp/data_encoder_0/MatMul_grad/MatMul"
  input: "^gradients/mlp/data_encoder_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mlp/data_encoder_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mlp/data_encoder_0/MatMul_grad/MatMul_1"
  input: "^gradients/mlp/data_encoder_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mlp/data_encoder_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_grad/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/while/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/while/concat_grad/Const"
  input: "gradients/while/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/concat_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/while/concat_grad/mod"
  input: "gradients/while/concat_grad/Shape"
  input: "gradients/while/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_grad/Slice"
  op: "Slice"
  input: "gradients/while/lstm_cell/concat_grad/tuple/control_dependency"
  input: "gradients/while/concat_grad/ConcatOffset"
  input: "gradients/while/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/while/lstm_cell/concat_grad/tuple/control_dependency"
  input: "gradients/while/concat_grad/ConcatOffset:1"
  input: "gradients/while/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/concat_grad/Slice"
  input: "^gradients/while/concat_grad/Slice_1"
}
node {
  name: "gradients/while/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/concat_grad/Slice"
  input: "^gradients/while/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/concat_grad/Slice_1"
  input: "^gradients/while/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/while/concat_grad/tuple/control_dependency"
  input: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp/data_encoder_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp/data_encoder_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad/Enter"
  op: "Enter"
  input: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad/Enter"
  input: "while/mlp/data_encoder_1/Relu"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/while/lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp/data_encoder_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad"
}
node {
  name: "gradients/while/mlp/data_encoder_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad"
  input: "^gradients/while/mlp/data_encoder_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp/data_encoder_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp/data_encoder_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp/data_encoder_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/while/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/while/mlp/data_encoder_1/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp/data_encoder_1/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp/data_encoder_1/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul/Enter"
  input: "while/mlp/data_encoder_1/MatMul/ReadVariableOp"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/while/mlp/data_encoder_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp/data_encoder_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp/data_encoder_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/Enter"
  input: "while/mlp/data_encoder_0/Relu"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul"
  input: "^gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul"
  input: "^gradients/while/mlp/data_encoder_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1"
  input: "^gradients/while/mlp/data_encoder_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/tuple/control_dependency"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp/data_encoder_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/while/mlp/data_encoder_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp/data_encoder_0/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp/data_encoder_0/Relu_grad/ReluGrad"
}
node {
  name: "gradients/while/mlp/data_encoder_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp/data_encoder_0/Relu_grad/ReluGrad"
  input: "^gradients/while/mlp/data_encoder_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp/data_encoder_0/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp/data_encoder_0/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp/data_encoder_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp/data_encoder_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_14"
  op: "AddN"
  input: "gradients/mlp/data_encoder_1/BiasAdd_grad/tuple/control_dependency_1"
  input: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mlp/data_encoder_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/while/mlp/data_encoder_0/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp/data_encoder_0/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp/data_encoder_0/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul/Enter"
  input: "while/mlp/data_encoder_0/MatMul/ReadVariableOp"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/while/mlp/data_encoder_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/TensorArrayReadV3_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/TensorArrayReadV3_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1/Enter"
  input: "while/TensorArrayReadV3_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul"
  input: "^gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul"
  input: "^gradients/while/mlp/data_encoder_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1"
  input: "^gradients/while/mlp/data_encoder_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_15"
  op: "AddN"
  input: "gradients/mlp/data_encoder_1/MatMul_grad/tuple/control_dependency_1"
  input: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mlp/data_encoder_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp/data_encoder_0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_16"
  op: "AddN"
  input: "gradients/mlp/data_encoder_0/BiasAdd_grad/tuple/control_dependency_1"
  input: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mlp/data_encoder_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_17"
  op: "AddN"
  input: "gradients/mlp/data_encoder_0/MatMul_grad/tuple/control_dependency_1"
  input: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mlp/data_encoder_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "mlp/data_encoder_0/kernel/Adam"
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_0/kernel/Adam"
  input: "mlp/data_encoder_0/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "mlp/data_encoder_0/kernel/Adam_1"
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_0/kernel/Adam_1"
  input: "mlp/data_encoder_0/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "mlp/data_encoder_0/bias/Adam"
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_0/bias/Adam"
  input: "mlp/data_encoder_0/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "mlp/data_encoder_0/bias/Adam_1"
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_0/bias/Adam_1"
  input: "mlp/data_encoder_0/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "mlp/data_encoder_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "mlp/data_encoder_1/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "mlp/data_encoder_1/kernel/Adam"
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_1/kernel/Adam"
  input: "mlp/data_encoder_1/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "mlp/data_encoder_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "mlp/data_encoder_1/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "mlp/data_encoder_1/kernel/Adam_1"
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_1/kernel/Adam_1"
  input: "mlp/data_encoder_1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "mlp/data_encoder_1/bias/Adam"
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_1/bias/Adam"
  input: "mlp/data_encoder_1/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "mlp/data_encoder_1/bias/Adam_1"
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_1/bias/Adam_1"
  input: "mlp/data_encoder_1/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\300\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_cell/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "lstm_cell/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "lstm_cell/kernel/Adam"
  input: "lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\300\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "lstm_cell/kernel/Adam_1"
  input: "lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "lstm_cell/bias/Adam"
  input: "lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "lstm_cell/bias/Adam_1"
  input: "lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_2/prior_fcnet_0/kernel/Adam"
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_2/prior_fcnet_0/kernel/Adam_1"
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam_1"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_2/prior_fcnet_0/bias/Adam"
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_2/prior_fcnet_0/bias/Adam_1"
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam_1"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_2/prior_fcnet_1/kernel/Adam"
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_2/prior_fcnet_1/kernel/Adam_1"
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam_1"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_2/prior_fcnet_1/bias/Adam"
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_2/prior_fcnet_1/bias/Adam_1"
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam_1"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam"
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1"
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam"
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1"
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam"
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1"
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam"
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1"
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_1/latent_encoder_0/kernel/Adam"
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_1/latent_encoder_0/kernel/Adam_1"
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam_1"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_1/latent_encoder_0/bias/Adam"
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_0/bias/Adam"
  input: "while/mlp_1/latent_encoder_0/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_1/latent_encoder_0/bias/Adam_1"
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_0/bias/Adam_1"
  input: "while/mlp_1/latent_encoder_0/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_1/latent_encoder_1/kernel/Adam"
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_1/latent_encoder_1/kernel/Adam_1"
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam_1"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_1/latent_encoder_1/bias/Adam"
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_1/bias/Adam"
  input: "while/mlp_1/latent_encoder_1/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_1/latent_encoder_1/bias/Adam_1"
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_1/bias/Adam_1"
  input: "while/mlp_1/latent_encoder_1/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_3/generative_fcnet_0/kernel/Adam"
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_3/generative_fcnet_0/kernel/Adam_1"
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam_1"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_3/generative_fcnet_0/bias/Adam"
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_3/generative_fcnet_0/bias/Adam_1"
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam_1"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_3/generative_fcnet_1/kernel/Adam"
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_3/generative_fcnet_1/kernel/Adam_1"
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam_1"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_3/generative_fcnet_1/bias/Adam"
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_3/generative_fcnet_1/bias/Adam_1"
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam_1"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-05
      }
    }
  }
}
node {
  name: "Adam/beta1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/epsilon"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "Adam/update_mlp/data_encoder_0/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "mlp/data_encoder_0/kernel"
  input: "mlp/data_encoder_0/kernel/Adam"
  input: "mlp/data_encoder_0/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mlp/data_encoder_0/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "mlp/data_encoder_0/bias"
  input: "mlp/data_encoder_0/bias/Adam"
  input: "mlp/data_encoder_0/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mlp/data_encoder_1/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "mlp/data_encoder_1/kernel"
  input: "mlp/data_encoder_1/kernel/Adam"
  input: "mlp/data_encoder_1/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mlp/data_encoder_1/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "mlp/data_encoder_1/bias"
  input: "mlp/data_encoder_1/bias/Adam"
  input: "mlp/data_encoder_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "lstm_cell/kernel"
  input: "lstm_cell/kernel/Adam"
  input: "lstm_cell/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "lstm_cell/bias"
  input: "lstm_cell/bias/Adam"
  input: "lstm_cell/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_2/prior_fcnet_0/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_2/prior_fcnet_0/kernel"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_2/prior_fcnet_0/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_2/prior_fcnet_0/bias"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_2/prior_fcnet_1/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_2/prior_fcnet_1/kernel"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_2/prior_fcnet_1/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_2/prior_fcnet_1/bias"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_4/approximate_posterior_fcnet_0/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_4/approximate_posterior_fcnet_0/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_4/approximate_posterior_fcnet_1/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_4/approximate_posterior_fcnet_1/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_1/latent_encoder_0/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_1/latent_encoder_0/kernel"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_1/latent_encoder_0/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_1/latent_encoder_0/bias"
  input: "while/mlp_1/latent_encoder_0/bias/Adam"
  input: "while/mlp_1/latent_encoder_0/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_1/latent_encoder_1/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_1/latent_encoder_1/kernel"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_1/latent_encoder_1/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_1/latent_encoder_1/bias"
  input: "while/mlp_1/latent_encoder_1/bias/Adam"
  input: "while/mlp_1/latent_encoder_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_3/generative_fcnet_0/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_3/generative_fcnet_0/kernel"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_3/generative_fcnet_0/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_3/generative_fcnet_0/bias"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_3/generative_fcnet_1/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_3/generative_fcnet_1/kernel"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_3/generative_fcnet_1/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_3/generative_fcnet_1/bias"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "Adam/beta1"
  input: "^Adam/update_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_mlp/data_encoder_0/bias/ResourceApplyAdam"
  input: "^Adam/update_mlp/data_encoder_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_mlp/data_encoder_1/bias/ResourceApplyAdam"
  input: "^Adam/update_mlp/data_encoder_1/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_1/latent_encoder_0/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_1/latent_encoder_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_1/latent_encoder_1/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_1/latent_encoder_1/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_2/prior_fcnet_0/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_2/prior_fcnet_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_2/prior_fcnet_1/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_2/prior_fcnet_1/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_3/generative_fcnet_0/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_3/generative_fcnet_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_3/generative_fcnet_1/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_3/generative_fcnet_1/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_4/approximate_posterior_fcnet_0/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_4/approximate_posterior_fcnet_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_4/approximate_posterior_fcnet_1/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_4/approximate_posterior_fcnet_1/kernel/ResourceApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "Adam/beta2"
  input: "^Adam/update_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_mlp/data_encoder_0/bias/ResourceApplyAdam"
  input: "^Adam/update_mlp/data_encoder_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_mlp/data_encoder_1/bias/ResourceApplyAdam"
  input: "^Adam/update_mlp/data_encoder_1/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_1/latent_encoder_0/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_1/latent_encoder_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_1/latent_encoder_1/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_1/latent_encoder_1/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_2/prior_fcnet_0/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_2/prior_fcnet_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_2/prior_fcnet_1/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_2/prior_fcnet_1/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_3/generative_fcnet_0/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_3/generative_fcnet_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_3/generative_fcnet_1/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_3/generative_fcnet_1/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_4/approximate_posterior_fcnet_0/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_4/approximate_posterior_fcnet_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_4/approximate_posterior_fcnet_1/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_4/approximate_posterior_fcnet_1/kernel/ResourceApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/update"
  op: "NoOp"
  input: "^Adam/Assign"
  input: "^Adam/Assign_1"
  input: "^Adam/update_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_mlp/data_encoder_0/bias/ResourceApplyAdam"
  input: "^Adam/update_mlp/data_encoder_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_mlp/data_encoder_1/bias/ResourceApplyAdam"
  input: "^Adam/update_mlp/data_encoder_1/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_1/latent_encoder_0/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_1/latent_encoder_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_1/latent_encoder_1/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_1/latent_encoder_1/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_2/prior_fcnet_0/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_2/prior_fcnet_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_2/prior_fcnet_1/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_2/prior_fcnet_1/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_3/generative_fcnet_0/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_3/generative_fcnet_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_3/generative_fcnet_1/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_3/generative_fcnet_1/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_4/approximate_posterior_fcnet_0/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_4/approximate_posterior_fcnet_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_4/approximate_posterior_fcnet_1/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_4/approximate_posterior_fcnet_1/kernel/ResourceApplyAdam"
}
node {
  name: "Adam/value"
  op: "Const"
  input: "^Adam/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "Adam"
  op: "AssignAdd"
  input: "global_step"
  input: "Adam/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "AddV2"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^global_step/Assign"
  input: "^lstm_cell/bias/Adam/Assign"
  input: "^lstm_cell/bias/Adam_1/Assign"
  input: "^lstm_cell/bias/Assign"
  input: "^lstm_cell/kernel/Adam/Assign"
  input: "^lstm_cell/kernel/Adam_1/Assign"
  input: "^lstm_cell/kernel/Assign"
  input: "^mlp/data_encoder_0/bias/Adam/Assign"
  input: "^mlp/data_encoder_0/bias/Adam_1/Assign"
  input: "^mlp/data_encoder_0/bias/Assign"
  input: "^mlp/data_encoder_0/kernel/Adam/Assign"
  input: "^mlp/data_encoder_0/kernel/Adam_1/Assign"
  input: "^mlp/data_encoder_0/kernel/Assign"
  input: "^mlp/data_encoder_1/bias/Adam/Assign"
  input: "^mlp/data_encoder_1/bias/Adam_1/Assign"
  input: "^mlp/data_encoder_1/bias/Assign"
  input: "^mlp/data_encoder_1/kernel/Adam/Assign"
  input: "^mlp/data_encoder_1/kernel/Adam_1/Assign"
  input: "^mlp/data_encoder_1/kernel/Assign"
  input: "^rnn/lstm_cell/bias/Assign"
  input: "^rnn/lstm_cell/kernel/Assign"
  input: "^while/mlp_1/latent_encoder_0/bias/Adam/Assign"
  input: "^while/mlp_1/latent_encoder_0/bias/Adam_1/Assign"
  input: "^while/mlp_1/latent_encoder_0/bias/Assign"
  input: "^while/mlp_1/latent_encoder_0/kernel/Adam/Assign"
  input: "^while/mlp_1/latent_encoder_0/kernel/Adam_1/Assign"
  input: "^while/mlp_1/latent_encoder_0/kernel/Assign"
  input: "^while/mlp_1/latent_encoder_1/bias/Adam/Assign"
  input: "^while/mlp_1/latent_encoder_1/bias/Adam_1/Assign"
  input: "^while/mlp_1/latent_encoder_1/bias/Assign"
  input: "^while/mlp_1/latent_encoder_1/kernel/Adam/Assign"
  input: "^while/mlp_1/latent_encoder_1/kernel/Adam_1/Assign"
  input: "^while/mlp_1/latent_encoder_1/kernel/Assign"
  input: "^while/mlp_2/prior_fcnet_0/bias/Adam/Assign"
  input: "^while/mlp_2/prior_fcnet_0/bias/Adam_1/Assign"
  input: "^while/mlp_2/prior_fcnet_0/bias/Assign"
  input: "^while/mlp_2/prior_fcnet_0/kernel/Adam/Assign"
  input: "^while/mlp_2/prior_fcnet_0/kernel/Adam_1/Assign"
  input: "^while/mlp_2/prior_fcnet_0/kernel/Assign"
  input: "^while/mlp_2/prior_fcnet_1/bias/Adam/Assign"
  input: "^while/mlp_2/prior_fcnet_1/bias/Adam_1/Assign"
  input: "^while/mlp_2/prior_fcnet_1/bias/Assign"
  input: "^while/mlp_2/prior_fcnet_1/kernel/Adam/Assign"
  input: "^while/mlp_2/prior_fcnet_1/kernel/Adam_1/Assign"
  input: "^while/mlp_2/prior_fcnet_1/kernel/Assign"
  input: "^while/mlp_3/generative_fcnet_0/bias/Adam/Assign"
  input: "^while/mlp_3/generative_fcnet_0/bias/Adam_1/Assign"
  input: "^while/mlp_3/generative_fcnet_0/bias/Assign"
  input: "^while/mlp_3/generative_fcnet_0/kernel/Adam/Assign"
  input: "^while/mlp_3/generative_fcnet_0/kernel/Adam_1/Assign"
  input: "^while/mlp_3/generative_fcnet_0/kernel/Assign"
  input: "^while/mlp_3/generative_fcnet_1/bias/Adam/Assign"
  input: "^while/mlp_3/generative_fcnet_1/bias/Adam_1/Assign"
  input: "^while/mlp_3/generative_fcnet_1/bias/Assign"
  input: "^while/mlp_3/generative_fcnet_1/kernel/Adam/Assign"
  input: "^while/mlp_3/generative_fcnet_1/kernel/Adam_1/Assign"
  input: "^while/mlp_3/generative_fcnet_1/kernel/Assign"
  input: "^while/mlp_4/approximate_posterior_fcnet_0/bias/Adam/Assign"
  input: "^while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1/Assign"
  input: "^while/mlp_4/approximate_posterior_fcnet_0/bias/Assign"
  input: "^while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam/Assign"
  input: "^while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1/Assign"
  input: "^while/mlp_4/approximate_posterior_fcnet_0/kernel/Assign"
  input: "^while/mlp_4/approximate_posterior_fcnet_1/bias/Adam/Assign"
  input: "^while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1/Assign"
  input: "^while/mlp_4/approximate_posterior_fcnet_1/bias/Assign"
  input: "^while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam/Assign"
  input: "^while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1/Assign"
  input: "^while/mlp_4/approximate_posterior_fcnet_1/kernel/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "rnn/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "rnn/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_22"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_23"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_24"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_25"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_26"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_27"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_28"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_29"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_30"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_31"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_32"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_33"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_34"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_35"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_36"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_37"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_38"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_39"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_40"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_41"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_42"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_43"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_44"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_45"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_46"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_47"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_48"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_49"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_50"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_51"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_52"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_53"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_54"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_55"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_56"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_57"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_58"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_59"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/VarIsInitializedOp"
  input: "report_uninitialized_variables/VarIsInitializedOp_1"
  input: "report_uninitialized_variables/VarIsInitializedOp_2"
  input: "report_uninitialized_variables/VarIsInitializedOp_3"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_5"
  input: "report_uninitialized_variables/VarIsInitializedOp_6"
  input: "report_uninitialized_variables/VarIsInitializedOp_7"
  input: "report_uninitialized_variables/VarIsInitializedOp_8"
  input: "report_uninitialized_variables/VarIsInitializedOp_9"
  input: "report_uninitialized_variables/VarIsInitializedOp_10"
  input: "report_uninitialized_variables/VarIsInitializedOp_11"
  input: "report_uninitialized_variables/VarIsInitializedOp_12"
  input: "report_uninitialized_variables/VarIsInitializedOp_13"
  input: "report_uninitialized_variables/VarIsInitializedOp_14"
  input: "report_uninitialized_variables/VarIsInitializedOp_15"
  input: "report_uninitialized_variables/VarIsInitializedOp_16"
  input: "report_uninitialized_variables/VarIsInitializedOp_17"
  input: "report_uninitialized_variables/VarIsInitializedOp_18"
  input: "report_uninitialized_variables/VarIsInitializedOp_19"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/VarIsInitializedOp_20"
  input: "report_uninitialized_variables/VarIsInitializedOp_21"
  input: "report_uninitialized_variables/VarIsInitializedOp_22"
  input: "report_uninitialized_variables/VarIsInitializedOp_23"
  input: "report_uninitialized_variables/VarIsInitializedOp_24"
  input: "report_uninitialized_variables/VarIsInitializedOp_25"
  input: "report_uninitialized_variables/VarIsInitializedOp_26"
  input: "report_uninitialized_variables/VarIsInitializedOp_27"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/VarIsInitializedOp_28"
  input: "report_uninitialized_variables/VarIsInitializedOp_29"
  input: "report_uninitialized_variables/VarIsInitializedOp_30"
  input: "report_uninitialized_variables/VarIsInitializedOp_31"
  input: "report_uninitialized_variables/VarIsInitializedOp_32"
  input: "report_uninitialized_variables/VarIsInitializedOp_33"
  input: "report_uninitialized_variables/VarIsInitializedOp_34"
  input: "report_uninitialized_variables/VarIsInitializedOp_35"
  input: "report_uninitialized_variables/VarIsInitializedOp_36"
  input: "report_uninitialized_variables/VarIsInitializedOp_37"
  input: "report_uninitialized_variables/VarIsInitializedOp_38"
  input: "report_uninitialized_variables/VarIsInitializedOp_39"
  input: "report_uninitialized_variables/VarIsInitializedOp_40"
  input: "report_uninitialized_variables/VarIsInitializedOp_41"
  input: "report_uninitialized_variables/VarIsInitializedOp_42"
  input: "report_uninitialized_variables/VarIsInitializedOp_43"
  input: "report_uninitialized_variables/VarIsInitializedOp_44"
  input: "report_uninitialized_variables/VarIsInitializedOp_45"
  input: "report_uninitialized_variables/VarIsInitializedOp_46"
  input: "report_uninitialized_variables/VarIsInitializedOp_47"
  input: "report_uninitialized_variables/VarIsInitializedOp_48"
  input: "report_uninitialized_variables/VarIsInitializedOp_49"
  input: "report_uninitialized_variables/VarIsInitializedOp_50"
  input: "report_uninitialized_variables/VarIsInitializedOp_51"
  input: "report_uninitialized_variables/VarIsInitializedOp_52"
  input: "report_uninitialized_variables/VarIsInitializedOp_53"
  input: "report_uninitialized_variables/VarIsInitializedOp_54"
  input: "report_uninitialized_variables/VarIsInitializedOp_55"
  input: "report_uninitialized_variables/VarIsInitializedOp_56"
  input: "report_uninitialized_variables/VarIsInitializedOp_57"
  input: "report_uninitialized_variables/VarIsInitializedOp_58"
  input: "report_uninitialized_variables/VarIsInitializedOp_59"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 71
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 71
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 71
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 71
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 71
          }
        }
        string_val: "global_step"
        string_val: "mlp/data_encoder_0/kernel"
        string_val: "mlp/data_encoder_0/bias"
        string_val: "mlp/data_encoder_1/kernel"
        string_val: "mlp/data_encoder_1/bias"
        string_val: "rnn/lstm_cell/kernel"
        string_val: "rnn/lstm_cell/bias"
        string_val: "lstm_cell/kernel"
        string_val: "lstm_cell/bias"
        string_val: "while/mlp_2/prior_fcnet_0/kernel"
        string_val: "while/mlp_2/prior_fcnet_0/bias"
        string_val: "while/mlp_2/prior_fcnet_1/kernel"
        string_val: "while/mlp_2/prior_fcnet_1/bias"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/kernel"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/bias"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/kernel"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/bias"
        string_val: "while/mlp_1/latent_encoder_0/kernel"
        string_val: "while/mlp_1/latent_encoder_0/bias"
        string_val: "while/mlp_1/latent_encoder_1/kernel"
        string_val: "while/mlp_1/latent_encoder_1/bias"
        string_val: "while/mlp_3/generative_fcnet_0/kernel"
        string_val: "while/mlp_3/generative_fcnet_0/bias"
        string_val: "while/mlp_3/generative_fcnet_1/kernel"
        string_val: "while/mlp_3/generative_fcnet_1/bias"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "mlp/data_encoder_0/kernel/Adam"
        string_val: "mlp/data_encoder_0/kernel/Adam_1"
        string_val: "mlp/data_encoder_0/bias/Adam"
        string_val: "mlp/data_encoder_0/bias/Adam_1"
        string_val: "mlp/data_encoder_1/kernel/Adam"
        string_val: "mlp/data_encoder_1/kernel/Adam_1"
        string_val: "mlp/data_encoder_1/bias/Adam"
        string_val: "mlp/data_encoder_1/bias/Adam_1"
        string_val: "lstm_cell/kernel/Adam"
        string_val: "lstm_cell/kernel/Adam_1"
        string_val: "lstm_cell/bias/Adam"
        string_val: "lstm_cell/bias/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_0/kernel/Adam"
        string_val: "while/mlp_2/prior_fcnet_0/kernel/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_0/bias/Adam"
        string_val: "while/mlp_2/prior_fcnet_0/bias/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_1/kernel/Adam"
        string_val: "while/mlp_2/prior_fcnet_1/kernel/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_1/bias/Adam"
        string_val: "while/mlp_2/prior_fcnet_1/bias/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1"
        string_val: "while/mlp_1/latent_encoder_0/kernel/Adam"
        string_val: "while/mlp_1/latent_encoder_0/kernel/Adam_1"
        string_val: "while/mlp_1/latent_encoder_0/bias/Adam"
        string_val: "while/mlp_1/latent_encoder_0/bias/Adam_1"
        string_val: "while/mlp_1/latent_encoder_1/kernel/Adam"
        string_val: "while/mlp_1/latent_encoder_1/kernel/Adam_1"
        string_val: "while/mlp_1/latent_encoder_1/bias/Adam"
        string_val: "while/mlp_1/latent_encoder_1/bias/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_0/kernel/Adam"
        string_val: "while/mlp_3/generative_fcnet_0/kernel/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_0/bias/Adam"
        string_val: "while/mlp_3/generative_fcnet_0/bias/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_1/kernel/Adam"
        string_val: "while/mlp_3/generative_fcnet_1/kernel/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_1/bias/Adam"
        string_val: "while/mlp_3/generative_fcnet_1/bias/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 71
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 71
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 71
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 71
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 71
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "rnn/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "rnn/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_22"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_23"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_24"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_25"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_26"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_27"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_28"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_29"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_30"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_31"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_32"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_33"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_34"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_35"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_36"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_37"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_38"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_39"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_40"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_41"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_42"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_43"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_44"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_45"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_46"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_47"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_48"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_49"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_50"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_51"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_52"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_53"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_54"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_55"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_56"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_57"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_58"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_59"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/VarIsInitializedOp"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_22"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_23"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_24"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_25"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_26"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_27"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  input: "report_uninitialized_variables_1/IsVariableInitialized_9"
  input: "report_uninitialized_variables_1/IsVariableInitialized_10"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_28"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_29"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_30"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_31"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_32"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_33"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_34"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_35"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_36"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_37"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_38"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_39"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_40"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_41"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_42"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_43"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_44"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_45"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_46"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_47"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_48"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_49"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_50"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_51"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_52"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_53"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_54"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_55"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_56"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_57"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_58"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_59"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 71
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 71
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 71
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 71
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 71
          }
        }
        string_val: "global_step"
        string_val: "mlp/data_encoder_0/kernel"
        string_val: "mlp/data_encoder_0/bias"
        string_val: "mlp/data_encoder_1/kernel"
        string_val: "mlp/data_encoder_1/bias"
        string_val: "rnn/lstm_cell/kernel"
        string_val: "rnn/lstm_cell/bias"
        string_val: "lstm_cell/kernel"
        string_val: "lstm_cell/bias"
        string_val: "while/mlp_2/prior_fcnet_0/kernel"
        string_val: "while/mlp_2/prior_fcnet_0/bias"
        string_val: "while/mlp_2/prior_fcnet_1/kernel"
        string_val: "while/mlp_2/prior_fcnet_1/bias"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/kernel"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/bias"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/kernel"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/bias"
        string_val: "while/mlp_1/latent_encoder_0/kernel"
        string_val: "while/mlp_1/latent_encoder_0/bias"
        string_val: "while/mlp_1/latent_encoder_1/kernel"
        string_val: "while/mlp_1/latent_encoder_1/bias"
        string_val: "while/mlp_3/generative_fcnet_0/kernel"
        string_val: "while/mlp_3/generative_fcnet_0/bias"
        string_val: "while/mlp_3/generative_fcnet_1/kernel"
        string_val: "while/mlp_3/generative_fcnet_1/bias"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "mlp/data_encoder_0/kernel/Adam"
        string_val: "mlp/data_encoder_0/kernel/Adam_1"
        string_val: "mlp/data_encoder_0/bias/Adam"
        string_val: "mlp/data_encoder_0/bias/Adam_1"
        string_val: "mlp/data_encoder_1/kernel/Adam"
        string_val: "mlp/data_encoder_1/kernel/Adam_1"
        string_val: "mlp/data_encoder_1/bias/Adam"
        string_val: "mlp/data_encoder_1/bias/Adam_1"
        string_val: "lstm_cell/kernel/Adam"
        string_val: "lstm_cell/kernel/Adam_1"
        string_val: "lstm_cell/bias/Adam"
        string_val: "lstm_cell/bias/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_0/kernel/Adam"
        string_val: "while/mlp_2/prior_fcnet_0/kernel/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_0/bias/Adam"
        string_val: "while/mlp_2/prior_fcnet_0/bias/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_1/kernel/Adam"
        string_val: "while/mlp_2/prior_fcnet_1/kernel/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_1/bias/Adam"
        string_val: "while/mlp_2/prior_fcnet_1/bias/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1"
        string_val: "while/mlp_1/latent_encoder_0/kernel/Adam"
        string_val: "while/mlp_1/latent_encoder_0/kernel/Adam_1"
        string_val: "while/mlp_1/latent_encoder_0/bias/Adam"
        string_val: "while/mlp_1/latent_encoder_0/bias/Adam_1"
        string_val: "while/mlp_1/latent_encoder_1/kernel/Adam"
        string_val: "while/mlp_1/latent_encoder_1/kernel/Adam_1"
        string_val: "while/mlp_1/latent_encoder_1/bias/Adam"
        string_val: "while/mlp_1/latent_encoder_1/bias/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_0/kernel/Adam"
        string_val: "while/mlp_3/generative_fcnet_0/kernel/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_0/bias/Adam"
        string_val: "while/mlp_3/generative_fcnet_0/bias/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_1/kernel/Adam"
        string_val: "while/mlp_3/generative_fcnet_1/kernel/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_1/bias/Adam"
        string_val: "while/mlp_3/generative_fcnet_1/bias/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 71
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 71
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 71
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 71
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 71
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "train_ll_per_seq"
  input: "train_ll_per_t"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_af472d4a04644ddd968e8244d237de24/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 71
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 71
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "global_step"
        string_val: "lstm_cell/bias"
        string_val: "lstm_cell/bias/Adam"
        string_val: "lstm_cell/bias/Adam_1"
        string_val: "lstm_cell/kernel"
        string_val: "lstm_cell/kernel/Adam"
        string_val: "lstm_cell/kernel/Adam_1"
        string_val: "mlp/data_encoder_0/bias"
        string_val: "mlp/data_encoder_0/bias/Adam"
        string_val: "mlp/data_encoder_0/bias/Adam_1"
        string_val: "mlp/data_encoder_0/kernel"
        string_val: "mlp/data_encoder_0/kernel/Adam"
        string_val: "mlp/data_encoder_0/kernel/Adam_1"
        string_val: "mlp/data_encoder_1/bias"
        string_val: "mlp/data_encoder_1/bias/Adam"
        string_val: "mlp/data_encoder_1/bias/Adam_1"
        string_val: "mlp/data_encoder_1/kernel"
        string_val: "mlp/data_encoder_1/kernel/Adam"
        string_val: "mlp/data_encoder_1/kernel/Adam_1"
        string_val: "rnn/lstm_cell/bias"
        string_val: "rnn/lstm_cell/kernel"
        string_val: "while/mlp_1/latent_encoder_0/bias"
        string_val: "while/mlp_1/latent_encoder_0/bias/Adam"
        string_val: "while/mlp_1/latent_encoder_0/bias/Adam_1"
        string_val: "while/mlp_1/latent_encoder_0/kernel"
        string_val: "while/mlp_1/latent_encoder_0/kernel/Adam"
        string_val: "while/mlp_1/latent_encoder_0/kernel/Adam_1"
        string_val: "while/mlp_1/latent_encoder_1/bias"
        string_val: "while/mlp_1/latent_encoder_1/bias/Adam"
        string_val: "while/mlp_1/latent_encoder_1/bias/Adam_1"
        string_val: "while/mlp_1/latent_encoder_1/kernel"
        string_val: "while/mlp_1/latent_encoder_1/kernel/Adam"
        string_val: "while/mlp_1/latent_encoder_1/kernel/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_0/bias"
        string_val: "while/mlp_2/prior_fcnet_0/bias/Adam"
        string_val: "while/mlp_2/prior_fcnet_0/bias/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_0/kernel"
        string_val: "while/mlp_2/prior_fcnet_0/kernel/Adam"
        string_val: "while/mlp_2/prior_fcnet_0/kernel/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_1/bias"
        string_val: "while/mlp_2/prior_fcnet_1/bias/Adam"
        string_val: "while/mlp_2/prior_fcnet_1/bias/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_1/kernel"
        string_val: "while/mlp_2/prior_fcnet_1/kernel/Adam"
        string_val: "while/mlp_2/prior_fcnet_1/kernel/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_0/bias"
        string_val: "while/mlp_3/generative_fcnet_0/bias/Adam"
        string_val: "while/mlp_3/generative_fcnet_0/bias/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_0/kernel"
        string_val: "while/mlp_3/generative_fcnet_0/kernel/Adam"
        string_val: "while/mlp_3/generative_fcnet_0/kernel/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_1/bias"
        string_val: "while/mlp_3/generative_fcnet_1/bias/Adam"
        string_val: "while/mlp_3/generative_fcnet_1/bias/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_1/kernel"
        string_val: "while/mlp_3/generative_fcnet_1/kernel/Adam"
        string_val: "while/mlp_3/generative_fcnet_1/kernel/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/bias"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/kernel"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/bias"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/kernel"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 71
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 71
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "beta1_power"
  input: "beta2_power"
  input: "global_step"
  input: "lstm_cell/bias"
  input: "lstm_cell/bias/Adam"
  input: "lstm_cell/bias/Adam_1"
  input: "lstm_cell/kernel"
  input: "lstm_cell/kernel/Adam"
  input: "lstm_cell/kernel/Adam_1"
  input: "mlp/data_encoder_0/bias/Read/ReadVariableOp"
  input: "mlp/data_encoder_0/bias/Adam/Read/ReadVariableOp"
  input: "mlp/data_encoder_0/bias/Adam_1/Read/ReadVariableOp"
  input: "mlp/data_encoder_0/kernel/Read/ReadVariableOp"
  input: "mlp/data_encoder_0/kernel/Adam/Read/ReadVariableOp"
  input: "mlp/data_encoder_0/kernel/Adam_1/Read/ReadVariableOp"
  input: "mlp/data_encoder_1/bias/Read/ReadVariableOp"
  input: "mlp/data_encoder_1/bias/Adam/Read/ReadVariableOp"
  input: "mlp/data_encoder_1/bias/Adam_1/Read/ReadVariableOp"
  input: "mlp/data_encoder_1/kernel/Read/ReadVariableOp"
  input: "mlp/data_encoder_1/kernel/Adam/Read/ReadVariableOp"
  input: "mlp/data_encoder_1/kernel/Adam_1/Read/ReadVariableOp"
  input: "rnn/lstm_cell/bias"
  input: "rnn/lstm_cell/kernel"
  input: "while/mlp_1/latent_encoder_0/bias/Read/ReadVariableOp"
  input: "while/mlp_1/latent_encoder_0/bias/Adam/Read/ReadVariableOp"
  input: "while/mlp_1/latent_encoder_0/bias/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Read/ReadVariableOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam/Read/ReadVariableOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_1/latent_encoder_1/bias/Read/ReadVariableOp"
  input: "while/mlp_1/latent_encoder_1/bias/Adam/Read/ReadVariableOp"
  input: "while/mlp_1/latent_encoder_1/bias/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Read/ReadVariableOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam/Read/ReadVariableOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Read/ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam/Read/ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Read/ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam/Read/ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Read/ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam/Read/ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Read/ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam/Read/ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Read/ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam/Read/ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Read/ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam/Read/ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Read/ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam/Read/ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Read/ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam/Read/ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Read/ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam/Read/ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Read/ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam/Read/ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Read/ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam/Read/ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Read/ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam/Read/ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1/Read/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 71
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 71
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "global_step"
        string_val: "lstm_cell/bias"
        string_val: "lstm_cell/bias/Adam"
        string_val: "lstm_cell/bias/Adam_1"
        string_val: "lstm_cell/kernel"
        string_val: "lstm_cell/kernel/Adam"
        string_val: "lstm_cell/kernel/Adam_1"
        string_val: "mlp/data_encoder_0/bias"
        string_val: "mlp/data_encoder_0/bias/Adam"
        string_val: "mlp/data_encoder_0/bias/Adam_1"
        string_val: "mlp/data_encoder_0/kernel"
        string_val: "mlp/data_encoder_0/kernel/Adam"
        string_val: "mlp/data_encoder_0/kernel/Adam_1"
        string_val: "mlp/data_encoder_1/bias"
        string_val: "mlp/data_encoder_1/bias/Adam"
        string_val: "mlp/data_encoder_1/bias/Adam_1"
        string_val: "mlp/data_encoder_1/kernel"
        string_val: "mlp/data_encoder_1/kernel/Adam"
        string_val: "mlp/data_encoder_1/kernel/Adam_1"
        string_val: "rnn/lstm_cell/bias"
        string_val: "rnn/lstm_cell/kernel"
        string_val: "while/mlp_1/latent_encoder_0/bias"
        string_val: "while/mlp_1/latent_encoder_0/bias/Adam"
        string_val: "while/mlp_1/latent_encoder_0/bias/Adam_1"
        string_val: "while/mlp_1/latent_encoder_0/kernel"
        string_val: "while/mlp_1/latent_encoder_0/kernel/Adam"
        string_val: "while/mlp_1/latent_encoder_0/kernel/Adam_1"
        string_val: "while/mlp_1/latent_encoder_1/bias"
        string_val: "while/mlp_1/latent_encoder_1/bias/Adam"
        string_val: "while/mlp_1/latent_encoder_1/bias/Adam_1"
        string_val: "while/mlp_1/latent_encoder_1/kernel"
        string_val: "while/mlp_1/latent_encoder_1/kernel/Adam"
        string_val: "while/mlp_1/latent_encoder_1/kernel/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_0/bias"
        string_val: "while/mlp_2/prior_fcnet_0/bias/Adam"
        string_val: "while/mlp_2/prior_fcnet_0/bias/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_0/kernel"
        string_val: "while/mlp_2/prior_fcnet_0/kernel/Adam"
        string_val: "while/mlp_2/prior_fcnet_0/kernel/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_1/bias"
        string_val: "while/mlp_2/prior_fcnet_1/bias/Adam"
        string_val: "while/mlp_2/prior_fcnet_1/bias/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_1/kernel"
        string_val: "while/mlp_2/prior_fcnet_1/kernel/Adam"
        string_val: "while/mlp_2/prior_fcnet_1/kernel/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_0/bias"
        string_val: "while/mlp_3/generative_fcnet_0/bias/Adam"
        string_val: "while/mlp_3/generative_fcnet_0/bias/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_0/kernel"
        string_val: "while/mlp_3/generative_fcnet_0/kernel/Adam"
        string_val: "while/mlp_3/generative_fcnet_0/kernel/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_1/bias"
        string_val: "while/mlp_3/generative_fcnet_1/bias/Adam"
        string_val: "while/mlp_3/generative_fcnet_1/bias/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_1/kernel"
        string_val: "while/mlp_3/generative_fcnet_1/kernel/Adam"
        string_val: "while/mlp_3/generative_fcnet_1/kernel/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/bias"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/kernel"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/bias"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/kernel"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 71
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 71
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "lstm_cell/bias"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "lstm_cell/bias/Adam"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "lstm_cell/bias/Adam_1"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "lstm_cell/kernel"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "lstm_cell/kernel/Adam"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_0/bias"
  input: "save/Identity_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_0/bias/Adam"
  input: "save/Identity_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_0/bias/Adam_1"
  input: "save/Identity_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_4"
  op: "Identity"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_0/kernel"
  input: "save/Identity_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_5"
  op: "Identity"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_0/kernel/Adam"
  input: "save/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_6"
  op: "Identity"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_0/kernel/Adam_1"
  input: "save/Identity_6"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_7"
  op: "Identity"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_6"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_1/bias"
  input: "save/Identity_7"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_8"
  op: "Identity"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_7"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_1/bias/Adam"
  input: "save/Identity_8"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_9"
  op: "Identity"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_8"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_1/bias/Adam_1"
  input: "save/Identity_9"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_10"
  op: "Identity"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_9"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_1/kernel"
  input: "save/Identity_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_11"
  op: "Identity"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_10"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_1/kernel/Adam"
  input: "save/Identity_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_12"
  op: "Identity"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_11"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_1/kernel/Adam_1"
  input: "save/Identity_12"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "rnn/lstm_cell/bias"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "rnn/lstm_cell/kernel"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity_13"
  op: "Identity"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_12"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_0/bias"
  input: "save/Identity_13"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_14"
  op: "Identity"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_13"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_0/bias/Adam"
  input: "save/Identity_14"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_15"
  op: "Identity"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_14"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_0/bias/Adam_1"
  input: "save/Identity_15"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_16"
  op: "Identity"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_15"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_0/kernel"
  input: "save/Identity_16"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_17"
  op: "Identity"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_16"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam"
  input: "save/Identity_17"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_18"
  op: "Identity"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_17"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam_1"
  input: "save/Identity_18"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_19"
  op: "Identity"
  input: "save/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_18"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_1/bias"
  input: "save/Identity_19"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_20"
  op: "Identity"
  input: "save/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_19"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_1/bias/Adam"
  input: "save/Identity_20"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_21"
  op: "Identity"
  input: "save/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_20"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_1/bias/Adam_1"
  input: "save/Identity_21"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_22"
  op: "Identity"
  input: "save/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_21"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_1/kernel"
  input: "save/Identity_22"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_23"
  op: "Identity"
  input: "save/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_22"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam"
  input: "save/Identity_23"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_24"
  op: "Identity"
  input: "save/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_23"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam_1"
  input: "save/Identity_24"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_25"
  op: "Identity"
  input: "save/RestoreV2:35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_24"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_0/bias"
  input: "save/Identity_25"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_26"
  op: "Identity"
  input: "save/RestoreV2:36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_25"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam"
  input: "save/Identity_26"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_27"
  op: "Identity"
  input: "save/RestoreV2:37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_26"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam_1"
  input: "save/Identity_27"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_28"
  op: "Identity"
  input: "save/RestoreV2:38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_27"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_0/kernel"
  input: "save/Identity_28"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_29"
  op: "Identity"
  input: "save/RestoreV2:39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_28"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam"
  input: "save/Identity_29"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_30"
  op: "Identity"
  input: "save/RestoreV2:40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_29"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam_1"
  input: "save/Identity_30"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_31"
  op: "Identity"
  input: "save/RestoreV2:41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_30"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_1/bias"
  input: "save/Identity_31"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_32"
  op: "Identity"
  input: "save/RestoreV2:42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_31"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam"
  input: "save/Identity_32"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_33"
  op: "Identity"
  input: "save/RestoreV2:43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_32"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam_1"
  input: "save/Identity_33"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_34"
  op: "Identity"
  input: "save/RestoreV2:44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_33"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_1/kernel"
  input: "save/Identity_34"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_35"
  op: "Identity"
  input: "save/RestoreV2:45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_34"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam"
  input: "save/Identity_35"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_36"
  op: "Identity"
  input: "save/RestoreV2:46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_35"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam_1"
  input: "save/Identity_36"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_37"
  op: "Identity"
  input: "save/RestoreV2:47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_36"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_0/bias"
  input: "save/Identity_37"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_38"
  op: "Identity"
  input: "save/RestoreV2:48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_37"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam"
  input: "save/Identity_38"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_39"
  op: "Identity"
  input: "save/RestoreV2:49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_38"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam_1"
  input: "save/Identity_39"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_40"
  op: "Identity"
  input: "save/RestoreV2:50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_39"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_0/kernel"
  input: "save/Identity_40"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_41"
  op: "Identity"
  input: "save/RestoreV2:51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_40"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam"
  input: "save/Identity_41"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_42"
  op: "Identity"
  input: "save/RestoreV2:52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_41"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam_1"
  input: "save/Identity_42"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_43"
  op: "Identity"
  input: "save/RestoreV2:53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_42"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_1/bias"
  input: "save/Identity_43"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_44"
  op: "Identity"
  input: "save/RestoreV2:54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_43"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam"
  input: "save/Identity_44"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_45"
  op: "Identity"
  input: "save/RestoreV2:55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_44"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam_1"
  input: "save/Identity_45"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_46"
  op: "Identity"
  input: "save/RestoreV2:56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_45"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_1/kernel"
  input: "save/Identity_46"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_47"
  op: "Identity"
  input: "save/RestoreV2:57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_46"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam"
  input: "save/Identity_47"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_48"
  op: "Identity"
  input: "save/RestoreV2:58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_47"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam_1"
  input: "save/Identity_48"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_49"
  op: "Identity"
  input: "save/RestoreV2:59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_48"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias"
  input: "save/Identity_49"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_50"
  op: "Identity"
  input: "save/RestoreV2:60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_49"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam"
  input: "save/Identity_50"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_51"
  op: "Identity"
  input: "save/RestoreV2:61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_50"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1"
  input: "save/Identity_51"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_52"
  op: "Identity"
  input: "save/RestoreV2:62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_51"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel"
  input: "save/Identity_52"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_53"
  op: "Identity"
  input: "save/RestoreV2:63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_52"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam"
  input: "save/Identity_53"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_54"
  op: "Identity"
  input: "save/RestoreV2:64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_53"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1"
  input: "save/Identity_54"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_55"
  op: "Identity"
  input: "save/RestoreV2:65"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_54"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias"
  input: "save/Identity_55"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_56"
  op: "Identity"
  input: "save/RestoreV2:66"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_55"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam"
  input: "save/Identity_56"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_57"
  op: "Identity"
  input: "save/RestoreV2:67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_56"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1"
  input: "save/Identity_57"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_58"
  op: "Identity"
  input: "save/RestoreV2:68"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_57"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel"
  input: "save/Identity_58"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_59"
  op: "Identity"
  input: "save/RestoreV2:69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_58"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam"
  input: "save/Identity_59"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_60"
  op: "Identity"
  input: "save/RestoreV2:70"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_59"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1"
  input: "save/Identity_60"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/AssignVariableOp"
  input: "^save/AssignVariableOp_1"
  input: "^save/AssignVariableOp_10"
  input: "^save/AssignVariableOp_11"
  input: "^save/AssignVariableOp_12"
  input: "^save/AssignVariableOp_13"
  input: "^save/AssignVariableOp_14"
  input: "^save/AssignVariableOp_15"
  input: "^save/AssignVariableOp_16"
  input: "^save/AssignVariableOp_17"
  input: "^save/AssignVariableOp_18"
  input: "^save/AssignVariableOp_19"
  input: "^save/AssignVariableOp_2"
  input: "^save/AssignVariableOp_20"
  input: "^save/AssignVariableOp_21"
  input: "^save/AssignVariableOp_22"
  input: "^save/AssignVariableOp_23"
  input: "^save/AssignVariableOp_24"
  input: "^save/AssignVariableOp_25"
  input: "^save/AssignVariableOp_26"
  input: "^save/AssignVariableOp_27"
  input: "^save/AssignVariableOp_28"
  input: "^save/AssignVariableOp_29"
  input: "^save/AssignVariableOp_3"
  input: "^save/AssignVariableOp_30"
  input: "^save/AssignVariableOp_31"
  input: "^save/AssignVariableOp_32"
  input: "^save/AssignVariableOp_33"
  input: "^save/AssignVariableOp_34"
  input: "^save/AssignVariableOp_35"
  input: "^save/AssignVariableOp_36"
  input: "^save/AssignVariableOp_37"
  input: "^save/AssignVariableOp_38"
  input: "^save/AssignVariableOp_39"
  input: "^save/AssignVariableOp_4"
  input: "^save/AssignVariableOp_40"
  input: "^save/AssignVariableOp_41"
  input: "^save/AssignVariableOp_42"
  input: "^save/AssignVariableOp_43"
  input: "^save/AssignVariableOp_44"
  input: "^save/AssignVariableOp_45"
  input: "^save/AssignVariableOp_46"
  input: "^save/AssignVariableOp_47"
  input: "^save/AssignVariableOp_48"
  input: "^save/AssignVariableOp_49"
  input: "^save/AssignVariableOp_5"
  input: "^save/AssignVariableOp_50"
  input: "^save/AssignVariableOp_51"
  input: "^save/AssignVariableOp_52"
  input: "^save/AssignVariableOp_53"
  input: "^save/AssignVariableOp_54"
  input: "^save/AssignVariableOp_55"
  input: "^save/AssignVariableOp_56"
  input: "^save/AssignVariableOp_57"
  input: "^save/AssignVariableOp_58"
  input: "^save/AssignVariableOp_59"
  input: "^save/AssignVariableOp_6"
  input: "^save/AssignVariableOp_7"
  input: "^save/AssignVariableOp_8"
  input: "^save/AssignVariableOp_9"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
library {
  function {
    signature {
      name: "_make_dataset_GkR6eGQT6sA"
      output_arg {
        name: "modeldataset"
        type: DT_VARIANT
      }
      description: "Factory function for a dataset."
      is_stateful: true
    }
    node_def {
      name: "optimizations"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 3
              }
            }
            string_val: "map_and_batch_fusion"
            string_val: "noop_elimination"
            string_val: "shuffle_and_repeat_fusion"
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/normalize_element/component_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 800
              }
              dim {
                size: 24
              }
              dim {
                size: 1
              }
            }
            tensor_content: "\343CW?\306\226D>\227DO\277\026+\005\277\304\203r\276.\'\246\276\313\'6\276\230\217\024\277\240!\250\277|[H\276\321C`\277\264\317b\2776\010X\277K\220\037\277l\303\315\275\235d\"\277\206\262A\277\005\323S\277\254L\214\277\210\275?\300\272\246\035\300y\365\020\300e\204\370\277\344\242\367\277\260\001\237\277\327}\257\277L\002\201\277\356\036\030\277\326\311&\277\302\211\245>\230P\003\276\327\333\025?\365\252\353>\307X\r?\364\032]?s\364%\277\304\024\250\277\200\016B\277\220\236\030=y\"V\277\355\202\004\277\255\030\235\276$Z\237\277J\353\240\277n%\301\2774\036\023\300\014G\275\277\3066\255\276o\310\215\277\336\212\246\276\014\335\323=.\201\t?\035\021\375>\202qU\277\240\202\256=X\324??j\037\017>\232\277q?` \344=\277\010\272>\200\221\307\275\353\023\020\277\227\326\013\277\320\210\255\277\000\\s\277\026$\221\277\303\255w\277\204Fy\276\210\006\241\277\005]\321\277\214\200\225\277\204W\023\300\324\247C?\362\211!>\222\376m\276C\207\313\276\212\\{\277\225\357\017\277\326\221\231\276\377b2\277\216s\313\277C\220\003\300\343\373@\277z\234\026?\366\221n?\241\265N?g7\335>\030,\007?\247\354\245?\260\257h>\213f\230?\215\021\033@xx\311?RC\201?\003z9?\317o\201>\321F9?\332SR?\017\200[?p\261M=\277J\206?\307\007\002?J!A?L\000\217?\260\242\327>\263\n\016?\300\233\266?2d\366>\360\212\241>,c\310>(\210%\277\344\242\305\275di\221=\037-\213=\360\237\233\274\300\324\005\276?B\315\275w]\253?\004\373\256?\2126~?{\013\211?\233\032\013?\265\307\025?*\375&>\336\023\021? \377`\274\r\343\r\277\367rP?\256?\341\276\306U7\277p\255\224\277u\235L\277\360\254\342\277i\316\251\277u<k\277Xu\265\277\204\035\371\276\000\232\225\277\314B\">\230<t\276\376;\351\277Y-\340\277\250\250\264>4\331\261>~\310\026@3\2268@&\244_@\311\355\367?B\203??Jru?\302!\217?\216\236\225>\304@\362>kJN\277zR\254\277\201\027}\277U<\332\276z\033\215\277n\250\227\277n\006;\277\n`\213\277\220v\352\277p\034\246\275U\321G?\001\003\272>\326(\036\276kQ\273\277v\020\365\276[9\255\276\217,\275>\270\342\250=\234\025\316=\340\035\353\276\220u\202\275\342V1>D[\r?-\235\347>\342\267&?\004D$\276A\214c\277\036\277\222>P>\312?\204\031(@\202\315W@!h)@\316d\020@\370\220\200?\356Op?!\357\217>\006\254S\2774w\243\277|&\262\277\351\316\376\275Z\264\265\276|\300\307\276\"\3317\276|\377\201\276\222\\#?\276\355\303?\244X\026@S\034\244?\234(\310>@\314W=\327\341-?\030cS?\006\273H?\370\361\215?0\363h\275\225\235\333\276\246\261\207\277N\004\246\277\016\371\324\277\000\320\243:\006\261V?\300\273\036@\317B\034@\026\031z\277\202\253\222\277<0\313\276\"Fq\277!\276\207\277\221\022\350\276\027\274S\276\310|:>\235\330\316>\302\203\\?\347d\254?e\307\252?\346\260\272?\304 \300>\255>\257>\322\237^?\271\345\001\277\2764p\277\002\336\373\276\357\001\345\276]\243\257>d \223=\036\223\226\276$\302\257\275\005\361\301?\270;\333>\336\326\005?\\\035\254\275\330>\234?\274\320\204?\252\370\216?\327\177\262?%\374=?j\250\213>\360!@\277\236\302d\277GT\'\277W\261\002\277\007\017\330\276VI)?t\365\002?\274\326\017?\305\266\214>%\235\003\276\340\335\206\277q\332\032\277m_\204\277Dr\203\277\254\327\242?\036\312\031?\342\333\216?\274f\370?\264\204\220>\200\274N>\017\317\221\2766X\212>\310\027\202>\321a\235\2777D\326\277\020\304\312\277T\367\377\277\207k\320\277;a\330\277\024\246\177\277\230\016\275\276\027\0219\277\245^\'\277h\356\307>\205\225\020>8\335\014\277\034\000f\277\372cD\277Lp\260\277\375\257\000\300\333g\301\277\\R\202\277\370\014\237=\361.@?\034\021Z\276\371\032I\277\324\236P\2770\3255\275\346x?\275\256&\226\276H\375\337\277\351\371\030\300\2142\242\277\3043\333\277\302\247\252\277\350\356>?\247\347/@\017K\007@\352\306\345?.\334C?\206P\313>c\236\314>\243\251\036@\355\036$@3\254\323?\031\2472?\300\271\362>\212\205j>\205\033\224\277\256|\205\276z\262\313\277n\013P\277\305\243\024\277*\343\234\277\227;q\277\000O\302;\215\200r\276\255\353\223\275\212\217D=\036\020\270\276\204\037\221\277\225\312\034\277\335\213\237>\330B\252>\304\021\373\275\203\301\240\277r\'\265\276\272\303\261\277Q\323\343\277\230\013\355\277\n\026\022\300<]!\300xU1\276\362\322G\277\306O\244\277\273\364\205\277G\004u\277\230,\271\275;\252\233>\254i9>\204\303\027>*~l?\224\347z?\000\246\027?\326\003\306>\344\325\267>@\304e?\316\003\236\277\034fA>^\370\024?\206\022-\275\307o\014\276\322$\224>\254*N\275\225\337\177\277\302\366\032\277\024M\301?0\250\233?l\200\004@\274\300\260> \252\031\277G\020,\277e\226\005\277,!u\2778p,>\317\366{?M\256\031@M\033\023@\244V8@=\210\236?\021\362\234?Hy\222?\303\027\237?n\366\315?/\241\227>\033\351\244\277^>\253\277\220\003\215\277\362e\005\277\3408\033\275\030\322^>\346\n\005\277\230x\205\276\366a\273>T\306\277\275\217\022\241\276\334\216\206\277\241\363\325\276\210\013\336\275?\3771\277\321\022\216\277#\261\224\277\342\222\221\276\325\253g\277\351\rm\277\037\373\200\277\366\253\304\276\372o\251\277\'c\355\276L\273)?`\376\230<\3357\266=\" &\277\366\027\265\276\224\207\206\2774\314|\277\304\273O\277\020\247\253=}\357\316\276\267\265\255\276\362{\234\276\235\r\250>Q\033s>A\234\210>?\010\254>\272~\025\277\000\225m\273\021\331\243\276ee\314\276\264\230W\276\2306\234\277\316&\277\277\367\204\262>\342\377$?\002\032\263>\250\'#=\214=\204?0\253\322?\224>\201?\305\254\221?@\016\261>TM\005?\330\267\246>\214\223\363=\260E\303>\302\312\036?xu\217>\002M\222?*\020\035@jr\365?l\035 @\205\201\030@OG\331?\215\272\242?\375\324\274?\000\251\203\273\203\220\271?\036\374\241?\320\231\003\276\\\314\327\276n\027\037\277\031\222\273\2760_\277=\030Y\243?\031\256\223?\224\206\267\276.\261\233>\330hh>\275\320\261>\364\236v?\003\324N?\254\201\226\276\355`\211\277\261,\017\300\374|\300\277X)\322>\3311\317?%P\260?\312\001\237?\254\tv?\251\226x\276\013\352\205?\240^y= \1779>q\013\032\277\261\032\314>\267\300V?\213M>?\256\003\003?P\230\005?R\203O?\200Z\350=\345\031\223?\206\025\303?\373\362\260?\320\252\030@\251)\003@\024)#@`\373Q\276\310*O\2772\304I\277n\033~\277\255j\007\300]\220\002\3008`H\276$!&?`\331v?\t\350\020\277\032CN\276\315\321t?\324\374\303?\242/\026@\250\231\265?\0065\300?\334\272\242>\214Oe?\374Wu\276\327\266\207?\212w\021?x\357x\277\316?\204\277\026\234s\277\277\007U\277X*\314\277\301\204\010\300X\354\240\277\330\n\"\277\220\020\241=9w\331?d(\207?p\201\217?\215\036\360>\010\"\201=\246\t^?\000\373\035\277\nB<?\326\n5> \223^<t\033\316\2751\242\333=(\336}?\360\034\377?N:\363?\347\267\312?\326e\362?,C\333?\354\224)@\232^\227?vE\202?\324\031\271?x\023d?i\2661?q6\261>\321\306+? SM\276\330\355\247\277\027\361\241\277 \353\304\276\002\3412\277uVd\277\330\3056\277\204\033\037>\316+\031>\024)\210=\212\3458\277\320$6>i; \277\232S\005\277\336(\223\276\334\217\324\276>E+\277j\251\003\277\036\001\237\277\247n+\277\350\205\255\277\rf\214\277M2\240\276\310\210\263\2775\243\321\277)\206\002\3006\262:\277\0208\313\277J\365\272\277L\262\210\277\374|\250\277\360\337\270\2772V#\277\310~\277>\225\257c? \256\n=[\336\024>^\2536?\001{\324?\366\023\320?W\321\030@\240\223e@\260\344!@\266wE@\231\013o@\360\201\022@\246\236\367\276CH(\2772\327W?\007g\242?\201\347\n@\326\241\020@\2264\020@\300\032F@\216\2621@\223\251\003@S9\252?\020C\341=\300\263\353\276\310~\014\277~j\375\276\256\224d\277\262s\034\277\'\306\256\276\024\363\001?{n\037?T&\306?\"\205\275?\300\342\351\275\263-;\277\000Pg?\216\372\247?\372p\331?\034Pu?J<\001?\265\275\215?\331\263`?\037g\372?\257\205T@C#\323?p\277\324?\341\312\023@\354\312\256?s\316\252?\334*\330?B\205\300?\024Ob?#`\324?\236\037\275?\3121\234>\\^\222\277\364\034?\277\331S\023?\347%\377?\354K\330\276\3264\014>\255L0?w\247\201?\310\337\271>J\364w>;\346\235?Zw\221>[y8\276\330a\225>)\327\260>@W\036\2753\321\213\277\006\n\263\277\237c\006\277\200^\'\277\332?\376\276\0230\352\277L6K\277P\246\243=\326\242\235?\031V\005@\035\267\274?Z\315\336?\004L@?\020\264\033\276\250\352\201<\355\347\006\277\2261.>\356\021G?&7\210?\354\342i?J\356C?f\362L?=\327\216?\211\241\326>\217?\005\277w4\215\276\022Y\216\277\207\225\035\277\210\237\227=\345\272\354\276\212\027\t?t\304&\277\224$\030>\215\333\247?\254Mk?\353\352V?\323\272\375\276w\235w\277]Z\265\276\236\';\276\334\301\314\276\320S\207\277=\345\247\277T=\"\3002(\010\300\035\023a\277\270\320\271\277\300{\343\277\030&\323\277\257-P\277\240[*\275\303\263\344>\371\364X\277<\237\204\276$N\263=\266\321\025>\025T\226?\204\"->\202R8\277\272\362\261\277\'\253\266\276\361\340m\276\223c\265\2768UG\277\302\343f\277\023e\005\277\267\361\226\277\000\324\341\277So\201\277\347\267\020\300\032\363\232\277u\221\002\300\364\315\206\276c!.>\224YS\277P3N>\032\311\007?\022\3157?8\334\206=\016\270\346>\3350\265>\354\335G?@\267T=\302\001\347\276\222\022X?\353X\207?\352\310\230?\371F\213?\342o\216?\354\004\000@#\022\r@9\n|?\244t\225?\272\033\212>R\3439\276\321Oj?\"\343b?n\270\035@\002\035a@f\312\205@\201$X@\230\225\341?El\007@\360\033\327=^8\337=+U\026>+v\342>\370\304\316>\205\317\034>B\034\206\276FN\241=\005\316\346\276\215\220\357>f\006J?t\013m?\203\304Y?@\336x\276\261\014\224\277\376\257\203\277`\303\214\277\272\353\013\300D_3\300\312\211 \300&3\005\300\300\301\222\277\004!X\277\3343}>\260\2369?H\254\344>r\021=?\333H\306?\214\034\336?\330\226\001>/z\225=\t8\021\2766\006B\277\200\006r\277\376\370q\277\204H\203\277\304>\020\276\254,r\277\003\260\252\276<\256x\277P\320;\276\"\276\253?W:\234?\250\203\242?\303\036\020?-&\226\276\330\205\230\275&\211\027\276\017\373\226\277\250 >\277z\002\240\277L\313\250\277\301\035\246\277\277\325_?6\233f\2770\032A\277\310\024\233>h\361\n=\340\203V>\273bV?\032\nO?\252\224>?\336\237\274?\251\202\256?\314\325b>>Bq=\317z\217\2776\204\374\276\247\266\274\277\226\3034\277\000Xy:[\316\355\275JM\305>\017\272\"?~\352\261?\"\225/?\034\276\256>\027\373.?\250\022\332?p2\333?\366c\235?\341g\024@@\226\n@\022\0367@j\203\366?D2\005@\322\010\231?\252x\307?<2U?}\214,?(\234J>\345a\267>\351\372/?k\225\212>YT0?\267\2141?\260\347\260>\217\211(?\200\363\"\275\376\215i?\274:\033?S\277\372\277\370\016\212\276\200Q^\276*\352\364=\035v\211\276X\247Y\276\340\347\035\277(}y\277\004\377\005\276 \n!\277&\250\230\277\312C\217\276\337\036n?Z\316{?\224\245|?\363\357$?W<$\2772\343v\277^\210\206\277\033\021\030?\346\235\271\276 \224*<\017\366\251?@\027\217=\002\232+>\315\274\024?\252\033K>\315\242\013?p\013B\275\363b\317?<t\035@\240z+@\032z\r@[\272\346?\242h\013@\324\216\354?\301e8?\t\r\211?\315\315\n@\016\203\274?\240Y\324?\201\215\255?x\024I?\027l]?>q\212?l\314T?\376\276l>\372x\303>t\024S\277n\030\243\277\020\214K\277 ]\263<ci)?\236\253\217?2m0?\020\251\214=6[\267\275\021b\324=\2063\260>\010{)\277\356\2722?$ \007\276\342\007Y>\n\373\237>\260\214\037=/\344|?\205\354\362>\014e\266?\273E\212?\336\206\016?IP\373\276\256m\253?\231\375\2239\201\354p=\2167L>z\360\212?\342\363\027?p9&>1k\370?\363\214\213?\267\214$?\254\214b>\365\215\332>\031\3754?\3061\321?\351\231j?N\013\034?Q\262\327?\244\255\266?^=\347>p\350;?\020\364\206=Lx\265>\337\001t?\000\225n?\250EW\276\363\231\313?\242\236\005@\304\356=?\350Q*?\016~\330\276\333M\264\277\315\004\223\277d^\317\276\2304\022\2771\320\003?5\343+?L\026\311\276\31438?\340\025\231?\342k\316>):+?\314\347\202>\322\312\227?\200k\345>\350=`?\306\345\267?t\007\261?8\353\010@\202e\206?-k\307\273\350\374\210\277\267\033\206\2775\002K\277\301\033\216\276\274U\243>K1x>\026\250\271>@\023\232?\014\030\353>\000\020j\2731\254Y\276\224\025\211?\276`\245>\320\215X\277n\267\250\277\256\323\301\277\210\371\017\276`\205\n\277`\243\013=\246G1\277\306\317\226?|?@?@)\312?\305\337\030\277x\200\202\276v\375/?BgC>\263`r\276P^p\277\2603<\275H%\320>h>\273\275nz\204\277\334\252\004>\346\336\201=\377\241\227>L\352\000?\311\017G?\237*\003?]\310\313\276\000\016\022\300\0101?\3008\2545\300`\010\001\300@\370\271\277\252\240\223\276\004:\014\277I\370\251?\3168\n@\035I\261?\006l @\336C\206?H\036\207?\216p\331?*[\013@\022\005W@r\306H@\356\225\312?<G4?P,\240\276^\230\263\277\270\355\270\277\345\317\026\300,\333\003\300\213(\017\300\362\230\336\277\270\257\221\276&\267#?\276\006\031>x/\026\277M\n\234?\253\232\307=\276\032\212?pY\314?\002\301\354?N\347\241?Q\221\301?4r\243?\222\332\013@\227~\315?\n\341\253>\306\325\203>+\240\001\276\315\362\327>P\001\243>\356\375\334?\354\003\217?\036\330X?\332\177\357>\354\316\225?\177\220\261?K\224)@\264\206=@_E\201?\007\317\n?G\204X\275\006\323\351\277&\333\024\300\nW\331\277\240\200\001\300\213B\363\277\252\031\216\277\324Qy>\314?8\2778\265\257\277\300\272\213\274@5\t\277\234\002\006?6\271\031\276\003\272\246\276\250&\267\276\000s\037\275%\325F\277\222?Z\277zp\000\3001\370*\300\276\2038\277\337c(\277\235\211\034\2772\305o\277\310\361\341\276KX)\277\243\342\'\277N\271 \277\244\375\374\275R&7?\034\034\005@\311\270\232?4\345\211>\221\371M\277Wc\301\276\351\322/\277F\275 \277\000t\344;\276\227Q?\t\3212?\\\371\001?\322\207\002?l\251\310>\212\006\215\277\030\261\353\277S\302\010\300\226\021~\277> \266<\330=\326\273m\363\271>\352\026\345\276\206B0?\372\327\024@\002\360\270?n\362\316?\036u\027@I\335 @|:\244?\002p\222?j\256\321?(+\264?\tw\370?\r=p?Z\223\373>\354U\201=\010\324\240\276TR\353=\211;\362=\372\315q\275\337\022\266\276\350\013\260\275\323\264\342\275H\341\271\276D\036\226>pb\260\276@\001\214\277\0366F\277\310v\261\275\252\2315=D\016\251>\372\311Y?\201\303b?\326\316\277?9\027\370?\376\034\376?\246\260\324?\340\261\260>p9`\275\322\341A>x\262\203?X\201\300\275\340\311\260\276\277\314\246\276\314hV?\352g;\277\275\026\314\277\320\310\310\277\307\210\206\277\354\217\235\277f\264\276\277\r\305\017\277=\200\244\277\210g\352\275\311\340\316\276ih\267\276d\026\350\277\000\356\305\277\034F\325\276\334o\243\275,\274\003\276\036\310\"?\213\036\202\277\226\256\367\277\037Y\307\277\250\261:\277*\205!\277OME\277\021\264\230\277\353\244\023\277\244\373M?\350\024\256\275\331,\017\277\234\001\304\277 ~T\276y\017\213?\312\313\002?\036\355\025\277\373\350v\276\312\270\n?w\356^>/\223l\276:\007^\276%\207\316\277}G\336\277\312\361\302\277\3075\030\300\0325\371\277\177\204\276\277\340e\027\276\320\3743\277|\342\026\276J\220=>\214y\006@>\317\031\277\327\026\371\277RG\266\277\026\335\007\300\000\377\251\276\026Sp\276\237\277:\276\314\306\206\276P%\210\276\321\333]\277:\002\003\300\026}(\300\034\302\t\300.\213\010\300\260\311\220\277@%*\277\224\272\311\277\036\203R\277z\004\326>D.\234?\370\005\204?\316\3313\277\020\240o>\013\223:>e\336Y>\344\372^?*@\016?.\252\003\277\244J\227=Rj\026?\022\364\020@\'\337\352?\320\337\340?\363\2641?\232_\"\277$>k>\320SE\274\020\032-\277\200\351\261\276\343\016\225\277\035\036\341\277\200\374\324\277\032\342e\277|6\n\276L\246\035?\250NS?\233\246J?\344\267u>f;\357=\005\032e>\023 g?\262\005\221?\314\335/?@\326\326\274\0052\263>$\300Z\277$\251Z\277\r+e\277\2344\t\277\240\027R\276(\317\303\276\352\022K\277\210~\002\276/\274\351\276\0330(\277\260|\213\277\327(w\277p\334q>Q\344\226?\264\343+?\267\205$\277\364\212\255\2768\311\254\277\014!Y\277(=\332\277\245\304\004\300\365C\301\277$\351\365\277\243\210\013\300\236\002\227\277\024y\351\277b\346\000\300\tp\023\300Zb1\300H\361\243\277\036s\231\277\225y\211\277\220\003/\277\203eT\277\024\271\366\276\216\320\027>\034\236 >uU,\276=\226\000\277\016\267z\277\223A\201\277G\265n\277\234\003\232>\223\2547?\300\350\227\274\214\327\023\276C\251\261=\244\3113\2765\332.\277\233=\207\276\305$\363\276\003{\372\277\364\343\255\277\254\272\227\277^*\365\276B\220s?`N=?*\266\375>\004\033G\276\026\364O\2779W\006?\225\001\364>\340\330\305<\002\311\034>\020n\207?\302\266\231>A\323c?\026}\244\277\214W\316\277\244\210a\277\036\221\005\277\257NN\277\370\345\351\276\"8h\277{Zi\277^\302\261>{ul?<\321V?\200\t\362\275\356\201\002?3\376,?\320R\330?M\022\352?tE\210?(\250\362=1\341g>\nB\254\276m\215\237\277\252l\212\277\305\254c>-\225\007@#2\016@\323\252\005@\222t.@}\366\020@\351|\327?o\301\013@X\246\365>pN\037?Lo\304> \224J>\342\343U?|k\320?\240$9>\213\350\032\277\022\324\366>\212hK\276\347\226/\277\220\310\'\276\254\262\005\277\356\260J\277\350\377\030\277#\365\250\277xmm\277\301\305\271\277\261%n\277\032C\267\277\030V\264\277g\210\211\277*w\310\277\237*\240\277\341\323e\277\342\213\226\277\220\221j\277b\025\033\277\004\n\355\277\017\264\231\277\001\317\233\277Ro\274\277^fi\277\302\240\r\277\214\360\223\277\327\217\022\300\200\005\223\277\2063\341\277\034\335\024\300a\245.\300\350\023\372?\304W\362?\207\031\n@\374\275\022@.\026\243?\013@\003?x\220\223\275s\224\236\277\340t\007=\316;\037\276\250p\235\277<$#>_*\207?L\375\021?*y|\276\310\'\031\277\255\352\236>\212\372\201?P\322\337?\317\330z?\004~\270?\326\336D?\010\345\027?\211\342\320>\177\240\201\276\020\234C\277\232\346I\277\000\361\206\277\213\310\361\277\231>\215\277l\374)\277\332h\303>\266\351\250?f\265\332?\311(\'?&uk?\230\035\315\276:\215\265\276\344\035d>\264\263:?\254\034.?RCi?\007\334P?\004\276\037>\362\020\222?\300h\027>\202\030e>\343\337#?Y\232\355\276\360!\260\274q\276\232\277\300*\220\277^\027v\277\242Q\254>\024\244\376>H-7?\201\247\003?6\233(?\252\'\232?\305\267\366?AS\327?\251#\255?V\211\262?\354\232\334\276\230:%\277f\344Y\277\325A`\277\366\223\337\277\262\2108\277\"\317\236\277\306\021\216\277\003\222a\277\231\307\307?0\365\363?\221u\224?0Z{?\320\rx?\3465\365\276I\340\256>Fq\226=\371\r\363?\344\357\221?\214\236\217>\365D\247?\010\331\372>\316\364:?V\304\247\276\\.\305=\371\315\350>)\314\362?\010\013\206?\274\341\202?\370`\r?\266\206\n?\030<!?\261\237-?\227\2646\277R\003Z\277&|a\277\370<\353\276V\371\253\276A\371\255\277\030\024\003\300\373\243Z\277g\276\"\277\274\241\275>\263\014\007?\352 \302\276 1O?\260^\336?tA\221\276d\225\030?\350\004\250=J<\023\276\350\036\037\277\234;\226>\230o\243\277d\337\220\277\307CU\277\2108\341\275$\'\217?\n\301i?\302\023\202?U\020@?\273\373\304?N\t\224?R\246\325?\357Y\354?\007I\007@L/\\? \316\207\274Y\256D\277\256\243\360\276{\334\004\277\2646\276\276\331\213\261>?\007\317\276\235W\004?\225\263\355>0\213\265=O(q\277H\344P>\367\365K\276\032\3315>7\271~?CY\300?0\262\341=\024\037O?P\233\376>)}\313\276#\365\377>\353\013$>\260{&\277\276\220\205\277\013\241\206\277l]s?\020\200\262?\316\316j?\230\327\301=@M\360;}\212\202\277I~\\\277\000M*<\202\243\005?b\333\242?\030\306\310?\226\021\234?R\245^?\026WB\277\373\337\271\277\330\266F\277PJ\305\277n=\236\276\330\373\302\276\214\"\361\276\376\024\312>\244\361\377>\\\2042\277\334\003\224\2770\215\257>f\305\020\277&\366\374\276\204A|\277\237l\217\277\315\320\227\277\035x\253\277\237\340\265\277\222\377\372\277\214!\325\277p\251\345\277]\271\355\277\200\324\016\277%+K\277\032\336\237\2778P\255\277\000\234\026\300>0\316\277\267\215w\277\355\232\210\277E\005\364\276:#?\277\'\325\365\276\232\223:\2776\275\262\277K\035\036\277\033\367\242?\210\033\010\276\225\006<?a\001\177\277\334K\204\277\220@t\275/\214\256>\362\223\213>\205#!?\312\000\367?<H\200?\305;\035>\203K\215\277\n\311U\277\212\362\352\276\244\315\224\276\356\013H\277=\227\030?\234)A? \345\017>\020\373\025\276\265 \030\276\210\202\301?\342\353\301?L\030\257>\3245\364\275xz\344?F\207\234?c\334!?u\312x?,\200\364\276\352$\003\276\272\003\340>\354\312\241?\276v\221?\224\312#?\311 \226?\231\000\304?aV\316?\006\371R?Z\331C>\355\314\331\276z\031)\277\247\310\002\277*yJ\277N\264K\277\236\177u\276\250\244\020=\315\002V?:Q\332\276\200*\004\277\260A\213\275\024DT>X\310\273\276\236S\202\277\022v4\277\370\351\225>\316+\007\277\303\177\235>\t\036l\277Y\031\336\277G\306\320\277nd3\300\302\226\'\300XIO\300\374\271P\300m\"\020\300D\246I\277\274\255\352\277(\256\314\277`\351\014\276\2316\272=\303\226\326>\301\361\340?\020\234$@|\204\242?pc\324?I\264\215?\277`\224?\030\022\266?1k\354?\206`*@\302\267\335?\3320\252\276`)~<\272{\215\277\340\234\306\277\021\017r\277\003\347\344\276^\253\252\277\266\243\213\277\342\373\311\277\274\345_\277\220!->B4\373\276?\265\211\277\205\\\234\277\270lu\277\220\302\335\277\256\264\342\2771F\251\277\320k[\277\261\251a\277\004l\353\276Bq\232>\362P\222\276\024\023\212\276\020\350#?\326\207\321?@\035\202?$\243\"@~\r\031@s\226\002@\260\337\373>\372B\310\276\\%h\277Oi\357\276*\001@?\366\307 \277\302\307W\277\000\314\256\2727Hh\276\016\317\233>\274\030_>\374\351\226>,\177&?U\355+?\204\326\232=\2169R=\330L2\276\030\262z\276S\253\272\277\236Q\313\277\215\t\310\277-\345\361\277\265\263\243\277\311\341>\277aX-\277T\274\322\276\314\300\006\277\365\257M\277ZA\351\277 \322\242\276\3509,\277:X\210\277ZM\262\277\025I\260\277Ld\243\277$\321\324\277\271\247\345\277O\357\006\300\204y\026\277\034=\324\277\007l\247\277\320\320\003\300Pq\260\277^y\313\277\360\245\326>\217\322\203\276~\025\254\277\342\016\207\276\344\2657\277\312\247N\277\000\316x\274\242!\014?\210D\325\276rGI\276\277\316\013\277\252A\260\277R\352\274\277v\024\346\277\271\252\321\277\360\235\013\277pA\026\276\327\r\001?\327\372\365>\251\017\210\277\020\202\353=\276{\017?~\327\t<\234\305~\276\247?\246\277\020}\314\276\2479\021\277\333\237\206\277\363+j\277\332b\215\277\370PE\277a\277\326\276\272\351\354\277\265\220\271\277\260:\237\275\022Vp\276f|\020\277\tR\205\277\207\\\024\300l7\352\276\370\211v>\016\215\002>\301\311\n?\022\215\272?\214\362\323\276\262\'\220\277\211\310\001<DHk\2772^Q\277X\177\203\277\273y\230?P}>?\264v\220\276\020\035\265\275\232\037\231\277C`$\277\376\255\253\277\200\254P>\304\240\016>\266\336\326?\366\370\023?A.\006?\327O\341>\276\031{>,\253\237>cp1?V\307\353\276I\0131\277\334$\333\277\354\221\233\277\000\330\346\274#\330\250\277\350X\340\277g\0313\300BP\022\300/\335\215\277\020\326\"\277\240\366}\275\335\0276>\327\222\303>\313\352\204\277U\332\213\277\360\216\t\276g;\215>\245\371\207>RB\365\275\313\245\256\2774{\334\276\335\210\322\277j\3629\277^,\032\277\313\223\271\277\177?\320\277\001\032\201\277\376\211%?\214;\216\276,\323t\277\312(\244\277\356\035\246\277\200\177\016\274\375\322\214?\020]\"=\250\200\344=\203}?=\017\327\033?\322\215\251?q.\260?\020\365\014>\362I\373>\000\306\315\274nc\221?B\032\363?|3L@\361\206f@\216\323\372?k\034\370?vTA?\267\251\026?\337\214\253>\022\250\036?\304\242\215\275K\010\343\274|\221\344>\374\030\356>\311ZV>\017f\271>\266\267(?\022\017\343?`\201\227?I\265j?\237\372!?\334\017K?F\345j?s\337\246?\022Y\336?.\022\246?AQ\320?L\254\357?\032X\255?\374\213\336>J\364\274>\354\255R?|\005\351?\004o\035@q\375\321?\241*\316?o\323\226?\315\345U\2776\366\320\277\222\206r\277F\004\264\277\350\271\201\277-@\222\277&\231\r\277\366\020\214\276\261T\227\277\3540\231\276\306\331\227\276\006\006\005\277s\216\303\276\000\212P<\031bb?C\376\016\277\017)\317\2762\316\007?\240s\026\276\203\242\224?\343\261Q?@Q\246=\027\204]\277j\262\232\277\347O\n\277\374\253\214=Y\013\254\276,\216s>U\023b?FQ\244>B\216g\276\263\236I>\360)&\275\361\301\262>\372J\334>\030\206\\\277\354\0349\300\317hS\300\037@\005\300,M\207\27724\313\276\'\247^\277\014\304t\277\002_\020?\221\343\274>|\3023?\242\257\201?\000K\272?\230\372o?MV\007@\2643\314?p\310\357?\342\220\376?2. ?6\301\202>\210R\311\274\306\322\376\276\010\325`\277R\364\216\277\316{5\277\'t\246\277l\2066\277\200\'\367;\372\362\312>O\003\235>\341O]?=\364)?\355\236\350\277\3214\317\277\346\367\336\277\224\256O\277*\375\324\2778F\022\300\030I\356\277]\305\330\277\000p\014\300(\246G\277\344\'\372>\010\016O\276\262\r\001?\256/(?8C\252\276\216\272\244\275\027pf\275\265#a>\304a\270\276\271\2775?V%W>\245\010\'\276\016\262C>Z\305z=\210LS\276\355\360$\277\232l\306>>a\022>\265\364\343>\275FY\277zP\230\277\r\253)\277\366\3430\276\207\023`?A\324\304?\205>A?\210Z<>\244\211\321>\000wW\275\024\001\304\275\312\307\313\276\020Lj\275\264\341=?\370\241k?\300\031\022\276#\244\346\275\322\3226=\372\321\242\274\020C\320>\232\037\341>V\026\032?\346#O?n\274{?\177>\013?\267\036b>\022\021/?\245E[?\334\374\336?]\346O?\376\362\343?Vr/?\330}\301?:\031\364>h\202\255?2o\331?\013ek?ZB\022?\032\243\241?{M\241?\307\200\277?\014l\206?\210\270\366?\306\211l?D~\216?\331\362[?\374\256\213?\226:v?#\370-?\375\205\016\277\357v\265>I\222\017?\247\250\n?\237\034\223\276\036\306\014\300\343\244E\300\360\201\346\277\314@\206\276\232K\255?\214\323;>\307bN?\r\035=?OoC?\346M\177?\207\026@?\236\362%?I\034\020?\013\265\311?\353\331\305?\370\205G?h\3242?eZ>\277\352\241\277\277\246\276\n\277\341\202\254\277\370@\373\276\340,8\277TI\264\276\350nA=\330!V?\2461o?fY\226?\275\375\234?;\322\363?\"b\246?\271\013o?\271\221\322>4C\331>\232\370\355=\336\343\317\276\376o!\277\220D\252>\354>B\276$\203\220>2\177\372>\360G ?\372\244\344\276\220\332\232\277\3222\020\300l\3026\300(\264q\300z\'>\3006,*\300|1b\300xb_\300B\2757\300\001\2533\300\216\306\"\300\354\362\022\300\006\265\r\300\256\211\016\300\217\020\n\300\220\314\375\2777\356\277\277\000w\351\277\235\302\211?|of?\341\2663?\203\225\214?\350\371\026\276%&\020>\312WG\275\242\274\214\276\330\027m\277\356\033\353\277\276\305\"\300\260n \300*\327\314\277XQ\030\277\200\372\000=\315\r.?\340\226\317\274\333\036\243\276a\014\226\276`\030\361\276aC\225>\230\211`?h7\362?l\365\276?\027.;?\316\201h?\352\023\212>\035\325\212>\366\204J?\034\327Z?ew]\277\022#\212\277\235\t\206\27721L\277ve\212\277c\275\217\277\n\315f\277\360\310l?_S,?\355v\251?,\025{?/\303:?@\\\376>^\376b\277\006\277\315\277\366\203\007\3008\024\304\277\235\232\245\277\307\354C?\310\020\212\276\200@\314;X\333$\277\211\330+\277&m\274\276\000^%\275@].?$\363\315?\315\021\'?\0023a>\000\006\254>\256$o>{\027\016?\027Y\306\276B\0345?\264u\"\277\036W^\276\236\341\327\276/[\245>N\217\034\276\217S\037\276\001\025_\277\352Q\360\277\330\010J\276,\224\355\276^u\267\277l\336\224\277u\231\035\300\276+/\277\222Z\224\276\222\256\230=2\036<?\213K\247?aT\245?\304\310O>\304,\331>\340\347+\274\226\177\211\277\213\207\270\277^!\002\300\274\333\020\300\217\220\223\277\333\035\224\277\277\205\233\277H\200\217\277\034\202c\276\350\322z\277\230c6?\212}T>i,t?\217\361\240?\236\253n?Z\300\203?`\006\270>e0\203\276x\275E>*8??\204\370\226\276\332\207x\276\220(\354\274ys\234?\222\307\016?\306L\\?\260NT?,\320\352?Q\223\002@f\275\"@\007\324\014@\205\303\032@al\022@\030\311\371?\033}\355>\026\"\260?a\364\221?K\362\223?\314\366\272>z\225\007?{\360\007?+\177\274>\312X!\277\000\230\031=\207S\210>~2\323>\264{\342?\213i\023@\305\251 @\372\303\013@\312\240\007@\365\222\373?N\210\366?\306\016\024@\311\317\365?\300\217J@=?\032@\362\256\025@\314y\310\277\026;\251\277Y\312\223\277\303\342\200\277?p\203\277\310:\246\275\337O\334?\216\034=?\224$\346>r\010\014\277\232\013W\277\340\217\304\275\356~*\277|\335]>?\344\253>\033\266f?\327\3072?\3026\343>\210!\206?r\230\263?\271\250\260?\030(\371>\227\257\r?d\216\304>\366\306\037\2773\"\372\277\361\321\272\277N\236\230\277m4\203\277\320\273\023\277\030\002\304\276\000K\311\272\261GM?M\251\t@u\226T@Z\235x@\010b6@\223\320\333?\336y\023@\200K&@\016\014\003@\322\244\013@yw\230?n\231\020@#\234$@\3704Y>v\2679?^\220P?O\320\226\273@\242\313>\341\333\357?$F\223?9I\371>-\303`>\220Gd>\213?t?\331\246\206?\027\333D?!\357\342>h\005E?\341e\235?\017\260\373>\300\376\226?|\201m>SS\225?\014Z\210?J\2320?\260\370J\275\263\346y\277NU\215\277v\r\023\277\371ks\277\200\340M\277\250y\023>\315:\264?\222\272\263?\226\003\220?\230tH?\216B\270>\0007\255?c\254A?\210*\316=\247\226\207>Y]\364=\356\265\257\276\253^\206\277\210\022\200\277\360\2350\277\004\225\220?\004\3568\276\360\212\263\276>\342\037\276\231\260\013?\312\325\217>\272@\325=H\256&\274\237K\031\277\261\001\272>O\354\210\276p\346I\277z\351D\277tsP\277\230\260\236\276\204\017\217\27786J\277>2d\277\264\031\277>\326b\272=\3166\005\277\251`C\277\354\006\211\277\010\031a\277%\326a\277\376\316\303\277\370~@\276\374\277\320>8\222x\275\267\233\273\2764\306\276>\206\222:?\312O%\276\3408\322\273\260A\000\276x\375\341\277\270\010\276\277\356\243\026\277Q\355+?\240\347\214?\310\270\025\276\221\324t\277\266\370\252\277\366\265\013\300\365m\304\277U\325\255\277\302\256\264\277@\034\325\277\372jL\2774\254S>\230}o\27756,\277\014\304\353\277.\214\"\300B\024\236\277X#\005\300_\213\335>\342\241)?\347\267\223>\264(\212?@Ct\275_\027\204\277G\214\r\277^\243\r>\270\"]?\263\275B?\356P\255>M\360\222\276{\217\367\275\r\353\004?\242*\240?\242\324\250?\200Nm?\220%\355?\351\336\306?|\253\343??\036\276?\237\227\031?\310\212\273>\030\3553\2778\256\202=\336\235\034?U\322\244?\310\213\314=\361h,?\330\331\326?\253\345\267?$\tW?|]\027\276%\021\300\277H\334\316\277\000}\177\275@\010\325?\302\374\374>rl%?Q\354\350?|\300\033@\235\344\322?\034\016\360>\232\305W?\320\241\237=\003=\247>\312\251s\276\223t\006>y7\'@M\274-@T@D@\032\366\013?\020\330M>\234\361\261?r\237 ?M\013\031\277\374Ik>\022\263\022?\320\024\371\274\357/\241\277\252\266\027\277\000`\033:\255\266]\277\226d\213\277\300O\255\277]\034\350\277::\365\276\234\240P?\256v,?|\206=\276p\003V=\334\346q\274\\\321\247\277\214S\244\277\200\263\215\275\276\205\200\277]\265\247\276\320\233\242\274\373B\330\276hjF\275\246\373\213=I\347\"?v\362\250\277\204r\357\276\377w\221\277\304G\331\277\032)*\300\300\213#\300\216\306u\277V\242N\277c$\207\2770\"\232\277&ox\277=.\361\2773\252\220\277\246\323\250\277\3328p? U\332<\222rO?\020.I?\300l8<\306\021\274=\3513Q?\300\342\t>\010\323\262\275\332\336\024\277\222G\027>Dw-\277\324\235]>\257\340\246\277\347Z\321\277\r\222\245\277\300\326\311\277\270\nN\2762\352\215\276jy\277\275f\332\366>\324\244f?\264\030d>\202Y*?\210O\212\277\200:\267\273\316\2108\277\027\224\210\277\030w\321\277\360\202\203=\344eB=F\302\212\277\214\302\225\277\014\362\275\277$\301/\300\003@\364\277Uu\330\277\034\253D\277\220\371-?~U\257>\337\213\313?\277\232\000?VK\307>\030\324\301>\270W\207?\335\005_?\320A\245\275D\246\323\275\022\365\255>X\331\354=\330\373\200\2766h$\276\310q?\277L\377\225?\322V\305>\341D\313\276\252|\221\276\202\024\334\276N\2728\277J\036\200\276-\230\\\276\336rg\277\264S\007\300\315@\004\300]^\350\277\230\272\017\2775\210\343\276\317\230\376>\033\371\265>\206K\017?\332\255v\277\333Z\334\276\030\024\230\277&)\273\277\\\032:\277;\335=\277\3423\021\277 \025\217\277z\376\343\277\251\001\307\277\000h\340\277\r\265\257\277t\025\030\3002\230\311\277-\365\307\277F\321\351\277\000\371\345\276\302\246v?nhR?\024\032\357?{\241K?\206W&?\224\212~>\352\030\241\277F.\203\277\217\021Q\277\275\304\265\276\027\"\211\276>;\210?\374@\010?7\323\213\27678\213\276Vb\222>\366D|?\256\'\310?\375\212\320?\264\302\203>\206\304\207>Aiq?\374!\357?\316V\262?\356\233\302?\037\371\005@\200\007%@]&\340?\343\243\233?@\2222\276\022\233\376>]\001&\277\300\216\317\277\240\203G\277_k\026\277\250;^?\030-\366?\200\013\345?\217R\025@\370\2647@V:\t@\253\034\277?\014\360\237?\343xg?\276G\256\276~\365\333\276\315\222\263\277h\251\026\277\350\302P=n\023S>\324\227$?\326\212\323>\302\373\201?l\341\247?\272\267>?\342\211\333>\177q\r>s@\021@r\001\330?\n\317{?M\206\262?\241\302\255?\220\022\350?`u\357>vIK?\304\224_?\207{\210?\264\341\357?\347g\356?}\373&@\003 \272?\201\325\375?b\325\212?\214\210\252?\210\311I?\264\271\201\277\206\017\261>W\347\305?\334\372\205?\006x\264?\n\301\306?\006\365\307\276\352\330\347\276\237\323\365\276Z:\004\277|E.\276\263T\341>\227\023\361\276\2779\274\276\250\2170\275\247\236\000?\364\347f\2773m\213\277\330u\001\276\270\252\372\276(i\003\275\2772\001=^\032\350>\016c\342>\252\271\254>\254j\275\276\243\"\243\277\240\247>\277\001Y\265?\005\311\257?\235@\320\276\236gE\277mo\216\276\237\362\001\277P\261\301\274j\t\225>\253\363)>R\275\346\276\000_;=x\324\014\277=\020\222\277\200\r\003\275 \006\210\2761ZK\276\"e\025\275\"Y\352>H\275\036?\236\307\'\276\253\3313\277\036\\N\277^\273\205\276\374f]\275\206\353\257=1\326\375\277To\036\277j\252\253\276\322x/\277\034A\306\276`)\272<j\206b=S\013]?\323\327\337>\357\364\275?\271\363\264?\214:e>\204\375!?\340\261A<?\225\212>c\313\237>\0042;?P\037\002@\002\324U?\204\205J?}\376\305?Pg)@\026\210\274?\206\245\270?n\237\216?V*{\277\261\266\300\277\213_\"\277\371\3157?:\221\006>,`\372>\364f\021\276\227\376*?\230#\261>\211N\227?\322V\004@\271\350\300?\005c\t@\004Z\310>S\217\213>hKO?\232\203\312?\210F\315?TW\352>\274\230\370\276\'v\211\276\317\2031>\376\367\204\275\317uT?\035\254\225\277#u\316\277X\275\225\277\375E\316\277\\\224\205\277\\\265\300\2760\240Q\277\335\271I\277\212-\222\277\301\361\223\2775D\343\276\005\361 \277\254-x\277\205\365\035\277\352@\220\277\334\350\225\277\265\366*\277\000\"]\277\326:\024\277\327\326\274\277\002ZQ\277\333\"\005\277\241gm?\347\262\311?N\313b\277\304\262\276\277\354\027\022\277\263jg\276/\323\016\277\\\254\232\277\224l\253\277x\347\311\277VB\000\300]\225\255\277\366\232\303\276*\007\300>\334\264\203\277\370\002R>Ks\265>\220\350\003>,\026r>\020\330E?X\026\326=+ +\277\221\036-\277\343c\312\276j\026\250\276Tw\004?\n\333I\277\213e\271\277:\341\254\277\372\tX\277\306\340\253\277\270\030>\277\212\300\240\276\2207\322\276\265B\256\277R1\310\277\311\376\"\300\342\215 \300\2007\261\277\202K\353\276P\250(=\276[\205=\330\305/?\211\234,?8\271\212\277\342h\023\300\365\2141\300}\206@\300N\017\256\277\"q)\277\342\2118?\300\363F=\250\200\223;\232\315\240\276\266\217e\277\300\022w\276\242\277\273\276\356\251\341\277\224\030@\277\276\207\240\277\001\325L\277:Rj\277\210\030\213\275S\331\261\276\250g\230\277M\267\005\3000\371\304\275\322(\030\277\226\006\347\277D\221\214\277\023\200T\277\372?y\277\314 \236>\246}\264?r\306\216\276\316\263\016\277^Yt>\356-\032\277\256\025f\276\006;\030\277\233\2234\277\224>\202\277\310\313\204>p\233\314>\2763!?fC1\277&G\213\277w\372\316\277r\300\347\277\327\277\300\277\332\263\240\277\372\334g\277\372\340q\277\320\'U\277%\260\306\277*\361\365\276\263RW\277|L~\277u\013p>\320!D\277\340\036q\275n\307\220\276\016\372!\277\262;\"\277\270\030<\276\366\245\316=\240\350\351>#\244[>\325\210\230\277\2461\246\276\377B\233\276N\010\022?\336\266L>\t;\225?\212\263\207?^\366j?\230\315\365?\327\\\370?\362b\t@\216\232!@#\211\355?T9\276>\355\331\t?\340\036\r<\005\017\250\277|fG\277 :\n\276\343\370\360\275\036\355\205?\203\226v?\344\246\265>\340^\004\274\212\2721?\374\'A?\360\202\200=\010\263\032\276\233\007\257?C\343\217?CB$\277$\262y\277\236\303\330>\223\277\010?\204\242\313>\262\315\007\276\264z\367<\004\213\230\277B\1776\276F-\321\277\343\251\347\277\233\372\270\277\252}\250\277M9\350\277\367#\316\277I\025Z\277<\232\035\277\250\032\357\277#\247\271\277\362{\364\277\222\'\203\277\374BI\276\3479I?Q\025%?\024I\302\276\310\265a\276\250W\343\276\227\tw\277\356M\201\277\365\000S\277\254a\225>\214\016\231?o(=?\216\204|?\310\375\032\276\312\014\346\275\376\317\017?\220\013\314\274\204\264\223?\340\367[\275\231\313\331\275\203\223\303\276\324\240Q?\262`v>\275\263o?\304}\264\276\252\356\354\276\022\010\340\276\026\337\251\277bq\315\277\330\357\235\277\037\250F\277`(^\277\377\201H\277\246>k\276\303\n\274\277\270~\200\277\256\357\207\277YJ\273\277S(\307\277\356\375g\277\000\230\335<\227\305\216=\020C\177\274\000v\356\276\310\226M\275 y\035\276*{\263\276 \345\337\276\240\344W\276\341\252+>\317\205<?t\000\303>\203\240\321\276<S\216\277\220\037\306\276\352LX\277\256\002\321\277(nj\276\342\332\246\277\311\376H?\022Z\340>rw\264?B\227\t\277\017\226\253>Th\021\277\341>\240\277\334\304\250\277Z\333?\277\206.i\276\353\346\221\277\022:}\277\275\002p\277h\\\231\277\230\302\270\277\007\273\317\277\004\271\021\300Z\026\325\277\030s\031\300hs\351\277@\n\340\277\022\216\007\300\005\214\251\277 \267E\277\006I\207?&\242\307?\211<\213?<w\226>\205x\303\277\245G\030\300\316\017 \300\266\375\233\277\240P\000\277\r\234\225\277\365\307F\277\025\251t\277\302\213U\277\300r\361<\036\237\267\274\330\242\310\277\313h\025\277\302\240\200\277\034\263\025>\240\365\215\276\300#\271\276\022\300\215\276@.c>\225\300\261\276\030<?\276\034\361\235\276|\275\222\276\372\262\332=`}\300<\034\314\253<\265\245\352\274\374\234\033\277\376\326Z\277\206\014\215\276e\246c\277\243\355\313\277\214\276i\277n\327\245\277\260\331,>\n\230\215\276:\001\224>\032\356\330>,]\210\275\033+9=.\3667\2768rB\277\3524\236\277,e\r\276\255c4\276\346\366\311=.;l>\322\020\213?b\220\316?\261\254\036@\320]0?\032\367\256>\362-\013?\212P\300?9}\232?l7\002@\246\371\255?H\017\252>\006\332\204>T\264C?l\307\n?\320\373\375\274)a\343\277N\311\334\2776\245D\277\250$\256\275\252w\007\277\302\002s>\214\203\256<\356\031\304?\270\270\321\276z/\200\276\301\263o\277\303\250L\277\260\372y\275ft\347>\200?\002\274\3421\265\277\204@P\277\360\361R>430=\376\276\202\276\036\032\034?\254\313%>\307X\351>\304O\220= \341O\277\262\311\366\277\362\374\213\277l\313#\277\252\213\317>\204\002H\277\265qw\277\304l\250\277\247\326.\277t\250\371>H\233\275?\204p\204?\002\217\221?\253\326\221?8\377\340?\245R!?\325F\254>\320P\313>\332$\256>\332\222\271?t\345:?i\221\031?\360{h>\226\231\177\277\300F\262\277\3271g\277\307H6\277xk\367\276\226\322W\277l(\200\277\004\022\020?\226\203\223>;-\215\277D\370\315\277\211\002\341\277\002|\237\277L.\r\300\241\206\002\300\202\177\355\277X\347\363\276l\341\361\277\"\002\344\277\334\324\261\277p\333\332\275\227q\031\276\001O\336\276l\2666\276\3071\320>i:\360?j\032\247?\003C~?u\343\362>\240c\023?\260\317\327\275\237\262\343\277\346\013\023\300\034;\332\277\351\303D\277B\302\313>j\234\315=)\2430\276\266\310w\277\200dg<\335\032\306\277\233\301\235\277\350\362\264\277g&\206\277\362`M?\2029j?\250c\277=\357@\244>\014\006\231?\350\024A?b \345>7P\232>\277\037\t?\235\374D?p\007\316\276\333\343\177?V\317\303?F\221\251?\202\350|?` \310?\254\210\201?[8\227?\264\305\316?r\263\017@Gn\373?\004\323\350?\263\277\232?,\004S?\276\254L?\340\206-?\233\245B\277\222AP\276\221;\206\277\314B7>\330]\245>\3404q?\330y ?>\3158\277Q^\037\277\215\017\251\277\032\227\334\276XN\214\277\005S\215\277\340\036\312\274&[\024\277\336P*\276\010\r\"=\232\013$>\276\243\354>\274\333I?\204\210\006?\320(\352<d\332\225\275k)\274\277\\\223 \300b\212\257\277\323\322\205\277\326g\036\277\007\366\317\277x$v\277\253 \267\276\'\271\321>\271:\220\276\013\016\022\277.(\256\276\020\016w\275\363L\245\277u\246\206\277 \211f\277\034ff\277h\211\225\2776S\251\277H7\350\277L\315\214\277\323\361Z\277\265\216{\277\030,\223\277\010k\264\277\2200\252\276N\351\003>\200\366S\277\260\205h>\203S.?\316]\204?\326+\r@\033!\360?\020)\310=\261\347\034?\215/\025?W\362\370\276`.e>\n\314\270\275\370\016c\276\361\3355\277R\305\023\276\314\030\222>\270\026\235\274\242\3330\277\367\007\235\277\311x2\277\026\361\013\277\023>\336\276\200\014\321;\362^i?\360L\240=\355\210\016?z/#?\207dq?\310P\207?\331\277\314?z\362+@\215`\237? \343\204=l\250\350=\024\326Z\276\334a$\277|c\257\277N\203\352\277\335d\007\300\2736C\277\250\034\200\277\212\371&\277\251\230y\277\230|\235>?-\214?\203\255\034@\337]/@\256@\024@\201u\023@xl\004@\365\022??\220.\214?h}\207=\234I\207?\026\276\217?\020U\034\277\276\331\303\277\006\234x\277PT\353\275\222c\316>\244i\307=<XP\276\230\234\026?\253\323\017?\274\300q\277,\216\207\277\177\0040\277\331\032\214\276\2522\240\276\330T\210\274NU\327>\372\177\225?\002f0?`\266\276=\010sa<\300\n2?=\262\347>\273\214\315?\302U\320?0t\332?\247\266\257?\231\301\006@G\020>@\254|\376?\233\310R?\3116\254?\262\231h?\234\213\273?4E\207?\2668\262?f6\277?\211\371\252?N\232\376>|\032\177?\242\234\277?\346\260r?\010z\301?\352\262\344?\316)\301?\030\"+>\273\247,\277\256o\231\277\3074%?\201#\004@@\313r>\356q8>\307\004\252\276\354\2060>4`\213\277\224\354`\277\024\322\204>\360W_=\347\370\022\277\342\201\271\276@k\307\276\366\313\003?\020\276\324?(\256t?M\236\020@ur7@m\010\'@\212x\267?\3767m?@\364\033<<\277\201\276\026\241\245\277\200\333\032\275\266\210\226\275\363\2041\277b(3?p\002N\2762y\251?\334Q\254>\270\345,\276\2153H\277\\\312Q\277)\317T?\223\330n?\341\227 ?b\247b?\010\nS?\210\373\272?\200\252\226?W\372\315?\021\317e?h\342\364?\374Z\200?\264r\233?Z\250\234?\310\252W>\212\025\251>\"OJ\277\004\345\017\277n\266\206\277G\200\\\277\271\270\017\277%\335\246>E\023V>t\005\202?\323\244p?\326\314\203?\316_2?\234\314\007@p\206\274?pA\002@\276!+?\022Vt?\036*\320?\365\\\035@\000\316\013@\236\2009@\353\335\020@5\223\020@\3174\343?3\014\317?({\211?\324\364\t>T$<\2773$\306\276m\2722\277\036\334p\277_\340\001\277k\274\225\277&}\331\277\230\261\274\276me\037?\3553\273?\220\225\343>\210\252\327>>h\351>g[\223?.\352Z?\364\006\">h\n#>\221\306\014>RJ1\275\262\201\201\275\340\034\312\277\352\210\022\300(zK?\177i\023?<\370\303?s\252\221?\243j\365?d\224\231?@3e\275\215(\027?\232\310\275?gG\245?+<>?\\\332\240?`_.?V\031\207?0\206\216\275\2712\274\276:Z-\277,\341\221?\200\355\203\275\233\\\277\274, 3?\305\210\211?\343\251K?R\2002?]\317d?\210\242\221\276\220\3365?\"\354\021@%\227\031@\371Q\321?\246#\265>\0344\n?/\205\202>\376,\252\276RJB\277H\363\r\277?_k\276j\345\300? \243\370=\026\240*\276\302\260X\277 VU\275\352\265\372>\234\207\340>\344sX\276\2373.\276g\301\224\277sb\256\277\314\330p>\344\223+\277\330\247\350\277-\247\021\300K8\262\277\'l\323\277\206\376\021\300\203\271\242\277\251\205\310\277\022M%\300s\303[\300\240j\267\277\034\260S\277\247{\247\276\260w\270\274\271[\367\277&\007\255\277\347\034;\277\025\336\247\277\226r\206\277\240\316\352\277\203A\023\300\350n\370\2777\347\250\277\2547\324\277\217\341\342\277\244\374\025\300\254F\013\300\230\202z\277\310O\244\277\222\362p?\366\002%?\367\002\220?2\013\201?\255|r?\033\241~\277>Q\265\277Vu\217\277\004\275\321\276E\034e\277\'7\226\277\374\352\306\277r6F\277\204\275\t>K\354\331\276z\026\004\277\234\366\n\2772!T\277\033\373\203?\321\255\260>\370W%?\330A\233=`\366\014=J\211\010?N\342\242>\362\307\007\277\360\334\001\275<*\350>`\n\353>C?\276\27686\203\275\226\253\206\276\305Y@?\310\374}\27606e?\207&\005@\021h\026@\337\3602@\214\360C@\235\376V@ZU\354?\001\014\336?\243\302\033\277\326g\337\276\214,\241\276\242\211\302\275\002\340_\277\030D\236\276*\0047\277\331A\366\276\357\001\243>Xa5?\273\350]?\200i\357;\362,\202\277\000\363\004<\017\002\314\277k\203\276\277\3350\247\277\346\003\202\276\206\305n\277\322%\215>\375D\344=Wx\362>\261\003\373>KQ4?V\202o\277\335\255\354\277}\331\333\277\306\207\306\276X\341P\277\356\211\364\277\217h\342\277>_!\277\n\323\225?7\350{?\234]\243?\230\3242@se\230?\033\371/?\300\324\227?&\373\307?M\351\207?@\335;<i^Y>`\325k?\215_\\?n=J?\005\302\321>\310\254W>\353\322s?\033\362=?R\245\300?l|\002@\035\033p?~\303\240?\3269\251?\210\325\231?\2541w>{\233\360\277\002#\t\300\336\267\030\3006\355\005\300z\224\366\277T/\247\277\326L>\300C(\200\277\210I\311\276\353Bw\277O$\246\276\362\373\336\276f\024@\277\000YZ\276\326\262c\276\276V%?\277_\007?@\214\"\276F\251\212=a\202%?ub\002?\2544K?\362O\302>^\341a>s\342\n?\332\272\377>Y\252\030?\220X\002=\252R\342>\304\224\352=\271P7\277z\037\213\277\014\024L>)M9\276\344\254z\275\340(\342=Sx\221?\302\215\361?\272\343(?\013\352\244?\\\224\277?\272\214\354?\242<\231?1\230\212?\356>g?F\226\202?\206\020\341>h<)?\314>\221?\330U,\276V\312\326>\344[\014>\215\027\262\277a\306\005\277\024\247R\276\022\360<\275y\363o>\003\024)\276\321\222\325?\226|\256?\340Z1>\001\350v\277=\203\n\300A\302Z\277\0008\252\275|\037\364\276\230\241C\277L\017\331\277\270>\021\277\324h\240>j\2259\276\314\217\336=\306\225T\276\330\243\351>/\356S?{\273e?\305\3562?\263\2405?\370I\352\275d\252X\275l\030e?\336\305\333\276\026\177\273\277!\263\331\277w\223-\277\214+9>\274\265\023\275\004\220\234?\346\324\273>\326\351\033\276\205HR?\215\032\r?\373\340\213\277|G\031>f\212g?\370\314\341?\006I}?\361)\267>\304\227\221?\013\305\336?>\370\323>\210\250\230?nS\276?,(X? @_=Y\023\246\276\220\210\004\277r\230\026>\001\'G\277D\360\337\277\340\346s\277g{\260\277K~\210\277\000\343\334\277\020L\207\276\245zx\277\320\343\r\300<\002\017\277\353/\002?\260\321i?\006l\322?$\317\243?v\377\275>\035\247y?\240.2?z\006\317>\010\035\036?\366\266\227?@\217\223=\363\313=\277.TU\277\225d\202\276\365\230\032\277\211\210\037?\206\002[?L}\216?\373\275S?\342\262~?\214\322\"@\016_\204?2\235\266?\242\261\006@\237G\305?\202?\263>\244\264\366>\376#G?\300\212&\2757\231\027\277\320\"\250\274B\363]\277W\264\350\277\014\227\310\277d1/\300toT\300\32375\300\310\211\356\277J\210\025\300)\246\020\300\245\232\365\277\243\357}\277\370\034\324=o\255/\277\362\315\206\277\3140\037\276\266\236\034\277\314\201\236\276=/\262\277\316NE\277Y\2224?`\261\206>\317\341\364?\004G\003@R\257\020?\273<\004\277)\352f\277\350\007\226=\203lV=\"\351\022?\277\346\226>+\267\373>}\211\311>@\027\335;n\225\004\276B\265H\277,C\263\277\214\230\371\277\221\223\264\277\312\275\362\277\324\312\273\276{\024$\300KWV\300\354\205\331\277\337\002S\277X\022\234\275P\207\223>`O\377<\232N#\277\024Hw>\210^[>\014\301\231\276e\201\014\277_\004\252\277\"\355\003\300W+\005\300e\234\022\300\2400 \300d\330\013\300T\376p\277\267\307j\277A\214\224\277/\257\220\277\304\316\213\277z\311\237\277\035\207d\2772\263\206\277`\236\327=\003\217Z?\303W\257?\374\275\320?\243\364\277?\302\375\335?\266\210B?\376%\360>\322\237\240>\272\366\375>\0374\236>\206d\272>\037\035\031?l4\307>\217\261\265?\227\245\001@HKI?W\311\r@=7\377?\262K\204?2\355\317>\222E;\276!\240\200\277@\rL=\204\274\371>3\353\207>\"\276:?\3003C>H\004\251?\202\226\235?\204=\037?9S\220?\265[\037?\274q\223?\324\313\t?5\333\036?\022\322F?\340G\235?&\332\205?\277\225\212?\235A\000@GF\271?\356\224\220?\310\0256>\374\246 ?\212\256\271>\216\250\307>z\031\305?`[\">\0052d?H4\377=B\204)?^\036\214\276\322\025!?p\211_?\210R\333\275\333l$\277LN\252\275Jn\r?\206o\331>\031\213\225?6\276|?\260\352$>E\031\036>\344\351,?\362h\227?\333\205b\277\255Z\003?\236y\203>\036MN\277\2504\251>\000\355\272\272\257\363\323\275T+\276\276x\254\250\275P\234b>\272\266*>h|a\275\327\221d\277\000\257\236=p\314\356\276JZv\277\306y;\277u\357\033\277\237\217\232\277`\356|\275\203r\342>>\305\t\2775\327\227?\027\240X?~P\021?\227@R\277\354\230T\277\232\214\226\277\215#\331\277jl\004\300\0101\215\277\272\361\233>\206TE?\300^\276=\304\356v\277\020M\373\276\330 \022?T\364@\277\364nA\277\000I\t?\2715\307><\n\361>\1776\210?\230t\t?\266\221F?\312\207$?V\264\002\276\320\266\250\275\366f\347?\210\343\260?\364w\374>\210\234p=(\357U\277F\237\246\277\016\2644\277\260B\037><\231\246>A\371\036?x~\221>0\305\013?@\302`?i~9?\373\222\204?\344F\212?&\267\201?\225\257\221?\330\203\271?\226\236\000@\240\227\020@\240\024\010@\032p\217?\366\207u\277\336\2263\277Vc\333\277\225\007\307\277\256#\363\277\274\317\376\277\352\350\227\277\272\326\211\277\354\356\230\277\\\222\316\276\207\213\245\276\224:\361\276\357{\204\276\0063\336\277\276m\333\277@\245\377\277C\226 \300\342\332\r\300\272\037\360\277\247I\352\277\336i\200\277z8\240\277\030\005\027\277\034h\275\276\305\351\016\300\212:\240\277\210F.\276U`\035?\026\375\251?\351\352o?\361\306\265?\036`2?aw\000\277\323\276\211?Z\260!?\252\204>>_\220\237\277\253\346\306\277\366{?\277\022\007U\277\304\030U>\334\201,\277\266\3745\277\307\336\326\2771\376\257\277\204Z\035\277\346\250\217\277\326\271\225?$X\243?B)A?1\242\025?\346%\246\276\003\373\226>\200\222V\273\365fX?\305\021g?\240F4\275\310\031\342>\302\215s?g\3111?\007tp?\317\270\362>W\037\221>s\023\215\277\217r\220\277\226\361\235\277a\271C\277\022\306\036\276;6\233\277\363p\004?\260\001\216?+\"6\277\027\323(?|\342\206=\246\256\033>\264\033\305>o\316\337\276\030\005\237\277\317*\303\277\270\026\\\2772\212\345\276:C\204\277\337\344\035\300\342:a\300\277\312\206\300\330T4\3006\236\330\2778\034\337\277\020\271\r\277\350\272Y\2772\261\206?\342c\203>\007\367\007?\245\275N?t\260\001??L\207>\212\211\244\275=\234\252?R\367\350?\232t\022@\333(\334?e\317\024@\0201l@\335\347\247?`\205\364?@\226\232?\340d\214?\026Va?\300\331]\276\340\360`?\210\365G?\004E\245?\354@\034?\300\221@?\357\014\017?\232\235@?\300\213\'?\324\252\304>8\344\305\275\366g\323?\010\363\014\277\222\371\373\276\nIf\277!-\205\277\210R:\277K)\025\277\222{7\277Z\253[\276\352\262\332>\216(\014\277\344\246\256\277s\023\242\277\246W\343\277\3554$\300\t\261\025\300\300\230\346\277\026\001\244\277&S\213\276\304K\035\277\003})\277\242\014\235\277hQ\202\276\343\033Z\277\031\351\021@\344\214\326?\'\306\262?\030\037\341>\030\235F?\\\223D?\255S#?\010\240\270?SM\324?\344\232\225>\030h\034\276\325\260\204>\311!\274\276\202W\260\277D\"t\2768\013\366<F\217C>\231\373\003\276\036D\241?iK\203?s<\351?\274\r\244?\010\260\247?\000\002\210?\206\263u\276R\255k?h\330\376>\332\203\227?\2402\270?d\226\324?\243O\351?\033\350\n@\262\211\002@\234\371\021@\233\333\376?\227\364C?\330P??\210\226\216>nF3\277HA\030\277\3743\217\276 !\253\277!\270\222\277\262cC\277\223\310_\277[\'W\277\2376I\277\235\235]\277\234\317\363>\250\275g?q`\252?@\240\037?\342\237Q?\003x\273?\373\002\242?:Mu?=\030\345?\004\343\342?\036\240\221?\346i\032?-\321\216\276@\004\010\277F}\177\277\262\215e\277\274\245\001>\252\204=\277\252\303\370>n\035\256?!\035\336?\006R\226?Y\315\255?(\367\020@\213\017Y\277\274\314b>\366\376\216?ml\226?\307\220\267?D\216\037@?W\273?\213m\306?b\243\362>M\210V?\330\304\020?\226\214\244?v,\223?\202)\260\276o\313h\277\256\322\310\277\017\326\205\277N]%\277\322Gr\277c\226\233\277\224\364\266\2767Dr\276N\267\343\276.\217\033>\346f\244>\254\225Z\277\031\317\202\277\217g\313\276\316C\275\277\036\022\242\277z\331\r\277~\336\215\276\235a-><\261\033@\352 \367?\237\267\005@\346\320\n@\247k\360?\224\211\355?\230\332u?\034V\013@\275\\\254?\206;\226?\365\342*?\010\032\341?\354;\031?v\205\037?1\336\017?\n\3654?IJ\370>@\024\375>\024\244\\?\330\001_\276l\231\023\277KG\314\277wI\235\277uM\227\277\335\355\201\277\0168\226\277\372\025a\277\350\220\272\277\004Oa\277\345D\226\277\206\353\244\277\370\316\325\277\261\241\021\277\222EZ\277\270c\271\277\353\303\231\277\337k\333\277@\250\364\277\032\233\002\300\014\334\326\2764p\216\277\300\177\224>\330g\316?\320l0>n\016\002\277\226F\217\276\347f\213\276,;_\277\270X\350\276/\353\216?z\234.?\300\237;<x\034t\277\364\354\253\277\2568\265\277\022\257\032\277\0160\220\276L\277\030\277\230\t\266\275\347\303\317\276<q0\276\310\255#\277\236<\'\277~\247\005\275\376\322E\277\005K<?&~\261\276$\324\027\275\230&\036;\014\305\n?\376K\217?\235\345\032\277n\023\r\277\210\204\013>_\201\353>\221\302\226\276\265\311\032\277\360\306u\275%\254\322>\200\331\243<\335 \003?\230\016\034=\301\301\213\276d\"\030?\374>\204\277\200\366\350\277|\211\221\277|\256\341\277\340\032\323\275U5I?\256t\256?I,\013?\332\312C>\361\000\330>\360U\202?\336<\207>X\264p?-4\022@\273E\374?v\247\002@\020\357\334?\270x\252?.\273\256?\274k\377\276\254 \252\277\205\005\240\277\365e\371\277\316\006\233\277\254}\230\277f\365\207\277\026\377_\277\370q\264\276\350\351\241\277\001\351\023\300\360G\267\277\010\276\364\277\014\022\345\277\006\243\344\277X\351\250\277x\032\314\277\346&\007\277\334\026)\276t \310\276\200d\256\273\324\214\027\277A\027*\277\276\336\026\277\0200\355\275\242\306=?\365D\216>S\240\273>\254\271J\277-\226\300\276\276\354\254\277R\260\320\277f_\224\277\300;9\275\\~\250\274=m\364>p\271\231\275\230\211\316\276\n\030\202>\206 k\277\025,\312\2770\224E\277\0343\302\277\004\370\332\277\221L\262\277\311W\363\277)@\271\2779\350\255\277r\n\030\300\322E\010\300Z\306\032\300W\363\'\300<I\235\277\375R\220\277w\215p\277\246\205\241\277\352\247\237?\022U\023@Z\211@@\020\275v@k\277m@\010\235X@4\2460@y\322\013@\224\016\027@:f7?\022lC?\317\205&\277S~\363\276I3\263\276\2607\371\275zZ\325\275\370\211\024?\325 \220>\326M\037\277\330\336\322\277\215g\267\277\227\213n\277@@\261<\364vZ\276\303\0146\277\t\332\263\277E8\360\277Mv\234\277~\226\276\277-:\001\300\030t\323\277\263+1\277\360\313s>\316\223\366\2768\360e\275\024A\261>\314a\241?\036\307\005@\210v\204?zO\356?f\230\035@\315\375\024@f\234\244?\000\210N\272\346,J\276\023\225Y\277>p\214>\013\317\201>>\251\375=\322\224\331>\344`\025\277\340\234\224\274\320>\255\276h\026#\277H8\320=8\2435?l\225\300?u\352\207?\340c\013@<\177<@\0324)@\241 \373?\350\362\002>S$\301?\255\\*?\025\004\216>T\010\336>\220\225d?\356\010S?5\ng?\021\324\002?\307\002\021?\211\222t?\"5\213>2\004\234?\251\276_?\270\266 ?\020\361\376>\244\304\212?\344\343a>\036\205\374>\n\356\326\276IA\024\276 \265\236={jf\277 \271\033\276\036E\013=\241\211\340\276\260\310.=*6\317\276\021\257\322\276\373H\234\276\243\026\226?\020\211`?I\313\271>\331K\213\276 8\344\275\371\r\371>\336!\037\276I\241\340\276\321_\237\277Q:b\277\346\366\246\277\245U1\277\375\211\004\300hp\313\277\216\004]\277\264_\006\277\366\3521?\321\371d?\020o-\275\222\027\360\275^\346\250\276A:\025\277\\&\361\2760\332\243\276\033\220\224\276\353\232\344\275K{r>\262\036\201?\235\334F?\311:\001@\300\242\316?\262L\311?\340\356\000@V\2066@\023\227\021@\240\023\030?N\373\332>\021\304&>AW\006\276\353\001r\277\360\255\215=\304F\320\2762e\306\276\021+\336>\230:\344?\301\312\264?\3007\017\277\220\2136\277v\000;?\204Kb?\256\247e?@mE>\331\266\224\274 \302\231\276\246\266\010\277\330\352\025=B\310`\277\233P\256\276\254\303\'?\232\213\207\276\363\303)?\3645f?h>(?\013\330\211>j\316\366>\271.\320?+\221\"?\031\r\361?\ng\317?\210\363\267>\311\341<?\372Ff?\270\333.?\216\347\221?\333W\246?\360\275\305>n^P?\242\2572?\252\"W?8l\205?]\030\305?8\177\322?S\026\001@u\177\244?\034\313\341\276<\320\227=\206>%\277\350\320T\275\374\261\241\276\323S\'?\234\001K\276\316)\235\277\334V\214\277y\333=\277\000\223\307\276\245/\374>\034\355v?\n\346\226\276w\277%\276\326\205N\275N\211\324\277@\360\364\277\254\235\002\300\304\344\367\277><N\277\370\214\341\277\335p\306\277\330\217\246\277\034\366\253\277;\247\225\277L3\313\277\274M\237\277\234)\031\276\314Uk\277\200e\222\273\253hs?plM?\320\305\340?$\370\034@\215\257\337?$\013\374>Z!\255?q\272\331?v\236\201?\227\032\252?\340\343\251\275s\014\254>\255O\254\276\215\251\327>\372\003\331?f\2523?\340\355\313<\toV\277\006\307A\277\266\350\327\276\326\337y\277f\371\272\277\362\324\322\277\006n\343\277j;H\300`\022\025\300(A\267\277\007\201\337\277\007O\271\277\330\200\005>~|]=\302O\331>x\t\020?eW;?MEN?\000\014\207=\350\2151\277\330:\016\277\225\336Y\277^\303\263>*\003\031?\331\202\244>\332#\031\276\353\017\240\276\00066\275c\022\017?\255\305\367>\232\220\206\276&\354\227=\354\307\270\276Eh\266\276L\273,\277&\372\025?\334o\224=S\2404\276s\376N\277\204\232\247\277\266U\211\276`\222\220\276J\210+?\264qe\276\364M\370\275\300\332)\277n\223\352\276\273\006\233\2776-\271\277\361\351\325\277\231\270\t\300\274\376u\277x\311R\276\177/:?\266\264\260?v\246\005@V\035\t@(S\222?\010\207\377\275\251N\334\277\250\354\010\300\300z=\300B\360\016\300\225\013\311\277{\021s?\323&\267?\242c\016?v\322\206\2770h\221\276\364\017;\277\332\024\331\277\305L%\300\360%q\2777%\217\277:\2735?H\300]?\221\331\002?IG6?>\321\263?|\267\214?\3571\246?\376\267\322?\025\214\t@U\211\346?\007\377\222?LGQ>O\0225>\323*N?]\204\014\276\323\"\337\275\213\210,? P>?\004A\342?8\020\264>(\230b\276\3274\004\277\240\333\354\275\234\306\203?\330\017\347>\326rC>\016\022\302\276\220\364\001?_\335\004?\340-\204?\316\007\217?\257\355\351>\273e\333?a8\001?O@\215?\276\214X?`\006\250<\367\307\335\276\256\252\370\275<\333\246>[\2314\277<\345\276\275\221\221\341\276\244\306\006\277\240\312\314\276\240\027\215\277\332\'\252\276\312\215\233\277\217\344\245\277\326\277\253\276\220\250\264=\236\220\252?\254F\227?f\306\007@\340\016\003@\372\360\033@f\327L@\032\230<@,\363[?\021\353\002@x\351\264?`\236\356?\337\366\252?D\354\332?\022N!@xU8?dy\207?\200I\201\274\026M\271\276`?\273=\302\346:>\032aN?\220\0217=\225\006\036?\365\231\316>\255\010\313\276\336I\311\276\254+\037\277\356#\306\276\267\252\270?\232\323\202?~`\213?\274\327t>#\000\202\2766v\222>@@2?\227\346\313\276!\360\251\276\200\0256;\031\352\261<G\"\251<\330\321\366\276\371\200\027\277&8\311\277L\321q\277\366:\000\277\274\215\330\275 \020\317;\256\362\306\274\326\3514<\356\036\357\275Pr\366<\320-.?\020\\d?\320\014\312>DM\203?\277/\255>.\r\370>\2136\037?^{\033?\342\203\220\277d\016\211>v\233h?F\203F?\020+,\275\303#\315\276\366o\326\275\345w\204>\210\\\036\277\030\t>\277<\372\r\277\344KA\277H\251\372\275Ao\236\276\202\360\212>l\025\036>\333\331\303\276y\243\207\277\352\314P\277\240\230\331\277\334r\010\300\362Z\272\277\243<\030\300X]\225\277X\266\252\277Z\343\225\277\233Q*\277\034YG\276\241f5\276\3777\247?\022HT?\200=\227<\t\332\210\276qH\311\275\010\351\262>*\274h? &8>\250(\r?]\244\000?\0308\331\276\260Zb\275\237SY?\360B\021>\370I\237\276x^\t=Fm\223\277a\177\206\277\325\351\257\276\204\016@\277\273\360\270\277\267\343\260\277\000@M>\244d\304\276\024dX>H\362\363>\246\251\016?\240\215\020\277\320\371$=a\247\272\277\377\002\264\277<\225\202\277G\2063?\310t\t\276C\037\300\276\226\0102\277\347\302\353\276\036~\250\277\313\021D\277$N\305\277\244\203\347\277^\374I\277\346\026*?\336<\004\300\371\331\252\277\212\276\302\276T\310\302>`\252\210=#\251\341?\324\215\354?~\261\025@$\310\202?\240x\261>@\307\246?\302\323\371>\000\373\275\272kU\\>\344\376\243>6h\224\277`\024\254\277.Um\277\340\026\357\276\260\005[\277\354\363\271>\334\202j?\206\223J?\230\255\224?\\\251\222\277b\300\373>\270\030a?\020Y\303=\016\254\303=H\330\034?+\362o?\034\037{\276~@\253?\334\250\306?\006\240h?\006d\r?\323V\352? \325\322?t\307\336?N\010\017@9\314\014@\007^\004@\016\210\301?<\221\365?d\342\037@+\206\312?\314\314\246?\275B`?\314\314\006\300\217\305\357\277\000Y\310\276\005\002\347>\r;\005?C\335\327?\330\314\373?p\004\333?\\\024\244?D\326)?eq\217?\222\273\320>\320\031\326?>\254\244?\014\334\236\276$F\365=`M\244\277\323\024\240\277\322\271\227\277\204\251\245\277\326\340\033\277\213\364\321\277q\3420\277ZW\232\277\235b\007@\343\344\262?Ph\t@\305n\271?\033\001t?yN\225?n\200\'@4P\002@\031/\222?Ek\351>\261\037\362\276\010,\037=\006\250\201\275\347!\340\276\355\351\246\277\324\275\210\277\334\354?\276/J#\276Q\025\026\276\000:\025\272\212\346\301>\006H\245>\244P\177\277gc\221\277l8\307?\t\026f?\024]b\276K\346\237\276\361s\206\277\231\024\201\277\014K\241\277\376\221\247\277^\244t\277b\317a\277+\206\352\277\016\r\253\277\020\206\224\275\206\2578\277P\245\'>\005>\245\277\372Z\365\276r\242L\277\241K\362\277\250\231\256\276d\342\024\277\022z\251\277{\305\305\277\212\267\225\276\247x\277>\276\307\t\276\311vc>\3404]\275 \006\306:\31477\277\275\3461\277\021\301\037\277u\370\207\277T\177l\277\275\255=\277\240\337\'\276\2670\321\276\272\001B?\250\025\032?\315\314\320?\232~`@\327Q+@[\271\'@\257|;@\010P\r@\030\014~?.\212\004?\371\324\212?\206\226\010?PU\327>\264\334\026?\360\006\307\275\022\260\327=\373)\203>\340\231\027\275F\033\003\277\366k\203\277bXl\277w\247=\277G\2322\300`Fh\277\302\354\211\277\024\375\230\277\333\027\252\277(%\334\277n\322\240\277\356\340\320\276\376\340\377\2765\374\245\277\276y\037\300P\351\013\300i\323\026\300\277g\262\276\344r:\277\364]0\276\210Fu?J&:?\271\333\037?x\202\360>\273\014;?\364Bp\276\327lQ\277\034\250:\277\226\273\200\2770\361\243>\220\220\217\276\207\364\177\276-\372Q\277\360\333\031\277\304\344c\2760\220\036=\316;<?\350\307\225\276o\323\267\277\365\277\302\277\354\264p\277X\204C?\326(=?\204\200z>\n\316\022\277J.\212\276\276\200\020?X\0161\277\270\236~\277`\325\221=gt\214\276\364\221\021\277>\361\311\276_\232\000\277>(\314\276Fu$>\324\034\364>:4\346>\330\203\'?06\031\275\302\214\253\275V\035\206\276\000\321\226\274L\210\212\277\354\'{\277e\346\350\276\336|u\277\354\317\'\277i\222\230\276\250%\217\274\352M\004?\204L\301>\275\364\301\276/(\020\300\034\252\252\277\010\301\341\277\304Xg\277\'k\226\277\260\260\213>\325\357\304\27605%?\342\351\243?\265:\261?J\373J?\255\321D?U\235\005?\271M\n\277\310\220\341=zc\233\276\202\351>\277\2432\254\276K6c\277\326\034\231\277\346\241\316\277\327\003>\277\314\021_\277\255Y\235\276{\337\204\276\274\3661\276(,\207?~Y\362\276nJ\307\276\2136\365>x\244\004=:NG\277\000\314#;\247\216\222>F\274\353?\340q1\276\275\305\232?\307\317\361?\336\035\311?2k\347?e\016?\275Q\231-\275\273:\251\276\232\232I\276k\221\270\277\037\351\267\277_}\005\300?\264\256\277\376\375\016\300\345\310\333\277+q\250\277B\014D\277\347\266\247\277\272\264\245\277\227J\341\277z\252\357\277$\334\321>\250\026\203\276\273/\232>\270\002\346\276\364q\211\275^|K>\"\232a>\312;\226\2767\325\271\277\374\311\231\277r\r^\277\324\3145>t\2466\275!\202\220?\232\300r?H\0270>M\204\225?\256UJ?\372\037\315>\266*n\277\204]\017\277/\346\345>\346\317\214>\2128\245\275\007b\203\277\\\257\030\277\311\244\264\276\274\232\343=\321\320\002?\323b#?\206,\261?\200\314O\275\001~\204\277\251\211i\277\014\301R\276\027k\027\276I/+?\2000\346\275w\222\342>\252\375??\200\033\315<\251k\273\276\340\356\t\277\364\201\367\276\322\r\036\277\340\210\332>j\261~?\315\263\220?\351\2228@\334\217\206?\372\334\211?NF\233?\211\344\261?\346\031J?\036\270\231?3\266<?H\315\321<\370y\240\276\372\230I\277F\212\365\277\\\356\271\277]\243\204\277\302\314\254\277\321\327\211\277\021\252\357\277(I\026\3001\217\323\2770\344\017>\033\013\215\275 \237\016\277\224\342\303?J\336\300>8\177,?\337n\320?\n;$@\256\254\251?@\233\000@@w\312=\254\016\210\277\003T\235\277\235\000\323\2761z@\276~\355\311>\370M\263>\334\357\210?\230l\r>\257J^\276\030f\251>\272\210=?\014:Z?\016E\215?\310p\271?\000?\374<\277\345y>YM\n?\314,\321>\177\217\016?\234\\\371>0\370\274=\t-\033?SK\215?\024vv?s\'I?\205d\211?,n,>\312\341\376>1\037\010?X\236\201\275bM\353>\021}\334>y3\345>Trj?\352>\366?\000\347\266?^C\013@\214\217.@H\020%@\352\224\037@\340\032\n@\342\300\323?K\203-@\256pf@\231\323\"@\2544\001@[\354g?}\026;?\3303\275\276\342\235X\277\340\276\037@/\355\037@\314\274\035@Bl\370?2\300\030@\264\216\327?\204b\016@\243Y\306?\030P\323>\300\203\317\276\206\223|?_>\364>\250\026\001>\031\341\304>\354VP?\311\007\036?\314\006_?\256\000\257?\207\313\002@\245]\246?B\203\342?\364\021\327?\003e\301?\251\033\305?\346i\301\276/\027\362>\211=Y?\2778\317>\010\206\001>\200#\352?\242\272\330?s\024\245?\366\302\227?0\354\250?\264\034\264>\007B\274\277!M\252\277\250\207\357\276.w\363>6>|?\356\026\356?B\257\036@\334\250K@xR\n@\270\270(@\327\252%@~\003\320?\345\307I?\203\227\241>\026X\003?\2422\224>^\244\342>\010\266\225\275 K)\277\210r\335=\017\307\330\276\3624Z?\221\267\231?\216\026\314?g\207\362?r;\021@\272\035\020@\257\006\222?\270\205i?o.\314>8Cn\277j\343\246>\262\240\305>\260\215Q>4\010\372\276\344\220\202\277\325 ,\300\256S\365?\rG\017@\355LM?\312\342\335?\314s\317>\313\306/?\276\346%>\230\364\331>;\3631?.\0369?\024\376\275?r\367\360>)s\272\276\231\033\"\277Tk\372\276\232W\275\276\274\375x\277\340\373z\277\340\271A>\324\t\207\277\360\256n=\250\3612?\006Lu\277\212@,\277L\357\251\277\366p\327\277K y\277\262\224\005\277\221\301\010\277\353\225\270\277\306\260\310\2776P\002\300\223*\350\277\"\300\261\277\327\304\242\277>F\253\276\013\271+\276\032\033:?\332\311\260>\2243\025\2763:~\277\342\230R\277u\372\203\277\2140\316\277\357M\255\277\232}\317\276\311T\355>\347Y\253?\0360\325\276\201y\333\277>\256\263\277\373\261\257\277\370wo\277\351dR?\252\036\255\276\362B\243\277\337\020\215\277\250\206-\276\372\314\202\276\300k+?\017\336\342?\300\017.@\242\370\356?d\226]?\340\224M=\364\362\247?vo\222>\275\021v>g\206\242\277\203H\214\277\376\037\303\277@\305\244\274\002\343d\277\273\2316\277\204\225\321\277S0\255\277\233\316+\300\375\314\035\300\221\023\004\300\010\357\037\277<\210\232\276p\364\273<0\275\316;\021MX\277\3349\224\277\200^S?\216\032\302\276\234\256\215=\206\376\001\277\223\005\202\277\242[\003\277\333\024\003\277R\217\243\277\326,\271\276\336\366\204?\026\353a?\343\202\310\277X\010\326>\211:\255>\216\252Y?bw\201?\027\325T?z\342j?\366\360\223?3@\207?P\2700?`\215:\275\303\001\007\300\321\316\331\277\366\355d\277|\246\027\2772\235\275\277rc\214\276|\021+=\0233\317\276\220K>\277\276\307`\277T\245\237\277\030\366-\276\273\255\220\276\221i\235\276!\203\265\277~\337\302\277\212u\356\276\020\354\210<\225\351:?\370\331\027\276\350\036\006\275\306\235\346\276\214\323\225\275\016(\'?\222\262\324\276\320sP\277L]\211\277<\0274\277\313I\222\277\245\3356\277\340\017\006\276=\264\347>dB\252=\251\360*\277\312\216\032\300\247A\010\300$mZ\277\220\256\247?\256\343\257?\034\036V>4\226\016?\310\013)\2772_\205\276\372\305{\277)\026\205\277\177\244\000\300\202\227\030\277GJ6\277q\350B\277\334\370M\277rq<\277\022,\026\277B\350O\277t\247 ?\"\207\236?p\034|\275\247\r6?\230;X?\252\232\032@P\241N@^\376l?\004jU@S\330I@\315\250{@lwr@\224\026\022@u\264\314?5\275\331?>N\306?\303M\275?\207[\307?\236\325\271?\005\320\303?\321\037h?\224\356\376\276\010\372\217?0\261!=\375Co>.S\020\277\010\3427?\006\347\223?$\256\005>@\306\212?\030\332\314?\252\217S?\253\006A\277\220\203-\277\325\343S\277\247\2478?\332\244\210>\200d\"?8\203\213\276\216\016\317\275\037;\262>\264a\205?t\035\353?\026\214\213?\310\014\004>\351\276\246=`M{?H\245l?h\226\312?\364\313\276>=\221\000\277\336!\033?\036\221T?\237\327\364>2t\016?\036\320\225>\000I\206>J\033\305\275\332\033u\276(\235\333\276jX\271\276\357`\217\276\274\002\207\276\336\300\016?h\236q\276\200\037\304\276 \351\037\277P[9\277\\\270S\277!r\"\277\250\022\300\277\275\236\245\277\005;\007\277:ws?\344\320\231>\220\362r=jE\030\277N\262\214\276\304W.\277bp\250\276A\230\305\277 ;\246\277\244\013\244\2774\263\263>\275)\024?\277n\311\276\2208\213\277@)\200\277\216\337\t\277\311\007\014\277\272t#?N\231\252>\002\034\323\277x\331\217\277\004\243\254\277 \030\235\277pP\274\277@3\237>\200\020\215\272\240J\225\277/\003\342\277\260\026\216\277\343\257\266\277!\023r\277\247\207\022?\262\334i?2\306\226\276\\\016+\275\216\303\000\277\216\017\243\277-0Y\277\277\002\025\277\221\207\320\277\304\244*\277\246n\245\276\0008\266;b\027\024?]\275\254?N\331\314?\240h\232?DT#>\204\232\306>\336\310\037\276\352B\035\277\305\n\323\277\214,\210\276WQ\250\277\224\020l\277%\263\213\277\035\303\350\276.\027\335\276\024A@\277\376\003\340\276t\224\273\276p\251-?\370\262\005\276@\314\214\272\005\217d?\332\237z?/\031\207?\021\306\017@^\323\016@_R\253?\350\031\026@:\207\227?\335Sa?vD\253?\003u\363?u6\377?<\314\276?\017\202j?\311\351\375>l\035X\277-\336\212\277\024:(\277\320\253\330=JR\217\277\305\355H\277\010PP\277\016[\247\2778\252?\276\204\310Y?\'\212F?\2572\r?\n\202\211?\330\321\361=a\t\274\275zO\211\276\363D:\277\000\256\265\276\305e?\277X:\220\277\360@\t\300\332\037\342\277T(\370\277\220\341\354\277\206\313\243\276,\026\\?\006\315\361>\271\356\304>\370\203\245>\240\252\362\274\031\244\311\276\232{.\277\n\336\263\276\000\366Y\277\215j\271\277p\377N\277\305\274\034\277\n\256\021\276\247\250\016?!E\222?\021\274C?\276k\310?\212u\302?J\214\321?)_\306?F\360\306?\3728y?P\311\214?\251_\231\277\225\233Q\277\376\360\000\300\200\310|\274\211\324\035\300\275\247;\300\240!\273\277\262\252O\277\225%m\277x\257\324\277\214\363\306\277N\341\342\277\365\'\014\300\211\234\r\300\t\310\260\277\242=\215\276\"\\\221>\306\036\264=\031G\272?\215-\212?\203\225\035?\262J\222\277\356Q\201\277\\V\030\276\016\211\225\276\377\263?\277\024D\360\276\010;\244\277\266r/\277&Q,\276g\3152\277V\217\273\277\252\275\263\277\322\260U\277\204\376\001\276rJ\244\276\001\266)?\236\0373?&6\252?\347i\013@\210\352\263?TCD?@\274\201<\361%\325\276{N\254\276\340\356\024\277\224\233\342>\3468\257?=#\004\277u\242\253\277\251\031\276\277\335\314\271\277\277H\253\277B\312\031\277@}\t\277\205\205\350\276X>\000>m\337\351\275\3558\026\275\3423\010=\371]r\277\222\244\375\276txU?6\275\257? ]\033@\241d\215?\363xJ?\346\353\034\277NJ~\277\222\022\267\277\264\017\311\277\332\260A\300\021\247\216>,\266o\276\362\023\021>\014k\353\2763Z\254\276d\307]\275X\351\231\277\003\003\232\277>0>\277DP\260>\215X\342\276\204\206(\277\t\350\224\276y\330<?TS\021?:\212 \276+\2108\277\350Z\266\277\020\016\267\277\315\007W\277l\301,\277D\354\\>\2279\266?\204T\201>\356F$?\360P\223?\026 \\?\204\256]?S\255D?p3\034?\342\005N?\000+\307?\216u\007@\204\232\347?6\305\373>\216\002Y?,\361\002@g8\350?l\n @z\260\021@A\351\344?\246\274\037@\036\332\310?\201\034\023@\250\245+@\353J\002@\366\237\312?\256\345\257>\277\263W?\311\031\023?\300\215U?\252\320\374?OI\336?\304\034\224?D:l?\314:\014?\254\275[?N\331\313\277\222\255\207\277\226\004\276\277N\310\236\277\366\214\013\300\316k\312\277\300\340\320<hL&\277\'\224\021\300\tF\010\300a\3159\300wo]\300\353f\300\277.F\016\300\032|\345\277\211l\003@\300\345\224?\372\005\241>\374j\007\277\262$\264\277\336U\312\277\336n\377\277\272\312I\300\314\252:\300\342\004=\300!\323\312\277\262t\373\277\243A\275\277\3676\016\277lH\235\277~\312\341\276a\324\017\277\302+\017\2774\2172?=\231H?\016$\252>\0003l;\367\343w=\306s\312>\343\r(?\204\365\222?\204[ ?b\231\203?\262E\232\276\370\251Y\277\241$\007\300\3503\004\300L\010\037\300AV\345\277}V\002\300\312\036\261\277\300J\355\276\"\371\210\277\222\035\026\277\016\3509\276\240h\302\273`\257\230?K\325_\277p\327\213\277\254\263G\276^\245\273\276\242\205\312\277,\337\237\277\270\213\302\277\2210\234\277\001\035\225\277\2534i\277^\254\311\277\206\311\357\277\323\250r\277\221\204.\277f\353\202>\314v\312?D\031\346>\271\246\255>v\002\267?\242\202\302>\373\004\206?P\\\342=\221i\317\276]\335[\277\355\332\313\276P\352M?\372\263\223?\374\335\262?NC\n@\367F\t@\003\304\257\277\\<\213>,\373\326>b\353s\276\207\246+\277\3443;\277\346\365\276\277P\222Y\277\262\027\214\276\370_\231\275\376\363{?<b\013?\331\314\252\276\350\317\345\276\236v4?Q\\\246>?\327\310\276!\257\232>\247\222\001\277\276\232\276\277\346\021\262\277\260J\242\276\013\302\371\276y\210G\277\203f\376?\275\022\337?\0149\213?\022\363\243?\246\177\301>N\270\377>=M\022?\002\010+?\344/\226>\304\035+=\357\201\317\276\020\277\202=j\252\032?\320\224\274\276\025\377C\277(\250\253\277\356eX\277\234\321V>\251\245\313=\233~I?\210\325\014@\272\335[@\037g\370?\326Nd?\203b\260?\010\020X\276g\340\303\275\322\236\000?\261]\231?\345i\210?x\364\201?\315{\200?\023\024\364>:>\302?\016\200`?\310\315\236?0\\\014?*1\230?YD8?\224\331\354>\206`\217?\372b\371>\305\025W?P\212\332=\234\006\271>\360\375$?\251\304\014?f\275\231?\313\017[\276s\344\221?\224tU\276F\303`\277\305\3156\277\366N\264>\217~\357\276\206#>>\236\374b?p\226\254?\320\203\215?\332a\222\277\353h\311\277b\343\333\2770D\332\277\275p\316\277\253d\022\300\300\350\235\277\013\202\242\277\230\034\264\277\220\226\027?\341\334\353?/\323\003@\311\305~?\345{m>\234\3003\275[\337\252\276\222~F\277\376\347C\277\210Xx>XE?\277\0202\004>O\021>>|o\266\276d\261\342\275g%\273>T\225\374\276&\032\273\276\264\017\366\276\376\365\010>\220\013\226\277>\224\200?O\333\242>\002\241,\277<\255\305\276\246\026v\276\006\357,\277Z]\225\277>\005\352\276~\346S?\034M\313?\025\207\276?\200V\211\276\\\305{\276\240\265\225\274\343\3452\277\216N\236\276\243\000\306\277\213a\370\277\026\301\334\277\020\265\374\277\204\344\335\277\257\256\224\277^$\300\277\202\360\315\2770x\022\277\326%\030?T\006a?B\237\215?\272}\203?\327\225\363>\340\022\240?\246\220{?\230\211\305>@\342\t=\037\273\025\277\224\200\236\2770\306\230\276\034\266D\277\250_Y>zg\251>\300,\376><GT?d\312\006>\210\365\250>Z\\v\276H\016\251<\320\206\270>~)\215>\201m\025?\274\372?\277\222r\235\277\230\223\260\277/a\021\277NU\271\276\236Ux>\265\327%\300\022\221$\300\270N\232\276\000\375b<1\241@\277\366\tp\277\320\323\235=\022\004\261\276\307\360X\276X\323\034=\345\362d>\257\260$>\350c\227\274\312V\346\274LX\254\277M0\201\277&\213\331\277;\022\235\277\352\315y\277\\<\222\277\370\003[\276\030\361u?J\2314?\034\014[?`xG\277\317\'\314\2770\306\331\276B\370\272\277\256ff\277j\223p\277\010\325[\2776T\r\2778\006!?G\004?\277|\340\"\276\350T\014\276*-\222>\250\205&\277\256p\212\277\020R\257\277\371t\006\277\374ck\277\375\020>\2778S<\277\033\276\267\277\232\005L\277\367\332\203\277\212\037\345\277\025!\310\277fqH\277\243z\264\276\245\263\006\277\3463f\276\310\031\263>\270\3224\276\354+h\277\014\221\n\276\332&k?\231\336\"?\356\202\211>\202p\352>\271\200\257\276\301\203\305>\330\2146=\375\306\001\277\372\372\341\276\032KC\277\342^6\277\244&g>L\324I\2772\246\177\2776\353\230>\214\010\340\277j\364\r\300u\324\306\277\251\372 \300\r\263\002\300~L+\300\330\326\262\277T\305V\277\t\r\304\276Ej\332?\367\335\245?EH\224?\220\251\014\275\023,\246?L\242\255?\322\032\177?\354\242\270?\272\2342@\315\3517@\234\242\340?\233*,?\307\364\317>\202\307\213?\353\373j?\322\262\030?<\310O?\264\250\346?\257|\232?H\264\342?+N\273?*\340C?\260\224J\276.R\240\277\010\365\216\275\230\262\035\277\224\t\231=:\027$\276\026EW\276\374\331\317\276\035\001 \277]\004\237\277\343w\305\277\020\342\227\277\330~\003\276{o\232\277\240 d\275{\035\354\276\304\2364\277\264a\317\276tR\261\2778M\273\277}\235\223\277\022{\326\277\320\023\021\276\036\232K?\233\002\312?\220ya?\200\030\024\276:a\200?p\017n>\353\307\021>)*\311?\233\253\343?0\320\023@\312}\213?\317\265\302?\264`\250>\310\000\033=\234\327\002?\315sD\277\366\336\265?\3021\004@\266u\204>P\244\\\274\340E\237\272\305\230\241?`\220\356?\260o\355?8\013y>\3424\343\276t!\007\277\204\364\006\276i\006\223>5mQ\277\227\322\016?\371\311\005@\2263\254?\026b\376?\322O\210?8\rS\276\225\313\343\276d\354\206=\235f\033?\2215\252\276\262`.\277\250q\344\276\3269\353>l\033\305?\013\323\231?\200\216\332=\20790?\022\220\223>\244\377\030>\352\260\320\276\000Ak\276\375\323\002?j\372\251?\224\252\200?\333\220_?\232\r\254?\024\307\321>!n\305?r\224m?\300(\003<\\\214\013\277\332\374\337\277\0326\365\2770D\314\277\010\303\347\277\002T\357\277\235\231\243?\364,\'>\330\337l<B[>>\372I\272?h\226N@\330\3570@2\204\014@Zh\036@\316\256\026@J\023\300?&\303\276?\240^\221?\313t\014\277\000\016\t\275\243 !\277\0256!\277Fc\361\276\310\373\312\276\276\223\002?\002\360/\277\256\377\265\277\260\2500>\356\306\221?\317u\033\277A!\023\300C\216\366\277\014E\014\300\200\314\r\300r\270\002\300\337\334)\277A\251\200?\334\024\365?\206\246\231?\257\373_?\277\277\025@5}\010@x2\007@\350Y>?\350\335\324>P\367\200\274\244#}\277\377\220\244\276\017\033\231\276lx\244\275B\344\246\276\250,E\275U\206\355\276\266wR\277\244\272I\277P\362\221\277\261\337\200\277G\310\027\300\255&\225\277T\0254\277S\222A\277\260\220R\275\3430\245\276\3147\037\277\300%\n\276\313\371G?*\241D?<\305\226?<\274\002>\350\037\236\276\032\267\255\276\010\336\035\2771b\276\277\226\274\241\277\354w\230\277\276E\303\277\241t,\300fI\256=\233V\014?\320,\320\275\321\2657?\006\363\310>L\313\003?%>\207>\372G\310\275\200\256\265\276?\261\253?\021 \021@\324Y\261>\031\356.?\310\240\221\275\267\236A?@o\356=\370\223\346>#\344}>w\201\264>\354V\206=d\365V\276\246U\372>t\335\305\275\310/\036?J4\354>\312\033*?\252 T?\260\374S?\006y\303>lBM?\200\243Y=gr\237\277\374\246j\277J\036\242\277\267\303\307\277\004\273\345\276\236dT\277[1\377\277\272t\226\277\030\347v\276=\266\222\277\340\220\255\275xu\022\275\031\332\027\277\343\240i\276&\353^>\032\232\010?\310e\343=\221\2418\277\022p\243\277(\364=\277\002\246U\276=s)>v\224\241?\2237\220?\000\347P\276\003\325\200?\321|\215?\325\340_?\370\005\261?$\247\327?2\n\256?Y-,@\350\316W@\324z\024@\370t\037>\255\316\320\276\\\327\217\277\277\025\357\276\230\027\344\276\367\251\201\276y\232@\277\231\216\274\277\024L\242\277\024#\233>>~\235?R\344\226?\335\324\257?|/P?\001\035\260?H\342[>\344VP?\217q`?\230\240\251\276\016\t!>\034\332\307>@\235<\277\344\014V\277\327\243\223\277c\014}\277~\241\371\2764\224\247=\343HC?\3170\210?/k\211?U\340\037?r\357\313\277\260x\333=\353\331\250\276R\337\020\277Y-\336>as\220?\234\003\000@HUa>F\n<?\350t\217\276\374\362&\277\351W\255\277\304\317\010\277\334\301\203\276\210\233\355>\n\247W?\260\361\006?h\340U?\366\234\333?\211$\305?\250\275a?\300\215\027\275\263\273 \277\354{0\277\222y\314\276\027\005\227\277\002I\347\276\217\354\256>\010\007\013?\006\322\237\277hEU\277\273\327\215\276{\005t\277\274{\017\277\213\334\213\277\366l\241\277\330\230D\276K}0?e0&?\342\016\006>Q2r?\023\360\037?\255.2?*\340^?\313\315D\277\354\222\017>\361\010!?\\\034\200?Y\332[>\216\301\326\276K\310\231\276<\370\030\277\262\301\226\277l\205\017\276\340\271\270\276\222\225\004\276\233\264\'?\177\220\317?(\004\006@H\252\027@}\2233@@I:@z}H@87\036@\345O\334?\352X\204?,\277\216?\303\017\325?\006\372\302?T\270:?``\231<y\212\342\276\313\210\271\277\237\236\007\277a:\271\2775\216\231\277\214\305p>OA\203\2770l\230\277`\267\351\275-\027\003?\030y!\277\317\236\031?\331\377\264? \355\252?\224\227\026@\362\220$@49\335?3 8@\2772\007@\253\257\326?Vo\002@+\025\r@@S\373?\"\031L?\336\332\215?_X\371\276U\261p?(\004\210?\253\276\350>`\346\344>h&\343>t[m>\324\334<\277\334\347\365>\224\002\177?\030\301\321\275sa\304=\317\342g\277\3656,\277\265\367\245\276XIa>H\356\233\274\036\213\037\276\214%\243\277Z\022\023\300\202\317\235\277\332\370\364\277\222\031 \300\305\352-\300\355\310O\277~\344\226\277\353\303\025?\320\'\336?\214\231\203?$\242\276>0\216C?\202\243z?jBz?p.\212?~\357\310?\354\013\325?\363\256\230?\003\"h?5\321\317>\311\350\265?X\014\n@\270\013\t@\344=\342?q\261\330?!\352\212?\200\336\355\274\227\222y\277\212\216\\\277\257?f\2764\201J\276\200\353\360:8\262\205\277-\212U\277\032\307\201\277\202i\n\277\230_\022\275B\013Q\2774\021?\277t|\025?<E\225?\250y\365?\240Zl=\233C\233\277\356\271\306\276v@\201\275t\213S?\030\231)?\302*\203>\032`\215?{\332\241?\272\203\375?\267\246\234?\341\204\307\276\374\241\216\277\255\302f\277\364gL\277&\303\256\277~]\333\277oD\033\277\016\252\002\277X\346\303\277\332y\214\277\312\030\002\300\352\303\223\277\034\233b\277H\004;>*\366@?\010\224\227?4\356\351>\322\340#\276\364bA\277\"\265\306\276m7\200\277\370\365\r\276\'\003\033?\300+\206=\217?\031\300\332iL\300Uk\222\277\024\260J\277\266p\356\277\210t\320\277\240]\'\276v\331\024\2760.\331\275xa\250\274\217`\310\276\342\323\212\277\370\215\240\277Pv\330\276\256\341\341\276D\016\357\2763\005\227\276/\345x?;\007\337?\350;\207?<\235<?\252C(?\014.N?\364\277e\2761\336v?\267\262_?\242\030\232?\204\021\222?m\354r?\360\372\247?a\321\005?M/$?P\345\275>p\244r?\016\r\307?\367\'\242?\234N#?z\365\215?\315\2356?\232\032\023>\203\250\025\277\274\333\271\2764\320\255>6\366x\277v\366\r\300\332N\260\277\204~\033\276\001\326\355\276\224\0059\275\373\017\001\277Bl\317\276\021\344\307\277\346\207\345\277\240\366\243\277X\025\202\276\322J\371\276w\226\314\277U\310\322\277\201\303\266\277\250\177\235\277\253\253l\277\3121\277\276\366>\243\276\240\232\361\275]\255v\277\311$?\277\310\026\227\277\300\014E<\314\0204?0\t\023> \021\270\277F-\374\277\'\324\017\276\300\354\025\277\033\332\362\277\215^\242\277I\021\213\277\246\n\275\277C\335#\300#\346\354\277\347\264\r\300\273\203\003\300\224\363=\300h.O\300\354\3359\300CSU\300\357\"F\300S\327]\300\324\215)\300a\2605\300\241\301\307\277\240*_\2757i\n>\016\216\227=}\247P\277\200\000\007\300\266\337\231\276r\367y\277P\345y\277\t\247*\277\356\235]\276\245\027:\277\205\302\261\277\233\344\232\277>c\201\276\322L\031\277,\245C\277\n\222f\277\340\350h\276;?y\277\227o\357\276\216\201\224\276\241\240Y\277\236\002y\277\330\245\242\277\230*T\277\030\374\270?\310\332x\277D_\336\277\310\340\211\276\270\023U\277\274A\017\300\275\356\005\300\340]\264\277\252t\321\277r/ \277X\026v\277b\r\217\277\215\370\227\277\266\340\355\2778\037*\277\266\355\237\277\374\221\010\277\316\207\030?\254^\t>\034\352\373=j\264\373\276H\331^>\311\315\020>\221p\004?\tL\035?\205Bt?\3603\254>\340\376\'?\223bH;\324\000\217\277\212\247\311\276h\t\331\276\263\214;\277%\376\200\277\325_t\277\254,4>\010\331\320>\310\323\000?R:h?\017\264k?\"j\237?tS\237?\334,\276?#\212\273?\367\206\021?\204\342\313=B\233*\276\021fa\277\220\203\033\2754\317\215\277\300D\263\277\331g\n\300h\0236=\2105X?=\350\270?\"}1@\210\371;@^\232\021@xc\271?\024\342\251?\216M\n?2\261\020@/W\005@\377\314\316?i\360N?\r\242K?\210\360\333>\326}:\277b\262\326\276Y\3304\276\030\317\321<\305c\000\277`\310\351\275+E\341>\316\n\313?0\345\216?U\221A\277\362\025\233\277\376uA\277@\204\237>v\031]\277\004\232\010\276\366\353\261\276\017\362\326>\270\253x\275c,\250?<\037\374?\307\303.@\370\246/@\257\324\023@n\341J?V*~>\236\346g>8\261<?L\335\266?l7\376\276)7\215\277lnK\277\206*\331>V?R\277\265X\220?\330\327\373=\330F2\275\224\352f\276\364\371\307=\263\203\216\277\331{g\277\204\315\352\276\002\207\n\300\262\246\"\300\366bg\300\337\020_\300\303\367:\300(f\302\277\216\260j\277\324\021\277>\364\"\002\277\336E<\276\017\341l\277\344\"\250\277\n]\020\300\273X\361\277\374\003\361\277\300U \300=\265b?ZF,?\037\233\271>\200\034\334\273j\236O>\347\341\001\2774*\021\277\3218\225\277N.\266>\264\325\301?\0246\317?\352\356q@\337!\026@\303\346w?`\2013=\264\204\262>2u\367\276\256\350S\276[\"\220\277\212~\310\277\352Ix\277\024\021\306\277\226\345\316\277\350W\373\276\013\271\204?\302\333\224?\223\252Z?\031\336%?\200$\210?\277\275\342>e\226\315\276d\210\305\276\336\340}>\357\321\210?r&\276?4M\223?\254<3?\311\372\222>\016S\n\277V\274-\277dK\005\276\001\023;?\000\275\177?In\230?\036\001\267?\200\2256>7\'\226\277\350\333\250=N\226\314\276\332\277\'\277\017\355\n\277~:=\276#!\021\276\3516p?\261\342)?2\025E?\256\215i?\220\252\223=\245\216\362\276\340\021\177\275\\\325s\276\333/\246\277\224\234\333\277\014\243\363\277?\364\250\277\365\021\206\277\020Q\002\277$e~\277~\373\352>\362\251<?\202\002H>B\3602?\324~\325\276\211\031J\276`y\273\273\301*\030\277\2301\017=y\337C?\362\024\217?\316\312\214>\332\241\021\277r>j\277P1\301>\332)\236\276^\0317\2770 \374=\256D\306?;\021 ?\340r\307\275,\227\276>\230?\354\276\203\204\365\276(\021\316\277\223\354,\277\370\202\255\277\200.\242=\336B&\277|\324\\>B1\344\276~b\247?\022{\261>3p\227>S\200\260?\300:\006\275\031;d\276n\245\n?@\002\227\274\204\262\236>\333\257V?Z\252^?\270\344F>L\030??\356\001_?\226JM?\240\265\337=\352\237\306\276\202C~>\022w\307\276_\000\253\277\013\031\242\277\304}\235\277\023\326\213\277L\352\252\276\206\244R\276qe\240\277\252\332\313\276\3034\233?\007\216\032@\006\2219@\214AX@\245!\"@l\314\244?\305%\"?w\001)?6\211G?\255\005 ?\032\263\277\276\006Z\014>\246\276Y?\256\242V>\205\0171?p\017\246\276r\3438\277\000<\207;S9V>\214\335\312?@\3460\275x9\236>\366\353\342>\212\316\235\276\023\273\307\277\351y\016\300\272\376M\277\010!\324\277\322\033O\277n\244Z\276\324y\323?\231\034\203?<&0?\207\371\032\277\"\230G\276\220\235\366=\352\013H\277k\270\325\277\300;>\300\244\233L\277\353-N\277\010\227\215\276\353}\r\300dI\354\277\373\217\232\277j}\261\277\310\027\202\277\024\316\002\2761]g\277\210i\233\276\213)\274>\204\2542\277\211\214\\\277H/5>\266\376\326\2760\216\376=v\327r?\302H\242?w\251\202?\r\311\327?=x\030@\314\327\373>\226\343\014?ka\224\276\231\034\256\277\242A+\300x\274\336\277\302\002\331\277\355\302\263\277\2177\005\300\256\005^\300\035\327\017\300\022U\265\277\220\246\014\300s\365\'\300\334\246\002\300\022U\251\277&%\366\277&\257\336\277\224\330\030\300\010:\035\300\246\025\221\277\023IY\277\"\372\226>\346\307\363>\t\217K?t@\377??m\304?\341U\225?&\320\214\276\213s5\277\230\000\375\276R\014\311>\214\272\244=Z\2769\277\243\253\251\276\276\2300>&>J>\252\217\016\2773a\317\276\256\306D\277\"\250\324>\332\000~\276\005\005\307\275\225\t:\277\021\372\256\276\273\243\221\277\000\344\350\272\3700m>l\277\301>\343\037Y\277@\222\356\274\247\330\005\277\354\031\223\277I\274\363=4\025\333=\303\252\t?\224&\206?t\253\254?t\254\356?\017\r\212?\360m\310?&Q\265?\3268\350?1v\005@\n\201\036@8k\004@\031\036\262?\006\300c?\300\256\342?\334\323\241?y\':?\2729\367\276\210\271\034=k\353L\277\373/\271\276jm\035?\250e,=\270[=\275T\372\212=\364_\221\276~2\266>\177\020\365?\014@\313?k\034\353?\340\246Z>\314\010\263\276lI>\277\305\2168?{^K\277\310\336\233\277\274\277\252\277\352\354\247\277\307\231\204\277\356\324\205>5\3576?\001N\256?\356!\203?\232\260:?\320\367\034?\366=>?\022n\213?\021\327\344\276x\\\327>xu\276\276\344\020\336\276`K\033\274n0\324\276.6\333\275cT.\27627\313\277\003\204\200\277\362\246\216\276\234\035Y?\260\333|=\202xC?\226\375`?\313\355y?z\313\037?&\216\226?\260\361\274?/\343s?`\217{>+06\277E\016\266\277\203w\257\277\315\231/\277\224N+\276\000]\301:\377\003\210\276{Av\277\247\361\213\276\365=\231\277i)5\300\303}\013\300\036?\365\277\340Q\241=T\005\267=\325\336\224\277>w}\277\241W\362\276m\304\252\277\3265\373\277\250\244\214\277\226L\277\277\246\361\262\277\342\024\307\277\272)\n\300f\004\255\277\030\230\032\277it\240\276\242\203\\\277\260\222;\276Q\264 \277\344o@>\262\034\353>Tb\330?\270@\355?\240]\031@\377\256\355?f\343\010@\217K\303?\004%\201?n\276\244?\306\327\263?\236\275f?\226\327\177?\020\235\321?\3532\336?\271\374\231?\226\353\031?t\362\260=}\013\301>6\332[\277\264$\330\277\247\371\271\277\326k\027\277\006\002p>\211\253\242?6\242\252?\335\266\r?\003\321Z>@v\212\277t:\275\276\344&\277\276`8.\277@4\226>\032\271#\277q\365\371\276\370\251\227\275\217!8?\364Ld?\360\013M\276\240\370\220=N\265\017\277\366\361\212?\2245:?\236\tB?\344\033(?\256)\315\276\024\035t?^\346\006?N\246\200?\366\343\203\276\300\277\225\276x\002\240\275\016\302\036\275qG\225>q\230\212?\250\311z?\222A\322?\"&\244?Bi\020?\210\024\366>\032\215%>\222Q\026?>\003*?\313\344[?\023\357\370?vF\236?\256\221\315>\342\'\234=TMS?O\021\257?hv\340?\370\222\302?\2367\235>\336p\204=\000yi\276E\344R\277\247$\256\276\327\360R\276\200\367z\275\332\212N>\346q\224\276\356\313J\276\300?3<\3356Q\277\205\333\020?\322\027\r>I\030\214>\324\326K?\240\177D?\350`\016\276\302\252\315>\317\035\270\277\036\210\220?\250\251\216?\370\350\333? \203\252=\346\003\\=l\252&\276i\332(>\241\377\000?\333 \030?\010\363\005=\300\301\007\277\320\346\242?\200\036\237>\231Cu\277\000\2707:@\356\361\276fN\010>f\362p?\200R\210=\366xt\277\2048\305\277\027\372\366\277\371\302\266\277\247\322\n\300Q\234\225?\305=\205?@\350\024?\236vp?0:\356\275x\331T\276\3471[\277Z\223\332\277\n\322\277\277\340!k>\342\034\357?\265\263\266?\370e\324?)\266\373?\240\225N=\254\2449?5\360\005?\t37>g\332v?\037\034\243?\360\344\246?@\377\022?{\027\315>rUO?\233\272u>\350J\004?\006\343O>0\235\211?\206\361\273>\234\367\026?J\004\261?\252Y\341?\371\261\347?\306\314\212?d\014\335\276~@\033\276B\355\006?\200\370\021\273\240zD\277\022(\212\277\210#\313\277\022\020[\277~\354\270>Tz@\276\010E~=$\360P\277\337\336\027\277\360\'\265\277S\1779\275:.i\277z\312\204>\244\204\333>^\334\324>\336\265\207\277\200}l\276I|j\277`\210\007\276\200\275\\?z\253\303?\275S%?\375\312\320>\377\337\001>\315$B\277@\360I\274\207xl\277\010\322d>\342n\234\275\224Fj\276\204\331\256?\026\023N?*\337\300?\307\001Q?52\250?\'X\213?\007\212J?\210\367\204?\304\234\023@\340E\270?2\245\n?\220\245P\275\345LD\277K\372J?\026\031\204>y\316\n?_a\177?\340\\\372<\256C\342\276`;N\275\036$\205\276\037\332\225?\332\360*?\234\244i?\010\321\375=>\253\316\276\271\033O\277J\302\327\277\316\016\272\277*f\324\2771u\261\277\366]\r\300\260X\326\277WA\217\277t\247B\277\334pf\276G\352\373>@\\v>\344\310Q\276\207p\323\275`]:?\266E\000>\357/\246\275{\242O\277\305\263\004\277\371a\351>\342f\016\276\377\002\307\276\004\3068\277\300\212\223\275\360{\340\277\340a\253=\023\366\\\274\013mW\277W\337\330\277W21\277\373\303\037\3005\203\377\277\325\346I\300V\253\034\300\343\370\022\300\270\341E\300L\202\311\277\274\226\005?\002\2412>\265\r[\277\022\234\302\277\016\315\276\277!_\002\300\231\322\336\277\351\223\274\277\027\006\263\277\222\013\363\277\000\222x\275\322\272\342\275\265\257w>,\274l\277\370\331*\276\344\264\271\276\361D\260\277\314KR\277\014\340Z\276\275\013)\277\201>\223\276%\344\">LO\030\277\037\363\004\277o[#\277W\277\337\277\343\252\016\277L\265f\276\325\366\256>\nE\010\277Z0\177\276\306&\317\276\032\366\030\277\205\323?\277\202@\362\276,\244\351=Zn7\277\035b@?lCU>\257\320\032\276\205\343\335>\344\312\235?\275\302\326?\"\327\270?L\006\342?/$\"@rx\004@\303~\035@\"\343\006@z\342%@\2371\210@\236\242?@V\025_?\200)\304\275\024\036\212\276Y\3173\277\2224\210\277\314\2733>F\367\207>?\355\020\276\262\003\027=\343\307\343>\014}L?2\270\203\276\311\\^\277la\325\276\020NZ=\017\203F?\321G\016?~f\276?\200\244\364<\236\370,\275\000\361`;\001\036~\277\262PW\277\215~\270\277\347/\224\277\350\033H\277\270\324\236\277\014w\013\276\335\343\223>\360}4\275\t\323e\277\347 \216\277\216\365\373\276\014\276\210\277y\332\237\277\210\211\033\276\317\327\315>\n\215\204\277S\317\177\277H\'P\277\210\205\212\277\262\222\210\277\220\002R\277C\"\271\276\304\243\224=N\222\321\275\272\2709\277\026\201\022\277X\232\300\276\266@\030\277\240\004-?\004\203W\276/\222P\277\222\262\037\277\360\'\320\27538u?`\305\360\275\241Y\314>j\024\220=\341\343O?\r)\035?\2051%?*\323\216\277]\266o\277@c\000\277\373M4?G[\204?\227&\n?\020^\254\274\220\240\270>\030\216\362>\355\367L?rt\250?\352\366)@(\271-@\254\351\274?\255\010\301?0\202\273> \020,?\303\234\224?J\253\267\276\3367\003\275\003\2111?\030\310\266>\376\361P?]]\317>\264\370\311\275Z\226\270\276\035\266\264>\207\202\250>\034\210c?~F(@]M\005@8\205\367?\220\r\331?\376\243Z\277\263\331B\277\240\201K\275\352\364\247<\354\322\031\276\377\237\277=.)\235\277\030\246.\277\020\336\377\277\274z\020\300\005\200=\277\364>N\276L\366\006\300\356\344\321\277I!\265\277\200}\032\277\250w\006\277\241q\021\277\257\304\000\277\"\233i\277\246\223\317\277\017\355\331\277X\200\022\300\022!\306\277\337\354\373\277\2346\373\276q\243\276\277\324\035\304\276\374C#\2760\222\271\276\307\256\200\277\234\356\313>\032\307J?\"\373\242?\365\227\247\276l\341\311\277\264u\205\277\214\302\235\276\000v\225\276\320v\230?\\Yh\276=2>\277\340`v\277\033\306\202\277\000w#\273=I\341>\000\236\355;\314X\030<\020\310\001\277X\t\177\277\250\373>\277\312\024\375\277\323I\224\277-\226\367\276\205\036\230\276\306\254l>\220\r\374\274\315\022\232\277\331\350&\277\351=\340\276\214^\211\276\214\315V\276}\313\203\277\004\270\311\277~\241\373\277\272r\254\277\010\205\214\277\001e\241\277\206\n5\277ri?\277\003\177\331\277\211\320\265\277\201\'\255\277z;\324\277\342\300 \277\304\026Y\277\037I\345\277\360\353\342\277\0007\r\300\355M\013\300~\t\267\277\357B\342\277\036\177\n?rM\226?B\236\220?\326s\332?Vn;@\021\257N@a\372X@-\373B@\"7)@\334\234\334?\020\253\272?\300hp?\276\204H?\272\313\007?$0q?4\033\373?\034\322\365?{\376\233?\035\310\241?\034\001\321?P \365?\200\3321@\254\234\307?\214\256#?\\\345c\277\001%/\300\250\266\255\277\214\310\370\276\264\245\326\277\006\"y\277!\020\033\300&\200#\300\214d\315\277\027D\014\277\010\276#>L\207\304\276u\304\232\276~C\035\277\356\234\276\277\003>\377\277\252\304\r\2772\304&\276\352\214K\277\374\263\313\276\355\317\237>\t@a?\313 &?\322\373\256?\336\357\224>\266\225\237?\326\267\002@U\233+@=\355\003@:\013\031@\302\000\213?P\225\014@Lk\366>\362\027\346?\211\206\"@\211\207 @P\305j>\260\224\325<\270>\322?\341\033\270?\313\275s?\365\036\261?\210\004H?0\354+\275\345\353\001?\262,l?\200\t1\275\332\316\031\277\210IC=\345\016 ?7\264\206> \346\001?\260\"\303=\207-!>\306\324\265>\340\352\007\277\000\370^\276\320+]>N\252\244?2\275\344>\246I=?/\023\230?3\272\316?A\023\223?\245\343M?\213\350\233>>\261\255>\252`a?o(I\2772;o\276\277~\307\276\356\206\217\277\262YC<4\337M?Px2\276d\215\242>O_7?\314\250\264?|\375\231>\\\3321=n\274\250\277@\213\314\275\313\206v\276\262t\022\277z\254\020\277\2011\212\277\356\256\351\276\220\271\245\277\2669\205\276.\371\255=\231\252V\277\3229{\277\022I\253>\320\270m\276\301\274\257\275\320\360:\277\374\373\200?\344\212\235>\241\351\205>uy\212?\220\207\323?\034\351\324?\363~\003@\021B1@7\314\021@\210\2744@Q$%@W\273\350?\224\227\037@\230\332J?,\314\025>nN\001>\027\243\200>D\270\364\276w&\310>\014\334\252?B\320\223?\245\267)?\256\366\222?bF\002?,\253}<\350G\220?\370\344\251\277\371\3712\277\270\351\002\277\244\243\265\276{\204\355>\246\334\234\2772V\203\277\032\252\257\277\n\237\266\277\344\017\027\277\005#\326\277(\353+\276\233Jt>\372d\205\276\256h\336>\315\343\034\277\204th\277\240\0003\277\330m\234\277R\306\337\276\367\373\245>\347\365\201?\340g\215?\304\320+>\2468k?Z\235;\277\224b\332\277pr\250\2758\204\006>W\225\254\276\006\356\032\276\356\326\r\277\006%\213?wM\205?\320p\343?2\256U?\250\005\262?}\244e?\243\361.@\356\215\307?~\030#?\367\341N?b\206\325\276\324\337l>\336\327\224>\341\030\273>f\206\031>\355\304\014?\374?\365\275\010\222\321\274\026\241>>\252\243\\?wu\277?\320\361s?\306w7\277P\253\341=<3-\276\007\024Q>\367\2747?\254\377\371?$\351\306>\000Y\014=\353\003\352\274}\261W?\230R\341>\312:C?\026\275\223?(\246\'@S\237J@\250h\034@\343z\322\2774y(\300\202\362.\300\227\372\031\3006}\037\300g\001\n\300\335B3\300\200\306\316\277\247\361\234\277\230\300\022\277\230w\017\277\2266\242\276\201\265\203\276\274z\023\277\374y\222\277\t\337c\277\272o\254\276`\304Q\276\306@5\277xv\230\277\304\242\236\277|\360\n\277\300!\251; \211\264\276\021Z8?\260\247\221\275\312\377\230>q\357\257>D\014Y?\210N\263?\300N3?0*$\275\340\207\223\276\236\246\005\277\000\326\236\277a$\n\300\235>\322\277|\311*\3007\272\001\300\276\223\263\277\030\222\275\277\000w\001\300\220\0079\276.\035\240\276`\022R<8b\326\275\006\344\320\275\200@\327;8\302\207\277\334h\367>\310\247:=\003\267\216\276\350\213\032\277\030\276\255\275\"!\264\276\240\252d\275J\344\206\277\257\307\200\277Kz\252\2770$-\277\274\330\325\276\364s\224\277\226\313\t\3003x\035\300\033I\337\277\361\016-\300J\\\325\277\321\315\247\277\217\355\304\277\330\244N\276@\357\203>\206Z\003?\302N\233>lU\'>\236\316\260\276\341\214)\276\"e\255\276\370\274\215\277\340\242\367\277\340\375{\275\025\376\336\276\202\017\241\277\335I\202\277(+\017\277\212x\243\277\034:\022\277\246P\230\276 .\227>\036H\315>\030c1\275\244\223\311\275N\257\344=\262U\262>\220\375{?\217\256\324>\200+\317\274\010\312.?\366\"A?\326/\373\276\210\373-\276\336[\342\276|\366\306\276\325\"\244\277\340\271\325\277\003:\304\277\200p}\274|2F=\335\006\264\276\034\263Q\275u\277`\276\204P\337\275\367:+\277\357\357%?`+\212<\010,\212\2765PG?\030|\321>\206+&?\272*T?:\345\335?1\254\252=x\273\037\277\026\007\032\277\374\031\337\277:\262\022\300\334\363\237\277D\204\357\277`\274Y\277\224\313\024\277\246\230\204\276\000\301\244\272WiD\277\320\235\335\277<\003\214\2772\200\204\277\256\210\233\276\352\356\354>\031)8?F\225W?\002_\232?\350\t\032?\000(Q\272\377\317\r?\362Z\343>;\253\235\277\230\234\035\300\340\031\007\300\214\214\261\277\375\203\004\300\377s\277\277\302CA\277\034\307}\277\257\354\323\276o\252\240\276co+\277\3243\222\275\370\013\304>\022\2279?\365\251B\277\363\362\256\276\006\331\036?\312\213\223?g\356\004@@\220\242?^\307\005@\215\376\022@P!\363?\230A$@A\306u>Y\"\017?\037\263\243?\310\320s?\3421\312?8\024\271?\210o\236?r\331\003\277k\333\300\277@\343\256<\0010\350\276O\322\275\276\026/\233\276\242h\356\276\242)\002\300\226\225\364\277\3260\036\300$\t\377\277\273\334\254\277\"\354\205\277Q\316m\277h!J\276\304\030\014?\246\205\323?\212.\323\277,K\312\277\360\371\257\275\272E\276\277-\2530\300\364|\344\277\'\r\313\277x\243m\277J\315\255\277\026>g\277T\215\240\276\230\257\304\275\347[8\277\006\250\262\2777\336\031\277KH\205\277\273U;\277\206\333\252\277\226\205\353\276\340\340G\277\350\005\032\300\332\236\357\277\t\246\006\300lJ/\300\026\032&\277R\217)\277$\031w>\216T\000\277\277^\363\276`T2\274:\274\231\276HJ?\276X\330v\276f\325=\277.\317\273\2760\233\033\277\342\220\223\277>\013\316\277\277{\212\277\204\002\020>d\376?>\277^\253\276m;\264\277\025\261\247\277\227\365?\277\224b\001\276\277F\035?\340:\261>\360|\254>L\212\200>\020\312\331\276\300\323\023>T\016;=\364D\216=\333\032G>\227\'\222=\002\\F?\234\210.>!nL\277i\245\204\277\3235\223\277O\352\236\277\205\204\213\277\241K\177\277\337\253|\277\000\023I\277\003\213\217\276B\232T\277\377\207\222\277\204\312\036\276\031#\265=E#\376>z\005\267>D\206\352\275qat\277 \367\r\276\235\227g\277\\\302\201>\032\235\304>\340Hm\2753\356\250\276n[\266>\"\020\004>\226\363t>\200\251\345=\032\230[?\255]\243?pC\036\276\300\222\n\273zVI\275\376[\300\276\\\212\231>\r\322~\277A\247\231\277\210\304\254\275/h\262\277\272^\030>$\233=>\265|\020>\320\366\266?\354B\312?\260X\275?R\370\271?\366\025\361?|\356\344?~\266\272?\327V}?fW\027@\300PU@\231\242\202@\244\262a@R\"?@P\240\335?[<\014@\211\272\324?IJ\342?\271\320-@.\312\366?\246\'\024@\177r\014@\332-s>\350\317\032?lc\257>\262qe?\033\321\226?E\362\251?\006\351{?\365v6?h\352\231?f\216\262?)h\002@\301:^?\034\346\257?\270\005^?\000\300\266\275\027\377\245\277d\017\341\276\n\322\222\277\003a\207\277\006\036\251\276(\002v>$\273D?\212?\364>\006\330m?\267\273\220?\300\234\263>\211Qs\277\350\010b\276[87\276\360\375\222\277\000\020\225;K\360\036? \263D?\177T-?\320G\216\2770\311S\275\377\205[\276\250\211\245>\214\241\022?\016\3742>>\014\345\276\352\342\220\277\377\351\003\277D\337\363\277r\231>\277E\333\315\277j\027\224\277X\365O\277\324\005k\276A\265\230\2759\034\265?\254\016\006@Z\366\222?nS\265?}\263\223?h:p\276\004\312f>\354\340\013\275\226YH\277cj\207\277 \273\253=Z\333\225\277<\355\224\277\333\317x\277\000\254\366\274\327\177S\277N*\303>\365F\220\277\262\373\320\277r\355\002\277\247\024R?F\343\232?\325[\204=[\035\016\277\020K\255\277&\352\200\277(K\333\276\207\367\023\277\270\311\201?hX\204? n\305>(\345\247>\334|6?\200\215\233\274}\000+\277$\2026>t\000\245\275\013\2746\277\2447\005\277\257\r\263>\010\206\221?\250\t*?lT0>\221*b?lWP?$?\277?\332\021\274?\252\213\024?X\317\274>\032\351Z\276\372;\034>T\001\224\275BC\277\276\260\016\377\276\004\037Y\276\355\000\254>\n/U?`\036;\276n~\006?i8\213?\016\261\t?\014rr?}\2376?P\363l?&\034\035?\331\370\212?\347\377Y?0U\347>\035\247\226?\334\215 >\225\216\021?hm\'?\360\033?\277 \316<\277h\201\251>\"\304\243?H\217\233\276V\206\004\277 d\016\277\310\207r\277\033YC\277\272>a\277\214\022.\276\033^\365\276\366\274\254\277\324\316\202\277ZW\254\277\262\267*\300\250@\243\277\232W\323\277f\t7\300E\221\000\3004\343\260\276\347\267g\276q\214\320\274\312\004{>\2501\321\275\025\006\221\277D\021;\277\330\274\\\277V\"\216\277\230E\214\277\324\312\177\277\030\254\332\277\022\345y\277\223\003\001\300\273\211\263\277~\365\373\276\2256k\277^\315\321>\365\300\301\276\252\033Q\277\356-?\277(\004\263>\025\341\220\276\000\257\332<\365\246\213>\336\350\231\276\002\334\336\276\341f\216\277\341\246{\277IY\233\277\227\327\\\277\3046\221\276\312\353\335\275\311\t\n\277\355\022\247\277B\000\034\300\n\213\266\2776\356\260\277\222\246\306\277`\207\304\276t\300%\277\360&\315\277\270\231\325\277\005}:\300\216\260x\300\356\270\351\277\302\370~\277\232/%\277\321\034\022?.\211N?\314\223\030\277\024R\360\276\\0\315\277\030\323\230\276\316>\341>-6\227?tJ??4\2541?\200\367\267>\247\307\362>\241\006\302>\246\227B? \207\352\274\023\326\361>\036\nZ\277Ph\030\277\217\360%?\022\025\212>\360\236\306>\240\312\310\274\2222\333=\030.\226\276\246\224\260>\346\314K\277@\216\032\277\213F\245\276u\332\277>\322\335O?\260\302\345?\n\305r?\203/\003\277\205\016\301\277\360\233\220\275\355\3573\277\234\177\376\275\246T\005\277\240\336\237<N\222*\277\210\001L>[\222\023?#\205\305>W\262\016?\375\210\261?\302%\255?\324\203\350>\3114\247?\3316y?R\333\245?\323H\361\275\'\341\344\276\222\312!\277&y\251\277\265\365\212\277\333%\237\277,\365\006\277\370\201\242\275\337\214\004\2760;\361=\263\306\246\276^6\225?h91>p\234\036?\026C\271>(\324\316?\336\237\210?\013\200\203?\202/\312?\331.\376?j5\260?\357\370\334?\250f\020>\021h\346=\356\243\217?p\270\221>d\211\230>\234\210)\277/7\341\276\302\202\205\277&0\204\277\365v\224\277\216Y\311\276\270w\230\277\177XJ\277\026(\000?\337\006\r\300X\037R\277\244\022\000\300&\210\\\300-\307X\300\367<P\300r\235\346\277W\213>\277xA\245\2758\371\235=\317\325\010?\244 \333\277_E\221\276W\020)\277\335\002\260\277\360~*\277lq$\276~&&\277\300\362\306<{\236<\277\353`\245\277\001\021\225\277G\265\311\277\343\r\312\277\231\342\241\277R\215\252\277}\\\245\277}\010\321\277\026\030\330\276y\277\255\276\200\332m\277h\013\261\275\n\350\212\277\266\\\312\277OO\267\277\234s\351\277\t\372}?\317\236V?R*}?\356L\263?\n\252R?\330\350\221?\006k\341>i\247#>\374\216\246?(\1776?\232\311\017?\250tY\275\361\371\263\276\224\013\001\277b\375\246\277\037\253\217\277#\260E\277\215\354\026\277og\022\277`\263\275=I\305\205\277\\!\233\277h(1\276Gv;\276j\346\200?\026vy? \355,?n\255\020?N\210\300?N\\\314?i\350n?X\351\302?K\214p?\340\215\206?\020\323\235?\031&&\277\244\274\250>\235\224\013?\314\223\257?\010\024L?\3647\317\276\354\332\372=\250\216\335>\0074\261>\357\024\233\276\252\3172\276Xg\372>\271\003\215>|\003c?8\311\362?\241^3@\006\030>@UF\010@\3070\272?\226\3639?UD\354>bt\225?z\345f?e-\026?\224\302n\276.s+>\313\237\222?\200\315\213\274kR\375\275\303\223\003\277nON>Y\265\232?\356\243\004@\370\2200@\272R\035@\270v\014@\320>\241=\026$\313>\3669\004\276\343o\247\276\344\203N\275\3244\305>\235\273\333\276\274\022\225?\315\367\332?\252\337\016@\227\221\005@\n\350\256?\237=c?\236\036h?E\320\277>np\275?r\341\\?\021.\t\277^\024\034\2768AB\275\\|1\275!Rk=\343\211\307?\024\337\002@(E\204?\371\031]\277\300\365\315>\244\312\305\277\304\025G\277\311\254\014?bVW\277\330\205!\277\276H\206\276\372\373L\276\300\001\366<\345\345A\277\016\236\270\276\204k\353\275\'F\216\276\340\002#\277\035G\223\277~\235\312\277\211&\022\277\244\356[\276\356P\037\277\232Q\000\3006\222\336\277\310\352\273\277\257\022\253\277\013j4>\303\235\374>&\315{>\226\2172?\220\323w\276\n\033V>\207]\204?\002\370\'?H\020\035\276\256\0338\277\256h\376\276\025\020\177\277\220\201\017\276L\272\320\276\320I\"\277z\207\315\276\242N\360\276\344\233\266\275\376\356\244?\262\207\254?\350\212\307?p\366]?\261\002\001?\255\374\306?\352\220&\277cn\037\277\365\\\364>l\316\357>X\036\356\275\2310\322\275\014G\277<\013U\270?-0_?\344\030j?\2208/\275\274\016\003\277\215}\347>\030\037\230\275\240A\024?\227*x>NUp\277 \037\010\300i\016\272\277\304\374\301\276\340\301\024=]_\335\276\302:,\277j\200\276>w\204\315?\346(:@\261S\356?\344\026\036@pN\010@z\227\371?R*\226?NG\365?\233,p?\336\225\317>\024\363{? \375\223\274^\232\375\276o\253\032\277\314\333i\277\360\305d\276\320lO\277T;\224?\277E\335?\202u2@\262\020/@\240\232\r@\n\346\373?9\343\363?\221\263v?z\222w?\266p\320>\306\224\361>l5=?@\030\250<]\220\251>\300#9\277\317\007$\277\034\211t>\300U\t\277\220\312\007?V\231<?\274\350\303\276\230\250D?W\251\202?+\177\030?\236\tj?\266\373\314>Z%#?)\312\254?\'\260\241?h\203\264?\301\203\000?\312\2732>\240\357\362<r\263k\276n\340\362\276\026\2436\277vU\227\277\317\2705\277,\336j\277{\226E\277F\201\337\276&\363\263\277`\253\006\300\000\363\017\277\332\316\256>\210KT?\356\027\325>\310A\234?\225\"\244?\350\222\026>0\205\023?\244@]\277\372O?\277\370\270\242\275\304\327a=:\253\322=\2352\342>:\"N?\314\216\236\276\265\274\242\277\262/m\277\025[\321\276\251\276\315>Lx\340=\252\333\217?\333WK?\343\371\260>C-\221>+\363e?)+k?F\377\214?\334k\253\276d\037\020\277X\300\275\276\274Kq\277\021\366\213\277\303\031\355\277\336k\020\300\362\271\205\277\020\317s>\377P\016\276@>t\2761\351\034\277v\306\305\277\241\360\311\277N\351?\277\310\\\330\276\372j\360\2765w\003\300h\023 \300z\365\353\277\220}\004\276\262\030\r\277\326\335\202\276\273[\317\276\236\t\006?30\201?;\021\344?\306\336\245?\336tH?\000\203K\275g,\243\276\364)\\?\237\036-\277*Q\323\276\260\377\237=lX\003?L\024\323\275\344\226\202\276r\025\250\277~\252F\277\322\005`\277\216\361\032\300f\371k\277|+\023\300\370g\261\277\226\262\363\276\246\255\002>\340\363\323?\2000\"?\225\3576?\304c\270?\240\266\214>\230\255\010\277\020\246\212=u\026\215?>\017\016@m\243\307?\301\361\035?\261\363\013\277\211U\232>\220H\217=(\345Y?J$\330\276\270\272\223\276\216\315\265=!2\206?\000\207\344;@\\\211?D\027\201?\324N&?^\263\217?\360Y\022?\266\307F?\025n\317?l\003\004?\342\376\232>\360S\312?@s\276?:&\276?D\322\342\276)Vr?\250\270\r>\213~\215?\372\371\237?1\007\270?G\226\277?\307\031\237?\350\023\217?\263\307\245?\301\236]?\240s\222\275\022\322n\276\3227\363\276\242<\335\277\202\271f\277h\205\256=\267\365\213>\010P%\277_\205\t?\034\273\207\277l\035D\277P\263\374\275\313\201B\277\211\t\024\2778+\252\276\304q\361\277\035\375`\277\225K\003\300\002&k\277fh[\277l\330\250\276\036\357\225\277-j\n\300\002\005\034\300$\232\000\3004\230\346\277C\315A\277\020Sw=\274\222\202?4\236Z>\234yq\277\000eB;\232\376Z?g\033\030?\302vX?\370H\376?\340\250F>\322\177\010\276\002\022\016\300\330\356\304\277`\204Y\276\360T\217?\263U\326>\242)\\?\372&\353>\213\374\270>\204\0321\276\255\301\036?\321\350/?h\264\305\2764^\327\276\240\311\314<p\260\343>\264\357\371>X\351\"?\330\376\247?\232\216\350?QQ\364?\220\365B?\313\007d\277\210\234\257\275\224\263\241\276\0034Z>*f\354\275\\\231\240=\224yT\276.\334(\276\227\3002\276/W\215\2770$\017>\320KV\277\250\023]\277\276\013\331\2778\026\265\277\227\330\216\277z\345\213\277\264\362\337\277T\254\232\277j\213E\277\340\0201?\234U\275?\004u6?bwd?t\007^\276\262dF?(3\231?\376+\200?\332\303\375?\360\202\265?\326\334\375?\016\222\371?\022\305\231?YC\202?\310\201S\276C\346\222\276c\2647\277\247E\325\277\342\232\356\277\3533\237\277D\362q\276\364D\357>H\212??\200\203Z?\000Y\t\274\342\000\320=\263S\256\275\344y\304\276\332\322\014\300\t\'\376\277\265(\204\277G[\032\277N\254\007\300@\366b=QU\204?\255&\235?\250\305\304>\034Z\002\277\356\354\200\277d:\272\276\216-5\277\216\006\345\277$7\361\2773\270\302\277\366\235W\277N<\262\277i!\233\277\n\350\311>\031a\365\276\014\242\243\277j\250\026\300,\266\204\277\264\375\251\277\324\223\351\277I\323q\277\340\311\234\277\326f\037?\306\334D>\307{&?\274\005i?\2575j?\330\200\035@\306O\005@\024\362\375?\007r\273?nW\245?\312\004\324?\326\364\337? \353\320=\275\305\331>\336\373D?7\316\004\277P\202\252<\356\206\024?7\346\002?$\324\204\277\364<W\276\364\017\337\276x\234\266\277{K\013\300\207i\361\277\364\3134\277\310i\364>\354\247E?OV\336?7$_?\222\377\263?\300\2157>\006\267|>\276sM> \267\251<\224\276\345>\274\300&\276\034VH=V\374\254=lU\035\277}b\034\277_\t~\276\277\212\n>&\t\246=\200\343\237=\007y0\277\330\261M\276l\376f\277\211\376Z\2776\032\373>\035\305\220>`?\264\277\365\317\345\277\326\177\202\277PIo\277\305\213\025\300\343?\332\277F\373\300\277\027$!\277\226$\332\276^\244\303\2770\334G\277w\230\304\276#g\204\277\340\256S\276(\347\004?\010{\230\275b<`\2774\222@\277F5\243\277\361S~\277\014\'`?\250\245\222\275\302\022\312\276\335n\325\276p\201\247\276\004\017\"?\376\262\255?\255\225\300?i@\367?\000WN?\357\331\203?F\354:?\242\330\263>\351\262^>\270\002\207\276hG\251\275\344\330\212?\006\250\266?\306[H?f7\370?\326q\213?\321:\253?\336\013H?6\"\300?\247d\201\274\371\335V?\360\273\010@\010g\310?\225w(?\266\260\220>\273\332@?\004\r\336\276\362\315s>\026p\023?\002m\355>$\033*?\375\230r\277\023\216f\277\2639H\277\3566[\277\2325\270\277\226\222\007\277P)\337\274zZ>?\320\2454\275K\2719>N\234W\276\260\207!\275\250B\206\277Bl\326\277%\224\246\277#+\232\277\371L\022\277@\344\221\273\220\361\'?\300\341}\276d\223\207\277/<\r?^\344n\276\022>\002\276~\330D\2765u\016?]\271\327>8\376\006=`P\016>\2400\213?\032\005\335?\337`\014@\304\375\235?\\\205\243?\256\025\216?\300+l?\232\222\327\276V\346\212\276\036\265\262>L\375\031?\"v.>*\243\301?\307C\004?\252bA\277\022\367\315\2772\263\275\277T\377\362\277?{\213\277\213I)\277\360\247\031\275\243\306u?p\340\271=,lz\277|\216#\277&\"U\276\235\013\354\276$\2267\277\360r\346=\306\375\244?\324\274\021>]3\224?\257\332\031@\352\r\263?\356]\231>\372B\241=t\335m\277\370\357\361\277\346\335<\277\"\031\206\277\216\252\\\277\271\273\251\276)6\235\277\n,\331\277\357\377D\277d\335\361\275\324J\233\275\n\177\235?l\001\'\276\372\325\200\277\tK/\300i\247\362\277\311\255\253\277\335:>\300\372\'\264\277\037Gj\277\000\277\356;%x\207?]\377\033\2770m\222\276\006\342\376=u\006\276\277\016\306\236\276\364\337\200\276#\215\263\277\216\221\333\277\001z\272\277y\236H\277\326Az\276p\366\006\276\020*`?\240(M\275`\251h?\212\002\236?\336\216\344?X\340\026@\"\306\240?\264\006V>\272\334\336\276o\324\211\277\016\263\013\277\021\244\367\277\010\003-\300\370|\325\277\230Ww\277Z\260\031\300>\227\022\300*\244\277\277@\264a\275Z\311=\277\344\031\n>\353\270N\276\200\272\203\277\377\007\360\276\312\214\272\277iy\216\277S\327^\277\346\307=\277}BL\277/\246\364\277\343\303\002\300\007\205\330\277\002\254<\277\374X\035\277\236\266s>\006\227\331=&\'\205?\370\342\265=>~@>\244j#?\354\237\236?\344\006\301>\300|?<K\252\266\276\336I\330\275\"hi\276\217\346\222?L9\251>\272;\271?*+\221?\342\325\305>\225T\327?\224\005_?f-\277?\010;\215?L\216\343?\366\267\027?\216[s?\261\202\262>\032l\305>FI)\276\225\367\004\276\233\002\210\277S\355\003?\033\226_>\224\366\207=\241\027\231?\252\215B@\233\236\027@\202P\341?:\257\315?\245\210\322?\226\353\330?\200\010\320?\335\032\327?\230u\005@eG\"@L!B?\357\270\r\277^\225?\277V\270 \277Hj\272?r\023\006@l\036\340?>\030\025@\327\305\031@O}\010@\360\301\353>\330\005\244\277T\276U\276#\211\000\277>r\377>\023\026\236?\366V\212>\242og\276\304:\256>B\2535\277\000\264\327\276$\017\340=0@L?D/\303?`;\357\276\220o\202\276\020/\263=\304\212\263\276\007\325\226\277^6$\300\324\222\223\277\244J\236\277p\322\321\275HLC\277\266\356]\277t\365\004\3006o*\300\005#\346\277o\265l\277\237\274\222\276|P!\276<\204\265>\'S#@E\271\036@\311\3530@q \013@\270\355\246?\274\276\361\276\306[\204\277\377Q\235\277\324/\266\277\372,\014\300\r\315(\277`\343_\277!\332\256\277\260Q\306\277[#=\277\373\022\224\277\342M\300\276\314\331\314\276\362W\201>\205\211,\277\254\223\364\277\301\250\211\277\330\264Y\277\030\215\320\275w\211\265\277a\346\226\277\307D|\277\220i\204=\352\314>\275\331J\324>\016\n:\277\216{\'\277W7\002\277b\273\216\277\263\265\037>K\017q?\217\304\343>\204%\312>\0209\020=\303c\273?\240\027\261?\326_\264>\314l\253=kI9\277\2005\230>\362\273\024>\035]\255\276\rq5\277\n\246#\2763\332!?\320<\271<\342\3336\2740\300}\277\372\223\214\276J\322\203\277\367\346\256\277\252\013\037\277\220q\033\300V\220I\276\326\022f\277\306\352\n\277(ta?r\351\366?\277\252e?D\213\225\276@l\344\276\344\262\202\277p\2036\275\241\376\317\275`\225\326>(\274\030?\010\257\276\276x\244\364\275\325\367_\277\254\217\227\277\004\357\263\277\363\317\006\277\006\227\263\276[\3672\277\005\376\032\300\254\345V\277F\251\355\277m\341n\277H\221\321\277\242\203%\300\377\321\266\277p\212\212\277\"j%\300\002\003*\2779\265k\277\374va\277j\265n\277\223\213\023\277.\272\272\277\303\317\203\277\n\227\344\277`\203\336\277>.\310\276\311\212\255>?\340@\277\376$\023\277\3264\222\276\005&\001>`\310\304\277=V\332\277\222\267\241\277[\324\262>4\232\305?\0109\310?\211\337\020@ S\305?\310\236&\276Z\244+\2765\314.\276.\265\375\276\322F\024\277\210L\275\277y\027a\2777\032\273\277\003\355\225\277(\007\232\277x\324\372\277\213*\003\300y[\320\277 /\317\275\t\377\370\276\200x\244\275\221\273\250\277\274\340\373\276Ug\235>V{\017\300\310\373\004\3008\325\277\277\t\264\007\300]\246\334\277\203\260\002\277\254\343\276\277\022\200\025\300\362b\240\277\3402\006\277&Y_\277\214O\330\277&\373]\277\216\341\236\277\225N\225\277`\246\027\277\006y\217\277\273@^\277\363\200\267\277$\323\225\276\363.\351>\243zf>1\rN?\002f\377\276Q\226\270=\340(\034? \243\201\275\271D_?\354YY?hy\213?L\363\224?\031\316m?\240#\365?:\223\314?$`-?\004\267\363>\373+f?D\205\235?0\2233\2756\267\033?\375\024\237\276\242\325\310>\"\260\030?\324\275\377>\270T\230=\364\256\032?\351\035\311\276\245\254\342>\230<Z\277`\276\003=)\357\204\2770#\250\277\034\327\225\276.\036\255>DZ)\277O\347\327\276\274#\215>\205d\032?\350\270 ?\245\000\032?n\247\357>\204\220\025?\332\034f\277\313\023L\277\315\022#\3007*3\300v\343\211\277\0279\213\277\366\324\330>ix\305>*\316\227\276\362\212\330>,\353\037?[\"\262\277B\253\241\277\202\343Y\277\330n\207\275\320\004\203\277\034\306l\276\270zu>\353\357\210?\000\247u?\320\037o>\027&\335=|H\215=\\\212\335>\030\201k=\332^-\276\365D\201?\366P\270?\344\361\272?\274`\245\276\256\342P\277\007\306d\277\246\277\317\277^\266\310\277\333<\321\277\010Y\004\300\030\026\276\277v8\244\277\345oU\277\006\001\275\276x\240\026\277i\232\034\277\034\275\336\276\316\377!\277\250\242U\277\237C\022\277\216i\242\277<\200\003\300~\326\301\277\262\0042\300O\206\220\277\366\314\'\277Fg\345\277\312p\007\277Pb)\277\311\024(\277`,\365\275\374y\206\277\226\204e\276\0165\240=\r%_\276\374\277*=\235\320\357>\364\243\256=\336U\205?\306+\035@\306H\025@\357\235\031@\2658\344?\240\376\250\275\256\3538\277Db\037>\200\346\351>+l\352\276\3545\360>\200%\211\275\030,\332\275\257\177\200\277\257#\220\277\232K\210\277\274C\276\277^\202\262\277\330bc\277@A\"\276Q\201-\277\345L\236\277{\273\224\277!\033\222\277\204w\251>\262N9\276\214\212|\275L\353\331?\022\274\271?/\266\255?\306|\216?B\000\312?\202\213g?\251\3236?\0301\014?\361g\016@\311P\300?\360.\006?\215\235\021?\233J6?p\355\202?\252& ?__\031>m\274\233?\347/^?D\270\354\276\322\205N?\256\244\207?wC\264>v\272\243?[CO?\277-\271?\034y\234?e.\216?3\230\234?np\244\2767W\350\277\347\277\352\277X\263\326\277\256\302\355\277OO\333\277V\304\375\277\200\270\206\274\245\200<>\236\242 ?\030\262\216=\340${?!\200y?\315\203<?\232\323F?T\250J?\272!\351?\034\317\363?\306\003\314?\274\317A?\205;\211>jv\211=8\324/\276\206r\236\276\304\277p\277\010\300=\277\261zN\277\360\376\240\275\352\325I=\361\322 >\211\204\035?\317:\030?4\305M>\365\255w\277\263\372D\277\373uP?\014\212\225\276\213\203\004\277<\"\227? r\323?\245\215\237?\254\242\272?\207\304~?\256\333\324?UQ\211?\231nG?Q)\201?2H\330?\014\340\207?\'.\372?\031\357\252?\230\025\230?\346\276b?\255\2641?\226\377,>\366\301\202?,Re\276Ds5?`z\332\274\241P\211?Ug??\220\223\311?x_\316?\023\321\327?\317\330y?\3547\226\276(E\'\277\024\354X\277<\266\227\277\215\365\263\2773m\212\277\376.\251\277\276\033\004\300\336\244`\2776r_\277\340\255\252\274\226%t\276\r\207#\276\344,\300?\004\214\231?\"\346\233>\356\266\334\275\2669l\276\227\0221>5\316\210?e \344?\333\226&?T\237$\276\376\020y\277\300&\242\275S\016\023\277\327%q\277\010D\271\276\251[\230\276\253\374\t\277\270KS>;?-\277\252T\317\276\200\331\270\277\016\202\304\277\206\232N\277\335\230Q?\330\327\242?,\366\210?\336\016u?\305\023\030@\213\242\267?\341\244\376\276 \373\246<\034Q\000\277\010\000\320\2766a\352\275\034\305\000?\2041\273=\353$o\277S~\334\276\367\321\006\276E?\243\2762\345s>\351k\241>\240\254`?\201\022-?\000\235\027\273\374I\200\276\353\331P>\274\300\232>\025\302\035?zc\261>\253\336\200?9\374\323>\201[2?I\013\222?g\020\345?\324p\025?\030\223X\275\372\247=\277\333\2422?&\241^?lA\r\276\205\277>\276\257\177\246?\360\003\027?p\354\246\274\254\321&?\377\301A?\210\321\n\276\227C\023\277\3513\341\277:\261\250\277>\231\240\277\363\213f\277r\024\000?c\016H?\340\353\231?\243K-?3+\177\277\304 t\276NE#\277\034D1\277\204E<>\204k\017?@*\334\273*m\233\277>\335\225\277d(\014\300bD\037\300\036*\267\277\027d\032\300\374M\355\277\212\001\003\300\276\266\371\277I\272\376\2776\344\314\277\023z\221\277\360=\003\276\310p\202>\213?\273=\315\373\375>4V\221?fE\311>\224\224\301\276\364\316\010\277\330\255\r?\354u\235?\000(\336<\375\367r?\326\344|?\320\377J?\026\321\013?\314\272\307>\272\024^>\217p>\277p\344\260>\025\020\303\2760\211\377\276t\006R?B\327\366>`\014\006=a\252\242>q\221\364>\023\243\002\277/q\301\277@\220\263\277\031<`\277\215\\\020\277\002\361\020\277\240n\007?\340+S\275\210\030\337=L\222v>\275\330j>0\013V?X\277\257>r\te\277\271?\222\277\225\003\177\277@%\301\277\"\357\226\277\252\367>\277\246\215p\277\261\230\342\277\305\254#\300\313\336)\300\275\235D\300x}\035\300\310)\000\300\231\326\t\300I\214\335>@\033w>\256\370\370>\322%o?\032\375\343>\177Pf>Dyp=\'Q\035\277\233\225\326>\221h\232>j\342\255>\331\031\344>\002\217\246?\377\241\320?8\274\030@8\022\201?\352\r\215?MH\002\277|Z\n\277\002\r*?\003\206\220?1+U?w\216\362?\327P=?\316\310 \277\213/\372\276\303\210\375>\253&\004?\036!\357?\220*\306=\017\313\337>\014\335\321?>\264O@\016M)@\326\251\304?\356G\276?\023\034\202?\331\003\357>H\2550\277\240.3\275/\257P\276\272\030f>\235\243\005\277N\324^?\210id>FS\322\275\013\004\251?\356\357\320>\345\273\210\277\020\351\251\277\214B\312\277\332C\266\277\255\261\222\277\206\222&\277-\242\212\276b\001\241\276\315\006\271\277\244\031\257\277\206\311\316\277\340l%>\234@\002?c\354\317?H\013\357?D\263\227?\217\004\000@`!2@\342\361M@//\360?JA\033@\376k\313?\301\177\263?~\256\002?\202\232\003\277\332\025\346>\341\245\226\277\271\003\237\2771 \262\277\202\006\235\277\232\347M\277\322\253\251\277\200\247%<%\004\322\276$\277\316=\030\3322>\220\360\201?\233\010b?\261?8\277\314\221\\\276/+4\277\202>P\277\334Y\204\277@\223\276\277\225\t\202\277\262\233K\277e\016G\277j\023\014\277\323\215\'=\246[\334\277\340\241;\277/\372\337\277\245G\n\277\376\350\274\276\302\006H?\252\373j?\375\220\376>\336V\036\277\316{\276\277<\323j\277\342D\344\277\364\330\024\300+\273\001\300\372\271\266\277))\375\277E\020\255\277\326\205\305\277\227\2314\277\304\367@\277\335\221\322\277\003\271\004\300K\027\346\277^@\001\276l\002a? \025\336<!\\Y\2772x\246\277\250B#\276\026\234\344?\010V\027@\321=\333?\\JX@\232\244\373?\371\232\374?\037\014|?\350\356\216?\260b\216?@\256\016\276c \205\276LF\213>mD\"\277R|\307\277[<\266\277\275\177^\277\014\206^>\0300\341\276\317\002\211?@\216\217<\321\220\033?\364\037*\277H\004\030\277\365P\307\276\364\211B\276\357XV\277n\362i\277\375J\356\277\255\204\202\277\010\203v\2773\007\371\276\254\005\227\277\234LY\277\002\371\234\277^6\217\276H\244\200>B\216g?\270\274)\276\034[\212=\024\241B<b\014\270?\035\300\026?\356\023p?u\225(?\222\360\251\277z\260\365\277\300\034\026\277qB\373\276h[&\277\235?\"?W{\366??\216!?@>X=\014?\257\276n\307\204>\310\204\317>2\332\340>\326\302\355>\242\335\027?\340\274\037>\032\276\255>q\2760? r\023\276dB\327\276\261\306\312\276\000\032\026>H\230\r\300\"%\242\277\\A\270\277HCG>R}y?\0019K?\240t\204>\311\342Q>\032\372\306\276>dY\277h!J\277(\025\272\277\257B\022\277\325\252\234\277\202\\\210>\026n\034>\014\267\035?\306\300\023\276F\260\201>\2405D\274]\263*\277\374d\235\277\334@t>\344.\217? Q\234\276\314\237\300\276W\2648\277V\257\030\277\262\245\330\276\270\333C\277\244-&\276@\360\317>\004_m\277\247\224\252\276>\350\321\276g\223\211\276v\360\324\276\376\270\355>X#\243\275\367]\242\2753{$\277\200P\327\277\026\305\341\277\257L=\277\205TV\277C\035\031\277\307\227p\276$\'9\277\256\010\327\276\222\033]\277Q\324.\277\"\367\243\276\340\016\211\277\002\022J\277\346Y[\276lf*\277z8\214?\300\303\307?\311\273\306?VV\244>+C\215?\356\220R?b\327\227?\323`??\200w\307>{\262\020? \300Z?\230\203\307=WX\034?\376\226t?\230M\337=\326\354\346\276~\307\200\277jx\337\277\254\322\t\277\2406u\275Z\311C\277\221\373\037\277\244v\007?\3574\353>l\270\270>=\316#?\340\337\321?\202J\252?\257L\220?\030b<>MFT?`\332\260?\324\016\035?\300\2409\277d?\031?g\025\\?x\367\224\276j\200#>\322\207H\277\312\370\304\277\226\377%?\340\253P? \301\333\274\033\021\246?6\370\367>\244N\322\275O\314\026\300\353\231&\300\310P)\300\001\364\357\277\006J\324\277\242{<\277\232\r\204\277\303\303\270\277M\375\020\277\240\300i\277\350\366\036\2767\343\027\2761\255\362\276k3\235\277\004\000\031\277mk\260>oW\r\277\013\322\244>,\241\000\300h\207\267\277\210Nx\277\000\277c?:\253\244?\377\344\001@\213\031\212?\277dA\277,wB\277\340\360\027\277\236u\236\277\222\323\231>\'n@?\272\225\204?;\216\341?n*\205?0J\n?Y.\354>\334NL\277\356lx\276u\202\031?\372\203\333>\201\223\320>\342\372\244?2\035\203=c\232\021\277\367a\307\276\373\202\212\276\322\357\007\276\275\264s\277\323\223m\277s-J\277\022\262\227\2764\002M\277\004\020.\277\366\037\215?;;\236?\n(\177?\250\261\177>\200\240\361\276B\t\335\276ffX\276\212\270\241\276\236\2016?\345\363\203?\353\033]?\326\237}?\256g\014?c\2550\276\340\340\034<Qt}\276\241-Q?\216\271\300?\336\342\255?\264I\327?\320/Q>3dF\277\320f5\275.f\212\275\357\341\333>\022\026\003?\216\350\344>\360\020\006\277\"l\221\276\231\2761\300\001Q8\300A\217.\300\302\0164\300f\300\020\300_\376\303\277\017\265\000\300\036\0104\300w\210\333?$\267\336>L\304\207?4\220l\276\177\365\275?\232\024;?\234\214V?pL\302\275\261\t\205\277t\225\356\276\244\274\265\277\327\302\276\277\377\370\320\277\360o\211\276\342x\247\275\225\354T?\366w\000@\243\365U?\323\264\024?Sb\221?\003H\002?z\225F?:\200}?\360:\270?r\251\307>p\254\215\275\340J\236\2773\025\217\277\010\205\327\276\000\317<?0Z1=\270\032\315\276{\000\225\277V\357\370\277\022<g\277\332\352P\2778\264\266\275\265\246\323\276\226\341\010\300\370\223y\277?OF\277\240;\204\277@\254S\277M\211\323\277 E\302\275\004\263\216\276k\216\227?\\5\340>\303\322\254<\24444\276Cmg\277\356\245\216\276r\002\267\276\320\306\342\276\201\330;?\264\202\233?\244\366\210?@\275>\276a\227Q>y\363\375>t\232\363=\2244S?e\270\254?\262u\245?\217p\253?\216\025`?\313U\220?(=\250\275\315\331\034\277\366>\350\277K\270*\277e\254)?\367(\313>%\356\023?(\2255\277\250\356\341=0g]?\013\0245?\366\256\216?:\226c?\271\213\225\277\317\306\017\300\233K\026\300\326r\307\277p\026K>\362\206\017?\260\334\236\274\r\363r\277\022\312\234>\242d[?\310)\345=@0\231\277\314x\264\276\2500u\2776\026Y\277\250z\334\276\035 ~\277\262\334\270\277\242\034\304\277\266k\230\276^\257\001?b\311/?4\030\221\276\0327\272\276\034\341\337\276d!N\27726h\277v\353\223\276=6\245\277F\3664\277\374\201\217\277\312\314t\277\374v\224\277g\302\214\277|u5\27783\246\277,*\344\277\242\206\006\300\215\010\302\277\254%\217\277\212\263/?l\341\306>6\325\343=\356\023\177?\273\313\337?\250j\020@\340\2068@\016\010\010@ 1\020@\250\326\326?\332\371\000?R\261\301\276\266\373\222\277zs\003\300\277\207(\300\014\206\035\300r\223\004\300\206\275\343\2776m\204\277 \024\312\277V\365\373\277\345\303\376\277:0\367\277\271\300\250\277\242\235\362\277\276\262\317\277\305B\330\277\276%\325\277\037\035\334\277\327\263\306\277\316.\337\277$]:\300\270V\r\300&\023m\277\261\2312\277\340[\230\277\334\030+>\'\357\n\277\020U\322=\270\035n<<\275H\277\260Vk\275\031\276\031\2772\261\324\276\366\025\177>p\375\342\275\336*\265>[\335Y?\r\\\005@\363\217\327?\024\270\217?\207\037\221?\367\177o?N\225\261\276\267\014\007@c\261\203?z\355_?p\326\001>\310\031\253<\362\t\010\2757\034N>\023\316N\277\350x\335=4l+\277\2363\317>a>\241?\250K\304?|\251\226>p6\204>>*:\277\210\364\322\277\2761\007\300\216\225\032?\030\260\372\275\352\023\255\276j\323x>\316\2111?P\342\207?6\367\240>>\004\217\277G\333\257\277v\324\316\277\373\365\270\277;q\237\277\314\272\032\276\226\202\014@\340z\000@\020\254\241>\322\345`\276\233o\t?6!\277>\032A\200\277\336\242\240\277\351\275F\277\024\210\371\276\n\267\264\276\363\362\t?|%\351>\267T\316\276\354\231\030?\241kt?\350Vk?\254\315\211?b@\255?$I\271?\276$8?\005\025\247?\304s\361?\037\001.@\245\340\005@\036\356\375?\325\261\310?~\273\013?=J\271?V^\244?le\310\276\222\025h\277\372\002\216\277`5[\275?\\\245\275 \250\027?\234\004\243>\360\271\024>\344\305\357>?\374\277>\376\250|? \257\357\275Q\004\216\276\003\210\004\277\004j\301\277\003\375\210\277 \247\325\277;\363,\277\204\210j\277XzJ\276(\216\001\277\276\2015\277\370\2776\277Y\024\270\277\334\242\326\276\020\306\260\277$kV\277\215\371\307\277L\335\316\277\303SX\3001Zw\300I\350X\300\207\177=\300`A=\300\232o\t\300\236t\031\300_e\362\277pbr\276R`.\277@\235\205\275o\016\037\277C\025\210\276\270r\252\276e\353\275\277r\332l\277X@\372\276\020L\024\277\210\370R\276\261E\n?:\3509?\322\260\235>\370\231\265<\237\316\222\276&e\206\277\300\374\247\276(]Z\277\236\356\225\277@\273\r=\371\326\306\276\304\'\303=\237\353\241?4f\236\276\330\237\264\274\016\252o?W\274\001?n\223G\277\300q}=\366]\216\277\200\243x\277\374\032\265\276c\024\225>U\254k\277<]\202\276@\305\207\277\016\216\211\277\205\030\205\277\224\275\261\277\005\003\217\277Z\0061\300^ol\300F\224j\300\233C2\300\246\013\025\300F\373\034\300\204\252Q\300\350tV\300D^>\300\255m\252\277v\232\276\277\306\013\031\300\037\327\331\277\3275\010\300` *\277\364/\342\276\251\"\343\276\244u\321>\200\006x?.y<?\277Y\255>\315@\342\276\231\033\"?\345\031\316\276\357\t\322\276\250\340g\277\264\210\\\276\262\237J?G\351\022\277\032)\243\276lY\263\277P\316\343\275c\314\266>\246\344\334\276\200\342\014;\211R\266;\016?<?\374A\324=\367?\342\276 U\027=\246z\227=:S\231?\244\350Z>\263}3\277N\310\332\2765(\202\276$\265\204\276dYa=\253E\310\276\n.u\277vv\344\277\006_\222\277L\3364\276b\240v\276\2647\317>R\351\'?\307\330\201?\363e{?\215\200\366?\350\372\257>:\177\243=\355\300\202\277\213k\025\300\207\022\r\300>c\374\277\027\365\023\3005$\345\277Kj\272\277\177,\034\300\232\033\262\277\220\253\304\277^\324\345>x\361\240>`\322\"<\306\346\032>\322\222\020?\366\312\274\277\204-\233\277~.\007\300\035q\025\300\251$\351\277__U\277\202\375\004\300\366\243J\300\216\302l\300\323\315\221\300kik\300s\214q\300\242\275#\300\277w\027\300\202\200\235\277.\024\305\276\214_\230=\202w\267\276\032=p\2774k\207\277\005`\271\277\332\233\227\2778\'\326\275\313\010\317=8\235\361<\021\325>\277\270\342\027\277l\004\202\277y\365@\277;:\033\277\032G\216\277\3102]\2760\333\025?\324.~\276\364\312\"\277.\013H\277\016,\300\277\211a\234\277\206\222\272\277@\334\226\275\265BJ?\004\037\253\276\t\020\220?g\244\303?\0358\000@~\016\340?X\337\370?\3004\351?\260\245\255?\202\274\312?(Z\357?J\200\250?\310x->\231\023Q\276\251\266*\277<\211\371\2753,.\277\316\266\360\277\023\235\341\277\265\265\031\277\366T\235>\254\302\267>r\204}\276&2\314>\000z,=\374\323\336=\014\023\376\276\372\313\325\275\326\266<>2\267\331>\206|\260?\226c\r@\272Y_?Z1\256?\370O\303?\214^x?-\020\200?\036\263\360>\265o\354?\377T\334?\023\023\314?\242x\304?UA\252?\250|b>\273^K?@\226Q\274\236\254}?\324r=>\320\316j\276\316\364\215?\315\232\010?\010;\222\272x\026\342?\346\276\343?n\254\320?\357\2507?C\225\233?\374\235a?b\206\327?2\217*?\234g\211?\203\032\337?\245J\027?F\037\264>\034\312\370>]9\323>\302u\036>hgm\276^s\255\276\340n\275\274\250\370\312>\340VA?\tg ?\200\317\357\273o.\230\277>\212U?\213\332\037?\241\273\372>d\331\006\277f\031\240\277m<\322\277\217(\246\27739\024\277\234\375q\277\005\004\237?W4\241?\312\307\304>v\212\313\277\277\016Q\277\326[\350>(\316\225=xqw\274\234M=?\322>\307>\010=e?[j\004\277\370<\246?\034\016\214>bg:\277\3400\266\277\310]\203\277\340\220\265\277N\264\004\2770i\223<I;s\277\357\201\023\2776\221\302\277\362\232\261\277\236\204\330\2763\334\350\276\340\240\'\276\226\330\272\276\306\255{\276f\252o\276\304\251\315\277\227X\253\277)T\225\277^,\222>\214\266\234>\343\036,?P\036\027=\233\216\214\276\3719\004\277\351\273\010@\210\263\201?@\024|>\360kn\274E\025\000?\306\006f?\032\206;?\302\006\307\276/\205\227\276\264\027I\276}\223\212?\306\317\205?\326\271\030?\356\026\214>(\342\237?\017\002\215?\366\260\345>\037b\216?:V\020@\016%\326?\324\376\347?\246N(@\331g\010@\355N\332?;6\200=y\027\036\277\211\313*\277\320\331\253\277uF\331\277\212\203\362\276\314\031V?\273\363\231?0\222u>\242\017\201\277g\216\372\276\210\361\256?|4g>\261\377\313\276\210\031w=\016\354\004?l\347\334>,@\005\277\330\255>\277\212{\256\277\022[\240\277\324\021\226\2766n\201=\232\004\311\276\201\304&\277\353\035\t\277\235\263\027\300L\272\325\277G\374\030\300\221\260\272\277\210\303\210\277\351%\007?\300M5=\202k\021\277\2345\332\276\237Q_\277\335\315\260\276\376\375$\277\004!<\2766\336u?\215\335\243?\246?n?\373\324O?\352Y\361?\320$\357?\244\3064@;\2162@\276\267\330?s{9>\032\254\375>\034N\273\275\360\321o\277\272\315\257\277\n\036\212\277\224\322y>@\332\025\277J\026\177\277\337\337\243\277N}\371\277\346w\244\277?]\'\277N\034\351\277\020\202\370=\243\";?dBY?C\311\222>c\215n?\326h\027?\367x\366>\017\234\266?\214.\203?\240\210\304?:\331\253?\222I!?\232\312:?\237\313\256?\242\344\237?\022\322\321?Q\273\001@VN\007@\226L\034@\323\313\275?\230\3578@l\345\356?\335\333\275?N\220~?\246\"\035?\200\266\337=jQR?M\306\033?^\t\304?^u\202?y4h?\"\204\244>\245\225\303?\211\t\273?\177\035\004\300\254y\203\277\260\254\333\2776\255\026\277\340@\007?\207&\310\276\256f\313\276\322\2202>\224\324n?\340\350W=f+\264?TS\336?s\330\021@1\030\262?\010\343\017?W\234\236\277\\\237\207\276*e\310\277Y\310\016\300\372\207O\300;M?\300Vm\203\300 ]l\300\323\264V\3005\001\350?\254\265\336?\177g\003@U\321\323?.4\307?\017\322\212?\300\304\250>(\2674=\210\217\223\277`\216\204=v\243\340\276\210\014\333>\235\377\\?\344\215\226?8q\304?\276\037\300?~\315\202?\314\205C?\330^\300>(\307\311\276g;g\277\214P\004\277\307-U\277v\004#\277&#|\2776\212\265\277nn%\277r\263d\277VE-\277\\\"\024>\326\231\006?\004\243\202\276\210\364\322\274\317\032A?\250\264\022>\3102\010\277\033\302F?\030\224\362?y\224\007@\260\313\301?\260\276\002@\354,\006@X\025\207?\333\212x?\266\274\275?b\004\320?\032\2477@W)\027@[?~\275\301\375$?\336\017\216?l\031\223?m<\365>e\377\271?,\213\207?Vw8?/\202\255?\262\326\314>\3422\216>\003\354\246?s4\204?\325\r\230?\363\233\211?\230\310\331?\355.\002@\354+\321> E\351>\347tK?\222\343A\277\304\024\374\275\220\2717>Zv\217>\201\225c<P\3630\277\336\256\223\276K\347\225\277E\024\327\277\270y\257\2766\355`\277tGe\277\254s\207\277\362\206\356\277`t\'\277\204\205k\277\202\326S?\006\267\257?\000\303\026>\374\020\030\276\200\217\000<\371\361q\277n\007\202\277r/\200\2770L\227\276D7E\275 \302y\276$\001\005\275\005m]>\377^$\277\302\375\220\277\241\271\263\277HU\261\277~x\t\300\021\311?\277@\325\204\275\212^\351\277lj\226\277\304\274\222\277\262\r\\\277+\323d\277\244n2\276*\260\025?V8\370>\022NK?`\367\037?\215\311\220\276\217\370\232>0\337\252\277\313\274\206\2776\226\016\277F\005\315\276\2370/\276$(\354=\230 \217>v.\265\275\270l\256\277\021\337\301\277\357\005\034\277T3J\277\304\311\221?H\366\355?\364\021\003@E\350\207?\327\227\232?\330\341\037@,\321\224?\"\025\250?\334*M?0<\000?\024\263\235=z\227\211\277\361F=\277\026k\035\277\251\200\245\276\332^\347\277}/\001@\354Z9@`k\341\2750\020<\277\306\213\212\277*\342o\277GL\235\277\'\202n\277\305l\232\277\370\261}\277l\231\234\277\330\201\005\300\306\344\251\277{\020\273\277F\333\304\277T\336L?v\261\331>\013\001\372>\307\364\350>\037\347\361>R\260\177?\207xk?\250\226\030@\271\215\035@\312\034<?D?\235?&\250\347>?l\241>&\215\204?\242\217\326?\312\035\235?\364g\216?\016)\312\276#\250\177\277\355~\t\277\343\312p\2774\232R\277\211\341n\277\000E\221\276\2023\347>\333H\177>\213\325y?\316%\026?\322\223(\277v!/\276\374\377]\277\257\357&\277.\345;\277\033Y\255=\372\214^>\224\005\\\276f\264\217=e\202\334=\275\307\252?r\374\370?\332\023\201?\270I\026>\262\231\272>\370\245\037?4q\006\277\222J$>\230c\005\275\241F\201?\3120\201?~s\260?\357~\262?8B\312>\037&\032?\376\351\032?\370\2279?\360n\017>s\306\317>\261\372\245>\264\220\213\277\316\372\177\277\373\355\230\277\210\273\215\277\277\n\001\300\227\361k\277I\366\332\277\326\2249\277\022(\261\276\320d\037\275?\260\233\276,\353\312\275\033\275)?4\227\022\276\035\300\251\277\263\226\265\277\200\242\353\277\251S?\277\366\200\223>\365\304\340=\374\345\016\277S\313\244\277:\\\331\277\230z\345?\372\201\237?\375\r\323?@a{\276\234\013K=\274vG\276\272\305,\277F)\235\277\326I\231\276\376\004\270?\224J\372>\256\243\224>\354s\240\277\260\222\245>\026\266`?\315\313k?\027\207??8W7>0\360k?;]R?\325\205\354?\004\267\340>\226y\017?\206x\335?\301\203\261?a\010\232?\244L\251>+5\356\276\337#T\276\201\272b\277d\250y\276D\205V\276\351\323T\277\214\226!\2778\256\325\276\022j\247\276.IB\276\237\314C\277\345\351`\277\000\201\346\275~\226\t\276\362:\004?\220\376%\277b\235D\277\362\310\355\277\360\032\325>\005@\312\2770\243\332\277\0212\006\277>\254.\277\314\237\330>\000\000\035>=4\250\276\324I\334\276\304\277(>\360L\302>\014}\273\275\337\340\006\277h%\357\276b\242\267\277 }\313\277\302\223)\300j\013\246\277\027\330W\277\030\210l\276\"n\205\277\347\036R?\220\245\337>\221\222(?\210\301\341\275\340\027k?3\353\026?\351`\327?\024f\001@\21213@}t\236?!\314c?s\211\257?\364?\r?\235E\010?\032\022\254?P\000\234?\223\332|?\275\246\035?\311\2010?\210\257f?J\206\310?=Y\314?\276|\310?\312R\272?\326\204\236?\000\212\"?\206\240!@\244\346\215?\020\261\373?\201\234}?\334\304\027?\276\237V?\324\345|?\n\253y?\264\377H>\324\344\271\276\317\3207\277x\037\251\277\377\251\246\277\010\254\221\277\315$\303\277\024\203\023\277\317^\240\277j\352\311\277\314\215\020\300d\221\236\277&\3663\277\357\3553?_\311\202?\262\202\024?2\345\200?XC\272?\214Y*@d\327\257?\244%\231?\345\342\342?\342\267\273?|\363\035?|e\264?\312\321\337?\254\237\304>0\262\236\275\276\370\322\276\345\323\210\276\270\304??\252\271}?\254\214\033?B|e?@\332\217<\236\307o\276\225!\024\277\334\026b\277\2249_\276\211`\372\275v\323\352\276\210{\242\277@\231\016\276u\375\332=\022\374\242?\345\316V?\220>\332?\312\223\241?\300\226\223?pP\262?\261\301\003?\026NI>\365\t\033?Y\303\004@\213\031(@\255\2567@\010\233f?^G\243?\020\351\306?\347nD?\324\377\n>\232\254\316?.G\363>d\311\270\276\345/\207\277\320$`=\032\354\013?@\306\245<\275\337\344\275\362\264\275\276\001c\257?\210\270\373>-|\241?X\337/@\004i/@(k\310?\032\025\213?(\030\006@\341\303\335?\332\231\337?,\2124@}i\"@ZH\r@\343\001\337?\364\340\215?\312d\324\276\3117\033\277\000\211\366=H_\300\276VXq>\273\224\036\277@\353\002?\216\177j?\243\320]?\022\013:?\330\275\n@\300\346\322\275,\237B\277\210k\274\275\370\250\034\277\031\350\203>C\353]\277&\007y\277\262\233\346\277:\033\177\277\264(B\276\234F\350\276\236\276\023\276\361\225\342\276(\\\034\277\261c\262?\260\240\224?\302\351\314>\330\323H?\251,2?\256.\355>\307\260\225>\024\231\242?\350x\371>\020Z\376<^ \256=-*\017?C8\271>x\332}\277\031W\211\277\030=+\277\200\213\216<\001\037\362\275\226\006H\276\240Y\343>m\345\210\276\342[\234?\331\354/?\370\251\n>\270l\254>\344\351P?\224YR?%fg?\212\236\322?\216E\327?42A\277R\3474\276\202\343\036?\\\357B?;\350\326>\354\276[\276\261\0132\277\322\267\261\2768\311\025\277\302d\205\277+Y\252\277\300\327\201\277\332-=\277\000\234\247?\342\002\361>L\335\313\275\3162\226\2778\374\236\276\347\200\337?\226S\320>\303\030\213\276e\026\240\277\313ay\277](\t\300\252M\032\277\303\220\017\277\266\255\260\276\200$S\2735\270\276>/~r\277\343UH\277B#\023\277!\026]\277fY\246>\370\260\212\277_\t\022?\251+\207?\003\274P?|n\376>6\020W\276\226\003\353\276@\314\236?V\334\001@\367P\266?\023\375\033?\2355\202?@\256\332=\375\217\307\275\025\007\342=\004\240X\2764\">?\221g\270?\234r\002\277\200|I=\334$?\276\340\2261\274\314\273\">\200\213\331\276\2609\315=a\\\037?\033\242\305\276j9B\277\271]W\277\345\320\002\300\234eG\300\315\036\311\277/\353\337\277\346\035\025\2772\257\034>i\360\"\277\312I!?\372\263\035@$;\357>\240\017\213\274\272(\277\276\213GB?\271\231\237?\\J\270?\2404\313?\341\006\327?`\265\027@D\211\364?\005[\364?\366\364\352?\366f\250?\260\007\252\275\267).?\010\273\306?\330?\363>\216d\373\276-H\231\277\004\275\236\2773\256\007\300\347\316\320\277\221\374\243\277J{Y\277\204\267\240?\303<\247?Z\322\000@\022\375\025@\010@\032@0\360\250?(\201\242?\374\017\215?\031;\312?\275\266\'?T9J?Y\261$?\024Ug?\375\230\222?\362\351\367?\271\232\365?\342z\227?b\262\346?\2320\226?P\223\304>\003\234\242>\231\371\227\276D\013\027\277\234\366\224>\227\252+\277\030\262\345=\224!e\276\014\267\331\277\256\330\021\300\350K\026\277b\222s?h\314\023?\230\222K?\003D\220?b\3527?St@?\002\2237>\262\013\013?\313\367\250?\000\336^?\370\337\004>_\321\004\277\254[A>\265\004\253\277\000\225g=\311\314\225\277`\264&=\356\021j\275\210\244\274=\026N\345\276(,\211\277\265\032\001\300 \317\276\277Z)>\277\312\316\272\277=\221\204\277\277N\231\277R\204*\277l\303\t\277\274\331\202\277\346C\'\277\260\376\223\277\321\236T\277\340gt\277 z\313\277\000\024\004\275\214\235\313\275\226\036\013\276\270\2136>\354\225\216>\002\375\221\275H7\272>B\314\013\300\r|\312\277\222\203$\300\220P\026\300=\003\356\277fD\013\300h\345\317\277TX\355\277\314\017\262\277\002\027;\277I\036\361\277b\252\257\277\030\334`>q\272\253?__3?j\252\363\2761d\200>a\324:>\272 F>\345\347S\277\214\207\035\277J#~\277n\326\215\277\360Ur\275\220\n\224?6\264\003@\245\217:@\017\345-@\0063\364?\230n\023\276\024.\226>`\270\177\276\320\277\204\276\031\332\032\277:H\364\276\355\215:\277\017\003\022?\254o\345>0?\221\276\027\255\261\276q%\202?e\003n?\274\353J\276\221\361\275\275\336Y\014\277\223}\245\277Y\310\235\277pM\314\277\306\344\266\27685\026\277la\207=\244kZ\276Nr,\277RE\222\277o\205a\277h\250<\276\210?\352=f\250\267?\311\226\216?\340\301\020?\270\324?\275>]\365\275\366\334c\277\300\335\221\274\025\006w?\304\312\252?t\312\233>\301\014A>\364\321Q\275\220\010\306\277q\314\244\277\372\332\354\277\3236\005@\377D\021@\367\3211@\220\240\000@\200P\024<t\177o?B?\322?.7\234?\306R\233?\354\237\277>8-\026?\213:C\277<\270\366\276\210{\306\277\032\233\202\2772\024B\277\264\364\010\300A6\201\277\252i\317\277-$\003\277)I\222\276\202\\\307>@>\013=\305f\246>\301 2?\r1G?\022\036q?\"\207Y?\362]t?*6\014?\010\372\304\275\310i\022\277\323\240O\277l\302\236\277\342\237\266\277\253\310\241\277\377\006\230\277.9-\300e\233=\300x\034\376\277\215=\037\300\r\325#\300\001\351\t\300\375\244\327\277t\311\320\277\n#\345\277~\347\304\277<\214s\277\234\241D\276c\352\364\277\032D7\277\022\373\025\277D\326\227\276\035P4\277Ve\305\277\353/\243\277\235\"\263\277\321\206\006\277O\206\020\300\377\236@\300\341\361\357\277\243A<\277\000\000D\273\373\331\037\276\271\316\023?W\036\002?\310\357\r>\234\347\232?0`\361?\266c^?@\3634=l\010\207\276\372C\263?xq\325\276\342\357\332\275$\277\217\276f\334\226\276\213\354H\277\356\273\003\300\317\277#\300\3601\032\300\255aS\300\341\204\313\277\303\234\270\277p\213\307\2778\353E\277\210\n\237\276a\226\241\276\373\303\305\276\203v\331>\230\216J>`\356W\274\327.#?\264\306\257?pR\331?y@\334?\315\272\200?\226\326\347\276\001\nz\276\026\313\240>\320z\231\276\016\337\332\276\370na\277\300\027\230\274F\355:\277+uk\277@\306!<\371\203\277\277\031e\313\277Mb\254\277\335`\t\300\260\246\316\277Fs\230\277\371\t\033?;\263\201?\324~\242?3\022\\?\3578\013?\243\t\247?\017\017O?\\\312r\277\240\346\014\276\317)\240\276~\225T\277}y\020\277\'q\313\277\346p\322\276\254\212\234=\022\271\302?\022\347\024@F(^@\006\254U@\215\340!@\304\002\311?C\343I?V\330\240>dk\357\276\364(\004\276\"e\234\276\234\270\026?\306b\367>\n\260\207>\226b}?)\016r?\316s\251\2761(\310\276\267\035\275\277\204;\007\300<\t\n\300hx\266\277\216\316\354\277\227-\036\300\337\243\315\277 \341\351\277;\236\014\300R\024~\277\206\267C\277\334\nD\277\301\352\205\277\024\252j\277\307\333\210\277\376\322\031\277\314:\000\3002-\020\300\020\357\016\300\010\275\014\300I\037\002\300zOQ\277\256\251[?\024\321\243?@\232\020=\255\234\362>\314.\021?\177\025\204?\324\013\021\277\274\212\242=\034\003K\277\321\036\303\277\032\354\207\276\004mO\276\031\341%?\316\374\030?\231\232q>\002=\304\275X\376f\276\332\373x>*\241\237>,Q6\277\276\310\021?\322O\022>dl\320>P\226\332\274*7\275?S\r\242?ng<?\346\361\027>\273\201 \277H.{>(T\024?E\217a?r,\326?\025A??nz\273?\036\210\013@\207\322\344?\306\341i?\322\201\242?<NO?.\212-?\000\266;\277\322\203J\277\200:\231\275l0@?\211-\242?(\027F?\266C\332>a]\205?|\000\204>\000\353\304\272;\243\333?\256+\357?/\225\332?\036\336\214?`\206\207<\'\022K\277G\277\206\277\320\251\201\275\240\320\220?\222\227\274?\310\372\361?].\320?~\027u?z^e?T\211C>\306f~=\257\\>\275D\311$?\340\242 >\366\212g?\322G\314?\333\367%?2\261\013>\365\221\225\277\030\356\324\277d\243\271\277\272yb\277\204\231\234\276mD\342\277\r\n\000\300\010\375\007\300\2031\335\277\220\275\022\2771\336\220\277^i\243\277\326\032\260\277:\t6\277Ui\224\277\021\030#\277\014:I\277\206\301P\277D\206l>o\273\236?\326\033\372?\364\267 @\231\345\245\277F\013\241\277\013\252 \300\240\350\211\277\305h6\277ry\267\276\324\036\335\277\351\225!\300\340\357 \300\252\004\353\277\260\t}\276\025\3632\277\302{\223?\274\352\351?\034\220\213>Y\006\274?\222ae?\320\233r?x\266)\276\326rb\276\342\373\244\276\213k\311\276\337\264\336\276\304\320\374=\316\000)\276\347\260\217\275`\212`\277\337\210\000?\035\\\377>>Y0\276\250\006\230\274\022\037{=0\336\204?\005\266d?\246 \303?\032M\204?\010\277\247\276\226r\026?\234\010\020\277\340\326Z\277\025\344\003\277$\014\007>\003\033\351>\256\270i\276\203\222\001\276(\370\304\274\252\313\"\277\220i\277>\022\252\210>\252\263\237>\003u\007@\r\033\316?\014\312\230>\334nV\277\\\017\205>8<\014\276\001\273\027\277mP\244\277\302\n\201\277\304bX>\270\320g\277\310~\251\277\222\236`\277CL\200\277\376<\241\276 U\225\277@\266\220\2778\210\304\276\346\333\233\277I\nH?\216aW?Gd\256?j\001\312\277\036\313X\277\373\'\230\277\265\264\025\2776\243\306>\246\177\005\277\034:\220\276\002m\211\277\323\rf\277\260/]\276\257}\204\277\304h\222\276\026v#?\270Si\276c\231\014\277\360\301\245\276\032PD\2761k\204\277\211m\"\300uy\037\300\262\312\315\277jb\246\277\316;\313\277hq\304\277z\227/?\243b|? g\367=\274UH\277\374\373\253\2774A\232\277\357\003\215\277\232\355\317\277\316[\332\276\361\371\352\276\24455\277\3701G\277\016Y\321\277\230\036t\276\312=?\277\221\374\224\276&\351\023\277\005\232\002\277\030\317\257\276C\255\207\277\0057\345\276o\266\014\277b\352G\277 \037\215<`u\224?\210\224\261>\200\\\031\276a\262\252\276\201q\242?n\002:?\331\3602?\224\305\366>Z3}?lz\370>\024\006~?\354lx?*\324\023\277\022\312r\277t\253\334>\240\277M<\371\032\211\275[\364\212\276\246\205\201\276\2720i\277\\*\255\2772\232\312\276\323r\222\276|qb?<\355\213\277\344\203\212\277\0162F\277\274\022,\277\257\257\201\276E\310o>\200\217i\274\030\206\252<\330?\223?\362\376\212?\374\323\030?\337\364\344>P\302z>\377_3\277\342\021\334\277\274\"\345\277\342=\343\277\200\331\351<}5\244\276\026Bm\277\364\211H>\370y\362=\200\336\007?Ko\215?1\201\003\277;+\217?\016\343f?\211\364\334>\326\352t?\034\206P?\324h\242\276\331\014\226>\362d\211\275\"$\212>@\001G?\213T\200> }\313>\232\372T\277)h\037?\006\275\010>\037q\224?1\274!@pg0@\014\3650@\005\025\310?\241\222-?\342p\004\277hn\200>\210\224\005=\222\230\272\276k\240\345\277f;v\277$g\245\277\367\200}\277~j\352\276>\210u>K\007\336\277\236\350e\277\317\255\201\277\262$)\277\260\376;\276$\276t\277d\306\201\277X\257\343\277T/\377\277&\333\005\300|E\'\300\337\240\001\300&\244\r\300|\317\026\300!\227i\277J\251\352\276\025\344\206>\347\330\233?\352@\204?\320\360:>\026\251\262\276$\241\272\277P\305\207=\013\204\221>\377\232&\276\234\360\201\277\020\315\306\277\010\021\336\277\022\272\373\277\303\217\344\277\346\223,\300#\222\003\3006\375K\300\035\rB\300\022\355\014\300/-\003\300%#\342\277\264F\364\277\217\3765\300q1\005\300\364\230\204>\211\376e\276\226\227\275\276\330^5>M\237e?\225\010_?\210\250x?\341\237\343?,\322\263?q\r\225?6\261\243?Zf\005?\255\327&?\226\nr?\344\006,?\212\252\267?TV\365\276\260h,\275\260\030\033? \200\t\276S\004\223\277\211\021\260\277x7\r\276\206\226\022\276\000\205\025\277\326\373c\277\"\356\266\277\337s\014\277<G\251\277\207\330]\277\236\373\003\277 \253\032?\223\371\370?\233\216\014@^\366\006@\231\035\331?LY!@\300.\013@\332\302E@\016{E@\341\355-@6(\023@\262t\276?:\254\241?\037\366e?Q\374!?gw\357>\270\203\332?\333\355\014@[u\311?\242\330\021@Q\254\312?!n\250?\266\022\013?\227\222\216\276.\310\313>\002\332\255>\312\315 \276F\003j?\300|\312?\3106D@l\315\367?xg\031@\344\351\002@\240\316.@\216$*@\262X1?\000G\271\274\3310\370>\020\033\356<e\227\222?\342\0348?\243p\223=\240F\216?\323\335#?\356Y9?2\300\036?\207\275\321?>\027L?(+\223?\215e\233?~\377)?t\345\267>J\303\226=\273\242\002\277\366:#\277\000X\037\277kQ\201\276\256\341\201\276\322\370\231=q\334\026?\212\217\026>h\334\375\276\340\263)\274\336\303\276>8\272\263\275\240%U?T]\266?\226\210\362?\346\030\r@\264=\023@iK\t@\320\365\247=ZO\232?\020\224\326?\265#\201?[\352\177?\252f\177?\354B\010>\216^\304?Z\272\364?\016\303\346?\364\212\325>\354^\227\275\301X\242\277\264\350\237\277j|\375\277\201\221\013\300\206\214\037\300\3222\331\277\356\037I?(\260\212\2763\270\310\277\220\300&\300\250\215\264\277_\022\262\277z\376\371\277\343\237\007\300\220n\017\300c\320\014\300\016\266\213\277\315\251^\277\314\357\014>x\336,?\316\016\021>\327N>\277x\327b\277\240=\350\277J\315f\277p\0357\276M\200V?\216>\337>Z\030\203>`\317\377\273\214a\"\277@E\333<+\334\222?j\315\221>\275\270\230>\342\035\231\276\037\370s?$YT>V\256S>\016\267)\277^H8\277\221\n\177\277Fj\210\276\306\017\017\277\370t\205=\222\017o?\274\204\211?\002\233\246?\302\311\255>\334y\024\277\247\332\242>(\316\261\2754i\233>\016\266\211?E\013\007>\014\346\034\277??\252\2776\250\307\277\227\300\035\277\272\347\324\276\302\221\027\277\004W=?\226\277\264?t\204}?\370\031E?\271x-?TX/>ci\213?p\225%?\360\017\222?(\315\303? \004\327?\010\235\222?\000~\271?\340C\333?{\263\036@u\203\035@\344]\373?V\271\235?o`\302?\313\330\230?\223:\353\277\372\316\304\277\0066I\2770/\376\276\020\363\202=\016\246{?Hx\204?@\244\006?(\361\240?\230\270\202>.go\277(\017r\277\231\251\341\276(y\342\276\353\321;?\260\007\035\276\251\260\216>\253Pe?`Jd\275\206\261\320\277z\221\205\277\267\343\002>\316\267\027=\311[\225>G\362\244?B,\246?0[\017@\030:\031?\000\354\366\273\371|3?6-\304>\024\314\211\277.PE\277,\316\333\276I\027\341>\326\\\323>\333\204\233?\335\031u?\234\252\224?i.\n\277\213\003\352>\240fw\274c\314\201?,\202\233?\342?\360>\312\3266?\246U\232\277 s \300\030\335.\3005d\223\277^\313\275\277\340E5\277P\371}\277B\305\207\277\355z\225\277\252\000\221>\352\224\022?\350\301q\275\363\341s?\262\304{?\344\376\035>\330y\224>&`%?T\022\264?\005u\000@V \225?\255\3552?y\344\233?v)N?QH\342>H\202I=x\211\005\277DD\214>A\235\352\276>Q\207?\321\005\014@\262\3609?\350O\010\276s`\304\275a\276\222\276F\344\355\276P\356\257>\215\"\256\276R\307\243\276\212\350\263\277\364\352q\277\336K\377\277N\t:\300\201\3437\300b\203\302\277l\004<\277HA\363\277\220\353[\300\354\346*>\033IB?v\334\365>.7x\277\0263\214\276;\000\351\275\217:\256\277\240\266v=9\222\373\276^&\343\276P\256\355<+\341\244\277\360t\252\276px;?\336q?>\312M/\277\275;&\277\213\322\007?x\365\r\277o\364\014\277\242\030\242\276r\033B>p\331\266\276\321\317\016\277J\243\214\276\000+\222>H\343\230?\341\371\211?\272!A?\272\227\330?\314v7@\233\254\017@G\214\267?t\201\031?\346\303\311?5\373\021?|y\351=f\037\224\276]F\230>0+\242\275\026\225\031\275p;=?D\265\303>D\360V>\')\276\276\217\025\346\277\305i\312\277\366#g\277\264\362I?m\370\265>),\240\277HQ3>}f\213\2763\221\201\2778\274\036>\323`S?Hos?P\256=?\204\324/?\334N\006>\004\267$?\346C\217?,c-?\022\212\316>,]\245\276\230?J=\272\226^>\361\337\003?dwW?\365\252\255?DU\205?\335\274\200?GE\020\277\306\371\020?$\254\202>\363e\250>\220\206J?\374\260\246?\310\014\232\276(\350<?~\362\213>x\277\"?d<\324\276W\361\205\276\024\216n\276\347\276\217?T\311\024\276\347\350\025?>b\033\276\016mS\277T\013\203\276\206\354\312\275\356\236\037?^\330g>[&\014?\242M\001\277\3370\261?w\204\010@\201\t\202?\373!\214?\356\367\305?aD\273?&k\301?\364d??\200\016\013?\343\235\n@\0338\020@\260\334\007@\236\346\024@\216\201\321?\326\021\364>{\352\241>\'J\334\276\234\024r\277\343S\234\277\370\2542\277^w\337\276\357\371\260\277\016Ex\277\230\262\226\277Bt\247\277q\376!\300\336&\003\300\031\306\331\277)\034$\277Y\303\026?P\213\303?>c\017@\3266\016@]\270\325?\027\024\002?uS\001\300\210\350Y\300b{\336\277\215\215O\277p\251\373\276SG\016?\375\220\010@CD\374?\307}\037@\344$\265?\320JZ\277@\274x\274;\331\n=\326\351\211>\231\234\021\277\237\226\254\2774\331\356\277\002\363\033\300\346\001\343\277\021\205\203\277\004\325$?\206\331\317>\216\001\244?J\305\003@\337B\'@-\017\'@*8G@\357b\266?\'-9?\036hu>\226\324->\302\317E?x\002\312>w\036\261>\355\000\024>\307\032\177>\350\225M?\341\262\300\276{\356\033\277^\220y\277\231\251U\277\240\362E=\036\245.?3\352\310>2\003\303\2762C\010?\022\261\222?\032\345=?l\300}?8.\256?\2543\016?.\246i?\2323\314?\000\003=\274]I\005\277rH\'\277\246\370$\300&\362.\300$\321\272\277XZ?\277.\216\232?`\204J>\337q\212?Ci\232?\010W\247=9U\302\277\366\234\256\277\206\210+\300C\264\362\277\324\327\212\277\236I[\277\231\365\007\277L\2243?\356\2240>\243\321\322\276^t\217?H\212\312?WZ1@\207\205\307?\023\030\316?\320\222\354?\235q\361?\300y\324?T\234\317?\236\335\235?\014s\232\276\244\261 >\322*\374?\215\223\265?\210\367\273?$\314\367?z\272.@\023\223H@\377\035\212?\036~\240\276@\200]\277.\005\310\277\370d\253\277\200\331\243=!v\261\277\250\006+\277\271\307\034\300\260\373\307\2768\031\315\2775lX\277\300\352e<\364\372\032?\353Z\314>8\2566?\023}\246\277K\253:\277\255\337\223\276\332eP\277t\270\304\277\224\204\273\277n!\030\277JT\305?\345\232\206?(\3311?*\035 @d\261%@\364O6?R&\214\277\344D\306>\264\314\024\277\361\277\\\277\316C(\277<\353\321\275\034\236\213?vQp?DDJ>R\334^?\220S%\275\037\021\264\2775\222\263\277Zn\235\277\350\301\217\277\034\032\351\276\002!\020\277\210\255\224\277\337\037\233\277\362\357\222\276\307hT>\036_#\276@\020\204>\343K\240?J$\335>\342\307.>\235\322%\277\223\"\377\276LRX\277\262\336\240\277\256\236\215\276\016\352\347>\r!\225?\212=\016@\231\260U?\347B\376?\300\270\327?RE|?0E\024?\241\232@?\363\3300?i\226k?\332\254u?\\\370\007@\366t\376?\300\r\325?\211*\245?\022(\303?5c\225?iag?H\t\201?8\034\026@\226\002\001@@\031\320>\220rJ?<=\237?`UQ?\003(\270?!\302\201?C\346\003\300\220\256D\300\2075\n\300\003\2733\300@\312\356\277\204\272\030\300\213^\340\277v\030\017\300\2002\215\276\230\025\310\276\"o`?2\207\300>\246$\030@\370\360\016@\275$\031@RL\351?9X2@\204P\215@Cw]@z\rZ@\254\361)@2\205\346?\303\033w?=r\203?\346\242_?\317\344\007?\342o\221\276\363\243\247\276\222z\307\277\344\265:\300\260\255\344\277k\r\304\277\230n#\300\200\224\254\277<\256\263\277\314>M\277\256\370q\277\232\207\215\277\335t\207\277\335\251\301\2762\010\001\277\010\026\214\277\301&\204\277\253\265\214\277\003A\013\300ri\357\277z\342\326\277\326\246\235\277{:\031=\t\205~\277-\372\022\300\217\026\002\300\200_\334\277T\306\007\277\203q4\277\006c\215\276\300q&?\0212\003?}t\227\276 \027\357\276x\376#\277+\035=\277\327\264\013?\244d\274?KZ\313?\342\247f?+\367\214?\030\203\246\276\026\341\232\276:=\023>\0206\250>}\321\342>C\212\204?P\233 \276\332\023\t\276\265\301\367\276\t\035\206\277\220\366\217\277\010\025\017\277\203(\213\277-\334,\277\2633\003\300\353Js\277#\337V\277@\303\374>\352+\n\276>\312\247=\241\207\010\277\020\231\352\274\014t\224>u\320\226\276\224h\003\276\276\221N\276\303\2423\276QwM\277\021\210\210\277+C\363\277\340~\365\276\276\367\251\276\372X\266\277;\303\370\277\254\350%\300\236\235\003\300\220\350y\277|\240r\276G\034h?O\330`?:\000\326\276\212\230\323\277P\\\264\277lVZ\277\314\033\334\277\024T\037\300\324A\t\300\006\362_\300\337\375A\300\366eV\300t\257K\300\263@\274\277\211i\235\277I:\005?\021\275\254?\2406\377>(\254;>\216k\344\276P\237\331>\260w~?&\357f?\205\255u?@\257\223\275\333Y\232\277\257\335#\300\235\341B\300u\034(\300\002$\341\277.\312\352\277\006\366\361\277\360\317\022\300\316v\233\277>p\037\277\210!\202\277h\276A\276\310\365\006?\310(x?w\262\036\277 \023\324=s\272\252\275\233\371s?\260o\364\275\201\207\261\276\350\353\236\276\031\271\216\276{\3717>\3004\275;\2136_\2764>\350>\355\312\200?*)\224>\266\000\325?`.s\276\210$\023\277L8\361\276\\\330:\277\377v\013\277\343\225\203?\376\356-?\266\226\363>\006AR?\353\376\003?+ \310?*\372\260?\350\323\303\276\362\345\003\277\016\032\311\277\240\017\311\275`,0?\032\020\312?\340\007w=\272\223\274>\314\342n\277\201\212\323\277y\332\236\277\032\353\337\276\316mt\276\252_\373>|\230p>5\026C?\373wk?0\366\376>\016\237\353?\356_\264?#\271\232?\0212/?\234\020\036\276\014\214?\276r\305\315>\241\245\205\276\252\335p\276Kye?,\351>\277l\262w\277\304\275Q>F\250\037=\200@k?1\327\356?@\276\010=\r>\353\276\270+p>J\010\017?*\324*\277l\035\217\275\364\241\260\276w\005\257\276\204\\\353\276\271\000\034\277\222\363\341\276Y\231\216\277\304\326\005\3008\236\253\277h\207\336\275\200J\034\277\3664\001\276,#\034?b\350P?\320\311?>\254L\216=\030\361\317\275\246\026(?\201\317\236?\342\363\364>\205\005\252?2x\017@\316\244\007@\246$\304?\326\333\306>0S\307>j\362\212>\264\213\341>\266|9\276\314\313\212?\232\375C\276]<\005\277\374\234\252\276o\333\230>K\235\177\277\376\364\237\277\2116\311\277:5\037\277\030v\020?\326\305\017@\207\253\"@\261\374\361?\361\200\021@\205Q\365?b=\224?t\2558\276\312\227\342>/\327\235?\002\342\327?+\245\364?;\332@?K\\+?\210fP>0\017\232\277K\331\320>\306\333!\276\365\003\030\277\203=\344\277g5\333\277\000\24069\323\321\205\277:\337\222>\204@\356=0P\n?\304\t\227\276$\242\'\277\274\311\341\275\000\351D<D\352\226=D\000\363=\262\026\243?\314;\251\276\244\345\032?\027\202\302?d\320\203?\026,\000?\330\341\262>\342O7\277\353?\203>\224HL\277mZ?\277\034\'F\276\r\257\023?@K\361;\2023D\276 \022(\277\264\324^\277\002$n\276T\367A\275nG\227\276?\331u>\203\231\207>\002\034x>\260\007i\277\262&\304\277z\231\030\277A\367\303\277\346\214\226\277\030\226\021\277\034\304#\276\246V\375\275\315\271!?nQ8\277\243\3258\277Q\310h\277\273\354\025\277\350\314@\277\346\001a\277B\020\263\277B8\351\276\252\013\356\277\354T\365\277\224B\274\276\210\235\225\277\330\251\311\276\300\234R?\225V\273?\330\220\220?\262Q\222?pS\370?\225\224\307?x\371\305?;\255\250?(\201\235?H\374\244>+S\347\276b\357\006=\010\353\355\274\202 \274>`\256(\274E\261\301?L/\346?f`\326?\206j\315?\013\034\302?\210\000\010\277P\327|\2768G\023\277\346\0017\277\340\320\026\277t9\270\276\270\261\n\277\326\014q\277\010\\\251\276\362\352:\277@\210\211=\264\334\017\277\014\253\231\276\356\345\305\275\037h\342\277\021\373\224?\252\247\243?\310A\310\276\252T\370\276:\332\340\276\355\201e\277\304\345\202>\254\330\230=n\200a>^\255\301\275\340v}\276\200|\312\275\215\271\007\2774\244\333\277\261\303\325\277\216\314\255\276#% \277.\347\310>\330j\267>z\021\366\276w\332\006?\206h\204?\000\226\342?\314\272\273?\334\350\016\300+\314\326\277a\037\006\3000\263\267\277\240J\001\276`O\324;\227k\237?\032w\353\276j\017\242\2774*f\277\323\265\214\277\367m\371\276q\372\013?\365)\'?\313kd?$\276\356?rq\320?l\364\007?\247\337f?\270[\250?&\273\371?\206\246\200?\030\377\213\277`H\013\275\262\024\306\277\362\027\021\3004\031/\300\301\263.\300\206ly\300\207\215I\300\003\263\032\300~E\032\300@bd\275bJ\205\277\372$\355\276\353w\255>G\266\034?\t\333\231>wN\222>\272\206\231\276\r\227~\277J\240\263\277\276\347\236\277$\277T\276\364j\002?\352\345\241?\000\233\213?\010\236\260?\021]D?\247\026\224>\362\247%?\300\236\023\275\222\322r>\270\314\365>\nn\025\277Vg\177\277\222\251n\277@\371[\274|Y\001?\364\221\246?\203\233\216?d\244\t?T7\237?\203\360;?\000\244\334<M\230w\277s\327\245\277\343\307g\277\316\322\325\277\360\034\241\276\307z\274>:0\305=U\010\335>\232\333\004?h\237\213\275b8\371>`q\034?\007\240\207?\264@T\276\352\206(\275\370I\350\275\316N\032\277Y<\216>r\341\313>FCl?z3\213?pO4?L\204`\276-n\335\277x\204\234\277j\373\254>-\342\342\276\300\240)=\210\371T=l\212\334\274\025E\277? dG\277\351%\236\277\3205\252\277\360\257\305\275>\342U?\007\364\212?cg\303?X4@@\246s\036@2\367\364?(\306k>s\325N>\'\032:\277\3061\334\276\203\361.?\004\255\252?\372Q\002@\344w\255>4y\200\277\004\0322>\010y\210=\304\376,\277\000\367?<f\244*\277\321\277\014?qB\255?u\335O?\270yr?o\233\200?1\230<?`\323\312<\207\212\035?\332\357\004?e\317\200?\356\277\230?\311\205}?\350\373!>}[\037\277>\025\n?h\004\265?\270\240\326\276\320-m=D7F\277\200\260\201\277\272c\205\277\332\252\313\277b/\362\277\312M\312\277\203\036 \300\3254\222\277\377\210\212\277\027_E\277G\375\351\277~\377\031\300\370\342\224\277\235\334\253\277aT\352\277\2163\247\277f\006\261\277\367\254\201\277F\013\225>\014\256G=\275\314\311\2766\232$\277\246!\314>\275\"\255?\350\224=?\254)\005\276\024\022\257\275\"\230\267\277\310\001\236\277m\222K\277\360R\326\276(\234\277\276\023x\221\276\317\001Y\276\206\345\017>\212 \333\276k[f\276\020\200\224\277\000\004\214<\265\260\254\277\013\177[\277\202z\307\277\252[\277\277P\243$\277\000h\"\274\267\'\254>\230N\324>\367F\236>\352H\353>\374N\353>\216\2747?<\'\252?\233x\316?q\311\304?\255\256\033\3003A\360\277\347\374\306\277N\272\010\277\271\265r\277\2320\350\2778\023\255\277#e\233\277\021\271\360\277\022\274\r\300t/%\300\375e\032\300d}+\300\276T\352\277 \366\255\277\320\254y\277\354\220@\277hD\225\277:\312\350\277Q\236\320\277\337r\266\277\010\320\352\276(\256G\277\327\337>\300\366\272\254\274\225\260\301\275^\363\351\276(\372\227?\252L\243?\364\034\256>\212[g\276\250x)\277\376\2647?\340oR?\351\230\037?Q\216\230\276\300~\362=.;\020\277dN>\276\336!x\277f\223?\277\330\301\223\277\004x\254\2778\027\224\277\215\333\217\2770\023y\275\344\026\307\276\343K\224>\365\360D?\306\247\276?)1\255?\245~\002?\277\tn\277S\216\n\277\000\031\342\274\220.\347:\\\034\332>@\021\212<\334)t\276\002\300\311\276\261\032Q\277\261h\366\276,\230\277>\203\005Z?\342p\236?\343\366m?gJE?\252\016e?+\215\231?\031Z\036? \346O?\224\021j>\200\260\246?\343\365C@\363g\002@v\205\032?\254\2746>y\275\243\276\356\203\004\277\020\037\225\275D\247\336<S\363\346>\3334q>`a\003\275\213\302\272>p\305&\277\'\026o\277~\255\r\277\270\346\277=\264E\377>\360\314\216?L\335\216?X \371> \272\367\274d\0322\277\227\3657\277\247\314Z?D\362\r@\014\367\243?\000\013i\276*\353R\277D\327\006\276\217\300\334>\316\027\260\276\374\240\327\276\365\341a?\006\016\222?\226X\246?j\267\207?s\223\016@h\271\271?\324\251\205?H\004\302?p\237r?\335\314\235?-\276\225?\236\301\207?\001R4?\351\346r?\364\321e\2764\3660=\177\356\361\277*\3629\300\363\202\207\277\026\300\325\277\370\365|\276\350\257\354\274\360\204\206=\274\365\235=\336?y>LM\236>*\032G\277\265X\211\277\"X\241\277\377\222\210\277\246\262\361\276\215d\r?\212\247;\277n\362\303\276\370W\350\276[\216\221\277\023\335\024\300\320\014\332\277\260\325\273\277:\177\243?\240\\Y?\225!-?\024\352\214\276\342\354\245\276\270\263\323\274\270`\207\276\342\275\312\276\313\341A?\370\3027>^\211\202>\315\226\371=\315\221\324>\352\367\322\276\246\354\274\276\016\221\221\277\244CS\277tO\254>\036\025\263\276\252\263v\276\"\234\204?<\2748@)\310F@\027\004\024@\255^o?\2170d?\360\274\341?\005\314\224?\365qy?\233sK?\030\024>?\300\300?\274w\300$\2776!7\276\235.\032\277m\257\246>\037\306\211>\271<*?\016T\307>\\\205S\276H\221>\276\244\025\177>bM\200>\347\310O?@yy?R*\361?\016\037\337?\362\305\352?\240\325\215>s0a?\236\257\177?\241F\023@i\324\367?)\357\272?X\025L>\311c;>\326\203N\277\237b\024?\324\031Q?\355\317 ?\337\233\036?\245\237]?\360\317\205\276\000\210\002\271\277,\335>\252V}\276\202\306x\277\000r\344\277H^\'\300\230\371(\277 \264D\275pI#\273\320P\307\276\340F\325\274EA\213\276Dh\377>\352\002\200?\003f\016?\177\342\275\276\376!\033\277\350\204\226\277\322\254\200\277\240\232\007\275\2402\254>\n\201\331\276X^Q=\305\342\353>\024\273\035?\005\235\277\276\214\325s\275\326\t3>(\2453\277\357&/?\350P\220?\000\310-\2728\361\317\277\347\267\245\277\306\262\372\277\323\014\003\300\200\252\332\274\232\324R?t\370\206?\337:I?\260\277\330\275\253t\206>\032\240\337>ho\341\275w}\342\276[\255\227\276i\356v\277c\307a\277H\216\253=.\226\244\276q(\247\277\224\271\312\276\321\037\277?\206.\t@\346\221\017@\374\371!@~\363u?\320\230\366>\tS\222?A\217\336>\006\200\310?p\t\025>Y\305%?\200~\\?\210\350u?\002\364\224\276\317x\257\2772\014\266\2772\316\357\277\272\341\010\300\302\263\016\300\3266\235\277\265N\255\277\\D\030\277\1775?\277\3438\300\277\327A(\277\334s$>\206\214<\2773\275\310\276\036\335U\277P\013N?\222\022\361>\220\ty\277Q\334p\277\336d\233\277~=\247\277\213S\227\277\363H\315\277\240\335-\300\242<2\277\022O.\277\\\347\372\277>9\222\277c\005\017\300\030T\'\300\354\276\"\277\200\214M\275\262\004\274>\244Nh\276{\0215?\254\274\211>_\'7?\030`\306=\004[\331?\0307\001?\026\2639?\010\033\202\275I\276G>tY\236>\231y\223\277\214\210\n\277^\017U\277\272\257\007\300\024\302\325\277\373\222z\277\245\334\227\277&Hy\277\006\366\207\277|a^\276Ty\225?u\034\r?\324\037\264>\320]\030?F\3352\276Q\374\235\277 \302i=L&\001\277\351.\340\277\326\303\232>1\303W\277\216E\023\277\006\013.\277\256\361\365\276@<{=\356\0242\277H@\304\276\226D\344\276\215\022\354\276@\003(\277\350\320x\276\376\334/\276\257\250\232\277N\213\007\300/s\260\277\021T?\277\340\377\337\274\377%\240\277\264V\270\277x\247\371\277^\226\010\300\203\334\303\277\303,\351\277\217\000\261>R\212\341>\326\013@?\"\246\317?\364\2172@\377\272\024@\332/n@&\301\037@\202\213\345?\344\340\326>\t\265\336?\307\314\r@\311\227\377?R\356\336?X\243\310?Wj7?\254\275\026\276\273lY>Q/\220?S\301W? \250\310?\216\334!@\2706*@kG\010@\253\315\373\277r\014\026\300e\014\001\300\362\231\001\300\333\007\005\300Z\233\352\277\024\n\256\276\030{\026=\026\342\023>\216\367\260\275\226\203\020\277\371\256\005\277\274h\237\277\354\201*\277\305pl\277\n\211|\277\323\272\356\276\210T\211>`.\327>\201(\025?\277_\351>\000nD?\233\310\255?\232H\020?&\312\214>pWP\277\200u\223<\'\331\033\277\006\207\270\277\326\244\253\277\270\345\025\276:\263o\276\274;\004\277t\374\367\275\220`*?\270\236\360\275HD\224=\276{\274\276#*\307\276\210\312c?\224\312\203?\316\256\300?\037\352\341?\020\236\272\275\235i:\277\201\344\002\277\017W\277>\313\231\007?l\365\213>h{\231?\322u\371?\306\226\335?\032\022\320>\334\271\205=\315 >?\210\265\341>\002s\244\276\021\350<\276\370\277\232\277\274{O\277\366\017\003\277\217rz\276>Uy>\247-\n>eE/?\342\030H>\332a\240?\036V7?\241\254w\277m\221V\277\312)\342\276\304\327c\277\345C\246?\254\026\373?\267\217\314? \214\257?]7\201?\210\177\223?,\207\341\276\312\343\022?\030OG\276\340\003\345\277$\036\245\277Q\246\250\277\366\275\200\277\253~z\277\273\302<\277\255L\212\277:?\212\277\r\302\001\277p\250/\277I:\001\277\200*L>\002\325\022\277\224\021\235\277H/\373\277\250\036\355>T&\350\276\305HZ\277\334\002\006\2774\361\251\277\213\224L\277\222\367\322\277\356O\\\277\033~*\277\216\'\233\277J-i\277[Hv\277\245\234\217\277J\300\211\277\252\035\236\277\330\347\232\277\334\361\364\277\334\252\372\277\257 \373\277\256\343,\300\312\014g\277m\362\344\277\233o\003\300\372\263\001\300\222\204\036>\240j\273\273<\216~\277x;\275\277\352\023\330\277f}r\277\350\307\320\276j\202-\277\244M\206\277\251\003\003\277\231{G\277C\361\230\277\005\222!\300:\242\317\277\370T&>\004\010\227\276&\203\310\277Cm\023\277oW\317\277P\346\316\276o\'\210>`\356\224?G\007\220?>\337\204>x$\262?A\237\226?\200\273i=\310\317|?\350@a>\330T\206>$!E>\300\225M\275FJ\342>y\301`?8Z\024\276\266\262+?\000\354\243=\304\243t\276\352\313\237\276\036\267.?D\022\003@f\220\010@\372\035\253?]H\\?\375\323,?7\247\360>H)\022\276\366\333\364>$\277\256\277.\250Q\277\026f*\276\000\307\260>@\210e\276;v\030?[\235\367?P\353\206?\340\357\274=\343\253\237\277\230\355\341\277;\213\032\277`\265\360\274\353\370\">xB~\275|\356\315\276\2301A\276%\215\023\276\214+\353>6\016\244>\360`\312\276i\233\321\276\222\321\213\277\370n\301\277a\026I>\016\347\275\275\250O\177>*\264\005\276F\361\266\276\354\272\375=a\303\013\277\030\245\021\275-^F\276\312\237I?\240L\337>\221\001\205\276\003\007\013?4\017/?\317\255\024?\250S\212=\367\363\t?47\350\275\036,a?\013\013Z?\266\242\027@P4\301?\317U\324??\251\030?\342\201\005\276x\337e>\016T\017?\276N\305>\317d.\2771\367\003\277T\326\022\277\"|\254?\220\370\271?\336\234\361?\026k\312?c\262\316?gO8@\211\t1@\210\001\021@4 \332?\222\245\267?\240\311\005@\213Sp?\317\3073?\202G)?Ap\302>f\255S?d\010\034\276\004]7?\242\013{?$p\355?\341Dr?\334[\215?\302-}?\323\262\257>\274{\014\277\254!\224>f\243\367\276$\262\343\275Y\244g\277\264\364\252\277.\207*\277=|\252\276\360\313o?\3276\226??\300\246?\315\300\030@p\243\337?\363\233\021@\006\352\002@\300#\022@\361\300\234?U\241{\277e\217\177\277N!\332>\013\315\210?D\021z?$r>\276h\273\322=\3716\277\277Vt\377\276\032\320\341\277\367\206\257\277\335\371n\277;_\017\277|*K\277\005\227\037\277\035\335\225\277\230\355\234\276 \177F\277\243,\003\277\255\306\320>\206\260\022\2777\240\027?hT\306\276c<9\277\223\242Y?\214\317@>{\325*\276\304b\234?!\211\276?x\353\257?\326\312\"?V\330\207>)%J?SU\326?\3416\025?\234\271\351>*\t\010\276.\340\027?b\357\204>~\013f?\0202\343\276\022\255\211\277$\353\033\277\347r\353\276\3009\204\277\220\365{\2772n\n\300~\260\346\277\220\245s?\244\275\004?N\244j?\205\304\203?\360\314\354\275\242\356<?0r\211\276>\311\235=\216\030\206\276Z\243\233\276\304\274Y\277\304q\212\277\370\316\373=\177\312\217>\313\243p?\304^\235?\032U\"?4F\224>\232V\t?\212\335T\276b\313\002\277\2061B\276\240\373m>\266\246=?\230\241!\277s\341\212\277\377\306\336\277\322\271i\277\026\2761\277\346\243\374\277b\343\205\277\016\252\204\276\334\t\204=\007\331\204\275\222\314\333\275\325)\213\277\034\r3\277\374O\017\277\250\253\270\277\030\232\027\277H)\274\277V:e\277B*\366\276g?\270>*\370\316=\214\365o?GC9?\310\002%\276\345\2208@\372\376\364?\346\305\r@~t\020@t\200\006@\034\312\272?\364&\327?q-\265?\206\322\231>yh\202?\322\202<?\200\213\270\273Cs\277>\022+\004?\252v\230>\321jk?#\334y?SRr?r\357d?\322\026\233?XT\000?`>:\274\231\340\'>`\020\337\273\277>G>\347\205\310>\324Sq?=\233\020\277>\252\026\277\242u\232\276\260\366@\275\274\"\275=\016\362\031\275\316\243 ?\022\357\277\276\252\322\323\275\370\276\363\276M\365\322\277\250\355\004\276\206\224t\276\362\374\356=\234\270\031\277*\345y\277f\035\234\276\363\260\002\277\306\230\022\277\016\017C\276/\276^?\024\254\261?B`\333?6\330\033@\255\373\021@\264\257\271?\034\026S?8p\213\275\235\253\251>\376\215\321\277\r\233\331\277\032\321j\277\3148\356\277\323\034\t\277<\373\245>DQ\014\276\312\3714\277\216\"\256\277:\250\232\277n\335\302\276\010\205\017\277\261\022O\277Dl\227\276z\322\\\276\032\367\001\276\227\240q\277\255\021\003\300X\032\350\277Y;\233\277\031\023{\277Y\227w\277-K\035\277\355v\203\277\276\303=\277\253\2205\277x\333\222=\277\265d?_kG?\235`\244>\351\336\221>\210\364\345>Q\272\201?\357\034\232?\n{\304>\320\031\247>+\271\201\277\346\203\221\277\375\271[\277\254\024\263\277NS\">\030p\343>mn\216?\230\365g?\002B\363?v\010\023@\313a+@\260\215\003@\324(\261?,&\227?\313&\232?=J\256?<\213\014@\\\025\202?F`\276?\003\213\305?\215\021\200?\034c\240?k\246\323?\271\263\254?\300\"\177\275\375@\263\275$\244\244?&\013\342>U\320\025@`7\002@\306|\035@\305\276\016@\276\t\215?0\215#?X\350\370>XC\016@\271\347\363?\304\360\014@t\263\036@\372l\024?\215\320@?N\031l?\330\027\273\275\353&-\277(\312\201\277\220\221\200\277H\273Z\277\264\301\346>\315\237\312\276t\035\315=:;T>\361\237Z\277\317\326t?!\354\r@\300\224\232=\317!\305\276\377\246\240\277\344\t\302\277\332R\017\300}/\311\2770\246[>\237/\220>\340\225\236\275\240\246\242>\026\301p\277\035>;\277\204U;\277\346\352#\277\020\035\340\275R_\320\2772<\275\277P{\007>\030\313\264\276\302\327\315\277\332\266\006\300|\275s\277\375\316\333>\360\315l\277\355o\007\300#E~\277p\321\025\300`\320k\276#\"@\2773\243Q\277\256\035\367\276m\207\216?X\370\n\276\222\266\006\300\353\312\243\277\262\t\357\277m\200\230\277B\005\333\276\300\266\304>~\244\313\276hpW?\352k#?\201E\303>\226\204\023?^\016\001?\355\n\326\277r\271\006\277\374\tC\277Dc\300>F\242\214=t\200\373\276p\352\213>\222;f\276\370\306\341=gR2\277\324\356R\277\370\345\335\277\356\372\323\277\257\375C\277\0105}\277\006Y\333>\361$\242\276\2354.\277\242\207H\277\330=\340=\354\365\340=1\215\031>\331\373\306\276\315n\035\276\034>\240\277e\322q=\010\004N\276\252?\245\276e\036\276\276>\343/\277n\244z\276\333L\016\277\nj\002\277\343\220~?\003\034\241?\200X\250=\244g\260\277U\257K\277\350\214\250\276\276w>\277\306\241\300\277P\276?\277$\373\350\275z\306\242>j\323j\276n\007\323\276\010\371\277\277\004T\004\300\334\275r\277X\247^\277t\237l?\030xG>\244kI\277\366\361\033\277q\027$\277\336T\211\277N\306\325>mc\311>\021+\233>4\302\240=\356\255\010?z\243\370>y\007\225?\304R\371>\377s^\277\324\236~?\272\352*?\372\365\272>0hj?\265=]?\300\363\207?\020>\266?\0247\315\276<\353\257?\004~\035@\260\226\233?Bu\265?\247 \240?\035\225\271?`\346r?\004_\266?\234b(>\260\033\257\274:f\314=\004\023\026\276\264\325\200\277\222g\364\277\342n\377\277@\237\221\277Zd\006\277\216:\025>\344]\323>\3325M?\036\236c?\256\251\342>\000`z\270{\243\341>\002\323$?\210R\235?\"\377\331?|\005\316?\347,0?\002\031\310\276JNx\276^\312\022\276\255W\232\276\031\313\010\276\017\036\262\276\310\361]?R\373(?[\276\226?\257\035\355>\262\":?I\325\031@\302\007\003@\256 \315?x\200\204?\377\026\'?\343\304\t\277\024U\025\276.\216P\276u\272\376\277\247\372\035\300\034\007\035\277\373\331\335\277+\240I\277\332\217\027\276J\271\036\277\204\302\316\275Q\006\025\2777\301\313\276\026\000!\277Mg\357\276\215q\254?\334U\357?\261\217\347?\331\364\275?5\252\371?\346c\007@\017^\r@\371i\031@:8F?\257@Y?p#\266\275^z\016?\205\374f?\212\032;?\220!\273\276p\024P\277\303g?\277\355H\037\277\242X<\277\362Ph\277d\305\037\276\010\322\205\274\201a\274=\372\362*\277\026\242\234>\264\354\223\277\2126\343\277<\032\253\277%\020@\277\001\254\372\276XZ\371\276\'\371\022\277v\244\325\277P\313\323=?\324\372\276\342\031-?\365N[\277\321Q!\2776\306\276\276\322V\022\2770\267 \2770[\325>p\261\212<\\\2275?\312\354\037>~\030?\277\311\277\226\2760l\240\274;\266\023?\345\323\335\276\024\263G\277\232FX\277|\032\300\277)#\202\2776j\261\2770\251r\277|\260!\277p\031\301\277\005\276\210\277\224bg\276\366E\205>\273\334Z?0x\267\275\025\342\212\277`(\214\277\214\035\325\277`n\031\300d\351M\300\224\002S\300D\323\n\300D=\226\277m\325#?\260E\r\276\004\246;\277\300\365\305<\375\3213?\220\002\212=\257\316\002\277\322\\<\2778\256\325=O+J?@\261\306?\250\343\373?Te\300?4U\354\276\320\372\225\2769\037t>W\215\340> `\364>@\233-\276>\2727?b\320x?\000\311\337\274\365T\303>\214/\277?\274\036\372?25w?\350\010\260\275L\260\003\276\346\005u?\270\"\213\276k\177W\277\264\361|\277\250c|\277?\023\267\276!h\r\277\343\t \277l\330\367\275\276\014\212\277\202$\335\277&\004,\300\237\366\023\300\006\002\232\277\302\273C\277f\367B\277\370\020\276\275U\260\324\276\205C\327>l\233?\277\312\225.\276n\301\351>\372Bs\276\266\321D?\270\313\350\275j\314]=8\232\340\273\030f\034\2772}E>\326b2?\210\322H?\210\215M?M[i?\300\032\\?K\\\307>z@3\277\306\260L?\302t\253\276}\006\243\277\311\246s\277\336\355\034\277\352\036\245>p\035}?DY\221?\014#\333?\026\217<?\312\315\356\276\025\227v\276\220\371\231<\347\347\214?\327\362[?(\307\315?\1777\300?`\272\215?\200JD?\277\223??\360\224d=\345r\250?\026\365\203?\322%.?@\254L\276\240\246\265;\274\361\214>\224\230I\277I\347<?\366\326\016@*\032K?j\256\304>\304\322D?\244hj\277\020m?=~:\210\277`,L=\023\005s\277\260\223\210\277v\373\370\277\024\010\037\277#\374\212\277Ha\261\275\316\\\025\276[}\343>\005\020\266\276@\313\243;\347\3544\276X%\240\277TB\035\277<\2477\277\306\363q\277S\205\343\277a\2477\277&\014\352\277\263|\351\277\214\300\245\277\010s ?\204\026\234?\257\321\223?\364\353\\? \277\236>\025\022\255>0\234\211\276\226\264N\277J^]\276\333_\301\277\036\235\030\300g\001\265\277\002\237\243\277\340\010\247>\317\006\231>\035&\242?\241e\234?zu^?\0206\237?$\363Z?\300`\323<\221\264\032=\3565M?\n{\220?\213\250{?n\210\244?\254\273\222?\310p\023@O\255h?\340\252\327\274\001]5\277n\020\027?\370/-\277n\253\215?\021\t\023\277\372\313\375\276)fZ>\273\370u?\026\023\251>\304\364\251\277[\254q\277,\361\337\277\260\227\006\3000lD\276\332\236H\277\206x\346\277\013\333\233\277|L\375>\016/)\276\\@h\277&L\252\277\002\246\356\277\310\311\026\276\214\024\373>I1\223?Z\324T?\300\013\336\275\210z+?\324\272\213?\322\026t?lJ\016\277\210\210\306\275p\320\353\276\234\234\351>~w ?\340i\214<\257\352\213>\271E\'?\342\010\204?\364T\235?]%\265?\232O\031@\232E\272?hS\007\277U\305N\277\000\303L\277V\373\276\277\250u\332\277r\326\230\277d}\243>\034B(>\220\t$?\\7\'\276\002\020\014?\353\034\253>\340\2623<x\201\247\276V\233\r>\021B\213\275\346|\254?\274/\347?\224C\370?!\240\276?\200d\023>p\262\250>&Yt>\204\225:?\216.\000?\234\024\263?\240>\'\275\317\224V\277\031+w\277\255\034[\277x\227\003\2777\251\206>\272]\277>\212\356\026?\200\312\233=\310\251\265\276\206\355-?\332r6?l~V?\\B\226?\0369\r?\240q\'=T}\324\274L\223\342\277HQ$\300\273\336>\300\034\005?\300\336\206D\300\206\035t\300\235.k\300\353f@\300\310\321\000\300c\021 \300\272\237\310\277\255d\004\300\030\337\322\277s\242F\277\214\326e\277\352\305\367>k6\272\276 J\035>\342\231\332>~\260\251?\"X\337>tH\322>\002\030s>\276Y#?\340\211\307>V\336\305>\362\027j?JW\340?\254\326\304>\307k->,E\311>\330X\361=\241\273\221?c:\232?6\335\364?\236D\375?\222J\213?\020W\252\275`\305\263\274t\313_?\355\001\317\277\302\247\004\300\nK*\300\312\243f\300\324\366\260\277XJl\277\324\233\t\277\002\214\002>t\017-?\220\337,\2756<l\277\307\353\224\276\3306\200\276\002\337\341\276\000\213\277;\032Q\200\276\220\225\204\277<G\004\277<|\311=U\223\n\277P*v>.!\367=51k\277\267N4\277\023J\244?H\235\342>P\222h\277\372\235\257\277\246\233\344\277ID\254\277G\303\213\277\004\333\'\277.\314\357\276Q\227\327>\223\321\220>h\023\263\277\271\005\021\300(\276\357\277j\320\241\277Lhp\276pg >\206\350\031\277\027\335\240\277\025\252\305\277>M\037\277:\244V\277B\360\240\277(\313\372\276Zd\322>\360\222\035\277t\036\207=\327\223=\277\214\232\315\277>\216\256\277\264\366@\300\035a\001\300\356`\337\277N\260\305\277\372#F\277\026;\235\277drN\277\360\203\270\275\036\350\022\277\360\245??\331\353??V\016M?\004vg?\257N\023@$\362\000@\246\0008@\244\350\016@\340\334\010@\251$P\277\352\0212\277\210\241\255\276\362}#\277Xt\177\277d\305\260\277le\227>\322\263\360\276\344k/\277\354\212\252\277\355\013\214\277\023\354\017\300\350 \301\277\200RW=\263\221?\276\206\356\035?\\\300t\277\200\224\035\300w\226\307\277\344\201\355\276\250\201\341\275fI\201\276\351^v\276\032\005\266?B\243\004\300\312\372\016\300\330\215\350\277x\376%\300\324\3539\300\313\327\361\277\345\273\372\277\322\237\321\277\n-\026\277\256\\\370>C\354\300?\272\336\020@\264X6@@\221\021@\330\347\320?U\036\270?\021\257H?\274\305\343?1yx?d\344\244?\006=3?\212@G?Z\241\335?\320\244\003>\252l\n\277\314$\215\277\310UT\276\013v\341?\300M\262>\356[>\276q\034\010\277U\345\242\277bz\363\277\034\206\204\277\335\275\002\300B\320$\300\216\255#\300\237\3769\300P\375\033\300#[\013\3001\316\"\300\207\227d\300\311tT\300\227\306n\300\310\003%\300\234\323\026\300\300\203\"\300v\235j\300!&\201><\225,>\243D\352=\2701J\274\257{\226>\215\2248\277\217\225\305\277\234t\304\277\210\267\364\276\203N\206?\352aR?s\335<\277G\251\325\276\234B\004?\355?\244>\034\346L\276\036\203\323\276\024?2\277\240>\220\274,\'\201?\246\257Z?,\027}\276D\001,\277\244o\257\277S8[\277O\374\022\277\345\367\254\276\023Y\031\277\372\331\355\277`\255T\276\335\314\006?[U\264?p\357\315>N=E>\330\030\230?\204}y>B\0042?\226Q^?\332\260\017?\275&\221>q\032\241\277\216\252\342\277\230,$\300\232^\344\277\000 \323\277\330\220\033\276\246\324!\276K\025\005\277Q!\027?\274\375\207>^7c\276\025\351\017\276\001\016#\277\260RY\277\004i\377>2\025\255>h\372n\277\007\271\326\276\201\266\306\277\204\235\034\300\347\031\247\277\323\226\t\277,\'\027\277s@\203?S\363\276?\345\356\n?\032`\354\276w\207\317>!\n\222\277\010\355\023\277(\211\037\277\322?\307\277}p\r>\310u\252\276\226z\026\277\270\306\257\277\363\246\271\277\347<q\277\210\237\013\300\236\370\022\300\331\014\373\277\274\317\331\277P\000\274\275\217\302\276>IFv? \330\366<\316\333\224?\026\205\355?\241$\316?\013\004\243?\230\255\014@\264\231G@\243c_@\030Y\355?\025\245\343?\342\023\264?q\326T?\377D6?P@\353?\222\032#@vT\027@fO\034@\360u\371?\375\241\240?\206T\032?\333\027\232\276\330HK?\356\227\255?\000\217\216?\314\021\230>\304<\252\277\204\002\"\276\354\356\244>\353\036\262?^8/?\351\271\211?\030\346\331?U\330\234?mx\177?\373_G?\274L\362\277\200\240\277\276\232\326y\277 \346\304\276\202\035a?6\251\036@\216=\220?\007\201\214?\220\263\274=\363\0300?6\245\244?\370\304\212?X P>\276\204\"?\312\252\324>\346V\347>\234K\323\275TF\360\2768,u\277\372\276\206\277\002}\031\277\214|4\277j;M\277x~\330\277\254\361\n?N\336\315?\204\021\334?L\265\245>\000\307\016?\226\351\265>2\234L?(\366\371> \207L?\224O\272?\265c\023@\026\206\'?\"\272\237?.\306\265?\3325\236>\032%\022>\371\306\033?.\255\006>\372\3168\276\360\256\n\277\272aN>\220\"\034\275\301\230:\277\000\330f\275j\235\310?l\244\035?h|\230?\376j\377?s\271\026@\020\t\233>w\005\035?#$c\277\246\256\273>\376P\365>:\233{\276\267\350D?\034\207P\27663!\277*4\314>\310@g?+7\216?0bR?\330\265$?\000\'\243?\022\314\266>Z\006H\276\332`\255>\302\274\357>\374\020B\275\03512\277\006\311\214\276pU\033\274d7\001\276.e<=\r\315\003>,\370\220>\324\377\215?^\217\265>\226Q\232=`Dg\277\324H\312\277\3400\000\300\240b\272\277\002$\340\277\327&\024\300\223&\n\300\032\016\204\277\260\365b\276\003\334\354>{\276\262>\225\212\210?\367{\037?o\242\014\277\351?>\277\253\203\024\277\000\177\263>d\262\021\277V\236j\277\223p\213\2776*@\277\335\254:\2773gp?\357u\225?@\253\201\275\276^V>\000\327w\277\302\300\312\277dY\375\276\024\237\244\277\365{\311\277\027K\235\277\030\336\255\277\3576\270\277j\272\251\277\232\240\035\277x\006\362\277\337+\021\277^iQ\277D7\250\277&\272\211\277\310\026\031\276_\210\257\276\354%\244\276\216\023$\277\346.\330>\330\'\234?\024\312\216>~\317T>\037\257\306>c>\327\276\321l\020\277\312T\230\277p\226I\275U\302\263?t\274\273>P\222\211\275dQ\217\277L\346\t\277\017\205\246>\007\274\270\276\315\343\310>\273\217\032?\027+@?H\326\335?\252+W?\331\277%?\256\253\225?\311\2500\277D\237\245\276B\276\221\277\372\215\240\276=\272\254>\014\233\021=8\201\302>\016\253<?@w\030\274 2!?~\0107?::\302?<uZ?\377\033\331>\000z\003\277\033(\206\277>K\334\277\343\271\231\275\177\325\262\277c\327\361\277\356\264\236\277\230\334\245\277\277l\023\300\2256 \300\227\355\025\300\017d\373\277\267\365\034\277H\032W?\236w\364\276\233>\220\277R\200\034\300\'o\026\300:j\251\277`\260\246\277xZ\237\277F\204\263\277\354\331\315\277\323\201\034\300\365\237\301\277\234\253\272\277\332\362\245\277\265\307\021?L\267\225>-\270o\277a\334\303\276\277\037\317\276S\036\256\276\320\256H>\221z\374?X\311\237>.\2146?)\266^\277>=\274\277\033d\201\277\310BI\277@a\001?\341\237H?\0225z?4\320#?\000WW\274A \212?\034\305\351\276V\255!\277\324.\254\277\376\306\026\277\177\203\274\277\371\370\033\300~\003\324\277+S\251\277\353ep\277T\375X\277\212\244$\277\354\372L\277\366\014\003\300\266H\326\277l\022-\300\033\021\332\277\264N\303\277\234\025\374\276\362\036*>2Vq>\220\216O\276\325-\217\277.O\206\276|\006\022\277\305\026A?\017\007\244>B\275\227?_\001&?\244\355\343=?L\265>i9\016?-\020\314>\365\342+>d\002\204\276\344\034\020\276\336\321\225\276\027z\017?\334\310\237\275L\270\205\277\362C\306\277\274 \272\277\233&\207\2779PO\277\234\276\216\277d\243\017>w\343\021\276M\341T\277\302\353\216\277\364\330\001\300\030\353\004\300O\226\346\277\362\317Z\277\231r\361\2760\275E\277\230\265\200=~\nr\276\315N\005?\035G\262>\312\'}\276\344\225\027\277U\230\364>\352\230\001>dhz\277\333\306F\277\245\264\343\277\347\007\340\277g\261\367\277\355\301\301\277Rz\313\276\000 m\277\240YX\276\362:h?\364\023A>LC\251\276\034\026q\276\274\362\306>7\'i>\202z\303>}\270\014?f\021\204>\210\202\230\277n\252p\277\030M\037>\264\354\230\276Q`C>\362\242I>\032\320\231\277\275\017J\300I\257M\300\020\312\303\276H9?\275\306\360\242=\356\033\212?f\250E?Pr\321>\315q=?\364\356\347\276\372+T\277\310\210\273\277D\374\370\277\177\343$?\274\276\252?\360HK?\325\235\253?\250\260I>n\004\254\275OW\345>3\205\303>\224\251\323?*\370v?JP\305>C\004\257?F\226\337?n}\254?\237.\037@\233_\320?\255\332_?\274\335\021>\356\2103?\226\320\025@\201P\276?R\\\247?\006\013$?\303u\005\277\325z\207?=\2720?\256\236\356>LEd?s\341\220?\244\006\224>\016\'3\277\260\205\'=\021\244\241\276\\\207\002?\223\241\354>\354\263\243>b,\036>\001\204l>\276\013\276>\250W.?\330\260\036\276f\207+>\022V\305>\230\331n>\3500\207\277 j\250\275o\315\222>\000\"\3129\341n\010\277\340@c\277\033\315s\277\360\374\024\277@$\240=\016\257s\275ae\230\277\036\013\253\277\202\362$\300\010X \300V\272\016\300\352w\230\277!\004\204\277\222\026\225\277\240\314\245\277\355)\344\277\016%\003\277\203\252\257\276@n\005>;\016\036\2777\276`?)\300\r@\006\200Q@\370\006\003@XK\253\277\007(\t\300\336\2365\300\024j\242\277\360*:>\235w\275>1\272\362?I\227\367?\021y\210?>\225\013?n\323P?\332\\\031?(\377\276?\316\344\352?L\323\032@\252\013\240?\316\337\246?b#\005?\267\223\004\277\261-\262?\366!\014@\363\364\246?wUJ?\202\351\220?\355\003P?\344W\321?\322a\324?a\026\207?V\n/?f\347\315>\300\r\257>\005\201F?R\364\240?v\214\007?q^5?\247\326]?]n\223?\352U\262?\014\"G?\212\\{>\\\355\276=\000\t\n\273\005\002_\274\322\304\300\276\261\337\262\277\005\023\014\300\230i\r\300\000d\036\300O@b?\000$\361;2?o?\000L\250;\236\r\304\277\277!\226\277\321\r$\277\323\256\353\276\313\377\215\276J8\206\276\273\265\022\277fv\244\276{i\240?G\325\244?\231\341\200?\364\177\270?\362!\307>:CE?\366tl?\006{\202?*\006\257?\2209]>\236\252\221\276\316\337\261\277\244\351\201\277\304\307\346\276hzk\277\200bi>\321\026l>\200$\t\275x\227\243\275F\330\t\277\354\340\362\275\254\324\212<\t\260e\277Tu\'\277?Lj\277\306\242\264\277\024.\271\277C\007Z\277d\230f\277\016\201\021\300?\233\351\277\266\236Y\277<\010)>h\3067\277\350\337\216\275_8v?[\237\305>u\273l\277\344\260[\277m./?f\026\237?\005{/@6)\037@\t!\016@\354\310\007@k\344\363?\347\211\013?m@\237\276\211\024g\276V\324.\277\005\271\246\277\035\251D\277\366\237B\276\266j\201?h\305\356=dC\201\276B?\016?\230\212\305?\210\260\r?\002\"\"?\251\321\234\276\245\265\007>\351%t>fz\247\275^\227\266?R\243\234?rS\347>\240\001\304\274X\262\027\277\200b\313;p\021\314>\360[\347?\243\020\345?\336\346\224?T8\351?\212\021\020@\316?\251?\016\240\341?:\332\034@h\'\330?\3701\202?\366\203F?o\202\370>\324\367\301>\206nj\277&\341\204>:\352\247\277n\310\023\277I\007\342>\350\022\024?\364\225N?\244Nu>L\027\031\276M\224\377>\034\326\022\276_\212L\276\243\344 \276\336>\323>\300\201\'\275h\326\310?Z\360\252>\021j\"\277s~\273\277\213\351\203\277\266\177\325\2770\214\356\277$\364\313\276PQL\275w\274\026\277;\206\341\276+\321\344>_\275n?\263\t\254?\216K\362>\010A\022=D2l?Fj]?`\376\346\274\312]\'?\300v\023\277\320W\005\276+\255\347=*\351\030\277\3240\007?\337Q]?\301\344-?\020\224\026\275\304\367\246\277\235H\270\277V+\234\277\224\366\224\277\220\302\014\275L\3277\277\205\232\016\277]?\230>\353\r&?U5\226?\237\265\353?u\371\271?\\+\003@\237\335\236?u\252\277?\372\321\270?)\222\240?_\202\375?M\351(@2\274\372?G\205q?\370d\333?z\315\340?\241\323\267?\347\nj?\276B(\277\357\326\322\276\306Y\220\277T0\020\277Y2b\276{p\201\277P\275\313\277O\350\321\277[\314\211\277\200\2067\276\305`>\277\377\276\214\277\023.\342\277\023\367!\277\302\237Y\276PpT\277\370\223\270\277H(\331\277\332J\376\277+6\334\277e3+\277T\206G\277\037]\205\276\320\220\317\274\260c]\276w\026!\277\217r\202\277\222)\205\277\265\004\360\276\236\\?\277\010\205\305\277!\322\314\277\342\307\266\277p\361\203\277\356&<\277\322\372L\276\320y9\277L\302%\277\250\220\331>x=\\>h\262\222?iH\002?2\222\007\277\371\275\023?\314\330\230?\224]\306?D\355\206?\237q\272?\216\342\251>\346\3079\276;U\025\277\243\245\r\277+\3201@Ab\022@\366\204\377?\220\373\306?F\332\203?\330\300(?\030\376??\316|\271?j1N?\341y\202?\257m\334?\212\275\016@\220\362\370?hFs\276\340\225e=\337\3306?\000\271l>\332\266\220\276\260\033q?\370\277\211>7\031\201>h\240\022=\010<\271>D\301\023?\256\273.\277\305\202\204\277*\032\215\277`\334\336\277X\335\000\300\231:\331\2778\374Y\300=Z9\300j}/\300\241\202\227\277\330 \226\275\321\354r>\212\030|>\211\224I\2764=\006=l\002\001=\344\317\027\277z=L\2771\001\255\276\222\301{\277\323\034(\277t\005|>\350y\r?:0\315>h\247\036?H\245s\277\314\234\226\276\2320,?\225\022<?\320\2359?<\266\310\277\235>}\277\340\002\260\277m\320\270\277i}\033\300\234\016\344\276\374\232(\276\006\2542\277\014:\245\277)\233\266\277\236\275\361\277\272\255\013\300\364\034\361\277\352O\"\277 r\237<Z+\003?\350tZ\275Q9\350>\267\341=?\207*B?X\214\335=P!\215=\3447\233\276\374\300\003\276\352;\307\276kf\301\276$H \277e\245\344\276@\361\016?\254\222\235?\242G\315>\364\326\340=\347M\"?h\211+\277\223\342=\277x\356\327\276\352\316\004\277K\t\350>m\267\326\276`\316]=I\001\364\276\230\000\224\276J@1\277\326K8\2771Q\025\277\020\363\205\275\000\327\223>rrZ?IrE\277+\233H?\340u\001\275z\004\223?\036\224\215?\177\271_?`\r\'=\204!\356=\333j\272>6H\003?\237:\224\276\0267\331>\000s^?\261\276\373>%\265\274\276\210\246\311\276\377w\327>\n.\244>\023x\212?\342\352F?<\261l?\210\211\347?\317\010\365?\216\317\r@b{C?i)W?\230\363S?\220s\256?(\321\213?\000\2413\273i\215a\277H%\232\277\037-\214\277/_\203\277\223t\300\277\224\220\363\277\3677\245\277\t\032\261\277\357\333\002\300\334\327$\300\335L\007\300N\364B\300\33650\277c)\002\277\335!&\277\030N\021>|\225\"?\\\227\214\276\235 R?\\\353\221\276.\354\022\277\217\276x\276\374\311\374>5\255w?HI\215>\276^\216>y\267\350?\315\312\301?\240\325\300=\332\244\251\277\3415\234\277\260\333\235\276n@\271=\276\222\031\276x\n\300\277x\273f\277x\377\315\277\256\2620\277\277\233%\277bw\302\277@mc\276\374\302\310\276\367b\267\277\200Q\255\275\207vJ\277\242\311\022\277\034Q\234\277\013\345\235\277\216s\277\277&\327\021\300\224}W\277\320\006\221\277\221\263\233\277<\301\321\277\370\225\272\277,\3348\277\210\257\300>\327\302\t?\023\323\003?O(>\277\236\214\255<\007\031\202? \243\203=\260\347\264=s\246F\276<qa?\304B\354?c\313,?\310\310\355=V\200\213\276\254{\334>\036\257G?\020\246\304=\251L@>\362\031\203?\316]\241?\202\272\032\277x\210\245\277\203\356\344\277\2431\362\277<\326\307\277\224I\256\277t\206\233>\370\272\005?\304\221\261?\240k\234>\362\013\263=\203\023_\276\267\223)\277\310lz>\304\227\234?:\022A?\000\213\315\274N\343\323>m\256\272>\245\325\222\276\205\234\211\277E\230\305\276\310\3231\277\326\031\030\2765\330d>\226cP\277\2538e\277\211\224:\277\2228O\277\252\326\355\277\230xd\277\304\003 ?\r\026\214\276&\357\304>\252\352e\276bF\202\277\177\272\241\277\354\374$\2776/\025\277\2509\023\276R+\002>\213\234\312=\250\r\214\275m/\277?\261R\250?\241\336\274?\200\352!?l\326q\276Z\260S\276\234\227N=\360_\205\276\001\'\007?\214\257u?\251G\220?\254\352\335?\236p\362>]6\342?\204\324\316?_\326\204?X\320A\277\313\206\023\277\033c\341\277\360\034\352\276W\267\204\277V\232\007\277\236\204\322>\030.\027?\265n\244>\232\t\200\27630-\277x\030\006?\204U\271\275\230\337j\276\222\t\000\300[\371u\277\346\003\177\277\360\370\206\275\000\204\225\2777\200X\277RQ\257\277V\031\020\277R\256q?\350\324\001@\212\217\362?(\r\267?\230\033m?\264\371.>\013\010\235>\237&\"?\030d\376\275\325.\256?\010\324$?&\325\017@t{6@s\252\374?\327\270\317?\345\334\027?\221\335\n?\323\250\243?\204\242L>\267\305\000\277\266E\215\2774\227|\277\200\216\353;\035s\212\277$C\256\277\350%S\277\342\032\234\276\355\237\223\276\344\260\202\277\226}\n\277\274\004\032\277\340\371_>\376*\307\277\037\2321\277&\034\230>\362\314\264\275r\033\365\274\306-\n\277\200D\202\277*\000%\277\032\r\232\277\262\237\373\277\302\330\311\277\226D\376\277\301\311\214\277O8&\277 \245\261=\277\321\302?8\344\365>L\357\371>pU\177\275\237\327\276\277\321^\000\277*\032\022\277qw$\277\304\251\'\276\270~\371\275N\353\350?\3669\001@\220\334N>\310\244\006\276\354Zi>\265,(\277\000\214\304=\234y\272>\343\276\263>Z\177\252?\320\210(?\031\272\001?U\022O?\200\272\355\275\231\024\r\277V\204`\276\370\305D?\246J0?\207Eb??P\026?\234\223\007>\205I\327>P\300\r?T\026\260=\303N\036\277\000&\256\274\233\\\037?\306\023\005?\374#\202>\211\360\004@\2655\022@\203c\365?\274E\020@p2\313?\020f\001\276h:\020\274\304\363\250>\311\357~\277Ybp?\036\013\263?\016F\251?\030\221L>\020\017\210\276\330\233\220?\230$\010\277\374\235~\276\250g\275\276I\035\305\277\001d\250\277i\362\336\277e\017S\300ljM\300\354\302k\300\211^]\300\010*+\300\346\276\344\277\350\233\242\277\340HT>V\034\231>(4==\2643.\274G\371\357\275\003\246\r\277Q\035r\276\024\333\201\277.[N\277Ah\220\277\357{\036\277B\005\354>|\031\347?\036\2120?p\250\225\275\276\032\322==|\304\277\352\300U\277\214\377\214\277\030h\213\277\000b\225\274\237Q@?\266\037\314?\332Q\022@\346\243\204?9\271\365?}e\r?\273Z\225? \332\234=\236A=?T\220\n\276J\016\235\275E\324\222>\305\274\220>H\021\003?\022!l?h\247\203?T\304B?r\013_?\327Z\177\277\022A\302\277\210\217\344\277*E \300\004\025\350\277\342W\357\277\233(\262\277\032\225\177\277\200t\207\276\256\375\300\276\320\032G>\372ZD\277x\371\305=\005\023\273=\t1\354>@HG<\244\321\366\275\350\252\217?\\\224\'@\202M\242?\303\027\206?\247\300~?\240\311\222=>\352C?\226\332\202?\263\267g?\035\320\216?&\267\230>\016\202\254\277\332eO?z\246\322>Xq\007?\342\244\177?.&\372?\331\271\204?\227=\030?\2227H?\330\366\223?\304\226\206\277\371\005\323\276\223\302\352\276j\253\307>x\337\'\275\365\246\330>\204\234#?dH\272?[F\013@\020U\322? \304\321?\033S\276?\020NU?\020\366\210?\002\352\033?E71?$\014\212\276\022\341\320\276t\366l?\340\001*?\325\360W?:\303\261?\315[I?\362gb\277\310e\336?\351\215\227?I\327\031@\222q\253?,\320K?|1\016@\030\032\021@\256\374s?\230p\215?\034\232\346?M\203\005@\034\352\023@gr\200?0\372\201\275\371R\374\276\371/\245>\220\010\320?\273\241\257?Z\307\240?\000\304\222?\234\'\225?\276,\271?p\367\270?duT?k\315\261?\200\334\254?\342A/?\2248\240=E\276\001\277\271~<\277C\022X\277\235\237)?\n\376\356\276\000#4\274\313\032\354\276\274\021\003>\016\330\256\275P\347\246\276&9v\277\242DT\277\333\'\014\277\354\025\221=$\327G\274{\253\266\277\272\337D\277H\014\251>\264/I?V\203\335>\260\323$?24!>\r7\203?&\2275@\235\374\374?V\201K@0\202\006@0\234\200\275\216\366\324\2777k\355\277\374-u\277\273\2405\277\262;\237\277j\215\211\277\262\207\006\300\200;\\\275\342\225H=\2014\233?\227\263\371?\215\245\037@T\345\372?\245\277\267?j\313\027?d7\227?\001S \300(\350\031\300\276*\346\277\277\376\204\277Yg\r\277\336P\237\276`\250r\274?\237?>\036\346+?0\202\230\275\232\004&?\372\265\005@\315\233\307?\275B\306?:@\330?\330\335\274?Pz\033>`{3\277\320\0067\276\036&t\277/\236\231\276\263%\001\277\215x)\277H\316\263\277\302\264L\277\375\256\007\277y\357\216?\337;\363>C\024\017\277\3608\n\275I\3750\277\354.C\276\226dw\276\n\334\222?9j\365>\244\341O\277\306\177\270\277\017\353\250\277\244[B\300\205H8\300\037\373\001\300\2708\030\300\3076\321\277 \005\207>\224Z\206\277\332\256\313\277\354l\220>\322\333\025?\261U<\277|\365\256\276\311\330\270\277`\357\r>\365\263=\276\027#\265\277}\000!\300\320d[\300\357sQ\300B\267M\300\006t\352\277\220~\261\277\277\177\004\300~\344\312\2772\354\216\277#\350\262\277\270\243\216\276\314\232\307>\222b\272?\216^\361?\271:B??qQ?\200\344\017\275^mi?\320\310i?\226\343\202\276\314\216\245\276Dq`?TV[?\017\024\024?\354~:>h:\220\274^\327\033\275:\226\277?x\024\007@\317\215p?\213R\230?\335\026\233?\350\240\206?\304\010 ?\023^h?,5\013?\246\201\243\277l|\177\276\t\013\345\276\344_\225\275:\034\270\276\374\356\265>\374\212\322>\347\314*\277\001b\314\276\322c\003\277\254r\236>\200\215\303:\356Y\014\276\335,\330\276\014\005\317=\311\231g?XuL?\002\027\324\276\374\313\371=\337\261\034?p\277x\276\333\233\324\277\"\023\205\277\016\224(\277u\'$\277\202\3748\277\232\026\333\276\272\024\362\275\231\246\270\277z\372s?$\t\013?\274\224 \277z&j\276Yx\207\2762\226\270=bL\200?f]\265?3\376\376?\261\2475@\362_e?6+\323>d\034\370>\227]\272\276;\250(\277Z*\317\277\271/|\277\366\344\200\276\224X\370\276$\331@\277\000\332\036\273p\360B\277\013\315v\277\023\217\375\276(o\306=\202\337\367\276\004n\213?Q{\371>\223\371\265\276\274\006\032\275\247\206\242\276,\241\347\275d\357\230>@\335\000\277S\312\037\277\270.\317\277\367)\005\300`\245\367\276\020N\207<\364\261\337>B\337\274>\210\177\274?\320Y\243=V\305\275\276\322\354\351>\372\361\023\276\017P$\277\025\346,?\316\242\"?\004\274]><^\312\277{g\207\277\300V\335\277\274\267\201\277\000$\243\277\270\260\023\276\244\027G>1~\\\277x\354\017?-\035\213\276k\027Z?\340\026\212=E\375\203\277@\217\031\300\326\371\217\277b\312n\277\000^.=F\246\355>hO\275?\004\2349@\246\271\317?\023`\364?\027\017\326?\004\305%\277\244\365\'>065\275S\247\205\276\315\205\210\277\360\203\200\277fx\233\276z`\315\2760\035\204\277p\322\303\277\244\236k\277)9\256\276y\314\300\2767\243\221\276[\007c\277\343\2318\277\334\274\326\277$\314\354\277\232\356\204\277\357\036\350\276\237\023\357>\356\215\223>\027\257\371>\344\370\327=\002\341\220\277\251\321u\277\317\005\000\277>\274\016\276\275\367U\276\211\322\t>Z\331f>\342\353\033?\n\007\252?Y\302\311?t\336\356>\032\032\231\277\000d\213\273\256\303\035\277\020\304\375>&\221\032?\234\253\275>I\351\346?\006\324\245?\304)\270?\274\221I?\035C ?@,V?\261y\304>6\225\026\277\032x!\277FV\305\277B\361\000\300B\277\026\300\010\\&\300V\3755\300?8\253\277\"E\256\277\321=\357\277#M\335\277\255\366\272\277\200\316\331\274\266\213\343>T\324\212=\001dJ?\352\272\274\276\030]#>\344\253\330\275w\326g?D\216\311>/\245\321\276\303 \210\277\241<\226\277\004\334]\277P\"\323\275\314S\237\277,\357\226\277J[\316\277\004\333\264\276\242m<\277x\016\361\276\316\202\305\277\331>\250\277\000\363\365\276\255\332\234>\260I{>\216\322N>N\233\331\275h\307\221<?\205\332>(s\315?\333\035\221?\026\367\324?)\370L?\360\005\257?\330[\356?n\224-@gr\025?Y;4?\206\243V?\020\212M\275\206\316\330\277r<\317\277O\315\244\277&n4\277\315o\277\277\030\000\344\277rQ!\300\226\035-\300h\346\324\277\2571\250\277\355\203\212\277\240\014\220<\261\004\036\277/t\235\277\200\357\210\277\237\236\211\277+`R?\350\251\256?\032\241\260?\376\373\341?{\210-@rQj?\250\327B>\014\357\217\276L3\340\276\275\022\r\276\326\222\265\275\250\343\233?\240\264\014?l\357\244?X\350l>@3\344\273\255\344\222\277\236\271\247\277\316\317\210\277\001\215\232\277E\352a\277\327\230\200\277\216\343\300\277\027\331\221\277o]o\277o\336\360\276\356\256\010?\t\367\224?\241\357\220\275\353v\276\276\310R \277\250fZ\277\000\022\211\277\227:\361\277\305\362\227\277\010\321\204\277\320\301)=0U\337\276\270\265\352\276L\243\275\275\021\033j\277\375\345h\2779\3045\277\026`\246\276\243\226\213\276jI\020\2766\023\031\277\227`.\277\207\370!\277\274\363\303?\2469\370>\334\376\226?\256\345\003>\024\300\'\276N:\376>\300\337\024?i\310\202?\014\363\322?_MB?\006\362\246>\302\032\210?\226\216\270?\267f=?\243\370\344>\216kx\277\2003)<\303\252b>,\322\212\276^/\257?O \306?\340\312\302?`\314\343>\322\245\364>p\263U?\210\301Q\2762\251\035\276!\255N=l\277\270\276\216\023G\276\362N\014\277\212b3?n\216f?\276`\226>\230O\332\277\365\207\275\277*\261\247\277p\225\307\277\264\356\302>\220\2409?\262r\314>\342%\003\277l`\000\277\2172\341>\366\210\261>\366x\376=l\351\224>S\210\322>x`P\275\323(\236>\360[??\231\337\220\276\3002\361\276d\332\226\276\316<\035?\022\365\333>\024\316\234>\260\327\253\276%o\014\277\2400.\276F\366Y\277\222m\257\277\312`3\277\232\223\210\277\310n+\276\275R\351?\303v\307?`M\n@\t\006,@\251\0348@\337\366\006@\320\207<@\236\247\204?\002\234\251?\320\373~>-b\006\277\236pe>\236~\275\275?\213\'?L<\321?\364N\341?\377\024\200?\236\003\227>j\350\014\277H\004m\277\300\340Z\277z\220\356\276\327R\302\277\234\203\331\277T\240\334\277\2604\374\275N\020\003?\313\203\220>\276i\237=2a\n?\311\215\270>.S\311?\233l\240?rv>@;2m?\240\262\366=\031\347\366\275$-\257?\354\001\300?\353v\234?\374>t>\352\325\025?Y\366\311>\324\340Y?\001a\320>\216x|>\243\253\201\277\200\0015<sG\273>\350tR>D\357\004?\262\232:\277{S2\277\352\363\217\277\355\177\243\2776\212\350\277\301\367\277\277\006&\324\277\261D\312=E\307\254?\322\246%@\347\200\t@\247\n\317?\363\036\270?\244\212\340?\355v\312?\004?\203\276\242\205\222>tm\204\275W\002z>\037l$>\210\311C\277\354\252\320\2779\257\261\277j\026\014\277\216n\255?\262\3058?\204/W?\216\2423>\260XX\274l\356\246=\216.p?\346\226\375\276/t\252\276oZ\235>3\273\216?\246\356A?\366\371\334?\272\030\n?\342\320H\276\361P\241\276\024\273\362\276\013\223\342\2779g}\277/\227F\277\267\201H\277\340|\224\274\341\211\240>P\224\252>\240\372\325>\324\362\310\277\255\275\000\300\177m\307\2774\322\242\277\225\244\203\277\226\361\016\277|d>\277\360\271\236\277\037<\004\300\250\261\r\300d\227\273\2772\267\206\277\234\232\224\277\010\215\350\277\"\244\252\277\230q\223\277\230](\277\344\212\316\276\300\376\312<\317\345\221\277\374\000\027\300\375\307\'\300\206X\206\277\354\237\241\277\370\005\001\300F\266\272\277\2278\251\277.\253\355\277\220\336\257\276\251\261\241>\277\331\022>\304\303\033=\205\302\301>4\264\004\277\024\311\315\276\311\254\202>\312\362:?s\024\"@\211 %@j\252\235?\321\313\225?h\252\321>\242+\225?\214\246\226?\240\206\n@\310\3420@\371\375\342?lz\361?\372\327\243?\276$\216?\333C\227?\220\334\201?\212\324\204?d\006\005?\re\345?z\314\273?\206\205\354?\242<@?\370t\374\275\214r>\277\262\336\241>\336\205\361=\021\320\270>nx\005\276\260\335\022\276`a$\277\350D\261\277z\375\033\300\224\216\320\277<t\004\277\2420k\277\360W\263=\304\355\002>\000W\206=\006\366x\277d\204*\276j\215p\275YS\256=7h\014=\222\007\233\277\204\377$\277j\000\227\277x\301\037\277\263!4\277\300\t_\277\323\304\211\277\370\035\234\277xr\021\300T\215;\300\307\2504\300 \002/\300\035\214\023\300X\224\001\300^\325\025\300\355\217\324\277\256\330\206\277\024\035+\276\344\346\226=\315\034g\277jt\207\277\034.:>aVd?S\221-=\324\266g=\333\020&\277\277\370\220\277\361{\253\277\302Y\310\277\332Hu\277=\200[\2776\035h\277\207\265\215\277.\321\317>v3x?_u8?\257\270B?\017\320\262>\340v,?+\263\035?\3241c\277\321f\003\277\362\016\220\2770&\020>\203\366\344=\010\331^?/[\333>f\211\251\277|\310\354\276@\262\230;[4P\276\022\316\203\277\317\336\026\277i\0073\277\24283\277p\220h=\301j\003\276O\362S?\300\350\251\274\235\245\035\277nW\353\276\026\361\334>\022\216\033?ZU\233?\202\201\207?YB\337?4\\\246>\363z\254?\225\340!?l\021+>\214\347z\275\225V\341>\357\342\n?((G?\r~\203>\345O\226?\204\306f>P\247\005\277\302A\005\300\017\314\255\277\322\343\232\277\255%\300\277 \255r\277\247\017\352\276\230p!\277\314\300\003?\376<0>\032\034\311?E\320\230?~\322\314?\206K\225?\367\224_?\366\001\233?8\033\003>\326xG>\335R\217\277\351\213X\277K\310\300\277\200\244\n\276\3601\323\276\260\314\361>\000\023\345\274\313\234\246\2778\2404\277\246\004\204\277\216\364Y\277g\371)\277\252\034\004\300\372\340\371\277\221\223\010\300@\336\002\300Hi\365\277R\221\004\300\313\354\016\300=\212\277\277\340IQ\276\243\231\306?\024.\377?\340\245\227?P\235\373>\303R!?\374L\016?x\265 \275\241\345\237>\274\316x\275G\351\357={\233\304?`\266d>B\271\302>\233\001\327?Z\355\006@p\"\302?\020t\032\276\360\274\231\276V\331P\277zK\302\2773\240\226\277\242\036H\277\362\327\\\276\330\321=\275\317\035\023@\376h\341?\347\255\241?\3700\177\277\346\360\217>>\222\257\276\224\251g\277 \3722\277c\267\240\276\232k\271\276\262y\016\276\376\250\304>p3v=\305\345(?^|\203?;:u\277\270[5>@s\353>0\272z?\035\257\362>q\246\211?\375\3610@%\241\004@\006~\005@\247\312\030@NuG@\272\010\305?\024^\220?\270$\233?\246d\030@\352\314\223?\376m1?\262\241\007?\2508U=\034f\013\276\207\377\253\276\314\255]\277{Q\254\277\242\3520\277\037\246\336\277\021\355y\277H5\003\277\240\t8\275\0337\306>l1\001\276.\355\023\277TU\017\2767\350\035?\336\225\261?\014\000\350>\340\373w?\020\021\023\277@\214\245\277\200\356\345\276\255\307\376\276Vl\004?\262\306I?\370\253\306=\376\034\271?\203\007\236?\205\306\304?R<\321>Cf\022>\242\213\257?\320\244\"?D\275\341\276\320\010\311\276@F\226\277\314\330Q\277\021;Y\277h>\023\277\254\251Z\277\202\254^\277\016\323\223\277\222/\326\276d\014 ?\004\353 ?\211\n\001\300\344}\007\300\311\032\022\300\352\242N\277\200\024\275\276xL\254\277\311\373r\277:F\237\2770\213\236\277Z\3370\277\030\350\316\276\204-\327\277\364\250\272\277\010Lz\277\232\\\201\277p\263%=B\024f\277\024\023\323\277\014\020\355\277\344T\270\276\013\177\246\277\025\206\001\277\240\374\216>\0249\223>N\020\234>\357\223\233\277v\310\022?\364N\244\275i\2109\277\230 \241\277=w\t\300\346\247\253\277N\325\354\277\274\305\002\300r \231\277\026\336\351\277\014d\345\277\303\315\263\277(R\263\276\311\357\347\277\235Y\265\277Pq/\277\372\325i\276xJ\216>\262,\243>\303J\t\2775\235\226\277\234\n\324\277U\202A\277z\241`\276x\350\215>\001Ds?\016Y\242?6\353r?@\350$\275\334\r\245?\327\216y?Z\016a?zL\225?\240\313q=c=\227=\334^\201\276\027\2556\276J6\250>\260\256\013\275H\375o\275\202\373\r\276,\263\016\277.\363*\277\274\255?\276\325W<\277\177\222m\2770\372\202=\270\264,?\007Q\354>\363\302\203?\367j\220?\323\266\362>\326f\233>\353\371\304\276\371|\225\277\270<\321\277\214\273-\277Z9H\2770\032*>\2677\201>\244\303\013?\\\010\205?\356\233\371>\000\255\362\275\236\000\224\276\350&\'?\370&\022?\214\311\342=\237\320h?\330V\355?N\r\333?p\3233\277\317\323\215\277\022\344\036\277\004Y7\277\316\277G\277\031\230\271\277d\357\367\277p\2024\277\'h\215\277\004O\352\277<K\264\277\265\363\254\277\2626~\277\225\371C\277\036\203\316\277\334D\234\276 \203I\277w\177\240\277\206\034\374\277#\273\341\277\000\013\010=\341%\260?\250TM\276\354vT\277\274\355\r\277\324\3642\277\262\364\223\277Vvj\277\\\203V>{\212\312=\336\273\003=\274F\200\273\346\023\302\273\005\002\014\277\204@\230=\035\325)?x\263\240>,\2559?r\225)?\321\302S?\347\235\216>\031cl>22\340\276\220\177X\275s\305\227\276\257\002\212\277!\351Y\277\030\367E\276\316dv\276\326K\303\277\016\340\254\277\r\262\000\300\001\300\335\2770S4>&o\002>\264\262\010?>\316\331?\232\261\212?nh\223>\020<4\275a{\364\276I\202\317\276SF\204\277\313\033?\277\0006\333\272\214Z\236\276\243.b?\000\340\237\276\304I\232\276\250^\010@2_\225?\266z\276>\374\264\036\277^\371\250\276\010\253X\277\240l\213=\343\303\272?\364q/>(\274K=\374\265\341\276\327r\207?\030\322\300=\270\227\201\277p\225\272\2776\324\322\277\276\023\013\277Z}@>\333A\331\276Iw\234>\016\232\207\276\004x\021=\267\303\027?\376y\335>\365p\r?>Q\266?\330\225\010?N\305H?\350h\267?D\021_>\364\034\271>\344n[\276\353s\272\275>\257C>\243.\352>\270\036#\275\226x/\277\226\206\312\277\316\010\002\300\010T\221\277y\312\261\277!L\252\277\250<\354\277my\247\277\030\301\342\275\371\236\275>\264a\257=\026\201>\277\252\2239?\344,\231?\356F1?\316\037\203\276\347\232Q\276\036S\227\277\330\333\"\276l\325\265\274\302\257^\274\311\361)?\1771\232?.\365\222?\276\2034?F\347\223\277\241\221M\277B\247\334\276\035\202\354>\240\375\004\276\202\177!>&;Q?kj+?T\217\r>\251\373\017?\010t==\224\017\363?\242Z\303?\312|\346?\3769\354?:\210\323?\t\254\014@W\'\005@\200>\241=\360H\266?\305\263|?\374\023\222>:\236\226\277\217\261\257\277\271F\274\277\265\233\223\277[\347\226\277\026\024|\277\034\\\'\276\265\230\301\277\020\020\332\277\356K\002\300\211C=\277\311v\013\300\205\336\366\277\271\036b\277*\355\240\2764\035\'?\016P\250?\323\327\274?\024H]?\232HT?r \341>\275 \006?r\2343?\210(\250?\000\203\326\275\3708:?}\370J?\353l\224?^8\260?qz\255?\234\321q?\234\210\006@\222`\033?G\025Q?L&\203>\211\362\264?\377\311u?^\371\016?\244\351Y\276\360\242\370>\247uz?\214\025e\276$\371\273=G\005\241?\353\272Q?P\203\223?\336\370^?\004\001\272?W@\247?\\\014\325>\000NS>\000\0078<\036\302\017>\367_\357\276\270\266\307\276*-0\277\305\225\034\277\221\273\276\276=f??\376\263\264>\304;n?\302\034$?\313\207\352>\370\335D>\325aD?h0\344?-@\221?\201\356\346?8\336\004@\340\3337@\tGD@X\262\224>\006\021\302\275\202\213~\277s\004\201\277\240@E\275nME?7K\355>\344\235\\\2764L\327\276#\243\017\277\024R\302>\347\270\252?U\371\256?\222=\242?\006zY>\236\207\360\276N\220\300\276\030\354\303=x\005\032?\000\002;?\325\r9?Nx(>\24159?\344C\267?\375\270z?\301Qc?\304\225\263?\032\350\007@\211\316\334?84%\276\330|\321\276+v\266\277|n\352\277fR\367\277\313C\r\300^\321z\277F\321\315\277G~\261?\367\224\373>\265\245\276>\021\363\240\277dj\232\277\256\202\223\276e\360\240\277\342\277\227\276Z>R\277\275\310\245\277Dp\224\277\236\322H\2774\036\224\277\320U\353\277Qc\t\300\345\267\365\277\337?\035\300T\372\034\300\207\271\316\277\332\276\343\277\346\370#\300L>4\300\035\203\016\300\024>\314\277x\317\014\300\355\277\t>s8:\277\324\304c\277\340U6?\\\212\321?\020\341\252?\214\204\311?bt\234?\020\322n?\032{\271>.&6\277\001\312B\277\266\314*\276\333e0?\360\261\033\276@\270\233\277\363\367\301\277\206\003\210\276\256\303\'\277\334;\251\276@\256\020?n\271+?`7\212\275i\013\223\277\331\245\026?\336\3768>-.\231?s\300\352?\023\256s?\000\263{;\026\2255\276\312 Q?\244\023\302?\217\270\225?\000`p<\177\351\340\276!\r1\276\314\360\326\276TYK\277v\345\301>Pi\214\277\032\341\372\277\271\325&\277D\036\234\275\212\367\367=\205\374\214?\013\351\016?$\261\316=\233\260\351>\267\244\251\276$xv\277\330\345\256\277\005\302\231\277Y\366\276\277\242/E\300n7\204\300\215\035O\300\212\027>\300\342\374#\300\211W\002\300E\263\375\277\347\2706\277`\224`\276\221\327{>\353\236\323\277\260\353\353>:Kn\276Xb\301\276\'v\314\276\326\332\214\277\254\260N\277\230\246\206\277,\373P?,+\">\013\272\177\277\344\217.>]\252\216\276LJ\255=6:\316\276u\017\332>\314\331\222\276\274\364/\275.2j\277\374d-\277{c<\277p`\216\277\252\205\324\277\323\340\232\277\203\326p\277\360wG\277)>F\277\246\r5\3009w6\300\323sF\300\345\334\036\300\322I\034\300\251U\307>\010\030\236?\010/\002@\204&{?\340\342\035=P\2423<co\253?A\347N?\334\237\003>\307n\262\276\314\357\356\277\205\241\367\277@\276\331\27638I\276N\340\362=\250\t\\\277F\261r?\312\250\314\276s\266\201\277\305\"3\277\307\312\t\277\265\"\205\277:4m\277j\237]\277M\202\020?\322\321\277>*F\202?\2327+?x\275\222\276\3568\324>d#-?\237\206\213?t0j?\252\342\300?B\223\216?n\270\211? \344\313?\2302\r@\033\225\276?Xf\'\276l \312=Or\006\276\2364-?8Q=>\260\212\237>$@\257\276P\037 \277\306\354\266>\034+\002?@\207\313\275\237EA>\302P\343\277Xj\'\300\270\020\324\277*\347\370\276\356\316-\277\320\350\267\277,\263i\277\272\320\036\300\224\316\'\300\237x\343\277\372\006 \300\377\320\263\277\003\312\330\277\312\333\032\3000\251\021\300\201b\'\300\336\315\001\300\266\261\025\277\321A\037\277R\253\221\276\233\312i>@xB\277Xn\030\277\030Br\275\231\313s?=\344\014?4:\303=\026\002\376\276\350\314\273\276`\361\366=\026\2160?p\302\000\275\252\310\323\276\212X\201?\352NH?N\300\230?\024\2538@\025\302\016@\203s\250?K\017e?\256\'\030?*\252(>\0173\232\276^U\322\276\354^\t\277\206w\t\277\364\211\267>a\324\337\276\226!\200\277V\367\301\277\226\037\310\277\2051\246\277@\272\212=T[W>}.\211>\350\327\323\276,\306g\277R\347\312>\240\347\033<Y\264\273=\316\334\347>lhb\276Eo:\277\364\324\322\277\302\355\245\276\204\363=\277\340a\n\276\370\317\226\277>\215\272\277iV\236>1\330\326>P\301\020\277`\312\223\276HVu\276\'\022\213?:\350\240?Z\274\242>\326m\306?V.D?\270x\222\276\'n\203\277e\265\242\277\2325\255\276\3549\361>$\304\245=\000\3050\273bN:\277\303\352o\277I\355@\277&I\\\277\360\026E\277\356\310\020\277\371\267_\277\231\026\277\275\3746v\276\200A\370:\206\353\210\277\307\330\222\277@\207\376<\227\343\313>7\036\200?\312\201\303>\020T\222?\007\t%?H\327\214>\224k?\277\270\r=>`\204\265\274\330\335#=\244Xn\276\211J\203?\025\205&?\360r\213?j\255\334?\277\346\264?\262Z\222>\000F\365\276tm\t\277\254\252(\277\020h\313>\013\r\003>m\\\376>\320|-\276\213z$?\260H\252?\203z\301?\232\321f?\024\343D>^#\235\275\201\241h?\366ux?\2271\025?\252G\037>\310\177\006\276\320\367\223;,\322\314?\352&\"@<\236\343?%R\275?\360ne>\230\244\317?\266\3012>\200\260\225=\000`\031\267n6\233\277\001&[\277d\014$>\342(\342>H\230P?\274q\227\276\323\317\246\276\324V->\374b\276\277x\0102\276\214\353V\2768\345\371>t\017\227>@\252\322?u\"\212?xT\257>T\341\225?4g\232?X\372C?F\201\257?]\244\000@U?%\277\021\316@?\000\255\r\274\355c.>\224\204;>\340\352\231?\231\n5?\303\306\274>\222\267\\\276\351\"\'?lg\305>k\377\327>bM\300>q\271\251>\224\222\277\276\240\250c\275d%\257\276\000\202A\276*\324\023\275!\204W\276\034|\316\277p\303\372\275$\346\372>`~\034\274\ruy\277\374\266`\277\266p\347\276\230Q\272=\'>\212\277\032\220\237\277\356g9\300\307A\233\277q|6\277\234\215{\277\366\271\373>\357\007}>ck\001\277\211\361\337\277<\304\312\276r\\K\277\\\032\255>\005\233\365\276dH\206>\200\2760\275x\205$\276j \271\276\020W?>\333\2675\276\353\247\202\277\344\334\230?\362\302\r@q\305\005@\300k~>4\367\314\276\315:\004\277\243\233\276\276\230CH=\032{\204?\314\t\343>5\261\205>\367\032m?6\306\226?Ca\210? \022d=~\363\004\277\004\373\022\276\252\256\365\276\006\246\265\277\302S\327\277\260\377\205=\342\271\254\277F\n\254\277\250\200\313=\276bI\277 \350p\275\346K=\277*#:\277\272C\230\277\002\360\233\277\222h\251\277mV\204\277\221J\250\277\014\244\246\277\000/j\277\306\370\240\2769\252\372>\177\367H?\000\014\226\274\270\330!?\014]\303?\262\267\232?\366}:?\350\023&\277\204\2534\277\364\035\313\277\214\364?\277\023\212\226\277\302*\221\277\236\244\013?\010\234\324?\307\310\360?\313\276f?\364\2667\276q\235\013\277J<M\276\240P\301>\336\364U?\303\036\251?\340\252\270\276k\277\352>4\317\307\276\010\376\316\277\346W\354\276;\000\227\2768\275\022\275\224qN>\222\351\224\277\260\357\241\275\314\221\207?z[\325?gh\252\277\266\251\273\277~\372\213\277{\356\362\276n\235*\277x\305\352\275\273s\371\276\330\266M?$\3728\276\254|\260?+\341\214?P\210\255=\007\227\235\276\346\311\035\277\354\231\203\276\030\362\375<\352/\013\276\225)S\2770Q\254\277`@\021\277\3025)\277\035\367l?\236T\341?\357\003\247?\240\223\024\277\202\022\215>\000z\233\276\0328\311\276\244s\004\2770\373\250\275\026Lm=\351\260\353\276\022t\361\276\307\002\206\277\036e$\277@f\342\275~\242\307\276\020O\233>\244}\001\277\020\201\213<f%\256\276\014\367\255\277\360\"\226\275\003\252\035\277\002f\241\276(\252_?\0304\021>\254\375\023?\231\032\367>%\354\262?\237\211\251?\265`\023@\230$\256?\201G\022?0\344_>\300\253\325\276p^6\275\253\276\255>>X\034\277:\356\224>\321\250~\276\027\267\006?4*\306=\217\020\r?\303\034\245\277\337\202\253\277R\307\317\276#\016\216\277N\026x\277\317\237\222\277 \002\035\276b\331\226?\333\372\362\277\370\250\375\276\027<\234\277\270\205\201\277g\r\217\277\337\212Y\277\022!\014\277n\035C\277\335{*?\367\"\222?\236\004\007?\360E\010\277\330\324\036\276\304l\n\277\3728\013\276J6\033?\n\356\014\276$Uo?\354G\230?\006\220\200?\344B\264?#\255\354?\350\310\376?\016;\273?\350\255\322\276\372\323\252\277\037\253\320\277\245\246\315\277\020X\314\277H\346\212\276\300T\221\274D\267U\275\000\233\343>,jB?\370\035\306\275\324\301\225\276.}\263>\026+\035\277\356N\342\277fW\265\277w\241\354\277d\327\335\276\361E\374>@\336\245=@\t1\277\247M\210\277\006\025\261\277\002K\370\277u\010>\277\034\240\322\275_\321\035\277>\207\270\276<\250q\275B\003\200\277VoT\277\330}\362\277\002\354\220\277\323*+\277T\352\261\276\211p\216?\"\321\204?\353\337\006?\022\371]?\254\034-?\220\244\247\276 \307\354? Qj?G\022\335>\330\343O\276\345>\217\276X\344\256>r\354F\276\256\2731\277\320m\312>\\_0?\254J\210>\251\213x?\202\265+?\257E\212>\321[`?\312\225\374?\272\370=@p\220\351?\354\315\004@\31688@0\323\023@\264M\'@\256\235?@\250B\365?\372\301\001@l\342\262?\273z\252?\300rw> \327\014<d)\230\276\010\207\'\277\007R\002?(\265\237?\240\333*@\324\"\'@`\013\225?`@\320?\014\334\216?wB\264?\351\036\256?1)\367?D\203\247?\202\227\251?6\366\245?d\017=?\3177\005@\255/\334?\363l\014?\365R\r?\216\366\310>\"-\225>N\312\274\276\033s\234\277IA3\277F\002\214\277\275\336\344\277\303\336E\277\255\260\037\277W\001\367\276\034\353\217\277\300\203v\274\314\261\265<\337F\002?\342\213\232?\374\262\317?\'\036\356?o\357\372?J\267\277?iV,?A\371Z?\221\223$?\np\311>\3320\036?\336\035q\276\224\202~\277:\264\005\277\'7\221\276y\236a\277\344\236\215\277\022\232\237\277\273-\346\277D\366\251\276:C\301\275\242\307\"?<\207\244>C\024\363\276\364T\301\276\272R\344\276\224\215]\277\305\030K\277\244V\006\276\355\205#\277\t\'\022?\206\317x>F\202\206>\314\211\247\276\374\254\243=\034\022\020>\200\260\376\275p5d\277_\220\023\277\202\212\346\277\200\246\007\300/\036H\277p\322\310\276\nh\270>\231\t\203\277v\340\017\277\360`\355\277N\213\347\277\323\r$\300\205\317\016\300X\006>\277\205PJ\277\203\002E\277<D\033\277y\024Q\277\214\301\337>\263\241\351\276\264\274\330=kuY?<\241D?\020H\372>\2443\275?\217\226\311?Uu\216?\234\263\223?2r\243>G\036<\277X\365\223\277\030\327h\2770\365J=\357\263)?\274\233\021?\200\247u?\355\024\203\277\330p\242\277*\351,\277\304\273\010?\351T\036?\340y\235>\231$x?\204\313\242?\020\350/>\364\304\233\276a\275\214\276x%\r>\200 \277:\373\346\'\276\375\342\023\277\\\016\300\277d\020\016\300\333\301=\300\214\263\346\277j\374\365\277\336\204\025\300b\304(\300\363j\312\277%\232\346\277\032\020\000\300o\267\000\300\236A\026\300\265G\n\300\356\016$\300;e\022\3000\356\267\277\327dV\277v\275\307>v\007\021>\316\235\217\276\311$\'\277\251.\200\277\332@n\277\336\026\212\277\270\021\014>\212\357\217\276\317\222\367\276*@\203>\273rf\277\360\272v=\346\360I\277\232\003\332\277HF+\300\240\256\206\277[<\212\277\312\351\025\300\302f\016\300\032_\022\300\374\307 \300\322s\t\300mh\362\277\246Ut\277\3018\362\277\324|\253\277\247\227g\2770\216\202\277\275\025\236\277\212\361/\277\2149b\277\016\037h?p\332\177?(\375\356\276|o\252=P\330\237\274\026\331\227?\260\3042\276\342\263\254?\204\326H?`j\235\276F\000\321\276H\244\212=\340\016\311>t*]?\335nt\277`\277\241\277\3328\325\277j\2224\277_\270 \277PTm\277\355\333\207\277\320(2\277\303?e?\360\340\032@\257\275\024?:\267\013\276\020\376\340\276\030\344;\277\216\331\260>\264H\025?E\330{?AE\350>\242\253\205?E8\316?\261\213\303?V\311\242?\2205l=P!2\277\344\330\017\277~\017\304\277\022\306\336\277O\354\315\2776\373\n\300T\257\"\300\242\334\371\277\320\236\334\277(\321\000\300hN\301\276\344Z\272?\025\323u?\302\375S\277\002YT\277\210\265\362\277\260\375\245>Z\2511?V\265\326?\336Y\352?\206\333\251?X_\346>\312\022o>\370\027\342<\313\353[\277\364\275\344\276\232\214=>W[h\276\\\273\251\276\312$\270\277\2421\315\276a\340\235\277\215s\222\277+\244t\277&R\225>\341c\241\277/m\000\300\273\274\022\300\276\"\300\277j}~\277\366\272\215\277\3347\234\276\"\342\214\276\374\320\336=\003\215\252>\375\274\220?\014\r\014@;\007\335?\216\373\017@\220Bg?\245e\033@z{\034@p=w?8\202\231=L5D?\304\003\311?\004\026\\?j9\220\276\245Pt?\3626\375?\'a\253?\320\310S\276\346q\337\276\336\270;\276\251\247\324\277\"\026\222\277\372\330\370\277+%\317\277\355q\n\300J\"2\300\373\213\271\277\026u\372\276\200\253y;\366\\\237\277\007\352o\277\264}U?\002\345\306>\342\275\277?\313U\210?H\024K?\260\216\340\276\000Y\314<m\277\200?\325\005\236?\300Z\315?\267\363\377?gB\347?/\275\255?v\023\032@:B\024@\201\217\016@\r\202\253?-K\247?\250&\303\276`\362x<%\330\016>\244d\017\275\177:\270>\332V\212?\220<e?lm_?x\3773?rx\214?iD\037?\344\030\205\275\2223\302?\270\203\224\276\327\254\333?Vy\376?\033\254\313?\300\322g\277\2523#\277\326\222\300\277\343\202\216\277\365s\276\277~\203d\277vR\231\277\356\311 \300\021\335\007\300N\255o\300\251|6\300\273\'7\300R\302$\300\327RB\300j\347g\300\316\316r\300&4\216\277]\311_\277\020\t\215\277\340\343\005=\352mk=}\217\207\2768\363\376>0\333\324\274\000\216\370\272S\203q?\214\260/\276\021.\252?\006\023\320?\033M\264?\326\313\233?\274,o?\212\277\335?\263\367\324?\272\262\227?!b8?.\257??<\337:>Bx\207\277\224\333\267>\344\247\322?\022W\367?\276n\304?\244v\333?\242\355\333?\027;[\277\367\001\270\276P\214\373\276\016\251o\277\221u\322\276\214j\226\275\3061\024\277Q\276\351\276\n\313\"?\014b\363>\275\373\311?H\233J@\252\306\032@\031\\-@\260vm@G:B@v\215/@\206\372\r@\307&\317?\243$\014@I\375\027@\365\263\272?n\365\234?\"\217\241?\020J\262\277T\201e\277F\014\"\277>l\337\2766\303\002\276\022\325\320\276\3409\223<]\235+?\010\0377?\302@x>_\3075?\002\321\321?\000\034_\273\253;\343\275\017\243>?\350m\300?n\363\227?\363\226\r?t\363Y>gw\315>(2\246>X\233?\277\372\016\337>P$\332>}\370E?;i\320?\226\001\207?\345n\353?\277m\001@[\347\375?@\200\373>U!\240>\202\372L>B(\201\276\320\323\021\277rOl\277\'\340\036\277W\361t\277\330\351\021?\341\256\204?\030\307\317?\273\270-?LM\n?\260\307\272?j\374\001@,\373\204@\346\357L@\0133$@\264\031\200?\231|\213?90\272?\347$n?\364\213\r\276<\017\200\276\365kH>\240/\000?^\267>?5\355\270?\376\233\355?*\345\342?\344\375\206?\367l\224?\203y\241?\266\005W?\342\207\214?\010\022\243?\270\351\020@\326L>@\366E\222@\331\272e@\230i\237?5\311$?\365\243\361\277\020\\\332\275\007\002\332\276\000\2553\277\244ti\277\262\2422\277\245$+?\304\252\235=:\323\255\276\217\354S?\371~\345?\013\335v?\036\322\001@\212\325\336?_VC?\026%\031?\305\372\215\276s\262\">\272\036~?Xl\t?\300C[<\270V#\277\300\354\266\277Z \317\277>\220;?{E\r@\212o\310?\317d\267?\001Y\353?\357A\240?\232\305\272>\340\323\252\276D|;\277\nyM\277\350\034\316=0o\334?\254\367\247?j\362\034@\n\360\021@\026\350\375?\276\366\004@\320\250\365?L\363\366?\373\334\317?8G\037@z\310\311?\366\003\365?\225\340\316?R\370\243>\260\250\021?\264\215H\277|/\237\277\240y\002\277\321\362\006\277\364R\221?t\336X>\\\237\342>pJ\211=\241S5?\254\372\032?X\212\231\277\3408Q\275\022\245\364\276\312\362\275\277\236I\224\277\276H\265>\007\326\237?L\345\230?#lJ?f\324)?aem\277\301\335\314\277\306\257\'\276d\001b\277\026q\310\276\016F}\277\354\347\352\276\246\241\214\277\277mv\2775\272\000\300\264*,\277\366\010\377\276\242\354\255\276\306K~\277\211\302\222\277H\271\343\277\274\260\351\277\377<\027\277\270\235\343\2776U\203\277\304\314\027\277\327\347\332\276\230^^\275\025;\"\277\242\277\201\277\020\310M=C\260\227\277We$\277jL\333\277\365Q\276\277R\307{\277R\016D?7U\213>^\362\225>\200\317\330\275\3215\233\276Q3+\277k\333!\277\367\177.\277\244z\223\275g\026\206\277\324\333.>\376\212\243>\220\351\000@\276\200\n@Z\251\033@\254]\271?\240\036\n@\366Y\355?\361\261\303?\326c2?\016b\031?\360\310I>\360^\376>\324\030\013\277f\355\027\300\202\244\336\277\0077\337\277#\327\360\277\240\374\313\277\343&H\277\300\n\331\275\354x\217>\302\007\336\275\265j\037?\224\'\231?8\373\231\277\'\260r\277\200\214\204=r\031\345>\222\267\010\277\303\212o\2774$S\276\300\372\314;\316\0370\277y\377\213\277\350\363M\276\314\272)=5gO\277@\336r=\372\333\272\276h\376j\276D_\255\276\331\367@\276u\375\250\277j\307\251\276I\203\304\277vMS\277\023p\017?\345B\376?\337\303\225?\222\216\343\276I}\204\277\305s\204\277^>R\277B\243\321>PP\300>\001;u\277BT\230\276\'\263\236\277p\251/\277\354\226N\277z\263\242>x%\217?\213+\233?\310\200#?\210\367\356?w\347\031?\375\n\010@yX\304?Ti\215?.\363\031?ozG?$9d?7_\027?\316f\260\277;\177\030\277\022,^\277\304\035\346\276\372h\006\277v\344\314\276=\373\365\277~\265\357>\010\3649\277\000\215\261\2773\364{\277\300\265K\277\270\305o\277\317\017=\277\315\362|\277R\203\024\277\200\342\257= /c>\340\212\014\274?\022{\277xZ2\276\347M/?*\372v?\263\303\231?\210\265\266>\376\341O\276\204im=]\377$?\204\264\226?\030\312\324>\014@V\277,S\202\277\344\305\302\276\256X$\277\206\334;\277\352\243\312\276\355\247\217>\017\221\034?\245\236\033?\303{\351?\232U\204?\003\247\212?\032U\221\276/O\274\277\336)\304\277R\324\357\277`\027\377\277\345\'\317\277\202I1\277\304\247\200>\304\023c\277\3449\351\277\272d\305\277Y9\366\277X5\306\277\311\220\014?\300\276\204?\026)\207?G\"\236?\316\211\276?\023\377\207?{\356!\277U\177\337\277=\021\251\277|\235\310\277\027\224\250\277\370H\316\277E\232\247\277\334a\220\277\207dm\277\036\361z\277Y%\243\277\005\222\n\277 Co\277\223\001)\300d|B\3002\243^\300Ez\'\300\206i/\300\234\235c\277\346QD\277g\273\351\276\350t~=hO\361>\002\335\270>\315\364r\277\240\262\302\277\024\371\010\277(\006f\276\2710\240\277\317\036\265\277?\337i\277<$/\277\304\362a>\222\271\344\276\370\225\025\277l!\317\277P\352w\2760\273\001\277=#\262\277\202`+\277r\372\233\277\320\363\371\276Ma\311\277@.\014\2757-\325\276\232\033\267\2752\376\215\2774\271\030\276*\201]\276\324\263\021\276oA\206?\202\007\\?\250\3021\276vGK\276\330\324\256\277\010c\240\276ql\272\276\366\246\310\277\201\355\261\277\365\310\227\277([\277\277\220\022\264\277\242\361\252\277\353I\364\277\334X&?CS\375>6\036\237\276\223\330\265\276\345B\232\277\200\245_\276f\324\026?\254\211\240>\216xo\277\"S\247\277\000\333j\276\372\025\350\276lD\241?\320\273\002\277\310]\201\277v\240\264\277@\004\337\277G\363b\277H\276\214\277\224xe\276]\215\340\276.\363^>\226\346\254>m\013`?LA\342>\013\027\003@{\212\312\2723\242\245?E\360\221?`sn?\241\306\305?n\322\257?p\353Y\276eM\252\275\341\205-\276\304\375\026?\236\331r?P\274\321\275\304\202\023\277S4m\2765P\222\276\351\276\252\276M\212\201\276k\r\245\2773\302\027\277\000*\225=\202U\035?\306[|\276\201\006\210\276\374\033\322=uE\205\276\030\322\347\275\032N\204\275W\235\204\277\304\316\262\277E\305\344\277(\035\006\276\224\017R>q*\006\277\206sW\277M\235\206\276\340]\323;$\007K?\200\322\034=Y\245\007\276\001 \251\277\226I$\277$\337\320\277>~\212\277j\225\316\277\301\374\027\277p\250 >\274\235\263?\026t\265>\320\007^?\242\372D?}\275\301>\224\321\366\276NX.?\227,\274>\251T\"?0\332<>\200\270\342\276,}l\276N\363.?\226M\203?\177\333\224?\270~a>\243\215\220>\014\001\301\276\010\253\014\277\314\314#\277\257\217\277\277\376\3003\277\016\033\270\277\020\221\t\300\360\212\313\277\264\364\034\300\364p\n?\366\331\021?\370\342P>>\\\240?8e\251?\242\373\213?\266j\221?\377\350\277?\211\271\013?\252\002\200\276JW\254\277\\\361\001?\032\267\362>\222j\003\277S\215\240>vaT?\210\024$\277|w\212\277\201\027\235\2770K)\275\232\344\352>\000z\n\277\304\017\205\276`\363\220\276\010\200\233\276\233-p\276ft\224\277\030\204%>5\210p?\300\322\301?\260\355\320?re[?p\267\007?\205*\211\277\350\264\234\275qn\230\276\013{\222?\020W%\276aF(\277\204\251\017\277\023\231\201>Q\323\377\276x\316\210\275\257!\222?\\\331\364?8\240\263?f\330\013?\177i\306\276\343\376c=\303w^\276J\230\024?\200_Z?r\313\315\276\006\243\242\277\316\215\230\277\214\202\326\276\216\007_\277\366\353\231\277\370\347\252\277\276\340E\277\257\016_\277\\\356\215\277\200L\021\277\332oJ>\272\370\026?\367#w>\326\201\254\276\0328\332>\216\253-\277\211\2707?=\311\006?\300\316/\276,\346\013@\336\374+@\311P\r@\360\245h>\314\351P\276\000\301\307\276\273\002]?w\272\374?\340d\'>\341\220{?\005\200\245?\'\255\355?\"\375\332?\230\302\027\276F\371\222>V\001\207?\301\'\241?\322\372\260?\375\240\031@_E\367?\252\332\256?\304(\002@\263\303\026@\240|\237?x\320\225\276\344\236-?a\024\032\277\312U\243\277\315\374\261\277h9\256>\300\233\016?\031\326\306?\271\333\n@\350q\205?r\206\206?Z#\364\276^\031]>nW\233\276\270R\204<\302\347\217>\312\203\224?x\016\232>\360\247=\277\260\216\333=\014\316\264>\372\227\032?\310\213D?\300w*<a\377\301\277$\233\\\277NC\014\300\356\037<\277\\MI\277(\027\333>\234cZ?E\364\256?xx\033?[\235\360>\005\304\316>E\3000?\177^\323\277T\232\367\277\274\243\203\277\002\363&\277\372D\266\277\2121\344\277\036\004\t\300\006\312-\300\372_A\277\262\255\321>\031s\312?\314;\341?A\314G?\023b\030@iB\002@?\230\327?S\010\337?\300\337\233>f\261;?\250}]>mh\235?\335\313H?\207\301\236>\215\366\376>\213;\245?`\263\217?u\317$\277\375\025\\\277\370\023u\277\357\352\325\2777H\324\277`\035\037\277?\270\'\277r\271\236\276-\346\211\276!\200G\277\205%\213\2770\232p\276\n\304\t?\210\332:?t\\/?rZ\260\2761\254\250\277\240\261\247\275\345\255\264?4\016\t@\241\203\304?\2211\201?\300\n-=*\236\264\276&\365\030\277\374\005!\277\034\207[\277\371\350\023\277.\252*>a\007p\277\275\335\310\276\202\332\'>\346 !?t\341f?[\261\031?\010~\203\277 \334\214<4DK\276\314 \340\276l\266\205?\212\353\313?\214s\356\276\300\232X=\317\363O?Dm\020\277l\237U\277D+\320>\354\300L?hb\213=\026\301\245\276\006\360e\276(\313\271\274\254t;?,\034\333?\362C\333?@~\222?>\331\242?\2068\253?\214\275-?\004\342Z\276\024\340\213\276\354\250w\277\304\372\331\277\201n\227\277L!\007\300\354,\331\277\240\244\371\277\252\206g\277\335,\240\277\366\267F\277\305\3579\277Dr\331\277\021 \223\277\340^\315\277|\025\363\277b\224\352\277\014g\222\277\360{\254\275\2720\023?\270\356\264=/=\236?\300\367$<"
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/normalize_element/component_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 800
              }
              dim {
                size: 24
              }
              dim {
                size: 1
              }
            }
            tensor_content: "\306\226D>\227DO\277\026+\005\277\304\203r\276.\'\246\276\313\'6\276\230\217\024\277\240!\250\277|[H\276\321C`\277\264\317b\2776\010X\277K\220\037\277l\303\315\275\235d\"\277\206\262A\277\005\323S\277\254L\214\277\210\275?\300\272\246\035\300y\365\020\300e\204\370\277\344\242\367\277\331\207\365\277\327}\257\277L\002\201\277\356\036\030\277\326\311&\277\302\211\245>\230P\003\276\327\333\025?\365\252\353>\307X\r?\364\032]?s\364%\277\304\024\250\277\200\016B\277\220\236\030=y\"V\277\355\202\004\277\255\030\235\276$Z\237\277J\353\240\277n%\301\2774\036\023\300\014G\275\277\3066\255\276n\361\021\277\336\212\246\276\014\335\323=.\201\t?\035\021\375>\202qU\277\240\202\256=X\324??j\037\017>\232\277q?` \344=\277\010\272>\200\221\307\275\353\023\020\277\227\326\013\277\320\210\255\277\000\\s\277\026$\221\277\303\255w\277\204Fy\276\210\006\241\277\005]\321\277\214\200\225\277\204W\023\300\203h\037\300\362\211!>\222\376m\276C\207\313\276\212\\{\277\225\357\017\277\326\221\231\276\377b2\277\216s\313\277C\220\003\300\343\373@\277z\234\026?\366\221n?\241\265N?g7\335>\030,\007?\247\354\245?\260\257h>\213f\230?\215\021\033@xx\311?RC\201?\003z9?\317o\201>R\325\377\276\332SR?\017\200[?p\261M=\277J\206?\307\007\002?J!A?L\000\217?\260\242\327>\263\n\016?\300\233\266?2d\366>\360\212\241>,c\310>(\210%\277\344\242\305\275di\221=\037-\213=\360\237\233\274\300\324\005\276?B\315\275w]\253?\004\373\256?\2126~?\026\276\035?\233\032\013?\265\307\025?*\375&>\336\023\021? \377`\274\r\343\r\277\367rP?\256?\341\276\306U7\277p\255\224\277u\235L\277\360\254\342\277i\316\251\277u<k\277Xu\265\277\204\035\371\276\000\232\225\277\314B\">\230<t\276\376;\351\277Y-\340\277\250\250\264>4\331\261>\340\261{?3\2268@&\244_@\311\355\367?B\203??Jru?\302!\217?\216\236\225>\304@\362>kJN\277zR\254\277\201\027}\277U<\332\276z\033\215\277n\250\227\277n\006;\277\n`\213\277\220v\352\277p\034\246\275U\321G?\001\003\272>\326(\036\276kQ\273\277v\020\365\276\363\025\205\277\217,\275>\270\342\250=\234\025\316=\340\035\353\276\220u\202\275\342V1>D[\r?-\235\347>\342\267&?\004D$\276A\214c\277\036\277\222>P>\312?\204\031(@\202\315W@!h)@\316d\020@\370\220\200?\356Op?!\357\217>\006\254S\2774w\243\277|&\262\277\030\360\264\277Z\264\265\276|\300\307\276\"\3317\276|\377\201\276\222\\#?\276\355\303?\244X\026@S\034\244?\234(\310>@\314W=\327\341-?\030cS?\006\273H?\370\361\215?0\363h\275\225\235\333\276\246\261\207\277N\004\246\277\016\371\324\277\000\320\243:\006\261V?\300\273\036@\317B\034@\242-\220?\202\253\222\277<0\313\276\"Fq\277!\276\207\277\221\022\350\276\027\274S\276\310|:>\235\330\316>\302\203\\?\347d\254?e\307\252?\346\260\272?\304 \300>\255>\257>\322\237^?\271\345\001\277\2764p\277\002\336\373\276\357\001\345\276]\243\257>d \223=\036\223\226\276$\302\257\275\310d\220\277\270;\333>\336\326\005?\\\035\254\275\330>\234?\274\320\204?\252\370\216?\327\177\262?%\374=?j\250\213>\360!@\277\236\302d\277GT\'\277W\261\002\277\007\017\330\276VI)?t\365\002?\274\326\017?\305\266\214>%\235\003\276\340\335\206\277q\332\032\277m_\204\277Dr\203\277j\035\213>\036\312\031?\342\333\216?\274f\370?\264\204\220>\200\274N>\017\317\221\2766X\212>\310\027\202>\321a\235\2777D\326\277\020\304\312\277T\367\377\277\207k\320\277;a\330\277\024\246\177\277\230\016\275\276\027\0219\277\245^\'\277h\356\307>\205\225\020>8\335\014\277\034\000f\277\372cD\277>\361\021\276\375\257\000\300\333g\301\277\\R\202\277\370\014\237=\361.@?\034\021Z\276\371\032I\277\324\236P\2770\3255\275\346x?\275\256&\226\276H\375\337\277\351\371\030\300\2142\242\277\3043\333\277\302\247\252\277\350\356>?\247\347/@\017K\007@\352\306\345?.\334C?\206P\313>c\236\314>tL4\277\355\036$@3\254\323?\031\2472?\300\271\362>\212\205j>\205\033\224\277\256|\205\276z\262\313\277n\013P\277\305\243\024\277*\343\234\277\227;q\277\000O\302;\215\200r\276\255\353\223\275\212\217D=\036\020\270\276\204\037\221\277\225\312\034\277\335\213\237>\330B\252>\304\021\373\275\203\301\240\277\200\037\313<\272\303\261\277Q\323\343\277\230\013\355\277\n\026\022\300<]!\300xU1\276\362\322G\277\306O\244\277\273\364\205\277G\004u\277\230,\271\275;\252\233>\254i9>\204\303\027>*~l?\224\347z?\000\246\027?\326\003\306>\344\325\267>@\304e?\316\003\236\277\034fA>^\370\024?\314\031\263\276\307o\014\276\322$\224>\254*N\275\225\337\177\277\302\366\032\277\024M\301?0\250\233?l\200\004@\274\300\260> \252\031\277G\020,\277e\226\005\277,!u\2778p,>\317\366{?M\256\031@M\033\023@\244V8@=\210\236?\021\362\234?Hy\222?\303\027\237?n\366\315? q\236=\033\351\244\277^>\253\277\220\003\215\277\362e\005\277\3408\033\275\030\322^>\346\n\005\277\230x\205\276\366a\273>T\306\277\275\217\022\241\276\334\216\206\277\241\363\325\276\210\013\336\275?\3771\277\321\022\216\277#\261\224\277\342\222\221\276\325\253g\277\351\rm\277\037\373\200\277\366\253\304\276\372o\251\277\263\222g\277L\273)?`\376\230<\3357\266=\" &\277\366\027\265\276\224\207\206\2774\314|\277\304\273O\277\020\247\253=}\357\316\276\267\265\255\276\362{\234\276\235\r\250>Q\033s>A\234\210>?\010\254>\272~\025\277\000\225m\273\021\331\243\276ee\314\276\264\230W\276\2306\234\277\316&\277\277F87\277\342\377$?\002\032\263>\250\'#=\214=\204?0\253\322?\224>\201?\305\254\221?@\016\261>TM\005?\330\267\246>\214\223\363=\260E\303>\302\312\036?xu\217>\002M\222?*\020\035@jr\365?l\035 @\205\201\030@OG\331?\215\272\242?\375\324\274?\000\251\203\273X \244>\036\374\241?\320\231\003\276\\\314\327\276n\027\037\277\031\222\273\2760_\277=\030Y\243?\031\256\223?\224\206\267\276.\261\233>\330hh>\275\320\261>\364\236v?\003\324N?\254\201\226\276\355`\211\277\261,\017\300\374|\300\277X)\322>\3311\317?%P\260?\312\001\237?\254\tv?T\177\030?\013\352\205?\240^y= \1779>q\013\032\277\261\032\314>\267\300V?\213M>?\256\003\003?P\230\005?R\203O?\200Z\350=\345\031\223?\206\025\303?\373\362\260?\320\252\030@\251)\003@\024)#@`\373Q\276\310*O\2772\304I\277n\033~\277\255j\007\300]\220\002\300\251$t\277$!&?`\331v?\t\350\020\277\032CN\276\315\321t?\324\374\303?\242/\026@\250\231\265?\0065\300?\334\272\242>\214Oe?\374Wu\276\327\266\207?\212w\021?x\357x\277\316?\204\277\026\234s\277\277\007U\277X*\314\277\301\204\010\300X\354\240\277\330\n\"\277\220\020\241=E\372%\277d(\207?p\201\217?\215\036\360>\010\"\201=\246\t^?\000\373\035\277\nB<?\326\n5> \223^<t\033\316\2751\242\333=(\336}?\360\034\377?N:\363?\347\267\312?\326e\362?,C\333?\354\224)@\232^\227?vE\202?\324\031\271?x\023d?i\2661?,9\227?\321\306+? SM\276\330\355\247\277\027\361\241\277 \353\304\276\002\3412\277uVd\277\330\3056\277\204\033\037>\316+\031>\024)\210=\212\3458\277\320$6>i; \277\232S\005\277\336(\223\276\334\217\324\276>E+\277j\251\003\277\036\001\237\277\247n+\277\350\205\255\277\rf\214\277*\275\372\276\310\210\263\2775\243\321\277)\206\002\3006\262:\277\0208\313\277J\365\272\277L\262\210\277\374|\250\277\360\337\270\2772V#\277\310~\277>\225\257c? \256\n=[\336\024>^\2536?\001{\324?\366\023\320?W\321\030@\240\223e@\260\344!@\266wE@\231\013o@\360\201\022@8\3465@CH(\2772\327W?\007g\242?\201\347\n@\326\241\020@\2264\020@\300\032F@\216\2621@\223\251\003@S9\252?\020C\341=\300\263\353\276\310~\014\277~j\375\276\256\224d\277\262s\034\277\'\306\256\276\024\363\001?{n\037?T&\306?\"\205\275?\300\342\351\275\263-;\277\026\034\350>\216\372\247?\372p\331?\034Pu?J<\001?\265\275\215?\331\263`?\037g\372?\257\205T@C#\323?p\277\324?\341\312\023@\354\312\256?s\316\252?\334*\330?B\205\300?\024Ob?#`\324?\236\037\275?\3121\234>\\^\222\277\364\034?\277\331S\023?\347%\377?\023\375\025@\3264\014>\255L0?w\247\201?\310\337\271>J\364w>;\346\235?Zw\221>[y8\276\330a\225>)\327\260>@W\036\2753\321\213\277\006\n\263\277\237c\006\277\200^\'\277\332?\376\276\0230\352\277L6K\277P\246\243=\326\242\235?\031V\005@\035\267\274?Z\315\336?,\325y?\020\264\033\276\250\352\201<\355\347\006\277\2261.>\356\021G?&7\210?\354\342i?J\356C?f\362L?=\327\216?\211\241\326>\217?\005\277w4\215\276\022Y\216\277\207\225\035\277\210\237\227=\345\272\354\276\212\027\t?t\304&\277\224$\030>\215\333\247?\254Mk?\353\352V?\317\030\'\277w\235w\277]Z\265\276\236\';\276\334\301\314\276\320S\207\277=\345\247\277T=\"\3002(\010\300\035\023a\277\270\320\271\277\300{\343\277\030&\323\277\257-P\277\240[*\275\303\263\344>\371\364X\277<\237\204\276$N\263=\266\321\025>\025T\226?\204\"->\202R8\277\272\362\261\277a\232O\300\361\340m\276\223c\265\2768UG\277\302\343f\277\023e\005\277\267\361\226\277\000\324\341\277So\201\277\347\267\020\300\032\363\232\277u\221\002\300\364\315\206\276c!.>\224YS\277P3N>\032\311\007?\022\3157?8\334\206=\016\270\346>\3350\265>\354\335G?@\267T=\302\001\347\276I\356K\277\353X\207?\352\310\230?\371F\213?\342o\216?\354\004\000@#\022\r@9\n|?\244t\225?\272\033\212>R\3439\276\321Oj?\"\343b?n\270\035@\002\035a@f\312\205@\201$X@\230\225\341?El\007@\360\033\327=^8\337=+U\026>+v\342>\370\304\316>\200^<\273B\034\206\276FN\241=\005\316\346\276\215\220\357>f\006J?t\013m?\203\304Y?@\336x\276\261\014\224\277\376\257\203\277`\303\214\277\272\353\013\300D_3\300\312\211 \300&3\005\300\300\301\222\277\004!X\277\3343}>\260\2369?H\254\344>r\021=?\333H\306?\214\034\336?\200\210\003?/z\225=\t8\021\2766\006B\277\200\006r\277\376\370q\277\204H\203\277\304>\020\276\254,r\277\003\260\252\276<\256x\277P\320;\276\"\276\253?W:\234?\250\203\242?\303\036\020?-&\226\276\330\205\230\275&\211\027\276\017\373\226\277\250 >\277z\002\240\277L\313\250\277\301\035\246\277N\221\312\2776\233f\2770\032A\277\310\024\233>h\361\n=\340\203V>\273bV?\032\nO?\252\224>?\336\237\274?\251\202\256?\314\325b>>Bq=\317z\217\2776\204\374\276\247\266\274\277\226\3034\277\000Xy:[\316\355\275JM\305>\017\272\"?~\352\261?\"\225/?\034\276\256>\\.d\276\250\022\332?p2\333?\366c\235?\341g\024@@\226\n@\022\0367@j\203\366?D2\005@\322\010\231?\252x\307?<2U?}\214,?(\234J>\345a\267>\351\372/?k\225\212>YT0?\267\2141?\260\347\260>\217\211(?\200\363\"\275\376\215i?\274:\033?\2443k>\370\016\212\276\200Q^\276*\352\364=\035v\211\276X\247Y\276\340\347\035\277(}y\277\004\377\005\276 \n!\277&\250\230\277\312C\217\276\337\036n?Z\316{?\224\245|?\363\357$?W<$\2772\343v\277^\210\206\277\033\021\030?\346\235\271\276 \224*<\017\366\251?@\027\217=\n\220$\277\315\274\024?\252\033K>\315\242\013?p\013B\275\363b\317?<t\035@\240z+@\032z\r@[\272\346?\242h\013@\324\216\354?\301e8?\t\r\211?\315\315\n@\016\203\274?\240Y\324?\201\215\255?x\024I?\027l]?>q\212?l\314T?\376\276l>\372x\303>\022\326E\276n\030\243\277\020\214K\277 ]\263<ci)?\236\253\217?2m0?\020\251\214=6[\267\275\021b\324=\2063\260>\010{)\277\356\2722?$ \007\276\342\007Y>\n\373\237>\260\214\037=/\344|?\205\354\362>\014e\266?\273E\212?\336\206\016?IP\373\276\256m\253?\240\331\350\275\201\354p=\2167L>z\360\212?\342\363\027?p9&>1k\370?\363\214\213?\267\214$?\254\214b>\365\215\332>\031\3754?\3061\321?\351\231j?N\013\034?Q\262\327?\244\255\266?^=\347>p\350;?\020\364\206=Lx\265>\337\001t?\000\225n?\250EW\276{R\277\275\242\236\005@\304\356=?\350Q*?\016~\330\276\333M\264\277\315\004\223\277d^\317\276\2304\022\2771\320\003?5\343+?L\026\311\276\31438?\340\025\231?\342k\316>):+?\314\347\202>\322\312\227?\200k\345>\350=`?\306\345\267?t\007\261?8\353\010@\202e\206?>\272\216>\350\374\210\277\267\033\206\2775\002K\277\301\033\216\276\274U\243>K1x>\026\250\271>@\023\232?\014\030\353>\000\020j\2731\254Y\276\224\025\211?\276`\245>\320\215X\277n\267\250\277\256\323\301\277\210\371\017\276`\205\n\277`\243\013=\246G1\277\306\317\226?|?@?@)\312?\264X\021@x\200\202\276v\375/?BgC>\263`r\276P^p\277\2603<\275H%\320>h>\273\275nz\204\277\334\252\004>\346\336\201=\377\241\227>L\352\000?\311\017G?\237*\003?]\310\313\276\000\016\022\300\0101?\3008\2545\300`\010\001\300@\370\271\277\252\240\223\276\004:\014\277<\242T\277\3168\n@\035I\261?\006l @\336C\206?H\036\207?\216p\331?*[\013@\022\005W@r\306H@\356\225\312?<G4?P,\240\276^\230\263\277\270\355\270\277\345\317\026\300,\333\003\300\213(\017\300\362\230\336\277\270\257\221\276&\267#?\276\006\031>x/\026\277M\n\234?\370\211\235?\276\032\212?pY\314?\002\301\354?N\347\241?Q\221\301?4r\243?\222\332\013@\227~\315?\n\341\253>\306\325\203>+\240\001\276\315\362\327>P\001\243>\356\375\334?\354\003\217?\036\330X?\332\177\357>\354\316\225?\177\220\261?K\224)@\264\206=@_E\201?\007\317\n?B\277\277>\006\323\351\277&\333\024\300\nW\331\277\240\200\001\300\213B\363\277\252\031\216\277\324Qy>\314?8\2778\265\257\277\300\272\213\274@5\t\277\234\002\006?6\271\031\276\003\272\246\276\250&\267\276\000s\037\275%\325F\277\222?Z\277zp\000\3001\370*\300\276\2038\277\337c(\277\235\211\034\277\266|~?\310\361\341\276KX)\277\243\342\'\277N\271 \277\244\375\374\275R&7?\034\034\005@\311\270\232?4\345\211>\221\371M\277Wc\301\276\351\322/\277F\275 \277\000t\344;\276\227Q?\t\3212?\\\371\001?\322\207\002?l\251\310>\212\006\215\277\030\261\353\277S\302\010\300\226\021~\277\200\001\004\300\330=\326\273m\363\271>\352\026\345\276\206B0?\372\327\024@\002\360\270?n\362\316?\036u\027@I\335 @|:\244?\002p\222?j\256\321?(+\264?\tw\370?\r=p?Z\223\373>\354U\201=\010\324\240\276TR\353=\211;\362=\372\315q\275\337\022\266\276\350\013\260\275\375\316\241\277H\341\271\276D\036\226>pb\260\276@\001\214\277\0366F\277\310v\261\275\252\2315=D\016\251>\372\311Y?\201\303b?\326\316\277?9\027\370?\376\034\376?\246\260\324?\340\261\260>p9`\275\322\341A>x\262\203?X\201\300\275\340\311\260\276\277\314\246\276\314hV?\352g;\2770\006F\276\320\310\310\277\307\210\206\277\354\217\235\277f\264\276\277\r\305\017\277=\200\244\277\210g\352\275\311\340\316\276ih\267\276d\026\350\277\000\356\305\277\034F\325\276\334o\243\275,\274\003\276\036\310\"?\213\036\202\277\226\256\367\277\037Y\307\277\250\261:\277*\205!\277OME\277\021\264\230\277\353\244\023\277\206\374\213\277\350\024\256\275\331,\017\277\234\001\304\277 ~T\276y\017\213?\312\313\002?\036\355\025\277\373\350v\276\312\270\n?w\356^>/\223l\276:\007^\276%\207\316\277}G\336\277\312\361\302\277\3075\030\300\0325\371\277\177\204\276\277\340e\027\276\320\3743\277|\342\026\276J\220=>\214y\006@Do\236?\327\026\371\277RG\266\277\026\335\007\300\000\377\251\276\026Sp\276\237\277:\276\314\306\206\276P%\210\276\321\333]\277:\002\003\300\026}(\300\034\302\t\300.\213\010\300\260\311\220\277@%*\277\224\272\311\277\036\203R\277z\004\326>D.\234?\370\005\204?\316\3313\277\020\240o>\013\223:>\006\3145>\344\372^?*@\016?.\252\003\277\244J\227=Rj\026?\022\364\020@\'\337\352?\320\337\340?\363\2641?\232_\"\277$>k>\320SE\274\020\032-\277\200\351\261\276\343\016\225\277\035\036\341\277\200\374\324\277\032\342e\277|6\n\276L\246\035?\250NS?\233\246J?\344\267u>\334\222\205\276\005\032e>\023 g?\262\005\221?\314\335/?@\326\326\274\0052\263>$\300Z\277$\251Z\277\r+e\277\2344\t\277\240\027R\276(\317\303\276\352\022K\277\210~\002\276/\274\351\276\0330(\277\260|\213\277\327(w\277p\334q>Q\344\226?\264\343+?\267\205$\277\364\212\255\276\344\342\016\277\014!Y\277(=\332\277\245\304\004\300\365C\301\277$\351\365\277\243\210\013\300\236\002\227\277\024y\351\277b\346\000\300\tp\023\300Zb1\300H\361\243\277\036s\231\277\225y\211\277\220\003/\277\203eT\277\024\271\366\276\216\320\027>\034\236 >uU,\276=\226\000\277\016\267z\277\223A\201\277\370\314\331\276\234\003\232>\223\2547?\300\350\227\274\214\327\023\276C\251\261=\244\3113\2765\332.\277\233=\207\276\305$\363\276\003{\372\277\364\343\255\277\254\272\227\277^*\365\276B\220s?`N=?*\266\375>\004\033G\276\026\364O\2779W\006?\225\001\364>\340\330\305<\002\311\034>\020n\207?\300\363\207\276A\323c?\026}\244\277\214W\316\277\244\210a\277\036\221\005\277\257NN\277\370\345\351\276\"8h\277{Zi\277^\302\261>{ul?<\321V?\200\t\362\275\356\201\002?3\376,?\320R\330?M\022\352?tE\210?(\250\362=1\341g>\nB\254\276m\215\237\277\252l\212\277>\273\001\277-\225\007@#2\016@\323\252\005@\222t.@}\366\020@\351|\327?o\301\013@X\246\365>pN\037?Lo\304> \224J>\342\343U?|k\320?\240$9>\213\350\032\277\022\324\366>\212hK\276\347\226/\277\220\310\'\276\254\262\005\277\356\260J\277\350\377\030\277#\365\250\277\316k\025\300\301\305\271\277\261%n\277\032C\267\277\030V\264\277g\210\211\277*w\310\277\237*\240\277\341\323e\277\342\213\226\277\220\221j\277b\025\033\277\004\n\355\277\017\264\231\277\001\317\233\277Ro\274\277^fi\277\302\240\r\277\214\360\223\277\327\217\022\300\200\005\223\277\2063\341\277\034\335\024\300a\245.\300$\014M\300\304W\362?\207\031\n@\374\275\022@.\026\243?\013@\003?x\220\223\275s\224\236\277\340t\007=\316;\037\276\250p\235\277<$#>_*\207?L\375\021?*y|\276\310\'\031\277\255\352\236>\212\372\201?P\322\337?\317\330z?\004~\270?\326\336D?\010\345\027?\211\342\320>\016\200F?\020\234C\277\232\346I\277\000\361\206\277\213\310\361\277\231>\215\277l\374)\277\332h\303>\266\351\250?f\265\332?\311(\'?&uk?\230\035\315\276:\215\265\276\344\035d>\264\263:?\254\034.?RCi?\007\334P?\004\276\037>\362\020\222?\300h\027>\202\030e>\343\337#?Q\325R\277\360!\260\274q\276\232\277\300*\220\277^\027v\277\242Q\254>\024\244\376>H-7?\201\247\003?6\233(?\252\'\232?\305\267\366?AS\327?\251#\255?V\211\262?\354\232\334\276\230:%\277f\344Y\277\325A`\277\366\223\337\277\262\2108\277\"\317\236\277\306\021\216\277\003\222a\277\327{\016\2770\365\363?\221u\224?0Z{?\320\rx?\3465\365\276I\340\256>Fq\226=\371\r\363?\344\357\221?\214\236\217>\365D\247?\010\331\372>\316\364:?V\304\247\276\\.\305=\371\315\350>)\314\362?\010\013\206?\274\341\202?\370`\r?\266\206\n?\030<!?\261\237-?\304Il?R\003Z\277&|a\277\370<\353\276V\371\253\276A\371\255\277\030\024\003\300\373\243Z\277g\276\"\277\274\241\275>\263\014\007?\352 \302\276 1O?\260^\336?tA\221\276d\225\030?\350\004\250=J<\023\276\350\036\037\277\234;\226>\230o\243\277d\337\220\277\307CU\277\2108\341\275\216\275\373>\n\301i?\302\023\202?U\020@?\273\373\304?N\t\224?R\246\325?\357Y\354?\007I\007@L/\\? \316\207\274Y\256D\277\256\243\360\276{\334\004\277\2646\276\276\331\213\261>?\007\317\276\235W\004?\225\263\355>0\213\265=O(q\277H\344P>\367\365K\276\032\3315>L\373\316>CY\300?0\262\341=\024\037O?P\233\376>)}\313\276#\365\377>\353\013$>\260{&\277\276\220\205\277\013\241\206\277l]s?\020\200\262?\316\316j?\230\327\301=@M\360;}\212\202\277I~\\\277\000M*<\202\243\005?b\333\242?\030\306\310?\226\021\234?R\245^?\315\347\304>\373\337\271\277\330\266F\277PJ\305\277n=\236\276\330\373\302\276\214\"\361\276\376\024\312>\244\361\377>\\\2042\277\334\003\224\2770\215\257>f\305\020\277&\366\374\276\204A|\277\237l\217\277\315\320\227\277\035x\253\277\237\340\265\277\222\377\372\277\214!\325\277p\251\345\277]\271\355\277\200\324\016\277\257\245\321\276\032\336\237\2778P\255\277\000\234\026\300>0\316\277\267\215w\277\355\232\210\277E\005\364\276:#?\277\'\325\365\276\232\223:\2776\275\262\277K\035\036\277\033\367\242?\210\033\010\276\225\006<?a\001\177\277\334K\204\277\220@t\275/\214\256>\362\223\213>\205#!?\312\000\367?<H\200?~%\223?\203K\215\277\n\311U\277\212\362\352\276\244\315\224\276\356\013H\277=\227\030?\234)A? \345\017>\020\373\025\276\265 \030\276\210\202\301?\342\353\301?L\030\257>\3245\364\275xz\344?F\207\234?c\334!?u\312x?,\200\364\276\352$\003\276\272\003\340>\354\312\241?\276v\221?\020\312L=\311 \226?\231\000\304?aV\316?\006\371R?Z\331C>\355\314\331\276z\031)\277\247\310\002\277*yJ\277N\264K\277\236\177u\276\250\244\020=\315\002V?:Q\332\276\200*\004\277\260A\213\275\024DT>X\310\273\276\236S\202\277\022v4\277\370\351\225>\316+\007\277\303\177\235>=c\335?Y\031\336\277G\306\320\277nd3\300\302\226\'\300XIO\300\374\271P\300m\"\020\300D\246I\277\274\255\352\277(\256\314\277`\351\014\276\2316\272=\303\226\326>\301\361\340?\020\234$@|\204\242?pc\324?I\264\215?\277`\224?\030\022\266?1k\354?\206`*@\302\267\335?\365P\013@`)~<\272{\215\277\340\234\306\277\021\017r\277\003\347\344\276^\253\252\277\266\243\213\277\342\373\311\277\274\345_\277\220!->B4\373\276?\265\211\277\205\\\234\277\270lu\277\220\302\335\277\256\264\342\2771F\251\277\320k[\277\261\251a\277\004l\353\276Bq\232>\362P\222\276\024\023\212\2760K\361\274\326\207\321?@\035\202?$\243\"@~\r\031@s\226\002@\260\337\373>\372B\310\276\\%h\277Oi\357\276*\001@?\366\307 \277\302\307W\277\000\314\256\2727Hh\276\016\317\233>\274\030_>\374\351\226>,\177&?U\355+?\204\326\232=\2169R=\330L2\276\030\262z\276\020R??\236Q\313\277\215\t\310\277-\345\361\277\265\263\243\277\311\341>\277aX-\277T\274\322\276\314\300\006\277\365\257M\277ZA\351\277 \322\242\276\3509,\277:X\210\277ZM\262\277\025I\260\277Ld\243\277$\321\324\277\271\247\345\277O\357\006\300\204y\026\277\034=\324\277\007l\247\277\320\320\003\300\322Y\310\277^y\313\277\360\245\326>\217\322\203\276~\025\254\277\342\016\207\276\344\2657\277\312\247N\277\000\316x\274\242!\014?\210D\325\276rGI\276\277\316\013\277\252A\260\277R\352\274\277v\024\346\277\271\252\321\277\360\235\013\277pA\026\276\327\r\001?\327\372\365>\251\017\210\277\020\202\353=\276{\017?\227h\241?\234\305~\276\247?\246\277\020}\314\276\2479\021\277\333\237\206\277\363+j\277\332b\215\277\370PE\277a\277\326\276\272\351\354\277\265\220\271\277\260:\237\275\022Vp\276f|\020\277\tR\205\277\207\\\024\300l7\352\276\370\211v>\016\215\002>\301\311\n?\022\215\272?\214\362\323\276\262\'\220\277R\342\002\277DHk\2772^Q\277X\177\203\277\273y\230?P}>?\264v\220\276\020\035\265\275\232\037\231\277C`$\277\376\255\253\277\200\254P>\304\240\016>\266\336\326?\366\370\023?A.\006?\327O\341>\276\031{>,\253\237>cp1?V\307\353\276I\0131\277\334$\333\277\354\221\233\277\032!\252\277#\330\250\277\350X\340\277g\0313\300BP\022\300/\335\215\277\020\326\"\277\240\366}\275\335\0276>\327\222\303>\313\352\204\277U\332\213\277\360\216\t\276g;\215>\245\371\207>RB\365\275\313\245\256\2774{\334\276\335\210\322\277j\3629\277^,\032\277\313\223\271\277\177?\320\277\001\032\201\277\240\',>\214;\216\276,\323t\277\312(\244\277\356\035\246\277\200\177\016\274\375\322\214?\020]\"=\250\200\344=\203}?=\017\327\033?\322\215\251?q.\260?\020\365\014>\362I\373>\000\306\315\274nc\221?B\032\363?|3L@\361\206f@\216\323\372?k\034\370?vTA?\267\251\026?\334\222\254=\022\250\036?\304\242\215\275K\010\343\274|\221\344>\374\030\356>\311ZV>\017f\271>\266\267(?\022\017\343?`\201\227?I\265j?\237\372!?\334\017K?F\345j?s\337\246?\022Y\336?.\022\246?AQ\320?L\254\357?\032X\255?\374\213\336>J\364\274>\354\255R?H\274\007\276\004o\035@q\375\321?\241*\316?o\323\226?\315\345U\2776\366\320\277\222\206r\277F\004\264\277\350\271\201\277-@\222\277&\231\r\277\366\020\214\276\261T\227\277\3540\231\276\306\331\227\276\006\006\005\277s\216\303\276\000\212P<\031bb?C\376\016\277\017)\317\2762\316\007?\240s\026\276\033\232\230\277\343\261Q?@Q\246=\027\204]\277j\262\232\277\347O\n\277\374\253\214=Y\013\254\276,\216s>U\023b?FQ\244>B\216g\276\263\236I>\360)&\275\361\301\262>\372J\334>\030\206\\\277\354\0349\300\317hS\300\037@\005\300,M\207\27724\313\276\'\247^\277\014\304t\277\357u\017\277\221\343\274>|\3023?\242\257\201?\000K\272?\230\372o?MV\007@\2643\314?p\310\357?\342\220\376?2. ?6\301\202>\210R\311\274\306\322\376\276\010\325`\277R\364\216\277\316{5\277\'t\246\277l\2066\277\200\'\367;\372\362\312>O\003\235>\341O]?=\364)?\032w.?\3214\317\277\346\367\336\277\224\256O\277*\375\324\2778F\022\300\030I\356\277]\305\330\277\000p\014\300(\246G\277\344\'\372>\010\016O\276\262\r\001?\256/(?8C\252\276\216\272\244\275\027pf\275\265#a>\304a\270\276\271\2775?V%W>\245\010\'\276\016\262C>Z\305z=\237\303\236\277\355\360$\277\232l\306>>a\022>\265\364\343>\275FY\277zP\230\277\r\253)\277\366\3430\276\207\023`?A\324\304?\205>A?\210Z<>\244\211\321>\000wW\275\024\001\304\275\312\307\313\276\020Lj\275\264\341=?\370\241k?\300\031\022\276#\244\346\275\322\3226=\372\321\242\274D\010\035=\232\037\341>V\026\032?\346#O?n\274{?\177>\013?\267\036b>\022\021/?\245E[?\334\374\336?]\346O?\376\362\343?Vr/?\330}\301?:\031\364>h\202\255?2o\331?\013ek?ZB\022?\032\243\241?{M\241?\307\200\277?\014l\206?\210\270\366?\202,\267?D~\216?\331\362[?\374\256\213?\226:v?#\370-?\375\205\016\277\357v\265>I\222\017?\247\250\n?\237\034\223\276\036\306\014\300\343\244E\300\360\201\346\277\314@\206\276\232K\255?\214\323;>\307bN?\r\035=?OoC?\346M\177?\207\026@?\236\362%?I\034\020?r\304F?\353\331\305?\370\205G?h\3242?eZ>\277\352\241\277\277\246\276\n\277\341\202\254\277\370@\373\276\340,8\277TI\264\276\350nA=\330!V?\2461o?fY\226?\275\375\234?;\322\363?\"b\246?\271\013o?\271\221\322>4C\331>\232\370\355=\336\343\317\276\376o!\277I\233\307\276\354>B\276$\203\220>2\177\372>\360G ?\372\244\344\276\220\332\232\277\3222\020\300l\3026\300(\264q\300z\'>\3006,*\300|1b\300xb_\300B\2757\300\001\2533\300\216\306\"\300\354\362\022\300\006\265\r\300\256\211\016\300\217\020\n\300\220\314\375\2777\356\277\277\000w\351\277){\264\277|of?\341\2663?\203\225\214?\350\371\026\276%&\020>\312WG\275\242\274\214\276\330\027m\277\356\033\353\277\276\305\"\300\260n \300*\327\314\277XQ\030\277\200\372\000=\315\r.?\340\226\317\274\333\036\243\276a\014\226\276`\030\361\276aC\225>\230\211`?h7\362?l\365\276?&\350\217?\316\201h?\352\023\212>\035\325\212>\366\204J?\034\327Z?ew]\277\022#\212\277\235\t\206\27721L\277ve\212\277c\275\217\277\n\315f\277\360\310l?_S,?\355v\251?,\025{?/\303:?@\\\376>^\376b\277\006\277\315\277\366\203\007\3008\024\304\277\235\232\245\277\225\221\256\277\310\020\212\276\200@\314;X\333$\277\211\330+\277&m\274\276\000^%\275@].?$\363\315?\315\021\'?\0023a>\000\006\254>\256$o>{\027\016?\027Y\306\276B\0345?\264u\"\277\036W^\276\236\341\327\276/[\245>N\217\034\276\217S\037\276\001\025_\277\352Q\360\277,\035\301\277,\224\355\276^u\267\277l\336\224\277u\231\035\300\276+/\277\222Z\224\276\222\256\230=2\036<?\213K\247?aT\245?\304\310O>\304,\331>\340\347+\274\226\177\211\277\213\207\270\277^!\002\300\274\333\020\300\217\220\223\277\333\035\224\277\277\205\233\277H\200\217\277\034\202c\276\350\322z\277t\316\021\300\212}T>i,t?\217\361\240?\236\253n?Z\300\203?`\006\270>e0\203\276x\275E>*8??\204\370\226\276\332\207x\276\220(\354\274ys\234?\222\307\016?\306L\\?\260NT?,\320\352?Q\223\002@f\275\"@\007\324\014@\205\303\032@al\022@\030\311\371?\270(\"@\026\"\260?a\364\221?K\362\223?\314\366\272>z\225\007?{\360\007?+\177\274>\312X!\277\000\230\031=\207S\210>~2\323>\264{\342?\213i\023@\305\251 @\372\303\013@\312\240\007@\365\222\373?N\210\366?\306\016\024@\311\317\365?\300\217J@=?\032@\362\256\025@:=\010@\026;\251\277Y\312\223\277\303\342\200\277?p\203\277\310:\246\275\337O\334?\216\034=?\224$\346>r\010\014\277\232\013W\277\340\217\304\275\356~*\277|\335]>?\344\253>\033\266f?\327\3072?\3026\343>\210!\206?r\230\263?\271\250\260?\030(\371>\227\257\r?d\216\304>\376]\023\2773\"\372\277\361\321\272\277N\236\230\277m4\203\277\320\273\023\277\030\002\304\276\000K\311\272\261GM?M\251\t@u\226T@Z\235x@\010b6@\223\320\333?\336y\023@\200K&@\016\014\003@\322\244\013@yw\230?n\231\020@#\234$@\3704Y>v\2679?^\220P?\027Z\265>@\242\313>\341\333\357?$F\223?9I\371>-\303`>\220Gd>\213?t?\331\246\206?\027\333D?!\357\342>h\005E?\341e\235?\017\260\373>\300\376\226?|\201m>SS\225?\014Z\210?J\2320?\260\370J\275\263\346y\277NU\215\277v\r\023\277\371ks\277@\031-\300\250y\023>\315:\264?\222\272\263?\226\003\220?\230tH?\216B\270>\0007\255?c\254A?\210*\316=\247\226\207>Y]\364=\356\265\257\276\253^\206\277\210\022\200\277\360\2350\277\004\225\220?\004\3568\276\360\212\263\276>\342\037\276\231\260\013?\312\325\217>\272@\325=H\256&\274\220\257\232\275\261\001\272>O\354\210\276p\346I\277z\351D\277tsP\277\230\260\236\276\204\017\217\27786J\277>2d\277\264\031\277>\326b\272=\3166\005\277\251`C\277\354\006\211\277\010\031a\277%\326a\277\376\316\303\277\370~@\276\374\277\320>8\222x\275\267\233\273\2764\306\276>\206\222:?\253rQ?\3408\322\273\260A\000\276x\375\341\277\270\010\276\277\356\243\026\277Q\355+?\240\347\214?\310\270\025\276\221\324t\277\266\370\252\277\366\265\013\300\365m\304\277U\325\255\277\302\256\264\277@\034\325\277\372jL\2774\254S>\230}o\27756,\277\014\304\353\277.\214\"\300B\024\236\277X#\005\300F\250\007\277\342\241)?\347\267\223>\264(\212?@Ct\275_\027\204\277G\214\r\277^\243\r>\270\"]?\263\275B?\356P\255>M\360\222\276{\217\367\275\r\353\004?\242*\240?\242\324\250?\200Nm?\220%\355?\351\336\306?|\253\343??\036\276?\237\227\031?\310\212\273>\030\3553\277\363\312\260\277\336\235\034?U\322\244?\310\213\314=\361h,?\330\331\326?\253\345\267?$\tW?|]\027\276%\021\300\277H\334\316\277\000}\177\275@\010\325?\302\374\374>rl%?Q\354\350?|\300\033@\235\344\322?\034\016\360>\232\305W?\320\241\237=\003=\247>\312\251s\276\223t\006>k\210\334>M\274-@T@D@\032\366\013?\020\330M>\234\361\261?r\237 ?M\013\031\277\374Ik>\022\263\022?\320\024\371\274\357/\241\277\252\266\027\277\000`\033:\255\266]\277\226d\213\277\300O\255\277]\034\350\277::\365\276\234\240P?\256v,?|\206=\276p\003V=\334\346q\274d\203\022>\214S\244\277\200\263\215\275\276\205\200\277]\265\247\276\320\233\242\274\373B\330\276hjF\275\246\373\213=I\347\"?v\362\250\277\204r\357\276\377w\221\277\304G\331\277\032)*\300\300\213#\300\216\306u\277V\242N\277c$\207\2770\"\232\277&ox\277=.\361\2773\252\220\277\246\323\250\277\302?+\277 U\332<\222rO?\020.I?\300l8<\306\021\274=\3513Q?\300\342\t>\010\323\262\275\332\336\024\277\222G\027>Dw-\277\324\235]>\257\340\246\277\347Z\321\277\r\222\245\277\300\326\311\277\270\nN\2762\352\215\276jy\277\275f\332\366>\324\244f?\264\030d>\202Y*?A0\007?\200:\267\273\316\2108\277\027\224\210\277\030w\321\277\360\202\203=\344eB=F\302\212\277\214\302\225\277\014\362\275\277$\301/\300\003@\364\277Uu\330\277\034\253D\277\220\371-?~U\257>\337\213\313?\277\232\000?VK\307>\030\324\301>\270W\207?\335\005_?\320A\245\275D\246\323\275(]\005\277X\331\354=\330\373\200\2766h$\276\310q?\277L\377\225?\322V\305>\341D\313\276\252|\221\276\202\024\334\276N\2728\277J\036\200\276-\230\\\276\336rg\277\264S\007\300\315@\004\300]^\350\277\230\272\017\2775\210\343\276\317\230\376>\033\371\265>\206K\017?\332\255v\277\333Z\334\276\335o\031\277&)\273\277\\\032:\277;\335=\277\3423\021\277 \025\217\277z\376\343\277\251\001\307\277\000h\340\277\r\265\257\277t\025\030\3002\230\311\277-\365\307\277F\321\351\277\000\371\345\276\302\246v?nhR?\024\032\357?{\241K?\206W&?\224\212~>\352\030\241\277F.\203\277\217\021Q\277\331x#?\027\"\211\276>;\210?\374@\010?7\323\213\27678\213\276Vb\222>\366D|?\256\'\310?\375\212\320?\264\302\203>\206\304\207>Aiq?\374!\357?\316V\262?\356\233\302?\037\371\005@\200\007%@]&\340?\343\243\233?@\2222\276\022\233\376>]\001&\277\300\216\317\277|\245\341\277_k\026\277\250;^?\030-\366?\200\013\345?\217R\025@\370\2647@V:\t@\253\034\277?\014\360\237?\343xg?\276G\256\276~\365\333\276\315\222\263\277h\251\026\277\350\302P=n\023S>\324\227$?\326\212\323>\302\373\201?l\341\247?\272\267>?\342\211\333>\177q\r>w\0165\277r\001\330?\n\317{?M\206\262?\241\302\255?\220\022\350?`u\357>vIK?\304\224_?\207{\210?\264\341\357?\347g\356?}\373&@\003 \272?\201\325\375?b\325\212?\214\210\252?\210\311I?\264\271\201\277\206\017\261>W\347\305?\334\372\205?\006x\264?\n\301\306?N\372\334>\352\330\347\276\237\323\365\276Z:\004\277|E.\276\263T\341>\227\023\361\276\2779\274\276\250\2170\275\247\236\000?\364\347f\2773m\213\277\330u\001\276\270\252\372\276(i\003\275\2772\001=^\032\350>\016c\342>\252\271\254>\254j\275\276\243\"\243\277\240\247>\277\001Y\265?\005\311\257?\220\200\221\275\236gE\277mo\216\276\237\362\001\277P\261\301\274j\t\225>\253\363)>R\275\346\276\000_;=x\324\014\277=\020\222\277\200\r\003\275 \006\210\2761ZK\276\"e\025\275\"Y\352>H\275\036?\236\307\'\276\253\3313\277\036\\N\277^\273\205\276\374f]\275\206\353\257=1\326\375\277\350\2377\276j\252\253\276\322x/\277\034A\306\276`)\272<j\206b=S\013]?\323\327\337>\357\364\275?\271\363\264?\214:e>\204\375!?\340\261A<?\225\212>c\313\237>\0042;?P\037\002@\002\324U?\204\205J?}\376\305?Pg)@\026\210\274?\206\245\270?n\237\216?\370\255\205=\261\266\300\277\213_\"\277\371\3157?:\221\006>,`\372>\364f\021\276\227\376*?\230#\261>\211N\227?\322V\004@\271\350\300?\005c\t@\004Z\310>S\217\213>hKO?\232\203\312?\210F\315?TW\352>\274\230\370\276\'v\211\276\317\2031>\376\367\204\275\317uT?\n\032,?#u\316\277X\275\225\277\375E\316\277\\\224\205\277\\\265\300\2760\240Q\277\335\271I\277\212-\222\277\301\361\223\2775D\343\276\005\361 \277\254-x\277\205\365\035\277\352@\220\277\334\350\225\277\265\366*\277\000\"]\277\326:\024\277\327\326\274\277\002ZQ\277\333\"\005\277\241gm?\347\262\311?/\352\001@\304\262\276\277\354\027\022\277\263jg\276/\323\016\277\\\254\232\277\224l\253\277x\347\311\277VB\000\300]\225\255\277\366\232\303\276*\007\300>\334\264\203\277\370\002R>Ks\265>\220\350\003>,\026r>\020\330E?X\026\326=+ +\277\221\036-\277\343c\312\276j\026\250\276Tw\004?\360G\001?\213e\271\277:\341\254\277\372\tX\277\306\340\253\277\270\030>\277\212\300\240\276\2207\322\276\265B\256\277R1\310\277\311\376\"\300\342\215 \300\2007\261\277\202K\353\276P\250(=\276[\205=\330\305/?\211\234,?8\271\212\277\342h\023\300\365\2141\300}\206@\300N\017\256\277\"q)\277zs\252\277\300\363F=\250\200\223;\232\315\240\276\266\217e\277\300\022w\276\242\277\273\276\356\251\341\277\224\030@\277\276\207\240\277\001\325L\277:Rj\277\210\030\213\275S\331\261\276\250g\230\277M\267\005\3000\371\304\275\322(\030\277\226\006\347\277D\221\214\277\023\200T\277\372?y\277\314 \236>\246}\264?\0206x?\316\263\016\277^Yt>\356-\032\277\256\025f\276\006;\030\277\233\2234\277\224>\202\277\310\313\204>p\233\314>\2763!?fC1\277&G\213\277w\372\316\277r\300\347\277\327\277\300\277\332\263\240\277\372\334g\277\372\340q\277\320\'U\277%\260\306\277*\361\365\276\263RW\277|L~\277\245[\265\277\320!D\277\340\036q\275n\307\220\276\016\372!\277\262;\"\277\270\030<\276\366\245\316=\240\350\351>#\244[>\325\210\230\277\2461\246\276\377B\233\276N\010\022?\336\266L>\t;\225?\212\263\207?^\366j?\230\315\365?\327\\\370?\362b\t@\216\232!@#\211\355?T9\276>2L(?\340\036\r<\005\017\250\277|fG\277 :\n\276\343\370\360\275\036\355\205?\203\226v?\344\246\265>\340^\004\274\212\2721?\374\'A?\360\202\200=\010\263\032\276\233\007\257?C\343\217?CB$\277$\262y\277\236\303\330>\223\277\010?\204\242\313>\262\315\007\276\264z\367<\004\213\230\277(Q\203\277F-\321\277\343\251\347\277\233\372\270\277\252}\250\277M9\350\277\367#\316\277I\025Z\277<\232\035\277\250\032\357\277#\247\271\277\362{\364\277\222\'\203\277\374BI\276\3479I?Q\025%?\024I\302\276\310\265a\276\250W\343\276\227\tw\277\356M\201\277\365\000S\277\254a\225>\214\016\231?X\321\345?\216\204|?\310\375\032\276\312\014\346\275\376\317\017?\220\013\314\274\204\264\223?\340\367[\275\231\313\331\275\203\223\303\276\324\240Q?\262`v>\275\263o?\304}\264\276\252\356\354\276\022\010\340\276\026\337\251\277bq\315\277\330\357\235\277\037\250F\277`(^\277\377\201H\277\246>k\276\303\n\274\277\233\313\"\277\256\357\207\277YJ\273\277S(\307\277\356\375g\277\000\230\335<\227\305\216=\020C\177\274\000v\356\276\310\226M\275 y\035\276*{\263\276 \345\337\276\240\344W\276\341\252+>\317\205<?t\000\303>\203\240\321\276<S\216\277\220\037\306\276\352LX\277\256\002\321\277(nj\276\342\332\246\2778\304\007\277\022Z\340>rw\264?B\227\t\277\017\226\253>Th\021\277\341>\240\277\334\304\250\277Z\333?\277\206.i\276\353\346\221\277\022:}\277\275\002p\277h\\\231\277\230\302\270\277\007\273\317\277\004\271\021\300Z\026\325\277\030s\031\300hs\351\277@\n\340\277\022\216\007\300\005\214\251\277 \267E\277\t\320\275\277&\242\307?\211<\213?<w\226>\205x\303\277\245G\030\300\316\017 \300\266\375\233\277\240P\000\277\r\234\225\277\365\307F\277\025\251t\277\302\213U\277\300r\361<\036\237\267\274\330\242\310\277\313h\025\277\302\240\200\277\034\263\025>\240\365\215\276\300#\271\276\022\300\215\276@.c>\225\300\261\276]!\347\276\034\361\235\276|\275\222\276\372\262\332=`}\300<\034\314\253<\265\245\352\274\374\234\033\277\376\326Z\277\206\014\215\276e\246c\277\243\355\313\277\214\276i\277n\327\245\277\260\331,>\n\230\215\276:\001\224>\032\356\330>,]\210\275\033+9=.\3667\2768rB\277\3524\236\277,e\r\2760[\361>\346\366\311=.;l>\322\020\213?b\220\316?\261\254\036@\320]0?\032\367\256>\362-\013?\212P\300?9}\232?l7\002@\246\371\255?H\017\252>\006\332\204>T\264C?l\307\n?\320\373\375\274)a\343\277N\311\334\2776\245D\277\250$\256\275\252w\007\277\302\002s>^:\312\276\356\031\304?\270\270\321\276z/\200\276\301\263o\277\303\250L\277\260\372y\275ft\347>\200?\002\274\3421\265\277\204@P\277\360\361R>430=\376\276\202\276\036\032\034?\254\313%>\307X\351>\304O\220= \341O\277\262\311\366\277\362\374\213\277l\313#\277\252\213\317>\204\002H\277\032\n5\277\304l\250\277\247\326.\277t\250\371>H\233\275?\204p\204?\002\217\221?\253\326\221?8\377\340?\245R!?\325F\254>\320P\313>\332$\256>\332\222\271?t\345:?i\221\031?\360{h>\226\231\177\277\300F\262\277\3271g\277\307H6\277xk\367\276\226\322W\277l(\200\277/\202\355\276\226\203\223>;-\215\277D\370\315\277\211\002\341\277\002|\237\277L.\r\300\241\206\002\300\202\177\355\277X\347\363\276l\341\361\277\"\002\344\277\334\324\261\277p\333\332\275\227q\031\276\001O\336\276l\2666\276\3071\320>i:\360?j\032\247?\003C~?u\343\362>\240c\023?\260\317\327\275R<\017\300\346\013\023\300\034;\332\277\351\303D\277B\302\313>j\234\315=)\2430\276\266\310w\277\200dg<\335\032\306\277\233\301\235\277\350\362\264\277g&\206\277\362`M?\2029j?\250c\277=\357@\244>\014\006\231?\350\024A?b \345>7P\232>\277\037\t?\235\374D?p\007\316\276\322\203\t\276V\317\303?F\221\251?\202\350|?` \310?\254\210\201?[8\227?\264\305\316?r\263\017@Gn\373?\004\323\350?\263\277\232?,\004S?\276\254L?\340\206-?\233\245B\277\222AP\276\221;\206\277\314B7>\330]\245>\3404q?\330y ?>\3158\277Q^\037\277*uP\277\032\227\334\276XN\214\277\005S\215\277\340\036\312\274&[\024\277\336P*\276\010\r\"=\232\013$>\276\243\354>\274\333I?\204\210\006?\320(\352<d\332\225\275k)\274\277\\\223 \300b\212\257\277\323\322\205\277\326g\036\277\007\366\317\277x$v\277\253 \267\276\'\271\321>\271:\220\276\002R\222\277.(\256\276\020\016w\275\363L\245\277u\246\206\277 \211f\277\034ff\277h\211\225\2776S\251\277H7\350\277L\315\214\277\323\361Z\277\265\216{\277\030,\223\277\010k\264\277\2200\252\276N\351\003>\200\366S\277\260\205h>\203S.?\316]\204?\326+\r@\033!\360?\020)\310=\217\017c>\215/\025?W\362\370\276`.e>\n\314\270\275\370\016c\276\361\3355\277R\305\023\276\314\030\222>\270\026\235\274\242\3330\277\367\007\235\277\311x2\277\026\361\013\277\023>\336\276\200\014\321;\362^i?\360L\240=\355\210\016?z/#?\207dq?\310P\207?\331\277\314?z\362+@O\254E@ \343\204=l\250\350=\024\326Z\276\334a$\277|c\257\277N\203\352\277\335d\007\300\2736C\277\250\034\200\277\212\371&\277\251\230y\277\230|\235>?-\214?\203\255\034@\337]/@\256@\024@\201u\023@xl\004@\365\022??\220.\214?h}\207=\234I\207?\026\276\217?\222\331\203?\276\331\303\277\006\234x\277PT\353\275\222c\316>\244i\307=<XP\276\230\234\026?\253\323\017?\274\300q\277,\216\207\277\177\0040\277\331\032\214\276\2522\240\276\330T\210\274NU\327>\372\177\225?\002f0?`\266\276=\010sa<\300\n2?=\262\347>\273\214\315?\302U\320?\365\362\200?\247\266\257?\231\301\006@G\020>@\254|\376?\233\310R?\3116\254?\262\231h?\234\213\273?4E\207?\2668\262?f6\277?\211\371\252?N\232\376>|\032\177?\242\234\277?\346\260r?\010z\301?\352\262\344?\316)\301?\030\"+>\273\247,\277\256o\231\277\3074%?n\270\201?@\313r>\356q8>\307\004\252\276\354\2060>4`\213\277\224\354`\277\024\322\204>\360W_=\347\370\022\277\342\201\271\276@k\307\276\366\313\003?\020\276\324?(\256t?M\236\020@ur7@m\010\'@\212x\267?\3767m?@\364\033<<\277\201\276\026\241\245\277\200\333\032\275\374U\301\276\363\2041\277b(3?p\002N\2762y\251?\334Q\254>\270\345,\276\2153H\277\\\312Q\277)\317T?\223\330n?\341\227 ?b\247b?\010\nS?\210\373\272?\200\252\226?W\372\315?\021\317e?h\342\364?\374Z\200?\264r\233?Z\250\234?\310\252W>\212\025\251> \3330=\004\345\017\277n\266\206\277G\200\\\277\271\270\017\277%\335\246>E\023V>t\005\202?\323\244p?\326\314\203?\316_2?\234\314\007@p\206\274?pA\002@\276!+?\022Vt?\036*\320?\365\\\035@\000\316\013@\236\2009@\353\335\020@5\223\020@\3174\343?3\014\317?K\325\335?\324\364\t>T$<\2773$\306\276m\2722\277\036\334p\277_\340\001\277k\274\225\277&}\331\277\230\261\274\276me\037?\3553\273?\220\225\343>\210\252\327>>h\351>g[\223?.\352Z?\364\006\">h\n#>\221\306\014>RJ1\275\262\201\201\275\340\034\312\277\352\210\022\300a\372\355\277\177i\023?<\370\303?s\252\221?\243j\365?d\224\231?@3e\275\215(\027?\232\310\275?gG\245?+<>?\\\332\240?`_.?V\031\207?0\206\216\275\2712\274\276:Z-\277,\341\221?\200\355\203\275\233\\\277\274, 3?\305\210\211?\343\251K?R\2002?J;\033?\210\242\221\276\220\3365?\"\354\021@%\227\031@\371Q\321?\246#\265>\0344\n?/\205\202>\376,\252\276RJB\277H\363\r\277?_k\276j\345\300? \243\370=\026\240*\276\302\260X\277 VU\275\352\265\372>\234\207\340>\344sX\276\2373.\276g\301\224\277sb\256\277\314\240\221\277\344\223+\277\330\247\350\277-\247\021\300K8\262\277\'l\323\277\206\376\021\300\203\271\242\277\251\205\310\277\022M%\300s\303[\300\240j\267\277\034\260S\277\247{\247\276\260w\270\274\271[\367\277&\007\255\277\347\034;\277\025\336\247\277\226r\206\277\240\316\352\277\203A\023\300\350n\370\2777\347\250\277\033\2178\277\217\341\342\277\244\374\025\300\254F\013\300\230\202z\277\310O\244\277\222\362p?\366\002%?\367\002\220?2\013\201?\255|r?\033\241~\277>Q\265\277Vu\217\277\004\275\321\276E\034e\277\'7\226\277\374\352\306\277r6F\277\204\275\t>K\354\331\276z\026\004\277\234\366\n\2772!T\277\340\236\371<\321\255\260>\370W%?\330A\233=`\366\014=J\211\010?N\342\242>\362\307\007\277\360\334\001\275<*\350>`\n\353>C?\276\27686\203\275\226\253\206\276\305Y@?\310\374}\27606e?\207&\005@\021h\026@\337\3602@\214\360C@\235\376V@ZU\354?\001\014\336?\356\200&@\326g\337\276\214,\241\276\242\211\302\275\002\340_\277\030D\236\276*\0047\277\331A\366\276\357\001\243>Xa5?\273\350]?\200i\357;\362,\202\277\000\363\004<\017\002\314\277k\203\276\277\3350\247\277\346\003\202\276\206\305n\277\322%\215>\375D\344=Wx\362>\261\003\373>KQ4?\226\272\260>\335\255\354\277}\331\333\277\306\207\306\276X\341P\277\356\211\364\277\217h\342\277>_!\277\n\323\225?7\350{?\234]\243?\230\3242@se\230?\033\371/?\300\324\227?&\373\307?M\351\207?@\335;<i^Y>`\325k?\215_\\?n=J?\005\302\321>\310\254W>\214\016\253?\033\362=?R\245\300?l|\002@\035\033p?~\303\240?\3269\251?\210\325\231?\2541w>{\233\360\277\002#\t\300\336\267\030\3006\355\005\300z\224\366\277T/\247\277\326L>\300C(\200\277\210I\311\276\353Bw\277O$\246\276\362\373\336\276f\024@\277\000YZ\276\326\262c\276\232\035\260>\277_\007?@\214\"\276F\251\212=a\202%?ub\002?\2544K?\362O\302>^\341a>s\342\n?\332\272\377>Y\252\030?\220X\002=\252R\342>\304\224\352=\271P7\277z\037\213\277\014\024L>)M9\276\344\254z\275\340(\342=Sx\221?\302\215\361?\272\343(?\356\322\321?\\\224\277?\272\214\354?\242<\231?1\230\212?\356>g?F\226\202?\206\020\341>h<)?\314>\221?\330U,\276V\312\326>\344[\014>\215\027\262\277a\306\005\277\024\247R\276\022\360<\275y\363o>\003\024)\276\321\222\325?\226|\256?\340Z1>\001\350v\277=\203\n\300\252>\346\277\0008\252\275|\037\364\276\230\241C\277L\017\331\277\270>\021\277\324h\240>j\2259\276\314\217\336=\306\225T\276\330\243\351>/\356S?{\273e?\305\3562?\263\2405?\370I\352\275d\252X\275l\030e?\336\305\333\276\026\177\273\277!\263\331\277w\223-\277\214+9>\274\265\023\275\237@\305\276\346\324\273>\326\351\033\276\205HR?\215\032\r?\373\340\213\277|G\031>f\212g?\370\314\341?\006I}?\361)\267>\304\227\221?\013\305\336?>\370\323>\210\250\230?nS\276?,(X? @_=Y\023\246\276\220\210\004\277r\230\026>\001\'G\277D\360\337\277\340\346s\277x\341=\277K~\210\277\000\343\334\277\020L\207\276\245zx\277\320\343\r\300<\002\017\277\353/\002?\260\321i?\006l\322?$\317\243?v\377\275>\035\247y?\240.2?z\006\317>\010\035\036?\366\266\227?@\217\223=\363\313=\277.TU\277\225d\202\276\365\230\032\277\211\210\037?\206\002[?\230\300\014>\373\275S?\342\262~?\214\322\"@\016_\204?2\235\266?\242\261\006@\237G\305?\202?\263>\244\264\366>\376#G?\300\212&\2757\231\027\277\320\"\250\274B\363]\277W\264\350\277\014\227\310\277d1/\300toT\300\32375\300\310\211\356\277J\210\025\300)\246\020\300\245\232\365\277\346\215\220\277\370\034\324=o\255/\277\362\315\206\277\3140\037\276\266\236\034\277\314\201\236\276=/\262\277\316NE\277Y\2224?`\261\206>\317\341\364?\004G\003@R\257\020?\273<\004\277)\352f\277\350\007\226=\203lV=\"\351\022?\277\346\226>+\267\373>}\211\311>@\027\335;n\225\004\276\027s\222?,C\263\277\214\230\371\277\221\223\264\277\312\275\362\277\324\312\273\276{\024$\300KWV\300\354\205\331\277\337\002S\277X\022\234\275P\207\223>`O\377<\232N#\277\024Hw>\210^[>\014\301\231\276e\201\014\277_\004\252\277\"\355\003\300W+\005\300e\234\022\300\2400 \300d\330\013\300\'\322\007\300\267\307j\277A\214\224\277/\257\220\277\304\316\213\277z\311\237\277\035\207d\2772\263\206\277`\236\327=\003\217Z?\303W\257?\374\275\320?\243\364\277?\302\375\335?\266\210B?\376%\360>\322\237\240>\272\366\375>\0374\236>\206d\272>\037\035\031?l4\307>\217\261\265?\227\245\001@T\340\303?W\311\r@=7\377?\262K\204?2\355\317>\222E;\276!\240\200\277@\rL=\204\274\371>3\353\207>\"\276:?\3003C>H\004\251?\202\226\235?\204=\037?9S\220?\265[\037?\274q\223?\324\313\t?5\333\036?\022\322F?\340G\235?&\332\205?\277\225\212?\230\235\354\275GF\271?\356\224\220?\310\0256>\374\246 ?\212\256\271>\216\250\307>z\031\305?`[\">\0052d?H4\377=B\204)?^\036\214\276\322\025!?p\211_?\210R\333\275\333l$\277LN\252\275Jn\r?\206o\331>\031\213\225?6\276|?\260\352$>E\031\036>\370z\030\274\362h\227?\333\205b\277\255Z\003?\236y\203>\036MN\277\2504\251>\000\355\272\272\257\363\323\275T+\276\276x\254\250\275P\234b>\272\266*>h|a\275\327\221d\277\000\257\236=p\314\356\276JZv\277\306y;\277u\357\033\277\237\217\232\277`\356|\275\203r\342>>\305\t\277\210E\244\277\027\240X?~P\021?\227@R\277\354\230T\277\232\214\226\277\215#\331\277jl\004\300\0101\215\277\272\361\233>\206TE?\300^\276=\304\356v\277\020M\373\276\330 \022?T\364@\277\364nA\277\000I\t?\2715\307><\n\361>\1776\210?\230t\t?\266\221F?\312\207$?\022\351\377\276\320\266\250\275\366f\347?\210\343\260?\364w\374>\210\234p=(\357U\277F\237\246\277\016\2644\277\260B\037><\231\246>A\371\036?x~\221>0\305\013?@\302`?i~9?\373\222\204?\344F\212?&\267\201?\225\257\221?\330\203\271?\226\236\000@\240\227\020@\240\024\010@\020q5@\366\207u\277\336\2263\277Vc\333\277\225\007\307\277\256#\363\277\274\317\376\277\352\350\227\277\272\326\211\277\354\356\230\277\\\222\316\276\207\213\245\276\224:\361\276\357{\204\276\0063\336\277\276m\333\277@\245\377\277C\226 \300\342\332\r\300\272\037\360\277\247I\352\277\336i\200\277z8\240\277\030\005\027\277\372u\362\276\305\351\016\300\212:\240\277\210F.\276U`\035?\026\375\251?\351\352o?\361\306\265?\036`2?aw\000\277\323\276\211?Z\260!?\252\204>>_\220\237\277\253\346\306\277\366{?\277\022\007U\277\304\030U>\334\201,\277\266\3745\277\307\336\326\2771\376\257\277\204Z\035\277\346\250\217\277\326\031\007\277$X\243?B)A?1\242\025?\346%\246\276\003\373\226>\200\222V\273\365fX?\305\021g?\240F4\275\310\031\342>\302\215s?g\3111?\007tp?\317\270\362>W\037\221>s\023\215\277\217r\220\277\226\361\235\277a\271C\277\022\306\036\276;6\233\277\363p\004?\260\001\216?\002\340\032?\027\323(?|\342\206=\246\256\033>\264\033\305>o\316\337\276\030\005\237\277\317*\303\277\270\026\\\2772\212\345\276:C\204\277\337\344\035\300\342:a\300\277\312\206\300\330T4\3006\236\330\2778\034\337\277\020\271\r\277\350\272Y\2772\261\206?\342c\203>\007\367\007?\245\275N?t\260\001?\354\023\n?\212\211\244\275=\234\252?R\367\350?\232t\022@\333(\334?e\317\024@\0201l@\335\347\247?`\205\364?@\226\232?\340d\214?\026Va?\300\331]\276\340\360`?\210\365G?\004E\245?\354@\034?\300\221@?\357\014\017?\232\235@?\300\213\'?\324\252\304>8\344\305\275\244\324\217\277\010\363\014\277\222\371\373\276\nIf\277!-\205\277\210R:\277K)\025\277\222{7\277Z\253[\276\352\262\332>\216(\014\277\344\246\256\277s\023\242\277\246W\343\277\3554$\300\t\261\025\300\300\230\346\277\026\001\244\277&S\213\276\304K\035\277\003})\277\242\014\235\277hQ\202\276\343\033Z\277|\003Y\277\344\214\326?\'\306\262?\030\037\341>\030\235F?\\\223D?\255S#?\010\240\270?SM\324?\344\232\225>\030h\034\276\325\260\204>\311!\274\276\202W\260\277D\"t\2768\013\366<F\217C>\231\373\003\276\036D\241?iK\203?s<\351?\274\r\244?\010\260\247?\000\002\210?\022\036\267?R\255k?h\330\376>\332\203\227?\2402\270?d\226\324?\243O\351?\033\350\n@\262\211\002@\234\371\021@\233\333\376?\227\364C?\330P??\210\226\216>nF3\277HA\030\277\3743\217\276 !\253\277!\270\222\277\262cC\277\223\310_\277[\'W\277\2376I\277\235\235]\277,\351\306\276\250\275g?q`\252?@\240\037?\342\237Q?\003x\273?\373\002\242?:Mu?=\030\345?\004\343\342?\036\240\221?\346i\032?-\321\216\276@\004\010\277F}\177\277\262\215e\277\274\245\001>\252\204=\277\252\303\370>n\035\256?!\035\336?\006R\226?Y\315\255?(\367\020@\302\"@?\274\314b>\366\376\216?ml\226?\307\220\267?D\216\037@?W\273?\213m\306?b\243\362>M\210V?\330\304\020?\226\214\244?v,\223?\202)\260\276o\313h\277\256\322\310\277\017\326\205\277N]%\277\322Gr\277c\226\233\277\224\364\266\2767Dr\276N\267\343\276.\217\033>\274\312\276\274\254\225Z\277\031\317\202\277\217g\313\276\316C\275\277\036\022\242\277z\331\r\277~\336\215\276\235a-><\261\033@\352 \367?\237\267\005@\346\320\n@\247k\360?\224\211\355?\230\332u?\034V\013@\275\\\254?\206;\226?\365\342*?\010\032\341?\354;\031?v\205\037?1\336\017?@\003\312>IJ\370>@\024\375>\024\244\\?\330\001_\276l\231\023\277KG\314\277wI\235\277uM\227\277\335\355\201\277\0168\226\277\372\025a\277\350\220\272\277\004Oa\277\345D\226\277\206\353\244\277\370\316\325\277\261\241\021\277\222EZ\277\270c\271\277\353\303\231\277\337k\333\277@\250\364\277\032\233\002\300\300 \006\2774p\216\277\300\177\224>\330g\316?\320l0>n\016\002\277\226F\217\276\347f\213\276,;_\277\270X\350\276/\353\216?z\234.?\300\237;<x\034t\277\364\354\253\277\2568\265\277\022\257\032\277\0160\220\276L\277\030\277\230\t\266\275\347\303\317\276<q0\276\310\255#\277\236<\'\277\272t)?\376\322E\277\005K<?&~\261\276$\324\027\275\230&\036;\014\305\n?\376K\217?\235\345\032\277n\023\r\277\210\204\013>_\201\353>\221\302\226\276\265\311\032\277\360\306u\275%\254\322>\200\331\243<\335 \003?\230\016\034=\301\301\213\276d\"\030?\374>\204\277\200\366\350\277|\211\221\277\363<\022\300\340\032\323\275U5I?\256t\256?I,\013?\332\312C>\361\000\330>\360U\202?\336<\207>X\264p?-4\022@\273E\374?v\247\002@\020\357\334?\270x\252?.\273\256?\274k\377\276\254 \252\277\205\005\240\277\365e\371\277\316\006\233\277\254}\230\277f\365\207\277\026\377_\277\362\307\265\276\350\351\241\277\001\351\023\300\360G\267\277\010\276\364\277\014\022\345\277\006\243\344\277X\351\250\277x\032\314\277\346&\007\277\334\026)\276t \310\276\200d\256\273\324\214\027\277A\027*\277\276\336\026\277\0200\355\275\242\306=?\365D\216>S\240\273>\254\271J\277-\226\300\276\276\354\254\277R\260\320\277b\343\323\277\300;9\275\\~\250\274=m\364>p\271\231\275\230\211\316\276\n\030\202>\206 k\277\025,\312\2770\224E\277\0343\302\277\004\370\332\277\221L\262\277\311W\363\277)@\271\2779\350\255\277r\n\030\300\322E\010\300Z\306\032\300W\363\'\300<I\235\277\375R\220\277w\215p\277\246\205\241\277\232\017\243\276\022U\023@Z\211@@\020\275v@k\277m@\010\235X@4\2460@y\322\013@\224\016\027@:f7?\022lC?\317\205&\277S~\363\276I3\263\276\2607\371\275zZ\325\275\370\211\024?\325 \220>\326M\037\277\330\336\322\277\215g\267\277\227\213n\277@@\261<\364vZ\276\270\376f\276\t\332\263\277E8\360\277Mv\234\277~\226\276\277-:\001\300\030t\323\277\263+1\277\360\313s>\316\223\366\2768\360e\275\024A\261>\314a\241?\036\307\005@\210v\204?zO\356?f\230\035@\315\375\024@f\234\244?\000\210N\272\346,J\276\023\225Y\277>p\214>\013\317\201>j;\261\275\322\224\331>\344`\025\277\340\234\224\274\320>\255\276h\026#\277H8\320=8\2435?l\225\300?u\352\207?\340c\013@<\177<@\0324)@\241 \373?\350\362\002>S$\301?\255\\*?\025\004\216>T\010\336>\220\225d?\356\010S?5\ng?\021\324\002?\307\002\021??\003w?\"5\213>2\004\234?\251\276_?\270\266 ?\020\361\376>\244\304\212?\344\343a>\036\205\374>\n\356\326\276IA\024\276 \265\236={jf\277 \271\033\276\036E\013=\241\211\340\276\260\310.=*6\317\276\021\257\322\276\373H\234\276\243\026\226?\020\211`?I\313\271>\331K\213\276\340\'\314\277\371\r\371>\336!\037\276I\241\340\276\321_\237\277Q:b\277\346\366\246\277\245U1\277\375\211\004\300hp\313\277\216\004]\277\264_\006\277\366\3521?\321\371d?\020o-\275\222\027\360\275^\346\250\276A:\025\277\\&\361\2760\332\243\276\033\220\224\276\353\232\344\275K{r>\262\036\201?\237A.@\311:\001@\300\242\316?\262L\311?\340\356\000@V\2066@\023\227\021@\240\023\030?N\373\332>\021\304&>AW\006\276\353\001r\277\360\255\215=\304F\320\2762e\306\276\021+\336>\230:\344?\301\312\264?\3007\017\277\220\2136\277v\000;?\204Kb?\256\247e?@mE>\000\213\t\273 \302\231\276\246\266\010\277\330\352\025=B\310`\277\233P\256\276\254\303\'?\232\213\207\276\363\303)?\3645f?h>(?\013\330\211>j\316\366>\271.\320?+\221\"?\031\r\361?\ng\317?\210\363\267>\311\341<?\372Ff?\270\333.?\216\347\221?\333W\246?\360\275\305>o\025\244>\242\2572?\252\"W?8l\205?]\030\305?8\177\322?S\026\001@u\177\244?\034\313\341\276<\320\227=\206>%\277\350\320T\275\374\261\241\276\323S\'?\234\001K\276\316)\235\277\334V\214\277y\333=\277\000\223\307\276\245/\374>\034\355v?\n\346\226\276w\277%\276\326\205N\275\2526c>@\360\364\277\254\235\002\300\304\344\367\277><N\277\370\214\341\277\335p\306\277\330\217\246\277\034\366\253\277;\247\225\277L3\313\277\274M\237\277\234)\031\276\314Uk\277\200e\222\273\253hs?plM?\320\305\340?$\370\034@\215\257\337?$\013\374>Z!\255?q\272\331?v\236\201?&\230\002?\340\343\251\275s\014\254>\255O\254\276\215\251\327>\372\003\331?f\2523?\340\355\313<\toV\277\006\307A\277\266\350\327\276\326\337y\277f\371\272\277\362\324\322\277\006n\343\277j;H\300`\022\025\300(A\267\277\007\201\337\277\007O\271\277\330\200\005>~|]=\302O\331>x\t\020?\203*\206\276MEN?\000\014\207=\350\2151\277\330:\016\277\225\336Y\277^\303\263>*\003\031?\331\202\244>\332#\031\276\353\017\240\276\00066\275c\022\017?\255\305\367>\232\220\206\276&\354\227=\354\307\270\276Eh\266\276L\273,\277&\372\025?\334o\224=S\2404\276s\376N\277\204\232\247\277\300\364\214\275`\222\220\276J\210+?\264qe\276\364M\370\275\300\332)\277n\223\352\276\273\006\233\2776-\271\277\361\351\325\277\231\270\t\300\274\376u\277x\311R\276\177/:?\266\264\260?v\246\005@V\035\t@(S\222?\010\207\377\275\251N\334\277\250\354\010\300\300z=\300B\360\016\300\225\013\311\277\311\377\255\277\323&\267?\242c\016?v\322\206\2770h\221\276\364\017;\277\332\024\331\277\305L%\300\360%q\2777%\217\277:\2735?H\300]?\221\331\002?IG6?>\321\263?|\267\214?\3571\246?\376\267\322?\025\214\t@U\211\346?\007\377\222?LGQ>O\0225>\323*N?\3419$?\323\"\337\275\213\210,? P>?\004A\342?8\020\264>(\230b\276\3274\004\277\240\333\354\275\234\306\203?\330\017\347>\326rC>\016\022\302\276\220\364\001?_\335\004?\340-\204?\316\007\217?\257\355\351>\273e\333?a8\001?O@\215?\276\214X?`\006\250<\367\307\335\276h\277\272\276<\333\246>[\2314\277<\345\276\275\221\221\341\276\244\306\006\277\240\312\314\276\240\027\215\277\332\'\252\276\312\215\233\277\217\344\245\277\326\277\253\276\220\250\264=\236\220\252?\254F\227?f\306\007@\340\016\003@\372\360\033@f\327L@\032\230<@,\363[?\021\353\002@x\351\264?`\236\356?\'\353\327?D\354\332?\022N!@xU8?dy\207?\200I\201\274\026M\271\276`?\273=\302\346:>\032aN?\220\0217=\225\006\036?\365\231\316>\255\010\313\276\336I\311\276\254+\037\277\356#\306\276\267\252\270?\232\323\202?~`\213?\274\327t>#\000\202\2766v\222>@@2?\000l\201>!\360\251\276\200\0256;\031\352\261<G\"\251<\330\321\366\276\371\200\027\277&8\311\277L\321q\277\366:\000\277\274\215\330\275 \020\317;\256\362\306\274\326\3514<\356\036\357\275Pr\366<\320-.?\020\\d?\320\014\312>DM\203?\277/\255>.\r\370>\2136\037?^{\033?\377\032\006?d\016\211>v\233h?F\203F?\020+,\275\303#\315\276\366o\326\275\345w\204>\210\\\036\277\030\t>\277<\372\r\277\344KA\277H\251\372\275Ao\236\276\202\360\212>l\025\036>\333\331\303\276y\243\207\277\352\314P\277\240\230\331\277\334r\010\300\362Z\272\277\243<\030\300X]\225\2770Zv\277Z\343\225\277\233Q*\277\034YG\276\241f5\276\3777\247?\022HT?\200=\227<\t\332\210\276qH\311\275\010\351\262>*\274h? &8>\250(\r?]\244\000?\0308\331\276\260Zb\275\237SY?\360B\021>\370I\237\276x^\t=Fm\223\277a\177\206\277\325\351\257\276\301\234\241>\273\360\270\277\267\343\260\277\000@M>\244d\304\276\024dX>H\362\363>\246\251\016?\240\215\020\277\320\371$=a\247\272\277\377\002\264\277<\225\202\277G\2063?\310t\t\276C\037\300\276\226\0102\277\347\302\353\276\036~\250\277\313\021D\277$N\305\277\244\203\347\277^\374I\277\346\026*?\200\000\375;\371\331\252\277\212\276\302\276T\310\302>`\252\210=#\251\341?\324\215\354?~\261\025@$\310\202?\240x\261>@\307\246?\302\323\371>\000\373\275\272kU\\>\344\376\243>6h\224\277`\024\254\277.Um\277\340\026\357\276\260\005[\277\354\363\271>\334\202j?\206\223J?\230\255\224?Ri7?b\300\373>\270\030a?\020Y\303=\016\254\303=H\330\034?+\362o?\034\037{\276~@\253?\334\250\306?\006\240h?\006d\r?\323V\352? \325\322?t\307\336?N\010\017@9\314\014@\007^\004@\016\210\301?<\221\365?d\342\037@+\206\312?\314\314\246?\275B`?U3\220>\217\305\357\277\000Y\310\276\005\002\347>\r;\005?C\335\327?\330\314\373?p\004\333?\\\024\244?D\326)?eq\217?\222\273\320>\320\031\326?>\254\244?\014\334\236\276$F\365=`M\244\277\323\024\240\277\322\271\227\277\204\251\245\277\326\340\033\277\213\364\321\277q\3420\277ZW\232\277\262\256\316\277\343\344\262?Ph\t@\305n\271?\033\001t?yN\225?n\200\'@4P\002@\031/\222?Ek\351>\261\037\362\276\010,\037=\006\250\201\275\347!\340\276\355\351\246\277\324\275\210\277\334\354?\276/J#\276Q\025\026\276\000:\025\272\212\346\301>\006H\245>\244P\177\277gc\221\277\034ev\276\t\026f?\024]b\276K\346\237\276\361s\206\277\231\024\201\277\014K\241\277\376\221\247\277^\244t\277b\317a\277+\206\352\277\016\r\253\277\020\206\224\275\206\2578\277P\245\'>\005>\245\277\372Z\365\276r\242L\277\241K\362\277\250\231\256\276d\342\024\277\022z\251\277{\305\305\277\212\267\225\276\236\031\026?\276\307\t\276\311vc>\3404]\275 \006\306:\31477\277\275\3461\277\021\301\037\277u\370\207\277T\177l\277\275\255=\277\240\337\'\276\2670\321\276\272\001B?\250\025\032?\315\314\320?\232~`@\327Q+@[\271\'@\257|;@\010P\r@\030\014~?.\212\004?\371\324\212?\250\'\336>PU\327>\264\334\026?\360\006\307\275\022\260\327=\373)\203>\340\231\027\275F\033\003\277\366k\203\277bXl\277w\247=\277G\2322\300`Fh\277\302\354\211\277\024\375\230\277\333\027\252\277(%\334\277n\322\240\277\356\340\320\276\376\340\377\2765\374\245\277\276y\037\300P\351\013\300i\323\026\300\301\205<\300\344r:\277\364]0\276\210Fu?J&:?\271\333\037?x\202\360>\273\014;?\364Bp\276\327lQ\277\034\250:\277\226\273\200\2770\361\243>\220\220\217\276\207\364\177\276-\372Q\277\360\333\031\277\304\344c\2760\220\036=\316;<?\350\307\225\276o\323\267\277\365\277\302\277\354\264p\277P(\177=\326(=?\204\200z>\n\316\022\277J.\212\276\276\200\020?X\0161\277\270\236~\277`\325\221=gt\214\276\364\221\021\277>\361\311\276_\232\000\277>(\314\276Fu$>\324\034\364>:4\346>\330\203\'?06\031\275\302\214\253\275V\035\206\276\000\321\226\274L\210\212\277\354\'{\277\014\217\376\277\336|u\277\354\317\'\277i\222\230\276\250%\217\274\352M\004?\204L\301>\275\364\301\276/(\020\300\034\252\252\277\010\301\341\277\304Xg\277\'k\226\277\260\260\213>\325\357\304\27605%?\342\351\243?\265:\261?J\373J?\255\321D?U\235\005?\271M\n\277\310\220\341=zc\233\276\\|\007>\2432\254\276K6c\277\326\034\231\277\346\241\316\277\327\003>\277\314\021_\277\255Y\235\276{\337\204\276\274\3661\276(,\207?~Y\362\276nJ\307\276\2136\365>x\244\004=:NG\277\000\314#;\247\216\222>F\274\353?\340q1\276\275\305\232?\307\317\361?\336\035\311?2k\347?\354\360\r@Q\231-\275\273:\251\276\232\232I\276k\221\270\277\037\351\267\277_}\005\300?\264\256\277\376\375\016\300\345\310\333\277+q\250\277B\014D\277\347\266\247\277\272\264\245\277\227J\341\277z\252\357\277$\334\321>\250\026\203\276\273/\232>\270\002\346\276\364q\211\275^|K>\"\232a>\312;\226\276(\274\r\277\374\311\231\277r\r^\277\324\3145>t\2466\275!\202\220?\232\300r?H\0270>M\204\225?\256UJ?\372\037\315>\266*n\277\204]\017\277/\346\345>\346\317\214>\2128\245\275\007b\203\277\\\257\030\277\311\244\264\276\274\232\343=\321\320\002?\323b#?\206,\261?\200\314O\275\026\355\226=\251\211i\277\014\301R\276\027k\027\276I/+?\2000\346\275w\222\342>\252\375??\200\033\315<\251k\273\276\340\356\t\277\364\201\367\276\322\r\036\277\340\210\332>j\261~?\315\263\220?\351\2228@\334\217\206?\372\334\211?NF\233?\211\344\261?\346\031J?\036\270\231?3\266<?n\345\352>\370y\240\276\372\230I\277F\212\365\277\\\356\271\277]\243\204\277\302\314\254\277\321\327\211\277\021\252\357\277(I\026\3001\217\323\2770\344\017>\033\013\215\275 \237\016\277\224\342\303?J\336\300>8\177,?\337n\320?\n;$@\256\254\251?@\233\000@@w\312=\254\016\210\277\003T\235\277DLR\2771z@\276~\355\311>\370M\263>\334\357\210?\230l\r>\257J^\276\030f\251>\272\210=?\014:Z?\016E\215?\310p\271?\000?\374<\277\345y>YM\n?\314,\321>\177\217\016?\234\\\371>0\370\274=\t-\033?SK\215?\024vv?s\'I?\205d\211?\374\210\030?\312\341\376>1\037\010?X\236\201\275bM\353>\021}\334>y3\345>Trj?\352>\366?\000\347\266?^C\013@\214\217.@H\020%@\352\224\037@\340\032\n@\342\300\323?K\203-@\256pf@\231\323\"@\2544\001@[\354g?}\026;?\3303\275\276\342\235X\277K\263\313\276/\355\037@\314\274\035@Bl\370?2\300\030@\264\216\327?\204b\016@\243Y\306?\030P\323>\300\203\317\276\206\223|?_>\364>\250\026\001>\031\341\304>\354VP?\311\007\036?\314\006_?\256\000\257?\207\313\002@\245]\246?B\203\342?\364\021\327?\003e\301?\251\033\305?C\332\240?/\027\362>\211=Y?\2778\317>\010\206\001>\200#\352?\242\272\330?s\024\245?\366\302\227?0\354\250?\264\034\264>\007B\274\277!M\252\277\250\207\357\276.w\363>6>|?\356\026\356?B\257\036@\334\250K@xR\n@\270\270(@\327\252%@~\003\320?\345\307I?\270\346P?\026X\003?\2422\224>^\244\342>\010\266\225\275 K)\277\210r\335=\017\307\330\276\3624Z?\221\267\231?\216\026\314?g\207\362?r;\021@\272\035\020@\257\006\222?\270\205i?o.\314>8Cn\277j\343\246>\262\240\305>\260\215Q>4\010\372\276\344\220\202\277\325 ,\300T\n\'\300\rG\017@\355LM?\312\342\335?\314s\317>\313\306/?\276\346%>\230\364\331>;\3631?.\0369?\024\376\275?r\367\360>)s\272\276\231\033\"\277Tk\372\276\232W\275\276\274\375x\277\340\373z\277\340\271A>\324\t\207\277\360\256n=\250\3612?\006Lu\277\212@,\277\206&\322\277\366p\327\277K y\277\262\224\005\277\221\301\010\277\353\225\270\277\306\260\310\2776P\002\300\223*\350\277\"\300\261\277\327\304\242\277>F\253\276\013\271+\276\032\033:?\332\311\260>\2243\025\2763:~\277\342\230R\277u\372\203\277\2140\316\277\357M\255\277\232}\317\276\311T\355>\347Y\253?\240\260\345?\201y\333\277>\256\263\277\373\261\257\277\370wo\277\351dR?\252\036\255\276\362B\243\277\337\020\215\277\250\206-\276\372\314\202\276\300k+?\017\336\342?\300\017.@\242\370\356?d\226]?\340\224M=\364\362\247?vo\222>\275\021v>g\206\242\277\203H\214\277\376\037\303\277@\305\244\274\220\264\031\277\273\2316\277\204\225\321\277S0\255\277\233\316+\300\375\314\035\300\221\023\004\300\010\357\037\277<\210\232\276p\364\273<0\275\316;\021MX\277\3349\224\277\200^S?\216\032\302\276\234\256\215=\206\376\001\277\223\005\202\277\242[\003\277\333\024\003\277R\217\243\277\326,\271\276\336\366\204?\026\353a?\'v\334?X\010\326>\211:\255>\216\252Y?bw\201?\027\325T?z\342j?\366\360\223?3@\207?P\2700?`\215:\275\303\001\007\300\321\316\331\277\366\355d\277|\246\027\2772\235\275\277rc\214\276|\021+=\0233\317\276\220K>\277\276\307`\277T\245\237\277\030\366-\276\273\255\220\276k\325Z\276!\203\265\277~\337\302\277\212u\356\276\020\354\210<\225\351:?\370\331\027\276\350\036\006\275\306\235\346\276\214\323\225\275\016(\'?\222\262\324\276\320sP\277L]\211\277<\0274\277\313I\222\277\245\3356\277\340\017\006\276=\264\347>dB\252=\251\360*\277\312\216\032\300\247A\010\300$mZ\277\260R\226\277\256\343\257?\034\036V>4\226\016?\310\013)\2772_\205\276\372\305{\277)\026\205\277\177\244\000\300\202\227\030\277GJ6\277q\350B\277\334\370M\277rq<\277\022,\026\277B\350O\277t\247 ?\"\207\236?p\034|\275\247\r6?\230;X?\252\232\032@P\241N@^\376l?6k\270?S\330I@\315\250{@lwr@\224\026\022@u\264\314?5\275\331?>N\306?\303M\275?\207[\307?\236\325\271?\005\320\303?\321\037h?\224\356\376\276\010\372\217?0\261!=\375Co>.S\020\277\010\3427?\006\347\223?$\256\005>@\306\212?\030\332\314?\252\217S?\000uK\273\220\203-\277\325\343S\277\247\2478?\332\244\210>\200d\"?8\203\213\276\216\016\317\275\037;\262>\264a\205?t\035\353?\026\214\213?\310\014\004>\351\276\246=`M{?H\245l?h\226\312?\364\313\276>=\221\000\277\336!\033?\036\221T?\237\327\364>2t\016?\036\320\225>\312fu?J\033\305\275\332\033u\276(\235\333\276jX\271\276\357`\217\276\274\002\207\276\336\300\016?h\236q\276\200\037\304\276 \351\037\277P[9\277\\\270S\277!r\"\277\250\022\300\277\275\236\245\277\005;\007\277:ws?\344\320\231>\220\362r=jE\030\277N\262\214\276\304W.\277bp\250\276\367\3471\276 ;\246\277\244\013\244\2774\263\263>\275)\024?\277n\311\276\2208\213\277@)\200\277\216\337\t\277\311\007\014\277\272t#?N\231\252>\002\034\323\277x\331\217\277\004\243\254\277 \030\235\277pP\274\277@3\237>\200\020\215\272\240J\225\277/\003\342\277\260\026\216\277\343\257\266\277!\023r\277Q \241\277\262\334i?2\306\226\276\\\016+\275\216\303\000\277\216\017\243\277-0Y\277\277\002\025\277\221\207\320\277\304\244*\277\246n\245\276\0008\266;b\027\024?]\275\254?N\331\314?\240h\232?DT#>\204\232\306>\336\310\037\276\352B\035\277\305\n\323\277\214,\210\276WQ\250\277\224\020l\277\320=\230\277\035\303\350\276.\027\335\276\024A@\277\376\003\340\276t\224\273\276p\251-?\370\262\005\276@\314\214\272\005\217d?\332\237z?/\031\207?\021\306\017@^\323\016@_R\253?\350\031\026@:\207\227?\335Sa?vD\253?\003u\363?u6\377?<\314\276?\017\202j?\311\351\375>\356\312T?-\336\212\277\024:(\277\320\253\330=JR\217\277\305\355H\277\010PP\277\016[\247\2778\252?\276\204\310Y?\'\212F?\2572\r?\n\202\211?\330\321\361=a\t\274\275zO\211\276\363D:\277\000\256\265\276\305e?\277X:\220\277\360@\t\300\332\037\342\277T(\370\277\220\341\354\277\014\322)\300,\026\\?\006\315\361>\271\356\304>\370\203\245>\240\252\362\274\031\244\311\276\232{.\277\n\336\263\276\000\366Y\277\215j\271\277p\377N\277\305\274\034\277\n\256\021\276\247\250\016?!E\222?\021\274C?\276k\310?\212u\302?J\214\321?)_\306?F\360\306?\3728y?P\311\214?$nv>\225\233Q\277\376\360\000\300\200\310|\274\211\324\035\300\275\247;\300\240!\273\277\262\252O\277\225%m\277x\257\324\277\214\363\306\277N\341\342\277\365\'\014\300\211\234\r\300\t\310\260\277\242=\215\276\"\\\221>\306\036\264=\031G\272?\215-\212?\203\225\035?\262J\222\277\356Q\201\277\\V\030\276\373a\361\276\377\263?\277\024D\360\276\010;\244\277\266r/\277&Q,\276g\3152\277V\217\273\277\252\275\263\277\322\260U\277\204\376\001\276rJ\244\276\001\266)?\236\0373?&6\252?\347i\013@\210\352\263?TCD?@\274\201<\361%\325\276{N\254\276\340\356\024\277\224\233\342>\3468\257?\216\340\360?u\242\253\277\251\031\276\277\335\314\271\277\277H\253\277B\312\031\277@}\t\277\205\205\350\276X>\000>m\337\351\275\3558\026\275\3423\010=\371]r\277\222\244\375\276txU?6\275\257? ]\033@\241d\215?\363xJ?\346\353\034\277NJ~\277\222\022\267\277\264\017\311\277\332\260A\300\010\206\r\300,\266o\276\362\023\021>\014k\353\2763Z\254\276d\307]\275X\351\231\277\003\003\232\277>0>\277DP\260>\215X\342\276\204\206(\277\t\350\224\276y\330<?TS\021?:\212 \276+\2108\277\350Z\266\277\020\016\267\277\315\007W\277l\301,\277D\354\\>\2279\266?\204T\201>z\225\352>\360P\223?\026 \\?\204\256]?S\255D?p3\034?\342\005N?\000+\307?\216u\007@\204\232\347?6\305\373>\216\002Y?,\361\002@g8\350?l\n @z\260\021@A\351\344?\246\274\037@\036\332\310?\201\034\023@\250\245+@\353J\002@\366\237\312?\256\345\257>\345`\267\276\311\031\023?\300\215U?\252\320\374?OI\336?\304\034\224?D:l?\314:\014?\254\275[?N\331\313\277\222\255\207\277\226\004\276\277N\310\236\277\366\214\013\300\316k\312\277\300\340\320<hL&\277\'\224\021\300\tF\010\300a\3159\300wo]\300\353f\300\277.F\016\300\032|\345\277\270W\032\300\300\345\224?\372\005\241>\374j\007\277\262$\264\277\336U\312\277\336n\377\277\272\312I\300\314\252:\300\342\004=\300!\323\312\277\262t\373\277\243A\275\277\3676\016\277lH\235\277~\312\341\276a\324\017\277\302+\017\2774\2172?=\231H?\016$\252>\0003l;\367\343w=\306s\312>\016\353\264>\204\365\222?\204[ ?b\231\203?\262E\232\276\370\251Y\277\241$\007\300\3503\004\300L\010\037\300AV\345\277}V\002\300\312\036\261\277\300J\355\276\"\371\210\277\222\035\026\277\016\3509\276\240h\302\273`\257\230?K\325_\277p\327\213\277\254\263G\276^\245\273\276\242\205\312\277,\337\237\277\207\250\274\277\2210\234\277\001\035\225\277\2534i\277^\254\311\277\206\311\357\277\323\250r\277\221\204.\277f\353\202>\314v\312?D\031\346>\271\246\255>v\002\267?\242\202\302>\373\004\206?P\\\342=\221i\317\276]\335[\277\355\332\313\276P\352M?\372\263\223?\374\335\262?NC\n@\367F\t@\222\n7@\\<\213>,\373\326>b\353s\276\207\246+\277\3443;\277\346\365\276\277P\222Y\277\262\027\214\276\370_\231\275\376\363{?<b\013?\331\314\252\276\350\317\345\276\236v4?Q\\\246>?\327\310\276!\257\232>\247\222\001\277\276\232\276\277\346\021\262\277\260J\242\276\013\302\371\276y\210G\277`n\"=\275\022\337?\0149\213?\022\363\243?\246\177\301>N\270\377>=M\022?\002\010+?\344/\226>\304\035+=\357\201\317\276\020\277\202=j\252\032?\320\224\274\276\025\377C\277(\250\253\277\356eX\277\234\321V>\251\245\313=\233~I?\210\325\014@\272\335[@\037g\370?\326Nd?\326\243\234?\010\020X\276g\340\303\275\322\236\000?\261]\231?\345i\210?x\364\201?\315{\200?\023\024\364>:>\302?\016\200`?\310\315\236?0\\\014?*1\230?YD8?\224\331\354>\206`\217?\372b\371>\305\025W?P\212\332=\234\006\271>\360\375$?\251\304\014?f\275\231?\374\261\031>s\344\221?\224tU\276F\303`\277\305\3156\277\366N\264>\217~\357\276\206#>>\236\374b?p\226\254?\320\203\215?\332a\222\277\353h\311\277b\343\333\2770D\332\277\275p\316\277\253d\022\300\300\350\235\277\013\202\242\277\230\034\264\277\220\226\027?\341\334\353?/\323\003@\311\305~?gD\371>\234\3003\275[\337\252\276\222~F\277\376\347C\277\210Xx>XE?\277\0202\004>O\021>>|o\266\276d\261\342\275g%\273>T\225\374\276&\032\273\276\264\017\366\276\376\365\010>\220\013\226\277>\224\200?O\333\242>\002\241,\277<\255\305\276\246\026v\276\006\357,\277Z]\225\277\342?\314\277~\346S?\034M\313?\025\207\276?\200V\211\276\\\305{\276\240\265\225\274\343\3452\277\216N\236\276\243\000\306\277\213a\370\277\026\301\334\277\020\265\374\277\204\344\335\277\257\256\224\277^$\300\277\202\360\315\2770x\022\277\326%\030?T\006a?B\237\215?\272}\203?\327\225\363>\340\022\240?\240\261$?\230\211\305>@\342\t=\037\273\025\277\224\200\236\2770\306\230\276\034\266D\277\250_Y>zg\251>\300,\376><GT?d\312\006>\210\365\250>Z\\v\276H\016\251<\320\206\270>~)\215>\201m\025?\274\372?\277\222r\235\277\230\223\260\277/a\021\277NU\271\276\236Ux>\2363\036>\022\221$\300\270N\232\276\000\375b<1\241@\277\366\tp\277\320\323\235=\022\004\261\276\307\360X\276X\323\034=\345\362d>\257\260$>\350c\227\274\312V\346\274LX\254\277M0\201\277&\213\331\277;\022\235\277\352\315y\277\\<\222\277\370\003[\276\030\361u?J\2314?\034\014[?M\025*?\317\'\314\2770\306\331\276B\370\272\277\256ff\277j\223p\277\010\325[\2776T\r\2778\006!?G\004?\277|\340\"\276\350T\014\276*-\222>\250\205&\277\256p\212\277\020R\257\277\371t\006\277\374ck\277\375\020>\2778S<\277\033\276\267\277\232\005L\277\367\332\203\277\212\037\345\277\313@\213\277fqH\277\243z\264\276\245\263\006\277\3463f\276\310\031\263>\270\3224\276\354+h\277\014\221\n\276\332&k?\231\336\"?\356\202\211>\202p\352>\271\200\257\276\301\203\305>\330\2146=\375\306\001\277\372\372\341\276\032KC\277\342^6\277\244&g>L\324I\2772\246\177\2776\353\230>X\320N>j\364\r\300u\324\306\277\251\372 \300\r\263\002\300~L+\300\330\326\262\277T\305V\277\t\r\304\276Ej\332?\367\335\245?EH\224?\220\251\014\275\023,\246?L\242\255?\322\032\177?\354\242\270?\272\2342@\315\3517@\234\242\340?\233*,?\307\364\317>\202\307\213?\353\373j?\302\347\r@<\310O?\264\250\346?\257|\232?H\264\342?+N\273?*\340C?\260\224J\276.R\240\277\010\365\216\275\230\262\035\277\224\t\231=:\027$\276\026EW\276\374\331\317\276\035\001 \277]\004\237\277\343w\305\277\020\342\227\277\330~\003\276{o\232\277\240 d\275{\035\354\276\304\2364\277\334\236\017\276tR\261\2778M\273\277}\235\223\277\022{\326\277\320\023\021\276\036\232K?\233\002\312?\220ya?\200\030\024\276:a\200?p\017n>\353\307\021>)*\311?\233\253\343?0\320\023@\312}\213?\317\265\302?\264`\250>\310\000\033=\234\327\002?\315sD\277\366\336\265?\3021\004@\211\005t?P\244\\\274\340E\237\272\305\230\241?`\220\356?\260o\355?8\013y>\3424\343\276t!\007\277\204\364\006\276i\006\223>5mQ\277\227\322\016?\371\311\005@\2263\254?\026b\376?\322O\210?8\rS\276\225\313\343\276d\354\206=\235f\033?\2215\252\276\262`.\277\250q\344\276\034\344\346\276l\033\305?\013\323\231?\200\216\332=\20790?\022\220\223>\244\377\030>\352\260\320\276\000Ak\276\375\323\002?j\372\251?\224\252\200?\333\220_?\232\r\254?\024\307\321>!n\305?r\224m?\300(\003<\\\214\013\277\332\374\337\277\0326\365\2770D\314\277\010\303\347\277\002T\357\277x\230\267\277\364,\'>\330\337l<B[>>\372I\272?h\226N@\330\3570@2\204\014@Zh\036@\316\256\026@J\023\300?&\303\276?\240^\221?\313t\014\277\000\016\t\275\243 !\277\0256!\277Fc\361\276\310\373\312\276\276\223\002?\002\360/\277\256\377\265\277\260\2500>\356\306\221?do\222>A!\023\300C\216\366\277\014E\014\300\200\314\r\300r\270\002\300\337\334)\277A\251\200?\334\024\365?\206\246\231?\257\373_?\277\277\025@5}\010@x2\007@\350Y>?\350\335\324>P\367\200\274\244#}\277\377\220\244\276\017\033\231\276lx\244\275B\344\246\276\250,E\275U\206\355\276k\344\201\277\244\272I\277P\362\221\277\261\337\200\277G\310\027\300\255&\225\277T\0254\277S\222A\277\260\220R\275\3430\245\276\3147\037\277\300%\n\276\313\371G?*\241D?<\305\226?<\274\002>\350\037\236\276\032\267\255\276\010\336\035\2771b\276\277\226\274\241\277\354w\230\277\276E\303\277\241t,\300\000\253\370\277\233V\014?\320,\320\275\321\2657?\006\363\310>L\313\003?%>\207>\372G\310\275\200\256\265\276?\261\253?\021 \021@\324Y\261>\031\356.?\310\240\221\275\267\236A?@o\356=\370\223\346>#\344}>w\201\264>\354V\206=d\365V\276\246U\372>t\335\305\275\310/\036?\3046\230>\312\033*?\252 T?\260\374S?\006y\303>lBM?\200\243Y=gr\237\277\374\246j\277J\036\242\277\267\303\307\277\004\273\345\276\236dT\277[1\377\277\272t\226\277\030\347v\276=\266\222\277\340\220\255\275xu\022\275\031\332\027\277\343\240i\276&\353^>\032\232\010?\310e\343=\367\027\260?\022p\243\277(\364=\277\002\246U\276=s)>v\224\241?\2237\220?\000\347P\276\003\325\200?\321|\215?\325\340_?\370\005\261?$\247\327?2\n\256?Y-,@\350\316W@\324z\024@\370t\037>\255\316\320\276\\\327\217\277\277\025\357\276\230\027\344\276\367\251\201\276y\232@\277wE\231\277\024L\242\277\024#\233>>~\235?R\344\226?\335\324\257?|/P?\001\035\260?H\342[>\344VP?\217q`?\230\240\251\276\016\t!>\034\332\307>@\235<\277\344\014V\277\327\243\223\277c\014}\277~\241\371\2764\224\247=\343HC?\3170\210?/k\211?U\340\037?\377\023\200\277\260x\333=\353\331\250\276R\337\020\277Y-\336>as\220?\234\003\000@HUa>F\n<?\350t\217\276\374\362&\277\351W\255\277\304\317\010\277\334\301\203\276\210\233\355>\n\247W?\260\361\006?h\340U?\366\234\333?\211$\305?\250\275a?\300\215\027\275\263\273 \277\354{0\277f\267$\277\027\005\227\277\002I\347\276\217\354\256>\010\007\013?\006\322\237\277hEU\277\273\327\215\276{\005t\277\274{\017\277\213\334\213\277\366l\241\277\330\230D\276K}0?e0&?\342\016\006>Q2r?\023\360\037?\255.2?*\340^?\313\315D\277\354\222\017>\361\010!?\\\034\200?\035\200y?\216\301\326\276K\310\231\276<\370\030\277\262\301\226\277l\205\017\276\340\271\270\276\222\225\004\276\233\264\'?\177\220\317?(\004\006@H\252\027@}\2233@@I:@z}H@87\036@\345O\334?\352X\204?,\277\216?\303\017\325?\006\372\302?T\270:?``\231<y\212\342\276\3307\355\275\237\236\007\277a:\271\2775\216\231\277\214\305p>OA\203\2770l\230\277`\267\351\275-\027\003?\030y!\277\317\236\031?\331\377\264? \355\252?\224\227\026@\362\220$@49\335?3 8@\2772\007@\253\257\326?Vo\002@+\025\r@@S\373?\"\031L?\336\332\215?w\001\t?U\261p?(\004\210?\253\276\350>`\346\344>h&\343>t[m>\324\334<\277\334\347\365>\224\002\177?\030\301\321\275sa\304=\317\342g\277\3656,\277\265\367\245\276XIa>H\356\233\274\036\213\037\276\214%\243\277Z\022\023\300\202\317\235\277\332\370\364\277\222\031 \300\305\352-\300\035\265)\300~\344\226\277\353\303\025?\320\'\336?\214\231\203?$\242\276>0\216C?\202\243z?jBz?p.\212?~\357\310?\354\013\325?\363\256\230?\003\"h?5\321\317>\311\350\265?X\014\n@\270\013\t@\344=\342?q\261\330?!\352\212?\200\336\355\274\227\222y\277\212\216\\\277\214%\205\2774\201J\276\200\353\360:8\262\205\277-\212U\277\032\307\201\277\202i\n\277\230_\022\275B\013Q\2774\021?\277t|\025?<E\225?\250y\365?\240Zl=\233C\233\277\356\271\306\276v@\201\275t\213S?\030\231)?\302*\203>\032`\215?{\332\241?\272\203\375?\267\246\234?\204\037\304?\374\241\216\277\255\302f\277\364gL\277&\303\256\277~]\333\277oD\033\277\016\252\002\277X\346\303\277\332y\214\277\312\030\002\300\352\303\223\277\034\233b\277H\004;>*\366@?\010\224\227?4\356\351>\322\340#\276\364bA\277\"\265\306\276m7\200\277\370\365\r\276\'\003\033?\300+\206=\324>\024\277\332iL\300Uk\222\277\024\260J\277\266p\356\277\210t\320\277\240]\'\276v\331\024\2760.\331\275xa\250\274\217`\310\276\342\323\212\277\370\215\240\277Pv\330\276\256\341\341\276D\016\357\2763\005\227\276/\345x?;\007\337?\350;\207?<\235<?\252C(?\014.N?\364\277e\276\020!-\277\267\262_?\242\030\232?\204\021\222?m\354r?\360\372\247?a\321\005?M/$?P\345\275>p\244r?\016\r\307?\367\'\242?\234N#?z\365\215?\315\2356?\232\032\023>\203\250\025\277\274\333\271\2764\320\255>6\366x\277v\366\r\300\332N\260\277\204~\033\276\001\326\355\276\212\316U\277\373\017\001\277Bl\317\276\021\344\307\277\346\207\345\277\240\366\243\277X\025\202\276\322J\371\276w\226\314\277U\310\322\277\201\303\266\277\250\177\235\277\253\253l\277\3121\277\276\366>\243\276\240\232\361\275]\255v\277\311$?\277\310\026\227\277\300\014E<\314\0204?0\t\023> \021\270\277F-\374\277\010X\200\277\300\354\025\277\033\332\362\277\215^\242\277I\021\213\277\246\n\275\277C\335#\300#\346\354\277\347\264\r\300\273\203\003\300\224\363=\300h.O\300\354\3359\300CSU\300\357\"F\300S\327]\300\324\215)\300a\2605\300\241\301\307\277\240*_\2757i\n>\016\216\227=}\247P\277\200\000\007\300\013v\253\277r\367y\277P\345y\277\t\247*\277\356\235]\276\245\027:\277\205\302\261\277\233\344\232\277>c\201\276\322L\031\277,\245C\277\n\222f\277\340\350h\276;?y\277\227o\357\276\216\201\224\276\241\240Y\277\236\002y\277\330\245\242\277\230*T\277\030\374\270?\310\332x\277D_\336\277\310\340\211\276\270%\364\276\274A\017\300\275\356\005\300\340]\264\277\252t\321\277r/ \277X\026v\277b\r\217\277\215\370\227\277\266\340\355\2778\037*\277\266\355\237\277\374\221\010\277\316\207\030?\254^\t>\034\352\373=j\264\373\276H\331^>\311\315\020>\221p\004?\tL\035?\205Bt?\3603\254>\340\376\'?\220\316\360\275\324\000\217\277\212\247\311\276h\t\331\276\263\214;\277%\376\200\277\325_t\277\254,4>\010\331\320>\310\323\000?R:h?\017\264k?\"j\237?tS\237?\334,\276?#\212\273?\367\206\021?\204\342\313=B\233*\276\021fa\277\220\203\033\2754\317\215\277\300D\263\277\331g\n\300\204\253&\300\2105X?=\350\270?\"}1@\210\371;@^\232\021@xc\271?\024\342\251?\216M\n?2\261\020@/W\005@\377\314\316?i\360N?\r\242K?\210\360\333>\326}:\277b\262\326\276Y\3304\276\030\317\321<\305c\000\277`\310\351\275+E\341>\316\n\313?0\345\216? \017\303?\362\025\233\277\376uA\277@\204\237>v\031]\277\004\232\010\276\366\353\261\276\017\362\326>\270\253x\275c,\250?<\037\374?\307\303.@\370\246/@\257\324\023@n\341J?V*~>\236\346g>8\261<?L\335\266?l7\376\276)7\215\277lnK\277\206*\331>V?R\277\240\357\340\277\330\327\373=\330F2\275\224\352f\276\364\371\307=\263\203\216\277\331{g\277\204\315\352\276\002\207\n\300\262\246\"\300\366bg\300\337\020_\300\303\367:\300(f\302\277\216\260j\277\324\021\277>\364\"\002\277\336E<\276\017\341l\277\344\"\250\277\n]\020\300\273X\361\277\374\003\361\277\300U \300\201\204\017\300ZF,?\037\233\271>\200\034\334\273j\236O>\347\341\001\2774*\021\277\3218\225\277N.\266>\264\325\301?\0246\317?\352\356q@\337!\026@\303\346w?`\2013=\264\204\262>2u\367\276\256\350S\276[\"\220\277\212~\310\277\352Ix\277\024\021\306\277\226\345\316\277\350W\373\276\032\313\321\276\302\333\224?\223\252Z?\031\336%?\200$\210?\277\275\342>e\226\315\276d\210\305\276\336\340}>\357\321\210?r&\276?4M\223?\254<3?\311\372\222>\016S\n\277V\274-\277dK\005\276\001\023;?\000\275\177?In\230?\036\001\267?\200\2256>7\'\226\277\350\333\250=\326\3478=\332\277\'\277\017\355\n\277~:=\276#!\021\276\3516p?\261\342)?2\025E?\256\215i?\220\252\223=\245\216\362\276\340\021\177\275\\\325s\276\333/\246\277\224\234\333\277\014\243\363\277?\364\250\277\365\021\206\277\020Q\002\277$e~\277~\373\352>\362\251<?\202\002H>B\3602?\241V\023\277\211\031J\276`y\273\273\301*\030\277\2301\017=y\337C?\362\024\217?\316\312\214>\332\241\021\277r>j\277P1\301>\332)\236\276^\0317\2770 \374=\256D\306?;\021 ?\340r\307\275,\227\276>\230?\354\276\203\204\365\276(\021\316\277\223\354,\277\370\202\255\277\200.\242=X%\266>|\324\\>B1\344\276~b\247?\022{\261>3p\227>S\200\260?\300:\006\275\031;d\276n\245\n?@\002\227\274\204\262\236>\333\257V?Z\252^?\270\344F>L\030??\356\001_?\226JM?\240\265\337=\352\237\306\276\202C~>\022w\307\276_\000\253\277\013\031\242\277\207\310\362\277\023\326\213\277L\352\252\276\206\244R\276qe\240\277\252\332\313\276\3034\233?\007\216\032@\006\2219@\214AX@\245!\"@l\314\244?\305%\"?w\001)?6\211G?\255\005 ?\032\263\277\276\006Z\014>\246\276Y?\256\242V>\205\0171?p\017\246\276r\3438\277\000<\207;\343\241k>\214\335\312?@\3460\275x9\236>\366\353\342>\212\316\235\276\023\273\307\277\351y\016\300\272\376M\277\010!\324\277\322\033O\277n\244Z\276\324y\323?\231\034\203?<&0?\207\371\032\277\"\230G\276\220\235\366=\352\013H\277k\270\325\277\300;>\300\244\233L\277\353-N\277\010\227\215\276\3747b\276dI\354\277\373\217\232\277j}\261\277\310\027\202\277\024\316\002\2761]g\277\210i\233\276\213)\274>\204\2542\277\211\214\\\277H/5>\266\376\326\2760\216\376=v\327r?\302H\242?w\251\202?\r\311\327?=x\030@\314\327\373>\226\343\014?ka\224\276\231\034\256\277\242A+\300\034\353\273\277\302\002\331\277\355\302\263\277\2177\005\300\256\005^\300\035\327\017\300\022U\265\277\220\246\014\300s\365\'\300\334\246\002\300\022U\251\277&%\366\277&\257\336\277\224\330\030\300\010:\035\300\246\025\221\277\023IY\277\"\372\226>\346\307\363>\t\217K?t@\377??m\304?\341U\225?&\320\214\276\3542\225=\230\000\375\276R\014\311>\214\272\244=Z\2769\277\243\253\251\276\276\2300>&>J>\252\217\016\2773a\317\276\256\306D\277\"\250\324>\332\000~\276\005\005\307\275\225\t:\277\021\372\256\276\273\243\221\277\000\344\350\272\3700m>l\277\301>\343\037Y\277@\222\356\274\247\330\005\277\354\031\223\277\250\267\370\2774\025\333=\303\252\t?\224&\206?t\253\254?t\254\356?\017\r\212?\360m\310?&Q\265?\3268\350?1v\005@\n\201\036@8k\004@\031\036\262?\006\300c?\300\256\342?\334\323\241?y\':?\2729\367\276\210\271\034=k\353L\277\373/\271\276jm\035?\250e,=\252C\030\277T\372\212=\364_\221\276~2\266>\177\020\365?\014@\313?k\034\353?\340\246Z>\314\010\263\276lI>\277\305\2168?{^K\277\310\336\233\277\274\277\252\277\352\354\247\277\307\231\204\277\356\324\205>5\3576?\001N\256?\356!\203?\232\260:?\320\367\034?\366=>?\022n\213?\354z >x\\\327>xu\276\276\344\020\336\276`K\033\274n0\324\276.6\333\275cT.\27627\313\277\003\204\200\277\362\246\216\276\234\035Y?\260\333|=\202xC?\226\375`?\313\355y?z\313\037?&\216\226?\260\361\274?/\343s?`\217{>+06\277E\016\266\277\203w\257\277\265X\001\300\224N+\276\000]\301:\377\003\210\276{Av\277\247\361\213\276\365=\231\277i)5\300\303}\013\300\036?\365\277\340Q\241=T\005\267=\325\336\224\277>w}\277\241W\362\276m\304\252\277\3265\373\277\250\244\214\277\226L\277\277\246\361\262\277\342\024\307\277\272)\n\300f\004\255\277\030\230\032\277%K\024\277\242\203\\\277\260\222;\276Q\264 \277\344o@>\262\034\353>Tb\330?\270@\355?\240]\031@\377\256\355?f\343\010@\217K\303?\004%\201?n\276\244?\306\327\263?\236\275f?\226\327\177?\020\235\321?\3532\336?\271\374\231?\226\353\031?t\362\260=}\013\301>6\332[\277v\330\355\276\247\371\271\277\326k\027\277\006\002p>\211\253\242?6\242\252?\335\266\r?\003\321Z>@v\212\277t:\275\276\344&\277\276`8.\277@4\226>\032\271#\277q\365\371\276\370\251\227\275\217!8?\364Ld?\360\013M\276\240\370\220=N\265\017\277\366\361\212?\2245:?\236\tB?\002\220\241>\256)\315\276\024\035t?^\346\006?N\246\200?\366\343\203\276\300\277\225\276x\002\240\275\016\302\036\275qG\225>q\230\212?\250\311z?\222A\322?\"&\244?Bi\020?\210\024\366>\032\215%>\222Q\026?>\003*?\313\344[?\023\357\370?vF\236?\256\221\315>\342\'\234=\215P\251\275O\021\257?hv\340?\370\222\302?\2367\235>\336p\204=\000yi\276E\344R\277\247$\256\276\327\360R\276\200\367z\275\332\212N>\346q\224\276\356\313J\276\300?3<\3356Q\277\205\333\020?\322\027\r>I\030\214>\324\326K?\240\177D?\350`\016\276\302\252\315>\317\035\270\277\334p\372\277\250\251\216?\370\350\333? \203\252=\346\003\\=l\252&\276i\332(>\241\377\000?\333 \030?\010\363\005=\300\301\007\277\320\346\242?\200\036\237>\231Cu\277\000\2707:@\356\361\276fN\010>f\362p?\200R\210=\366xt\277\2048\305\277\027\372\366\277\371\302\266\277\247\322\n\300\314\213\374\276\305=\205?@\350\024?\236vp?0:\356\275x\331T\276\3471[\277Z\223\332\277\n\322\277\277\340!k>\342\034\357?\265\263\266?\370e\324?)\266\373?\240\225N=\254\2449?5\360\005?\t37>g\332v?\037\034\243?\360\344\246?@\377\022?{\027\315>rUO?\332\200\216\276\350J\004?\006\343O>0\235\211?\206\361\273>\234\367\026?J\004\261?\252Y\341?\371\261\347?\306\314\212?d\014\335\276~@\033\276B\355\006?\200\370\021\273\240zD\277\022(\212\277\210#\313\277\022\020[\277~\354\270>Tz@\276\010E~=$\360P\277\337\336\027\277\360\'\265\277^$d\277:.i\277z\312\204>\244\204\333>^\334\324>\336\265\207\277\200}l\276I|j\277`\210\007\276\200\275\\?z\253\303?\275S%?\375\312\320>\377\337\001>\315$B\277@\360I\274\207xl\277\010\322d>\342n\234\275\224Fj\276\204\331\256?\026\023N?*\337\300?\307\001Q?\212\247\301\276\'X\213?\007\212J?\210\367\204?\304\234\023@\340E\270?2\245\n?\220\245P\275\345LD\277K\372J?\026\031\204>y\316\n?_a\177?\340\\\372<\256C\342\276`;N\275\036$\205\276\037\332\225?\332\360*?\234\244i?\010\321\375=>\253\316\276\271\033O\277J\302\327\277\344\t\024\300*f\324\2771u\261\277\366]\r\300\260X\326\277WA\217\277t\247B\277\334pf\276G\352\373>@\\v>\344\310Q\276\207p\323\275`]:?\266E\000>\357/\246\275{\242O\277\305\263\004\277\371a\351>\342f\016\276\377\002\307\276\004\3068\277\300\212\223\275\360{\340\277\340a\253=^\243#\277\013mW\277W\337\330\277W21\277\373\303\037\3005\203\377\277\325\346I\300V\253\034\300\343\370\022\300\270\341E\300L\202\311\277\274\226\005?\002\2412>\265\r[\277\022\234\302\277\016\315\276\277!_\002\300\231\322\336\277\351\223\274\277\027\006\263\277\222\013\363\277\000\222x\275\322\272\342\275\265\257w>\336\332\216>\370\331*\276\344\264\271\276\361D\260\277\314KR\277\014\340Z\276\275\013)\277\201>\223\276%\344\">LO\030\277\037\363\004\277o[#\277W\277\337\277\343\252\016\277L\265f\276\325\366\256>\nE\010\277Z0\177\276\306&\317\276\032\366\030\277\205\323?\277\202@\362\276,\244\351=Zn7\277\000r\274\274lCU>\257\320\032\276\205\343\335>\344\312\235?\275\302\326?\"\327\270?L\006\342?/$\"@rx\004@\303~\035@\"\343\006@z\342%@\2371\210@\236\242?@V\025_?\200)\304\275\024\036\212\276Y\3173\277\2224\210\277\314\2733>F\367\207>?\355\020\276\262\003\027=\343\0336\276\014}L?2\270\203\276\311\\^\277la\325\276\020NZ=\017\203F?\321G\016?~f\276?\200\244\364<\236\370,\275\000\361`;\001\036~\277\262PW\277\215~\270\277\347/\224\277\350\033H\277\270\324\236\277\014w\013\276\335\343\223>\360}4\275\t\323e\277\347 \216\277\216\365\373\276\006q\205\277y\332\237\277\210\211\033\276\317\327\315>\n\215\204\277S\317\177\277H\'P\277\210\205\212\277\262\222\210\277\220\002R\277C\"\271\276\304\243\224=N\222\321\275\272\2709\277\026\201\022\277X\232\300\276\266@\030\277\240\004-?\004\203W\276/\222P\277\222\262\037\277\360\'\320\27538u?`\305\360\275\360\201\n?j\024\220=\341\343O?\r)\035?\2051%?*\323\216\277]\266o\277@c\000\277\373M4?G[\204?\227&\n?\020^\254\274\220\240\270>\030\216\362>\355\367L?rt\250?\352\366)@(\271-@\254\351\274?\255\010\301?0\202\273> \020,?\303\234\224?J\253\267\276\201\304\r\276\003\2111?\030\310\266>\376\361P?]]\317>\264\370\311\275Z\226\270\276\035\266\264>\207\202\250>\034\210c?~F(@]M\005@8\205\367?\220\r\331?\376\243Z\277\263\331B\277\240\201K\275\352\364\247<\354\322\031\276\377\237\277=.)\235\277\030\246.\277\020\336\377\277\274z\020\300\377\312\350\277\364>N\276L\366\006\300\356\344\321\277I!\265\277\200}\032\277\250w\006\277\241q\021\277\257\304\000\277\"\233i\277\246\223\317\277\017\355\331\277X\200\022\300\022!\306\277\337\354\373\277\2346\373\276q\243\276\277\324\035\304\276\374C#\2760\222\271\276\307\256\200\277\234\356\313>\032\307J?\"\373\242?\324\217L?l\341\311\277\264u\205\277\214\302\235\276\000v\225\276\320v\230?\\Yh\276=2>\277\340`v\277\033\306\202\277\000w#\273=I\341>\000\236\355;\314X\030<\020\310\001\277X\t\177\277\250\373>\277\312\024\375\277\323I\224\277-\226\367\276\205\036\230\276\306\254l>\220\r\374\274\315\022\232\2774\350\307\276\351=\340\276\214^\211\276\214\315V\276}\313\203\277\004\270\311\277~\241\373\277\272r\254\277\010\205\214\277\001e\241\277\206\n5\277ri?\277\003\177\331\277\211\320\265\277\201\'\255\277z;\324\277\342\300 \277\304\026Y\277\037I\345\277\360\353\342\277\0007\r\300\355M\013\300~\t\267\277\357B\342\277\004\377\002\300rM\226?B\236\220?\326s\332?Vn;@\021\257N@a\372X@-\373B@\"7)@\334\234\334?\020\253\272?\300hp?\276\204H?\272\313\007?$0q?4\033\373?\034\322\365?{\376\233?\035\310\241?\034\001\321?P \365?\200\3321@\254\234\307?\214\256#?n\317\247?\001%/\300\250\266\255\277\214\310\370\276\264\245\326\277\006\"y\277!\020\033\300&\200#\300\214d\315\277\027D\014\277\010\276#>L\207\304\276u\304\232\276~C\035\277\356\234\276\277\003>\377\277\252\304\r\2772\304&\276\352\214K\277\374\263\313\276\355\317\237>\t@a?\313 &?\322\373\256?\272#\202>\266\225\237?\326\267\002@U\233+@=\355\003@:\013\031@\302\000\213?P\225\014@Lk\366>\362\027\346?\211\206\"@\211\207 @P\305j>\260\224\325<\270>\322?\341\033\270?\313\275s?\365\036\261?\210\004H?0\354+\275\345\353\001?\262,l?\200\t1\275\332\316\031\2776\311\246\276\345\016 ?7\264\206> \346\001?\260\"\303=\207-!>\306\324\265>\340\352\007\277\000\370^\276\320+]>N\252\244?2\275\344>\246I=?/\023\230?3\272\316?A\023\223?\245\343M?\213\350\233>>\261\255>\252`a?o(I\2772;o\276\277~\307\276\356\206\217\277\017\310\313\2764\337M?Px2\276d\215\242>O_7?\314\250\264?|\375\231>\\\3321=n\274\250\277@\213\314\275\313\206v\276\262t\022\277z\254\020\277\2011\212\277\356\256\351\276\220\271\245\277\2669\205\276.\371\255=\231\252V\277\3229{\277\022I\253>\320\270m\276\301\274\257\275\320\360:\277\252|\221\277\344\212\235>\241\351\205>uy\212?\220\207\323?\034\351\324?\363~\003@\021B1@7\314\021@\210\2744@Q$%@W\273\350?\224\227\037@\230\332J?,\314\025>nN\001>\027\243\200>D\270\364\276w&\310>\014\334\252?B\320\223?\245\267)?\256\366\222?bF\002?t\232\201?\350G\220?\370\344\251\277\371\3712\277\270\351\002\277\244\243\265\276{\204\355>\246\334\234\2772V\203\277\032\252\257\277\n\237\266\277\344\017\027\277\005#\326\277(\353+\276\233Jt>\372d\205\276\256h\336>\315\343\034\277\204th\277\240\0003\277\330m\234\277R\306\337\276\367\373\245>\347\365\201?\301\367\224?\304\320+>\2468k?Z\235;\277\224b\332\277pr\250\2758\204\006>W\225\254\276\006\356\032\276\356\326\r\277\006%\213?wM\205?\320p\343?2\256U?\250\005\262?}\244e?\243\361.@\356\215\307?~\030#?\367\341N?b\206\325\276\324\337l>\336\327\224>\341\030\273>\010\371\221?\355\304\014?\374?\365\275\010\222\321\274\026\241>>\252\243\\?wu\277?\320\361s?\306w7\277P\253\341=<3-\276\007\024Q>\367\2747?\254\377\371?$\351\306>\000Y\014=\353\003\352\274}\261W?\230R\341>\312:C?\026\275\223?(\246\'@S\237J@\250h\034@\274\264)@4y(\300\202\362.\300\227\372\031\3006}\037\300g\001\n\300\335B3\300\200\306\316\277\247\361\234\277\230\300\022\277\230w\017\277\2266\242\276\201\265\203\276\274z\023\277\374y\222\277\t\337c\277\272o\254\276`\304Q\276\306@5\277xv\230\277\304\242\236\277|\360\n\277\300!\251; \211\264\276\n\273Q>\260\247\221\275\312\377\230>q\357\257>D\014Y?\210N\263?\300N3?0*$\275\340\207\223\276\236\246\005\277\000\326\236\277a$\n\300\235>\322\277|\311*\3007\272\001\300\276\223\263\277\030\222\275\277\000w\001\300\220\0079\276.\035\240\276`\022R<8b\326\275\006\344\320\275\200@\327;\3720=>\334h\367>\310\247:=\003\267\216\276\350\213\032\277\030\276\255\275\"!\264\276\240\252d\275J\344\206\277\257\307\200\277Kz\252\2770$-\277\274\330\325\276\364s\224\277\226\313\t\3003x\035\300\033I\337\277\361\016-\300J\\\325\277\321\315\247\277\217\355\304\277\330\244N\276@\357\203>\206Z\003?X\234!>lU\'>\236\316\260\276\341\214)\276\"e\255\276\370\274\215\277\340\242\367\277\340\375{\275\025\376\336\276\202\017\241\277\335I\202\277(+\017\277\212x\243\277\034:\022\277\246P\230\276 .\227>\036H\315>\030c1\275\244\223\311\275N\257\344=\262U\262>\220\375{?\217\256\324>\200+\317\274\312\177\241?\366\"A?\326/\373\276\210\373-\276\336[\342\276|\366\306\276\325\"\244\277\340\271\325\277\003:\304\277\200p}\274|2F=\335\006\264\276\034\263Q\275u\277`\276\204P\337\275\367:+\277\357\357%?`+\212<\010,\212\2765PG?\030|\321>\206+&?\272*T?:\345\335?\323\177\264?x\273\037\277\026\007\032\277\374\031\337\277:\262\022\300\334\363\237\277D\204\357\277`\274Y\277\224\313\024\277\246\230\204\276\000\301\244\272WiD\277\320\235\335\277<\003\214\2772\200\204\277\256\210\233\276\352\356\354>\031)8?F\225W?\002_\232?\350\t\032?\000(Q\272\377\317\r?\362Z\343>\2714H?\230\234\035\300\340\031\007\300\214\214\261\277\375\203\004\300\377s\277\277\302CA\277\034\307}\277\257\354\323\276o\252\240\276co+\277\3243\222\275\370\013\304>\022\2279?\365\251B\277\363\362\256\276\006\331\036?\312\213\223?g\356\004@@\220\242?^\307\005@\215\376\022@P!\363?\230A$@g\240Z@Y\"\017?\037\263\243?\310\320s?\3421\312?8\024\271?\210o\236?r\331\003\277k\333\300\277@\343\256<\0010\350\276O\322\275\276\026/\233\276\242h\356\276\242)\002\300\226\225\364\277\3260\036\300$\t\377\277\273\334\254\277\"\354\205\277Q\316m\277h!J\276\304\030\014?\246\205\323?B}_?,K\312\277\360\371\257\275\272E\276\277-\2530\300\364|\344\277\'\r\313\277x\243m\277J\315\255\277\026>g\277T\215\240\276\230\257\304\275\347[8\277\006\250\262\2777\336\031\277KH\205\277\273U;\277\206\333\252\277\226\205\353\276\340\340G\277\350\005\032\300\332\236\357\277\t\246\006\300lJ/\300\303Vc\300R\217)\277$\031w>\216T\000\277\277^\363\276`T2\274:\274\231\276HJ?\276X\330v\276f\325=\277.\317\273\2760\233\033\277\342\220\223\277>\013\316\277\277{\212\277\204\002\020>d\376?>\277^\253\276m;\264\277\025\261\247\277\227\365?\277\224b\001\276\277F\035?\340:\261>9\256\224\276L\212\200>\020\312\331\276\300\323\023>T\016;=\364D\216=\333\032G>\227\'\222=\002\\F?\234\210.>!nL\277i\245\204\277\3235\223\277O\352\236\277\205\204\213\277\241K\177\277\337\253|\277\000\023I\277\003\213\217\276B\232T\277\377\207\222\277\204\312\036\276\031#\265=E#\376>\334\200\'?D\206\352\275qat\277 \367\r\276\235\227g\277\\\302\201>\032\235\304>\340Hm\2753\356\250\276n[\266>\"\020\004>\226\363t>\200\251\345=\032\230[?\255]\243?pC\036\276\300\222\n\273zVI\275\376[\300\276\\\212\231>\r\322~\277A\247\231\277\210\304\254\275/h\262\277 9)\277$\233=>\265|\020>\320\366\266?\354B\312?\260X\275?R\370\271?\366\025\361?|\356\344?~\266\272?\327V}?fW\027@\300PU@\231\242\202@\244\262a@R\"?@P\240\335?[<\014@\211\272\324?IJ\342?\271\320-@.\312\366?\246\'\024@\177r\014@p\203\t@\350\317\032?lc\257>\262qe?\033\321\226?E\362\251?\006\351{?\365v6?h\352\231?f\216\262?)h\002@\301:^?\034\346\257?\270\005^?\000\300\266\275\027\377\245\277d\017\341\276\n\322\222\277\003a\207\277\006\036\251\276(\002v>$\273D?\212?\364>\006\330m?Gz\"?\300\234\263>\211Qs\277\350\010b\276[87\276\360\375\222\277\000\020\225;K\360\036? \263D?\177T-?\320G\216\2770\311S\275\377\205[\276\250\211\245>\214\241\022?\016\3742>>\014\345\276\352\342\220\277\377\351\003\277D\337\363\277r\231>\277E\333\315\277j\027\224\277X\365O\277\223Q\033\277A\265\230\2759\034\265?\254\016\006@Z\366\222?nS\265?}\263\223?h:p\276\004\312f>\354\340\013\275\226YH\277cj\207\277 \273\253=Z\333\225\277<\355\224\277\333\317x\277\000\254\366\274\327\177S\277N*\303>\365F\220\277\262\373\320\277r\355\002\277\247\024R?F\343\232?\277\016\027?[\035\016\277\020K\255\277&\352\200\277(K\333\276\207\367\023\277\270\311\201?hX\204? n\305>(\345\247>\334|6?\200\215\233\274}\000+\277$\2026>t\000\245\275\013\2746\277\2447\005\277\257\r\263>\010\206\221?\250\t*?lT0>\221*b?lWP?$?\277?Gi\222?\252\213\024?X\317\274>\032\351Z\276\372;\034>T\001\224\275BC\277\276\260\016\377\276\004\037Y\276\355\000\254>\n/U?`\036;\276n~\006?i8\213?\016\261\t?\014rr?}\2376?P\363l?&\034\035?\331\370\212?\347\377Y?0U\347>\035\247\226?\334\215 >M\010\202?hm\'?\360\033?\277 \316<\277h\201\251>\"\304\243?H\217\233\276V\206\004\277 d\016\277\310\207r\277\033YC\277\272>a\277\214\022.\276\033^\365\276\366\274\254\277\324\316\202\277ZW\254\277\262\267*\300\250@\243\277\232W\323\277f\t7\300E\221\000\3004\343\260\276\347\267g\276\006\235(\276\312\004{>\2501\321\275\025\006\221\277D\021;\277\330\274\\\277V\"\216\277\230E\214\277\324\312\177\277\030\254\332\277\022\345y\277\223\003\001\300\273\211\263\277~\365\373\276\2256k\277^\315\321>\365\300\301\276\252\033Q\277\356-?\277(\004\263>\025\341\220\276\000\257\332<\365\246\213>\336\350\231\276\322\005\364\276\341f\216\277\341\246{\277IY\233\277\227\327\\\277\3046\221\276\312\353\335\275\311\t\n\277\355\022\247\277B\000\034\300\n\213\266\2776\356\260\277\222\246\306\277`\207\304\276t\300%\277\360&\315\277\270\231\325\277\005}:\300\216\260x\300\356\270\351\277\302\370~\277\232/%\277\321\034\022?.\211N?\365\032\341>\024R\360\276\\0\315\277\030\323\230\276\316>\341>-6\227?tJ??4\2541?\200\367\267>\247\307\362>\241\006\302>\246\227B? \207\352\274\023\326\361>\036\nZ\277Ph\030\277\217\360%?\022\025\212>\360\236\306>\240\312\310\274\2222\333=\030.\226\276\246\224\260>\346\314K\277\316\264]\277\213F\245\276u\332\277>\322\335O?\260\302\345?\n\305r?\203/\003\277\205\016\301\277\360\233\220\275\355\3573\277\234\177\376\275\246T\005\277\240\336\237<N\222*\277\210\001L>[\222\023?#\205\305>W\262\016?\375\210\261?\302%\255?\324\203\350>\3114\247?\3316y?R\333\245?\314^{?\'\341\344\276\222\312!\277&y\251\277\265\365\212\277\333%\237\277,\365\006\277\370\201\242\275\337\214\004\2760;\361=\263\306\246\276^6\225?h91>p\234\036?\026C\271>(\324\316?\336\237\210?\013\200\203?\202/\312?\331.\376?j5\260?\357\370\334?\250f\020>\021h\346=\316\347S>p\270\221>d\211\230>\234\210)\277/7\341\276\302\202\205\277&0\204\277\365v\224\277\216Y\311\276\270w\230\277\177XJ\277\026(\000?\337\006\r\300X\037R\277\244\022\000\300&\210\\\300-\307X\300\367<P\300r\235\346\277W\213>\277xA\245\2758\371\235=\317\325\010?\244 \333\277\212P\371\277W\020)\277\335\002\260\277\360~*\277lq$\276~&&\277\300\362\306<{\236<\277\353`\245\277\001\021\225\277G\265\311\277\343\r\312\277\231\342\241\277R\215\252\277}\\\245\277}\010\321\277\026\030\330\276y\277\255\276\200\332m\277h\013\261\275\n\350\212\277\266\\\312\277OO\267\277\234s\351\277\246\346!\277\317\236V?R*}?\356L\263?\n\252R?\330\350\221?\006k\341>i\247#>\374\216\246?(\1776?\232\311\017?\250tY\275\361\371\263\276\224\013\001\277b\375\246\277\037\253\217\277#\260E\277\215\354\026\277og\022\277`\263\275=I\305\205\277\\!\233\277h(1\276Gv;\276f\321.?\026vy? \355,?n\255\020?N\210\300?N\\\314?i\350n?X\351\302?K\214p?\340\215\206?\020\323\235?\031&&\277\244\274\250>\235\224\013?\314\223\257?\010\024L?\3647\317\276\354\332\372=\250\216\335>\0074\261>\357\024\233\276\252\3172\276Xg\372>\271\003\215>0\225\212\2768\311\362?\241^3@\006\030>@UF\010@\3070\272?\226\3639?UD\354>bt\225?z\345f?e-\026?\224\302n\276.s+>\313\237\222?\200\315\213\274kR\375\275\303\223\003\277nON>Y\265\232?\356\243\004@\370\2200@\272R\035@\270v\014@\320>\241=\244\013\310?\3669\004\276\343o\247\276\344\203N\275\3244\305>\235\273\333\276\274\022\225?\315\367\332?\252\337\016@\227\221\005@\n\350\256?\237=c?\236\036h?E\320\277>np\275?r\341\\?\021.\t\277^\024\034\2768AB\275\\|1\275!Rk=\343\211\307?\024\337\002@(E\204?b\346\237>\300\365\315>\244\312\305\277\304\025G\277\311\254\014?bVW\277\330\205!\277\276H\206\276\372\373L\276\300\001\366<\345\345A\277\016\236\270\276\204k\353\275\'F\216\276\340\002#\277\035G\223\277~\235\312\277\211&\022\277\244\356[\276\356P\037\277\232Q\000\3006\222\336\277\310\352\273\277\257\022\253\277h\002\267>\303\235\374>&\315{>\226\2172?\220\323w\276\n\033V>\207]\204?\002\370\'?H\020\035\276\256\0338\277\256h\376\276\025\020\177\277\220\201\017\276L\272\320\276\320I\"\277z\207\315\276\242N\360\276\344\233\266\275\376\356\244?\262\207\254?\350\212\307?p\366]?\261\002\001?\255\374\306?&\205\307?cn\037\277\365\\\364>l\316\357>X\036\356\275\2310\322\275\014G\277<\013U\270?-0_?\344\030j?\2208/\275\274\016\003\277\215}\347>\030\037\230\275\240A\024?\227*x>NUp\277 \037\010\300i\016\272\277\304\374\301\276\340\301\024=]_\335\276\302:,\277j\200\276>\360\361\031=\346(:@\261S\356?\344\026\036@pN\010@z\227\371?R*\226?NG\365?\233,p?\336\225\317>\024\363{? \375\223\274^\232\375\276o\253\032\277\314\333i\277\360\305d\276\320lO\277T;\224?\277E\335?\202u2@\262\020/@\240\232\r@\n\346\373?9\343\363?y\246\354?z\222w?\266p\320>\306\224\361>l5=?@\030\250<]\220\251>\300#9\277\317\007$\277\034\211t>\300U\t\277\220\312\007?V\231<?\274\350\303\276\230\250D?W\251\202?+\177\030?\236\tj?\266\373\314>Z%#?)\312\254?\'\260\241?h\203\264?\301\203\000?)1\311?\240\357\362<r\263k\276n\340\362\276\026\2436\277vU\227\277\317\2705\277,\336j\277{\226E\277F\201\337\276&\363\263\277`\253\006\300\000\363\017\277\332\316\256>\210KT?\356\027\325>\310A\234?\225\"\244?\350\222\026>0\205\023?\244@]\277\372O?\277\370\270\242\275\304\327a=\336}\021?\2352\342>:\"N?\314\216\236\276\265\274\242\277\262/m\277\025[\321\276\251\276\315>Lx\340=\252\333\217?\333WK?\343\371\260>C-\221>+\363e?)+k?F\377\214?\334k\253\276d\037\020\277X\300\275\276\274Kq\277\021\366\213\277\303\031\355\277\336k\020\300\362\271\205\277w\247\036\277\377P\016\276@>t\2761\351\034\277v\306\305\277\241\360\311\277N\351?\277\310\\\330\276\372j\360\2765w\003\300h\023 \300z\365\353\277\220}\004\276\262\030\r\277\326\335\202\276\273[\317\276\236\t\006?30\201?;\021\344?\306\336\245?\336tH?\000\203K\275g,\243\276\364)\\?P\312\027?*Q\323\276\260\377\237=lX\003?L\024\323\275\344\226\202\276r\025\250\277~\252F\277\322\005`\277\216\361\032\300f\371k\277|+\023\300\370g\261\277\226\262\363\276\246\255\002>\340\363\323?\2000\"?\225\3576?\304c\270?\240\266\214>\230\255\010\277\020\246\212=u\026\215?>\017\016@\303\017\343?\301\361\035?\261\363\013\277\211U\232>\220H\217=(\345Y?J$\330\276\270\272\223\276\216\315\265=!2\206?\000\207\344;@\\\211?D\027\201?\324N&?^\263\217?\360Y\022?\266\307F?\025n\317?l\003\004?\342\376\232>\360S\312?@s\276?:&\276?D\322\342\276{\273\256>\250\270\r>\213~\215?\372\371\237?1\007\270?G\226\277?\307\031\237?\350\023\217?\263\307\245?\301\236]?\240s\222\275\022\322n\276\3227\363\276\242<\335\277\202\271f\277h\205\256=\267\365\213>\010P%\277_\205\t?\034\273\207\277l\035D\277P\263\374\275\313\201B\277\211\t\024\277\235X\371\276\304q\361\277\035\375`\277\225K\003\300\002&k\277fh[\277l\330\250\276\036\357\225\277-j\n\300\002\005\034\300$\232\000\3004\230\346\277C\315A\277\020Sw=\274\222\202?4\236Z>\234yq\277\000eB;\232\376Z?g\033\030?\302vX?\370H\376?\340\250F>\322\177\010\276\205\256\300\276\330\356\304\277`\204Y\276\360T\217?\263U\326>\242)\\?\372&\353>\213\374\270>\204\0321\276\255\301\036?\321\350/?h\264\305\2764^\327\276\240\311\314<p\260\343>\264\357\371>X\351\"?\330\376\247?\232\216\350?QQ\364?\220\365B?\313\007d\277\210\234\257\275\224\263\241\276\"\251K?*f\354\275\\\231\240=\224yT\276.\334(\276\227\3002\276/W\215\2770$\017>\320KV\277\250\023]\277\276\013\331\2778\026\265\277\227\330\216\277z\345\213\277\264\362\337\277T\254\232\277j\213E\277\340\0201?\234U\275?\004u6?bwd?t\007^\276\262dF?(3\231?\331oF?\332\303\375?\360\202\265?\326\334\375?\016\222\371?\022\305\231?YC\202?\310\201S\276C\346\222\276c\2647\277\247E\325\277\342\232\356\277\3533\237\277D\362q\276\364D\357>H\212??\200\203Z?\000Y\t\274\342\000\320=\263S\256\275\344y\304\276\332\322\014\300\t\'\376\277\265(\204\2770\316\266\275N\254\007\300@\366b=QU\204?\255&\235?\250\305\304>\034Z\002\277\356\354\200\277d:\272\276\216-5\277\216\006\345\277$7\361\2773\270\302\277\366\235W\277N<\262\277i!\233\277\n\350\311>\031a\365\276\014\242\243\277j\250\026\300,\266\204\277\264\375\251\277\324\223\351\277I\323q\277\020$\336\276\326f\037?\306\334D>\307{&?\274\005i?\2575j?\330\200\035@\306O\005@\024\362\375?\007r\273?nW\245?\312\004\324?\326\364\337? \353\320=\275\305\331>\336\373D?7\316\004\277P\202\252<\356\206\024?7\346\002?$\324\204\277\364<W\276\364\017\337\276x\234\266\277S\032\357\277\207i\361\277\364\3134\277\310i\364>\354\247E?OV\336?7$_?\222\377\263?\300\2157>\006\267|>\276sM> \267\251<\224\276\345>\274\300&\276\034VH=V\374\254=lU\035\277}b\034\277_\t~\276\277\212\n>&\t\246=\200\343\237=\007y0\277\330\261M\276e\234)>\211\376Z\2776\032\373>\035\305\220>`?\264\277\365\317\345\277\326\177\202\277PIo\277\305\213\025\300\343?\332\277F\373\300\277\027$!\277\226$\332\276^\244\303\2770\334G\277w\230\304\276#g\204\277\340\256S\276(\347\004?\010{\230\275b<`\2774\222@\277F5\243\277\361S~\2776\020\r\277\250\245\222\275\302\022\312\276\335n\325\276p\201\247\276\004\017\"?\376\262\255?\255\225\300?i@\367?\000WN?\357\331\203?F\354:?\242\330\263>\351\262^>\270\002\207\276hG\251\275\344\330\212?\006\250\266?\306[H?f7\370?\326q\213?\321:\253?\336\013H?6\"\300?\232\267??\371\335V?\360\273\010@\010g\310?\225w(?\266\260\220>\273\332@?\004\r\336\276\362\315s>\026p\023?\002m\355>$\033*?\375\230r\277\023\216f\277\2639H\277\3566[\277\2325\270\277\226\222\007\277P)\337\274zZ>?\320\2454\275K\2719>N\234W\276\260\207!\275\313\315%?Bl\326\277%\224\246\277#+\232\277\371L\022\277@\344\221\273\220\361\'?\300\341}\276d\223\207\277/<\r?^\344n\276\022>\002\276~\330D\2765u\016?]\271\327>8\376\006=`P\016>\2400\213?\032\005\335?\337`\014@\304\375\235?\\\205\243?\256\025\216?\300+l?\300\201\304?V\346\212\276\036\265\262>L\375\031?\"v.>*\243\301?\307C\004?\252bA\277\022\367\315\2772\263\275\277T\377\362\277?{\213\277\213I)\277\360\247\031\275\243\306u?p\340\271=,lz\277|\216#\277&\"U\276\235\013\354\276$\2267\277\360r\346=\306\375\244?\324\274\021>\020\217D\276\257\332\031@\352\r\263?\356]\231>\372B\241=t\335m\277\370\357\361\277\346\335<\277\"\031\206\277\216\252\\\277\271\273\251\276)6\235\277\n,\331\277\357\377D\277d\335\361\275\324J\233\275\n\177\235?l\001\'\276\372\325\200\277\tK/\300i\247\362\277\311\255\253\277\335:>\300\372\'\264\277F\237\215\277\000\277\356;%x\207?]\377\033\2770m\222\276\006\342\376=u\006\276\277\016\306\236\276\364\337\200\276#\215\263\277\216\221\333\277\001z\272\277y\236H\277\326Az\276p\366\006\276\020*`?\240(M\275`\251h?\212\002\236?\336\216\344?X\340\026@\"\306\240?\264\006V>\272\334\336\276\260\377V\277\016\263\013\277\021\244\367\277\010\003-\300\370|\325\277\230Ww\277Z\260\031\300>\227\022\300*\244\277\277@\264a\275Z\311=\277\344\031\n>\353\270N\276\200\272\203\277\377\007\360\276\312\214\272\277iy\216\277S\327^\277\346\307=\277}BL\277/\246\364\277\343\303\002\300\007\205\330\277\002\254<\277%\201\261\276\236\266s>\006\227\331=&\'\205?\370\342\265=>~@>\244j#?\354\237\236?\344\006\301>\300|?<K\252\266\276\336I\330\275\"hi\276\217\346\222?L9\251>\272;\271?*+\221?\342\325\305>\225T\327?\224\005_?f-\277?\010;\215?L\216\343?\366\267\027?dL\264\276\261\202\262>\032l\305>FI)\276\225\367\004\276\233\002\210\277S\355\003?\033\226_>\224\366\207=\241\027\231?\252\215B@\233\236\027@\202P\341?:\257\315?\245\210\322?\226\353\330?\200\010\320?\335\032\327?\230u\005@eG\"@L!B?\357\270\r\277^\225?\277V\270 \277*?6\277r\023\006@l\036\340?>\030\025@\327\305\031@O}\010@\360\301\353>\330\005\244\277T\276U\276#\211\000\277>r\377>\023\026\236?\366V\212>\242og\276\304:\256>B\2535\277\000\264\327\276$\017\340=0@L?D/\303?`;\357\276\220o\202\276\020/\263=\304\212\263\276\353]\264\277^6$\300\324\222\223\277\244J\236\277p\322\321\275HLC\277\266\356]\277t\365\004\3006o*\300\005#\346\277o\265l\277\237\274\222\276|P!\276<\204\265>\'S#@E\271\036@\311\3530@q \013@\270\355\246?\274\276\361\276\306[\204\277\377Q\235\277\324/\266\277\372,\014\300(\310\371\277`\343_\277!\332\256\277\260Q\306\277[#=\277\373\022\224\277\342M\300\276\314\331\314\276\362W\201>\205\211,\277\254\223\364\277\301\250\211\277\330\264Y\277\030\215\320\275w\211\265\277a\346\226\277\307D|\277\220i\204=\352\314>\275\331J\324>\016\n:\277\216{\'\277W7\002\277b\273\216\277 \271\215=K\017q?\217\304\343>\204%\312>\0209\020=\303c\273?\240\027\261?\326_\264>\314l\253=kI9\277\2005\230>\362\273\024>\035]\255\276\rq5\277\n\246#\2763\332!?\320<\271<\342\3336\2740\300}\277\372\223\214\276J\322\203\277\367\346\256\277\252\013\037\277\220q\033\300\025\311\333\277\326\022f\277\306\352\n\277(ta?r\351\366?\277\252e?D\213\225\276@l\344\276\344\262\202\277p\2036\275\241\376\317\275`\225\326>(\274\030?\010\257\276\276x\244\364\275\325\367_\277\254\217\227\277\004\357\263\277\363\317\006\277\006\227\263\276[\3672\277\005\376\032\300\254\345V\277F\251\355\2777K\356\277H\221\321\277\242\203%\300\377\321\266\277p\212\212\277\"j%\300\002\003*\2779\265k\277\374va\277j\265n\277\223\213\023\277.\272\272\277\303\317\203\277\n\227\344\277`\203\336\277>.\310\276\311\212\255>?\340@\277\376$\023\277\3264\222\276\005&\001>`\310\304\277=V\332\277\222\267\241\277\270\202n\2764\232\305?\0109\310?\211\337\020@ S\305?\310\236&\276Z\244+\2765\314.\276.\265\375\276\322F\024\277\210L\275\277y\027a\2777\032\273\277\003\355\225\277(\007\232\277x\324\372\277\213*\003\300y[\320\277 /\317\275\t\377\370\276\200x\244\275\221\273\250\277\274\340\373\276Ug\235>\230i\024?\310\373\004\3008\325\277\277\t\264\007\300]\246\334\277\203\260\002\277\254\343\276\277\022\200\025\300\362b\240\277\3402\006\277&Y_\277\214O\330\277&\373]\277\216\341\236\277\225N\225\277`\246\027\277\006y\217\277\273@^\277\363\200\267\277$\323\225\276\363.\351>\243zf>1\rN?\002f\377\276\230\302(\275\340(\034? \243\201\275\271D_?\354YY?hy\213?L\363\224?\031\316m?\240#\365?:\223\314?$`-?\004\267\363>\373+f?D\205\235?0\2233\2756\267\033?\375\024\237\276\242\325\310>\"\260\030?\324\275\377>\270T\230=\364\256\032?\351\035\311\276\245\254\342>\361\261\342?`\276\003=)\357\204\2770#\250\277\034\327\225\276.\036\255>DZ)\277O\347\327\276\274#\215>\205d\032?\350\270 ?\245\000\032?n\247\357>\204\220\025?\332\034f\277\313\023L\277\315\022#\3007*3\300v\343\211\277\0279\213\277\366\324\330>ix\305>*\316\227\276\362\212\330>\014\212\353>[\"\262\277B\253\241\277\202\343Y\277\330n\207\275\320\004\203\277\034\306l\276\270zu>\353\357\210?\000\247u?\320\037o>\027&\335=|H\215=\\\212\335>\030\201k=\332^-\276\365D\201?\366P\270?\344\361\272?\274`\245\276\256\342P\277\007\306d\277\246\277\317\277^\266\310\277`\316\244\275\010Y\004\300\030\026\276\277v8\244\277\345oU\277\006\001\275\276x\240\026\277i\232\034\277\034\275\336\276\316\377!\277\250\242U\277\237C\022\277\216i\242\277<\200\003\300~\326\301\277\262\0042\300O\206\220\277\366\314\'\277Fg\345\277\312p\007\277Pb)\277\311\024(\277`,\365\275\374y\206\277\347_\226\277\0165\240=\r%_\276\374\277*=\235\320\357>\364\243\256=\336U\205?\306+\035@\306H\025@\357\235\031@\2658\344?\240\376\250\275\256\3538\277Db\037>\200\346\351>+l\352\276\3545\360>\200%\211\275\030,\332\275\257\177\200\277\257#\220\277\232K\210\277\274C\276\277^\202\262\277\005.\213\277@A\"\276Q\201-\277\345L\236\277{\273\224\277!\033\222\277\204w\251>\262N9\276\214\212|\275L\353\331?\022\274\271?/\266\255?\306|\216?B\000\312?\202\213g?\251\3236?\0301\014?\361g\016@\311P\300?\360.\006?\215\235\021?\233J6?p\355\202?\252& ?\0270G?m\274\233?\347/^?D\270\354\276\322\205N?\256\244\207?wC\264>v\272\243?[CO?\277-\271?\034y\234?e.\216?3\230\234?np\244\2767W\350\277\347\277\352\277X\263\326\277\256\302\355\277OO\333\277V\304\375\277\200\270\206\274\245\200<>\236\242 ?\030\262\216=\202.\236\275!\200y?\315\203<?\232\323F?T\250J?\272!\351?\034\317\363?\306\003\314?\274\317A?\205;\211>jv\211=8\324/\276\206r\236\276\304\277p\277\010\300=\277\261zN\277\360\376\240\275\352\325I=\361\322 >\211\204\035?\317:\030?4\305M>\365\255w\277\263\372D\277\222\203\232\277\014\212\225\276\213\203\004\277<\"\227? r\323?\245\215\237?\254\242\272?\207\304~?\256\333\324?UQ\211?\231nG?Q)\201?2H\330?\014\340\207?\'.\372?\031\357\252?\230\025\230?\346\276b?\255\2641?\226\377,>\366\301\202?,Re\276Ds5?`z\332\274\334f\000\277Ug??\220\223\311?x_\316?\023\321\327?\317\330y?\3547\226\276(E\'\277\024\354X\277<\266\227\277\215\365\263\2773m\212\277\376.\251\277\276\033\004\300\336\244`\2776r_\277\340\255\252\274\226%t\276\r\207#\276\344,\300?\004\214\231?\"\346\233>\356\266\334\275\2669l\276\346\n;\2775\316\210?e \344?\333\226&?T\237$\276\376\020y\277\300&\242\275S\016\023\277\327%q\277\010D\271\276\251[\230\276\253\374\t\277\270KS>;?-\277\252T\317\276\200\331\270\277\016\202\304\277\206\232N\277\335\230Q?\330\327\242?,\366\210?\336\016u?\305\023\030@\213\242\267?&o\021@ \373\246<\034Q\000\277\010\000\320\2766a\352\275\034\305\000?\2041\273=\353$o\277S~\334\276\367\321\006\276E?\243\2762\345s>\351k\241>\240\254`?\201\022-?\000\235\027\273\374I\200\276\353\331P>\274\300\232>\025\302\035?zc\261>\253\336\200?9\374\323>\201[2?|\326\227\276g\020\345?\324p\025?\030\223X\275\372\247=\277\333\2422?&\241^?lA\r\276\205\277>\276\257\177\246?\360\003\027?p\354\246\274\254\321&?\377\301A?\210\321\n\276\227C\023\277\3513\341\277:\261\250\277>\231\240\277\363\213f\277r\024\000?c\016H?\340\353\231?\243K-?\372f\360\276\304 t\276NE#\277\034D1\277\204E<>\204k\017?@*\334\273*m\233\277>\335\225\277d(\014\300bD\037\300\036*\267\277\027d\032\300\374M\355\277\212\001\003\300\276\266\371\277I\272\376\2776\344\314\277\023z\221\277\360=\003\276\310p\202>\213?\273=\315\373\375>4V\221?\343@\232?\224\224\301\276\364\316\010\277\330\255\r?\354u\235?\000(\336<\375\367r?\326\344|?\320\377J?\026\321\013?\314\272\307>\272\024^>\217p>\277p\344\260>\025\020\303\2760\211\377\276t\006R?B\327\366>`\014\006=a\252\242>q\221\364>\023\243\002\277/q\301\277@\220\263\277\216\263\355\277\215\\\020\277\002\361\020\277\240n\007?\340+S\275\210\030\337=L\222v>\275\330j>0\013V?X\277\257>r\te\277\271?\222\277\225\003\177\277@%\301\277\"\357\226\277\252\367>\277\246\215p\277\261\230\342\277\305\254#\300\313\336)\300\275\235D\300x}\035\300\310)\000\300\231\326\t\300\327\373\212\277@\033w>\256\370\370>\322%o?\032\375\343>\177Pf>Dyp=\'Q\035\277\233\225\326>\221h\232>j\342\255>\331\031\344>\002\217\246?\377\241\320?8\274\030@8\022\201?\352\r\215?MH\002\277|Z\n\277\002\r*?\003\206\220?1+U?w\216\362?\327P=?n\014Y>\213/\372\276\303\210\375>\253&\004?\036!\357?\220*\306=\017\313\337>\014\335\321?>\264O@\016M)@\326\251\304?\356G\276?\023\034\202?\331\003\357>H\2550\277\240.3\275/\257P\276\272\030f>\235\243\005\277N\324^?\210id>FS\322\275\013\004\251?\356\357\320>\264u@?\020\351\251\277\214B\312\277\332C\266\277\255\261\222\277\206\222&\277-\242\212\276b\001\241\276\315\006\271\277\244\031\257\277\206\311\316\277\340l%>\234@\002?c\354\317?H\013\357?D\263\227?\217\004\000@`!2@\342\361M@//\360?JA\033@\376k\313?\301\177\263?~\256\002?X\002\260=\332\025\346>\341\245\226\277\271\003\237\2771 \262\277\202\006\235\277\232\347M\277\322\253\251\277\200\247%<%\004\322\276$\277\316=\030\3322>\220\360\201?\233\010b?\261?8\277\314\221\\\276/+4\277\202>P\277\334Y\204\277@\223\276\277\225\t\202\277\262\233K\277e\016G\277j\023\014\277A\220\273\277\246[\334\277\340\241;\277/\372\337\277\245G\n\277\376\350\274\276\302\006H?\252\373j?\375\220\376>\336V\036\277\316{\276\277<\323j\277\342D\344\277\364\330\024\300+\273\001\300\372\271\266\277))\375\277E\020\255\277\326\205\305\277\227\2314\277\304\367@\277\335\221\322\277\003\271\004\300K\027\346\277\"9x\277l\002a? \025\336<!\\Y\2772x\246\277\250B#\276\026\234\344?\010V\027@\321=\333?\\JX@\232\244\373?\371\232\374?\037\014|?\350\356\216?\260b\216?@\256\016\276c \205\276LF\213>mD\"\277R|\307\277[<\266\277\275\177^\277\014\206^>\0300\341\276\312\216\037\277@\216\217<\321\220\033?\364\037*\277H\004\030\277\365P\307\276\364\211B\276\357XV\277n\362i\277\375J\356\277\255\204\202\277\010\203v\2773\007\371\276\254\005\227\277\234LY\277\002\371\234\277^6\217\276H\244\200>B\216g?\270\274)\276\034[\212=\024\241B<b\014\270?\035\300\026?\366;\223?u\225(?\222\360\251\277z\260\365\277\300\034\026\277qB\373\276h[&\277\235?\"?W{\366??\216!?@>X=\014?\257\276n\307\204>\310\204\317>2\332\340>\326\302\355>\242\335\027?\340\274\037>\032\276\255>q\2760? r\023\276dB\327\276\261\306\312\276\000\032\026>1\234\005?\"%\242\277\\A\270\277HCG>R}y?\0019K?\240t\204>\311\342Q>\032\372\306\276>dY\277h!J\277(\025\272\277\257B\022\277\325\252\234\277\202\\\210>\026n\034>\014\267\035?\306\300\023\276F\260\201>\2405D\274]\263*\277\374d\235\277\334@t>\344.\217?\322\214\373>\314\237\300\276W\2648\277V\257\030\277\262\245\330\276\270\333C\277\244-&\276@\360\317>\004_m\277\247\224\252\276>\350\321\276g\223\211\276v\360\324\276\376\270\355>X#\243\275\367]\242\2753{$\277\200P\327\277\026\305\341\277\257L=\277\205TV\277C\035\031\277\307\227p\276$\'9\277\374\014Z\277\222\033]\277Q\324.\277\"\367\243\276\340\016\211\277\002\022J\277\346Y[\276lf*\277z8\214?\300\303\307?\311\273\306?VV\244>+C\215?\356\220R?b\327\227?\323`??\200w\307>{\262\020? \300Z?\230\203\307=WX\034?\376\226t?\230M\337=\326\354\346\276|\304\210?jx\337\277\254\322\t\277\2406u\275Z\311C\277\221\373\037\277\244v\007?\3574\353>l\270\270>=\316#?\340\337\321?\202J\252?\257L\220?\030b<>MFT?`\332\260?\324\016\035?\300\2409\277d?\031?g\025\\?x\367\224\276j\200#>\322\207H\277\312\370\304\277\320l\300\277\340\253P? \301\333\274\033\021\246?6\370\367>\244N\322\275O\314\026\300\353\231&\300\310P)\300\001\364\357\277\006J\324\277\242{<\277\232\r\204\277\303\303\270\277M\375\020\277\240\300i\277\350\366\036\2767\343\027\2761\255\362\276k3\235\277\004\000\031\277mk\260>oW\r\277\013\322\244>lf\243\276h\207\267\277\210Nx\277\000\277c?:\253\244?\377\344\001@\213\031\212?\277dA\277,wB\277\340\360\027\277\236u\236\277\222\323\231>\'n@?\272\225\204?;\216\341?n*\205?0J\n?Y.\354>\334NL\277\356lx\276u\202\031?\372\203\333>\201\223\320>\342\372\244?\323R\316?c\232\021\277\367a\307\276\373\202\212\276\322\357\007\276\275\264s\277\323\223m\277s-J\277\022\262\227\2764\002M\277\004\020.\277\366\037\215?;;\236?\n(\177?\250\261\177>\200\240\361\276B\t\335\276ffX\276\212\270\241\276\236\2016?\345\363\203?\353\033]?\326\237}?\256g\014?<\365\243>\340\340\034<Qt}\276\241-Q?\216\271\300?\336\342\255?\264I\327?\320/Q>3dF\277\320f5\275.f\212\275\357\341\333>\022\026\003?\216\350\344>\360\020\006\277\"l\221\276\231\2761\300\001Q8\300A\217.\300\302\0164\300f\300\020\300_\376\303\277\017\265\000\300\036\0104\300\250\357\026\277$\267\336>L\304\207?4\220l\276\177\365\275?\232\024;?\234\214V?pL\302\275\261\t\205\277t\225\356\276\244\274\265\277\327\302\276\277\377\370\320\277\360o\211\276\342x\247\275\225\354T?\366w\000@\243\365U?\323\264\024?Sb\221?\003H\002?z\225F?:\200}?\360:\270?\200\376~?p\254\215\275\340J\236\2773\025\217\277\010\205\327\276\000\317<?0Z1=\270\032\315\276{\000\225\277V\357\370\277\022<g\277\332\352P\2778\264\266\275\265\246\323\276\226\341\010\300\370\223y\277?OF\277\240;\204\277@\254S\277M\211\323\277 E\302\275\004\263\216\276k\216\227?\\5\340>so\252?\24444\276Cmg\277\356\245\216\276r\002\267\276\320\306\342\276\201\330;?\264\202\233?\244\366\210?@\275>\276a\227Q>y\363\375>t\232\363=\2244S?e\270\254?\262u\245?\217p\253?\216\025`?\313U\220?(=\250\275\315\331\034\277\366>\350\277K\270*\277e\254)?2\303\342?%\356\023?(\2255\277\250\356\341=0g]?\013\0245?\366\256\216?:\226c?\271\213\225\277\317\306\017\300\233K\026\300\326r\307\277p\026K>\362\206\017?\260\334\236\274\r\363r\277\022\312\234>\242d[?\310)\345=@0\231\277\314x\264\276\2500u\2776\026Y\277\250z\334\27612b\277\262\334\270\277\242\034\304\277\266k\230\276^\257\001?b\311/?4\030\221\276\0327\272\276\034\341\337\276d!N\27726h\277v\353\223\276=6\245\277F\3664\277\374\201\217\277\312\314t\277\374v\224\277g\302\214\277|u5\27783\246\277,*\344\277\242\206\006\300\215\010\302\277\254%\217\277nh\000\277l\341\306>6\325\343=\356\023\177?\273\313\337?\250j\020@\340\2068@\016\010\010@ 1\020@\250\326\326?\332\371\000?R\261\301\276\266\373\222\277zs\003\300\277\207(\300\014\206\035\300r\223\004\300\206\275\343\2776m\204\277 \024\312\277V\365\373\277\345\303\376\277:0\367\277\271\300\250\277\032\255\026\277\276\262\317\277\305B\330\277\276%\325\277\037\035\334\277\327\263\306\277\316.\337\277$]:\300\270V\r\300&\023m\277\261\2312\277\340[\230\277\334\030+>\'\357\n\277\020U\322=\270\035n<<\275H\277\260Vk\275\031\276\031\2772\261\324\276\366\025\177>p\375\342\275\336*\265>[\335Y?`\033\210?\363\217\327?\024\270\217?\207\037\221?\367\177o?N\225\261\276\267\014\007@c\261\203?z\355_?p\326\001>\310\031\253<\362\t\010\2757\034N>\023\316N\277\350x\335=4l+\277\2363\317>a>\241?\250K\304?|\251\226>p6\204>>*:\277\210\364\322\277\2761\007\300:^\027\300\030\260\372\275\352\023\255\276j\323x>\316\2111?P\342\207?6\367\240>>\004\217\277G\333\257\277v\324\316\277\373\365\270\277;q\237\277\314\272\032\276\226\202\014@\340z\000@\020\254\241>\322\345`\276\233o\t?6!\277>\032A\200\277\336\242\240\277\351\275F\277\024\210\371\276\n\267\264\2762Z\005?|%\351>\267T\316\276\354\231\030?\241kt?\350Vk?\254\315\211?b@\255?$I\271?\276$8?\005\025\247?\304s\361?\037\001.@\245\340\005@\036\356\375?\325\261\310?~\273\013?=J\271?V^\244?le\310\276\222\025h\277\372\002\216\277`5[\275?\\\245\275R\306d?\234\004\243>\360\271\024>\344\305\357>?\374\277>\376\250|? \257\357\275Q\004\216\276\003\210\004\277\004j\301\277\003\375\210\277 \247\325\277;\363,\277\204\210j\277XzJ\276(\216\001\277\276\2015\277\370\2776\277Y\024\270\277\334\242\326\276\020\306\260\277$kV\277\215\371\307\277L\335\316\277\332\254\216\2771Zw\300I\350X\300\207\177=\300`A=\300\232o\t\300\236t\031\300_e\362\277pbr\276R`.\277@\235\205\275o\016\037\277C\025\210\276\270r\252\276e\353\275\277r\332l\277X@\372\276\020L\024\277\210\370R\276\261E\n?:\3509?\322\260\235>\370\231\265<\237\316\222\276P6\374\274\300\374\247\276(]Z\277\236\356\225\277@\273\r=\371\326\306\276\304\'\303=\237\353\241?4f\236\276\330\237\264\274\016\252o?W\274\001?n\223G\277\300q}=\366]\216\277\200\243x\277\374\032\265\276c\024\225>U\254k\277<]\202\276@\305\207\277\016\216\211\277\205\030\205\277\224\275\261\277\346\016\312\277Z\0061\300^ol\300F\224j\300\233C2\300\246\013\025\300F\373\034\300\204\252Q\300\350tV\300D^>\300\255m\252\277v\232\276\277\306\013\031\300\037\327\331\277\3275\010\300` *\277\364/\342\276\251\"\343\276\244u\321>\200\006x?.y<?\277Y\255>\315@\342\276\231\033\"?\311FI?\357\t\322\276\250\340g\277\264\210\\\276\262\237J?G\351\022\277\032)\243\276lY\263\277P\316\343\275c\314\266>\246\344\334\276\200\342\014;\211R\266;\016?<?\374A\324=\367?\342\276 U\027=\246z\227=:S\231?\244\350Z>\263}3\277N\310\332\2765(\202\276$\265\204\276({4\275\253E\310\276\n.u\277vv\344\277\006_\222\277L\3364\276b\240v\276\2647\317>R\351\'?\307\330\201?\363e{?\215\200\366?\350\372\257>:\177\243=\355\300\202\277\213k\025\300\207\022\r\300>c\374\277\027\365\023\3005$\345\277Kj\272\277\177,\034\300\232\033\262\277\220\253\304\277j\037g\277x\361\240>`\322\"<\306\346\032>\322\222\020?\366\312\274\277\204-\233\277~.\007\300\035q\025\300\251$\351\277__U\277\202\375\004\300\366\243J\300\216\302l\300\323\315\221\300kik\300s\214q\300\242\275#\300\277w\027\300\202\200\235\277.\024\305\276\214_\230=\202w\267\276\032=p\277\260\376\251\277\005`\271\277\332\233\227\2778\'\326\275\313\010\317=8\235\361<\021\325>\277\270\342\027\277l\004\202\277y\365@\277;:\033\277\032G\216\277\3102]\2760\333\025?\324.~\276\364\312\"\277.\013H\277\016,\300\277\211a\234\277\206\222\272\277@\334\226\275\265BJ?\004\037\253\276\t\020\220?g!\223?\0358\000@~\016\340?X\337\370?\3004\351?\260\245\255?\202\274\312?(Z\357?J\200\250?\310x->\231\023Q\276\251\266*\277<\211\371\2753,.\277\316\266\360\277\023\235\341\277\265\265\031\277\366T\235>\254\302\267>r\204}\276&2\314>\000z,=\374\323\336=\014\023\376\276\317\312h\277\326\266<>2\267\331>\206|\260?\226c\r@\272Y_?Z1\256?\370O\303?\214^x?-\020\200?\036\263\360>\265o\354?\377T\334?\023\023\314?\242x\304?UA\252?\250|b>\273^K?@\226Q\274\236\254}?\324r=>\320\316j\276\316\364\215?\315\232\010?\240\353y\276x\026\342?\346\276\343?n\254\320?\357\2507?C\225\233?\374\235a?b\206\327?2\217*?\234g\211?\203\032\337?\245J\027?F\037\264>\034\312\370>]9\323>\302u\036>hgm\276^s\255\276\340n\275\274\250\370\312>\340VA?\tg ?\200\317\357\273o.\230\277\\\341\323\276\213\332\037?\241\273\372>d\331\006\277f\031\240\277m<\322\277\217(\246\27739\024\277\234\375q\277\005\004\237?W4\241?\312\307\304>v\212\313\277\277\016Q\277\326[\350>(\316\225=xqw\274\234M=?\322>\307>\010=e?[j\004\277\370<\246?\034\016\214>bg:\277\024\213D>\310]\203\277\340\220\265\277N\264\004\2770i\223<I;s\277\357\201\023\2776\221\302\277\362\232\261\277\236\204\330\2763\334\350\276\340\240\'\276\226\330\272\276\306\255{\276f\252o\276\304\251\315\277\227X\253\277)T\225\277^,\222>\214\266\234>\343\036,?P\036\027=\233\216\214\276\3719\004\277N\216\027\276\210\263\201?@\024|>\360kn\274E\025\000?\306\006f?\032\206;?\302\006\307\276/\205\227\276\264\027I\276}\223\212?\306\317\205?\326\271\030?\356\026\214>(\342\237?\017\002\215?\366\260\345>\037b\216?:V\020@\016%\326?\324\376\347?\246N(@\331g\010@\355N\332?\321\243\221?y\027\036\277\211\313*\277\320\331\253\277uF\331\277\212\203\362\276\314\031V?\273\363\231?0\222u>\242\017\201\277g\216\372\276\210\361\256?|4g>\261\377\313\276\210\031w=\016\354\004?l\347\334>,@\005\277\330\255>\277\212{\256\277\022[\240\277\324\021\226\2766n\201=\232\004\311\276\222\250\254\276\353\035\t\277\235\263\027\300L\272\325\277G\374\030\300\221\260\272\277\210\303\210\277\351%\007?\300M5=\202k\021\277\2345\332\276\237Q_\277\335\315\260\276\376\375$\277\004!<\2766\336u?\215\335\243?\246?n?\373\324O?\352Y\361?\320$\357?\244\3064@;\2162@\276\267\330?\007\277\264?\032\254\375>\034N\273\275\360\321o\277\272\315\257\277\n\036\212\277\224\322y>@\332\025\277J\026\177\277\337\337\243\277N}\371\277\346w\244\277?]\'\277N\034\351\277\020\202\370=\243\";?dBY?C\311\222>c\215n?\326h\027?\367x\366>\017\234\266?\214.\203?\240\210\304?b\341\003@\222I!?\232\312:?\237\313\256?\242\344\237?\022\322\321?Q\273\001@VN\007@\226L\034@\323\313\275?\230\3578@l\345\356?\335\333\275?N\220~?\246\"\035?\200\266\337=jQR?M\306\033?^\t\304?^u\202?y4h?\"\204\244>\245\225\303?\211\t\273?\")\r?\254y\203\277\260\254\333\2776\255\026\277\340@\007?\207&\310\276\256f\313\276\322\2202>\224\324n?\340\350W=f+\264?TS\336?s\330\021@1\030\262?\010\343\017?W\234\236\277\\\237\207\276*e\310\277Y\310\016\300\372\207O\300;M?\300Vm\203\300 ]l\300\323\264V\300P\2244\300\254\265\336?\177g\003@U\321\323?.4\307?\017\322\212?\300\304\250>(\2674=\210\217\223\277`\216\204=v\243\340\276\210\014\333>\235\377\\?\344\215\226?8q\304?\276\037\300?~\315\202?\314\205C?\330^\300>(\307\311\276g;g\277\214P\004\277\307-U\277v\004#\277\206\341#\2776\212\265\277nn%\277r\263d\277VE-\277\\\"\024>\326\231\006?\004\243\202\276\210\364\322\274\317\032A?\250\264\022>\3102\010\277\033\302F?\030\224\362?y\224\007@\260\313\301?\260\276\002@\354,\006@X\025\207?\333\212x?\266\274\275?b\004\320?\032\2477@W)\027@\375\314\350?\301\375$?\336\017\216?l\031\223?m<\365>e\377\271?,\213\207?Vw8?/\202\255?\262\326\314>\3422\216>\003\354\246?s4\204?\325\r\230?\363\233\211?\230\310\331?\355.\002@\354+\321> E\351>\347tK?\222\343A\277\304\024\374\275\220\2717>Zv\217>E\304\246\276P\3630\277\336\256\223\276K\347\225\277E\024\327\277\270y\257\2766\355`\277tGe\277\254s\207\277\362\206\356\277`t\'\277\204\205k\277\202\326S?\006\267\257?\000\303\026>\374\020\030\276\200\217\000<\371\361q\277n\007\202\277r/\200\2770L\227\276D7E\275 \302y\276$\001\005\275\342\304\252\276\377^$\277\302\375\220\277\241\271\263\277HU\261\277~x\t\300\021\311?\277@\325\204\275\212^\351\277lj\226\277\304\274\222\277\262\r\\\277+\323d\277\244n2\276*\260\025?V8\370>\022NK?`\367\037?\215\311\220\276\217\370\232>0\337\252\277\313\274\206\2776\226\016\277F\005\315\2766\355\225\276$(\354=\230 \217>v.\265\275\270l\256\277\021\337\301\277\357\005\034\277T3J\277\304\311\221?H\366\355?\364\021\003@E\350\207?\327\227\232?\330\341\037@,\321\224?\"\025\250?\334*M?0<\000?\024\263\235=z\227\211\277\361F=\277\026k\035\277\251\200\245\276\332^\347\277\364g{\277\354Z9@`k\341\2750\020<\277\306\213\212\277*\342o\277GL\235\277\'\202n\277\305l\232\277\370\261}\277l\231\234\277\330\201\005\300\306\344\251\277{\020\273\277F\333\304\277T\336L?v\261\331>\013\001\372>\307\364\350>\037\347\361>R\260\177?\207xk?\250\226\030@\271\215\035@\262\202\266?D?\235?&\250\347>?l\241>&\215\204?\242\217\326?\312\035\235?\364g\216?\016)\312\276#\250\177\277\355~\t\277\343\312p\2774\232R\277\211\341n\277\000E\221\276\2023\347>\333H\177>\213\325y?\316%\026?\322\223(\277v!/\276\374\377]\277\257\357&\277.\345;\277\226Xj\277\372\214^>\224\005\\\276f\264\217=e\202\334=\275\307\252?r\374\370?\332\023\201?\270I\026>\262\231\272>\370\245\037?4q\006\277\222J$>\230c\005\275\241F\201?\3120\201?~s\260?\357~\262?8B\312>\037&\032?\376\351\032?\370\2279?\360n\017>s\306\317>\262\325y?\264\220\213\277\316\372\177\277\373\355\230\277\210\273\215\277\277\n\001\300\227\361k\277I\366\332\277\326\2249\277\022(\261\276\320d\037\275?\260\233\276,\353\312\275\033\275)?4\227\022\276\035\300\251\277\263\226\265\277\200\242\353\277\251S?\277\366\200\223>\365\304\340=\374\345\016\277S\313\244\277:\\\331\277G\010\274\277\372\201\237?\375\r\323?@a{\276\234\013K=\274vG\276\272\305,\277F)\235\277\326I\231\276\376\004\270?\224J\372>\256\243\224>\354s\240\277\260\222\245>\026\266`?\315\313k?\027\207??8W7>0\360k?;]R?\325\205\354?\004\267\340>\226y\017?\206x\335?.\231 @a\010\232?\244L\251>+5\356\276\337#T\276\201\272b\277d\250y\276D\205V\276\351\323T\277\214\226!\2778\256\325\276\022j\247\276.IB\276\237\314C\277\345\351`\277\000\201\346\275~\226\t\276\362:\004?\220\376%\277b\235D\277\362\310\355\277\360\032\325>\005@\312\2770\243\332\277\277i\277\277>\254.\277\314\237\330>\000\000\035>=4\250\276\324I\334\276\304\277(>\360L\302>\014}\273\275\337\340\006\277h%\357\276b\242\267\277 }\313\277\302\223)\300j\013\246\277\027\330W\277\030\210l\276\"n\205\277\347\036R?\220\245\337>\221\222(?\210\301\341\275\340\027k?3\353\026?x?\205?\024f\001@\21213@}t\236?!\314c?s\211\257?\364?\r?\235E\010?\032\022\254?P\000\234?\223\332|?\275\246\035?\311\2010?\210\257f?J\206\310?=Y\314?\276|\310?\312R\272?\326\204\236?\000\212\"?\206\240!@\244\346\215?\020\261\373?\201\234}?MHR?\276\237V?\324\345|?\n\253y?\264\377H>\324\344\271\276\317\3207\277x\037\251\277\377\251\246\277\010\254\221\277\315$\303\277\024\203\023\277\317^\240\277j\352\311\277\314\215\020\300d\221\236\277&\3663\277\357\3553?_\311\202?\262\202\024?2\345\200?XC\272?\214Y*@d\327\257?\304\373\333?\345\342\342?\342\267\273?|\363\035?|e\264?\312\321\337?\254\237\304>0\262\236\275\276\370\322\276\345\323\210\276\270\304??\252\271}?\254\214\033?B|e?@\332\217<\236\307o\276\225!\024\277\334\026b\277\2249_\276\211`\372\275v\323\352\276\210{\242\277@\231\016\276u\375\332=G\276\253\277\345\316V?\220>\332?\312\223\241?\300\226\223?pP\262?\261\301\003?\026NI>\365\t\033?Y\303\004@\213\031(@\255\2567@\010\233f?^G\243?\020\351\306?\347nD?\324\377\n>\232\254\316?.G\363>d\311\270\276\345/\207\277\320$`=\032\354\013?@\306\245<l?\373>\362\264\275\276\001c\257?\210\270\373>-|\241?X\337/@\004i/@(k\310?\032\025\213?(\030\006@\341\303\335?\332\231\337?,\2124@}i\"@ZH\r@\343\001\337?\364\340\215?\312d\324\276\3117\033\277\000\211\366=H_\300\276VXq>\273\224\036\277@\353\002?\212` >\243\320]?\022\013:?\330\275\n@\300\346\322\275,\237B\277\210k\274\275\370\250\034\277\031\350\203>C\353]\277&\007y\277\262\233\346\277:\033\177\277\264(B\276\234F\350\276\236\276\023\276\361\225\342\276(\\\034\277\261c\262?\260\240\224?\302\351\314>\330\323H?\251,2?\256.\355><4\275?\024\231\242?\350x\371>\020Z\376<^ \256=-*\017?C8\271>x\332}\277\031W\211\277\030=+\277\200\213\216<\001\037\362\275\226\006H\276\240Y\343>m\345\210\276\342[\234?\331\354/?\370\251\n>\270l\254>\344\351P?\224YR?%fg?\212\236\322?\216E\327?\"\020\n@R\3474\276\202\343\036?\\\357B?;\350\326>\354\276[\276\261\0132\277\322\267\261\2768\311\025\277\302d\205\277+Y\252\277\300\327\201\277\332-=\277\000\234\247?\342\002\361>L\335\313\275\3162\226\2778\374\236\276\347\200\337?\226S\320>\303\030\213\276e\026\240\277\313ay\277](\t\300p\222\r\300\303\220\017\277\266\255\260\276\200$S\2735\270\276>/~r\277\343UH\277B#\023\277!\026]\277fY\246>\370\260\212\277_\t\022?\251+\207?\003\274P?|n\376>6\020W\276\226\003\353\276@\314\236?V\334\001@\367P\266?\023\375\033?\2355\202?@\256\332=\375\217\307\275\344d\202=\004\240X\2764\">?\221g\270?\234r\002\277\200|I=\334$?\276\340\2261\274\314\273\">\200\213\331\276\2609\315=a\\\037?\033\242\305\276j9B\277\271]W\277\345\320\002\300\234eG\300\315\036\311\277/\353\337\277\346\035\025\2772\257\034>i\360\"\277\312I!?\372\263\035@\276f\202?\240\017\213\274\272(\277\276\213GB?\271\231\237?\\J\270?\2404\313?\341\006\327?`\265\027@D\211\364?\005[\364?\366\364\352?\366f\250?\260\007\252\275\267).?\010\273\306?\330?\363>\216d\373\276-H\231\277\004\275\236\2773\256\007\300\347\316\320\277\221\374\243\277J{Y\277@\341\311\277\303<\247?Z\322\000@\022\375\025@\010@\032@0\360\250?(\201\242?\374\017\215?\031;\312?\275\266\'?T9J?Y\261$?\024Ug?\375\230\222?\362\351\367?\271\232\365?\342z\227?b\262\346?\2320\226?P\223\304>\003\234\242>\231\371\227\276D\013\027\277\234\366\224>\273\326W>\030\262\345=\224!e\276\014\267\331\277\256\330\021\300\350K\026\277b\222s?h\314\023?\230\222K?\003D\220?b\3527?St@?\002\2237>\262\013\013?\313\367\250?\000\336^?\370\337\004>_\321\004\277\254[A>\265\004\253\277\000\225g=\311\314\225\277`\264&=\356\021j\275I<\010\276\026N\345\276(,\211\277\265\032\001\300 \317\276\277Z)>\277\312\316\272\277=\221\204\277\277N\231\277R\204*\277l\303\t\277\274\331\202\277\346C\'\277\260\376\223\277\321\236T\277\340gt\277 z\313\277\000\024\004\275\214\235\313\275\226\036\013\276\270\2136>\354\225\216>\002\375\221\275H7\272>\305\006=?\r|\312\277\222\203$\300\220P\026\300=\003\356\277fD\013\300h\345\317\277TX\355\277\314\017\262\277\002\027;\277I\036\361\277b\252\257\277\030\334`>q\272\253?__3?j\252\363\2761d\200>a\324:>\272 F>\345\347S\277\214\207\035\277J#~\277n\326\215\277\360Ur\275\256\241l?6\264\003@\245\217:@\017\345-@\0063\364?\230n\023\276\024.\226>`\270\177\276\320\277\204\276\031\332\032\277:H\364\276\355\215:\277\017\003\022?\254o\345>0?\221\276\027\255\261\276q%\202?e\003n?\274\353J\276\221\361\275\275\336Y\014\277\223}\245\277Y\310\235\277pM\314\277!k\240\27785\026\277la\207=\244kZ\276Nr,\277RE\222\277o\205a\277h\250<\276\210?\352=f\250\267?\311\226\216?\340\301\020?\270\324?\275>]\365\275\366\334c\277\300\335\221\274\025\006w?\304\312\252?t\312\233>\301\014A>\364\321Q\275\220\010\306\277q\314\244\277\372\332\354\277\324\020\211\277\377D\021@\367\3211@\220\240\000@\200P\024<t\177o?B?\322?.7\234?\306R\233?\354\237\277>8-\026?\213:C\277<\270\366\276\210{\306\277\032\233\202\2772\024B\277\264\364\010\300A6\201\277\252i\317\277-$\003\277)I\222\276\202\\\307>@>\013=\305f\246>\246\314S\277\r1G?\022\036q?\"\207Y?\362]t?*6\014?\010\372\304\275\310i\022\277\323\240O\277l\302\236\277\342\237\266\277\253\310\241\277\377\006\230\277.9-\300e\233=\300x\034\376\277\215=\037\300\r\325#\300\001\351\t\300\375\244\327\277t\311\320\277\n#\345\277~\347\304\277<\214s\277\007\351\303\276c\352\364\277\032D7\277\022\373\025\277D\326\227\276\035P4\277Ve\305\277\353/\243\277\235\"\263\277\321\206\006\277O\206\020\300\377\236@\300\341\361\357\277\243A<\277\000\000D\273\373\331\037\276\271\316\023?W\036\002?\310\357\r>\234\347\232?0`\361?\266c^?@\3634=l\010\207\276z\203o>xq\325\276\342\357\332\275$\277\217\276f\334\226\276\213\354H\277\356\273\003\300\317\277#\300\3601\032\300\255aS\300\341\204\313\277\303\234\270\277p\213\307\2778\353E\277\210\n\237\276a\226\241\276\373\303\305\276\203v\331>\230\216J>`\356W\274\327.#?\264\306\257?pR\331?y@\334?\260\207\247?\226\326\347\276\001\nz\276\026\313\240>\320z\231\276\016\337\332\276\370na\277\300\027\230\274F\355:\277+uk\277@\306!<\371\203\277\277\031e\313\277Mb\254\277\335`\t\300\260\246\316\277Fs\230\277\371\t\033?;\263\201?\324~\242?3\022\\?\3578\013?\243\t\247?\017\017O?\374\365\255?\240\346\014\276\317)\240\276~\225T\277}y\020\277\'q\313\277\346p\322\276\254\212\234=\022\271\302?\022\347\024@F(^@\006\254U@\215\340!@\304\002\311?C\343I?V\330\240>dk\357\276\364(\004\276\"e\234\276\234\270\026?\306b\367>\n\260\207>\226b}?)\016r?\024\222\344\2761(\310\276\267\035\275\277\204;\007\300<\t\n\300hx\266\277\216\316\354\277\227-\036\300\337\243\315\277 \341\351\277;\236\014\300R\024~\277\206\267C\277\334\nD\277\301\352\205\277\024\252j\277\307\333\210\277\376\322\031\277\314:\000\3002-\020\300\020\357\016\300\010\275\014\300I\037\002\300zOQ\277\200\r\221\277\024\321\243?@\232\020=\255\234\362>\314.\021?\177\025\204?\324\013\021\277\274\212\242=\034\003K\277\321\036\303\277\032\354\207\276\004mO\276\031\341%?\316\374\030?\231\232q>\002=\304\275X\376f\276\332\373x>*\241\237>,Q6\277\276\310\021?\322O\022>dl\320>P\226\332\274Y\210\337>S\r\242?ng<?\346\361\027>\273\201 \277H.{>(T\024?E\217a?r,\326?\025A??nz\273?\036\210\013@\207\322\344?\306\341i?\322\201\242?<NO?.\212-?\000\266;\277\322\203J\277\200:\231\275l0@?\211-\242?(\027F?\266C\332>\240~L=|\000\204>\000\353\304\272;\243\333?\256+\357?/\225\332?\036\336\214?`\206\207<\'\022K\277G\277\206\277\320\251\201\275\240\320\220?\222\227\274?\310\372\361?].\320?~\027u?z^e?T\211C>\306f~=\257\\>\275D\311$?\340\242 >\366\212g?\322G\314?\010!\273?2\261\013>\365\221\225\277\030\356\324\277d\243\271\277\272yb\277\204\231\234\276mD\342\277\r\n\000\300\010\375\007\300\2031\335\277\220\275\022\2771\336\220\277^i\243\277\326\032\260\277:\t6\277Ui\224\277\021\030#\277\014:I\277\206\301P\277D\206l>o\273\236?\326\033\372?\364\267 @\364I\341?F\013\241\277\013\252 \300\240\350\211\277\305h6\277ry\267\276\324\036\335\277\351\225!\300\340\357 \300\252\004\353\277\260\t}\276\025\3632\277\302{\223?\274\352\351?\034\220\213>Y\006\274?\222ae?\320\233r?x\266)\276\326rb\276\342\373\244\276\213k\311\276\337\264\336\276\304\320\374=\304y\216?\347\260\217\275`\212`\277\337\210\000?\035\\\377>>Y0\276\250\006\230\274\022\037{=0\336\204?\005\266d?\246 \303?\032M\204?\010\277\247\276\226r\026?\234\010\020\277\340\326Z\277\025\344\003\277$\014\007>\003\033\351>\256\270i\276\203\222\001\276(\370\304\274\252\313\"\277\220i\277>\320\356?\276\252\263\237>\003u\007@\r\033\316?\014\312\230>\334nV\277\\\017\205>8<\014\276\001\273\027\277mP\244\277\302\n\201\277\304bX>\270\320g\277\310~\251\277\222\236`\277CL\200\277\376<\241\276 U\225\277@\266\220\2778\210\304\276\346\333\233\277I\nH?\216aW?Gd\256?^&\244?\036\313X\277\373\'\230\277\265\264\025\2776\243\306>\246\177\005\277\034:\220\276\002m\211\277\323\rf\277\260/]\276\257}\204\277\304h\222\276\026v#?\270Si\276c\231\014\277\360\301\245\276\032PD\2761k\204\277\211m\"\300uy\037\300\262\312\315\277jb\246\277\316;\313\277hq\304\277\337\310\214\277\243b|? g\367=\274UH\277\374\373\253\2774A\232\277\357\003\215\277\232\355\317\277\316[\332\276\361\371\352\276\24455\277\3701G\277\016Y\321\277\230\036t\276\312=?\277\221\374\224\276&\351\023\277\005\232\002\277\030\317\257\276C\255\207\277\0057\345\276o\266\014\277b\352G\277 \037\215<*A\203>\210\224\261>\200\\\031\276a\262\252\276\201q\242?n\002:?\331\3602?\224\305\366>Z3}?lz\370>\024\006~?\354lx?*\324\023\277\022\312r\277t\253\334>\240\277M<\371\032\211\275[\364\212\276\246\205\201\276\2720i\277\\*\255\2772\232\312\276\323r\222\276|qb?$!\247?\344\203\212\277\0162F\277\274\022,\277\257\257\201\276E\310o>\200\217i\274\030\206\252<\330?\223?\362\376\212?\374\323\030?\337\364\344>P\302z>\377_3\277\342\021\334\277\274\"\345\277\342=\343\277\200\331\351<}5\244\276\026Bm\277\364\211H>\370y\362=\200\336\007?Ko\215?\212&Y?;+\217?\016\343f?\211\364\334>\326\352t?\034\206P?\324h\242\276\331\014\226>\362d\211\275\"$\212>@\001G?\213T\200> }\313>\232\372T\277)h\037?\006\275\010>\037q\224?1\274!@pg0@\014\3650@\005\025\310?\241\222-?\342p\004\277hn\200>\370\206\017?\222\230\272\276k\240\345\277f;v\277$g\245\277\367\200}\277~j\352\276>\210u>K\007\336\277\236\350e\277\317\255\201\277\262$)\277\260\376;\276$\276t\277d\306\201\277X\257\343\277T/\377\277&\333\005\300|E\'\300\337\240\001\300&\244\r\300|\317\026\300!\227i\277J\251\352\276\232t\230\276\347\330\233?\352@\204?\320\360:>\026\251\262\276$\241\272\277P\305\207=\013\204\221>\377\232&\276\234\360\201\277\020\315\306\277\010\021\336\277\022\272\373\277\303\217\344\277\346\223,\300#\222\003\3006\375K\300\035\rB\300\022\355\014\300/-\003\300%#\342\277\264F\364\277\217\3765\300q1\005\300\357G\253\277\211\376e\276\226\227\275\276\330^5>M\237e?\225\010_?\210\250x?\341\237\343?,\322\263?q\r\225?6\261\243?Zf\005?\255\327&?\226\nr?\344\006,?\212\252\267?TV\365\276\260h,\275\260\030\033? \200\t\276S\004\223\277\211\021\260\277x7\r\276\206\226\022\2762\027G\277\326\373c\277\"\356\266\277\337s\014\277<G\251\277\207\330]\277\236\373\003\277 \253\032?\223\371\370?\233\216\014@^\366\006@\231\035\331?LY!@\300.\013@\332\302E@\016{E@\341\355-@6(\023@\262t\276?:\254\241?\037\366e?Q\374!?gw\357>\270\203\332?B\233\311?[u\311?\242\330\021@Q\254\312?!n\250?\266\022\013?\227\222\216\276.\310\313>\002\332\255>\312\315 \276F\003j?\300|\312?\3106D@l\315\367?xg\031@\344\351\002@\240\316.@\216$*@\262X1?\000G\271\274\3310\370>\020\033\356<e\227\222?\342\0348?*U\'?\240F\216?\323\335#?\356Y9?2\300\036?\207\275\321?>\027L?(+\223?\215e\233?~\377)?t\345\267>J\303\226=\273\242\002\277\366:#\277\000X\037\277kQ\201\276\256\341\201\276\322\370\231=q\334\026?\212\217\026>h\334\375\276\340\263)\274\336\303\276>8\272\263\275\225\235\201?T]\266?\226\210\362?\346\030\r@\264=\023@iK\t@\320\365\247=ZO\232?\020\224\326?\265#\201?[\352\177?\252f\177?\354B\010>\216^\304?Z\272\364?\016\303\346?\364\212\325>\354^\227\275\301X\242\277\264\350\237\277j|\375\277\201\221\013\300\206\214\037\300\3222\331\277\233\222\342\277(\260\212\2763\270\310\277\220\300&\300\250\215\264\277_\022\262\277z\376\371\277\343\237\007\300\220n\017\300c\320\014\300\016\266\213\277\315\251^\277\314\357\014>x\336,?\316\016\021>\327N>\277x\327b\277\240=\350\277J\315f\277p\0357\276M\200V?\216>\337>Z\030\203>`\317\377\273`\310\332\275@E\333<+\334\222?j\315\221>\275\270\230>\342\035\231\276\037\370s?$YT>V\256S>\016\267)\277^H8\277\221\n\177\277Fj\210\276\306\017\017\277\370t\205=\222\017o?\274\204\211?\002\233\246?\302\311\255>\334y\024\277\247\332\242>(\316\261\2754i\233>\016\266\211?\213\232\274?\014\346\034\277??\252\2776\250\307\277\227\300\035\277\272\347\324\276\302\221\027\277\004W=?\226\277\264?t\204}?\370\031E?\271x-?TX/>ci\213?p\225%?\360\017\222?(\315\303? \004\327?\010\235\222?\000~\271?\340C\333?{\263\036@u\203\035@\344]\373?\214\275a?o`\302?\313\330\230?\223:\353\277\372\316\304\277\0066I\2770/\376\276\020\363\202=\016\246{?Hx\204?@\244\006?(\361\240?\230\270\202>.go\277(\017r\277\231\251\341\276(y\342\276\353\321;?\260\007\035\276\251\260\216>\253Pe?`Jd\275\206\261\320\277z\221\205\277@y\033\277\316\267\027=\311[\225>G\362\244?B,\246?0[\017@\030:\031?\000\354\366\273\371|3?6-\304>\024\314\211\277.PE\277,\316\333\276I\027\341>\326\\\323>\333\204\233?\335\031u?\234\252\224?i.\n\277\213\003\352>\240fw\274c\314\201?,\202\233?\342?\360>\024\371\324\275\246U\232\277 s \300\030\335.\3005d\223\277^\313\275\277\340E5\277P\371}\277B\305\207\277\355z\225\277\252\000\221>\352\224\022?\350\301q\275\363\341s?\262\304{?\344\376\035>\330y\224>&`%?T\022\264?\005u\000@V \225?\255\3552?y\344\233?v)N?\346\316\n?H\202I=x\211\005\277DD\214>A\235\352\276>Q\207?\321\005\014@\262\3609?\350O\010\276s`\304\275a\276\222\276F\344\355\276P\356\257>\215\"\256\276R\307\243\276\212\350\263\277\364\352q\277\336K\377\277N\t:\300\201\3437\300b\203\302\277l\004<\277HA\363\277\220\353[\300:<<\300\033IB?v\334\365>.7x\277\0263\214\276;\000\351\275\217:\256\277\240\266v=9\222\373\276^&\343\276P\256\355<+\341\244\277\360t\252\276px;?\336q?>\312M/\277\275;&\277\213\322\007?x\365\r\277o\364\014\277\242\030\242\276r\033B>p\331\266\276\321\317\016\277\266\276|>\000+\222>H\343\230?\341\371\211?\272!A?\272\227\330?\314v7@\233\254\017@G\214\267?t\201\031?\346\303\311?5\373\021?|y\351=f\037\224\276]F\230>0+\242\275\026\225\031\275p;=?D\265\303>D\360V>\')\276\276\217\025\346\277\305i\312\277\366#g\277\216Yy\277m\370\265>),\240\277HQ3>}f\213\2763\221\201\2778\274\036>\323`S?Hos?P\256=?\204\324/?\334N\006>\004\267$?\346C\217?,c-?\022\212\316>,]\245\276\230?J=\272\226^>\361\337\003?dwW?\365\252\255?DU\205?\335\274\200?\337\276f?\306\371\020?$\254\202>\363e\250>\220\206J?\374\260\246?\310\014\232\276(\350<?~\362\213>x\277\"?d<\324\276W\361\205\276\024\216n\276\347\276\217?T\311\024\276\347\350\025?>b\033\276\016mS\277T\013\203\276\206\354\312\275\356\236\037?^\330g>[&\014?\242M\001\277\314\206\275\277w\204\010@\201\t\202?\373!\214?\356\367\305?aD\273?&k\301?\364d??\200\016\013?\343\235\n@\0338\020@\260\334\007@\236\346\024@\216\201\321?\326\021\364>{\352\241>\'J\334\276\234\024r\277\343S\234\277\370\2542\277^w\337\276\357\371\260\277\016Ex\277\230\262\226\277Z\340}\277q\376!\300\336&\003\300\031\306\331\277)\034$\277Y\303\026?P\213\303?>c\017@\3266\016@]\270\325?\027\024\002?uS\001\300\210\350Y\300b{\336\277\215\215O\277p\251\373\276SG\016?\375\220\010@CD\374?\307}\037@\344$\265?\320JZ\277@\274x\274;\331\n=\014Q\222>\231\234\021\277\237\226\254\2774\331\356\277\002\363\033\300\346\001\343\277\021\205\203\277\004\325$?\206\331\317>\216\001\244?J\305\003@\337B\'@-\017\'@*8G@\357b\266?\'-9?\036hu>\226\324->\302\317E?x\002\312>w\036\261>\355\000\024>\307\032\177>\350\225M?\320\013\227?{\356\033\277^\220y\277\231\251U\277\240\362E=\036\245.?3\352\310>2\003\303\2762C\010?\022\261\222?\032\345=?l\300}?8.\256?\2543\016?.\246i?\2323\314?\000\003=\274]I\005\277rH\'\277\246\370$\300&\362.\300$\321\272\277XZ?\277.\216\232?\204\361\217>\337q\212?Ci\232?\010W\247=9U\302\277\366\234\256\277\206\210+\300C\264\362\277\324\327\212\277\236I[\277\231\365\007\277L\2243?\356\2240>\243\321\322\276^t\217?H\212\312?WZ1@\207\205\307?\023\030\316?\320\222\354?\235q\361?\300y\324?T\234\317?\236\335\235?\213\033\007@\244\261 >\322*\374?\215\223\265?\210\367\273?$\314\367?z\272.@\023\223H@\377\035\212?\036~\240\276@\200]\277.\005\310\277\370d\253\277\200\331\243=!v\261\277\250\006+\277\271\307\034\300\260\373\307\2768\031\315\2775lX\277\300\352e<\364\372\032?\353Z\314>8\2566?a\356 ?K\253:\277\255\337\223\276\332eP\277t\270\304\277\224\204\273\277n!\030\277JT\305?\345\232\206?(\3311?*\035 @d\261%@\364O6?R&\214\277\344D\306>\264\314\024\277\361\277\\\277\316C(\277<\353\321\275\034\236\213?vQp?DDJ>R\334^?\220S%\275\\\252\231?5\222\263\277Zn\235\277\350\301\217\277\034\032\351\276\002!\020\277\210\255\224\277\337\037\233\277\362\357\222\276\307hT>\036_#\276@\020\204>\343K\240?J$\335>\342\307.>\235\322%\277\223\"\377\276LRX\277\262\336\240\277\256\236\215\276\016\352\347>\r!\225?\212=\016@\231\260U?\225;\013?\300\270\327?RE|?0E\024?\241\232@?\363\3300?i\226k?\332\254u?\\\370\007@\366t\376?\300\r\325?\211*\245?\022(\303?5c\225?iag?H\t\201?8\034\026@\226\002\001@@\031\320>\220rJ?<=\237?`UQ?\003(\270?!\302\201?\360\371\256=\220\256D\300\2075\n\300\003\2733\300@\312\356\277\204\272\030\300\213^\340\277v\030\017\300\2002\215\276\230\025\310\276\"o`?2\207\300>\246$\030@\370\360\016@\275$\031@RL\351?9X2@\204P\215@Cw]@z\rZ@\254\361)@2\205\346?\303\033w?=r\203?\303,\222?\317\344\007?\342o\221\276\363\243\247\276\222z\307\277\344\265:\300\260\255\344\277k\r\304\277\230n#\300\200\224\254\277<\256\263\277\314>M\277\256\370q\277\232\207\215\277\335t\207\277\335\251\301\2762\010\001\277\010\026\214\277\301&\204\277\253\265\214\277\003A\013\300ri\357\277z\342\326\277\326\246\235\277\230s\251\277\t\205~\277-\372\022\300\217\026\002\300\200_\334\277T\306\007\277\203q4\277\006c\215\276\300q&?\0212\003?}t\227\276 \027\357\276x\376#\277+\035=\277\327\264\013?\244d\274?KZ\313?\342\247f?+\367\214?\030\203\246\276\026\341\232\276:=\023>\0206\250>}\321\342>\316\246\224>P\233 \276\332\023\t\276\265\301\367\276\t\035\206\277\220\366\217\277\010\025\017\277\203(\213\277-\334,\277\2633\003\300\353Js\277#\337V\277@\303\374>\352+\n\276>\312\247=\241\207\010\277\020\231\352\274\014t\224>u\320\226\276\224h\003\276\276\221N\276\303\2423\276QwM\277\021\210\210\277\301?\242\277\340~\365\276\276\367\251\276\372X\266\277;\303\370\277\254\350%\300\236\235\003\300\220\350y\277|\240r\276G\034h?O\330`?:\000\326\276\212\230\323\277P\\\264\277lVZ\277\314\033\334\277\024T\037\300\324A\t\300\006\362_\300\337\375A\300\366eV\300t\257K\300\263@\274\277\211i\235\277\"p\215\277\021\275\254?\2406\377>(\254;>\216k\344\276P\237\331>\260w~?&\357f?\205\255u?@\257\223\275\333Y\232\277\257\335#\300\235\341B\300u\034(\300\002$\341\277.\312\352\277\006\366\361\277\360\317\022\300\316v\233\277>p\037\277\210!\202\277h\276A\276\310\365\006?\310(x?\336\017\376\276 \023\324=s\272\252\275\233\371s?\260o\364\275\201\207\261\276\350\353\236\276\031\271\216\276{\3717>\3004\275;\2136_\2764>\350>\355\312\200?*)\224>\266\000\325?`.s\276\210$\023\277L8\361\276\\\330:\277\377v\013\277\343\225\203?\376\356-?\266\226\363>\006AR?\276D\237?+ \310?*\372\260?\350\323\303\276\362\345\003\277\016\032\311\277\240\017\311\275`,0?\032\020\312?\340\007w=\272\223\274>\314\342n\277\201\212\323\277y\332\236\277\032\353\337\276\316mt\276\252_\373>|\230p>5\026C?\373wk?0\366\376>\016\237\353?\356_\264?#\271\232?\020\304\255?\234\020\036\276\014\214?\276r\305\315>\241\245\205\276\252\335p\276Kye?,\351>\277l\262w\277\304\275Q>F\250\037=\200@k?1\327\356?@\276\010=\r>\353\276\270+p>J\010\017?*\324*\277l\035\217\275\364\241\260\276w\005\257\276\204\\\353\276\271\000\034\277\222\363\341\276\334\261W?\304\326\005\3008\236\253\277h\207\336\275\200J\034\277\3664\001\276,#\034?b\350P?\320\311?>\254L\216=\030\361\317\275\246\026(?\201\317\236?\342\363\364>\205\005\252?2x\017@\316\244\007@\246$\304?\326\333\306>0S\307>j\362\212>\264\213\341>\266|9\276\314\313\212?\364\242\206?]<\005\277\374\234\252\276o\333\230>K\235\177\277\376\364\237\277\2116\311\277:5\037\277\030v\020?\326\305\017@\207\253\"@\261\374\361?\361\200\021@\205Q\365?b=\224?t\2558\276\312\227\342>/\327\235?\002\342\327?+\245\364?;\332@?K\\+?\210fP>0\017\232\277\352t\334\277\306\333!\276\365\003\030\277\203=\344\277g5\333\277\000\24069\323\321\205\277:\337\222>\204@\356=0P\n?\304\t\227\276$\242\'\277\274\311\341\275\000\351D<D\352\226=D\000\363=\262\026\243?\314;\251\276\244\345\032?\027\202\302?d\320\203?\026,\000?\330\341\262>\342O7\277OX\021?\224HL\277mZ?\277\034\'F\276\r\257\023?@K\361;\2023D\276 \022(\277\264\324^\277\002$n\276T\367A\275nG\227\276?\331u>\203\231\207>\002\034x>\260\007i\277\262&\304\277z\231\030\277A\367\303\277\346\214\226\277\030\226\021\277\034\304#\276\246V\375\275\315\271!?\360-\246?\243\3258\277Q\310h\277\273\354\025\277\350\314@\277\346\001a\277B\020\263\277B8\351\276\252\013\356\277\354T\365\277\224B\274\276\210\235\225\277\330\251\311\276\300\234R?\225V\273?\330\220\220?\262Q\222?pS\370?\225\224\307?x\371\305?;\255\250?(\201\235?H\374\244>+S\347\276Of\227\277\010\353\355\274\202 \274>`\256(\274E\261\301?L/\346?f`\326?\206j\315?\013\034\302?\210\000\010\277P\327|\2768G\023\277\346\0017\277\340\320\026\277t9\270\276\270\261\n\277\326\014q\277\010\\\251\276\362\352:\277@\210\211=\264\334\017\277\014\253\231\276\356\345\305\275\037h\342\277\034d\245\277\252\247\243?\310A\310\276\252T\370\276:\332\340\276\355\201e\277\304\345\202>\254\330\230=n\200a>^\255\301\275\340v}\276\200|\312\275\215\271\007\2774\244\333\277\261\303\325\277\216\314\255\276#% \277.\347\310>\330j\267>z\021\366\276w\332\006?\206h\204?\000\226\342?\314\272\273?\216\222N?+\314\326\277a\037\006\3000\263\267\277\240J\001\276`O\324;\227k\237?\032w\353\276j\017\242\2774*f\277\323\265\214\277\367m\371\276q\372\013?\365)\'?\313kd?$\276\356?rq\320?l\364\007?\247\337f?\270[\250?&\273\371?\206\246\200?\030\377\213\277`H\013\275\303\313\001\277\362\027\021\3004\031/\300\301\263.\300\206ly\300\207\215I\300\003\263\032\300~E\032\300@bd\275bJ\205\277\372$\355\276\353w\255>G\266\034?\t\333\231>wN\222>\272\206\231\276\r\227~\277J\240\263\277\276\347\236\277$\277T\276\364j\002?\352\345\241?\000\233\213?\010\236\260?f\2212?\247\026\224>\362\247%?\300\236\023\275\222\322r>\270\314\365>\nn\025\277Vg\177\277\222\251n\277@\371[\274|Y\001?\364\221\246?\203\233\216?d\244\t?T7\237?\203\360;?\000\244\334<M\230w\277s\327\245\277\343\307g\277\316\322\325\277\360\034\241\276\307z\274>:0\305=\375\026\r\277\232\333\004?h\237\213\275b8\371>`q\034?\007\240\207?\264@T\276\352\206(\275\370I\350\275\316N\032\277Y<\216>r\341\313>FCl?z3\213?pO4?L\204`\276-n\335\277x\204\234\277j\373\254>-\342\342\276\300\240)=\210\371T=l\212\334\274\025E\277?\242\236\206?\351%\236\277\3205\252\277\360\257\305\275>\342U?\007\364\212?cg\303?X4@@\246s\036@2\367\364?(\306k>s\325N>\'\032:\277\3061\334\276\203\361.?\004\255\252?\372Q\002@\344w\255>4y\200\277\004\0322>\010y\210=\304\376,\277\000\367?<f\244*\277\026L\262\276qB\255?u\335O?\270yr?o\233\200?1\230<?`\323\312<\207\212\035?\332\357\004?e\317\200?\356\277\230?\311\205}?\350\373!>}[\037\277>\025\n?h\004\265?\270\240\326\276\320-m=D7F\277\200\260\201\277\272c\205\277\332\252\313\277b/\362\277\312M\312\277=\265\325\277\3254\222\277\377\210\212\277\027_E\277G\375\351\277~\377\031\300\370\342\224\277\235\334\253\277aT\352\277\2163\247\277f\006\261\277\367\254\201\277F\013\225>\014\256G=\275\314\311\2766\232$\277\246!\314>\275\"\255?\350\224=?\254)\005\276\024\022\257\275\"\230\267\277\310\001\236\277m\222K\277\201\311\004\300(\234\277\276\023x\221\276\317\001Y\276\206\345\017>\212 \333\276k[f\276\020\200\224\277\000\004\214<\265\260\254\277\013\177[\277\202z\307\277\252[\277\277P\243$\277\000h\"\274\267\'\254>\230N\324>\367F\236>\352H\353>\374N\353>\216\2747?<\'\252?\233x\316?q\311\304?\236\250\347?3A\360\277\347\374\306\277N\272\010\277\271\265r\277\2320\350\2778\023\255\277#e\233\277\021\271\360\277\022\274\r\300t/%\300\375e\032\300d}+\300\276T\352\277 \366\255\277\320\254y\277\354\220@\277hD\225\277:\312\350\277Q\236\320\277\337r\266\277\010\320\352\276(\256G\277\327\337>\300\204S3\300\225\260\301\275^\363\351\276(\372\227?\252L\243?\364\034\256>\212[g\276\250x)\277\376\2647?\340oR?\351\230\037?Q\216\230\276\300~\362=.;\020\277dN>\276\336!x\277f\223?\277\330\301\223\277\004x\254\2778\027\224\277\215\333\217\2770\023y\275\344\026\307\276\343K\224>\346(\204?\306\247\276?)1\255?\245~\002?\277\tn\277S\216\n\277\000\031\342\274\220.\347:\\\034\332>@\021\212<\334)t\276\002\300\311\276\261\032Q\277\261h\366\276,\230\277>\203\005Z?\342p\236?\343\366m?gJE?\252\016e?+\215\231?\031Z\036? \346O?\224\021j>\254\022\306=\343\365C@\363g\002@v\205\032?\254\2746>y\275\243\276\356\203\004\277\020\037\225\275D\247\336<S\363\346>\3334q>`a\003\275\213\302\272>p\305&\277\'\026o\277~\255\r\277\270\346\277=\264E\377>\360\314\216?L\335\216?X \371> \272\367\274d\0322\277\227\3657\277d=\006\277D\362\r@\014\367\243?\000\013i\276*\353R\277D\327\006\276\217\300\334>\316\027\260\276\374\240\327\276\365\341a?\006\016\222?\226X\246?j\267\207?s\223\016@h\271\271?\324\251\205?H\004\302?p\237r?\335\314\235?-\276\225?\236\301\207?\001R4?\351\346r?\364\321e\2760\036\352\275\177\356\361\277*\3629\300\363\202\207\277\026\300\325\277\370\365|\276\350\257\354\274\360\204\206=\274\365\235=\336?y>LM\236>*\032G\277\265X\211\277\"X\241\277\377\222\210\277\246\262\361\276\215d\r?\212\247;\277n\362\303\276\370W\350\276[\216\221\277\023\335\024\300\320\014\332\277\260\325\273\277\330\255\315\277\240\\Y?\225!-?\024\352\214\276\342\354\245\276\270\263\323\274\270`\207\276\342\275\312\276\313\341A?\370\3027>^\211\202>\315\226\371=\315\221\324>\352\367\322\276\246\354\274\276\016\221\221\277\244CS\277tO\254>\036\025\263\276\252\263v\276\"\234\204?<\2748@)\310F@\027\004\024@n\212n?\2170d?\360\274\341?\005\314\224?\365qy?\233sK?\030\024>?\300\300?\274w\300$\2776!7\276\235.\032\277m\257\246>\037\306\211>\271<*?\016T\307>\\\205S\276H\221>\276\244\025\177>bM\200>\347\310O?@yy?R*\361?\016\037\337?\362\305\352?\304`\222?s0a?\236\257\177?\241F\023@i\324\367?)\357\272?X\025L>\311c;>\326\203N\277\237b\024?\324\031Q?\355\317 ?\337\233\036?\245\237]?\360\317\205\276\000\210\002\271\277,\335>\252V}\276\202\306x\277\000r\344\277H^\'\300\230\371(\277 \264D\275pI#\273y\342\007?\340F\325\274EA\213\276Dh\377>\352\002\200?\003f\016?\177\342\275\276\376!\033\277\350\204\226\277\322\254\200\277\240\232\007\275\2402\254>\n\201\331\276X^Q=\305\342\353>\024\273\035?\005\235\277\276\214\325s\275\326\t3>(\2453\277\357&/?\350P\220?\000\310-\2728\361\317\277\357\213\310\277\306\262\372\277\323\014\003\300\200\252\332\274\232\324R?t\370\206?\337:I?\260\277\330\275\253t\206>\032\240\337>ho\341\275w}\342\276[\255\227\276i\356v\277c\307a\277H\216\253=.\226\244\276q(\247\277\224\271\312\276\321\037\277?\206.\t@\346\221\017@\374\371!@~\363u?^f\200?\tS\222?A\217\336>\006\200\310?p\t\025>Y\305%?\200~\\?\210\350u?\002\364\224\276\317x\257\2772\014\266\2772\316\357\277\272\341\010\300\302\263\016\300\3266\235\277\265N\255\277\\D\030\277\1775?\277\3438\300\277\327A(\277\334s$>\206\214<\2773\275\310\276\036\335U\277&\366Z\277\222\022\361>\220\ty\277Q\334p\277\336d\233\277~=\247\277\213S\227\277\363H\315\277\240\335-\300\242<2\277\022O.\277\\\347\372\277>9\222\277c\005\017\300\030T\'\300\354\276\"\277\200\214M\275\262\004\274>\244Nh\276{\0215?\254\274\211>_\'7?\030`\306=\004[\331?\235\247v?\026\2639?\010\033\202\275I\276G>tY\236>\231y\223\277\214\210\n\277^\017U\277\272\257\007\300\024\302\325\277\373\222z\277\245\334\227\277&Hy\277\006\366\207\277|a^\276Ty\225?u\034\r?\324\037\264>\320]\030?F\3352\276Q\374\235\277 \302i=L&\001\277\351.\340\277\210}H\2771\303W\277\216E\023\277\006\013.\277\256\361\365\276@<{=\356\0242\277H@\304\276\226D\344\276\215\022\354\276@\003(\277\350\320x\276\376\334/\276\257\250\232\277N\213\007\300/s\260\277\021T?\277\340\377\337\274\377%\240\277\264V\270\277x\247\371\277^\226\010\300\203\334\303\277\303,\351\277\3049+\300R\212\341>\326\013@?\"\246\317?\364\2172@\377\272\024@\332/n@&\301\037@\202\213\345?\344\340\326>\t\265\336?\307\314\r@\311\227\377?R\356\336?X\243\310?Wj7?\254\275\026\276\273lY>Q/\220?S\301W? \250\310?\216\334!@\2706*@kG\010@8\222\320?r\014\026\300e\014\001\300\362\231\001\300\333\007\005\300Z\233\352\277\024\n\256\276\030{\026=\026\342\023>\216\367\260\275\226\203\020\277\371\256\005\277\274h\237\277\354\201*\277\305pl\277\n\211|\277\323\272\356\276\210T\211>`.\327>\201(\025?\277_\351>\000nD?\233\310\255?\232H\020?\\\244\r>pWP\277\200u\223<\'\331\033\277\006\207\270\277\326\244\253\277\270\345\025\276:\263o\276\274;\004\277t\374\367\275\220`*?\270\236\360\275HD\224=\276{\274\276#*\307\276\210\312c?\224\312\203?\316\256\300?\037\352\341?\020\236\272\275\235i:\277\201\344\002\277\017W\277>\313\231\007?\266\261\242\276h{\231?\322u\371?\306\226\335?\032\022\320>\334\271\205=\315 >?\210\265\341>\002s\244\276\021\350<\276\370\277\232\277\274{O\277\366\017\003\277\217rz\276>Uy>\247-\n>eE/?\342\030H>\332a\240?\036V7?\241\254w\277m\221V\277\312)\342\276\304\327c\277\250\204<\277\254\026\373?\267\217\314? \214\257?]7\201?\210\177\223?,\207\341\276\312\343\022?\030OG\276\340\003\345\277$\036\245\277Q\246\250\277\366\275\200\277\253~z\277\273\302<\277\255L\212\277:?\212\277\r\302\001\277p\250/\277I:\001\277\200*L>\002\325\022\277\224\021\235\277H/\373\277\3045\322\277T&\350\276\305HZ\277\334\002\006\2774\361\251\277\213\224L\277\222\367\322\277\356O\\\277\033~*\277\216\'\233\277J-i\277[Hv\277\245\234\217\277J\300\211\277\252\035\236\277\330\347\232\277\334\361\364\277\334\252\372\277\257 \373\277\256\343,\300\312\014g\277m\362\344\277\233o\003\300\372\263\001\300\016o[\277\240j\273\273<\216~\277x;\275\277\352\023\330\277f}r\277\350\307\320\276j\202-\277\244M\206\277\251\003\003\277\231{G\277C\361\230\277\005\222!\300:\242\317\277\370T&>\004\010\227\276&\203\310\277Cm\023\277oW\317\277P\346\316\276o\'\210>`\356\224?G\007\220?>\337\204>\"f\360=A\237\226?\200\273i=\310\317|?\350@a>\330T\206>$!E>\300\225M\275FJ\342>y\301`?8Z\024\276\266\262+?\000\354\243=\304\243t\276\352\313\237\276\036\267.?D\022\003@f\220\010@\372\035\253?]H\\?\375\323,?7\247\360>H)\022\276\366\333\364>\236\212\"?.\250Q\277\026f*\276\000\307\260>@\210e\276;v\030?[\235\367?P\353\206?\340\357\274=\343\253\237\277\230\355\341\277;\213\032\277`\265\360\274\353\370\">xB~\275|\356\315\276\2301A\276%\215\023\276\214+\353>6\016\244>\360`\312\276i\233\321\276\222\321\213\277\370n\301\277\026\334\244\276\016\347\275\275\250O\177>*\264\005\276F\361\266\276\354\272\375=a\303\013\277\030\245\021\275-^F\276\312\237I?\240L\337>\221\001\205\276\003\007\013?4\017/?\317\255\024?\250S\212=\367\363\t?47\350\275\036,a?\013\013Z?\266\242\027@P4\301?\317U\324??\251\030?\372TS>x\337e>\016T\017?\276N\305>\317d.\2771\367\003\277T\326\022\277\"|\254?\220\370\271?\336\234\361?\026k\312?c\262\316?gO8@\211\t1@\210\001\021@4 \332?\222\245\267?\240\311\005@\213Sp?\317\3073?\202G)?Ap\302>f\255S?d\010\034\276$8A>\242\013{?$p\355?\341Dr?\334[\215?\302-}?\323\262\257>\274{\014\277\254!\224>f\243\367\276$\262\343\275Y\244g\277\264\364\252\277.\207*\277=|\252\276\360\313o?\3276\226??\300\246?\315\300\030@p\243\337?\363\233\021@\006\352\002@\300#\022@\361\300\234?\334\013(\276e\217\177\277N!\332>\013\315\210?D\021z?$r>\276h\273\322=\3716\277\277Vt\377\276\032\320\341\277\367\206\257\277\335\371n\277;_\017\277|*K\277\005\227\037\277\035\335\225\277\230\355\234\276 \177F\277\243,\003\277\255\306\320>\206\260\022\2777\240\027?hT\306\276c<9\277v;\223>\214\317@>{\325*\276\304b\234?!\211\276?x\353\257?\326\312\"?V\330\207>)%J?SU\326?\3416\025?\234\271\351>*\t\010\276.\340\027?b\357\204>~\013f?\0202\343\276\022\255\211\277$\353\033\277\347r\353\276\3009\204\277\220\365{\2772n\n\300~\260\346\277T\314\214\276\244\275\004?N\244j?\205\304\203?\360\314\354\275\242\356<?0r\211\276>\311\235=\216\030\206\276Z\243\233\276\304\274Y\277\304q\212\277\370\316\373=\177\312\217>\313\243p?\304^\235?\032U\"?4F\224>\232V\t?\212\335T\276b\313\002\277\2061B\276\240\373m>\266\246=?*q\027?s\341\212\277\377\306\336\277\322\271i\277\026\2761\277\346\243\374\277b\343\205\277\016\252\204\276\334\t\204=\007\331\204\275\222\314\333\275\325)\213\277\034\r3\277\374O\017\277\250\253\270\277\030\232\027\277H)\274\277V:e\277B*\366\276g?\270>*\370\316=\214\365o?GC9?\310\002%\276\006\347\203?\372\376\364?\346\305\r@~t\020@t\200\006@\034\312\272?\364&\327?q-\265?\206\322\231>yh\202?\322\202<?\200\213\270\273Cs\277>\022+\004?\252v\230>\321jk?#\334y?SRr?r\357d?\322\026\233?XT\000?`>:\274\231\340\'>`\020\337\2738\371U?\347\205\310>\324Sq?=\233\020\277>\252\026\277\242u\232\276\260\366@\275\274\"\275=\016\362\031\275\316\243 ?\022\357\277\276\252\322\323\275\370\276\363\276M\365\322\277\250\355\004\276\206\224t\276\362\374\356=\234\270\031\277*\345y\277f\035\234\276\363\260\002\277\306\230\022\277\016\017C\276/\276^?\304W9?B`\333?6\330\033@\255\373\021@\264\257\271?\034\026S?8p\213\275\235\253\251>\376\215\321\277\r\233\331\277\032\321j\277\3148\356\277\323\034\t\277<\373\245>DQ\014\276\312\3714\277\216\"\256\277:\250\232\277n\335\302\276\010\205\017\277\261\022O\277Dl\227\276z\322\\\276\032\367\001\276\371\321\221>\255\021\003\300X\032\350\277Y;\233\277\031\023{\277Y\227w\277-K\035\277\355v\203\277\276\303=\277\253\2205\277x\333\222=\277\265d?_kG?\235`\244>\351\336\221>\210\364\345>Q\272\201?\357\034\232?\n{\304>\320\031\247>+\271\201\277\346\203\221\277\375\271[\277\254\024\263\277\034\361\033\300\030p\343>mn\216?\230\365g?\002B\363?v\010\023@\313a+@\260\215\003@\324(\261?,&\227?\313&\232?=J\256?<\213\014@\\\025\202?F`\276?\003\213\305?\215\021\200?\034c\240?k\246\323?\271\263\254?\300\"\177\275\375@\263\275$\244\244?&\013\342>\240./\277`7\002@\306|\035@\305\276\016@\276\t\215?0\215#?X\350\370>XC\016@\271\347\363?\304\360\014@t\263\036@\372l\024?\215\320@?N\031l?\330\027\273\275\353&-\277(\312\201\277\220\221\200\277H\273Z\277\264\301\346>\315\237\312\276t\035\315=:;T>\361\237Z\277\235P;?!\354\r@\300\224\232=\317!\305\276\377\246\240\277\344\t\302\277\332R\017\300}/\311\2770\246[>\237/\220>\340\225\236\275\240\246\242>\026\301p\277\035>;\277\204U;\277\346\352#\277\020\035\340\275R_\320\2772<\275\277P{\007>\030\313\264\276\302\327\315\277\332\266\006\300|\275s\277\244)`\276\360\315l\277\355o\007\300#E~\277p\321\025\300`\320k\276#\"@\2773\243Q\277\256\035\367\276m\207\216?X\370\n\276\222\266\006\300\353\312\243\277\262\t\357\277m\200\230\277B\005\333\276\300\266\304>~\244\313\276hpW?\352k#?\201E\303>\226\204\023?^\016\001?\355\n\326\277=\214\205\277\374\tC\277Dc\300>F\242\214=t\200\373\276p\352\213>\222;f\276\370\306\341=gR2\277\324\356R\277\370\345\335\277\356\372\323\277\257\375C\277\0105}\277\006Y\333>\361$\242\276\2354.\277\242\207H\277\330=\340=\354\365\340=1\215\031>\331\373\306\276\315n\035\276\034>\240\277R\265\277\276\010\004N\276\252?\245\276e\036\276\276>\343/\277n\244z\276\333L\016\277\nj\002\277\343\220~?\003\034\241?\200X\250=\244g\260\277U\257K\277\350\214\250\276\276w>\277\306\241\300\277P\276?\277$\373\350\275z\306\242>j\323j\276n\007\323\276\010\371\277\277\004T\004\300\334\275r\277\306\032\004\277t\237l?\030xG>\244kI\277\366\361\033\277q\027$\277\336T\211\277N\306\325>mc\311>\021+\233>4\302\240=\356\255\010?z\243\370>y\007\225?\304R\371>\377s^\277\324\236~?\272\352*?\372\365\272>0hj?\265=]?\300\363\207?\020>\266?\0247\315\276\025=\312\276\004~\035@\260\226\233?Bu\265?\247 \240?\035\225\271?`\346r?\004_\266?\234b(>\260\033\257\274:f\314=\004\023\026\276\264\325\200\277\222g\364\277\342n\377\277@\237\221\277Zd\006\277\216:\025>\344]\323>\3325M?\036\236c?\256\251\342>\000`z\270{\243\341>D\363\005\277\210R\235?\"\377\331?|\005\316?\347,0?\002\031\310\276JNx\276^\312\022\276\255W\232\276\031\313\010\276\017\036\262\276\310\361]?R\373(?[\276\226?\257\035\355>\262\":?I\325\031@\302\007\003@\256 \315?x\200\204?\377\026\'?\343\304\t\277\024U\025\276.\216P\276+\016>\277\247\372\035\300\034\007\035\277\373\331\335\277+\240I\277\332\217\027\276J\271\036\277\204\302\316\275Q\006\025\2777\301\313\276\026\000!\277Mg\357\276\215q\254?\334U\357?\261\217\347?\331\364\275?5\252\371?\346c\007@\017^\r@\371i\031@:8F?\257@Y?p#\266\275^z\016?\240\004\335<\212\032;?\220!\273\276p\024P\277\303g?\277\355H\037\277\242X<\277\362Ph\277d\305\037\276\010\322\205\274\201a\274=\372\362*\277\026\242\234>\264\354\223\277\2126\343\277<\032\253\277%\020@\277\001\254\372\276XZ\371\276\'\371\022\277v\244\325\277P\313\323=?\324\372\276\342\031-?\370\007\327\276\321Q!\2776\306\276\276\322V\022\2770\267 \2770[\325>p\261\212<\\\2275?\312\354\037>~\030?\277\311\277\226\2760l\240\274;\266\023?\345\323\335\276\024\263G\277\232FX\277|\032\300\277)#\202\2776j\261\2770\251r\277|\260!\277p\031\301\277\005\276\210\277\224bg\276\200:\377\275\273\334Z?0x\267\275\025\342\212\277`(\214\277\214\035\325\277`n\031\300d\351M\300\224\002S\300D\323\n\300D=\226\277m\325#?\260E\r\276\004\246;\277\300\365\305<\375\3213?\220\002\212=\257\316\002\277\322\\<\2778\256\325=O+J?@\261\306?\250\343\373?Te\300?e3\261?\320\372\225\2769\037t>W\215\340> `\364>@\233-\276>\2727?b\320x?\000\311\337\274\365T\303>\214/\277?\274\036\372?25w?\350\010\260\275L\260\003\276\346\005u?\270\"\213\276k\177W\277\264\361|\277\250c|\277?\023\267\276!h\r\277\343\t \277l\330\367\275\314\365*\276\202$\335\277&\004,\300\237\366\023\300\006\002\232\277\302\273C\277f\367B\277\370\020\276\275U\260\324\276\205C\327>l\233?\277\312\225.\276n\301\351>\372Bs\276\266\321D?\270\313\350\275j\314]=8\232\340\273\030f\034\2772}E>\326b2?\210\322H?\210\215M?M[i?\200]\222\273K\\\307>z@3\277\306\260L?\302t\253\276}\006\243\277\311\246s\277\336\355\034\277\352\036\245>p\035}?DY\221?\014#\333?\026\217<?\312\315\356\276\025\227v\276\220\371\231<\347\347\214?\327\362[?(\307\315?\1777\300?`\272\215?\200JD?\277\223??\360\224d=\353\257\236\277\026\365\203?\322%.?@\254L\276\240\246\265;\274\361\214>\224\230I\277I\347<?\366\326\016@*\032K?j\256\304>\304\322D?\244hj\277\020m?=~:\210\277`,L=\023\005s\277\260\223\210\277v\373\370\277\024\010\037\277#\374\212\277Ha\261\275\316\\\025\276[}\343>:DW?@\313\243;\347\3544\276X%\240\277TB\035\277<\2477\277\306\363q\277S\205\343\277a\2477\277&\014\352\277\263|\351\277\214\300\245\277\010s ?\204\026\234?\257\321\223?\364\353\\? \277\236>\025\022\255>0\234\211\276\226\264N\277J^]\276\333_\301\277\036\235\030\300g\001\265\277\333K\242\277\340\010\247>\317\006\231>\035&\242?\241e\234?zu^?\0206\237?$\363Z?\300`\323<\221\264\032=\3565M?\n{\220?\213\250{?n\210\244?\254\273\222?\310p\023@O\255h?\340\252\327\274\001]5\277n\020\027?\370/-\277n\253\215?\021\t\023\277\372\313\375\276|\005\260\276\273\370u?\026\023\251>\304\364\251\277[\254q\277,\361\337\277\260\227\006\3000lD\276\332\236H\277\206x\346\277\013\333\233\277|L\375>\016/)\276\\@h\277&L\252\277\002\246\356\277\310\311\026\276\214\024\373>I1\223?Z\324T?\300\013\336\275\210z+?\324\272\213?\322\026t?\316\214w?\210\210\306\275p\320\353\276\234\234\351>~w ?\340i\214<\257\352\213>\271E\'?\342\010\204?\364T\235?]%\265?\232O\031@\232E\272?hS\007\277U\305N\277\000\303L\277V\373\276\277\250u\332\277r\326\230\277d}\243>\034B(>\220\t$?\\7\'\276\002\020\014?\311\206\372\276\340\2623<x\201\247\276V\233\r>\021B\213\275\346|\254?\274/\347?\224C\370?!\240\276?\200d\023>p\262\250>&Yt>\204\225:?\216.\000?\234\024\263?\240>\'\275\317\224V\277\031+w\277\255\034[\277x\227\003\2777\251\206>\272]\277>\212\356\026?\200\312\233=\020\301h?\206\355-?\332r6?l~V?\\B\226?\0369\r?\240q\'=T}\324\274L\223\342\277HQ$\300\273\336>\300\034\005?\300\336\206D\300\206\035t\300\235.k\300\353f@\300\310\321\000\300c\021 \300\272\237\310\277\255d\004\300\030\337\322\277s\242F\277\214\326e\277\352\305\367>\214\016\001\277 J\035>\342\231\332>~\260\251?\"X\337>tH\322>\002\030s>\276Y#?\340\211\307>V\336\305>\362\027j?JW\340?\254\326\304>\307k->,E\311>\330X\361=\241\273\221?c:\232?6\335\364?\236D\375?\222J\213?\020W\252\275`\305\263\274t\313_?\252j~?\302\247\004\300\nK*\300\312\243f\300\324\366\260\277XJl\277\324\233\t\277\002\214\002>t\017-?\220\337,\2756<l\277\307\353\224\276\3306\200\276\002\337\341\276\000\213\277;\032Q\200\276\220\225\204\277<G\004\277<|\311=U\223\n\277P*v>.!\367=51k\277\267N4\277@P|<H\235\342>P\222h\277\372\235\257\277\246\233\344\277ID\254\277G\303\213\277\004\333\'\277.\314\357\276Q\227\327>\223\321\220>h\023\263\277\271\005\021\300(\276\357\277j\320\241\277Lhp\276pg >\206\350\031\277\027\335\240\277\025\252\305\277>M\037\277:\244V\277B\360\240\277(\313\372\276\374|\233\277\360\222\035\277t\036\207=\327\223=\277\214\232\315\277>\216\256\277\264\366@\300\035a\001\300\356`\337\277N\260\305\277\372#F\277\026;\235\277drN\277\360\203\270\275\036\350\022\277\360\245??\331\353??V\016M?\004vg?\257N\023@$\362\000@\246\0008@\244\350\016@\340\334\010@\377\035\001@\352\0212\277\210\241\255\276\362}#\277Xt\177\277d\305\260\277le\227>\322\263\360\276\344k/\277\354\212\252\277\355\013\214\277\023\354\017\300\350 \301\277\200RW=\263\221?\276\206\356\035?\\\300t\277\200\224\035\300w\226\307\277\344\201\355\276\250\201\341\275fI\201\276\351^v\276\032\005\266?b\314\300?\312\372\016\300\330\215\350\277x\376%\300\324\3539\300\313\327\361\277\345\273\372\277\322\237\321\277\n-\026\277\256\\\370>C\354\300?\272\336\020@\264X6@@\221\021@\330\347\320?U\036\270?\021\257H?\274\305\343?1yx?d\344\244?\006=3?\212@G?Z\241\335?\320\244\003>\366\212\252?\314$\215\277\310UT\276\013v\341?\300M\262>\356[>\276q\034\010\277U\345\242\277bz\363\277\034\206\204\277\335\275\002\300B\320$\300\216\255#\300\237\3769\300P\375\033\300#[\013\3001\316\"\300\207\227d\300\311tT\300\227\306n\300\310\003%\300\234\323\026\300\300\203\"\300v\235j\300\006\231.\300<\225,>\243D\352=\2701J\274\257{\226>\215\2248\277\217\225\305\277\234t\304\277\210\267\364\276\203N\206?\352aR?s\335<\277G\251\325\276\234B\004?\355?\244>\034\346L\276\036\203\323\276\024?2\277\240>\220\274,\'\201?\246\257Z?,\027}\276D\001,\277\244o\257\277\237\274*\300O\374\022\277\345\367\254\276\023Y\031\277\372\331\355\277`\255T\276\335\314\006?[U\264?p\357\315>N=E>\330\030\230?\204}y>B\0042?\226Q^?\332\260\017?\275&\221>q\032\241\277\216\252\342\277\230,$\300\232^\344\277\000 \323\277\330\220\033\276\246\324!\276K\025\005\277\271\220\216\277\274\375\207>^7c\276\025\351\017\276\001\016#\277\260RY\277\004i\377>2\025\255>h\372n\277\007\271\326\276\201\266\306\277\204\235\034\300\347\031\247\277\323\226\t\277,\'\027\277s@\203?S\363\276?\345\356\n?\032`\354\276w\207\317>!\n\222\277\010\355\023\277(\211\037\277\322?\307\277\364U\236\276\310u\252\276\226z\026\277\270\306\257\277\363\246\271\277\347<q\277\210\237\013\300\236\370\022\300\331\014\373\277\274\317\331\277P\000\274\275\217\302\276>IFv? \330\366<\316\333\224?\026\205\355?\241$\316?\013\004\243?\230\255\014@\264\231G@\243c_@\030Y\355?\025\245\343?\342\023\264?|\245\334>\377D6?P@\353?\222\032#@vT\027@fO\034@\360u\371?\375\241\240?\206T\032?\333\027\232\276\330HK?\356\227\255?\000\217\216?\314\021\230>\304<\252\277\204\002\"\276\354\356\244>\353\036\262?^8/?\351\271\211?\030\346\331?U\330\234?mx\177?\373_G?\307\253\220?\200\240\277\276\232\326y\277 \346\304\276\202\035a?6\251\036@\216=\220?\007\201\214?\220\263\274=\363\0300?6\245\244?\370\304\212?X P>\276\204\"?\312\252\324>\346V\347>\234K\323\275TF\360\2768,u\277\372\276\206\277\002}\031\277\214|4\277j;M\277x~\330\277\322D\336\277N\336\315?\204\021\334?L\265\245>\000\307\016?\226\351\265>2\234L?(\366\371> \207L?\224O\272?\265c\023@\026\206\'?\"\272\237?.\306\265?\3325\236>\032%\022>\371\306\033?.\255\006>\372\3168\276\360\256\n\277\272aN>\220\"\034\275\301\230:\277\000\330f\275xW\210?l\244\035?h|\230?\376j\377?s\271\026@\020\t\233>w\005\035?#$c\277\246\256\273>\376P\365>:\233{\276\267\350D?\034\207P\27663!\277*4\314>\310@g?+7\216?0bR?\330\265$?\000\'\243?\022\314\266>Z\006H\276\332`\255>\302\274\357>N\341S\277\03512\277\006\311\214\276pU\033\274d7\001\276.e<=\r\315\003>,\370\220>\324\377\215?^\217\265>\226Q\232=`Dg\277\324H\312\277\3400\000\300\240b\272\277\002$\340\277\327&\024\300\223&\n\300\032\016\204\277\260\365b\276\003\334\354>{\276\262>\225\212\210?\367{\037?\252~\005>\351?>\277\253\203\024\277\000\177\263>d\262\021\277V\236j\277\223p\213\2776*@\277\335\254:\2773gp?\357u\225?@\253\201\275\276^V>\000\327w\277\302\300\312\277dY\375\276\024\237\244\277\365{\311\277\027K\235\277\030\336\255\277\3576\270\277j\272\251\277\232\240\035\277x\006\362\277\007\326\343\277^iQ\277D7\250\277&\272\211\277\310\026\031\276_\210\257\276\354%\244\276\216\023$\277\346.\330>\330\'\234?\024\312\216>~\317T>\037\257\306>c>\327\276\321l\020\277\312T\230\277p\226I\275U\302\263?t\274\273>P\222\211\275dQ\217\277L\346\t\277\017\205\246>\007\274\270\276@\013\\?\273\217\032?\027+@?H\326\335?\252+W?\331\277%?\256\253\225?\311\2500\277D\237\245\276B\276\221\277\372\215\240\276=\272\254>\014\233\021=8\201\302>\016\253<?@w\030\274 2!?~\0107?::\302?<uZ?\377\033\331>\000z\003\277\033(\206\277>K\334\277\036\340\031\277\177\325\262\277c\327\361\277\356\264\236\277\230\334\245\277\277l\023\300\2256 \300\227\355\025\300\017d\373\277\267\365\034\277H\032W?\236w\364\276\233>\220\277R\200\034\300\'o\026\300:j\251\277`\260\246\277xZ\237\277F\204\263\277\354\331\315\277\323\201\034\300\365\237\301\277\234\253\272\277\332\362\245\2772\244\225\277L\267\225>-\270o\277a\334\303\276\277\037\317\276S\036\256\276\320\256H>\221z\374?X\311\237>.\2146?)\266^\277>=\274\277\033d\201\277\310BI\277@a\001?\341\237H?\0225z?4\320#?\000WW\274A \212?\034\305\351\276V\255!\277\324.\254\277\376\306\026\277\250\266s\275\371\370\033\300~\003\324\277+S\251\277\353ep\277T\375X\277\212\244$\277\354\372L\277\366\014\003\300\266H\326\277l\022-\300\033\021\332\277\264N\303\277\234\025\374\276\362\036*>2Vq>\220\216O\276\325-\217\277.O\206\276|\006\022\277\305\026A?\017\007\244>B\275\227?_\001&?H\331z??L\265>i9\016?-\020\314>\365\342+>d\002\204\276\344\034\020\276\336\321\225\276\027z\017?\334\310\237\275L\270\205\277\362C\306\277\274 \272\277\233&\207\2779PO\277\234\276\216\277d\243\017>w\343\021\276M\341T\277\302\353\216\277\364\330\001\300\030\353\004\300O\226\346\277\362\317Z\277H\274\000\2760\275E\277\230\265\200=~\nr\276\315N\005?\035G\262>\312\'}\276\344\225\027\277U\230\364>\352\230\001>dhz\277\333\306F\277\245\264\343\277\347\007\340\277g\261\367\277\355\301\301\277Rz\313\276\000 m\277\240YX\276\362:h?\364\023A>LC\251\276\034\026q\276\274\362\306>>\016g?\202z\303>}\270\014?f\021\204>\210\202\230\277n\252p\277\030M\037>\264\354\230\276Q`C>\362\242I>\032\320\231\277\275\017J\300I\257M\300\020\312\303\276H9?\275\306\360\242=\356\033\212?f\250E?Pr\321>\315q=?\364\356\347\276\372+T\277\310\210\273\277D\374\370\277\214\221\213\277\274\276\252?\360HK?\325\235\253?\250\260I>n\004\254\275OW\345>3\205\303>\224\251\323?*\370v?JP\305>C\004\257?F\226\337?n}\254?\237.\037@\233_\320?\255\332_?\274\335\021>\356\2103?\226\320\025@\201P\276?R\\\247?\006\013$?\303u\005\277\354\\\224\275=\2720?\256\236\356>LEd?s\341\220?\244\006\224>\016\'3\277\260\205\'=\021\244\241\276\\\207\002?\223\241\354>\354\263\243>b,\036>\001\204l>\276\013\276>\250W.?\330\260\036\276f\207+>\022V\305>\230\331n>\3500\207\277 j\250\275o\315\222>\000\"\3129\002\371\272>\340@c\277\033\315s\277\360\374\024\277@$\240=\016\257s\275ae\230\277\036\013\253\277\202\362$\300\010X \300V\272\016\300\352w\230\277!\004\204\277\222\026\225\277\240\314\245\277\355)\344\277\016%\003\277\203\252\257\276@n\005>;\016\036\2777\276`?)\300\r@\006\200Q@\370\006\003@\302\250N?\007(\t\300\336\2365\300\024j\242\277\360*:>\235w\275>1\272\362?I\227\367?\021y\210?>\225\013?n\323P?\332\\\031?(\377\276?\316\344\352?L\323\032@\252\013\240?\316\337\246?b#\005?\267\223\004\277\261-\262?\366!\014@\363\364\246?wUJ?\202\351\220?@\266\257?\344W\321?\322a\324?a\026\207?V\n/?f\347\315>\300\r\257>\005\201F?R\364\240?v\214\007?q^5?\247\326]?]n\223?\352U\262?\014\"G?\212\\{>\\\355\276=\000\t\n\273\005\002_\274\322\304\300\276\261\337\262\277\005\023\014\300\230i\r\300\000d\036\300\336a\010\300\000$\361;2?o?\000L\250;\236\r\304\277\277!\226\277\321\r$\277\323\256\353\276\313\377\215\276J8\206\276\273\265\022\277fv\244\276{i\240?G\325\244?\231\341\200?\364\177\270?\362!\307>:CE?\366tl?\006{\202?*\006\257?\2209]>\236\252\221\276\316\337\261\277\274W\373\276\304\307\346\276hzk\277\200bi>\321\026l>\200$\t\275x\227\243\275F\330\t\277\354\340\362\275\254\324\212<\t\260e\277Tu\'\277?Lj\277\306\242\264\277\024.\271\277C\007Z\277d\230f\277\016\201\021\300?\233\351\277\266\236Y\277<\010)>h\3067\277\350\337\216\275_8v?$\347\307\276u\273l\277\344\260[\277m./?f\026\237?\005{/@6)\037@\t!\016@\354\310\007@k\344\363?\347\211\013?m@\237\276\211\024g\276V\324.\277\005\271\246\277\035\251D\277\366\237B\276\266j\201?h\305\356=dC\201\276B?\016?\230\212\305?\210\260\r?\002\"\"?\2526p?\245\265\007>\351%t>fz\247\275^\227\266?R\243\234?rS\347>\240\001\304\274X\262\027\277\200b\313;p\021\314>\360[\347?\243\020\345?\336\346\224?T8\351?\212\021\020@\316?\251?\016\240\341?:\332\034@h\'\330?\3701\202?\366\203F?o\202\370>\324\367\301>@G?<&\341\204>:\352\247\277n\310\023\277I\007\342>\350\022\024?\364\225N?\244Nu>L\027\031\276M\224\377>\034\326\022\276_\212L\276\243\344 \276\336>\323>\300\201\'\275h\326\310?Z\360\252>\021j\"\277s~\273\277\213\351\203\277\266\177\325\2770\214\356\277$\364\313\276PQL\275H`\250=;\206\341\276+\321\344>_\275n?\263\t\254?\216K\362>\010A\022=D2l?Fj]?`\376\346\274\312]\'?\300v\023\277\320W\005\276+\255\347=*\351\030\277\3240\007?\337Q]?\301\344-?\020\224\026\275\304\367\246\277\235H\270\277V+\234\277\224\366\224\277\220\302\014\275\354s0\276\205\232\016\277]?\230>\353\r&?U5\226?\237\265\353?u\371\271?\\+\003@\237\335\236?u\252\277?\372\321\270?)\222\240?_\202\375?M\351(@2\274\372?G\205q?\370d\333?z\315\340?\241\323\267?\347\nj?\276B(\277\357\326\322\276\306Y\220\277T0\020\277\\m\324\277{p\201\277P\275\313\277O\350\321\277[\314\211\277\200\2067\276\305`>\277\377\276\214\277\023.\342\277\023\367!\277\302\237Y\276PpT\277\370\223\270\277H(\331\277\332J\376\277+6\334\277e3+\277T\206G\277\037]\205\276\320\220\317\274\260c]\276w\026!\277\217r\202\277\222)\205\277\23171\277\236\\?\277\010\205\305\277!\322\314\277\342\307\266\277p\361\203\277\356&<\277\322\372L\276\320y9\277L\302%\277\250\220\331>x=\\>h\262\222?iH\002?2\222\007\277\371\275\023?\314\330\230?\224]\306?D\355\206?\237q\272?\216\342\251>\346\3079\276;U\025\277\243\245\r\277\201\363\333\277Ab\022@\366\204\377?\220\373\306?F\332\203?\330\300(?\030\376??\316|\271?j1N?\341y\202?\257m\334?\212\275\016@\220\362\370?hFs\276\340\225e=\337\3306?\000\271l>\332\266\220\276\260\033q?\370\277\211>7\031\201>h\240\022=\010<\271>D\301\023?|r\244?\305\202\204\277*\032\215\277`\334\336\277X\335\000\300\231:\331\2778\374Y\300=Z9\300j}/\300\241\202\227\277\330 \226\275\321\354r>\212\030|>\211\224I\2764=\006=l\002\001=\344\317\027\277z=L\2771\001\255\276\222\301{\277\323\034(\277t\005|>\350y\r?:0\315>@\247\235?H\245s\277\314\234\226\276\2320,?\225\022<?\320\2359?<\266\310\277\235>}\277\340\002\260\277m\320\270\277i}\033\300\234\016\344\276\374\232(\276\006\2542\277\014:\245\277)\233\266\277\236\275\361\277\272\255\013\300\364\034\361\277\352O\"\277 r\237<Z+\003?\350tZ\275Q9\350>\266\010(?\207*B?X\214\335=P!\215=\3447\233\276\374\300\003\276\352;\307\276kf\301\276$H \277e\245\344\276@\361\016?\254\222\235?\242G\315>\364\326\340=\347M\"?h\211+\277\223\342=\277x\356\327\276\352\316\004\277K\t\350>m\267\326\276`\316]=I\001\364\276\230\000\224\276\246\300\233?\326K8\2771Q\025\277\020\363\205\275\000\327\223>rrZ?IrE\277+\233H?\340u\001\275z\004\223?\036\224\215?\177\271_?`\r\'=\204!\356=\333j\272>6H\003?\237:\224\276\0267\331>\000s^?\261\276\373>%\265\274\276\210\246\311\276\377w\327>\n.\244>kH\221?\342\352F?<\261l?\210\211\347?\317\010\365?\216\317\r@b{C?i)W?\230\363S?\220s\256?(\321\213?\000\2413\273i\215a\277H%\232\277\037-\214\277/_\203\277\223t\300\277\224\220\363\277\3677\245\277\t\032\261\277\357\333\002\300\334\327$\300\335L\007\300N\364B\300\n\352\367\277c)\002\277\335!&\277\030N\021>|\225\"?\\\227\214\276\235 R?\\\353\221\276.\354\022\277\217\276x\276\374\311\374>5\255w?HI\215>\276^\216>y\267\350?\315\312\301?\240\325\300=\332\244\251\277\3415\234\277\260\333\235\276n@\271=\276\222\031\276x\n\300\277x\273f\277\206\225\360\277\256\2620\277\277\233%\277bw\302\277@mc\276\374\302\310\276\367b\267\277\200Q\255\275\207vJ\277\242\311\022\277\034Q\234\277\013\345\235\277\216s\277\277&\327\021\300\224}W\277\320\006\221\277\221\263\233\277<\301\321\277\370\225\272\277,\3348\277\210\257\300>\327\302\t?\023\323\003?O(>\277\240\016\367\275\007\031\202? \243\203=\260\347\264=s\246F\276<qa?\304B\354?c\313,?\310\310\355=V\200\213\276\254{\334>\036\257G?\020\246\304=\251L@>\362\031\203?\316]\241?\202\272\032\277x\210\245\277\203\356\344\277\2431\362\277<\326\307\277\224I\256\277t\206\233>\370\272\005?\220\231i?\240k\234>\362\013\263=\203\023_\276\267\223)\277\310lz>\304\227\234?:\022A?\000\213\315\274N\343\323>m\256\272>\245\325\222\276\205\234\211\277E\230\305\276\310\3231\277\326\031\030\2765\330d>\226cP\277\2538e\277\211\224:\277\2228O\277\252\326\355\277\230xd\277\304\003 ?\342\315\344?&\357\304>\252\352e\276bF\202\277\177\272\241\277\354\374$\2776/\025\277\2509\023\276R+\002>\213\234\312=\250\r\214\275m/\277?\261R\250?\241\336\274?\200\352!?l\326q\276Z\260S\276\234\227N=\360_\205\276\001\'\007?\214\257u?\251G\220?\254\352\335?\236p\362>&O\243?\204\324\316?_\326\204?X\320A\277\313\206\023\277\033c\341\277\360\034\352\276W\267\204\277V\232\007\277\236\204\322>\030.\027?\265n\244>\232\t\200\27630-\277x\030\006?\204U\271\275\230\337j\276\222\t\000\300[\371u\277\346\003\177\277\360\370\206\275\000\204\225\2777\200X\277RQ\257\277\032\250$?R\256q?\350\324\001@\212\217\362?(\r\267?\230\033m?\264\371.>\013\010\235>\237&\"?\030d\376\275\325.\256?\010\324$?&\325\017@t{6@s\252\374?\327\270\317?\345\334\027?\221\335\n?\323\250\243?\204\242L>\267\305\000\277\266E\215\2774\227|\277\200\216\353;Z\276\035\274$C\256\277\350%S\277\342\032\234\276\355\237\223\276\344\260\202\277\226}\n\277\274\004\032\277\340\371_>\376*\307\277\037\2321\277&\034\230>\362\314\264\275r\033\365\274\306-\n\277\200D\202\277*\000%\277\032\r\232\277\262\237\373\277\302\330\311\277\226D\376\277\301\311\214\277O8&\277 \245\261=V\230N>8\344\365>L\357\371>pU\177\275\237\327\276\277\321^\000\277*\032\022\277qw$\277\304\251\'\276\270~\371\275N\353\350?\3669\001@\220\334N>\310\244\006\276\354Zi>\265,(\277\000\214\304=\234y\272>\343\276\263>Z\177\252?\320\210(?\031\272\001?U\022O?\200\272\355\275\316O7=V\204`\276\370\305D?\246J0?\207Eb??P\026?\234\223\007>\205I\327>P\300\r?T\026\260=\303N\036\277\000&\256\274\233\\\037?\306\023\005?\374#\202>\211\360\004@\2655\022@\203c\365?\274E\020@p2\313?\020f\001\276h:\020\274\304\363\250>\311\357~\277\031?\340\277\036\013\263?\016F\251?\030\221L>\020\017\210\276\330\233\220?\230$\010\277\374\235~\276\250g\275\276I\035\305\277\001d\250\277i\362\336\277e\017S\300ljM\300\354\302k\300\211^]\300\010*+\300\346\276\344\277\350\233\242\277\340HT>V\034\231>(4==\2643.\274G\371\357\275\\\212\355\275Q\035r\276\024\333\201\277.[N\277Ah\220\277\357{\036\277B\005\354>|\031\347?\036\2120?p\250\225\275\276\032\322==|\304\277\352\300U\277\214\377\214\277\030h\213\277\000b\225\274\237Q@?\266\037\314?\332Q\022@\346\243\204?9\271\365?}e\r?\273Z\225? \332\234=f0\027\275T\220\n\276J\016\235\275E\324\222>\305\274\220>H\021\003?\022!l?h\247\203?T\304B?r\013_?\327Z\177\277\022A\302\277\210\217\344\277*E \300\004\025\350\277\342W\357\277\233(\262\277\032\225\177\277\200t\207\276\256\375\300\276\320\032G>\372ZD\277x\371\305=\005\023\273=\200;\024\277@HG<\244\321\366\275\350\252\217?\\\224\'@\202M\242?\303\027\206?\247\300~?\240\311\222=>\352C?\226\332\202?\263\267g?\035\320\216?&\267\230>\016\202\254\277\332eO?z\246\322>Xq\007?\342\244\177?.&\372?\331\271\204?\227=\030?\2227H?\330\366\223?c\350\262?\371\005\323\276\223\302\352\276j\253\307>x\337\'\275\365\246\330>\204\234#?dH\272?[F\013@\020U\322? \304\321?\033S\276?\020NU?\020\366\210?\002\352\033?E71?$\014\212\276\022\341\320\276t\366l?\340\001*?\325\360W?:\303\261?\315[I?\362gb\277>\357H\277\351\215\227?I\327\031@\222q\253?,\320K?|1\016@\030\032\021@\256\374s?\230p\215?\034\232\346?M\203\005@\034\352\023@gr\200?0\372\201\275\371R\374\276\371/\245>\220\010\320?\273\241\257?Z\307\240?\000\304\222?\234\'\225?\276,\271?p\367\270?duT?\034\215\264?\200\334\254?\342A/?\2248\240=E\276\001\277\271~<\277C\022X\277\235\237)?\n\376\356\276\000#4\274\313\032\354\276\274\021\003>\016\330\256\275P\347\246\276&9v\277\242DT\277\333\'\014\277\354\025\221=$\327G\274{\253\266\277\272\337D\277H\014\251>\264/I?V\203\335>\327\376\353>24!>\r7\203?&\2275@\235\374\374?V\201K@0\202\006@0\234\200\275\216\366\324\2777k\355\277\374-u\277\273\2405\277\262;\237\277j\215\211\277\262\207\006\300\200;\\\275\342\225H=\2014\233?\227\263\371?\215\245\037@T\345\372?\245\277\267?j\313\027?d7\227?\210\376\277?(\350\031\300\276*\346\277\277\376\204\277Yg\r\277\336P\237\276`\250r\274?\237?>\036\346+?0\202\230\275\232\004&?\372\265\005@\315\233\307?\275B\306?:@\330?\330\335\274?Pz\033>`{3\277\320\0067\276\036&t\277/\236\231\276\263%\001\277\215x)\277H\316\263\277G0\245\277\375\256\007\277y\357\216?\337;\363>C\024\017\277\3608\n\275I\3750\277\354.C\276\226dw\276\n\334\222?9j\365>\244\341O\277\306\177\270\277\017\353\250\277\244[B\300\205H8\300\037\373\001\300\2708\030\300\3076\321\277 \005\207>\224Z\206\277\332\256\313\277\354l\220>\322\333\025?\212:\353>|\365\256\276\311\330\270\277`\357\r>\365\263=\276\027#\265\277}\000!\300\320d[\300\357sQ\300B\267M\300\006t\352\277\220~\261\277\277\177\004\300~\344\312\2772\354\216\277#\350\262\277\270\243\216\276\314\232\307>\222b\272?\216^\361?\271:B??qQ?\200\344\017\275^mi?\312\314\213?\226\343\202\276\314\216\245\276Dq`?TV[?\017\024\024?\354~:>h:\220\274^\327\033\275:\226\277?x\024\007@\317\215p?\213R\230?\335\026\233?\350\240\206?\304\010 ?\023^h?,5\013?\246\201\243\277l|\177\276\t\013\345\276\344_\225\275:\034\270\276\374\356\265>\230\374\242?\347\314*\277\001b\314\276\322c\003\277\254r\236>\200\215\303:\356Y\014\276\335,\330\276\014\005\317=\311\231g?XuL?\002\027\324\276\374\313\371=\337\261\034?p\277x\276\333\233\324\277\"\023\205\277\016\224(\277u\'$\277\202\3748\277\232\026\333\276\272\024\362\275\231\246\270\277z\372s?\262\246\310?\274\224 \277z&j\276Yx\207\2762\226\270=bL\200?f]\265?3\376\376?\261\2475@\362_e?6+\323>d\034\370>\227]\272\276;\250(\277Z*\317\277\271/|\277\366\344\200\276\224X\370\276$\331@\277\000\332\036\273p\360B\277\013\315v\277\023\217\375\276(o\306=\340\321e=\004n\213?Q{\371>\223\371\265\276\274\006\032\275\247\206\242\276,\241\347\275d\357\230>@\335\000\277S\312\037\277\270.\317\277\367)\005\300`\245\367\276\020N\207<\364\261\337>B\337\274>\210\177\274?\320Y\243=V\305\275\276\322\354\351>\372\361\023\276\017P$\277\025\346,?\316\242\"?\000\346\024;<^\312\277{g\207\277\300V\335\277\274\267\201\277\000$\243\277\270\260\023\276\244\027G>1~\\\277x\354\017?-\035\213\276k\027Z?\340\026\212=E\375\203\277@\217\031\300\326\371\217\277b\312n\277\000^.=F\246\355>hO\275?\004\2349@\246\271\317?\023`\364?\027\017\326?N\377n?\244\365\'>065\275S\247\205\276\315\205\210\277\360\203\200\277fx\233\276z`\315\2760\035\204\277p\322\303\277\244\236k\277)9\256\276y\314\300\2767\243\221\276[\007c\277\343\2318\277\334\274\326\277$\314\354\277\232\356\204\277\357\036\350\276\237\023\357>\356\215\223>\027\257\371>\344\370\327=?\276\213\277\251\321u\277\317\005\000\277>\274\016\276\275\367U\276\211\322\t>Z\331f>\342\353\033?\n\007\252?Y\302\311?t\336\356>\032\032\231\277\000d\213\273\256\303\035\277\020\304\375>&\221\032?\234\253\275>I\351\346?\006\324\245?\304)\270?\274\221I?\035C ?@,V?\261y\304><K\325=\032x!\277FV\305\277B\361\000\300B\277\026\300\010\\&\300V\3755\300?8\253\277\"E\256\277\321=\357\277#M\335\277\255\366\272\277\200\316\331\274\266\213\343>T\324\212=\001dJ?\352\272\274\276\030]#>\344\253\330\275w\326g?D\216\311>/\245\321\276\303 \210\277\241<\226\277\024\3368\277P\"\323\275\314S\237\277,\357\226\277J[\316\277\004\333\264\276\242m<\277x\016\361\276\316\202\305\277\331>\250\277\000\363\365\276\255\332\234>\260I{>\216\322N>N\233\331\275h\307\221<?\205\332>(s\315?\333\035\221?\026\367\324?)\370L?\360\005\257?\330[\356?n\224-@\';$@Y;4?\206\243V?\020\212M\275\206\316\330\277r<\317\277O\315\244\277&n4\277\315o\277\277\030\000\344\277rQ!\300\226\035-\300h\346\324\277\2571\250\277\355\203\212\277\240\014\220<\261\004\036\277/t\235\277\200\357\210\277\237\236\211\277+`R?\350\251\256?\032\241\260?\376\373\341?\0169\372?rQj?\250\327B>\014\357\217\276L3\340\276\275\022\r\276\326\222\265\275\250\343\233?\240\264\014?l\357\244?X\350l>@3\344\273\255\344\222\277\236\271\247\277\316\317\210\277\001\215\232\277E\352a\277\327\230\200\277\216\343\300\277\027\331\221\277o]o\277o\336\360\276\356\256\010?\t\367\224?\231\024\335?\353v\276\276\310R \277\250fZ\277\000\022\211\277\227:\361\277\305\362\227\277\010\321\204\277\320\301)=0U\337\276\270\265\352\276L\243\275\275\021\033j\277\375\345h\2779\3045\277\026`\246\276\243\226\213\276jI\020\2766\023\031\277\227`.\277\207\370!\277\274\363\303?\2469\370>\334\376\226?\200K\017<\024\300\'\276N:\376>\300\337\024?i\310\202?\014\363\322?_MB?\006\362\246>\302\032\210?\226\216\270?\267f=?\243\370\344>\216kx\277\2003)<\303\252b>,\322\212\276^/\257?O \306?\340\312\302?`\314\343>\322\245\364>p\263U?\210\301Q\2762\251\035\276f\016\372=l\277\270\276\216\023G\276\362N\014\277\212b3?n\216f?\276`\226>\230O\332\277\365\207\275\277*\261\247\277p\225\307\277\264\356\302>\220\2409?\262r\314>\342%\003\277l`\000\277\2172\341>\366\210\261>\366x\376=l\351\224>S\210\322>x`P\275\323(\236>\360[??\270bX?\3002\361\276d\332\226\276\316<\035?\022\365\333>\024\316\234>\260\327\253\276%o\014\277\2400.\276F\366Y\277\222m\257\277\312`3\277\232\223\210\277\310n+\276\275R\351?\303v\307?`M\n@\t\006,@\251\0348@\337\366\006@\320\207<@\236\247\204?\002\234\251?\320\373~>R\307\252>\236pe>\236~\275\275?\213\'?L<\321?\364N\341?\377\024\200?\236\003\227>j\350\014\277H\004m\277\300\340Z\277z\220\356\276\327R\302\277\234\203\331\277T\240\334\277\2604\374\275N\020\003?\313\203\220>\276i\237=2a\n?\311\215\270>.S\311?\233l\240?rv>@+\254 @\240\262\366=\031\347\366\275$-\257?\354\001\300?\353v\234?\374>t>\352\325\025?Y\366\311>\324\340Y?\001a\320>\216x|>\243\253\201\277\200\0015<sG\273>\350tR>D\357\004?\262\232:\277{S2\277\352\363\217\277\355\177\243\2776\212\350\277\301\367\277\277\006&\324\277\270&t\277E\307\254?\322\246%@\347\200\t@\247\n\317?\363\036\270?\244\212\340?\355v\312?\004?\203\276\242\205\222>tm\204\275W\002z>\037l$>\210\311C\277\354\252\320\2779\257\261\277j\026\014\277\216n\255?\262\3058?\204/W?\216\2423>\260XX\274l\356\246=\216.p?\244X\227?/t\252\276oZ\235>3\273\216?\246\356A?\366\371\334?\272\030\n?\342\320H\276\361P\241\276\024\273\362\276\013\223\342\2779g}\277/\227F\277\267\201H\277\340|\224\274\341\211\240>P\224\252>\240\372\325>\324\362\310\277\255\275\000\300\177m\307\2774\322\242\277\225\244\203\277\226\361\016\277\250\007/\277\360\271\236\277\037<\004\300\250\261\r\300d\227\273\2772\267\206\277\234\232\224\277\010\215\350\277\"\244\252\277\230q\223\277\230](\277\344\212\316\276\300\376\312<\317\345\221\277\374\000\027\300\375\307\'\300\206X\206\277\354\237\241\277\370\005\001\300F\266\272\277\2278\251\277.\253\355\277\220\336\257\276\251\261\241>\2568\003@\304\303\033=\205\302\301>4\264\004\277\024\311\315\276\311\254\202>\312\362:?s\024\"@\211 %@j\252\235?\321\313\225?h\252\321>\242+\225?\214\246\226?\240\206\n@\310\3420@\371\375\342?lz\361?\372\327\243?\276$\216?\333C\227?\220\334\201?\212\324\204?d\006\005?1\277\'?z\314\273?\206\205\354?\242<@?\370t\374\275\214r>\277\262\336\241>\336\205\361=\021\320\270>nx\005\276\260\335\022\276`a$\277\350D\261\277z\375\033\300\224\216\320\277<t\004\277\2420k\277\360W\263=\304\355\002>\000W\206=\006\366x\277d\204*\276j\215p\275YS\256=Z^\255<\222\007\233\277\204\377$\277j\000\227\277x\301\037\277\263!4\277\300\t_\277\323\304\211\277\370\035\234\277xr\021\300T\215;\300\307\2504\300 \002/\300\035\214\023\300X\224\001\300^\325\025\300\355\217\324\277\256\330\206\277\024\035+\276\344\346\226=\315\034g\277jt\207\277\034.:>aVd?\366\023g?\324\266g=\333\020&\277\277\370\220\277\361{\253\277\302Y\310\277\332Hu\277=\200[\2776\035h\277\207\265\215\277.\321\317>v3x?_u8?\257\270B?\017\320\262>\340v,?+\263\035?\3241c\277\321f\003\277\362\016\220\2770&\020>\203\366\344=\010\331^?/[\333>\210:h?|\310\354\276@\262\230;[4P\276\022\316\203\277\317\336\026\277i\0073\277\24283\277p\220h=\301j\003\276O\362S?\300\350\251\274\235\245\035\277nW\353\276\026\361\334>\022\216\033?ZU\233?\202\201\207?YB\337?4\\\246>\363z\254?\225\340!?l\021+>\214\347z\275\332\217\037\277\357\342\n?((G?\r~\203>\345O\226?\204\306f>P\247\005\277\302A\005\300\017\314\255\277\322\343\232\277\255%\300\277 \255r\277\247\017\352\276\230p!\277\314\300\003?\376<0>\032\034\311?E\320\230?~\322\314?\206K\225?\367\224_?\366\001\233?8\033\003>\326xG>9\007\201>\351\213X\277K\310\300\277\200\244\n\276\3601\323\276\260\314\361>\000\023\345\274\313\234\246\2778\2404\277\246\004\204\277\216\364Y\277g\371)\277\252\034\004\300\372\340\371\277\221\223\010\300@\336\002\300Hi\365\277R\221\004\300\313\354\016\300=\212\277\277\340IQ\276\243\231\306?\024.\377?\340\245\227?\200\227\276\274\303R!?\374L\016?x\265 \275\241\345\237>\274\316x\275G\351\357={\233\304?`\266d>B\271\302>\233\001\327?Z\355\006@p\"\302?\020t\032\276\360\274\231\276V\331P\277zK\302\2773\240\226\277\242\036H\277\362\327\\\276\330\321=\275\317\035\023@\376h\341?\347\255\241?\304\236q?\346\360\217>>\222\257\276\224\251g\277 \3722\277c\267\240\276\232k\271\276\262y\016\276\376\250\304>p3v=\305\345(?^|\203?;:u\277\270[5>@s\353>0\272z?\035\257\362>q\246\211?\375\3610@%\241\004@\006~\005@\247\312\030@NuG@\272\010\305?\010\037\313?\270$\233?\246d\030@\352\314\223?\376m1?\262\241\007?\2508U=\034f\013\276\207\377\253\276\314\255]\277{Q\254\277\242\3520\277\037\246\336\277\021\355y\277H5\003\277\240\t8\275\0337\306>l1\001\276.\355\023\277TU\017\2767\350\035?\336\225\261?\014\000\350>\340\373w?9\"\275?@\214\245\277\200\356\345\276\255\307\376\276Vl\004?\262\306I?\370\253\306=\376\034\271?\203\007\236?\205\306\304?R<\321>Cf\022>\242\213\257?\320\244\"?D\275\341\276\320\010\311\276@F\226\277\314\330Q\277\021;Y\277h>\023\277\254\251Z\277\202\254^\277\016\323\223\277\222/\326\276\242\310\242>\004\353 ?\211\n\001\300\344}\007\300\311\032\022\300\352\242N\277\200\024\275\276xL\254\277\311\373r\277:F\237\2770\213\236\277Z\3370\277\030\350\316\276\204-\327\277\364\250\272\277\010Lz\277\232\\\201\277p\263%=B\024f\277\024\023\323\277\014\020\355\277\344T\270\276\013\177\246\277\025\206\001\277Y\240\340>\0249\223>N\020\234>\357\223\233\277v\310\022?\364N\244\275i\2109\277\230 \241\277=w\t\300\346\247\253\277N\325\354\277\274\305\002\300r \231\277\026\336\351\277\014d\345\277\303\315\263\277(R\263\276\311\357\347\277\235Y\265\277Pq/\277\372\325i\276xJ\216>\262,\243>\303J\t\277B\361\242\276\234\n\324\277U\202A\277z\241`\276x\350\215>\001Ds?\016Y\242?6\353r?@\350$\275\334\r\245?\327\216y?Z\016a?zL\225?\240\313q=c=\227=\334^\201\276\027\2556\276J6\250>\260\256\013\275H\375o\275\202\373\r\276,\263\016\277.\363*\277\274\255?\276P\337#\277\177\222m\2770\372\202=\270\264,?\007Q\354>\363\302\203?\367j\220?\323\266\362>\326f\233>\353\371\304\276\371|\225\277\270<\321\277\214\273-\277Z9H\2770\032*>\2677\201>\244\303\013?\\\010\205?\356\233\371>\000\255\362\275\236\000\224\276\350&\'?\370&\022?\214\311\342=K\264j?\330V\355?N\r\333?p\3233\277\317\323\215\277\022\344\036\277\004Y7\277\316\277G\277\031\230\271\277d\357\367\277p\2024\277\'h\215\277\004O\352\277<K\264\277\265\363\254\277\2626~\277\225\371C\277\036\203\316\277\334D\234\276 \203I\277w\177\240\277\206\034\374\277#\273\341\277\000\013\010=\252\265~?\250TM\276\354vT\277\274\355\r\277\324\3642\277\262\364\223\277Vvj\277\\\203V>{\212\312=\336\273\003=\274F\200\273\346\023\302\273\005\002\014\277\204@\230=\035\325)?x\263\240>,\2559?r\225)?\321\302S?\347\235\216>\031cl>22\340\276\220\177X\275s\305\227\276\t\333#?!\351Y\277\030\367E\276\316dv\276\326K\303\277\016\340\254\277\r\262\000\300\001\300\335\2770S4>&o\002>\264\262\010?>\316\331?\232\261\212?nh\223>\020<4\275a{\364\276I\202\317\276SF\204\277\313\033?\277\0006\333\272\214Z\236\276\243.b?\000\340\237\276\304I\232\276\376\t\272\2762_\225?\266z\276>\374\264\036\277^\371\250\276\010\253X\277\240l\213=\343\303\272?\364q/>(\274K=\374\265\341\276\327r\207?\030\322\300=\270\227\201\277p\225\272\2776\324\322\277\276\023\013\277Z}@>\333A\331\276Iw\234>\016\232\207\276\004x\021=\267\303\027?\376y\335>#D\347>>Q\266?\330\225\010?N\305H?\350h\267?D\021_>\364\034\271>\344n[\276\353s\272\275>\257C>\243.\352>\270\036#\275\226x/\277\226\206\312\277\316\010\002\300\010T\221\277y\312\261\277!L\252\277\250<\354\277my\247\277\030\301\342\275\371\236\275>\264a\257=\026\201>\277\252\200\007\277\344,\231?\356F1?\316\037\203\276\347\232Q\276\036S\227\277\330\333\"\276l\325\265\274\302\257^\274\311\361)?\1771\232?.\365\222?\276\2034?F\347\223\277\241\221M\277B\247\334\276\035\202\354>\240\375\004\276\202\177!>&;Q?kj+?T\217\r>\251\373\017?\010t==\223w\007>\242Z\303?\312|\346?\3769\354?:\210\323?\t\254\014@W\'\005@\200>\241=\360H\266?\305\263|?\374\023\222>:\236\226\277\217\261\257\277\271F\274\277\265\233\223\277[\347\226\277\026\024|\277\034\\\'\276\265\230\301\277\020\020\332\277\356K\002\300\211C=\277\311v\013\300\205\336\366\277\320bM\277*\355\240\2764\035\'?\016P\250?\323\327\274?\024H]?\232HT?r \341>\275 \006?r\2343?\210(\250?\000\203\326\275\3708:?}\370J?\353l\224?^8\260?qz\255?\234\321q?\234\210\006@\222`\033?G\025Q?L&\203>\211\362\264?\377\311u?l\267\'?\244\351Y\276\360\242\370>\247uz?\214\025e\276$\371\273=G\005\241?\353\272Q?P\203\223?\336\370^?\004\001\272?W@\247?\\\014\325>\000NS>\000\0078<\036\302\017>\367_\357\276\270\266\307\276*-0\277\305\225\034\277\221\273\276\276=f??\376\263\264>\304;n?\374\031u?\313\207\352>\370\335D>\325aD?h0\344?-@\221?\201\356\346?8\336\004@\340\3337@\tGD@X\262\224>\006\021\302\275\202\213~\277s\004\201\277\240@E\275nME?7K\355>\344\235\\\2764L\327\276#\243\017\277\024R\302>\347\270\252?U\371\256?\222=\242?\213\213\227?\236\207\360\276N\220\300\276\030\354\303=x\005\032?\000\002;?\325\r9?Nx(>\24159?\344C\267?\375\270z?\301Qc?\304\225\263?\032\350\007@\211\316\334?84%\276\330|\321\276+v\266\277|n\352\277fR\367\277\313C\r\300^\321z\277F\321\315\277G~\261?\340\267,>\265\245\276>\021\363\240\277dj\232\277\256\202\223\276e\360\240\277\342\277\227\276Z>R\277\275\310\245\277Dp\224\277\236\322H\2774\036\224\277\320U\353\277Qc\t\300\345\267\365\277\337?\035\300T\372\034\300\207\271\316\277\332\276\343\277\346\370#\300L>4\300\035\203\016\300\024>\314\277x\317\014\300\267@\243\277s8:\277\324\304c\277\340U6?\\\212\321?\020\341\252?\214\204\311?bt\234?\020\322n?\032{\271>.&6\277\001\312B\277\266\314*\276\333e0?\360\261\033\276@\270\233\277\363\367\301\277\206\003\210\276\256\303\'\277\334;\251\276@\256\020?n\271+?`7\212\275i\013\223\277\014\027\244\277\336\3768>-.\231?s\300\352?\023\256s?\000\263{;\026\2255\276\312 Q?\244\023\302?\217\270\225?\000`p<\177\351\340\276!\r1\276\314\360\326\276TYK\277v\345\301>Pi\214\277\032\341\372\277\271\325&\277D\036\234\275\212\367\367=\205\374\214?\013\351\016?$\261\316=\3770\034?\267\244\251\276$xv\277\330\345\256\277\005\302\231\277Y\366\276\277\242/E\300n7\204\300\215\035O\300\212\027>\300\342\374#\300\211W\002\300E\263\375\277\347\2706\277`\224`\276\221\327{>\353\236\323\277\260\353\353>:Kn\276Xb\301\276\'v\314\276\326\332\214\277\254\260N\277\230\246\206\277 YE\275,+\">\013\272\177\277\344\217.>]\252\216\276LJ\255=6:\316\276u\017\332>\314\331\222\276\274\364/\275.2j\277\374d-\277{c<\277p`\216\277\252\205\324\277\323\340\232\277\203\326p\277\360wG\277)>F\277\246\r5\3009w6\300\323sF\300\345\334\036\300\322I\034\300\000\037\353\277\010\030\236?\010/\002@\204&{?\340\342\035=P\2423<co\253?A\347N?\334\237\003>\307n\262\276\314\357\356\277\205\241\367\277@\276\331\27638I\276N\340\362=\250\t\\\277F\261r?\312\250\314\276s\266\201\277\305\"3\277\307\312\t\277\265\"\205\277:4m\277j\237]\277\334u7\277\322\321\277>*F\202?\2327+?x\275\222\276\3568\324>d#-?\237\206\213?t0j?\252\342\300?B\223\216?n\270\211? \344\313?\2302\r@\033\225\276?Xf\'\276l \312=Or\006\276\2364-?8Q=>\260\212\237>$@\257\276P\037 \277\306\354\266>\370~\215=@\207\313\275\237EA>\302P\343\277Xj\'\300\270\020\324\277*\347\370\276\356\316-\277\320\350\267\277,\263i\277\272\320\036\300\224\316\'\300\237x\343\277\372\006 \300\377\320\263\277\003\312\330\277\312\333\032\3000\251\021\300\201b\'\300\336\315\001\300\266\261\025\277\321A\037\277R\253\221\276\233\312i>\332\375l?Xn\030\277\030Br\275\231\313s?=\344\014?4:\303=\026\002\376\276\350\314\273\276`\361\366=\026\2160?p\302\000\275\252\310\323\276\212X\201?\352NH?N\300\230?\024\2538@\025\302\016@\203s\250?K\017e?\256\'\030?*\252(>\0173\232\276^U\322\276\354^\t\2779\274\346\277\364\211\267>a\324\337\276\226!\200\277V\367\301\277\226\037\310\277\2051\246\277@\272\212=T[W>}.\211>\350\327\323\276,\306g\277R\347\312>\240\347\033<Y\264\273=\316\334\347>lhb\276Eo:\277\364\324\322\277\302\355\245\276\204\363=\277\340a\n\276\370\317\226\277>\215\272\277\230\273\375\2771\330\326>P\301\020\277`\312\223\276HVu\276\'\022\213?:\350\240?Z\274\242>\326m\306?V.D?\270x\222\276\'n\203\277e\265\242\277\2325\255\276\3549\361>$\304\245=\000\3050\273bN:\277\303\352o\277I\355@\277&I\\\277\360\026E\277\356\310\020\277\371\267_\277dZ\216\277\3746v\276\200A\370:\206\353\210\277\307\330\222\277@\207\376<\227\343\313>7\036\200?\312\201\303>\020T\222?\007\t%?H\327\214>\224k?\277\270\r=>`\204\265\274\330\335#=\244Xn\276\211J\203?\025\205&?\360r\213?j\255\334?\277\346\264?\262Z\222>\000F\365\276K|\334\277\254\252(\277\020h\313>\013\r\003>m\\\376>\320|-\276\213z$?\260H\252?\203z\301?\232\321f?\024\343D>^#\235\275\201\241h?\366ux?\2271\025?\252G\037>\310\177\006\276\320\367\223;,\322\314?\352&\"@<\236\343?%R\275?\360ne>\230\244\317?\313y\214?\200\260\225=\000`\031\267n6\233\277\001&[\277d\014$>\342(\342>H\230P?\274q\227\276\323\317\246\276\324V->\374b\276\277x\0102\276\214\353V\2768\345\371>t\017\227>@\252\322?u\"\212?xT\257>T\341\225?4g\232?X\372C?F\201\257?]\244\000@\223G\370?\021\316@?\000\255\r\274\355c.>\224\204;>\340\352\231?\231\n5?\303\306\274>\222\267\\\276\351\"\'?lg\305>k\377\327>bM\300>q\271\251>\224\222\277\276\240\250c\275d%\257\276\000\202A\276*\324\023\275!\204W\276\034|\316\277p\303\372\275$\346\372>`~\034\274\000\353\022\277\374\266`\277\266p\347\276\230Q\272=\'>\212\277\032\220\237\277\356g9\300\307A\233\277q|6\277\234\215{\277\366\271\373>\357\007}>ck\001\277\211\361\337\277<\304\312\276r\\K\277\\\032\255>\005\233\365\276dH\206>\200\2760\275x\205$\276j \271\276\020W?>\333\2675\276@\262\223\277\344\334\230?\362\302\r@q\305\005@\300k~>4\367\314\276\315:\004\277\243\233\276\276\230CH=\032{\204?\314\t\343>5\261\205>\367\032m?6\306\226?Ca\210? \022d=~\363\004\277\004\373\022\276\252\256\365\276\006\246\265\277\302S\327\277\260\377\205=\342\271\254\277F\n\254\277\255r\260\277\276bI\277 \350p\275\346K=\277*#:\277\272C\230\277\002\360\233\277\222h\251\277mV\204\277\221J\250\277\014\244\246\277\000/j\277\306\370\240\2769\252\372>\177\367H?\000\014\226\274\270\330!?\014]\303?\262\267\232?\366}:?\350\023&\277\204\2534\277\364\035\313\277\214\364?\277\210\360\024\276\302*\221\277\236\244\013?\010\234\324?\307\310\360?\313\276f?\364\2667\276q\235\013\277J<M\276\240P\301>\336\364U?\303\036\251?\340\252\270\276k\277\352>4\317\307\276\010\376\316\277\346W\354\276;\000\227\2768\275\022\275\224qN>\222\351\224\277\260\357\241\275\314\221\207?z[\325?rAZ?\266\251\273\277~\372\213\277{\356\362\276n\235*\277x\305\352\275\273s\371\276\330\266M?$\3728\276\254|\260?+\341\214?P\210\255=\007\227\235\276\346\311\035\277\354\231\203\276\030\362\375<\352/\013\276\225)S\2770Q\254\277`@\021\277\3025)\277\035\367l?\236T\341?\357\003\247?Bt\275?\202\022\215>\000z\233\276\0328\311\276\244s\004\2770\373\250\275\026Lm=\351\260\353\276\022t\361\276\307\002\206\277\036e$\277@f\342\275~\242\307\276\020O\233>\244}\001\277\020\201\213<f%\256\276\014\367\255\277\360\"\226\275\003\252\035\277\002f\241\276(\252_?\0304\021>\254\375\023?\247\206\224\276%\354\262?\237\211\251?\265`\023@\230$\256?\201G\022?0\344_>\300\253\325\276p^6\275\253\276\255>>X\034\277:\356\224>\321\250~\276\027\267\006?4*\306=\217\020\r?\303\034\245\277\337\202\253\277R\307\317\276#\016\216\277N\026x\277\317\237\222\277 \002\035\276b\331\226?\"\022\247?\370\250\375\276\027<\234\277\270\205\201\277g\r\217\277\337\212Y\277\022!\014\277n\035C\277\335{*?\367\"\222?\236\004\007?\360E\010\277\330\324\036\276\304l\n\277\3728\013\276J6\033?\n\356\014\276$Uo?\354G\230?\006\220\200?\344B\264?#\255\354?\350\310\376?\016;\273?D0\321?\372\323\252\277\037\253\320\277\245\246\315\277\020X\314\277H\346\212\276\300T\221\274D\267U\275\000\233\343>,jB?\370\035\306\275\324\301\225\276.}\263>\026+\035\277\356N\342\277fW\265\277w\241\354\277d\327\335\276\361E\374>@\336\245=@\t1\277\247M\210\277\006\025\261\277\002K\370\277@\200\331\277\034\240\322\275_\321\035\277>\207\270\276<\250q\275B\003\200\277VoT\277\330}\362\277\002\354\220\277\323*+\277T\352\261\276\211p\216?\"\321\204?\353\337\006?\022\371]?\254\034-?\220\244\247\276 \307\354? Qj?G\022\335>\330\343O\276\345>\217\276X\344\256>r\354F\276\372^@\276\320m\312>\\_0?\254J\210>\251\213x?\202\265+?\257E\212>\321[`?\312\225\374?\272\370=@p\220\351?\354\315\004@\31688@0\323\023@\264M\'@\256\235?@\250B\365?\372\301\001@l\342\262?\273z\252?\300rw> \327\014<d)\230\276\010\207\'\277H\342>?(\265\237?\240\333*@\324\"\'@`\013\225?`@\320?\014\334\216?wB\264?\351\036\256?1)\367?D\203\247?\202\227\251?6\366\245?d\017=?\3177\005@\255/\334?\363l\014?\365R\r?\216\366\310>\"-\225>N\312\274\276\033s\234\277IA3\277F\002\214\277\222(\030\277\303\336E\277\255\260\037\277W\001\367\276\034\353\217\277\300\203v\274\314\261\265<\337F\002?\342\213\232?\374\262\317?\'\036\356?o\357\372?J\267\277?iV,?A\371Z?\221\223$?\np\311>\3320\036?\336\035q\276\224\202~\277:\264\005\277\'7\221\276y\236a\277\344\236\215\277D\272\201\276\273-\346\277D\366\251\276:C\301\275\242\307\"?<\207\244>C\024\363\276\364T\301\276\272R\344\276\224\215]\277\305\030K\277\244V\006\276\355\205#\277\t\'\022?\206\317x>F\202\206>\314\211\247\276\374\254\243=\034\022\020>\200\260\376\275p5d\277_\220\023\277\202\212\346\277\200\246\007\300\214\374\031\300p\322\310\276\nh\270>\231\t\203\277v\340\017\277\360`\355\277N\213\347\277\323\r$\300\205\317\016\300X\006>\277\205PJ\277\203\002E\277<D\033\277y\024Q\277\214\301\337>\263\241\351\276\264\274\330=kuY?<\241D?\020H\372>\2443\275?\217\226\311?Uu\216?\234\263\223?\002\315L?G\036<\277X\365\223\277\030\327h\2770\365J=\357\263)?\274\233\021?\200\247u?\355\024\203\277\330p\242\277*\351,\277\304\273\010?\351T\036?\340y\235>\231$x?\204\313\242?\020\350/>\364\304\233\276a\275\214\276x%\r>\200 \277:\373\346\'\276\375\342\023\277\\\016\300\277h\213\302\276\333\301=\300\214\263\346\277j\374\365\277\336\204\025\300b\304(\300\363j\312\277%\232\346\277\032\020\000\300o\267\000\300\236A\026\300\265G\n\300\356\016$\300;e\022\3000\356\267\277\327dV\277v\275\307>v\007\021>\316\235\217\276\311$\'\277\251.\200\277\332@n\277\336\026\212\277\270\021\014>f\276\274\276\317\222\367\276*@\203>\273rf\277\360\272v=\346\360I\277\232\003\332\277HF+\300\240\256\206\277[<\212\277\312\351\025\300\302f\016\300\032_\022\300\374\307 \300\322s\t\300mh\362\277\246Ut\277\3018\362\277\324|\253\277\247\227g\2770\216\202\277\275\025\236\277\212\361/\277\2149b\277\260\255\334\276p\332\177?(\375\356\276|o\252=P\330\237\274\026\331\227?\260\3042\276\342\263\254?\204\326H?`j\235\276F\000\321\276H\244\212=\340\016\311>t*]?\335nt\277`\277\241\277\3328\325\277j\2224\277_\270 \277PTm\277\355\333\207\277\320(2\277\303?e?\360\340\032@\227.\330?:\267\013\276\020\376\340\276\030\344;\277\216\331\260>\264H\025?E\330{?AE\350>\242\253\205?E8\316?\261\213\303?V\311\242?\2205l=P!2\277\344\330\017\277~\017\304\277\022\306\336\277O\354\315\2776\373\n\300T\257\"\300\242\334\371\277\320\236\334\277(\321\000\300hN\301\276\224\375\010\277\025\323u?\302\375S\277\002YT\277\210\265\362\277\260\375\245>Z\2511?V\265\326?\336Y\352?\206\333\251?X_\346>\312\022o>\370\027\342<\313\353[\277\364\275\344\276\232\214=>W[h\276\\\273\251\276\312$\270\277\2421\315\276a\340\235\277\215s\222\277+\244t\277&R\225>/gU?/m\000\300\273\274\022\300\276\"\300\277j}~\277\366\272\215\277\3347\234\276\"\342\214\276\374\320\336=\003\215\252>\375\274\220?\014\r\014@;\007\335?\216\373\017@\220Bg?\245e\033@z{\034@p=w?8\202\231=L5D?\304\003\311?\004\026\\?j9\220\276\245Pt?\352\000\202\276\'a\253?\320\310S\276\346q\337\276\336\270;\276\251\247\324\277\"\026\222\277\372\330\370\277+%\317\277\355q\n\300J\"2\300\373\213\271\277\026u\372\276\200\253y;\366\\\237\277\007\352o\277\264}U?\002\345\306>\342\275\277?\313U\210?H\024K?\260\216\340\276\000Y\314<m\277\200?:,\351?\300Z\315?\267\363\377?gB\347?/\275\255?v\023\032@:B\024@\201\217\016@\r\202\253?-K\247?\250&\303\276`\362x<%\330\016>\244d\017\275\177:\270>\332V\212?\220<e?lm_?x\3773?rx\214?iD\037?\344\030\205\275\2223\302?\270\203\224\276V?\227\275Vy\376?\033\254\313?\300\322g\277\2523#\277\326\222\300\277\343\202\216\277\365s\276\277~\203d\277vR\231\277\356\311 \300\021\335\007\300N\255o\300\251|6\300\273\'7\300R\302$\300\327RB\300j\347g\300\316\316r\300&4\216\277]\311_\277\020\t\215\277\340\343\005=\352mk=\275\035r?8\363\376>0\333\324\274\000\216\370\272S\203q?\214\260/\276\021.\252?\006\023\320?\033M\264?\326\313\233?\274,o?\212\277\335?\263\367\324?\272\262\227?!b8?.\257??<\337:>Bx\207\277\224\333\267>\344\247\322?\022W\367?\276n\304?\244v\333?\242\355\333?r\376\013@\367\001\270\276P\214\373\276\016\251o\277\221u\322\276\214j\226\275\3061\024\277Q\276\351\276\n\313\"?\014b\363>\275\373\311?H\233J@\252\306\032@\031\\-@\260vm@G:B@v\215/@\206\372\r@\307&\317?\243$\014@I\375\027@\365\263\272?n\365\234?\"\217\241?\246\353N\277T\201e\277F\014\"\277>l\337\2766\303\002\276\022\325\320\276\3409\223<]\235+?\010\0377?\302@x>_\3075?\002\321\321?\000\034_\273\253;\343\275\017\243>?\350m\300?n\363\227?\363\226\r?t\363Y>gw\315>(2\246>X\233?\277\372\016\337>P$\332>2\'G?;i\320?\226\001\207?\345n\353?\277m\001@[\347\375?@\200\373>U!\240>\202\372L>B(\201\276\320\323\021\277rOl\277\'\340\036\277W\361t\277\330\351\021?\341\256\204?\030\307\317?\273\270-?LM\n?\260\307\272?j\374\001@,\373\204@\346\357L@\0133$@<V\321?\231|\213?90\272?\347$n?\364\213\r\276<\017\200\276\365kH>\240/\000?^\267>?5\355\270?\376\233\355?*\345\342?\344\375\206?\367l\224?\203y\241?\266\005W?\342\207\214?\010\022\243?\270\351\020@\326L>@\366E\222@\331\272e@\230i\237?5\311$?\366\264\275?\020\\\332\275\007\002\332\276\000\2553\277\244ti\277\262\2422\277\245$+?\304\252\235=:\323\255\276\217\354S?\371~\345?\013\335v?\036\322\001@\212\325\336?_VC?\026%\031?\305\372\215\276s\262\">\272\036~?Xl\t?\300C[<\270V#\277\300\354\266\277Z \317\277\254\210>\277{E\r@\212o\310?\317d\267?\001Y\353?\357A\240?\232\305\272>\340\323\252\276D|;\277\nyM\277\350\034\316=0o\334?\254\367\247?j\362\034@\n\360\021@\026\350\375?\276\366\004@\320\250\365?L\363\366?\373\334\317?8G\037@z\310\311?\366\003\365?\225\340\316?\3663\323?\260\250\021?\264\215H\277|/\237\277\240y\002\277\321\362\006\277\364R\221?t\336X>\\\237\342>pJ\211=\241S5?\254\372\032?X\212\231\277\3408Q\275\022\245\364\276\312\362\275\277\236I\224\277\276H\265>\007\326\237?L\345\230?#lJ?f\324)?aem\277\301\335\314\277\262e\253\277d\001b\277\026q\310\276\016F}\277\354\347\352\276\246\241\214\277\277mv\2775\272\000\300\264*,\277\366\010\377\276\242\354\255\276\306K~\277\211\302\222\277H\271\343\277\274\260\351\277\377<\027\277\270\235\343\2776U\203\277\304\314\027\277\327\347\332\276\230^^\275\025;\"\277\242\277\201\277\020\310M=\203\247R?We$\277jL\333\277\365Q\276\277R\307{\277R\016D?7U\213>^\362\225>\200\317\330\275\3215\233\276Q3+\277k\333!\277\367\177.\277\244z\223\275g\026\206\277\324\333.>\376\212\243>\220\351\000@\276\200\n@Z\251\033@\254]\271?\240\036\n@\366Y\355?\361\261\303?\314.\205>\016b\031?\360\310I>\360^\376>\324\030\013\277f\355\027\300\202\244\336\277\0077\337\277#\327\360\277\240\374\313\277\343&H\277\300\n\331\275\354x\217>\302\007\336\275\265j\037?\224\'\231?8\373\231\277\'\260r\277\200\214\204=r\031\345>\222\267\010\277\303\212o\2774$S\276\300\372\314;\323\207\226\274y\377\213\277\350\363M\276\314\272)=5gO\277@\336r=\372\333\272\276h\376j\276D_\255\276\331\367@\276u\375\250\277j\307\251\276I\203\304\277vMS\277\023p\017?\345B\376?\337\303\225?\222\216\343\276I}\204\277\305s\204\277^>R\277B\243\321>PP\300>\001;u\277\252 7\277\'\263\236\277p\251/\277\354\226N\277z\263\242>x%\217?\213+\233?\310\200#?\210\367\356?w\347\031?\375\n\010@yX\304?Ti\215?.\363\031?ozG?$9d?7_\027?\316f\260\277;\177\030\277\022,^\277\304\035\346\276\372h\006\277v\344\314\276=\373\365\277\301\323\230\277\010\3649\277\000\215\261\2773\364{\277\300\265K\277\270\305o\277\317\017=\277\315\362|\277R\203\024\277\200\342\257= /c>\340\212\014\274?\022{\277xZ2\276\347M/?*\372v?\263\303\231?\210\265\266>\376\341O\276\204im=]\377$?\204\264\226?\030\312\324>\014@V\277\224j\337\277\344\305\302\276\256X$\277\206\334;\277\352\243\312\276\355\247\217>\017\221\034?\245\236\033?\303{\351?\232U\204?\003\247\212?\032U\221\276/O\274\277\336)\304\277R\324\357\277`\027\377\277\345\'\317\277\202I1\277\304\247\200>\304\023c\277\3449\351\277\272d\305\277Y9\366\277X5\306\277\001:\313\277\300\276\204?\026)\207?G\"\236?\316\211\276?\023\377\207?{\356!\277U\177\337\277=\021\251\277|\235\310\277\027\224\250\277\370H\316\277E\232\247\277\334a\220\277\207dm\277\036\361z\277Y%\243\277\005\222\n\277 Co\277\223\001)\300d|B\3002\243^\300Ez\'\300\206i/\300\344[\372\277\346QD\277g\273\351\276\350t~=hO\361>\002\335\270>\315\364r\277\240\262\302\277\024\371\010\277(\006f\276\2710\240\277\317\036\265\277?\337i\277<$/\277\304\362a>\222\271\344\276\370\225\025\277l!\317\277P\352w\2760\273\001\277=#\262\277\202`+\277r\372\233\277\320\363\371\276\242i\221\277@.\014\2757-\325\276\232\033\267\2752\376\215\2774\271\030\276*\201]\276\324\263\021\276oA\206?\202\007\\?\250\3021\276vGK\276\330\324\256\277\010c\240\276ql\272\276\366\246\310\277\201\355\261\277\365\310\227\277([\277\277\220\022\264\277\242\361\252\277\353I\364\277\334X&?CS\375>\026\215Q\277\223\330\265\276\345B\232\277\200\245_\276f\324\026?\254\211\240>\216xo\277\"S\247\277\000\333j\276\372\025\350\276lD\241?\320\273\002\277\310]\201\277v\240\264\277@\004\337\277G\363b\277H\276\214\277\224xe\276]\215\340\276.\363^>\226\346\254>m\013`?LA\342>\013\027\003@\347<a?3\242\245?E\360\221?`sn?\241\306\305?n\322\257?p\353Y\276eM\252\275\341\205-\276\304\375\026?\236\331r?P\274\321\275\304\202\023\277S4m\2765P\222\276\351\276\252\276M\212\201\276k\r\245\2773\302\027\277\000*\225=\202U\035?\306[|\276\201\006\210\276\374\033\322=\227\2609>\030\322\347\275\032N\204\275W\235\204\277\304\316\262\277E\305\344\277(\035\006\276\224\017R>q*\006\277\206sW\277M\235\206\276\340]\323;$\007K?\200\322\034=Y\245\007\276\001 \251\277\226I$\277$\337\320\277>~\212\277j\225\316\277\301\374\027\277p\250 >\274\235\263?\026t\265>\302\244\003?\242\372D?}\275\301>\224\321\366\276NX.?\227,\274>\251T\"?0\332<>\200\270\342\276,}l\276N\363.?\226M\203?\177\333\224?\270~a>\243\215\220>\014\001\301\276\010\253\014\277\314\314#\277\257\217\277\277\376\3003\277\016\033\270\277\020\221\t\300\360\212\313\277\264\364\034\300\211fM\300\366\331\021?\370\342P>>\\\240?8e\251?\242\373\213?\266j\221?\377\350\277?\211\271\013?\252\002\200\276JW\254\277\\\361\001?\032\267\362>\222j\003\277S\215\240>vaT?\210\024$\277|w\212\277\201\027\235\2770K)\275\232\344\352>\000z\n\277\304\017\205\276`\363\220\276\234\260\235\277\233-p\276ft\224\277\030\204%>5\210p?\300\322\301?\260\355\320?re[?p\267\007?\205*\211\277\350\264\234\275qn\230\276\013{\222?\020W%\276aF(\277\204\251\017\277\023\231\201>Q\323\377\276x\316\210\275\257!\222?\\\331\364?8\240\263?f\330\013?\177i\306\276\006\\\033\277\303w^\276J\230\024?\200_Z?r\313\315\276\006\243\242\277\316\215\230\277\214\202\326\276\216\007_\277\366\353\231\277\370\347\252\277\276\340E\277\257\016_\277\\\356\215\277\200L\021\277\332oJ>\272\370\026?\367#w>\326\201\254\276\0328\332>\216\253-\277\211\2707?=\311\006?\300\316/\276+\rz\277\336\374+@\311P\r@\360\245h>\314\351P\276\000\301\307\276\273\002]?w\272\374?\340d\'>\341\220{?\005\200\245?\'\255\355?\"\375\332?\230\302\027\276F\371\222>V\001\207?\301\'\241?\322\372\260?\375\240\031@_E\367?\252\332\256?\304(\002@\263\303\026@\240|\237?\224\327_>\344\236-?a\024\032\277\312U\243\277\315\374\261\277h9\256>\300\233\016?\031\326\306?\271\333\n@\350q\205?r\206\206?Z#\364\276^\031]>nW\233\276\270R\204<\302\347\217>\312\203\224?x\016\232>\360\247=\277\260\216\333=\014\316\264>\372\227\032?\310\213D?\300w*<\332c\204>$\233\\\277NC\014\300\356\037<\277\\MI\277(\027\333>\234cZ?E\364\256?xx\033?[\235\360>\005\304\316>E\3000?\177^\323\277T\232\367\277\274\243\203\277\002\363&\277\372D\266\277\2121\344\277\036\004\t\300\006\312-\300\372_A\277\262\255\321>\031s\312?\314;\341?\202\252\270?\023b\030@iB\002@?\230\327?S\010\337?\300\337\233>f\261;?\250}]>mh\235?\335\313H?\207\301\236>\215\366\376>\213;\245?`\263\217?u\317$\277\375\025\\\277\370\023u\277\357\352\325\2777H\324\277`\035\037\277?\270\'\277r\271\236\276-\346\211\276!\200G\277\335\037\023\2770\232p\276\n\304\t?\210\332:?t\\/?rZ\260\2761\254\250\277\240\261\247\275\345\255\264?4\016\t@\241\203\304?\2211\201?\300\n-=*\236\264\276&\365\030\277\374\005!\277\034\207[\277\371\350\023\277.\252*>a\007p\277\275\335\310\276\202\332\'>\346 !?t\341f?$i(?\010~\203\277 \334\214<4DK\276\314 \340\276l\266\205?\212\353\313?\214s\356\276\300\232X=\317\363O?Dm\020\277l\237U\277D+\320>\354\300L?hb\213=\026\301\245\276\006\360e\276(\313\271\274\254t;?,\034\333?\362C\333?@~\222?>\331\242?\2068\253?`A\246?\004\342Z\276\024\340\213\276\354\250w\277\304\372\331\277\201n\227\277L!\007\300\354,\331\277\240\244\371\277\252\206g\277\335,\240\277\366\267F\277\305\3579\277Dr\331\277\021 \223\277\340^\315\277|\025\363\277b\224\352\277\014g\222\277\360{\254\275\2720\023?\270\356\264=/=\236?\300\367$<\260`y>"
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/normalize_element/component_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
              dim {
                size: 800
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/TensorSliceDataset"
      op: "TensorSliceDataset"
      input: "OptimizeDataset/normalize_element/component_0:output:0"
      input: "OptimizeDataset/normalize_element/component_1:output:0"
      input: "OptimizeDataset/normalize_element/component_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_DOUBLE
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 24
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 24
              }
              dim {
                size: 1
              }
            }
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/filename"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ""
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/CacheDataset"
      op: "CacheDataset"
      input: "OptimizeDataset/TensorSliceDataset:handle:0"
      input: "OptimizeDataset/filename:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 24
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 24
              }
              dim {
                size: 1
              }
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_DOUBLE
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/buffer_size"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 500
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/seed"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/seed2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/ShuffleDataset"
      op: "ShuffleDataset"
      input: "OptimizeDataset/CacheDataset:handle:0"
      input: "OptimizeDataset/buffer_size:output:0"
      input: "OptimizeDataset/seed:output:0"
      input: "OptimizeDataset/seed2:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 24
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 24
              }
              dim {
                size: 1
              }
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_DOUBLE
          }
        }
      }
      attr {
        key: "reshuffle_each_iteration"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptimizeDataset/batch_size"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 4
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/drop_remainder"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
            }
            bool_val: true
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/BatchDatasetV2"
      op: "BatchDatasetV2"
      input: "OptimizeDataset/ShuffleDataset:handle:0"
      input: "OptimizeDataset/batch_size:output:0"
      input: "OptimizeDataset/drop_remainder:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
              dim {
                size: 24
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 4
              }
              dim {
                size: 24
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_DOUBLE
          }
        }
      }
      attr {
        key: "parallel_copy"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptimizeDataset"
      op: "OptimizeDataset"
      input: "OptimizeDataset/BatchDatasetV2:handle:0"
      input: "optimizations:output:0"
      attr {
        key: "optimization_configs"
        value {
          list {
            s: "map_vectorization:use_choose_fastest:false"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
              dim {
                size: 24
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 4
              }
              dim {
                size: 24
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_DOUBLE
          }
        }
      }
    }
    node_def {
      name: "ModelDataset"
      op: "ModelDataset"
      input: "OptimizeDataset:handle:0"
      attr {
        key: "algorithm"
        value {
          i: 0
        }
      }
      attr {
        key: "cpu_budget"
        value {
          i: 0
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
              dim {
                size: 24
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 4
              }
              dim {
                size: 24
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_DOUBLE
          }
        }
      }
    }
    ret {
      key: "modeldataset"
      value: "ModelDataset:handle:0"
    }
    attr {
      key: "_disable_call_shape_inference"
      value {
        b: true
      }
    }
  }
}
versions {
  producer: 134
  min_consumer: 12
}
