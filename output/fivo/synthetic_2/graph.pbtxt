node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tensors/normalize_tensors/component_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 800
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        tensor_content: "\247\300\000>\224DX\277\010\322\326=\366k\223\2743\001\264>4\376`?l\364\025?\222:t?\216\2004?\006\264\212?<\224\255>xX:\277\023\377\240\277\271\226\232\277\300\202\203\277\306\207z\277*\362\006\277\2763^?l\252\212=f\201,?\036%\206\276\200IB\277F\225#\277)_\'\277\233\3222>\310\n\236>jm\245>\345\307\021?h\361\226?\265\341\227?\331\347\205?\250\331\247?\361\035\264?\017\305N?\200\"\211>\355\"\263?\320k\202?T\252\274>\334\330g>\200W\373<\256_*>bE@?\310\262\230?\310\371B?\322v\205?$\363\264>g\030\263>\372\351\021>\343\337\036\276\212\313 \277:\304\276>P\335\215>>\320\210=\212\207\264\277~\341\014\277_R\217\276\226>/\277n(\361\276\355&\210\277l\213V\277\336c\302\277B\324\302\277\202O:\277u\237\205\277\n\376\221\276>\025\275>\365\260\266?\234\252N?a\002\316\276\010\321\327\275`\250W\273\333v\200>\177c`?\305\205\232?tT\273>\273\333\255\277H\006d\277\250V\003\277\210K\246\277n\220a\277n\023?\276\266\241\253>`\t\343?\261n\020@\213}%@\327\321\014@\351tn?\276K\267>(\237\336\275\271\030\214\275N\350\341=\254\260x>*\356I\276W\307\006\277\r\336y\277r\347\315\276O\021\332>jA\t?\347\272q?z\n\372?t\0130@\rP\006@\267\211\302?\273\222\336?J\003\345?\272a\"?\307\215\235>\244\263\210?a%4?\205Ha>&\242*\276\027\275\306\277\340\272\223\277v\327\247\277\245i\241\277\331=\037\3005\036$\300\022\275Z\300X\365\022\300\324\207\022\3007\275V\2779\3724\277\336\2147\277X\361\204\2770\303\276\277)\327\004\300\24708\300\"{\253\2778=\240\277\333\250\323\277\312\210v\277:_}\277\265\235x\277<\271\236\276\334B\007\277\2346d>~d\256\276X\375u\277\220\362\210\277\376r\200\277 \212%\277\241#m\277\360\315\022\2754\347\213;\3073\300\274va%?\"\317\311>gI\031?\030Uw=\357\244\217>V\227\235?\304\027\366>P\326\275\274&h\351=\222r\351>\212H\200?\\<\267?\315\201!?J#\225?\316\202\315?\263gd?\244\0231>o\360\201\276&4\221?\210\303\323>\\\2751?\214\021a>x\325=?\204\322\341\275|\263\020\276h.&?<\365\225=1\336$\277\304\276\324\276r\371\036\276t@\326\276\370\275\031\275os\017?E\002-?:hi>\340\227U?h{\353\275.r\201>Y\340V\276\3409\305\277\020a\036\277\271)\207\2766\002)\276Ym\237\275\n\273\300\2760\316\035=\200c\342>_\302s? \371\263?\252o!@S\344\240?\277N\262>_\016k?\334\217\r?\342\270O?8\305\250\275+\326\204\277<E\007\300A\215\304\277v\240\366\2776\003_\277ny\277\276T\000\000>\177\371\246\276x>\270\276VF\304\277~l\307\277\232\240g\277\033W\232\277Ur\205\277\3201|=Y\034\215>\377NU\277\200\016\341<\214- \277`\023\305\276`A\220>\220\'\374>dBT?\235{K?\000n\023\272\0225\225\277SB\326\277\300\006\010\276\\5\n\277\352\200\312\277@4\311\277V\341:\277\000I5;\353f\365>\364K\221=+\363F?P\217\024=9\006\235\275\307]a>g^\241?\365\214\004?\033I ?xO!?\316l\000?\374)\226=\006d\216=Z[\005\277\335\244\034\277\000\274@:r\370:>\204z\337\2760p\240<\216\321\302??\344\256?\320\255\235?r:\221?\304\372\366?\210e3@3\224\251?_\253U?\254\217m?:,\260?\211+\n?\246\034W\277\364\321\016\276\025\213\332\276\'n\025\276\000\215\337>6\334\022>\000\272\201\271\235\226\233>\307C\017>\351\275[\277\352\250\357\277XE\017\300\306~\367\277\254\343\315\277X\312\327\277\200$\007\300o\217\355\277\001;\031\300,\255\323\277>\202a\277\000D\240\277%\021\274\277.\036\213\277.\234\327\276\306\224q?\3711\276?G\020\300?\354\266\316?7A\026@z\276F?\323o\227?\rU\304?\344\273\271?\n\347\300?\350_@@\301\256P@\230z\352?a\r\310?0|\260?\020\364\225>\020\305\236?\364>\000?\000\t\256<\252 $>\334\202\377\276Z\323z\276\362,>\276\250\305\005\275~\323\241?\201#\253?\356\353\261?\253(\236?\347\227\310>H(\355\275\005\016\203=/@\302\276:d\202\277\272\207-\277@\251\345>\226\024i>\210\225s>\260V\204?\220\237\230?\204#\">\221\036Z\2761\337\354=\367I\333=\253UL?\221\211\302?m}\202?\262\312\310?\316\240\326?\330[@>\272n\230?s\'\010@\\\374\233?I{\261?\035G,?T\375\255>A\261R?\354\013\307=hY\245\276$ \004>\271\214\035\277\362\371h\277H0\214\277\002Z\244\276b\306Z\277}\204\227\276be\251>\253\313A?4po?\212\001\013?V\242!>\2463\376>\257\353\370\276I\343\303<\220-9?(\257\374=\004I\234\277i\261\026\277x\031\305\277`l\300\277\260\350\327\277\262\r\236\277\026\277*\277x\243\205=\245\275\236?\316\230\343>\270S$?-N\031?\200\007\215?@\217\005<\270-\301=\236\342.\276\254\342<\277\344K\243>h*0>\003\260\207=\250\234\203=\376\355\310?\310\206\333?9t\343?\207\005\345?\014\225\321?\322n\250?\227\004\250?D\267}?\320\367\215>k_\213>A\272d\277tV\202>\3129\230\275M?\217\276oY\370>\245K&?\022H\257?6\321\344?x\207\363\275\025\263T\277r/\031\277\240\254\265\276\344\323\236\277D|\341\277I\243\214?\2533\327??\003\204?q\311\355>\307\"X?\357\343\356>7\242\275\276\023W8\276^HR\277\336{\033\277\232\245\240\277\202\213:\277\266\364\300\277\270\020]>\240Zb\277~\244m?o\271\206? z\032?L\324\234?\345)\250?\232\200$?\367\327\020?}\177\330>\303\261\006>z\215\250\276 \375)\275c\253\006\277/Mm\276\361\026\036\277\213\374\030\277\234\273\304=p\363\236>\002\357\254\275~\207\276\276nT\030?\245\212=?\326IS?9\001-?\250\304\n\277\\,\235=2\207n?5\027\203?^<\302?R\035\021?\354\206D?\374H\361>\363\235\020?\r\334\216?\033S-\276\242 _\277\320\037\202\277\256\325\254\277q\030\244\277\036s\220\277\\to\277u\313\235\277K`\316\277\342z\020\277\366T\325\2766\342&\277\370He\276\264\265\277\276R\177O\277\214\232\304\276\020\320\'\277 \373\241\274\216\301\210>\261\225!?\351#\'?\226C\267?\360\007\342?E\2472?\020\203\003@\335\355\213?\032\356P?\207\214\212>\347@\342>\354\200\351\276\316\250c\277B\303#\277`\242_\277\000.\253\277\252\372\364\277\324T\225\277\346\327\326\276\2249&\276\021\nq\277\272/)\276\257|\373>k\233$?\360\237\006=\270\254r\274\247\024\270\275\027\013\236\276\0243\217>\253\203\217\276S\315F\276\354R\317?\017CT?\316)\201>\341\\\017?\360\000U?\032X\024>\360\r(<\010\304\313>\221!\354>\354D\204\275(&\236>Gq\240>\216\221\215\277vI+\277\240\311\356>vaX\277O\210\353\276\243\2671\277 \216\033>6Z\273>8\360B?\224\333\235?\246\004\242?\031I\321>\000qV?li\272?\320Al?\200\301\240\274\034\306F\275K\235\006?\350\225\255\275f:Z\276\304DN\277\344\245\352\277P\263\264\277\311\277\255\277u\r\277\276\242\327\320\275\0165\246\276w\345\"\277\344\000r\276:\377J\277\340\237\336\277EA[\277\345\373\272\276\213o\271\277\212@\273\277}~\005\277\267\361\375\276x0+\277RJM\277<\"y>tl\205\275\266\272\236\276\3708\251>\272\257\023\2762\353\274\276\226\031\215\2770G\262\277\006\031\236\277\254p\272\277\317d\013\277R\236E\277\252\277\220\277f2X\277\014\t\004?<\270\201\276y\250^\276\0355\204?\n\350L?q\376%?\003\276B\276.\236p=\022\301\n\277\274\336\355=,\241\315\276\000;\265;I\003S\277\037\255\205\277|\"\256\277\245]\272\277\301\217\373\276z\010*\277`D\211\277`mP>\226d\304>\375\323\006?\300?\216=-}\230?\207\344T?\220\026\347\276\210G4\276\247\026F?M7\374?}\024\031@q\010\242\277zCa\277 \263\232>\326\324\264>\324G!\277\216\375\264> \377\246>\246J\216\276\311\352i\277#_m\277\226\323\253\277-\320?\277R\331\214\276\304\n\002=q\214@?\240\365z=\266r\244>f\221c?\226\302\223?hX\027\276\214wr?hX\315?\324\316\315>X*=?u\216a?\224R\367?\237\360\017@Z\216\"@^\\\263?QW\236?\366]1?\302\335\357>(i\256?S\230\000?$\324~?\310~\030?K\367\t?\262\033\362=]SW=\273\032\217\277H\031\301=\263]0\277\377\230\036?C\211\247?\210\357b?6\307\220>,\341\230?\330\230$>L\360\364?\022\245\305?\020,\341?\266:d?*\017\247?\243\305\312?\235\354d? \252\004\276\032\000\370>\020\006\363>\250\r\221\276\022N\035>\242\330\025?\263\017\210>ZE\222\275\331z\213?\240\tU=\253\2630?@\242\032=[\3328\277\222\213]\277\264\274\n\277\354\217\201\276\025\032\214\276 \357\n?\262$|?\260z\333?\365\\\371?\270\n\366?\210*\254?\237x\307?0\247{?t\212o?T{$?\220\275\321\275\354\020\316\274\206\341\271>\26252?\230\303q?\253G/?\260Fl?\241\220*?\304\236\310?t\235(?\326\206\233?\364\034\230?\230\014$\276dv\301\274*\\\364\277\255@\204\277iL\243\277\n\202\360\276\351\266\370\276\350\214\005\277qm\024\277\376I\013\276\2547\034?x\010\257?\241\267\006@r;\010@\306T @!\257\020@\351\311\001@n\222:?*vT?\030\337$=5o7?\024\203|?l6z?\214\177P?\220\275\241\275[0\304>\324\220\207>D\007\262\276\246\371e\277\273\001\322\277\036X\313\277\231\240\306\277Q9\210\2775\'\272\277\220\r\347\277h\342\361\277,{\276\277(\032\335\277\227\214\264\277r\375\263\277\333y\205\277\252\232Z\277\036\212s\277\034\211v>\\\031F>gq\333=\255{\310=.QT>\361r\231=|\367\233>\302\203\n?\n\365\025\276\014\021\204\277\"\272\316\277\n\265\256\277 \231\315\277\016\334s\277/\314g\277n\233\306\2771\'\277\277.\361\321\276!\232.>\217\271j\276U\363e\277\200\022\247\277Of\"\277\2307\241\275zw\321\276\2364\361\275A\225\210\276-\205Y\277\0267c\277\370\200\030\276\354\305\273\276\354\'\240\276\354\352\273>\367\250\016?u\323\205?\271\307+?\234\364\364=B)\226?\310\267\"?\324\244K?\264\251<?\001jM?\2373`?i\260T?Y\013d?.?\201?\370\n\250=\235X$>\310\000\231\275F0\031=\177n\030\276\352\207\241\276r\033\270\2755|\243=O\031\376>#\206\262\277ph\246\276i`\373>\024\252\257=\261Z\t=\221\\\273\276\027\257\247\276v\0106>\211\216\220\2764]:\277\037\200\320\277+\010\006\277+D\353\276\\\200\262\276~\350i\276\333\375\225==^$\277\030z6\275\227e9?\353u\250\276\342P_\276\333\255\246\276\356{\270\277\254\323\220\277\205\017\000?\300\233\036\275#\354\326>\273\037D?R\362\254>\344\337\305=G\363\017>e\257\222\277\320S\324\275\263u\332>\320w\234?\233\261\213?\300R\264?\257\270\350?>\233\265?\022$\022?\223\311\"\277\027\341\302\276q\201\245\277\364k\254\277\230\272m\276\220\236\252\276\373\356\027\277\200F\234<\312w\265\275\334SY?P\021\004>\2472\t\277\360AL\277x\322\216\275\014\3756\276\255\216\017>\340\362U?X\352K>\262\033\027\277!\0269\277\014\263B\277,X\223\277\332+\005\277(\326\230\276,j\243\277\230v\265\2760-\355\276\3401{=\033t|?\223j ?\002\323\207>:a\364\276%\201\235?\006_\312?\357\024\321?0\343\273\275\237?7\277\364\352\271\277\310}\303\277\204\253\205\277\244\274\243\277\361-\024\277iz\253\2773v\241\277\335\036\254\277N\343r\277>]e\277\304\235H\277\2203\006\276xR-\276PE\307>\336\342\200>\274`i>]\013\244\277h\243\320\277q\272\240\277\007\030\026\277\222v.\276D\370\r\277\260\336\266\274M\304d?\"w7?\310(\222=\227\365\370>@\2278\274\237\222\257\277\000\323\230\274x\277\024?a8\035?\rOX?L\254\264>\372v\376=j\\\022? \256\342>\240\257\320\274\312Y\372\274;\203\323\276m\227\025?Y\226\275>\223\376\266?\034\n\203\277\tq^\277\230\264\"\2776\0144>\003\010#?\25021?\333\033\273>4X\364\276\207\356+\277\014\232l\277\320\306r\275#\235\017?>K5?r\212\232?\222\033T?6\326\340\276\344V#?:\255\217?\210\373\262?*\255\317?IU\334?t\330\261?j\370\206?0\354o?\246#\035?\212\372\317>\352\367j>\020\036\304\276uG}\277\300\313\232=\020\243\342\2766\202%\277\361\343\204\277t\2168\277\200n\226\277\234\024,\276\027\301\245\276\367\332K\277O@\242\276\000\"S\277\366D\005\277D\023m\277D\224N\277\304\262N\277\000\032\234\272xo\207\276\247\034\221\277\000\362\201\277k\246\257?,\243\260>P\204\022\274M|\207\276\360N\334\276\362\036z\276^\233\302\276\2124\234\276juY\277X\275\222\2755\302\027\277w<\035\276\0016K\276J2\024\277\313\247\320\277x\340\351\276\225v!\277\313\302W\277\214?r\277\216y\323\277o({\277\346\205\'\277\034\0334\277\325\355\272\276\301B\237>\323&\227?J\273\243?\004vf?@5\200?\356\260\225?x\252B?P\356\023=\240\225\201\276\376\036H>\313\3562?\310Kb?P\340\021=9\3712\275%\\\032\277d\300h\277>\204;\277\320\263&\275\016~+\276`\336\311\273-\0003?\240\025\223>p\213[?\022\337\'\277;r\234\2770MJ\277\2662{\277\021\301n\277\014\200t\277*\241r\277\024\231\"\277\322\014\273\2760\027,\277\017\327s\277\364\226\265\277\357S\246\277\276-\351\277\300v}\276\243\270\237\277\202\245\266\277!\020\237\277\377{\224\277\330\235\021\277\260\203\n=-\365G?2\335\010\277\216\245\\>\242z\014?\342\n\231>\200t\r?~2[?\311m\247?]\360\277?c\343z?\325\355\225?\374X\206>$ \024?\216\233\257?\252\204`?\306\235\204>6\202\344\275\025\305\025\277\005`\031\277,yM\277C=\202\2778\265\341\277\212\2455\277)r\023\277\020\363\264=\343\377\304\276\260\332\231\276\265\262\366\276Z3\235\277\\\307\305\2765\344\242>\2308\213=`\337\033\277 \315\306\277\234u\315\277`\232\220\277\215y\355\276:\303\340\277v\370\244\276)\253\323>c\200\213?\225\021V?\317\364\000?*\330\"?,\305\210\276up\255\276>\260\264\276\256\262\000>\277\3632\277g1\035\277\310\315\346\276\034\206\274\276O\217\305\277\270\n\205\277\3006\226\277}\362\311\277D#S\277\243Y\213\276\261P\266\277w4\200\277\006\226\324\277\360L\364\276\252\350}\277l\024\023\277\343H^?\324D\345=\377\234\234\276\241\322\266\276\225\224<\277\334\324\212\275>\216?\276%I9\277B\235?\277r\344\271\276t\247[?6[\352>o\346\273>@\t\357<^6\023\275\366$\253>j\371/?n\330\013?\376\005C?\277\333\201?\240H\337=\256q >\362\240\206\275|\357\370\275<\277\222?:\334\227?\321\337\205?\021?\264?\316W\233?(\230\010@\376s\204?=\343\232?\347x\013?\210\177\230?k\377\014?v->>\333;\260>R\242\216>\252\347#\276\220Q,>\371\363_>I7H?\032@\263?MM\346?\\\"\035@\222O\220?\274,j>\342<H\276\3643S>hv\315?C\272\037@\030\257\377? \322\356?Q<\000@\200/\307?\226l\261?\216\277\253?\\\341\250?Z\006\274?F@\243?\010X\343>)\363\004?\357\025\255\276>\213\303\276\354g\246\276e7,\277*sl\277x\023\352\275Rs\374=\034\333\206?{\331\271?\320\200N=\312\261\324>h\016.?k\225w\277\314\327T\277`\233\246\277t\302\306\277J\330!\277*\326\255\276\202\376/\277\234;\230>A\264\341\276v\027n\277\246\275\305\277\330\000\366\277\2318\324\277\275\235\346\277\250\306g\277\300\235\223\277\300\332\242\275\177g4?\201g\301?\305\304r?\232a\211>\025\250\037?\346\355\200?\346\274\241?\272\036\355>\211\323\365>\002c\\?\3642\334?cc\307?\2343\221?xc\\>\037\230~\277;\'i\2775\236\347\276\016\374\257\277\246<\002\277\354\361z>\311\243\007?\373\274-\277\342u+\277B5\014\2776o\031?J1T?\370a\t?:zu>\362\336\213?s\n\217?@\332\006\275\036\3525\276\377x\005\277\310I\\\276n\235\272\276/\223\315\276\224\261\000?\260\306\230?\0179\231?b\372\321>fwI?\347\242\031\300\220\261\320\277\242\275\231\277\360\334T\277\364\253H\276\000\302\014\277\236\035\036\276\222-\001?GW>?\\\372U>\177\371L>\352D\304\2760\370\276<\000\220\377>\234\260\267\275\320\246(\276x&5\276\361\2054?\000h\22096\230\230\276\325\343\035\277\220\274\014>T\330\302>\030i\014?9\222{?\216\200F?\024\203\260>Rp\344\276\200\321\220\273\256\314(>\364Y\022\277Q\014f\277O\323\234\277\355\335\336\276\017\320L>\220XS\277\3436X\277o\230\215\277\304\315z\277\240\035W\277\360\204\031>\313q\231\276\200%(\277W\033\026\277\006\305v\277vSj\277@Aj\275\032\004\036\275\233\345\200?\3209\254?T\307&?\331\214\264?\354\000\034?\016\316$?\264\035\311?\356\237\243?\353\001\232?0\322\265?<\271t> y\342>\336\215\326\275\306\"\005>r/\304\276\346\243]>\356\346\355\276\3120\037\276\377\262\266\275T\354\202\275\270\343}?\376\\\r>9p\313?$Z\225?(ka\277m\264\234\277\254\'=\276\310\377J\276\260\025\244\277\225~\336\277\034\335\264\277\273\2261\277Kp-\277\276\247\342\276p\331\206<\346m\007>\200\035\357\276\240\001\327=4\205\350>#\007-?\276\245\277>\2610\215?`\262i?G\341V?\232\266\244?\264\266\033\277O\200\022\277\314\204\031\277\026/\327\275\304\240,\277@7\007\277\375\302E\277\016q\267\276\236\375\360=,\370d\276\026\366\236>2\177\362>L\301A?\033?\252?ic\367?\'L\351?+ \r@\357^\013@\333V\322?N\270\317?6\2211@\273\355\036@I\220\023@\346\310\365?\277*B?\270\\\227\276\037\371\220\277\n\303\226?0\257\255?\024\353h>=\232\007?vN\006?\260\377Z?\362\361g>\360Q\000\276{\204\035\276\242\335\215\276p\321\317\275\010C\337\274N{\316=\330\224o\276[k`\277J\226\201\277\243R\213\277\\\250\005>\370\357]=?Dt>\273\001\235>\010f\262\275\366\240U\277\341\221\205\277\257\313\227\276~\353^\277*k\226\276\032\017\241\275j\026\321\275t\002\255\276\007\270U\276\263fW>s\330\304>\222\272K?\242\226+?C\340\'?\300[\323<K\275\013?Y\031=?\350\202.>\020@6<s\321o>I%\213\276|\332\214\277\266\354\302\276\207\007\362\276\304\344\370=\252<\370>!\213\353\273\222\024\264\274#\2438?\244\343r\276\274\223t\275\374\345 =\261\340p?\356;\243?U\212G?\0003\255=\224bo\276i:\254>\357<W>$\357\267\276D\345\226\277\010\265\271\277\203=\237\277D\037z\277\374\251\214\277\016\035\274\277\225cj\277\274\313\016\300\232\352\r\300\302R\337\277T,\000?\307(q>\210\313~>@\177\211<\211\235\024>\177\375*\277\212\277s\277D\255J\276\364\305\220<\252A\377<lq\310\276\343\303\026>\"\376b\276\222fu>\220YT<\315\315\000\277q\233\375\276\206\'O?\020\0302>2n\341>C\372F\277\246P`\277\277\321C\277\231\331\305\277&\243\321\276\346\255%>\30035\274NNG?\266\347z?.\3167?:\251\215?\340y\265=f\256H?u\037\210?\3041\332>\366\321V\276\364\261(\277\256\300\006\277\356\256*\277L\301\231\277\233\203\230\277\036}\377\276\336\202~\277\320\3162=\033\033\020?d\327\033?\272\346y>i\263\013?.g\001\277\350\016\300=\204\326\333\276\372\203\246\276J\031\201\277\261\300\372\277\240\340\216\277\\\261\375\277\347\370\341\277=5\255\277F\306\017\300\271J\262\277\232\267\347\277`\340?=[\224#?\\-w\276\260\253!\277S\203\216\276\r\032-?\002{\353>\\-m\275\tp\267\276\351n\232\277oB\232\277\271\344C\276(\312\235\274\010\001A\275\253\\\222\277\262\3369\277h\'M>\252\031q?\226\'\007?\010\322\214>@\3461\277\220\376\307\277G#\314\277.\027\224\277\232G\243\277\210\231\215\277\270\267\221\277\201\372\004?(jd?ai5?t\261\202?\266\337v?$w#?ZD\014?\253\276\233?\275rd<.3\021>\236\3612?zA5?\036\205\221?\353\220\235?\346\304\302?\301a\334>U>C?\\\016\207?.\272\266?|\016\210?\212*\345>\244PQ?\367\254\267?.\336\005@yS\342?1\207\356?T\265\264?\363\214\255?\223\316\263?\247a\310?\027\374\241?|]\236?\245#\261>PH\245>\377\274\002?\250\376\027?.r\225\276\202\211\310\275n\301\250\276\334^\317\276P\270\200\275lr\n>\266m\036\277\354M\274\277d\272\006\300;\330e\27784\014\277\367\363\220\277\225Y\222\277\274z9\276\3278\366>\034\261\350\276\316\211\233\276\306\337\317\276N\250\251\277\256@\244\277\304\0137?\221u\232?L\'\252?@;\201\276B5\242\277\257\304\313\277\357\277\246\277;.\255\276\250\3542\277\340\226\245=(g\333\275\247\334|\277\004\263\214\277~\226!?\300\213\315=\320{\261?Z\336\372?\016) @+\014=?k\243=?\367\332\311?\000\354\266?\017\314\271?\370\037\366?\334l\235\277\240P\006\276\024\214D\276\276OX?.\"\004@\231\340\357?v\243\025@\204\367\020@\246\010\274?\363\0221?\320\311\221?\310\237\022?`T2?\236J\306?$j\020?V\301\005?\260AH?\352nA\276|\301\361>\367\303\230\276-\0356\276\334\013\305>a\257~\276>.\223\275&T\000\275\247\303\272\276\264\357B\277\210\360\267=\005\005\324\276\227]y\276\250\346g\277!\300t\277\320\312l\277n\203\t\277\234.=\277\354\026\252\275\302q.?\002\005\214?\035c\360?B\363\337?\250G@@\2625/@(\306>@>2\315?@\233\236?\177B\261?\200\374\361>\014St?\327\035\277\277A\231z\277Va\017\277|\206/\277\334+!\276 \013\026?\340k\307>f\254\003\277\234\201\257>\002$\262=\226\305I\277\266\302\237\277D\322U\277\000\203\207\273\004Y\353\276\232>u\277V5_\27766\257\277Qd\022\277v?\224\277\220}\224=2j\314\276\324\032m\277\016\303\331\277\217\0021?\210\335\372=JL\022?\'\336\323>P?\304=T-N?L\213`?\376\324\214\277`\310\251\277\270o\033\277\234\3679\277dM\035\276\331,\005\277\342P\032?\234;\220?\376z\221?\230\213\372\275\303\031;?M\203<?\205\202v?fk\312?\004\006\351?\260w\266?\370;x>\227[\326\2778{\363\277@\236\221\277<LR>\230\205\203\276[\005r?k\022\222?K\336y?\005\356\007?\3347\277\275\302a\036>h\246\227=\200\335\252>RXt?\345\001f?\016L\310?\236n\332?\tu\211?\300\254\274?\243\202\203?\314\270\005? \254c\277\302g\022\277\036\007j\276\203D\031\277w/\334\2764\227\246\2776I\031\300\260\r\367\277b@\301\277$\036\035\277SO\366\276/ST\277\031n\336\276\244\3074\275\255\216\205\277\272c\307\277\263\026\376\276D\002\341\276_\323\003\277~\220\275>\232\t\373\276\316:\313\276\300\'\206\275\177\305N\277\242\351\021\277c;\037\277\231\232)\277>3\200\276>7\205\277:C\267\276@\203\t=\016\243\372>K:\207?\316\235.?\344\001\002>\252\224\035>_\323$?\314\247\333>\004\317\355>\351\2643>rg\235\275\277\330\252=&\021\314\275\302^\316==u\034\277\267\363!\277;s\301\276\210\0055?\334\276\336>\224\357\007?\313n^?\321z\312\276\2713\001\277\303\216O\277r\214\004\277\204\315s\277\031i\200\277\240C\336\2771\315\241\277\226}R\277\253\006\310>\300\376P>\322H\005\277,\000\224\276\266B\374\276@\342\342\275\033(x\276k\177\034>\024\032\353\275z%.\277\377\'\221\277\300Q\325\277\310\323\320\277\243\273\267\277\230\007\301\276@Qj>\200\333\221\274\027Pw>@\243\\<\315\221O\276&\244\235\276\271\374\"\277\274\216c\2770\212\343\276 I\002\274\022\211\206>\357Yb?-\261R?h\013s\275\313\232/\277\337\"E\277\340O\203\277\250\n\235\277\327\243\217\277#\222\'\277h\n\202\275k\357A?\366.\332\276c\246\373\277\322\315\213\277\242@\212\277b\033\260\277R\323\310\277\326\306+\277\017[D\277\225y\233\277/\275W\277\222\2763>:\306\017\277|\352\233\277J\030\323\277\014K\234\277\310-\010\277@\312\325<\354\020\003\277\323\263\023\277\210\n|\276\340\315\013\2762\247f\277\204\243\245\277\000\022\304>\202\343\023?\330\252,\276\013k\221\277\r\241\215\277\300)\265\275\303K\344\276\324\256\037>\311\200$>\213PW?\250\006H?\002w\327\2762\2422\277\317\233T\277k\323\'\277(\324\363\275\254\252\305\275\013\320\027\277;\'A\2774e\355\276R\027\177\277\331`\264\277{N\265\276\307\037\254\276OS\177\276\242<\353>\322\250\232>bFu\276\372\274\206>S~\275\276\306s\017\277We\034\277x7Y>\324\241\244=\265\"\314\2752t\225\277\001\353\262\277\010p\335\277s\026(\277\010\022\220?\022\261\222?\030\177\230?\366q\210?\016\213\322>\214\350\300>\006\376\220=\214\300\004>NR_?\3400*\274\006Z\257\276|i`\277\254\303\334\277\300\234\016\276\006w\272>\254b\363>B\351g\276\333\033\005>Fr\310\2765\347\033\277A\t\275\276\236\367\010?\342\017k?\247\331\255?\235p\325?\340[\322>\323\3166?\220^\200?h\216o>.o-?(>\014\276>\304M?b\013\214?r\t\251?M\026\375?\004G\031@E\250\232\276\360\360o=0\212\255\276\371*<\276\314\217\023\277\330\223%\276\032\350\026?9|\004?\036\255\034>EP\307>\375\014\272?r=\333>z\304u?/r\246?\224\315\217?\021\226\207?\274g\321>\222\217$?\304\245K\277\347\263S\277\320\335J?a\345\037?\2004\255>\264\240h?\267\307\234\276\034\3530\277\240\336P=\264\345\262\275yw\262\276RS\016?,\205\310?WT\343?\222\222\263?\341\374\347?\327\364\272?\004\254\265?\220aS?w\255=?\222w\264?\014\246\201?V\024\207?%\001\270?\351;\376>xh\205=\256\242\221\277\2058_\277T\225\022\2766\265\234\276\370\241\352\275\321\373\375\276\211\307\035\276%\357\205\277\002\004+\277X\343\365\276\244\"\017\277\375\245\375\276\334\376\014\277\260\017\021>\266\023\271>O\273\225?3\321\205\277\320\026\'>\344\024\027\277\030\252\211\277\230\316\233>\34471=\020\344\037\276\023*6??;\202>Y\312;?8\370k?=w\362>\320\014\214?\260\210\242=>5m\276tz\326\276\232~O\277\230\\C\277 \'\355\274\272\207\251\275\001\330\250>W\033/?\320\374\030?b\031\355>\355~\220>pR\352\274\032\317J>~+\250>v\302\024>\257\267\222>\277\214\000>I\304\"\277\336,\316\276\266\003#\277\324\277\312\276\276T\304\276\244\361\361\274\262\347{>\\\215\032?U\317&\277v4\332\275\353\330\016?\252\246\364>`\000\237>\247\352\242>\3329\327?\\\214\252?\032\274\320?\332f\360?g+\330?\345}\342?Bi\223?\003\231\312?\353\336a?\254\000\347=\'\032\010\277\250eX\276\334Na\277%<a\277d\275\315\277L\331M;\256\346\203>`\245/?Q\251#?\240\276@\275\226C4\277\032\3527\276\t\004\021\277ZC\023?z\256D>\270S\243\274\263X\374=\323}\324\275\024\341/?\311\247\000?$\327\224? \034\225?\037g\333?\362\023\261?\273\244\362?\324\014\t?\3523\026?\356\324\204?\304G\177?\375D\362=\230\r)?\205b,?\316\275\213?\227\031\255?\326\336\343>\256(\211>\330\252\272>\007\233\017?R(\212>\240\000/?\354\236.\276zA\264=3\243D\276\264\224\001\276\030\344\344\276\034\214I\276\210\200w\276\206e\034>\256\201F?a\342\317?~d\001?\250P\"?0vE?\034\324q>\274A\343\276\220|\215=.\004H?J\263\256\2760\330\376\274\010\326\r>\036\322o?\305\\\202?\204\314 ?\212]\264>\242\370\265>REu\277\261\245\216\277\014\000\243\277\220xB\277\022=w\277\003\313\330\276Z\354\213\276\000\300\242:\271\025L\277sS^\277 N\301\2772\342\364\276\000\345\320?\212\237\266?L\001\216?\361\312\207?bE\337?\\#\247?\264\225x\276\035+.\276\215cE?\2360\313>gP\335>\302\020\035\277\344\367\035?4\373\227\276\027\277\237>\264\301\202>\004\354\215?\332\3072?\236\337\367>TV\263>\316\303P?\346\271\264?\005\244\201?\232\204\356?~\005n?\332\216\237?\302\337\357?(TE?\222iF?\276(C?\260\235\213?\252\355\264>\324\210\346>vs=?j\223\200\277\340\232\224\277\2165\237\277\031l\276\277\311\t\257\277o\326\240\277eBc\277\230\266\346\275\352P\023\277\346\016 \276\036W\344\275\320\251\203\277KS\304\276`\367\006<\343\375D\277 \275c=\316v\336>\343\374W?\3165u?\367\305\210?\214\330\307?\261\350X?\376\3143?`\004R?\213\370[?\244\240O?\037\265\212>mr\302?\032\300\240?\204$\250>\034=\322>\256+m?\311\206t?1\215\324?Vhe?\030#\004>\000\350\013=\226\264o?v\203\230\276<1\236\276\334\177e=\264Xb?\306\273\021?\300\235\027?\030\030\224?\334\215\322?\210\223\217?\242f\345?\354\214\202?\212\223\200?V!\212?\202y0?\030\273\315=\316CG\276\321\0169?\242.\004?\211\274\360>\326\360;\276-\246\367=\337\3400>\370\020\361\276\341\020.\277@\245\"\276\212\243\223\277\016\224&\300Y\301B\300AE\311\277\037\351\346\277`\256\257\277\252\212\244\277\277;\007\300x\371/\300\264\335.\300\201^.\300\310\'\010\300\304\261\\\277ty\'\277Nd\226\277j\372\031\277k\267\204\277$\316\234\277\317zk\277?;\020\277gw\212\277\340\255\370<\310\334\207\276\226d\037>\355\'7\277V\371\372\276,\034D\277\000\321\007=\247\247\323\275\364\373\316\276#W6?\230\277\373?\327\201\271?\304\265=?\234\364\013\276\362\204S\277\312d\264\277\255@\262\277\314d\207\276\273\\y>\344\325O?@y\273<\366J\355>\220\371G>\2337^\277iBE\277\224\312\204\277\344\301\362\276\333\214*?\204\270\'?^\331>?\350\240\022>D\341\314>t\265\273\276])\027\277\302\226!\277\361?G?\374\217U?X\032\250?`\332\212?\213\370;? \334\262>=\273\002?\242\355\027>=]M>\200\003\037>\232y\022?*Ez>\217<\213\277\004\362`\276T\034}\277\352\014w\274\014\352\267\274lK\256>b\240\002\277\350\205V\276\201-v\277\373V\317\276c\271\205\277=\275J\277\271\003\242\277\2443\277\277_\035\346\277D\277\351\277X\253\233\277(\003\253\276r\032/\277\200\216\223>.\312.\277\266\010&\276\345\005\017\276P\360\026?|*\246\276\255\246\217\277\377\016\312\277\177\303\351\276P\220\276\276\376\300\006\276\261\213\202\2770\277\234\2752\273\250>:\354,>*r\253>\247\177\247?\200\265P\275\t\002O\276\276\270=?\020\233\234=^\332\002\276\246\212\021\277z\241\226>4S\265?\311\343\002@\022\033\210?b\343\276?\300\300\302<\302\350\251\276&Gh\277I\210\034\277\013\265\233\277`D\010=\346\244\376\276\310\001\342>\303\320X?p\375\004\276Z\374\325>\004D1\276I\"m\277\000\027\021\277\362\336\013\277\272*p\277F\027A\277@\004\254\277\253\r\330\277:\275\024\300N$:\300\223\003z\3001\277c\300\205\3508\300\306\325\315\277\360x\213\277\302\242\263\277-\236\034\277\305\257\270?\250\010(?\020\215\271\275\367\200.?\266\215\357>C\367\243\276)N5?\021=\271>e\363\235\276+\216\205\276\030\n\256\276\342|,?\310Dw>\006\266\362\2761X\263\276\340\007\364>\031Qu>\006\001\267>\227\275\204>\210\022\233?\224\023\207>\2667\003?\016`\244?]\322\r?[$F?Y;\"\277\270\371c\277\370~\222\277\323\300\277\277\366\370^\277\260\277\233\277\346\272\212\277Z\372\333\276a\320\213\276c\352I\276\332\347\302>\266\030\202>\212!/?\203\001A?\264@\030?h\354\240\2768\363!\277\260kO>o7C>\n\3276\276v\210\014?6\000c>\312))>\234Z\004@\256\254\226?\336\313\202?\240\205\255?\371\353\237?r\034\216\276d\\\210\276\262\323H\277)H\257\276\371\022\335\276r\247\204?v2\276>\020\000U\276o\376V\276\206\250\316\277\017V\346\277Jv\330\277\027\361=\277\326\202\357\277\000l\310\2726\006\353>V8\001?{4\251>\270+;>NI\242?\323\n\203?\351~\343>H\324\035?\001C\245>.\247D\277v\367C\277IG-\277\\\247\241\276\231\000)?\037O\210?\242\355\211?\2461\327?&k\023@\270X\205?\244o\370?_\313\025@\340$,=\240\257+?\342$\345>FzU\276\317\003\325\276\326\214\231>\232\037\026?\357o\256?\272CL?\256[\237?\374?\333?\010F\272?\362\240\202?\3303\321?\007o\321?\rP\324?\2225\030@h\200\001@\310w\017?\362\312`>\354\272\035\276\220\314\330\276\360\027\021\276\205\235\007\277\355\022o\2775\263\030?l\255o\276\324\370\360\276\275\035\216\277\001v5\277/\n@\277\224\022U>\002\3741?@1<\274&)\034>\322\246\034?E\342\327?\202\267\254?\221u\303?&\263\323?\343\223t?\010\033\216?\362\025\354>\300\271\241>\346W\016?\363\022M?;;Q?\371\\\312>\365:!?\212f\001?Xa\220>\224GE\276E\275S\277\027\254\322\276~ e>\031-\020\300\324\036\210\277\016\263\025\300F\366\003\300\243\252\'\300?\026\024\300qG\020\300\217\216\031\300L\316Y\277\nD\010\277^w\313\277\262\303\253\276\325\373\347\276\330\366]\277Wk-\277\200i\000\276\014\021[>\310%\301=\360L)\277\022\246\242\277=\017!\277X\242I\275\264\230\346\275\306c\215>tP\234=R\242\'>\275\322\260?\033\347 ?\352\340\211>\241;\211?\016 \252?\241\3627?\017+\007?\350\210\322=]>\205=yG\330>c\237\232?~\337\314?TBw?p\203i\275G\327\004?\376\210^?\2736\274?\244\367\017@\013\215\370?\022\310\026@\377K\025@\034\245\031@_k\"\276\272\206#>\372\220\250=$o\215\276\n\300\237=+\004\332\275\324F@>Q\235\211>\277\017\330\276\240\374X<`z\310\275\032\371\221\276&|0>U\235\327>4}\217\275\365\303|\275\246\0340?\307\016X?\232v\325>\026`\301\276`\274\311\274=h\336>\210\245\'?\377\362\004?e\237\274?\340\214l?\321A\222?Sh\006?m\327.?\000*\021;7\"\236>b\005\005?\374\210\244>PWY>\333\361\017?\016.\205?\270rm?\004|u\276\372\274\025?n\216D?X\301]\275x0\224\275\234\014\344\276rl\341>p\0352>\340\207>\2754Fn\277\007\331\301\276\277\037\004?q!\202?\376\312\264?\323)\237?p\223U>|\333\207>\206\220\251>\260\255P?\030\030F?\250\313/?0\215\354>\330$\222\275\020:9>P\367\022\277\212\262\361\276\240c7=\236\332c>16\276\276$\003\216\276#\366\016?Xc\347\275\t\034\r\276\337\003\240>]\t\224\2763\277\244\277\342$\361\277L\313\265\277\377\265\330\277eg\300\277P\334\023=\302;\303=\300\275\002?\315\260\222?\334\335;?\026c\323>\250\270\347>\2422@?\2643\214?c\377\223?g1\215?\300\377\240?\250\377\007@\305\334\007@Q#\212?\200\006|<<\366\242<\336\0360?Z\320\242?B\250x=\021\004\026\2772\007\210\277\307m>\277\260\233\343\277\340N\206\277\226)V\277|h\013\276\221\246;\275\236\214\264\276\014\343\273\275\341\271\350>B\270\201\277\023\0256\277f\320z\277\317\367T\277\300\303\'\277\343\350\002?\2268\n?\314u\036?\256\021\334>\010\274\226=\253T\023\277\000\346\224\277!jF?6\337\341?\344|\233?\237#\264?\032{\365>*\255\000@\272k#?,t\315>\234\362\352?\364\347\355?\236n\230?;\247;?\270nm?@\270\276=\330\t\177\276\245A\200\276\026\005G\277\tA?\277\366{G\277\274\202\222=\031\344\233\275\362h=>\246\256X?\"\370,?s\317\345>\204\027\220\276\365\336\347>\245\036\252>.k\215>\030\322\341<z\0255\276\034\233 =d3\'?\200\273\214<L\023\361=\232\037\022=1\026\313>~\277\222?\300N\006@\356\377\320?R6\226?KF\347?j\247\377?\303\342\211?\201\326\223?\204\355\312>\357\034\332>\037\027B\277\232J!\277\223\334\317>\237\014\020?\203E;?\3562q?&\313\236\276\227\314v\276<\023\213=\342\362\220=\352\346\334<34\035\2753\277\203\277\200\201\311<\374\331\200?\013\246\200?,\337z?L\003\323?\360\222K?@iN?\030]\216?%\034\210?\266L\255>\364\266\025?\214\\w>I-\204?\016N\314>\353\355\372\276o7|\276\304\360\310\2764\232\022=\336\360d?\303\036\222?\332m\254?\246\023\241?2\n\243?\366\3031?\006\222?>\265\237\225?\217\016c?\245jl?\010\025r>\244\006\r?TB\r?Pe\225>\272\372\232\276\000\232\277;\310\3327\275\207\265<?\262\301k?d\302\034?w.&?\233\350??lZ\036?\366\260c\277\307\004\220\277\210s\353\277l\321\237\277\245\010\235\277\200\332\347=.\245\332=^\213\024=\364\211l?x\303]?O\260Q?\343_\223?Q\245\314?\024\215\010?P\r?=\256\004%>\202\340\236>*\301\340\276>\250\276\275f\205\273?\237\212\335?\017\251l?\217\233\261>w\375\362>\365\270\212?\376\262\313>\352\033T?\333#\352>\220j:?\344\020\306?NB\257?)\334\266?\300\344\335=\336\234:>\ne\177>A<<?/\365\276?d\310\257?\336&\212?\211\'\201?\026\013\252>\213\377\275>\316\004\307> j:\277@\245\217\2779\211\233\277\310M\350\275\3674\220?\315\345f?o\033\272>\307y\237?0\006\340\275\345;\340>\363\214\221?Z\361\025?\234\022\267>\036\266h?h\322\250?\273#\253?\261\021\216?\200Wb?Y:-?\006?c?\177*\t?\200\365\020>B\373\244?\347uq?\010\016Q\277w\tG\277\001\024G\277\305\003B\277\331\240~\276\204hc>\005`\372=\2270\232\275\006\177\260>H^D\275[\027j\277\364\366M\277\030\304~\277\010&\300=\202\007\303>\020\204\031\276\361*\253>\220\177d?}U\253?\352\3030?!\326\025\277\036.U\276Km\332\276a\203\212\277\277%\202?<\343d?4`Z>\375tJ\276\206\031 \276\254\226\222\275o(;\277p\010H>\316\232@\276!\276\217=xw\364>3z\253\276sD\203?\367D\310?\261\300\341?\300\335\034@\225\255\t@\265!\251?`\326\261?\304nc?,\020\\\276\001\254\362\275\364\304\307\276|\300\033=d\241\266>\3355F?\374e\014>\366\205[>\220i#\276\252D?\276e\025\226\277\356l\315\277\204~\177\277\346\375i\277\3724\316\277\030Q\007\300\372\262\324\277\\\272\'\277Y\2528\277\311C\025\277\333\201\266\276<~\271\276\221\265\227\277\226A\026\277\256\326k\277\254Z\226\277\226\265\272\277*F&\277\0017\226?\334\225Q?+U\276>\302w\217\277\340\264\235<^\264\022?N\270\210?\240\377&?\310\360h?/L\207?\240\035\232?\374\315\254?\277\201\307?f>\241?\000 \033\274<eM\277\330\264\234\277\322\223\321\277\036\"\314\277k\216\332\277\200\205\366\273\016\264\207<\340=\373<H\254\346>\327\230\346\277\006\304\007\277\200\341M\273}(\310\275\215\344R\277\000d6\273\222.\t?\202\260\007\276\016i&\277\030~\326\276\316\203+?\004\246Y\276\036\364\n?U\376\373\276\306\315\314\276d\330\016\277\016\233]\277\352\017\227\276\213\350\220\276\364\250~\275\002O\023\276\372P\276\276\340\247\023\276f\333\313\276\255\362\206\273\253\217<\274\031\271\242>e\031\257\276h\'\351\276p\254\361\275\302\312G>\247\360\220?\316\021\223\277:\'C\277vx\237\277WQ\307\277\276\376\243\277\305\274\007\300\006\335\376\277\251\334V\277\352k\207\277`\366\275>\'\334x?\326\266\255?\362R\000@y\370\352?H\321\270>(\312D?J\242\201\277\327\224.\277\371\315\026\277\260j\227\277\376\263\366\276`\356\207\277\335\212G\277n\270\220\277\225k\016\277pB\014>.^\240\277\221\225\241\277\307\223\213\277\326L\260\276\310\025\245= \346b>\326\036\352>x\357\016?\251;\006?\250r\017?\226\031O?d\357\032?\262\216\230\276\224\235\241\277\241\255\202?M\207\210?\337\267\"?\0020*?R\304\266\276i6\246\276\234\342\007\277N53>[\371\004\277\206\307G\276\036\364\211>\3407|\274\276\301C\276A}\222\276\314\206\023\276\326\362~>\313\260@?\003\347C?\341\271\277?W\214\002@\026\t\227?\260\273\252?\273[\342?\210\027k?\370\214~\275p\277\265<\265\020\017?\270^S?|OS?SB\217?(\241\227?\247\257\252?\204\251z>`\306\277\275\363)|?t\251/?E;\025?\352Ew?\340\253\215?\036<\250?\243\205\235?x\250i\277I\376\313\277\2505\341\277\032C\346\277\274\037\216\277\374\036+\277`>\017\276\036\207m?\010\357\334\275h\270\342>rt\010>+\242z\276D\ts\276\327\222\227\277z\214\220\277\352\277D\277,N\"\277\014\t\351\276h_z\277h\362\013\300\304S\314\276]0\224>P\342\033>\253|t?\225\210\310>\216\030\013>Z\326\261?\"\030y?^}\361\276\006\303\211\275\372\021M\277\235\370n?\304V\336=\006D\204?\300nJ>\030\322V\275Fe\007?\336<B>\317jN\276\335-\224\276Z\313\367\276A\003L\2778\'\277\277\350NI\276\025\222\215\277\020\376\226\277\001\003r\277+aC\277!\316\027\277\346\224z\277y,+\277p)\237\276\000\306a:\025\321\311\276\255\374S\276l\266P@\330h@@\'\350]@\214\315t@R\362C@\331\215H@K\333\022@\"\327\366?\277\246\n@0Y\237?\235o\205?\257U\'?\277\317\275\276\322`\n\277\251,\274\277h\273\331\276.\211\335\2769Y\021\277`[\350<$\334\006\277\375\236\251>\351\307\273?\350\021\266?\366 \207?R\001\221\277|\213\202\2773\365\246\277\207\036\024\277\200F\240\276>9A\276\266\300t\276\001\t\355\2758e\306\276\202\2711>\322\244\021\277\350\361\265=\273\032\250\276\031\\\003?s\217\372>\240\201\335=t$\262\274L\010\233?\217\270\201?\251>Y?\261\004x?)\310E?2X2?\356B\350\276\216Wk\277\260q\364\275\234\254\250<\371&\272\2764\310x\277?\207\373\277v\241\362\277w\303\010\3002\345\253\277\256\342\216\277\310\2156\277\265\204K?\310\321\361>\340\334\017\276\333v!\277\335\323q\276p\027\315\274j\033-\277\265O\203\277\224oK>\350`m>\370l\224\275\307P>\277$\325Q\277]\316\003\277$\312\177\277#%!\277\211\206\230>\222\340u>\007)\017?\214W\005\277(\242\374>{x\031?p)O?BE\"?R\224\275?,\004\220?\037\277L?~!<?N\222T\277\276\026N\277\224!O\277\037\223_\277<\317V\277\345B+\277\207\343V\277q\351(\277\240\032\201>u\r\304\2764a\214\277\274\245\345\277\316\327\234\276\262m\013\277\254\033\374=\214CL?\307\331U?\003\263\362>\360\t\331=\210\343\213\276|\035\214>@\242B?(,\260=VNj\277\326gE\276\345\322\233\277\254\214\007>\252\241\030\277\034\243l\277\314\244S\277\014\371k\277n\237\225\276\t4\236\276D\032p\277\300\314l<2\354\260>\240\0164=\3649\263>\010=\252=\325\333\262\276\266\354\311\277t\340\001\277\202\363\361\276)2N\2760\264\204\274\236#\215<\370`W?:\273\374>\020]B\277\330\273!\277\222\341\267\276\252P`\276\325\351\322>)\254O?$iM?\323-F?\203S\035?y\272\314\277\2705\265=.IC?h=\302?\024\245\026?hw?\277_X\205\277\014L+\277\231F\020?\2453~?\371\235W?l\211\272?\205\023\254?P\017\320?D\n\257?\344\224M?\202\231q?\264\010\002@@\320\263?\304\233\301?\365\032K?\340\341\247\274H\212\220\275\017q\220=\330\007\027?Xb\005=\22145?\004I\244?\345\030%?\316\024\272?\377g\352?p>F?YA\202?\206it?\330\314~\276\262\237\010?fe\244>~2\252\277\327\025\267\277\210\367V\276 \243\000\277\303\351T\276\177\016\241\276ma\211>\250\177g?M\305\252?\264;J?\350W1\275\035=\322?\034\014\335?\322\235\000@r\223\255?Q<\234?\306d\341?||\001@b\210\246?\357D\024?\301\225\210>Y\264\235>_1\236\276\250o\006?2Q\327>\254\231\262>\000\275f>-\2751\276y\264x>\335)v>8bp>J\245\245\276^K\242\277\313\312/\277>\243\032\276\255>\225>\325\032\003>\256\354\017\275i\363k>a\243\203>l\365\237\277\261\246\224\277\200A\221\277,\216\226\277G\355\210\276x\316\037\275\314\252\254\276M8u\277\224\213Z>\241\353}>\312 \204?fI\204?v%f?\0009\241<\3139\004?V\033\333>\304x\t?\034\306\216?\340K\341<Y\265\264\276\300\256(\277\344\265-\277Clr\277\330\351-\275\227%Z\277\311\0144\277`\304N\277\024R\302\277\224\270\363\277\373\324F\2778`h\277\300K#\276\343\354\022?p\327T?T\254,>h[\261>\212N\026\277>y\017\277\2648$\277\013s\246\277\242\033\200\277\372\033\315\276\374\244\317\275\234\3115\277\245\211\354\2765\376\275\277\247\217\214\277{d\205\276\224]]\277\231\003\253\276\302\3441\277\270\245\224=:\030A\277\2347>\277;\302M\276L\022\206\276\240J\215=\200[\342\276\3669\217\2770\267\305=\013b\203?\307m\300?\272\247\214?\032Y5?NH\244?\020\257/@\017\237\245?\334P(\277Y\234+\277\006\323T\2764o\031>\360\031h?z7\241>\261\247\240>P\336\321>\014\017c\276\374IY=\256\300\342=\237\027\217\276\340\312\033\276\232\nG\276\264\217\256\276\362M3\277\024l\242\276\251Y\240\276\270=T=_r\226\276\302\311\030\277\240 \227\276\210\255\021?\341v\274\276\267\340\235\276\307\n\374>r\273\030?\026\212z?O~P?\367\340\223?KL\240?\010\325\221>\010\216\177\276\276Qb>\020L(\276\022p\201>\320K\350\274\272h+?\000\340\356<\235r\245<\340-\363=\036W6\277\263\276\325\276\254\226\006>byg\2764,\202?\177T{?\204\222a?\351\233\000?\354x7?~r\263?a5\257?l\345\342?0\240.>\200\002\323\276\033\253h?\246{\003?R\276\321>$\256\013\277L\021\203\277.\\U\277$hE\277$\221k\277\000s\025?z\271\274>\313t\250\276\032\001\222\276\367\236\034\277\024\350\341\276` \033\277\210nV\276VY$?v\322\025@trz?\356\251f\277\245\347\251\277\2454\373\277H\302\335\277\316*\006\300$;\260\277\230\267\004\300\2322\003\300\330/\311\277\320\322\252\277`\225=\277w\325\352\276\026z\360> $w=\005B\251\276Lp:\277w[\206\277g\314a\277\257\343\006\277=\333\207\276\247IJ>\344\036=>,\306\021?\247\242\352\276\2008Y\275\233\266\243\277?\"\307\277\001\207\223\277dey\2778\224\352>@$l?\0303\177>y\243\217>\2341\242\275\"\335\374\2767\200\274>\272O\366=\001\242\022\276F\323\021?mZ\215>\322\305\367>LV\245=\367\373\320\276\206\252\365\276\234\335\216\276\310\212\007?\264\000\n\300P\"M\277\217\353\210\277\200\362\265<\226\257H>n\364)?\200&\322?ebL?\225\317\251?\036\307\323?\252\222\214?:\317r?\316\365\202>\250\n\224\275\266+\315>\246\320\302>\013\334\\?\257\005\303?\302.\361?\354\324\321\276\342\177\224\277\2762\360\277\346\321\372\277\"\307\037\300FzO\276\022E1\277\335\363\302\276\376\237\317\276[\375$\276\014\332\240\276\032\336\336\275P\256\252\274C\277/?\033\373)?\304&\274\275~\333\235\277\231\031\216\277g=\246\277v\325\300\277\034^\031>\342+5?\224\327\253>\340X&?(\327\310>[\302\227>\030\356x\276\235M\231?rA\343?\342\345\267?\002\312\223?\244\r\235?\212A\226?\320n\310?\235\302\313?6Qt?\224\242\215?LH\346\276SL\244\276n\347q\277\312(\310\276\273h\032\276\246\325\335\276\360\231\231\277<(\342\276\256d)\276\202#\033?5\213\327>\313\2619>\373%\016\276\2468\247>.\330\207>\2200<?\345\340$>\363`\241\276\036\264T\276@B\372>(\237\254>\306\025\264>0\254R?\357(D?\320#\014>\324\2419\275M8\330\275\002 \250\276\316\324f\277\n\376\227\277\210\\\256\277\274U/\277X\255\314=F\371J\276F\255v\276V#\316>o\305\027?F\213\223\276$\027\323\276\020I\326\275N\321\374\277\325HK\277\016\024|\277\310u\213\277\354A0>\324\340\235>P\214/=\336\002\023\277\226\234v\277x\315\205\277\317\364z\277\241f\353\277\001-s\277=\272\226\277\020\323\235\277`\214{\277H\035H\2764\352\241\277T&2\300L\247B\300o \005\300[\324\332\277Y\363\206\277\204\241\324\277\'\364\027@\226G\266?(4\022>\003\324 \277\251\333\001\277\320\0226\275& U\277V\032\347\276H\3727=\206T\037\277\"J\r\276\324\250i\277\030\013[\277\205\370\222\277\370\264\263\277\2571N\277\277w\213\277\264\304b\277N\253\201\277 a\214=\321\316g>\201\035\250>\312\337\371>\250\230(>\037\265\003?r[B?@\352!\274\244\005L\277\222\216\307\277\344\3533\300\324\n\326\277\346Q\274\277\346\243\236\277\262w\341\277 n\022\277\330i\305\277\320\031\350\275\235\300w>\262\035\221>6\'\302\276\224\244\247\276\372\3455\276\316\313\024?\234\347\304>\312\221^\276\212\264\017\277\214\333\332>\343\241\330>Z\324\220>\366At\277\301\316\276\276\350Q\322\275Z9*\277Xv\373\2757\271<\277\310\010\272\276\0224\356>\326\034\241=\031\234O?i\001\333>\342\224\340\275\274\377b\277\257`\254\2772\231\275\277\235\202\254\277\000s\306\277\213\266\247\277\266o\215\277\242\032\177\277\324:\220\276\215g\213>\246\312\211\275\2043\255=K-\222\276\316\315/\277\302\201f\276b\026\004?k\304<?8\014l>n]\201\277V\020 \300@\317#\300\227\327\347\277v~\034\300\010X\n\300{\316\"\277\337Y\316\276\226\2516\277@\262\220\274\215\263\005\275\341\257\242\275\360\333f<*Y=>(\030\035\277nWZ>\240\244\345>+\305\222\277#\303}\277\217\206\242\277\370/\017\276\305H\033>JP\004\277\222#\262\2758^>?\033\201\243?:\245\261>8a)\276&\242\253?\314z\254>6X\036\277\240\022\272<L\014\265<\352\326\203>\311\005\357>\016\004V?C\354\\?\203K\035?\'\2472?O\242i?\203\236\356>\r\225\317>F:\203?\016\200X?G\276\340\276\376\035X\277\213\203\001\277\244\266O\277X{\250\277\030v\261\277rtd\277\304\337$\277\233\366\312\276\232\220\337\277\2009\256\275\013\326\311>\370\030\014\275\\\234\231\275z\033\270>\367\266\322>\260q\257>\212\224W\277\375\245I\277\214\353z\277\220z\215=\006\354\350>\330\r\203?\367\035\231?\227\032q?\346\353\330?\340\2646@h\372\323?6\205\342? \370\004@\254\203\336?\375\263\316?\207\230\327?\326\224Q?M\351\311>\335\0248?\003\302\230?gn\304?B\212\264?\356T\033?H\236\211?2\344\313?x\014(?\314\224\274\275\033\337\217\276\255\254*?\254\366\306>\036\016\344=;\033\022?\3763\242?BQ\027?\022j\335>@\216;>\266|\365>\014\375\022?\331Hb?\005\311]?\320G*>\252\266e>m\351y?\021\032\014@\202\206!@\230\\\214?ujU?G3o?n\376q?\240\030\206?4\205T?)\247$?\206\236\022?\370S`?\312\024A>\252\365f\277\\\356\341\277\002k\314\277 \232\017\277\226#\310\276\322\344\370\276R\005\234\276\332\313\014\277\020p\023\276>\201\241\276\236\365\236\277\004l\300\277\212\357\277\277\373\273\301\277\236\003\030\300\336\'\376\2773\237\244\277\210^\305\2774\350\372\277\202#\257\277\2533,\277PR\356\276H\355\305\275\345\330x>\210\233\211\276\340\217\333\273\354\343%?\014\003\203=\323\212\267>\030\245+\277X\355l\277\313\362j\277h\212\205\275\336\374\220\276\224|\367>\234\377\244\275tx\250\276\227p\315\276\270\305\202\277\\w\224\277`1\331\275\"\275\371>\242\031\362?A\323R?\325y\r?\224\227\035>\330\220\005?<\036T>\332o\207>\337\222\375\276\207Y\021\277n\300\263>\230\374O?\210o{\275KT\214?\021\232\376>\330\216$>\276\004\234>\2527\205?i\017^?\323E\371>\235\004\341>\272\231\206?\341\031{?\232\206\004?:\2104?\344\276\202?Ir\223>\264\270\323\275\356]l\277\326\025\215\277~\213\205\277\332\321\226\277\345b\205\277\\\024\201\277\004\305\225\277\226\020,\277\344\366\277\276\203\205\230\276\254Yi>Pv\'\276w\370\032\277\354\370\036\277`h5\275#\006\214?\303\276[?\337n0?%\372\231?m8\256?\320wm><\244\001?\342\016s?d\322\202>\345%\021\277H\0038\277fd\253\276\\{\266=ny\302\276\202\320\317\2756jb?\340\234\353<\330GF\276\250\335\230=\335\220\231\276\2068]\276\236\241\367\276\260\242^\275\\\r\\?\304\227\365>J\337\213>9\003\034?\333\342\274\276\300\374\003\275a)G=\006\301G>@\032|>\006]\225?\363\232H?\320\314\201=X\243\222\277N\246\341\276\200J\240\273\350\350\006<M[\340>H\257\031? \226<\277\312\340\252\277\300\004W=\367\2772\277Z\2770\277\320\3360\275\325=6\277\224rS\2760\306\312\276\372\357\311=W~\215?W\267\274?+\035\334?^\315\340?\240\2367@V\244/@:\213\217\274b\346\025?>\270\255>:1v>\252P\327?3\241\217?\3464\345>\320\230\363=\312*\233?\\`\275?\345\326\256?\250\274\347?\007}\204?27\326?G\005\002@\2647,?\204\010b\276\267l\024?$\245\247\275$\252\305>\254\324\035?\234\323\027?\226<W?\304\335z?\365\274\335>\24698?\000)\341>`\014\035?z \213>\230\234\010>\004k\333>8i\275?t\307\252?\260@a?@ex=\213W\010?.\364A?*K\021?V\360u\277\214\340p\276L\262\236?\226\r7>\326\3707?\246\220\307?\311\213\266?*y\224?q\215~?\247\326\356>\353\030\270\276\231vW\277\350\2559\277\336\177\361\277Z\203\004\300\360A\225\277{\272O\277\032\010\233\277\036X9\277\222\312l\277\240\020\225\276Pjl\2750\232\354\275\350\361r\2768\357\027=\271\370\345>J\0130>\371\336\201=|\t\037=$\025\274=\274{\364\275\360\202\312\276\215;\014\276G\214\227= \212Y?\033D\214?F\036\210?d\333\326?\n\270\002@\323\250\311?\0227\354>\324\366\">\340\177\346>x\334P>D\'\276>`4\301<1DK\277\200\370K>B\246\374=\325_q\276,\1776\277\213<\005\277B\207\273\276\350\001\277\276\241\366A\277\325\260\215\277\371\220\312\277\3625\254\277\262\366\365?b\245\307?\270[\241?\247\321U?);\255?\261\345\271?\006\335\270?\313s\021?\233+\204>\036\235\275=\207\273\201>\335\203w>\204\274\222?x\022\334?L8\245?p\004\032?\3460\201?\275^!?\207\313\316?\357\375\361?\367\302\232?d\320\255?\260\375\370?\204\310\030@~\341\\\277\266g\207>\242\007\230=\227G\214=>@\240>D)\343\275W5\374\276\324\202\253\276\226\337\005?\3536\247>t\306\001?n\251\262>\246zh?\354\321`>\243\274\233?iV\227>\310q\232>\244d\357>\030\205t?\240\177`?^4b?8X\317>\000\312\210\273\346\\>\277\3678-\277\000{M\275\325\362&?\206\t\231>\364\236Y?\371}H?@\212\310?6Oi?\202`=?LV\206?\374j\214?\030\346L>\\\363$>\037\356G=a\242\266>*\352\231\276\320~]?;\330+?\200\"\200\277\020\034\221\277\207\033\315\277<\215\\\277\310\342\235> \217Y<\344\343\305\277\025Hy\277\313q\246\277\177\245\262\277^4\346\277Y)X\277\211\334\007\300Qf\371\277\316\t8\277\373T1\277\023\333\253>C\232\236?hq\211?\003\314\261>>\266\243\275\005\336h\276\340\236g\275\315\034\320>\300\200\r;U\200\222\276\3640\201>h\245 \276\260\332\253=\327\321\030\276\201\201\013?\202\203|?b\304\240?\010A\233?\036\256\307?s\245\327?\231\213\306?\027\013\245?\303\313\262?1\336\021?\002\334l?P\340\300?\335\330T?\273pt?\034\216K>$\275\200>\274\221z\276D\271\316>\026\033X\277ny\207\277\336\242\034\277\266\376=\276\340\361\254\276\022\203\013\277\343\332\234\276\256]\275\276L\217\231\276\224\371{?K\334{?o\267z?\373+r?}3\214?:\267\267\276VI\212\276\005\250S> \336T\273\000\226O\276h\350\\=\374\236\254\276\3469\312\276\340\343\223\276\274*$>\204\347C?\\\342i>L\323\201=\346y%>s\0219\276\030k\252>mU\303?4h\327?`\212\313?\354r\323?\201\362D?\210^\373>t\253I? \025C?\030\237u?N4\010> \207\\?^8O?b\310\325> ,(?\203\356p?\222\242o?\';>?\250\272\213>2\305t?\300R\344>\356T3\277\266V\'\277a/u\277P~D\276\230\304q?8E\215?\020\247A?\306[\273?\256\276\254>\251J\204\276s\336A\277R\025\342\277\022*\263\277\276\n\260\277,\207u\277\375\350W\277P\007\r\277\020\020\007=\254p\332\275\234\327#?&T\001?\000\231\250\275\250\313\001?\200`x<|X\321>R@\021??\202\035\277!\257\005\300\031 \272\277-\020\326\277\215\322K\277\033\243\"\277\010r\315=\236\006\304\276{~\014\300\361 \202\277|d#\277\260Y\313\276/\032D\277\000=J\275s\017\024\277k\t\241\2779!\212\277\273\344>\277y\302@\277\246\305p\277,|\231\276\305\371\327\276\350Ow\277\220\317\340\277m\301\236\277\276X\203\277\256F\001@\340n,@\215\004>@e\3062@~Zs?z\212\233>\277}\333?j\215\014@c\310\255?\202\300\363?\3126\370?\256\307\323?B#\213?\276\327\310?\364Y\255?s\377 @\300k\244<\325}\017\277\004\261\314\276\223\224\321\276)\020\330\276\210\214\266=2\022j?\016\261\217?1\276\346>\304\331\265>h\006:\275\242\361\003\277\033\357X\277n\000J\277\036l\371\276\017=\222>:$\035?\372l\035?(\355\036=L\005\356\276\234\313\005\277r6\005\277\214\256A\277\367\347]\277n\000\276\277o\323\245\277Og\306\277\201\375\204\277 \320n\277\240s\240\276\2409\322=:\263\233>\027M\275\277\364\352\307\277\322\373\242\277\250+\275\277\364{8\277\214\377{\276\310\277\347\276\372\033\370>\311\271\007?\337\327\257\276\220y\300>\202\t}\276\337\014\035\277\366\330\301\277\347\352i\277@\274\346\277`\260:\277\300\256l\277\334\366\002\277\031l;?\200\270\330</\353\266>P\207\365\275F\327\357=:\321\340\276\346\257\010>\023\277\211\276\242\206D\277\350]\013\277\367\333\236\277\270B\034>\300\312\242\276\234\364`\276\024\234\201\2761\271k\276\000H~:\312\307\376>\345<\231\2766\245>\276\206\276T\276}@\235?\371V\247?\270te?PeK>fR\212\276\023\247q>\360\030b\277\246\016B\277\233Q\305>--\312>r\\\342>&\334\305?\206=\024@Y\261U?\250/\314\276k\241\246\277\260S\237\277\231\272G\277\204\2022\277\026y#\277\"U\277\277\241\021\224\277r\225q\277\223<\223\277\371|\202\277\032\321\324\277\332\253\267\277\326\261\000\300\211\203\315\277^\2070\277\354\226\026\277\212\032\313\277\355\370\340\277$\356\335\277\010\270s\277%\260p\277(Mu\276\020\310\236>\034\200=?xA^?\270\"\300?\224%E?\007\'\306?\322z\322?\2403^?t\2506>\216\3458?\342\345\377>\324\312\315>\004\235\272\275\254+\034\277~\350\264\2750\261><\034\377\342\276\245\376\020\277\002$\244\277\220\341#=\242E\330\276|\266\330\276\003\375\024\276\312\032\213\277\262}\233\277\201\323H\277\027\233\327\276\217hN\277WG\243\277\200?\366\273\307\273#?,\241W?\330lb>8\343/\276\373\333\227\276\270*_\277z*\245\277\216\203\351\277\240\003\301\277\322\005\n\3001\204\346\2770S\262\2777\361W\277\233\241~>\260<L?cU\307?.\345_?\305n\035?\250\027\304\275\014v\241\277\260t\230\277:\253\231\277\244\260\n\300\232z \300Z\246\324\277\362\270\225\277\'\257\264\2772u\304\277\330P\334\277\356\351\034\300k$\301\2779#b\277\350uP\277\'\232K\276\225\315\201\277\334\251\215\277Q\343\273\277\034\263\027@2\204d?\000w-\273\277X\213>\316\036P\277\325\323\177\277\214\177j\277\362:\304\277\332\271t\277\330\375\360\276{\367\255>\256\266)\277Ik>\277\367?\315\276JW\216\276(\300\300>\320\232\325\275\036K>>\031\232\256>N\263\023>\324\242\230=\204\025\250>\365\211L?\3449\\?\201\321\234\276\247?\223\276\324q\332\277\020\200\366\2770\313\230\277\356\252{\277\332\016\214\277\312S\006\277\341\301\226>\310\252\323>\330\014K\276D_\277=\241\261\334\276\246\226\377\276\024\000\361=\354\340\213\274q\334\261\2766}>\277\206Y_\277E!/\277\334\305\310>T\271?\2768\006\326<c\231J\276&O\266\277h#\006\276\316$B\276\345ja>&\334\244>\340L\261\274\331M\237>\'\345\002?&\255\377>\226R)?\227\000\277?\036\377\365?\203\032^?\360:\306\275\220\004M\276\364\251\340>\272\267\312\275\032\365l\276\304\244V\277\210=\'\276\320\363\213>0\235\300\274\010\253v\276\223\260\210\276\030\255\207\277\016\232\224>,\025-?0\315\026?\324\211!?\330\361\264?({\014?\0133`? \200\356>\244G\021?\202\255&?\254\347m>\341\t\001\277 \352L\277\212\260\243\277\322`\353\277@\334\275\277\306\305\\\277Or\361\276\220\324\213=\346\237e\2760AS\277\212\206D\277M\013 \277W\334\353>T\010\235\276`,\217==\037\036?\362\364\275>\222\272\350>\007\226*?\314f\223=06\261>\374\211\230\276$\034f?L\360d?x\215\n?D3\005?\324i\006\277\372\362\264\277\334[\216\277lB:\276\3229\"\277\022\342\310\277\345\'_\277\205\253!\277\036\313d>\336\260S\276\023wq\277 !\215\274a>z>\223\367\221?\200\r\244?KF\336>\224\350T?\327\303k?z\314J\276&\302\206>g%\337\276,@\230\275X\301\270\273\201$\305>f\344\'?\233\"\212\276\001\375|\276\206-i\2768U\034?\265!\033?\360tQ?\036\247d?\031]\032?;\n\222?\315\337}\275\320D+\277@\017\234>\377\356\037?\220<\205?.\343\272?\2003b?\007\363\000?\032j$\277\262\326\377\276\023\343\363\276j\365\202\276\230=D\277\350\310\035>x\250\206\276x2\315>\240\237\256\274:\315\211\276]p,\276\370\020l=\231\3459=\301\033e\276\241\331\023\277\342\017\031?\246\262\273?5\333\353?\342\030\374?u\254\363?D=\363?,\307\327?\304\n\226?\356\000\322>\252n[?\2505\205?\320\243@?\370)\005>\253U\223\276\t\273{?\275\016b?\202\324\203>-Y\356=\222\322\311=\212\210\010>\204E\273>\022\376>?\204\330\007?\224c\033\276\307\017X\277_\263\224\276h\0341\276(l\372\276\241\006\362\276@[\014?N\3774\276i\341\356\275\250`\342\276\276\001g\277F\277+\277\235\337\372\277\0049\233\277\300\375\277=\243\035\204?\314\002m?_\022[?\210\300\204?\374\271\243?D>\\?\000\261K?\300x\312;\201\226Z\275\250\237Q\276I\036\236>\372\366\235\276 \324\351\273T\315\272=\341\204N\277\304\325\277\277\316m\352\276\204_\006?^\2603>\277\364\241\275\014\007\335\276\210\r\336>\332x\271>\331#)?\241\217\272?\376\215\234?\366\266d?B\255v?\036\273u>\003f\213?\232\026+?\355\235&?0R\214>\352 \207\276\361{*>\265\231\262?\244{\321?\340\261\351>~\241\n?\224\322\234\277\373\207\321\277\376\307\232\277\201\255\305\277\231\340X\277d\374\223\276P\325O\277(\261>\277@}\005?\216\025a\276V\314J\277:\026\271\276\214\273>\277\304\232\343=\310\346\334>,\337\246\275\211\366\036=W|\364\276\032k}>\214\356`\275\254J\271\2766\361\003\276#lp\276\026\331\205\276v\306R\277\027\036\200\276\206\002\347>RnA?\014?=\276\332\310V=\0262\006?K\211$?\214\245a?\260\375\255?\2106\021> \021\277>w\230\002>\322e\004?{\'\316>\000\235\352=~\252\003?2\261R?Puo>\345\352\331\276mc\241?\201C\226?n\372\312?VN\322?.\210\237?\314\013\266?{\313\264>?cU\276\336\204\005?\312}\252>\342w\245>H\331U\275\244\025A\277\022\nx\277\206\237G\277\n\005\242\276\246^\t\276\354\"\356>\272\320W\276\334\222S=\242\005\217=L\256\036>a\275\222?\332\227\206?\264\037\275\277\301\274\376\276Xo\005>\314\302\035?\273s$?\023%\312>\202F5?C}\256\276\237\334l\277el\034\277[\021\367\2760\364\013\276g\024\301>\323\243\307>TO\000?|\234\262\276 \306\274?nc\224?g\005\233?\375\020_?\035\260\303?)=\246?W\377f?bw\233?\232:\226\276\300\262\373\275\234O\255\276\351`3>EZ\\>\352\254C>g\267\022?\364\260(\277\372C:\276\000z\251\2739\267\277\275\276\370/=\366L\001\277^\nV\277\0072d\277\213\200\202\277\333R\221\277|\364(\277 \215\302\276?\346\023\276\242~\301\2760\261\201>\264\337:\275\306\0356?\306\3650?\020}%=\370\373\360>\262\tQ?\261~N?z\357\220?\367\254>?@\353\233\274\372\305\030\276nc\n?n2\\?t\320\205?H\037%?l\022\310=\372-]?\024\001*?\220\324\314\276d;\035>\264\274\004?\364\020\341\276)\021l?\233\013\222?\030y\251?s:\242?\353\222u\276\340\272`\277\034j\273\275$\034K\276\013\002}?\314\343$?\246\241E?\010\014\260?\314\231\344?\326\2613@F\250\036@p\347\375?\340\037H?\3242m?~h+\277\334]\003\277\376G\352\276\032\020X\277n\344\035\277|\020\271\277\003\013E\277H\244F>\312\n\323>\230\210\017\275\206\253$?\007?,?\240/\013=&\211c?\n\274\005?\3771\345>\217B\364>@\\\035<\022\242\276=m:\306\276\302\217\336>\"\333\026?l\027S\276\345\374O\276\207\254\262>JA\377>7\324%?\370\200\373\275\310\330\231=\333\322\375\276\2169\232\277\373!W\277>\315\206\277\220\272\320\275\350\001\031?nD\325>Z\353\004\277\024\004\376\276C}\242\277@\016e=\374\232\237?\342\000%?\353\n\244>\216\354\227?\361|~?h\346T>\200r\331>\376Ax?\022\352J?\001\344w?\316\005w>`Q\001?\252\337\033?\"\251\240>\206W\364=(\234\220>t2\267\276\254\'l\277\027\277\370\276\220\334\034\275V8)?C\022j?\026PE?u\346\247?\262\262\262?\304\217\326?m(a?\"\316\231>H\014l>\332lF>\334\353\312>\302\367q>Z\307\265>\326\326G\277`8O\276\020\366\311>\215G\n?\022O\343>\306\206\213\2760.X\274\n\315g\276_\360G\277\006T\321\277\n\3565\277\020\262\236\277\030}\232\277\3743-\277\324\266{\277k]\222\276E\331\000\300X\235\255\277\364\222\007\300\234\316\027\300\006\226\003\277\224>4\276\200\234\340\274`\271J\277\312d\233\277\236K\335\277&\365\363\277s\024\233\277\335\2374\277\030\365\221\277\033H\353\277\253=\302\277$O\301\2772\355\226\277\200vs\277d|\254\277\332\t\303\277\036\004\232\277\010\371\216\275\340\316\376\272\251\372}>\024#\253\276\200:9\277\364\240\231\276\2412\371\276$;L\2769\373G?\315j\200?t\364\275?\337\202\265?t\\Q?$\316T>\264\360R\276K\371)\277\324\331{\276!\200\371>\006\217f?\000\277&\276F\\\240\276\364\007\327\276\024EI\276\220:\'\2744\357!>\344\013\205>\315\0018?\0320h?^\311\006?\023\372;?\267\027E>\202s\233\276\3444\323=\300Ps?\220\3302\276\247\355R\276r\326\236\276A*\236?+`\312?61J?\214\360\306?Y\306\215?\226\'\336>\"\203a>\357=\211?`\031\313\276\210w&=\246*?\2763lO\276\372\215p>t\347\247\276\330\305\335=t\377\276\276\204c8?\367W\013?\373n\220?^b4?\342\315Z?\301@S?\016\341\342>|\r\017>r?F>\\\305%\277\244\350\256\276\020\222\244=\336\177\233\276\272-\361>\211\035(\277\242\'\375\276y\362u\276Ld\036>r\374\016?n%\214\276q\177g\277\223b\341>G\203\034?\304\257[\276\236\r\"?\244\346J?\310L=>a\357\334>v\256h\276\213\200\352\276%\321Z\276~X \277\200\2566\277DP\265\277\003M\210\277.\250\335\277]^\301\277\340\365\021\300\215\230}>\262\277\357>\014\244{?\022\014\251>\201\212\000>\216\021\316>\033\273\376>\223\321o\277\264\005W>T%+?~k\323?\262\244J?\377\317s?\337\253\242?\264Il?\200n0?\360\200\244<[\260\256>\\W\370=)\301K\2768f\t\277\030\266\013\275\247\\U?\376\r-?4\245\017\300\266\250\022\277g\324\375\276\030\364\361\276Y\254\213>pp\013\274\325\240\205=0\327c\276\036\371C\277\026\210\262\277W\335\177\277m\251\323\276\244\372\261>\001;4>\\\010\252\276Pn\017\277\262\355\201\275vv\265\276\222>\221\277\354\343O\276\006\006\363\275\"\212(>!\034\250>Xhf\276V\313\336=\224\341/\277\274+/\277\233]3\277\253\"\232\276\250\204\233\276\222\036q\277\326\241\023\2778o\225\276\306AN\277\014_/\277:\001\262\277>Ru\277\276\005\005\277\370\341\240\277\\CQ\277\252\253\274>\2409\342\275\'\014\335>\341\251N?\272iB?\316\344\276>\272\316\301? \227\242?\\\027\327\277\031\324\311\277\017\356\335\277\360\343[\277\247\234E\277\256!!\277 \022n\27702\021=_\312z\276\272H\000\276[(|\277\224\214\263\277\336\236\200\277\252T\016\277\3704\231\277\224\274\030\277X\322c\277\265\330H\277\'\305\356>\370\265\255>^\240\316>3\346\233?\330\251u>\027\315)\277\3462\205>\2028\231>\252 \016\2770\245Z\276W\026\233\277\220\233P\275vl\277>\350\273\223? uE=\021\343\227>Z\242\003?\211\r\005?\330\377C=[\241\022\277s\t\250\276@\216\272>\326\223\014>\336\007\021\277\240\017\371\274\313\267\301\277\240\346i\277P\033\032\277\2352\367\276\246=\000\277\217E\025?/\244*?{\027\014?\0328\037\277\202)\000?\200`\204?\200\256\200?\0062u?>\256v?\357\247X?\312\364\000?\257\250\303>OM:?\027]\236?h\275\346>\234\330\317=)\377J\277\243\363\200\277~Fv\277\236\r/\277&\005\025\277xH\247\277FG\332\276e\311\372\276\377\201,?;\n\326\276\3100\301>\360Hm>]\\1\277\202\036\323\277\266\304>\277\373\034\312\277\311,\242\277\2602\212\277&\274[\277.\351\r\276\036c\233\275\\W\377<\305\262L?\312G\330?\027\302\374>j\273l?$\272\313>\364\336\031?h\254\250>\022_\013>\344F\021\277Sy\245\277jK\370\277v\331\033\300\244\346\024\300\300\326\002\300\256~\352\277v\262\221\277\240\200\273\277(\032\030\300*\302\237\277 \021\276\275\366f\016\277\310\027o\275\001\206\225>\300\242\214\274y_@\277\244\305<\277[[\273\277\'\240\037\277\002\276\035\276\322v\216> RT?r\3363?\016\003\371>\255\3476?\r\203\244?\224^\330?\241\343\230?_[W?\001/\244>\321p\006?\002\340\"\276G* ?\266\246\005>?\321\223\276ZZ\'?\t,\017?\020\271\250<[\024\200\277\240E\001\275)C5?;\000v?W\324t?z\320\217>Sg-\277\220\272\022>\220\210\314>\014d\n=\320fW>s\253\206\276\t\321\227\276\2518\315\276Hf\r?pu5\275\"\301e\277v\006\217\276\024\302\203\276jyk>@\250U?\366\231\277>\000v\210\272\r\0147\276GJ4?l\nC\276\375|\004\277\232\274v>\2311\\\277\224\016\262\277\031\225 \277\273\001t\277\026R-?8_\370\276\370d\247\276\313\314\246\277>\337d\277.A\226\277\234\364\273\277w\346\027\277\006\003\311\276\342{\247\276\244;\270=B\365\213=\235>\352\2764\364\202\275j\2346\277\363\274\267>63\037?`\317&?(\271\302>#\314\263?\310\223 ?Xl\177>5\303\227?y\302\254?\246[\370?\346G\220?>\377\241?\373\"\031\277\350\034+?\246\361\t\277\330`\211\275\313$\344>\030\303S=@c\375\276`)\311<\3139#\277\356\027\212>\363\032\271?\210&\226>\332vi?G\212\306?\357\205\337?A\025\347>W\010\237?P\303\370?\201^\337?\244\335G?\264sZ?\337.G?\032\n7?`\223\245\275\276\205)>~D\027?\224\014%?\234\206\224?\231\261\006@4o\270?L1\257?\036\231\323>}2v?\226\3520?\354\2752?\re\244\276\014\334\330=\253\177-?\264!\r?\316\344\246>\371\304\032?\234\005e?<e\227?\327L\263?[\013\"?`Y[?$}\215\275\'e\362\277i7E?\016\223V>)\265d>Sz5?\300w\270\275\307\321+\275\263\371\236\277\226\200\355\277\331\217\000\300\027\347\n\300\376\371\t\300[I\323\277\206\234+\300\315\3404\300\260N\020\300\242\357\312\277!V\001\300\024\240\205\277:x\016\277\273Ob?@xa\276\302:\211>\224!\177=\014w\203\277\357S\265>\016\222\321\275P\357s\276\200\324\030\277\306\304\231\277\350\034\256\277\026\262`\277\000L1\275j\244\367=\003\251\227\275\314\322R\276\003<\037\277\230\262\351>\360Xh>2\313\213>\210\266\037?\204;g\276m\277\317\275\370:\033>\202\203\247=\036\000\356>\371\026%?\352a\332\276H\030\333=\0323Z\277@<\310\277\227\326\234\277\022m\016\277K-\375\276$O\364\275N\230\211?\373\354S?d\357q?\010M\336?|\303\010?\336\023\227=r\300\245>x\331\'>\202\205M>\006\226\360\276\313\341\207\276\255\020\014?f\226\016?N\272\237?\224L%>wx`\277G,8\277s\225\355\276\'j{>p\376\221\275\\\376\250>T\374/?\360\347v?\374\345\213?\264\017\n?is7?|1[\276H\334\342>\353-\307\276\351\231\235\277`\001.\277\366\027b\277J\202\033\277\374\200P\277\250Jx=r\270\314\276\230s\242>\314\025G?\220\006\003?t\204O>\316\3628=8H\315<\335\001j>\377\321\023?\246\030\343>\314\241\306>\366\302\310\276\200\350\025;\370#\364\276_\310#\277\330M7\277\222\226\177\277\262J\006\277\322\220$\277\235\006\032\277\320T{\277\310\347\035\277&H\320>\334\323\275=\360\252\005\277\004\016\250\276\230\306=>\3057|?\250\033\221?\370z\315\276\367M\024\2764\"o\277\325\035\336\276\221z\370\2767:\033\277\272\035\232\277\323\037\'\277hc]\276\234\251\222\277\022\242\325\277f\355\357\277\374%\361\276\372\013\236\277\264\252\335\276 #\024\277\372\225\251\277\030\252\032\277J\226@\277\2376\205\276\016\324i\276\325\352\006?|\312\235\275X\352J?\347\034\350>\323\313\003?\300B!\277\365\336p\277\204=\363\276X\302\206\277\353\325\034\277,\264\014\277\323I\333\276\024\3053\277\016!\225\2774Pu\277l\250\030\277!\235\221\277\255\245\251\276<\"[?\256F\231?4\334\230\276\352\022\343=h\177\221\2760\220\000\275\276Gt\277dk\200\277\304[+\300\"<\317\277:l+\300.l\263?>{\353?\t\013\225?7\037\213?\336?\350\276\257\251\233\277 \337\321\276\206.\'\277\306\331\244>\177\314\035\277\240\337\324=\357\312\316\276Y\031\210\276G\316\007?\362?\016>dj\303?\243\316n?\204KG?\360\240\233?+c\233?\305\023|?,\310f?\2346E\276\274\375B\275\344\'1\277\300.>\274\364\212\273>\266P\335>\370\337\336>@\226\016>\026\313.\277.\314\345\277\252\350\347\277\032\205\221\277N\026\032\277\205\245\211\277o\205\037\277tm\331\276^O\'\277`\244\223\2742\010V\275o\'@\2762\352\n\277\343\321\340\276%\032\273>Ikw?\361\340\030?\265\234\212>\254TU?N\014\324>\350\270\010\275_\225y?t,h?\004cH>\312\2777\277\200#\203\274N\036\252>\244\320;?N\312\245>\264\271\253=\235g0\277\032\272\357\276\222K\271\276\206\3457\277o\221:\277\300U?\275\316\261\200\276\036\212\352\275CvM\276\2501~\276`/\210\277Nt\206\277y3\020?\363\373\361>\0142\307?C\303\354?\rQ\216?\323\301\223>%\341\207>|)C\277|f;?\332\254t?vl:?\020\006\177>]\331h>\246o\356>\367\023\203?4y\353?\330\270\317\275E\213\242>z\232\321>\304\315\217\275.\214\230>\000\206|\273\270\254\017\277\276\035\'\277\320B\032\277\026\016S\277}\347\005\277:\2560\276.\357\006\275\276\262\341>@:\312\274\231X\'\277\005?\201\277\217SU\277x\333\034=\002#/?\265;\333?[\206U?\253\003\207?*\223\264?m\027<?m\225\036?N\034\277>z\033\320\275\375}\216\276\035?J\276\2402\352<\260\201\006>\216\225\031\276z\314L>\263\253M=o\324r>_\354N\276B3)=\014\355\013\277\244\277\311\276\3644\037\277r\026\210\277\366h\355\277\365$\016\300f\303\'\277mC\311\277\020\001z\276\016\276O\277\267\351u\277DM\224\277\363\257\310\277\230\250S\276P\373?>7)2?u\253\335>\352\247)?C\002\223?\303e}?In>?n\030x?\324\016\350?fd?@\005\275\370?\240\0034?y\353w?8\036A>\023\252\177\277^@\215\27785\001>{\305&\277\2753\341\276\300\021\262\277\304\"\030\276\230\264\334\274\025g\251\274\307\303\360\276\200?\201\274d\024\275\276\204\t\026\277x\3507\276\206G\251\277\232\225\202\277\276\036\204\277\202w\t\277\2700\244\276\372\004)?V\010 ?\363;\265>\214\347\360\276\030\022v>\231\3434\276\226b\223\276f\004\023>c\243\351\276\2420\336\276\303\377\343\276\214\204\017>\256&B\276\006\027\034?2\340\242?:\312j>H\324\305\274\331\234\251>!\241\263>?T\032\277\373V\003\277\330V\000\277\214h\221=\313\350:?/\016\375>\327\201!?\344\250\357=\035\020\203?\212\t\243?V\322A?&s\220?t\366$?_\365\222>\360J\221\275:\214\007\277 g`=\322KT?\257UC?\006\177d\276@c\010>\0318)?\324\364\347>\362\037\t?\350\262\017\277\262\223\327\277\247\031-\300\230\246\243\277k\324\321\277l\245\356\277a\336\032\300\274*\000\300\267\022\252\277\207O\"\277\360\tV\277f,)\277\276\2272\277\000q\224\277\342^\372\277\317\345\004\300M\342\255\277Nf\276\277\3257+\277\370D\035\277\234Ix\277\031\3341\300\347\201I\300\264\005\214\277^@\016>\207\211\002?\300\027J<f\241\315>\027I\200>vVF?~\3736?\322\241\247\276Eb6\277X\207v\276\235;:\277\375\316\256\277@\013[\277\3606\265\2770g\322\276^\312{\277X\336k\277\276\233\312\277\271\334\n\300\215\n\364\277\024\357\323\276\277\225\305\276h\201x\275\236\274\322\276\330\204\215\277\344\274\017\277\350!\337=\314\231(?f\025\253>\3600\264<\000w\021?U\275Q?qW\022?(\260\315>\272Y\226>\324:\003\277\2724\303\276\374\246\234>~\t\362=4\301P\276\345R\224>\266\025\310?\024e\307?\314\325\326?bL\005@R\022\345?\361\320\315?\304\244\222?\353C;?\344\346/>*\265Q\275\331\226)\277\340d\206\275\277\350\002\277bu\230\277\\w\241\277\261Z\311\277\256\270\315\277\360\r\233\277x\361\310\277\324d\n\300m\200u\277\'wm\277Q~\266\276\253\314$\277\234\317\335\276\344V\346\276hO\260\276i\315\220\277\032\021\331\277\351\362\330\277g{E\277\263\t\200?\014\371\244?H\214\231?\373\251\317?\016\271)?,\303\207\276N\234n\277QI\315\276\214s\257\276\236He\277\322d\325\276\212\314\365>ktD>sY\002\276\001\032u>\010\034\313>m\245\254>\227fM?7\212\327?K.0?4z\017?~\312F?v\002e?\304b\244?\025\315\277?\315\375\315?\255\366I?N$\325\276L\267\251\275Kt\324>H\245A>\330\231\220?\352\327l?\311L\010?\244\272^?5-o?q\323\336>\244S\227=\342\031\301\276\302\017\033?\024\\\306=$73?n\341:?\256\016\255?Z\303\225?\'\014\251?(\000\271?D<0?2\276>\277\343\031\300\276&\014O?2\271\351\276\236\334\211\277Oq[\277F\2620\277\3606\225\274\211\363\212\276\261\365\370\276u\022i\277X\3715\276\3358\'\276\021\312\311\276\350\277e>d\203\025\277\024g\356\276\265\3729\277\244\326\201\276uZb>9\\!\277?\245\256\277\326\262\365\277R\3421\300\2375\022\275\302L\340\2751\370\027\276bB\213\276\016\355\177\277\344\213\210\277\025,\376\277r\030\224\277s?\246\277\312\275\035\300\375\005\t\300\023\327\210\277\341i\003\277\000\250Q:\256\353\261\276\330\3259?2\272\235?\200\242\206?\347,\242?\244\260\233?\277\361\256?-\315]?\370\330\305\276m4\017>\375|\202?\301}\302>\346\343\254\275\300\021\211\276\024\206\252\274\214\000C\276\251|!?H%3?\330E\032>\014\305W>\353\202\335>\337\177J>\311\304\316>\211\267\266?p\226\231?\311\362E?\200<\005\276\266G\006\276,:D?\325\333\332>\362\243\202\276\201s\354>\330\235k=:\2460\276f\r\231\277\357\301\227\277\220\225\265>\006\260\214?\261\303\262?Boz?\3023g?6\250\227>\253s%?\266\264\013>\243\314\034\277\204\360a>\220?\250\276@\352n<\036\222\254?\335\027\353?\244\327d?|_Q?#wq?z\254G?\204\264c?\275\207\206?\365Mc?G[g?mA\301=\330\003\377=\234yu>\220\000\001?\250\002\335=\354\007\302\276 \037\261\276\376\017K\276\036\322W\276\031I\314\277\222\212\226\276e\342\240\276\255\347\230>\354K\034\277\nR\340\276\360\206+\277\340\360\302\274p\373\022\275\206\272y\275\207L\271=\360\267\n>\234#O?v\"\310\276y\r\n\277$\205\030?\320\016\025\275:ru>\006\005\275\275V\205A\277d\\\222\277\032c\234>\003{\206\277\376@\261\277W\252\302\277\367{\252\277}V&\277\200d\333<g\017\263>\263B\222>\256\356\353=63\250\276\370\316\235>\344a\304\275\336>\322\275\227\311d\276\0047E=\216\343(\277`\345T\277\016\031\336\277\021\240E\277[:z\277^\224\r\300\204\004\006\300\234s\302\277o\212\315\277b\014\n\277o\006\210\277\345\364W\277\325;\273\277\250\254\357\277\265\277\013\300\255\021\027\300j\2542\300\r\256\361\277\346n\267\277q\352\253\277=\243?\277\201\004U\277#\362C\277\345\206\310\276\350\330\010\275\340+Y\272\037\027]\277\rE\322\276\253\033\234\276X\037\220>\264\005\202?\237I\t?$\242\237\2769\022>\277RC#\277\014\376\277\276 \016X<;s\004?\036II?+\024L?L\334\000><O3\277\"\373\020\277\000\215\371<\230\3249?\022\226_?\304\362\202>\306\003\014>\276k\254>\324uC\276xb\240?\350\020\202>m\346\217?\017\205Z?\364\336\032\276\034\306\241\276\221\210\266\277\362\340\350\277\232\027\231\277\215\253\240\277\264\201C\277\277\230\344\276\310\245@>!\322\357>\360t5?\320\246\271?\244\034t?\233\022\214?\032v=?<:\256?\276\340\257?\205C\010@\346\221\r@\260\306\372?\002\377\034\300\346\206\243\277H\273\001\300\030\256 \300\213\006F\277j\026q\277\004[?\277a\214N\277\345\013q\277\353+`\277\342\317\344\276z\306 \277\254\226\315\276\366\246\226>\264\267B\277j\004\032\277\334T\262\276\256\004\023\276p\275><\224\240[\277&\252b\277;\340\"\277\223&\215\276\006(\201\275\241J\215\277J1S\276\206\325\325\2760\324\234\277,\222,\300\256\303\345\277)\356\266\277.3=\277\207\227R\277D\255\004\300g)\222\277\'\372P\277\332\325\r\277\256i\213\277\022 Y\277\340X\036\277X\356|\277\334g\275>\242\351O\276\330\347\025?|\020\356==\"\203\277t\233O\276\205\027P?*\036\331\276\344Z\262\276\245\362\264\276&o#?8%E>\335\354:\276\240\371\276>s]\'>\306+\200>\260o\035<\221\177@\277\264\035\253\277nr\210\277,\002\304\276@\204v=\353aK?\220\306\243\274v\266\375\276\250Y+\275\002\347\037?@\304\234\2744z)\276\020vw\277]ZB\277k\323b?\306\3551?\366\366\227?\300\245\302?\014/\321?2\024\333?$\023\254>\0022q?R~\021?(\250\254?\300E\333?\3450\266? \017\006\276\337]\257\276:\"\"\277\010I|>\325\366l\277\336Bt\277\320\263\363>\001)\210?\352\311\343?[\373\270?P\324R?IW\352?\211*\253\276\310\303\255>\024{\225>\256-k?f\343\273>\372\213L?\234\377\251?;z\321?p]\250?\337\302b?O\364[?\320\004\242>\037\350\355\276\202\260\021\277\244\272e\277\362\254\335\277o#6\300\r\236=\300,\205\026\300\240o\274\277<\367e>\\\223\344\276:\nk\277\232\346\216\276\3745\214>\265\201\\?I\236\357?N\n\216?\307,\221?\333)\316?\234N\235?NT\322?\332\336?@p\330\367?\326k\243?\223nA?\2267%\276\327fj>\\\315w=\207Z-\277K\"\006\277NNn\276\210P\366<(\345V\277\260|\240\277\035(\317\277\0050\300\277\234F\232\277Z\362\357?\002\205\323?u\247\363?F\n#@\300\265U\275\272#\\\276<\360\013>\217p\243\275V-\215\276;\235\037>^@U>\036\335\352\276f\342\214>\010S-\277\024\306h\276\3245\312\276\204^\261\277\310\210M\276\353>\231?\364\2074?\376\224W?}B\212?[A\371>\320O9>\330-h?.\3578?\030\032q?\351\032<?\024yy>H\"O>z\347\243?i\233\334?\rE\004@\036\237\341>8\201I\275\247G\033\277\366\330)\277x*&\276\032g\212\276\320\332\007?\035|\240?\206\375n?)\2174@\024\335J@|\210\364?\3401\265?\222e\002?\2522W>\254:\024@*\372>?\014\036\036\277X\256J\276\361\372Z>_\007%\277\300bu=t\005\217\276\340#\202\274\000\222%=\342\020>\275(\007\007\277q.!\277Z:c\276\000\022h?\004\272Z?@\304\021?f\313\210?\247L\220?\373\315$?2\000\322?)YN?\314\003\014?\306\315\316>\014/\220\275%\307\212=\004\254\356>\342:\236?z\242t?\323Y\223?\013#\223?\2641\260?;}\337>\265A\317>\260b\034=6>\332\275\332\335p?\210\305\243?\027\223\202?r\2273?\014\215h>\330&\310\275K\311Q\276b(\336>\214\265=>[\321\037?\260\355\273?\272\004\305>d\201\346?\306\'\244?\235\233\021@\261e\334?\313~e?\306\274\301?\232\325\267?\013\335\000@I\265(@\332\3374@\341\341h@~\037}@\3133{@\326\251\267?f7\255?S\007x?\000\206\310\273;=;?\t\361\267>\211\263\001?p\237\357>Vn\370>\000\213^\275\374\376\334\275\004t\210\276a!h\276\240\201D;\036\274\377\276\006)\227\276hE\\\277\311\273!\277\303IJ\277\275+0\277\260[\246\275\206\nS\276\\\230\324\276\310.\220\276e\'>\277p\325\373\277\215\016\002\300\000e\277\277\330\340\367\275\206K\341=\343\255\305>\007\313\033\277\027\217\226\276z6\303\276\356b \277\323h\t?\322\341h?\365\3477?\266\313\256\276\004`\353\2766\345\313\276@\252\010?\241^\355>\206\323\003?\212\276O?\224QF>\210\252#\277\330\n\215\2757f\025?\3208\203<\021\264\020?\021\374\257>\304\245C?;\214\000?\260\273\247>\250\222.>\275\311&\277@\341P\275\254\301\300>f;\270\276\256\362\341>@w\311\275\315\276\276>\0229\027?\200\004Y<\300\304\223\276i\2157?X\322\263\275L+\031?\254\323\205?\221\375\212>\'O9\276\222g>>\264&B?RgJ>d\353\256=\035\375\017=\274\334\030<J\240\006\277\335\334\341\276\366\320r?\212\356\314\276t\271F?\262%\335\276\262wg>hO\217\277\224\246\252\277\320R\221=\034\r\026>C6R\277n\036g\277z$G\277\344,\237\276\227\277x\277\363\371\214\277\227M\301\277A\256K\277\2027m\277\312\216Z\277\266\330\"\277\004\177%>J6\202>&\016\036?\036\370\361?r\271\006@\224L\322?/C\264?\261\342\254>V\273k?\354M\214\276\226v\032>l\241c?<R\232\276tc\242\277\200\264\203;`d\342\276|\234W>\0205=\276\217\204\311\276\344N\312>\3151\355\276^\371,\277\304\030j\276\326*\377\276\200\021\275\274\314\032G?\372\242\252\276\021\365\347\276\360G$?.I\353>\341\302$?t\232\002<\346\200\004? \371\316?\300\266\220?V1\275?\333\002l?\355\264 ?\306sL>\224\302?=\262Z[\277\300\311\006\275D\270\211\277\342\275\304\277.\272P\277\004\013M\277H\022\251\2771`z\277\210\360J\276\240q_\273\026}\227=\374t\251\276\030\266[\276\022\306S>m&\322=\265\363\010@J\343\345?\003\332\216?\3164\302?R\355\217?\014b\302?\220\205\n@z[\313?\366p\016@V\274\344?\313;\214?\336H\267?\365_\377?r\021\215?\264qe>b\207\257>\211E)?HC\220?\020kR?\204A\213?\343B\260?lZ\260?\013\367\232?^e{?\354\004a\276\237\327\206>\324\215\303?\326,\026?u\253\200\277E\347r\277\264\363\256\277%\236~\277\n ^\277T=\313\277[\000\027\277\374.\246\277\317\357#\277\240A\376<\204U^\275\215[\230\277\356\330\256\277\227p0\277;\265\246\276\2440\345\276\363\210\'\276&\261\243=\035\201M\2773\r\311\277V|\217\275J\035\231\276\"\206N\277\224\2609\277-\315F\277\022\022w\276\224\272\010\277\000\242\016\274\204\243\252=N9&?\370\236\314\276\312}2\276\327V:\276\240_\254\276#_\001\277\246\314<?\241\270m?R\006G?\022\213\341?\342h\342?,\336\320?\305\312\366?\204\\\370?7\t\000@\245\253\031\300hV\n\300\023\240\n\300d\027\014\300>\272\264\277\343O\277\277M\231\001\300]\024\205\277\3650.\277\353\010\205\277\354\013\214\276\001&+\277\000\373\333<\003\224\335>\020!>?\223\240\233>\310mS?\036\n>>z\335\314>P4}?\344?)?\210D\360=\332v\317>8w\225=\355\025\244>\232\205Q?a }?\026\306{?\350\234\332?\276=\357>\210\n\221>\230\2176?\000\214#>\332\251C?q\312\376>\240\004\310=&\372\332>:\250e\276\346k\221\277:&!\277\t1_\277:4\202\277\210\000/\276\230T\205>]~=?\3141\212\2758\3235? \3640\275^\204\271\277\\:\240\277\316G\t\300&\346\001\300(\007\020\300>\007\253\277\307\\\266\277\244\231R\277\003x1\277\016mt\277q:y\277\230\220K>\017\275S\277\275\274*\277\302\321\\\277\021a\025\277\001\216\232\276[\314`\276$I\224\276\377\365:>C$\306\275\006x:\277D\001\235\277\346\267\026\300]z|\276\374C\000=\327\354\034> Rd>\241\005s?\n\332\376>\356\304\246?\320*\027\275}\006\036?\275\224E?\331\321s?\200E\210?\005\222Z?\266zr?\221\277\215>`\177\352=\334\350u\275\325\307\233\276@\360\022?\r\002\370>\340\341\023>\340~j\274C\256\034\275\242\010\306\275\005~\246=\343Y\271>\260\034\276=\344\361s\276(\274\366\276g\341\263\277\326\332E\277\250\177\212\2778\247\315\275Co\013?\324\201\364=\247\315u\277(\307\355=3\301\032\2776\353\241\277\350\000G\277(7*\277\313\276\035\277\333\3309\277\232^\216\276\010:\337\275\271\216S?f\377\340?^G!?\'Y\227\277\001(\033\277d}g\276\3438\261\276N\213\t\2779\206\310\277N\327\034?\250\t\023>\246\021\251>$\346\002\277\260\363\352=\347)\021>\302?M?\216o\201?\337\013\226?\314\200\032?M\324\303\276\\\270\301>o3\024\277\313\226\'\277\246 \244\277\013\237\233\277\256\371%\300\024\005H\300\262\360\340\277\022\334D\277\034[\r\276n\361\r?d\315j?\202\036\333?\010E\264>\332]\201\275\374M%>O[O?\250\317R?\360\017\022\275\260tf>l\362W\276\376\024\311\276\221\255\260\276\t_\374\276@6-?\365\"\030?J\223]>@f{\273\221\350\203\276\245K\270\276yk\220\276\023j\377>v\311\223>\374AQ\277\341\212\233\276@\225\305\275\340\257\366>R\210\247?\330\316S\276-\013\016>.\365\305>\214h\222?\372-\301?{\300\233?\342\032I?&J\241?\200\243\335\275\27002\277\241\376\313>\034\350B?\235f\264>N\002\322\276\005\310\276\277\210\036\340\277\001vZ\277\257t.\300\225\217\263\277\214o\021\300\035\223-\300\327q\021\300\327\252#\300\325\225%\300\241\374\t\300 \213\306\277PR4\275(\317\225=U\371g\276A\221B\276\212I\237\276\334FJ\277\314\363j\276\210\200?>\253\331k\277\014\223\341\277\353@\225\277Z\266\235\277\204\361;\277I\225\244\276\375\244%\276\006\226\264>\264J(\276l\377.?l\301L?\305\035\331>\033$\304>i\030\024?J\325\020>\375\252\271\276l\036t\277L-\332\277\030\232~\277\211y\235\277\202\206\022\277T\251\217\275\316\3400?\237XJ?\323\341\003\277\304\360+\2772\251\265>\002\321\320?h\340L?\270~s\276\000\272L\277\363\261v?N8V?X\226A?\271\373\241>\255\326#>\017Oj?\016\270\277>\t\272\\?\3248\033?\225\246\002?\270\204\r>\000*\342\276\254\323\263\277\377\334<\277\233Q\265\277\026Bm\277\310\306;\277\"\246\177\277\376\274\221\277\014\227\034\300\264,7\277L\006\212\275\367\203\240\277\000\221\220\277\366\252?\274\324\034\372\275\322\365\337>1\231A?\207\273\202?\240\201\032?\032\262\251?\374\240m?@\2317\2760\010\261\274\270l\036=\212\333\201\275R>\277>\340\355\311\274v\226\000?a\252O?\036\343\225?Xv\345>\344\362a?,\037\306?\224X\241?\374`&?\267\357G>\022\222\020??\200+\277\\\326}\277^\334u\277o\200\222\277j\230\234\276\rMx\276+\033X\277\332\035K\277\207\0025?\\\004\321?\337\225\331?\377\256|?\024|\321?\006\213\333?RN\004?\364\250\016\276\276\223\222\276`\377%\275\237H9\277\262\363)\277$~5>x\324,\277\375\363\\\277JV\215\277\267\361\203?\204\216\365>\354\270]?\003\2130?\361\006\013?k\022\215?\032\000=?\000\326\036=\267\351_\276\234\373\217\277\301#\025\3004\037H\300\210:1\300bH\016\300,\245\025\300&\335\357\277GZ\220\277l\032R\276\357\246\'\276\025j\211\276\320^\360=3N\356\276[wX\276\366\214g\277\303\342\215?W\321\007?gO1?\206\221\360>\217;\243>\222\021C\276B \247\275r<\307\276\224\222\025\277\230\261\270\276t\210G\276\271\007m\277\335V\366\277O|\307\277\020\0232\276\000\000\255\270\260\204\004?\020\3602\275\241\330\212\277\214\006(\277\004\"G>\211c+??\2725\277\226\017\271\276\017\201\305=t\317\274\277\356\362n\277H\300z\276x\332\202?`\336\220\274I\277[\277\357\306$\277P\240c\277\021\336\214\277\240\212\336=PaQ<\022\325\204>\007,\373>R\207i?8t\230?\343\216\303>\351\343\254\276\310|i=\220\355\010\277\307P\223\277T\r\230> \242~<;\320\n\277\316#)\277\274\305\305\276\2729\300\277g\2548\2778\001\202\277h\r\272\2754\202\366\276\214o\203\275\275cW\276\032\267\313=tS\253<\020\322\230\276\302\347\274\275( 9\277\225\005\377\276t1E\276@\031\352=EM\334\275\345\2241\276\031\366\251\276\320V\210\277\2427\240\276\274-\016\277\3723\221\276\361\3535?\000\206K?F\t\007@]x\036@\351\254\271?\354\257\215?>\340\220?\314\021\377>\224\265:>\247\312\240\276\034\315\305\275\027!8>\252\252\346\276\027>Y\277Yo\225\277\360]\005\276e\372\335>\376\220z?\331\'l?\030\307/?\"Y\253\276\225\315\225\276\\\036\022?\344*\t@\244\371\225?\276\317\316?)p\177?\227\3626?\322\204j?b\246\233?_9\364?&\003\303?\370\206\036?,FV>R?\377\276j\357|\276#E^?`\346P\275\001\256\303>2\335Z?\377\260\235?Y?\202?\243\377\201?\270rB?\0021\037?\234h\241?\327\230\251?i\345\021?E\277\365\276d9\035\277\n\227\246\276\236P\233\276@\356\263>\206\\1?\026j\244?VJ\254?p\340\251>\272\253\330>\322\357R>\344\314)>>x\276>*\014I>H\033C?`\253\007=\232\344\223\276\024\303\223=m\020\206\277\303\010S\277\270\211?\277\330\002x\277]`\224\277\336\303\357\276\214l\262?R\332L?\030\260\300\276\2331\205\277\023\277\233\277\267/6\277\272\016\036\277\211\223\'\277\"\266H\277\276\205\370\276\037Fh\277LsT\276\006s\271\276\275\341\025>\215+7?{\013\t?Q\277\305>f\255R?\342\340\t>p\334\236\277\354\220r\277\010h\275\2774\361\270\277L\254e\277\254\242G?\321\237u>(\364\251?\244\215\324>\360\344\313\276\030\237I\275\343\004#\277p\236a\275\304X-\277c\335\211\277\353\254;\277\000q*\2733\'\251>E\200\022\276\300\337\301\276\317\316\212?n\tB?O9 \277X5\341\276-\273\225\276\027R\341>Nd8?`6\222?\006[\335?\014P\314\277Il}?\227\237O?\241\033R?Dr\245?tq^?\017\376\002?|\017=?\240\261\230=\324S\312\276h\026\354=\216f\352>\336\213\225>\200\260\205;\'C\026?\000^;?\027\224u?F5\254?(1:?\324_\031\276\004h\237\276<\230\215\277\334C\007\300lS)\300\363R\356>\300\375\312\275\026I\231\277\370.\345\277Y\026\352\2777\377\346\277\340\334l\275\312\207j>T\ts=\321\306>\276\034O\202\276$)\201\277\030\234.\277\354\302\367\276\237\035\030\277T\027o\277T\r\270\276\001\274\213\276\\7\374\276\333\261\234>\246r\324\276\202!\217>v\331\016?\342\325\t?{\272\322>\017B\310?\306\n\320?!\367.?%\276\202?\233\227v?\272\021\237?x7\320=\350s\330\276yG\251>\004\001M?\350CH\276\241\241I\277\004e\202=|\250\202>\231\t^\277\033\n\321\277\376\347\206\277\nxb\277Vjl\277\366\226\225>\257\001\231\276\217\005\254\277\302\317\210\277\2705\022\3006\251&\300d\270C\300O]\031\300\345B\002\300\007 \263\277B_\342\277\276\262\304\277\254[\313\277R\035\350\277@?\375\277R\317Q\277x\372\217\277\214\275\311\277s\253\270\277\2369\374\277|\037\310\277\322j~\277\\*$\277\326s\013\277\3065\017\277~WF\276\200\370\242?\202]4?\224\220\373=\277K\317>\370$}\275\342/\217\277y6\223\277\032-\017\300\272\031\364\2779f\000\300\022R\316\277H\366\210\277 \031Y\2761\263\001\277X\313\034\276\007~\262\276|z\212>YY\202>\204{U\275\3416\264=l\254o\276\264\200\223\274\024Tv\276#0\024\276\212\211\205=F\010\000?W\336\226?\014\276\266?l\224\202>\271<\013?R<l?4\257\306?\267/d?X\221\240?ki+?\200~\220>|j\307=R1 \277\210\217D\276j\346\004=?\374m\276*6\247\276J\027W\277\r\360Z\277`-\245\276H\205\243<\314\237\036>\274\222\037?\243\205\025?~\242L?lx\254\277\304K\006\300\360\006\023\300\024+\361\277\006\027\271\277\360%$\277\000\010%=s\303{\276@\035\264\277=7\325\277\373Z\344\277\3340\220\277\276\237\231\276S\033\036\277\240A\022\276\020\372\205\276F$\310>$\345\246>\353\2367?\226\321p?b\226\353>Z\331\234?\210\364\262?\340:\256=.\201\277\277|\246\t\300:]w\277\211\000\177\277WI\004\277\300(\247\277\276\246\002\300A\333\233\277\232f\372\276Z\3035?\276\202m?\016R\006>t\376\315>\214\336\255=[\356\003?\360\271]?\340\217\014?\260\nT>\210\324\347>E \327\276\242\270\006\277\024Xg\277@\350\332\277\010\250&\300\206\304B\274\361\255\265\276\23090\276\214sF>_\325\010\276hKd?a\310&?\230\205\213\277\222\004Y\2774y\231\276\010\316\200=BQ\206>\336\037{?\262\232\264?\202>\232>\330\352L?N\353\231?\236\376\312>\"\3152?\237(\331>Z6p?\340a\371<\375$\360=\203>}>\233\031\272=\364\265\007>9U\001\277}\r\242\277xJb\277\354)\r\277\022\332*>;%\017?\320\204\257\276I\254\270\276\2549\257=\322\324l\276\032b\035=>\222\330\276\020<\330\276\206\233\335>M\244\251\276\006\376.\277\230p\033>\260\360\302>\203\322\307>wn\203?\236h\345>\022M\344>-U\302?d\370\333?\355M\307?\000B @V\261)@\024\337\260?u\341\247?\302u\262?\310\344+?\304\344\200?\032\021\257?\360\340v?k\201\205?]\036Y?\240Ua=\007\224^?\355\005\207?\363\001\013?\225\023\245?$\235m>\n\000\212=$\210_\276\204\254\003>\036V\277\275\237]\000?>:\031?>\220\307>-\340??\220\227[=\317S^\277\216O\223\277`<\264\277r6^\277 7\201\277\264\241&\277\014rB\277\nOM>\265\2115\277\024E\276>T\3455?\034\375>?\274\303O? E\206?a/\305>t\252\255?v\'\301>\r\3149?\302\005\206>\322\000\006\300yO\032\300x\333;\3008\221f\300\301\372O\300h\2278\30026\017\300\332`\025\300\036\326)\300\210\253\200\277\017\275\001\300b@\347\277\331\341y\277\213Ne\277\312X\242>Z\345\001?0\264\211>fz\265\276\352:v>\343\335\217>\000\365\203\272!\202 ?2gs>\002\317\317\275|\'X\2760a\010\276\224\300\345>\212z\354>\223\342A?\274\267^\276\250Q\316\276*|\021\300_\243\n\300\350\362\307\277\013\022\235\277\255%\227\2777b\220\277\035\330V\277\255\244\331\276x\236&\277\376\230\376\276\024\270\022\277\354Zf\277\220\350\267<x\352\270\276\0028i\277\001\274\204\277R\2664\277\025\221\342\276\001\331\215\277\214:\263\276\272\334\256\275[(S\276\202d\214>\025\273\272?L\016\367?\372\325\322?\352\036\221\2765A\010?F\352U?\373<\207>[\206q?F\217\202?\333m\360>\264g\376>\310*\205>\262(C?\000.-=$\301o=\313\374\302\276\201\250\222\277l\374\253\277\017~\356>\266\214\372>\330\351[?\242\025U>\315\032\006\277F\343T\277\230?g\276 \ny\275\211\035\220\276\227JU\277\312\026\216\277T\374\253\277\336\276\243\277\214\r\004\277\346$\317\275o\013\007\277jy>\276\213c3\276\332\3568\276\227\347`>\324\242#\275\344\350\243\276\036\032M\277\370\224\220=\331H\300\276H\364\256>\31670?\336dp?\274\215\274?\260\261n?S\304|?x\023B?\200\235S\274Tl\t\276H\356Z<\301\324\312\2766\321F\277\223\300N\277\024\022y\276|i\342\276\200\254\207\277 \356\256\274,\033@<\217\242<?Yr\211?\262\234\326?\326\n\267?\374g\212>\255\347\233\277\225tr\277\272}\234\277\372\322\262\277F\026\325\277H\367\206\277-\242\376\276\262\323]\277\027\323-\277\254\037\237\276\310\245M\277b<{\277\215{\211\277\203\010\206\277v>\243\277\376\220\312\2773\"\356\277)\363`\277t\242\316\277\037B\302\277\302\022\374\277\344\000;\300\302V\327\277\013.\310\277\216\254\271?X\325\316\275\314\261^\277\340\035\024\277\276\024\020\277vt[\277\\\215\247>Vi\276>(\227\327>\200W\310;i\241,?\000\3040:\326ca>\206\3551?\374\347@?N T>\360\242\266\276\375\212\227\277\326\315\007\277\213\033\317>\371\005\007?-\027\002\277\312\250\336>\310\006P?\275\027*?@\034\356>\364\037\231>\276\302W?\2329\007\276I\271b\277r\\(\277x\335g>cK\304>\300\343U?C\361\337\276\222\034X\277&g\222\277\254hS\277\315\376\277\277r\3458\300\370K\301\277|\223\005\300\234C`\277\231\322\352\276\007\341\022\277\010\247\251=Fk\201\276 \233m\274\355J)>\217\033x>\000\346\352\271\366>V\277\262Z\301\277;\337\331\277*K\232\277\254\227\266\277\307Y\301\2774\037\332\277\016\216\223\277\320\231\233\277,\245\001\277\240\277\\\276\210\313\251>\036\323J>\340\026J?bW\207>k\362\202\276mu\010\277 \330@\276~\357\225\276*6R\276\200c)\276\325J3?\002~/?\316\022\271?\217\362\030?\202<\316>\310\243\250? \037\235?N1J?\276[\203?\321\177\314?\314\241\360?d\277\234?*w\363>y\372:?\246\323G?\305\247\245>\010\004C>\250\032\r\2770\rH\277\202\307\202\277ICH\277>\014\201\276\036!7>n\321\201\276\277An?`Da\275;w-=\336\214m>\232\323\217\275\306\020\316>\264\331M?\\\326;\276\"^\034\277k\"\371\276w\333\353>\251\350n?h\330\267\276\311\2171>j\324_\276\026\353\020?\014\370\026\277\351bW\277\351k\230\277P\230\037\300\002V\035\300W\255@\300\352l\001\300\315\346\360\277\257\320\310\277\271\255g\277f\237\344\276\234\376\227\275\006\2358>\277s\252\276\027\357\000\277\250\001\367\275\2211e?0\256\376\274\263t4\276\300)\364\276D\026\253\277\217\305\204\2773z\255\277\305\225\305\277\373\327\302\277\354\204\216\277\021\006\272\277\2748\205\277>\034\221\277\220\336\250\276\243\232\211\277\033c\021?\372+\235?(\270\022@_e\373?\347\254\354?\237 \272?0\337\321?`\265\202?\270\332s>\202\253_>\005\264\033?gg\177?\335G2?\331\017\375\276v\266\303\277x\006\211=\321\332\226>\303\n\205>\206\324H?|)j?\257\303b?@\003\367?,\335\271?,\350>?\202n`?\216p^?\010\233\023?\000t\030\274<G\240\276\202\322\'>\304\007\324=\370\2357\275\234g*\277<\022 \277\204\333\031\276\314\014\343\276\331\243\321\276\216]\355\276cT\215\276k7\366>\000\242\317\273\311\231\t?w,A?XkW?&\377\360>Y_w?W\272\230?KyU?o\367\323?\360\325\340\277\304\312\271\277\013W\375\277Ef@\300\372\232I\300\256!;\300\361/\311\277\322\372\250\277\2440\036\277\264 \210\275\250*\216<\032#~>\254\333[?\252.\320\276C\372\201\27612O>\205\020\037\276\370\224\035\275(u\035<\035\021\302\276 \354\345<H\3640\276\312\220x\277\374\314\262\277R\004\266>6\330\214\276i\'\022\277\264a\234>\036\303x?\216-\271?\200\216H<\350\031\320\275,d\273>\270\241:\275\271W$\276\314\342\307=Z\'o>v\252\207?\335\0233?U\356h?\274\275]?\306H\t?l\250<\277\350\233c\275F\203\341\275\256E\001\276\340F\267>n\336|>\253f\346\276\310\351\230=6\310\363=f\017D\275\311\017q?\342\260\240?h\314\002@\274H\253?\000\253\207?\226\032\245?\207+\323?\0006\243>o\306\027?\240\326\t?R\230_?B\361B?\034\307F?>7\246?\350\207\366?\377>\006@\262\254\344?\023\351\232?Q\207\236?\210~D>.\211\324\276{\037\303>\2624I\276\032y(\276\230h^\277\274R1\2775\240\204\276\016\370\240>\334\271{?\334\334\332>\220\004\274\274\n,\363\276\2372\363\277d\247\212\277\205\363\264\277\231\315\305\277\211\036C\277\312\377\356\276\304\247\344=|\226?\276$4Q\277f\240<\277\324\227&\276~\232\261\276\336\261\232\276|a<\277\235yd\277p\254\365\276\312\265u\277\234\330\310\276\216\303\316\276K\3117\277\366}\213\276\r\306\200\277\356\200\230\27730\277\277/E\202\277\001A\214\277\372\001\033\277\032\261\220>\350U6?FM=\276mJ\003\277\364^\016?\256\331D\276I|Y\277\326\264\250>\324\214\014?\356-\323>\272}\203>\022\256H=\224\355\231\275>c\250\275\200J\025\277\307Y\334>0\026\373>;\024\223\2769\305\202\276^\240\273>\305\325\337>\272\302\000\276\306\373\201?\034Y\270\276\257|b\276U\242\025\276{\271\373\276\314\261\003\277\322\350\274\276\356\000\006\276}0\214?7\260\323?.\310\363?\331%o?\264\330\245?\330Q\022@\241\001>@\230+\010@\034\261{?\352\t\200?\260\005\353=\240\324\253>\220}\205?\342\255@?B\230\302?\014m\333?\276o\330?L4\230?\027\304\'?\370\215\215?\316\254\334?&,\"@\004\205S@2.W@\244\240,?\032\312a\276\nx\'\277|\372b?D\340;?A; ?hI\312>\334\203(?\220\301\202?\035O\203?\216\343\235?\212/7?\313(\252?\256\030\010@e=\361?\330\300\241>\364\352\234?\252\213\220?\016\352Y?Z\004E?\333\340\310>\214\356p>v!\337\276\3602\325\275\001E\254\276\341u\211?Z\313\005?j\312$?M\001E?\207\036g?G\332\254?\360\211\377>\344\227\377\276_\316\242>\002\255\r\277\367y\023\277\377\303n\277\034\3601>\247\234\025>\210yb\277\3430\374\276`\331\200<\316y\233=\316\376;\276\021\372\302\276\274\271`\277\000\362\367\276\326$\234\276(*/\277s\031q\277\027\002\362\2770\307\204?\330\262\036?\331\276B?\n\3608?\032X\240\276\260\257\314=FGl\276\302D\036\277@\332c<\265\017\037?\246\304\312\276\242/\001?\246g\336>hMn?\350%#?\000zt=\n_\006=\302\001M\276\364\031\024\277\326\311\257\277\300lT\277\340+7?w\307\245?j\315\333?\\\251\324>\306\005V?H\305x??\354\023?\210\025\255>q1.?CQ\371>0\207\252=9\255\211\2776\341\342\277\245\356\226\277\340\372\266=\014\263\334=f\316\005\276\377\241\020\277\026\2344\276$\205\260\275\327`[> 4\010=\220N\034>\234\027\217?hS]?\362i\314>\262\027^\276\376\246\216\276\204@\336\275\320\262G\277%S\312\277\255\033\235\277\322*\213\276\256D\227\275\370\3172\277\375q\n\277\000\367\224:O\326\036\2760f\203\276\3558\265\276\266\231\240?_\271\336>\240\006Z=\341|\310\2769*J\276\017\343a>2\330-?\032_\273?\260{z>\202\344\374=*\234\033>\236\212\260?iL&?H\252G?O\237\265?a\273\000@Ph\032@\346L\257?\032a\302?xz\313>\317+\316>\374\300R\277x\361\211\277$f\315\276\031\326\376>\tY\214?Y\200\200?\025\n~?*\264\310>\350\025l\275\034\217\364>\256\013)\277\367R\334\277\374\017\331\277\300E\026\277\215ZU\277\344\224\245\276\300u_<\351\336+\276^\003\322>t~|?\'\336\323?\205\000\223?P\022`>p.\223\277\220\371:=\016\334\366=m\324\240>\210\211\224<\350j\374>\316[V?\\\225\034?$,K?\207\213q?\020\271\301>aH\214\276B\013\331\276H\3047\277z\214\215>\345\360\033@pc\356?\246\273\376?\002A\322?N\362\272? \312\232>\270\007\230=j\236u\276^\225\365>\t\345A\277\255Zo\277\334lq\276N\311d?\006\033f>6\317,?d65?\273\301 ?\230w\n>4d\334\276\243\334\026\277Z\252\331\276\256r;\277\222\220\237\277@M\226=\330\310)\300\253\336+\300\334\330\246\277\225\243[\277\214\354]\277z\237S\277B\241@\277~\332\002\277B\004~\277\\\277E\277\360\270\216\277\222\332\217\277I\321\253\277\266\352\255\277\223)\260\277J\246\010\300\340Z2\300r\'\022\300\256$]\300@\351(\300t\253\311\276\320YQ=T\2224\276\234\311\333=\252\023\204\276\226\177\017>\304\310\275\275\036\355\003\276\257\316\332>\260\333\266<\\\340\234\276\2446+\276\237\375\r\277\004\334\263=\251\245(?\306\373\255>h\326@?\264\217\271>F\362.?4\2233>\223\265\002\277u+\332\276\313\264c?\351l\232?\376&\363?\320D\334?1\177\036@\013\002 @\377\310\216?T\210`>\364\001\002?b\027%?:G\026?&i\207?P_\217>\324\237X\275<\227\201?8X\017?\226Y;?/\006\311>\354{{?fj\220?$\377\251>\366i\225\276\260o\265<\361z\213?2S[?:\025\305?\241I\243?\2400Q=\254\344q>45\t?\030\356\364>\210p<?\n\033\275?n^\234?-\311\250?\037V\231?\334\013\313?\340\311\014@\254@J?\0102\026?\2648\004>\2759\006?\007\305\027?ZXf?b\r\200?da\261>\322\220\356>VP\037\276\025#+\277\214:\022>=5\215\277\244\210\263\277\344\247\013\300s\241\375\277F\021\263\2764Q4\277e\305-?\304N\032?F\237\013?\205j\204?\324\331;?h\371\245=\210\204\032=?\337s>O\207X>\356\270\013\277\007q5\277 \203\364\276*P\241\277\007\373\305\277\340\'\022\300\317[\024\300\365P\025\300G\347\035\300\256\264\000\300\034|/\300\n,3\300F\324\243\277q\312\243?\270\377\270=!\377\033?\316\3708?\220\275V>(T\233?\241\n\177?O\257\351?\334\211\031@\246\345,@\224\204\024@\266\233(@*\274\n@\370\234\322?\316a\240>\264)\250?._4?\374\373]?\343=\234\276\312\357H\277\320\003x>\206\036\267\276nw\200\276]\265\231\277\336\245\260?\322_\221?\027\306\321?\271\252\201?O\305\016?\0059\217?i\316\223>\304~k?<U0?x\330\263=\322.!=\303\373+?h\321\325>\242jL?\377gd?\003\360\266?w_\240?\371\364<?\232\307\221>lzC?\347\271\232>\312\322Z\276\322\230|?0\2617?\313|\246?\250\202\260>\360g\261>z/ ?\234D\233?\347|\327?\237,\021@\241\3532?\220\034\335\276\317W\003\277\213\226\207>@\023K\275\014(h?h\201\347>p\034>=\306\314\317\275&\201\373\276\236\326\257\276\333\024\274\277\220\"\347\2770\311\257\276\271\315\233\276\300)Z\276\360\264w=\315)\260?\324\247\301?\302\275\301?F\367\301?\360\230\302?\334\357\233>@{@\275\023-\356> \364\025?\226\320\006>9v\241?\246\026\336?\365\361\325?\331\\3?\300NL>\324\242\354?\344\026y?\323\222\355?\375\3375?D\226j?\246\373\376>\202\273~> \342z\274\025\203\361>$\245\007@\262\2532@\212\224\365?\272q\023@\036\216?@\210\303?@\327\3542@,4&@\267\035,@}`\340?\321Y\002@\357.\366?:d\001?\\\t\262\275\313u1\276i\322\277\276\376\353\222\277,\376\027\277\334\016\240\276\032\256j\277\202\304\215\277\252\217\243\277T\313\027\300&\315\025\300\225\352\330>,(\000\276\215\324\333\276\324\252\213\276\360\027\255>\350\\\307>,/\200>\371\223\020\277\342\350J?`i\034<\307\225\"\276\254\r\022>\014\350f\276[`)\277\220\221\226\2777p\254\276RtL\277\254\376\200\277b\004\363>\254\244\256\275\242\303\304\276TU(\277@\253K=\020]\215>\356\202\212?\234,\330?\226\351\260?\260U6>/Ng\276W@>?X\357\241=\366q2>\254Z)\277\"^\025\277/\250\260\277=Ax\277\204\003\314\277T\313y\277x\225)\277\246k\233\277N\034\211\277[\236,\277\234\220\026>\272\367p?\0059\205?\362\310\340? \311\224?\366_\274?\366W\n?h\234\336>\357\304\241>#\037\t\277r\232\033\277\022\356\306\276T~\210\275\220\313\264?H\233\217?\262m\310>\221M\211\276\256\304\030>\326\355\275>\013_\367>\2042\327?\350\237E?Nk;?\0346T?\006\265C?\234\252\031>?Y0?\266\300\200?8/\244?\235\014c?\341,\033?FlU?\224\024\374\275t\324W\276\371\020\325\276\230\276f\277\016\3743\277:\230>\277\323U\275\276p\004\237\277\364\212\231\277h[\340\277\274\351\260\277\206\300\344\277\332!\201\277\370\017\256\277\\\2139\277\365h\206\277\245Rh\277\350\215g\275x5\332=\226\3746?\177\030\210?\375.\203>\031j\225\277\272\307\331\2777\374\257\277\312\205\262\277\377/\237\277B\034\320\277\314{\374\277}\242G\277\342\032\260\277bO\345\277\274\201\257\277\277\322\215\277\353W\252\277>\264\263\277\335U\273\277\201\022\372\277\227\267\252\277\"\210(\277\220\001|=\314\302\333\276\362\212\306>\356\217\277\276j\361\030\277ibJ\277l\2249\277\255\257\225\276\362\203\245\276sK\177\277\310\2573\277\256\226j\277l\356\244\277\204?o\277\316\3007\277\004\025o\277T~i>\002\024/?\2344X?\240\265.?\305\035\340?w\260\210?\200\260v?\212-S?\324\256\200?\334\246u>\260\325\216=\234\301\335>\242s\321>\315Y\215>\303\343\276\277\016K\322\277\010\267\006\300\332\265\010\300\340\227\325\275\214\032\304\276\002\266\225\276\377K7\277\304\261\002\276\277\025\022\277\200\365x?\255kl?\013\205\025? \0239=P\204\262\277\371\312\233\277\236\016\273\277Dpj?\006\242J\276?l\342\275\310@\307\275\20246\277\332\300\203\277\244\246\256\277\215\025\244\277\014\320\207>\264\234\027>\021\025\212\277\000\247R\274\365\235!>`\321\r<\254\371\302\274m%\206\274\350\037\t\276\244E\t=s\022_?8\034?>$c\255\275\243&\371\276=\367\232\277\353^\241\277*\201$\277\273\r\375\276X\214\257\275\214\221e>FvD?\320G\270?\333\226\275?C\315\202\276\246\233u?\260W\230>\242C\222\276\360\233\341>\034xy?\372D\275?\006\027\254?\033\013\220?\366 \037?\324\223x>^\334\017\277\352\260\367>\347\002\332\276RF\207\276p,p\276\"\0041?@\025\356<j\373\025?\262iM>O~\013?p\\x=\177\323;\277@\ng\275\032\322\215\276\027\250\276\276\300s\230>()Q?\226$\224>2\020\301\276:o\313\276\313\331\360\276to\246\277\355\301p\277\310\007\253\277|\022\237\277\217(\242\277\216r\203\276\347d#>\366$\016\277\236sw\277\340\320\003\275\3213\321\276,\n\252=\320U\202\274a\217\r\277\220&V\277\322Q\236\277\236\"\364=\331P\026?`o\257\275\324\357\210\275\\\361J\277p)u\277\372w0\277pns\277\304o\001\276\300C\215\276\266f\236>\356JG\277\373\000\216\277P\223\177\277>\240\241\276\210\354\230=\354\037\212\277\375\014\003\277K\253f\2779\010\255\277\010p\303\277\275\264\032\300\334\250\205\277\277Zj\277\215\365\227?\302\220\271\276\325\334\377\276\276\210\016\276\374Z\'\277\216\246\244>\367\032\005?\026me?\307\347>?W\002\242?\024K\326\276}\254\213>/\2448?\006\r\214?\226U\260>\177\341\227>\"\021S?\271\025\n?c\203\277?v]\261>5\t\230>\204Q\245=\r\257\371\276\240\037I< K\010@\330A\313?5\010\001?\300\022b?\033\370\242?\013{\020?\256V^?J\333\253?\272\241T?\222q\330>\265m\364\2764P\031\2762\347\000\277Lr\233=&\342=\277Q\366\251\2764K\034\276^l\374>^R\001>=\010\300\276\020j\376\275\303\2371\275PNF\277\350\266\240\275\207\327\256\275lZ\327>\263q)?W\312\"?\202\367\003? |\211>x\376\365>\260\3208\277\202\344\376\276(\364\277\275\221\267)?\330:&?\205\210\235>x\027\264?^\030@?\250\354\016>\330m\367\275\263L\356\276\230oD>\"\372\274>\314V\261\276\326k1\277\344f\217\277\251\202\261\277\241\233\253?\225\242\331?_y\300?\270\010\030?\002\310\211?\345\242\223?XJ@?m28?\217\021\257?N\032P?,\313\014@B\036z?\016\'\336?r\362\363?W\367\337?\304\253\370>\003&A?\315S\300>\330\267*=\216\030\n\276\n\007\346\275\200o/\276D6\350\276\274\3204=\243\324\317\277\021h\210\277w\220\242\277\364x\320\276\350\257\213>\371\221\264>\014\\+\277\027`#\277=\204u\277m\177\231\277\304\355\213\277\315r\232\277r\251\224\277@\3303\277m\023\307\276\230\255\272\276Z\305\237=_8\206>\270b~=\002\330\223={\227\227=@\225W?\316O\200?R\203\232?=\221\024@\344\223\017@j+\355?\032\254\007@\274\247\276?/\352\201?\003\272\352?\017\025\004@\303\355\305?#\342\275?\256n\305?&\351&@\254\007Y?\200A\360>t\'\000>V\213\223\276\307\025\343\276nK\205\277dE\033>b\t3>.\205\230?\367\026\215?\304I\272>l\254\207\276>L\037\275\204\302\020?[\3430?b\263??\364v\007\276\t\036\335=\377\'$?8\005\025?\0047H?\020\352\033=_\230y>>\357\201?\002\335\270?\000\235\254?5\021 ?\364.\335=\262\367\325\275\021\004\210\277\272\222\336\277h{\227\277\272\271\322\277kaj\277\016\334\256\277\002\316z\277\206\304.\276\315@I\277t\375,\276\242O\347>O\003\211?y\271\272?\020\307#@\307\247!@\3678\371?\227a6?\r\253W?\212\007;\277\347Z\244\277\332$\314\277\r\016\353\277]x7\300\21577\300\335tB\300\013\373U\300\221Da\300:\267.\3008y\266\277\344?_\277\251\300\210\277U]}\277\267\211M\2776\222\371\276<\007\353\275J\300\206\277M\213X\277`\307\350\275V\255\204\276\014\034\340\2766/\005\277\251d\260\277\367R\234\277|n+>0\371\352\274\203\352\026>\031\335Z?\354\t\331>;sx\277Z\242B\276\2467k\277\200]p\277\356{x\277g\376v\277\220hx\277\314\302\t\277\313q[\277a\216\253\277\274\343E\277\'`\022\277\266x=\276\323\335p?\020{L>\036\364H?\304\327%?irH?\304\005\350>\237T\310\276\260\330\341\274W\223\003?2IB?\227%\263?\330U\230?\255\233I?\202\nx>7\365\r?\240PU?,\226\324>\034</>\267O\211\277{\272\250\277\260\022\016=\2344\265\277l\250\217\277\325+\255\277>\204\340\276d[\010?\241|+?z\210%?\336(\255\276h\3454?\204\236N?\273*V?\354\300\201?(\371\235>\340\251$?\356!\265\276\252{\275>p\367\315>&A>?\220?\304=\257\202\327\276\354f=\2766\272~=tn\020?\267ca?,\230\005\276\306\370\t\277\301\\\000\277\370\t\013\277\230\240l\277+N\256\276\013k\267\276t\266K\277\025^h\2774\036\271\277\320\307g\275\366|\232\276r_\254\277\020P>=\307pN\277\304\276\004\276\016\363\364\275\206\235*>%\311\342=D\2368>\350X\264\275\267\315\314>@\030K<\364?S>\244\326\202=\245G\252\275\346g[\277\247\223\227\277\356\272\242\276\263\215\354\276\205\266\032?\ts\006?\022\321\255>z\200\302?U(w?x\243\246>},\342>\002P&>X/\306\275=wJ\277\313\260\035\277\334\333\253\2769\204\026\2776*Q\276u\266\235\276f\260\261\276yk\237>Go\350>9\272\n?T\237G?\2668\224?\016\004\224?\007\316L?X\353\003?\376X\337>\234v\242>\226\237\003?RJ\201?\214\311\253?\\O\303?\331\324\365?\362\334\033@9\007#@H\266\014@\244(\223>\213\252O?D\365\206?p\262*=\350\363+\277\335\2041@=\3448@\016|\267?\360Q\305?\032\023\023?\377\254\234\276\272?[\277\356\234\202\276=\353$\277\3426\205\277Z\031C\277\240\331\357\276H\365\264\276`\327R\275X[w\276/\321\234>p\206h\276\366\242\236>\002\257\345=h\000\202\276 \257\237;\322<\314>d\232\342>\333\t(\277>\231\213\277\226)E\277M^B\276\":F\277\242U\212\276\372\237J\276\364o)?\034.6?\344\335\006?\340n\242\275\276\004\231=\204N,<FZ@\277\000\336\013\275\256z_\275\234\321\261>\342\223%\276Z\024r\276\233#\031?\216\361i?\350:\211=]\373\016\276\333|#>u\301k?\'\006\213><\357r>\334\314L\276\023\347+\277\037\372*\277\010N@?\037F\311?\216\232\305?a\034\377?\017\300\273?H\367\225?\370m+>\320\032\210?\030\237\254?\344\342\251?\235\007\022@\324\225\006@AW\201?\034i\'?\366\364D?f\261V?\300\263!=B%\303\277\177\244\246\277\010\213d=\321\246\007=\247\227,>\232\023;?\2646\274?K\026\227?\310&F@\\\3350@D\371D@nn\007@\212V\237?\004\0248?\310\353\225?b#\266>\261\020\220\276lR\263\277\000\253v<\214\016\223>\304Y\237>\203U\302?\217~.?\240\372\202?\2702\007?\026;e?\33565\277&\026\302\277\262v\367\277\214\016\023\300p\361\267\276\340\331]\277j\213\254\277\222\374\026\300\276\203\020\3002\320\312\276\354;\336\276\013\214\355\276\364y\342>I.\036?-4\231>\020w\361\2753<`>&\227b\275\240R\213\275V\250\031\275K\200\016\277\333\2315\277\342\357O\276\274P\377\275\236\t\217\277Wo\302\277\036p\206\277\034B\325\277\342J\255\277ken\277dP$\276\226\005t\276\366kc\2775\327K\277\312\024\204\277x\232\204\277\240[\314\276\374l\260\276\360\260\237=\240\200\033\275_y4?\320\352\340\274Y\245\014\277\334}:\277\261|\270\277\356(\326\277\233\273\351\277@\200\n=\252\305\242\276\356@\310\275\234@k\276\202?\017\276\253\302%\277C9E\277\244\r\217\276<aG\275\237\306\"\277\250\203I>3\333\351\276\030fV\275\324\262_\276\230\307\374\276d\216!\277PiD=\214\203\226\277(2\357\275\315\260\345\276$mV= \373\356=\200\344\341:\224D\003?|uE?\025R\023?\270\2131\277\351\363\201\276\203\202,\277i\256\364\276\374\371\031\277\024w\211\277r\245:\277d\304\335\277\374\204s\276\216\375,\277\364\237F?l\334\316\276\006\217\003\276\026$\341>\204[\213?\254\203\245>\035\347\344\276\020\013\234>\021K\213\276\356g\207\276\266\311,\277\366\201P\276\010\3667\277]\207-\300\226\003\346\277U\017\025\300\307X\330\277 -v\277D\355<\277f<d\276\222\226P>\217B\363=x\321\364\275\233\270\263\277OL\360\277\241\226\004\300\355\3667\300\250\347<\300zL1\300\227\376\367\277-\272\000\300 \300\001\300\356I\247\277Y\301\225\277\310{\302\277\252~_\2776\216P\277K,\362\276\252Z\357\275\322q\300>\201\006\273>(M\253=\352\324\353\276\005\036\241>\216\270\323?\320i\302?\030\270\321?\350\271\333?\363\2213@(0\364?\027\335\004@\272o~?,\343p>\210|\r>\000\016\000=\'\346K?\224\225\320>\375\325\376>S\020\003?*8@\276\361\234u\277\223\005\035\2778\303\242\276\214\024\365>\312\002\177?\330\263E?0ml?g\0079?.\010x?\313\325n?\210\024F>Pq+?\210\331\215?\321o$@4\346k@\236Z\276?W\"\007@\341\313\374?J\'\264?u\302\320?\220\353]=\364P\250?2X\346?\223O\277?\220!\365?\301w\225\276A\032\205>n\300\036\276\017\376\352\275\230\332/=\035\254\n>\030^\007?\310\217\374>n\232\340\2765aQ\276\244\014\337\276|\257\006\277\000\006\323\276\222\371\202\276\220y\237\275\377\235\314>|\274(\276@\252\362=\230\307*\275A\016\254\276\010h]\277\363$\321\276L.\240\276\223\261\235>\250\207\032?\026y{>q\"??\234\003F?\021\334\002?\210\013\225\275\356gU\274\335\376\370\275,\025\222\275\014C.>\354\245\202\276\006\231\310>\363\362\260?\221\253<?IE\262?\000\324l=\262W\250\277\362A\r\277\026\0147\276\354\306\215\276P\370\271<\275e=\276\013\251\206\276(\212\360=\267\2209?\004\302\026\276j\377f\277\235\360\270\276v\317\t>\271\277v\277s\237\222\277\254L}\277^\374\312\277 \262\322\277Bu\354\277O\332\357\277<\361\344\277\364\315\260\277n\224\375\276\300\2377\277$6\006>\363\347\030\277Sb\264\277\202\002l\277z.\034\277\007\343\030\277\323<q\277\257\355\213\277\2600K>N+`?\327\276z?\"\014\263>\270m\222?\250\377\361\276\370~\216\276*\006E\277\242\324\242\277\240\245t\277\376\261\357\277T\022\016\300\220\315\021\300\224\301\034\300\001WH\277\354G!>\000!\300=\020^\303\276X\257\275>\275\201\200?\002\211\006?\354S\271\277\036\227\032\277\361\001\004\277\376\001\212?\0249\346>d\346\200?\ti\376>\021\256\000?K\016\366>?o\366>Er\347>3\213\'?\300\211\254\274\006\304{\275\301\214\302=\376\262V?\316\244\255\276\252\017\032\277\260\204p\277\256Rc\277\0207\253\276\211@\n\277h\2079\277\354-\277\276\226>\224\276PZ\'\277H\tc\275b\262@\277S\351^\27706\367\275M\250^\276X(\310\276\337\031\222>pqJ\276!\227\033?\304]\302?\340s\022>*\034J>\255M\036?~\212\324=[\337\023?\016\270i>\220\305\275\276\322\020\037\277\2553\322\276\344\270\336=\224\366\010\277:t\013?\r\007p?\026\006\336?\342-\026?#:\035\277\222<\241>R\030\204>\020\275\254>\002\2539?\027\205\221?\332\024]?\306\312\027?\212\351\324>P\021\216?\302\365\220?\000\027\226\273l\243L?\356\356\177?|`\230\276\0165W\276t\346\254\277\216\001$\277b\320\020\276Q\222G\2776Ey\277\300\376?\277\322\364p\277\032\210\253\277\374\352a\277d\307\023\277XY\017\276\311\242\200>o\023!?_\370\301?|7\374?\373G\004@\026\251\210?\\\232\266?k?\220?\224\230\220?u\363\273?$\035\364?c\377\225?j;P?2Un?\246\245\351>\005\210L?T\244\341>Lu\333>\302\304\241>\234v\267>\336\233\034\277\005Z\336\277$\362\034\300\372\230\371\277P#\324\277\224\241\344\277\343\307\257\277yA\277\277\242\230\270\277\253~\235\277\006\202\265\277\305^\007\277j\375b\276N\303\206\276a\365\017>k<v>\254u^\277\010\333T\276J\345\371\276\362\007c\277\"\006V\277Y\267\003\277\334\032\212\277\246\355\241\277k7\013\277K\257\037\276G;j\275\300\273\316>\245\004\007\277n\270G\2763@\255>\346$\212?\265\350O?\225\252\352>8z\215\2756Pv\277\243!\266\276\257\237\234\276o\225\376\276\345x\367>\204\204{?\320\021J\276\266\035\030\277\033\276\342\2770\255\'\300\022\003\211\277\366\260\261\277q\244\203\277-\2778\277-\223d\277<q{\277X9-\277^\025E\277`\341\206\277\300m\343>i\367\263\276\370\246\t\277x\373/\275N\222\r\277^\256\001\277\002k\271\276\270\325z\277yI@\277\016\332J\276\2305\373\276\217\216\326\276\021,\r>\315\332j=04\335>\216S\365\276h\244\030\275\326\016L\276\377}\016\276\246\034\'\2778o\024\276\363\232\256>\007sX?\347\216<?\210\267G?l\007\370?\334\255\221?\027\027\344?\016&\375?J\035\352?\315Z\320?f\r\255>\016\002\035>\356\315\020\277,C.?\344\242c>>\370\306>\341\027\\>Z0\245\275r(L?Rwy>\225D\314>\202{\256>r{d\277\n~\253\277\307X\233\277\220\376>\275\231e\213\276(,W?\267\356\346>\345\\\234>\260\177\365=\007\341\316\276%M$\276A\2141\276\346d\222>\255\324\356\276\217\337:\277\252\036\273\277.o\264\277~\024M\277\261\342\371\276L\247I?\036\274\243?Xa\304?>E\201?#\260\030?\376\t1?\027\247\313>\\$\234?\372\030\331?v\"\177? p\314=bC\233\277\356\"}\277\003\326=?\346i_?m\321\240?\034\212G>\020s\235\276\317h\371>\310j.\275\250\363\005\273f\323)\277\252\037\210\277\350\306^\277\373:v\277\300`d\277\253\n\\\277f\242K\277\341\"N\277q#\251\276\340\006\312<l\223#?6 H?\331\3211\277&\202\220\277\322\342\213\277rR\023\277\252\372T\277\374\314\244\277\014n\236\277\322C\241\277\376\t\304\276\342\301\305>t\306\200\2753\371\350\275\245\312\210\2768\276\275\276\226\362\377\275\351\036~\277\342-\254\276\034:\343>\030\260m?0:\263<\'X\264>P\275\031\277\313I\357\2761\300\372\276\026uV\276\014\220\025>.\\n?\200e\206>\363\023\243?m\246\010@\223\"\240?\324\302%>`\3178<%\324e\275\303IV\277P\020#\277\320A\247\277\021\326\250\276\356\312\023\277<^\376\276\001u\317>\325\213s>Z\370u\276\274\353c>\030%1?\352\361x?J\021\211?\244\336\010?@)\311>\241\220\305?l\233\017@\322\263\030@\353v\374?\312`\007@\010D<?\036\243\026\276!\276\221>\366)\266=\356\211#\277\317\367\232\276\356\031/?K\242\027?\007\034\212?8\221\332\275\377\000\317>\330\016\360>\020\\\037\276\220w\014?\017m\034? k\200?k\216q?la\251? >\304?-2\327?\267z\253?B*f?\014\245\326?\320\203\315>\323\375\326>g]X\276\002!\003?.8\237?H\"8\2760\030O?l\201\001\277\200\223\221\277\3561\360\276\236\303\321\276\306\260.?]\r\272?^\007\253?n\236^?\\O\257\275\2257\336>\322\305\033?\317\233C?\360X\371>\2307\203?\232\325\003?Y_\344>\337\304\256?H\346\234?\205r\245?\266{\253?/b\264?\340\220\036?(1k>@\261\313;\371\366\354>cr\323\276Iy\223>\341F\024?yA\000\277\244\211C\277\254:4\276\025U\004\277\363\350\252?\210\333_?\354}\\?2\014N?\377\346\250>\360\356\217?\221\235??\231\265\006?\260\340w?\0355\244?\014r\343?\266\356\034@\365,\310?\355\013T?\220\243\310?c\273 ?\2731\212?>3p?x&\201>\226\222c\277\352\001\254>\364)\207?ii\336?zL\360?\336\371\215\277\306\344\307\277\201\021\303\277\021p\003\300\262\262\377\2779z\217\277\006\010Q\277\330\265\344\276\274\215\363\276%Z\207?\321\240\300?\223%\234?d\301\t?\220.\033\276\222\274\321>\220\373\000?X\330\003\276\355\330\360\275\273f\n\277\005\243\270\276\330E\333<S\240\261\275\340\2210\276\254\033l?\236\256\004\277\224C\314\275\230\310\320\276\202\022x\276\265\213\275\277\312\207\013\300\"6\302\277\345\256\342\276:\260\340>\033\r\227>\220\034\212\276y\232Y\276\200\200\273<%\300H\277\234\030;\277\312>\214\277\310\'1\277j\371\351\277\2574\364\277k\377\333\277\340\330\n\300\240\351\036\277\254\200S\276\030\021\231\277\244\304\262\276,\017E?1\232\236?&\223\250?\177\2130?`8\201?\0264\007@v\'\006@\370\202\256?\300(+>\242\315\021>\207Hj=\022\0141?\350Z\244=\232pC>\256\234\257\276\300I\210\276p\250\271>\353\023Z?\035\227\365>)\352\257>\212\023\374=t\241{?B\n6?x\234T\277\253\250\261\276\000\034\277\271}\235k?g\200\276?+\260\257?&?\226?^\322\374>-\r\031?\2355E?|\362\237?W\222\210?\200\033\r@\017\346\252?x\322\275?X\370R?\000\366v<\210\026\203\276\025(J\276.\211\247=\'>\360\2760\240\344>\310\031I\276\260\215\205\277\311\340\253\277\020Oy>\310\362%\277\302\220^\276O\260\351\275\017\233\253>\350\020v>L\027\241>\311\"\355>\037\374\377\276\013\245\327\277\347\250\272\277\"n\216\277\303\237b\277 \207\"\277\362i\027\2761\203\315\275\312\021\226?\3418`?\234\267\363\276v\340C\277\261\320\021\277tz\362>\267\370\313>\203C\215\277y\204\002\277\025\003\237>\3521\024?\203\035.\277\275\260C\277\\\n\216>\236\232\325>\231?\236?&~\217?\260\221Z=\220\212f\274\274\033g\277`34\277\220d`\275\351\370\000\2756\327\032\277\004\024K>*\362\246>\210\371\364>6\352T?0`\010?\200\036}?\345q`?>\307%?6\017\372=\346\267=\276\336:\020\277b\217\333\276] O\277L\232\351\276\330f\272\274\334\223{\276D5\201\277\264\272\177\276\325\2679\277\022\315\273>\374 \226\275\347}f\277\"\354/\277\300\377!\274\252\327\002\2763\247\000\2763O\177?\203\255\031?Mx\002?\200W>\273\332\260\205\276\345\372\315?\020\"\241?\334\233\234>\031\001\t?\2259\026?dt\256?m\001>?\240\\\004\2765V\000\277\250\203+>\312u7\276\310\370\020>\260\231\344;\300\221\301>\357\203\230?\034$\306>\374\001u?\342\203\323?\036k\016?\326z3?\324\244\031\277\246\321\213\277\334\326\267\276\372d\216>\337#a\276\276C[\276\334\263_\277\201\020.\277\351+\016\277p\246\220\274\376\213\014\277S\276\266\276\224(\001\277\375W\365\276\300(\026\276d>D>\220\035(\277Y@\323\276\203T\226\276\322d\274\276\215e\331\276V\367\236\277\265\270\334\277G>[\277\240\267)\2744bD\277MM\204\276F\353\334=\2044\345\277\247\273\034\300Xq\032\300\030\265\'\300\332\n\010\300\210\243\222\2774\035\312\277:I\257\277\300o\330\277\266\n\272\277&\276\231\277\020\341b\277j\3065\276\311\036\366=\303\323Y\276\203\225\317>&_\324\276\337i\271>\340\367Y?\310\342L?\006\353\013>\371\304\006?r\rQ?2\014r?\2253=>\220\354z?\262\307\235?\2109c?4j\335>\236\013j\277!\243\311\276\323\024.\277\210q\020>ma\244>\210\262\241>\206\264J?\010\337k?(Yp?\216Z\377>w.\355\276\240\360\303\277\315[\021\300+\022\344\277\352e\373\277\036\222?\277vs8\276\255{\003\277\364\202r\277\330\337_>\254\214\000\277\360`o=\316\0334?p\242\t=\274\225x\277\030\356\\\276\004\236\255\276\340.O\275j\r5>\2309\277\276N\371\260\275}\314>\277\221\017\215\276-\343q\276qw\306\276\312h\r?\370.\023>V\237\014?:/\311\276\235\361\036\277\244}\205\276\237\365r\276\016\213B\275\264\032=\277\32745\277\334Z\355\276L\307>\277\0168D\277\360v\333\276W\213\000\277n&\276\276\336b\024\2760z5?\360\026\262\276\230L\022\277 \206\340<\302\301.?\014jU>\277d\236\276\267\346\242\277\256Kb\277\211Z\344\276\031\213\205?\217\332\240?Y-\243?n\344\335?\356\206\245?9 4>\200\247\006>\017<\033\277#\'\301\2772\327\274\277\377\307\253\277\360v\342\277\243Z\006\300V\010\'\300\210N`\300\340\255\001\300sr\022\300N@\306\277\'\024\251\277\310\223\246\276\336[\335=t\332\223<\323\365p\277\215h4\277b\037]\277k\317\366\276-#\310>\276S\317>\230\361\034\277\3213\000\277\357\205\030\277\214\274\202\276\224\277\247\2758\032Z?\223b\223?\224\t\014@\363\007\025?\251\326\'?\227KR?\314{\"?\273K~?\300\371\205?\270!R\276\262\367\315\277\216\201\256\277\250<z\277\265\215@\277\362\252W\277pP\205\277G\353\035\277\226JV\277\353\214\212\277x\253\242\275.+/;\273\304Q=\r\346;\276\317\343g\277\225xf\277\350\021\233\275\350\312\016?\204:\233\276\350\005$=VD\005>\200\223\306=4P\252>Dy\243? \336\200\2752G5?\220x\272?p\223\265>@\003\222?\357\013\236?\021\266\333?\225\363\314? \030w\276X\023\222\275\273\363\002?\260o\351\277!\272\035\300 2\300\277w{\251\277\026J:\277\251\254\261\276Z_d\277\314N\n\276:\227\r\277jQ\201\277\016\t\374>\276h\232?}K[?}p\003?\3740D>\020\266\027\277=|/\277\2031\217\277|\200}\276\236\034\234\276\274C\035\277\317\267\025\277\226=c\277\252R\226\277}v!>\266\302\020\277\345>\256\277\257\356\305\277\317\263\002\300\316\361\"\3008zM\300l\210C\300\020\246K\300O63\300\316\366\347\277\016\214\t\300\273D\255\277f\322\320\277\312\251w\277\204\301\001\277\340\217\255\276~s\221\276*<l\277\222\215\276\277D\215X\277x\277Y\276X\312\226\276\200Yx>\357\031\257?\274\342\260?`\250\263?\004\365\367?\035\337\352?K\2368?\030\"\010>\321\007\223>\320\"\243?+\267\253?W\010\263?\223\246M?\002\357\311>\325W\004\276\000\244\340=X\201\262<\2235\177>=\347\345>\332\377\351\275n\327\303\27611\352\276n\301\016>;c\'?\024\332\230\275S\212\224\275\254\177u\276\210\337\031?\304\267\266\2764\013\252\277\243\365\270\276\200\234H\275\377\017r\276\002\253o>\002\224\315\276\340\010a\277\253\025\265\276&W\205\277V\242J\277\310)\243\2770j\236>\231P\214\277\346\216\221\277L\325\201\277p\336i=\020\222\215\274f\332r\276O\377\245?Xs\177>;~\274>\004#\007><\276\212\276(\314\242>9-\004\277U2\260\277\265a\265\277\n\".\300\332\344\\\300\246@\234\277\377f#\277l=\211\277\340\354\004>\340\014J>\344\024\337\276\252\265L\277\224>\270\277G~\202\277\027\201\364\276\324B\245\277x>\030>\216_\003?\336\345c?\343\212\247?\265\345\243\276@\305a\275\362\204\002?\276\030O?D&\034?|Q(?\240\225\236\274w5\023\277\207h\204\276\317\237X\277\314\027\237\277\004y\024\300$=\370\277O\037\225\277B\"\363\277zl\224\277\343\024m\277\257vS\277\346w\200\276t\230\031\276>+\264=\252)Y>\212\210/?B\026\321\276\037\030E\277\305\320\325\276Ba\014\276\236\017C\275\022\\D\276\230\317\302\274\201\265\211\276\262QC\277\306\356\013\276.\377\247\276\344\271\254\277VN\343\277)\324h\277\207\026\304\277\311;\013\300\304\n\361\277\346\231\266\277b\035\366\277\320\255\264\2770>\017\277\355Zr\277\"o\362\277\346v\242\277*\216\304\277\326\312\013\300\336\016\020\300t\034\215\277\300n\335=v~\263>\214\274u\276`\334]\276\n\346\264\276^t\r\277n\334\002\2770\205\006\300\217\322\027\300\262OB\300\370\017n\3005K\020\300\216\374\014\300\352\227\311\277\350\001\276\277\343\227\314\277\266\324\213\276\347\302\232\276\177\263\242>\353l\206>\340\300\201?0+t?\210\360\032\276c\014c?\306\350\230>b\317\030?\222\346\177>4\020i=\034S\032\2773\337\236\276\331c\254\276&\365\007\277\232\310\240\276\356\031\262\276A\264\321\276\033\350J\277\000\353\"=\332\371\r\277~.\233\277\316F\305\277`\262Y=N\036\264\276\305\\^\276\340|k\276\366\206\260\277)9\330\274\304q\014\276\275\014\352\276\034\266\202\275e\317|?\340\265\333\274i9\316=\200-\307=\344@\213\274,\016\327>\3704\022?9.\006?\264\010s>b!\302\276\352\340J?\035fr?\340\351\243\275!\363\013\275Q\302\362\276\\\0373\277\212\203\203\276\333\024\001\276\000\264z>\200\326a\276u\264\304?|\205\026@\014\333 @C1@@\367\321%@T^\342?&!\315?_\272\235?#K\235?\204A\n?\r\304&?\261H(\277 \022\200=\213\310<?\256\313C>U\240\332\276\377\005\204\277\370\014\r\277\"n\340>\210\223\013\276\031\262\364=V\212g>\347II?\030\247$?\271-\316?\266$\221?l\203\020?\200{\343=\234\364\032\277T\222\266\276=\345\361>\\\3137?\232\252&?\200!\312\273\353\232\253>\347r\004?8T\005\276\375Ia\275\307\361\256<\364k\026\277\001m\223\277\001\336w\277w#\227\277\t\305n\277g\373(\277\020q\273\277\265z\227\277\202\235\336\277\365\237\247?\006G\351>\204\024\n=\027\224,\277I;U\277D,\025\277^\177A\276\361O\004?\260\007c?\314Z%?\264\235\300>\006-\017?\224\023\333>[\305}>\000\242@<\317\302\236>\334\321\236?\375i\227?\277j\223?\342\205\366>\020-;?\000\322\342:J\343\204?\267\001:?*G\263?\001[Z?XVI?\253V\177?\356\243\026? \361f>\001E\340>\256\274)?X1\246\275[\272\\\277^\210\253\277Y\202\244\277\016\303\332\277\220vW\277>%\235\277\367\200\244\277\322\376/\277\0309\202\277\334Hk\277CM\226\277\217\307\242\276N\314\340\275\022\327\365<\220\315?\275\234,\037?>\344Y?\333%\212>,t\216?:}\001?\264\031.?\"\303\370>:\034\024>\334\236\316\276Y\021}\276h\"v\276m9K\276\"\n\033\277\252O\210\277\336t{\276\177\344\315\275m\336\017\276\235\335\247\277\310\236\256=\217:/?\314\032\215?\366{\260?\010\331|\276\273\315\003\276\330Q\243?\030\304\217?s\334\246?1\001\210?y\234\200?\336\tg?\314\251\362>4t\211\276n\355\220\277\371\273\324\277w\335\306\277\316t \277\313\255\241\276\230S\237\276\314\347\314=\356B\226\275Z\331h\277P\022\247\277\243F\336\277\210\032\231\277\374\2206\277\374\252\271\276\270\2655\277\270W\312\277\274\253\210>\221\3607>A\212H>\300\232\314\274\230o_<\370s0\277c\207\t?4 \002?\343\362s?\251\250\207?\263K\023?o\310\n?(\306\362>4\224\224\275\177P\342>\362\245>\277\374\225*\276{\035\017\275*\331\252>\321\306[\276@j]?1\322\003?^z\354=\224\353\347=aP\000?|\275\247\276\376\027\272>\246\340\232>\333\337\030?\212E\242>\222\257\257\276\224\010=>\034\274\230>0nS\2764\201\274\276\277i\324\276&\327\355\276>*\t\277\016\252\331\277\201(\314\277v`\215\277\254U\244\277\313~\335\277\350\251\325\276:84\277\226bm?\022u\004>\007\024\213>zs\346?\335\246 @a\354\354?4\216\347?9;\353?\003\260\367?\365\240\004@\340a\265?w`\222?\274\252\032?\325\025\216?\032J2>\003y\377\275\231\376\243>s\302\001\277\340L8<\013\350\363\276\233\227\201?\020\303\307>x\326\234<(\234X\275\214\225\\>\223*_?\326@\212?\270#\274=\322\325\002>\310\313L\276\372gD\2765\355 \276\2620\300\277\346r\263\277\356\224\225\277\270k)\277\252\325b\277\374\337\227\276\346\333M\277>\332\026\277z\264\235\276=%\277\276\000\271\341\276\000\365\272\277\332\334\007\300Q\372\"\300\364[\350\277\007\004\277\277q\305\364\276Bd\371>P\277Y\275U\034\017\277\373\037\375\276\340pq<\253\303\006>\325\336h>r\\\340=\032\020X>s\2202?\272\260\203?B\206\203?3\337\005@\300e\020\275w\235D\276\330\254\363\275\027*\334>\333\273X?\224\270a?\020\351\177>\2371{>\343pz?\276s\027?\264\330\254?/\227\304>,\266\024\276\2731\340\277\007\276\002\277\234*\207\277\336\345\331\277^\271\226\277\000\rb<U\204\030\277\266\254-\276t_\272\276\372\373m\277\2028f\277\tf\230\277\224\323\327\277\010\312\257\277\220\261d\277\225{\230\277V\324\220\277\0006\332\274\265\247$\277\374N\244>pS\336<\236R\363>\025\250\210?=\323\340?\0204o?6\344\211>\224L@?Ar\265>\204\376\026?\244rd\276w\005\001\277\337\317\215\27705\242\277`\217v\275?h\026=\335\020\300>\304ts>`!`\275\\>\355=T\313\252>\000e\206?Ph\322?\264>\301?\264c\363>\201TP>t\277\332=z\225\177>\232\213<\2776\222i\275\210\267\022>\300\220\244>\005SX?e\367E?\257\270\226?b\017]?>\032\263?[I\251>\335\335\313>D\2250\276\210\334\210\277\023\035\210\277<\356\251\277\203q\031\277w\217\221\276\376k+?\226{]?\031a\227>S\023\342\276\n\004\216=_c\325\275N\022s\276r\360\000\277\266\005\026?\313\010??\211\217!?\0229i?\356\257b?hS\251?U\374\033?kC\003\277@\347\031<\362{\207\276\354\370n\276\251}D\276\224\032\351\276\303m\330?\370\245+@\030\373\034@\016\217\001@`?\311?\244\255\t@\033\013\352?\225\221\305?p\370\332=A\346\345\275\026\335\210>\004\310\230\276x\213\207>\313\363\224?\220#a?\220&\234>\2006\226=\362\263#>1\234\033>\0022\262?g\376\276?\370y\221?\250\253\240=\2044N?f\026\327>3X-?\2704\270\275$at\2765\237q?9|3\277i\307\000\277@*\364\273\200\236\256\276p\254_>ji&\277\303\303\316\277\023o\301\277\030\374\300\277>\347\374\277j3\367\277\377\342\350\277;\033\237\277\2108\"\277\200\234\201\273\323\016$\277W\340\214\277\024\211R\277e\312\301\277\213\257\021\300\241\260\217\277|B\005\277\000\3054\276:\272Y\277\251\342\233>D}\004\277\232\025\220>\303\271\213\277\322jX\277(\357\356\275w\357\021?\352\r\233>n?\316>\250\272Z?X\263\240?\003-\226>\347,\215?h<\314>\277\275\374>\234\020i\276\205\025\203>\272\t\220?\262\256\246?4%\231\2765\023@>\227)\t?X?\227?\325B\313?\020\036\305?w\022\231?\264j\251?\237\003h?8\r\254=\366\2542>\251\312\370?\356C\347?\010-h?\343\213#?\306\001\374\276h\364\010\277\320Bp=\346_\270\274E\330\340\276\222\3510\277\020\200N\277\266 Y\277H\275\211\277\031,s\277\305\313S\277<\356\351\277\222\375u\277\"\266\211\277h>\302\277\256\237.\277\304\237&\276\357\3512\277>}\306\276F\355@\276\373X\212?\354\024\002?\3755\304>Z\021\021?`yQ>\312\331v\276L\017\013=\275cC\275%\357S>\337\231\025>X\026t\277\224\215\306\277\367\320\320\276s\375K\277\232\216\251\276\345\362\230>\313\275J\276\031pz\277\274Q\340\277\233\341\240\277\006\010\376\277\240\337\363\277\r{e\277+\267`\277\265\373\021?0\031(?\322\0258?\332F\340?^K\342?\335\016\260?\311\253\251?z\251\024?\304K\230?\271\034\246?d\017\325>\037c\014?\356\217\320>B8\200\276\354\311\377\275\3453\205\277\330\035\207=\272\016\311<\007\261\n\277(\361\022?*\216\035>\372c\206\276p\372\372>N\250\020\276\214 \370>9\246\'\277\374\316%>\211\032F?\'\355\243>r\256p?\376\321\313?h\203Y?\034o\337?^(\236?d~\017\276\244\226\367>\350\227\003=\3563\023?\000\003[\275\3157\372\274I\365\\?b\206R?g\273\233?\333\271\245?\206\370]?C\350\335>=\342\246>\347\356\257\276Q\330\006?\337\005\312>\003/1>5u)\2773,\025\277T\2212>\000*\250?d\t\214?>/\314?x\261\220?\362\232\032?,\361\253>\220\016\027?\254p\211=\254\226-?\207\343\216?p\n\214>0l6=\334cD\277\034j#\277\264\251\307>Gf\240\276\341\020p\276\253\335B?\375L\303?\350\211\325?=\216X?c\224\203?\326\342\000?\205+\241>\027\016\214?\234\237\035?\250?\221\276\360\242v\274\233\361\005\277\332\346\250\277y\275Z\277\206\270\245\276m`\220\27602\274=\213\262!=\270C\365\274\252\324z?\000\252\367\272`\n{\277yw\217\277(6\202\277F\351\274\276U\230\214?9\006|?\336V0?\364`\370=\222\303?>^\202\357>0[\341<\311\305\310<}\367Q>\240+\363>(~G\275T\t\032?N\334\234\276\321\305\021\277\263\215z\277\302x\233\277wM4\277P\325)=\351\345\377=\244y\362>\3647\211>r\201\035?`\304\'?\311\tj?[+\265\276\200$\265=\370\003\264\276p\2742=\275C\252\275\0372\206>\254\3257\277ZV\033>\3024\230>\220\255\206>\n\305I?\310K\237=F\0052?\265\334*?\202\332x?\263H\360?\302\343&@\224^\006@.\270\245?t\'\201?\332%o?n\255\027?\362\270\016?x\021\305\275\303Q\\?\317\236\033?\3746\204?&\030\364?\3609\272?F_\260?\016\326\256?\323\250\275?AQ\307?\210\233\022@\334\377\350?\234A\035@\266\375\361?Y\336\254?L\243\204?b!\364>\324e\242>|\344T>\250\244\341>\274\230`\276NPV\276\177\222\001\277\334%\177?fz\260>V\\\217\276\326\204\343\276f\007>\277)\201\234\276\233v$\277l\322\371\276x\334<>\303XY?\200\233\261\275\205\275\273>X\262\216=\277\247\266>\364\022\205\275\375\004\205?\227\022\022\277\250\2261>\025\274\024?\205\312\213?\231eR?\006\rD?\027\260\017?\"a\224\276\205\374\"\277\236\217\'\276+he\277lo\n\276U\200\211\277\364+\202\277|k\337\2770\204\312\277\010]\021\300`7\n\300\261S\t\300\2425\250\277\2106\315\276\246\214\021?\266\272\306>\036\367\256>^\313@?o4+?,\254\016?C\272<\277\266\346\215>\014KH>J\325\263=\272.\326\276\016\007\352>J\342\374>@\353\222?\244\363\257?\316\317\223?^\362+?L\212\264?\346\312\242?U\345\032@\264\010\017@\311b\365?\245Z$@\000\353\220\274i\033\005\276\255\2273\276l\232\t\277\376\005^\276+\022\201\277\234\003\311\276\364\324\300\277,>\215\277?s\217\277f\300v\277\326@\241\277\005\'p\277\227Nx\277-\317\023@\033T\257?\020\313\271?\241\263\254?S*\273?o\020\005@_\263\304?\351\036\206?,q\226?i/\201?\037\361v?\340\231\202\275\201\211\016\277\020|\271\276L\021\026\277\026\023\307\277/v\375\277`lQ\2750w\274\275x\366)?\022O\224?\2424\232?\241\365\222?[\355\014?\311|\324?\034U%@-\010!@\376\000\305>8\177<\275\204\003d\277\300\246\276\276\237\r\210\277\257EN\277\236\316|\277\214\272\206\277\312\224\274\277\r\377\257\277\242\331\220\276\031\337\310\276\"w\030?PZ/\275\321\262\201\275\201\266\331>\254\373\372\275\014R\003\277\r\036H\277\\\234n>\2569\300=\241Q\371\276\001\330_\276\256\257\357\276\375\334k\277\356k\361\276\ne\371\275\314m&\276n\267b?\340\263\300<\242cF?\374\016\034?\266\322h?Z&\363>\227\222l? q\263>\302\016\025?\212(\252=\3407\211\275\364\270\213>\270\202@?oss?\006\353\340?\3547\316>\200C\247\274\301\350)?\002\030\271?~\321\356?\302\037\271?\206_\344?\335\003\317?\363C\304?\034\0319?\331\230\007?\340\221g?8\3071?C\275\005>\371\311\034? \325\316<\325z\'\275NO\024?\036w\005?\0374\327?\3521\331?\372!\314?\236\241(@\267\3358@\222z1@`\0139@\000\254Q?\315VM?.\312e?\034HG\276X\204\235>\341\364\277>.*\200?\264/\013>\031\237\200>Y\305\211?vRf?\207d\255?\261i2?\000\223\004\275P\356\035?N\321O\276\341y\010\277\240\310\246\274P;\006?:\0303>p\303\200?\254SK?g\300\271>\324m^\276w\021\311>\021\304[?\262\255\027?\332\366\215?\327\266\203>\215\374L>\361\344\024?\352\rz>\250[\230?\204F\251?\003\353\264?\020p\005@\312\356x?\246\260\007?\235\261\260?\267\263\235?7~ ?)D\205\276\366\340\321\276\350>\312\276-\260\226\276\204\346\020\277b\336\304?\354\337\010>i\025\221\277*\272\255\277\260Xj\276\275\033K\277\335\211m\277\227\260\261\277R\035P\277\004\340\222\277\257\211\246\277H\240\247\277\336\355m\277qg\311\276\342\rZ>\3031\241>\031\341\217\276\214\030_\277r\307>\277QM4?\360\027.>\350M\260>8\324\330\276\321\320\263\276\242\306\343\275\345\245\005\277\325\212,\275\325\267\202?\351\037\321?\277\020\007@`E\316?\264v\263?\223\345\245?U\303 ?\257\273\226?\321\201\230>\211\341r>\2648\347\275|\246i\277zN\256\276\354\274\237\276\232\211!>B\325d>\230\255\031?\034(\275\276\034\227\314\275\030\303\274>\232\030\363>\314\373\275\2757\005\333=\303\257\224?\036\313X?\317\262\227>\365\256\350?\332\037\364?\\B\271?\272]\243?\340`\r=\211\005\377\276\014\035\314=k\2411\276\332\305\303\276\340\340\341\276\243\300\220\276\022u\t\277\r\363\212\277\237\224\203\277\004\020\037\277\276\221\244\277{!\016\277\000V>\277(b\241\275\014o\036=\326\237\254>dr\327\276\262\267\026\277@\305r\277k+\005\277\376\356x\277X\225\364\276l\016%\2775\363\204\277|\366\033\300#\352\t\300\320jL\300`D)\300\026c\211\277\025\032\331\277\232:0\277\306N\020\277\216\004\247>vQ\370\276\220\320R\277H\307\203\277\250w\213\277\217\306\013\300\321q\374\277AJ\000\300\227\252\216\277\036l\032\300\252I!\300\351F\256\277\235<\305\277\025\271\335\277\324\216\000\300\240\010\001\300=w\347\277\203y\242\277\351\342\300\277\275m\220\277v\333\220\276\217\303\007>p\021\360>\354\226\026?.1\'>\376\007\027?\377\264R?\215\252\370>\000\275\224?\204f\235?\026ha?\254E\017?\020e\232\277\000o\355\276\250\031\245?\360*E?\\6\354>\3647\213?e%\325?\026E\306>\2524\016>\326\254\'\2766\357V\277\261@\234\277\207\260O\277\230\001:\276\002p\020\277\0349s\277n\376{\277\370r\n\277\314F\364\276b\357Z\277\324O\234\277\324\371\212\277\177yx\277f\027\203\276\365\3266?\006\237\261>\310[\220\276K\3368\277\330\254\224\277\223\353\213\277CW\231\277\006N\264\277\277\3504\277\332\345\243\277z\021\202\277\216\210}\277\030\026d\276sm2\277t\014j\277\330\367-\277LnC?\234\245\300?w\303\301?\307\273=?e=\212?\000\245\254?\022\204\207?\352\265\217>w\240\224\277\215\n\234\277\\\023\274\2770\0075\276\312\233\010\277>\231\024\277\240x$>\245Z9\276\031\373\264\275$\352z\274\330-0\277\312D\346\276?H\333\277\261\022\303\277\376(\360\276k\t\320\276\006QL\2771\2029\277@\302\"\274\252!f>\030\036\010?/\253\332>\n\322\365>AKP>\260N\322?\234\364\250?\376\244\314?\333sD?\250\337P>\007\344\347?J\263\245?u\374z?\314\313\206?\003\312\206>\240\342\222=\276\\\236\275\363?\213\277*\237\r\277\251\0054\277\226\032q\277\000\333X?\272ld?\014\317)?\004\236\345>\034\244!>6$\304=\240,S=\222@\005\276\324\303G?\277[\303?Y\211\025?\200\033h\273\000S\303\275\t\024G\277\234%\034\276\370\307\377\275f\3624>\350\232D?\247\345*?\260\203\221?\274\375\231?\201\035Q?x,\010>\322\275\201>\246\303\212?{\014\254?\177\371\232?;\335B?.\231\261?Y`\216?\226\315\354?\343\353a?\245L\355>\234n\321=$W6\277\203\301\325>\220 n<H\034\374>\007\224`>\312\"\336>\032mV?\274 Z?\373\201\317>\200^;=w\345\347\276\350\2425\275Y\350\367>\326^\234?\242&\340\276\014\317t\277\342-\254\277-\316~\277\312kF\277\004\334=\2774\345\025\277@\341\356\276q5<\277\320\372\032\277@0\233=h\206\265\276\306\026\007\277\356\014r\277n\007^\277\203\036\r\277\221\275\t?\031!6?x\343\314=(\232R?Y\262\366>7W\232\276\356\247J?\302\256\312\276\200fI<+\204\314=\035\332\273\276[Sk\277\364\351\013\277\270|1\277\216|.?t\206j?^\365.?\354\330\262?\323\302\031?D\260 ?2\221\211?L\302\326?\350\220s?\240\323\177\275\376\301\324>\264l\332=jqI>\000\203\376>jCx>2\312+?\034_\010?\334\250\242>Tg\277\276QL\264>{\314m>\225_1?\036\'\246?\200*\213\274\023\307\273>\260\225\255<\252\306J\300\257\232[\277\275\3714\277a\366\216\277\301O\370\277\260\257L\300\220\234F\300pw%\300X\254\274\277\251\216\237\277\232\360\314\277\320\375\334\277`\320\230\2778\243\207\277l.\260\277\300\200\005\277A;|\277d\270\371\277=\347\236\277 \222\n\300\324\375\213\277\006\214\216\277\212\\J\277\211\0233\277l\375\023\277\240\343v=_\211\007>\270\251\256\276$\177\206\277\323\230W\277\020\277\255\275\031VP\276N#\007?\316\207\023?\240\031\301<\3160\330=%\2065?p\257,\2752\255\010?}p\244?XE\226?\022|\177?\321O\344>r\277\241>\360\340\350\274gP\023\276\240\177\201>]\362]>\225\307\365\276x\225N=\276\027\220\276\257|a\277\216\334c\277\306\365\211\277\222\217\245\277\030\\l\277Pq\007\276\3245\350>\220F\303\276\242\031A\277\262o\020\277<\303\274\276@7\031\277/^<\277|c$\276\253\246>?\344\342Y\276\357\232\220>\350M(>\322\251\201\276\316\025\021\277\230\241\203\2755,\226\2775\024N\277H\212O\277njO\277\212\232+\277\350=G>\312xl?\032\004\231?\323\276\237?\304\235\254?\232n\220?>\246\343?\027\017\354>\300\032\341;7:\331>\346\304\003?\324m\340>\370\327u\276\021\264\034\277\326e\037\277\252\ra\277 \237l\277\005\332\276\277\264\241}\277f\213Q?\215\273\364>|\361\225=4.t>t\005&?E\214\010>$\342\275>\204\246\327>\256\344\256>\241\345\345>\216\276z?h\236r?\037\002\222>\306\312\260?J,I?\260\375\325?H\211\341?\030\223\213?Y%\371?T\314\021@\250h\007@\366\3300@\271\233\367?r\242S\277\341\nq\277N\256\270>D\260%?v\356\221?\260\230\\?\n\033\024>\204\022\025\275F~7\276\310\335\201\276\220\371O=\224^\324><Z\351?\223\245\006@\016\0057@kn(@\357]\276?\201\370\373?\223l|?\0107\236?\032*\364>\332;6\276\224W\031\277p\306?\277\220/h=t\322\233?\231\334\256?\007R\016@\024\006\255?\010Z,?\327\017\020?t\035\203?H\206v?\360\255j\275\004h\271>\000)\211?\224M\274?\246\344\223?S_\356?\241\257\327?\020C\372>Z\037}\276\030\300C\277\000e\026?\270\350\345\275*\260\023\275<;\231\277\216\340\330\277t\273\010\300\220\207\257?i\240\276?\226\226\340?Q\'\035?\234\0165?R\230\222?\240n\241?\334\357\335>\336v\260>C\252\201?\252.s?\344\014\004>\236\213:\276rn0\275b@>?\326\211Z\276D\330\330>\300a%\275\324\021_\276bx+\276p\345n\276\314\307\277\276\317\360\247\277}\001\241\2772\225Y?h\343\003\276\367cx\277\030\277\007\277\220\321\036\276\0035M\276t\323N\277b/\216\277\262\245)\277\026\3077\276\244\262/\276\315c\247>\326\247F\276\021\350\352\276@\360m\2744\n\217>yJ,\276\347\233{\277\354\225o\277\216\240\r\277\254\214\261>A\250\"?\034\333\207>\302\361\307?t@\217\277\\N\375\277\247#\001\300\302\367\354\277b\323]\277\264,\227\277\036\224\317\276X\327\034\276\010\362\313=\204\027\030>\347\366g\276f\203\003>\203\022\227\276\3646\331\276\224\326\362\276\267\325f\277O\266\307\277v4\324\277\'2\221\277\007\203}\277\340\031R\276P\000\210\277\006=\234\2770`\350\276\370\010\231?\347\016\033?B\013\230?\035B\303>\206dL?81*\2761\'.\276ZpS\275\300\361\000\276\246\002\013\277\344\005\235\275\327\007B\277(\356\276\277 \017\231\277\250\031+\277\260\005\210=\362\374w\276,\244\244\277\366\350\313\277J\024x\277\332\241\213\2778\333)\277>_\000>Zt\351=\003\315\005\276\217l\225\275+\230\340>,\340\340\275\"\014\005\277\204\201\240\275$\375\246?\334\2000?\000\316\036:\301t\330\276(\363?\277\010\363J\276\274\'\017>\031\032\240\276\030\031\203\2770U\263\275\307\264\274\276O,@\277\300;\307\277\2421\251\277\371_\023\277@\033$=\000\'\246?j\377\370?\024W\230=\023\002\252\276v\002\337>\034_\272\275\003#\241=\224\372\325>\311,\247>\221\002\366>:5=\276\000\\\355>+R\"?\202\205\006?\336\0032?W\306\314>\322!\340>\212\237)?\264H;\276\340(;\276#\351\202\276\365 i\2771\025\234\277\346\232o\277\375\005d\277,6s\277~H\035@\263AC@?Q\034@\273+\200?\010\245\013?h\372\301> \307s\275\216j\022\277\376!\316>\200>\217:E\202j\277\313X1\277JS\016\276\310\366Q?\030\360=?\340=n?^n\215>gX\272\276hvq\277!}Z\277\276\345Q\277{,<\277\346\007\010\277\206\263W\277\224\316\217?\210\000#?,$\203?\234U\002?\302\\\216>F\0166?\032;\374\276\224\007\225=\236\014\301\276F4\r?\034+_?\212N\227>\320\t\270\274\021\201\356>\004Q$\276m\026;\277XE\256\277\nK\232\276\036M\016>\265\304\371>\336\273\226\276\346\036r\277\204b\014\277(\232\026\277\016/\265?\260\004\224?\220\335\352>\004\212\227\275\214\n<\277,E:\277a\0340\277\343\235\344\276\272 i\277y\360\254\2773$c\277\rVA\277\215\3030\277\362\203/\276@q>\275X\220o\275\352XP\276buk\276\021\341\250\276\366\220\'\277\272\371C\277\225Sx\277\004j\322\277\323\034\337\277\020\331\256?\211i\005?\0000{?>0\276?o\232U?\336\250\023?t\000\254>?\2307>\256\214n?T\234\323?C\003(@,>\340?ej\231?\302R\212?\226\207\224?\032\032!?\312\336\'?:-\206?v\322\212?\252\225!?\222\326\022?%\374\022\277\357\370\205\276\250\361L\277b9\333=[kK?\2177\374>*!\303>\351e\251\276z\265>\277\252\220C\277\233%\301\276\322ou\277\300\201\312\275\316m\206\277\220\246\016\277j]/\277N\217\025\276\214\330J\276~0]?^+\336\276[d\213\277\\\203\203\276\333\000\036>\010\031+\277%\237\001\277\177H\272>xaR>\372$\354>K\004\026?U\330\212>\313\014\202>\374\312\377>\242\000\241?\315\234&?x\0360\276b\206D?\351\025\031?D\307\214?\312\3178?\0312\243>\3572\351>\376\372\252>\314l\312\275S\232\377=\001\003l?\364!J>\340\217*=fL\331>\222C\014?\244b\201\276\353&\307\276&\220G?\262\343\212>\300\037\247\274\260%\214\273\271\326\321>.B\317\276\236\026\r\277\032c\274\276\277B\030\277\231D\243\277\352t\243\277\311_=\277\235{\032\277<I\223\277\3574\232\277LEL\277\221\265\365>\227\217E>`\232\375\2756P\336\276\354a\037\276\177\301\214\277\220\237a=\240\301\213\276T(7?R\375\037?\240A_?\346|\260?X\007F>\252\201o?H_\201?\217\201\211?\224\350\023?\313,\257>n\3359\276:\303\357>\343\016\203?\022\032\270?Y\364\236?H\t\221\276(\317\361\276$\300S\277n#\226\277\2778\036\277\270s\217>j\242+\277M\036L\2774\255\031>\366%\305\277\232Yt\277\032iP\277&\262\033\277\212\3227\2777\341D\277\370\036\211\276 \321`\277\232 \312\2770\343I\277\344\375\233\277\000D\347\276\356\265v\277`\005\202\277\005\261&\277lS\236\277\366?\302\276`}g\277\370U\254\2779N\201\277\227\306`\277*\344<?\205\001B?\314%N\276*\"\274?F|\245>\230\373\253\275)\247w?6=\217?\262w3?\262\014\001? E\326<\177\021d\276e>\277\276\230Ld>\340\021~?\355\225\002@\007\017\310?r\316\370>\351\375_?\213\311\242>\235\035\016\276\305\275)\277B\'\330\276\t\234\221\276N\000\216\277\320\n\365\276X\034\215\277\220;\236\277\370\n\251\277\037+\266\277\267\332\027\277\367`\243\277j\020\211\276bp\364\276\202\235\265\276\340\376-\277\020!7\277\305\366\216\277\035\367Y\277\207\273$\277\2002h\274X\315\215?\2029\347?d\3428?\231\"\267>\357\243\342>J\270\326?\\6\277?\354\323\221?^\204y?\373\2320?4=\302?7}q?j:\270?\312\034\210?9\243\312>P\'x\274\305\207\220\276`\301\032?\274\021\374>Sw\247>\252\305<>;\330#?\261\362\001?\232\375k?7\2541?(\001j>\370;\215>\022[\035?\366\2566?\356\3730?\321\333h?\010\007\336>\366$f\277\317\305\315\276\021g\276?W6j?A\321\233?\037i\255?8\026\353>,\211\017>TO6>Xo\242=\\XS?\301\204\277>\311\372\027\276L\357\257\275\274\214\327\276\314\204\236\276\226<U\276\302\216\000?\030?\240>ac\220\276\240\312G<\016*i\275\t{ >\036&\377>\342\267o?\330Ww>\\\201\255\277=\352\030\277\371X\023\277\024\001\240\277\220&\002\300\351\022\376\277\217\"a\277y\302\315>D\363\031?\024\345\342>\270\237\230>\212\340\024>8b\000?\356j\270?u\333\201?\361\372\327>@u\317<B\227\017=\350 \230={D\014>\246<\206\277\200G\000\276\030\344\r>\366%\323\276\310aF\277\233\027\230\276P\213\306<,Y\336>\256\255\372>\033h\253>\246R\351>\005\200\331\276MTm\276DBB=\007\275\213>\315~\246>o7\265?\252\262u?\030\306\202=\024#\227?\265W\220?\030\305\256?^S\320?\212M\370>\177\0134?\300De>)\032\004\276\244\263Q\276\026\3463?\276\264\260?L\255\245?\360\276\345?7\362\361?\266\340\026@\013J\206?\310\334\330?(\215\275?<\031\373?z\361\330?n\3640?\014U\317=\325\013\305>,\210\323>]4\010\277\211^\031\276\342\342\216?x\215\242?\365M\251?\204/C?H\2544?\014\365#?H\303\266?)\321\244\276\025m\235\277\216\001\177\277\032\352\221\277\206\361\206\277\304\276\245\276\252k\026\277\215\021(\277G\027\205\277\r\357\207?_\277\221?c\346\232?\220\023\304>\210\347\210>\\\030q\276\263\355\207\275\017;7\276\330J;>\000t\320\276\260Xo?\362\'\254>\2643\376>@-\271\274ec}>/j_\277\245\344\220>j\236\353>\334\236?=\224)\357>\302_m>\340\225\231=<#\026?(\336p>G\353T?\252\0272?\340\314\360<b\305\226\276\344\373\311=\251\360:>\3572\320\276E\354\234\276\314\231<?T\352R>3\024\315>^\313V?`\333\251=\034\020\237>2~?\276M\343d\276\353\035G\277T2x\277\331\325\247\276\262K\231>\242\313\357>\240\005\361>\352p(?E\253U?\364k1>P2\030?R\315\235>\341\r6\276(\020m\277(\263\202\277R\371\004\300\004c\377\277\370f\365\277\234r-\300\251\2611\300\240\005\"\300\263\014\223\277\261\177$\277&\335\352>\264\352\216\277\242O4\277\271\326\200>C\372\371\276\312\t\004\276\256t\211>\200\316\237>\226\205t=\363;Y\276\254\303E\277\200\244:\275\275\017V>p3\n\277\356y0\277\020lz\276\214\307\364\276\031_\317\276\236\260\003?\336<:?i0\246>\272\027\327=\377\370\030?SS ?d\301s?;U]>\353\325]\276\225\353%\277h\304\253\276\274T\262\275\257^Q?~\242\177?\000`\257\276\223\300\014\276SM9\277\024\301\034\277\360\222,=N\335\247>\242m\345>c\034?>\210Z\025\276.\316\301>\341\361\"?L\3346? \3413=j\034\217\276\201\304\236\276{b\376\276S\361\325\276hJ\275?f\246H?bM\324>\235p\301>\247|\255?\350\262\211?C\232[?\346SC?\230\260\243?9:!?\260\341f?\210A-?\230V\002\276\030\214\374>\322\220*>w\026\367\276CUh\276*\3310\277\000^\257\273\201\203\340\275\2542\341=\212\266\360>\006\"\265>&p2\277\312\227??\272%\371?\321`\t@\214d\024@D\305\322?&\370\306?f\\\342?\224\262\007?\310\330\312=\002\277\253>\200\254-<\275s\202>\022\240|?\254\2150?\3402\027\275-\334\233>\244o\t?4\354\264=\306g^\277\216U\245\277\2553\301\277(\370\315\277^\260r\277\023$\r\300\367#\260\276\233cY\277lJ&\277\021y\222\277\203\234\016\277p\274\373\275\340\232\366\276\n(\331\275\333Y\262\276\316c$\277H\267\247=\336J\211?\251{\212?\332e\356?t\014\343?\344v\027@\233w\266?V\372i?\240\365\324\274\026\341u\276\206\247\331\276B\320D\277\333?\303\277N\362\037\277u\323\027@\340\301\220?p\344\213=\3338\"?A)\366>\017\317\315\276`\037+\274\223\336n\277\013\\\362\276\220R\313\275\376S\215\275\016|\002\276nh\342\276\363\221h\276\240-\275\276b\250\226\277\024Co\277\200\025\021\276\020\3770\277\343\035\337\276:\005\254\277\320\351\005\300\n\256\231\277\327\245\232\277\261@\225>\322\r1?\274\333\004\276c\324\033\277\277!J\277\300?\t<\272\315f\275C{h\277\356\"m\277\270\375\265\277R\237\352\277\225_\274\277\275y\340\277N8\025\300^\003\250\277\334Y\336\277\250\245\242\276\354E\033\277\312l\202\277\306\217\216\277\257\221-\277\242}\027\276\216\no?\300\r9\275\027=C\2761Q\014\277\230 \316\277\034\025\005\300\007\356\003\3002\021=\277\267-H\277\223!\336\277\344P\202>M\271a\276\323W\001>\262\354i\276\202K\256=\366\335\242=b\327i\277\017\'J\277\321\305\350\276\346b\314>6\202\301>\257\271r\277\325dN\277\032\247n\2762E}\277\320\271\202\277\036i^?\234\032P>X{d\275\347~]\277\3201\261\275\035n\225?dv\220?\017i\026?G\204\253?\313P\307?h\005\222?j\355\232?\352\303b?\324\244\204>\264c\345\275\3758\262\276\316\211\025\276y\316\014?\235\"H?v\222\256\276\372\202\323>\034\262\222?\234\245\226?\360\205(>\212\004p\276\222b8\275\315=\321\276x\2217\277\032\325o>Dh\250\275\325\r\026\277\306H\027\277\0140t\277\370\226-\277\200-\030\277\360I\360<\365\000$\277@\222.\277\336Z\377\276[\251\236\277O\343\341\277T\023\000\300q\230;\300&\"u\300\207\020\003\300+\004\013\277 9V<z\233\277<\313\337\246\277,\353\236\277\273\206\264\277\240\342\303\274\347u\345\276\036~o?\036\235,?\202\210^>\322\216&\277\"\212\213\277Z\301\317\277X:\202\277`\025\234\277\016\177k\276\344\3536\2770SZ\277\243\307\035\277\260\032\200\275\360v\222>\004\213\262>S2\003?\356\267F> F;\276\030\321W\276\'\315\000?\250\374\324?\354b\226?\001 y?r\027\234?2\026\311?\371Jq?\"\333\306>c9\203?d\250\302?\374S(?\352\014\321?\363^B?]\271\331>/nc>+]\234?\200B\014@\206?D?\335m$?\276\341\213?\254Y!?\200\367\023\276Y\"\000?\246\304&\276\231\336\037\276\247\342\001\276fkA\277h\221\256\276h\251\030\277\025\250H\277\230`\030\277>d\351>\372Uw\276\213\264:?\370P\352?\303\233y?\334\357\000?\252T{\276t\021\260\276\346\007\201\277\331\314\013\277\246\361j>J\252&?\303\2553?)\177\245>\270\214\204?\037\002\r?\251\331\'?D\273X\277\300\351m\277~5\230\277\020\252\037\277J\262\274>D\350\337>\247H\030?f1\033>0\307\261>\302MD?\326D{?|_\220?8n\360>=T\037?\330\267\024\276\301\315%\276KQ\247\277\225>\'\300IdJ\3004\3763\300\\PU\300\317\274B\300\350\025c\300+\250g\300\245\226\265?\214\374\202>d\3636?\022\026\027>\247\351\021?\311\024\017?\000\347\013;]\356y?7\017\003?\033X\032?\366lP?\331\303\310?\027V\207?f\262\232>\030`:?uI`>\267\266\342\275\252o\300\276\220]^\277{\031~\277\240+\307\277mH\030\300\331fF\300[\202\000\3004\266\024?\344\312\254?\n\215\024?RW\207?H0\322?\313\325\307?\235\360\256?\324\320\227?8D\202?T\325k>\037\360;?~\242\266?\304Q\305?X/\235?\020\270\350?\032w\227?\000\215\231?\270|9?0\357\233=<\370\177>/\177\277?\213\330\221?\262\277=?i\305\250?[\301\003?\300,\332?\302\314!@L\344\272?T\"\014?o\202:?\3711\316>\374J\214?\273\346\260?\3501\301>\264\343`\277_\376E\277*\3158>:\017\022?\234\2370>@:\266<\311\361\017\277*>\022\277(\362\236\277<2\342\277t\020\255\277\216\271\363\277B;\026\300\250\022\241\277\343\210\023@\000G @\327\211\205?\260o\037\275O\211e?\341\302\037?\370\216\020\277\334\340\201\276\021\010\264>\222\375\271\276(2,\277l\332\316\276\2548\214\277\331\264!\277\202N\350\276\350\323T=$\306\r\277\267{R\277xH\241\277\372\267\202\276\330L@>\357\222\322=\036bi>\006v}>\0362\343\276\261\227\200\277A\3043\277v\006/?\252\371\010?\364l\022>\036$\226>\350ah?`\247\276?\205\211(@Cz\271?\252\177\224>\264\023$?\202\033>?\\;\254?\312$\"?\306\021y?\322\303N?\221\202@?\332\331\227>\340dS<\020\005q\277\301cj\277J\360j\277\005\271\022?\270\326\023\275q\2416\277JHa\276\310]\000?\345\224\355>B\276\264>\221\262P?\r&\222?\363\316\033?\377nm>\300S\276\277\0267f\277\230A\310\277L\357\033\300\216\3021\300\021X\007\300\345\363\025\300\335\303\024\300h\210\240\277u\367\276\277\370\016\245\277n\354\205\277\361\tA\277\317\265\241?\346\232\247?tlW?\234k\304?\333\007\264?)\305A?\2402\200<\231A\034>\370\251\311=u\t6?j\367\345>\346X8\276\217\361\016?\242pc?\204\362P?\376\247\242>\325\340\205?-F\252?a\\\260?\r9E?|\254\007?\220T\323\275\331b\316\276\000\032\270\273\331\244\014>ZpG?X_T?\373-\271?@\256j?\nP\262?N\223H?V\267\026?\304\223\022\277h\007\274=\271:\n\277~U\267\276?\0241?\240@\033\274WmJ\276\212U*>4\332\217\276\320\217Z\277,+\001\277\271\331\275\276\030\353\334\276\352\237V>\032\360\376\275\247\355\273>\005;\025\277EM\222\276\372P>\277\352\031s\276\301\037W\277\024\253\234\277\277\260\240\277\256\252\263\277\"\225g\277\346B\235\277\330\211\307\277\316\301\266\277\354\331\312\277\325\364\315\277#\303/\277\226x\354\276\273\t\205\276\372\247C\277\021[\255\277\213_\215\277\036Q\351\276\274\350F>\027\314t?\362N\246?\010\300\327\276\310\227\255\275<\337\003\277\032\031l\2776\365\237\276t\027\026\277\20016>K\260\200>^^\270>P\201\021=,\262H>b\305\n\2758\231\000?h\213\346=r\371i=X\250\355\276#\337\004\277q\n\t\277\\!C\2776\220\177>/H\355\276\371N\'\277m\361\217\277\344\303\363\277El\005?\200\264\376<f\325\235\2761\362\003?\302\2665?\354\370\261\275T\237\361\275\030\031V\276\020\375-=\354O\236=\2655\001?(\237\234?\206\335F?(\334\267?\234kq?:*\335>|bM?Z\034\004\277\367\242\214\277\344\\R\277@\2221<O\313\300\2766$\236\277sr\201\277\227\330\035?N\031F?\350\031\365>&\371\240>}*\325>x\322\356\274B\256G=\367M\204>(\361\312<\332&\305>\2363\351?\357\303T?$a\211?\350\366\225\275\014\2406\276\003\252\t\276\265os\277\346\t\322\277\350m\004\300\r\347\336\277\346\306\225\277a\325\214\277d\355\351\275\344\027\023?bd\234>\275*,?\214\027\232?V\360\315?\224}H?\034\203B?P\r\242? \341\357>\310l\314>\270X\004?\320X\237?\356\243\244?\200<\371?\027O\007@$\003!@\240\327&@\247\276/@\264\030E@\264E0@\r<%@\301!\022@\363.k?\322\351>?\215g\212?\000q$\277N]\262\277\374\206:\277E\357\223\277(\273\350>!\037K?le\017?\301\254{?\337V\204?\272\020\201?\221\223\236?\256\367x?\n\257\216?H\312\244=n\305\260\275k\246:\277\261\367\263\276,\327\020>\276p\250>Tf7>\250\310\336>\013\231\210>\204~\025>!\262\206\277\213\236\214\277\207\'z\277\003h\'\277\006^\322\276\232\033\256\276v\365\355\275\342x\323\276\010\217T\2774\375\237\277y\270\031\300\272s6\300o\201A\300\242\n\336\277x\320\216\277\230\313\356\276\336\314\035\276&\031\240==\031\356>i\234\025?k\353c?\236\356\271?\002e-?5b\032>4\377\224?P}\027\277\225#\262\277\350\320U\276\205\3337\277\340 \221\276\303FA>\004\314\356=\224\357\'\276\300\322\273\273\223\033k>C\372\332\275H\201i?\350\322\004\276\310\265\034\276`\362\366>\242\207\022>;\305/\277\341\2649\277\202\326v\277\354\362S\276bg\227=\337\217\014?P\010#?\240\0361?\014\330\213>\305\2414\277\302:\237>\335e\227\276\275\316\n\276`IK>\000\205J\273|\302\r:\320\370\355\276(]\362\276\342\313`\2769\226\222\276\007?\022\277p\246\032>\310\217\343<nK\245>q\336\231\276`\341\024?\263\301\370>\260j:?\2107t=A\032&\277P\265<>\322.\224\276W\304\323\277\024\035/\300\362\3762\277\225Y|\277[A\010\277\250\2205?\214\222\023\276(YK\275\312\344+\277\204\004\025>\242\256N?\234\3221>\003\272H>Dv.=\321+\217\276X5\240\277\357\016J\277(\242\003\277\324s\254\275\020Vu\276\322f*\277\240[\206\277\251\265\215\277\3037\236\277\364jV@h\002-@\337\025\340?\346\216\315>\220\347\351>\t\333\353>V`\032\276\200\272\340\276\334\270\020\277\\~\333\277\365\314\314\277\2001\032\276Ry\251\276P+=>\020\"\244>\344\007\231\275\0265\310\276\276y\330\276\357\275\312\276\255\337\213>\221{\243>D\206E?yNM?un\347\276\222\301J?\002qJ?\245\373\275?\034]\255?\230\337q?\360\010\243<\000^\347=\020\002\034\274y\n<?\364\276\037?\376\030\021?\344\213\023\276\241\273P\277\177\302\025\277\345IQ\277\024v\317\277\264\257\237\277R\306\253\277D0+>G>}>\360n/>\312\224Z\277Y<\244>2\371\304>\030\004\030?00\367\276\030.\017\2770\313\307<$\321\251\275\261\235\342>\340\363\236\276D\312\216\277&\032\214\277\244\245n\276\371\202\202\277\312\222\205\277\240\373\271\277\210\237\311=\300s\367=\351\347\262>\264oW?wk\233?\001\027\005@\352c\377?\030\332\355?BC\017@\240|\230?6\3643?\274\003:\277\265\331\252\277\312\273 \277\002\215\204>\333\346_>\310\325\354\276\000\330\262\275\350\251\005\277\033\212\204>\220\273\370\274F\216\230>\006\324e>\270\353\204?\302\212\236?\000\215\220\274G\370\016?:\306\343>\231\300A?\306\n\250\276\252\266!\277\274\307\337=\n{\210?P\250,\275\311lm\276\341\014\254\277\032\367\275\2772\031\346\277\320t\377\277\324\251\353\277k\322\306\277\252\325\020\300\243\202\274\277Zq$\300P]\014\300J\226\206\277r?\263\277\215\357\302\277\200h\353\275\266\347\036\275\321F\230>~\305\273>\374mW\277\301\201N\277\210l\332\277\240Za\276\242\335\257\276\360\363 ?\241\254Q\277\016\000\003\277\362t\353>\262\331\232>\302\210\031\277{a\365\276\206\321b\277\215\2535\277.\314\033\277\316\304\224\2770,\272\275`\320\257\276]z\036\277K\201\223\276\"\"\231\276\032\332\273\275H\310\002>\305.\203?\303\224\376>@\236\213?^\247\032?\266\366\242>\030\240\003?\350\210K\276\260\254m\277\355\177\037\277\2744\206\275\342\235\036?@3\236?\334Y\366>\270dl\277\272N\324\277\343\304\236\2779\202\204\277{\314\267\277\247F\277\276\363x\231\277\241d\206\277\325L\277\276\362\"#\276\316\3519\276X\251\220\277\375\000\027\300\036!\337\277\340&\001\300h\226\247\277g\245\371\276~\266[\277\212\024o\2770,F\277`\212\275>&}8\276\372\252`\277/EK\277]Yq\277\311\346F\277\274\304\027\277\214\230\203\277Y\364\236\277v\216\307\277\237\3710\277vdc\276\366Q\341\276\0207\305=\225\212\032?\202@\026?\363n\024?^\341\261>\005\017+?0`\000?\2638\233?\322\315*?\352\005\230>\022T\317\277\326\362\263\277W\337\224\277*\020\312\277k`\032\277\235\016\005\277\324{\025\276mj\366=8\213\344>\317\371\213?\272\350\226?\324\345\010>\000\303c>\2440\300\276?Q\272\276\311\317\337\276%\200\237\277\376\251\001\277\013\2702\277\036\231\245\277X\274\234\276\355\353\016\277\246|\222\2768\214\311\275:\251t\277\264/\342\276q\342\204\277&;9\277\332d\204\277\235\347\207\277\270\267\232\275\\L\252>\304\373!?\326\240\203?\222\367\330\276\324E#\277\346\027C\277e{\210\277\3407~\277I:n\277T\266(\277B\307\231\276\210\r\227?\370l\307>,\324\304>l\266\212?\226\320B?x\237\260?7\003\371\275\204\202\243\277\2143\267\277\230g\366\277x\262\370\277\334D\014\300\373g\013\300\027\267\365\277\222\244C\277\312`\254\276\200JO;\252\323\262>\274[\216\275r~\215?\3423\324>\244\240\022?\300j\351=vK\300=T\032\304\276vJ\211\277\374\213G>\207K\325\276\222\226\010\277#?\214\277\237\200[?\303i\354>\020&\037\277\317\303\216\277\204\031\321\277\366\355\330\277\027\273\333\277o\034\220\277\331\303\242\277\324b\320\277\263\340\255\277\201\343\316\277\333!\023\300Q\3449\277\r\256u\277\222\236<\277U!\211\277\010\305\352\276\242\360\233\277\334\370\002\276\032\237\352\276N\216\244\277\252\031\333\277\325\016\340\277\022\226r?\266\306\201?\306>\240>\312\264:?\271\375\207?\"\274\230>\270}\021=\205M\364>\242 f>\377\210\314>r\353\024\276NCA>H\231<?\3511x?\200\374\023?\310(\002>\316o\034?H*+?na\260>\260\316\215\276\251H\250>\324\240\203>\334\340\030?\361z\240?\005W\223?\245r5?\350mw?\362\370\221?.\366\021?\005\0355? \204\340>\206\326\217?\333\343\330>\216z\307\276\217[\000>H\263\245\274\r\037\366>\334\236\265>\237\344\037>\250J\031>\\\277\357\275\321\376`>=\032\255\276\027{\002\277\354\326\025\276\243L\226\276\373\227\324>\340H\237\273\374L\232\276\005Q\230>\332\225\325>\017\366\020>\341\027T\276ar\331\276@\'\003=S\022\345>\000\305\005>\013M\014>\025\364a>\010aa\2761!\212\276\314B\316\275\210\235}?\302\341\374>T\252;>\020tY<Ft\371<\267\322\246>\200\366}=\324C\203>\217\327c?JO\365>\312t\036@\250#\365?\013if?\036\206\235?u&\207?\345\300\214?!\271|?\n\224;?\373\346\223?\004SK\276\250\205:\277J\010v\277]\006\334\277\224M\237\277q\032\220\277!\026\003\300\275\307\310\277\260:\357\277.\020\204\277\032T<\277t\272\321>\000b{\273\303\243\003\277T\372;>\000*\000\277\374\310\007>oe\213>\200\017\003\277\272I\030\277\020\363\257\277\247\215\206\276\303M\344\276\r\022\230\277M\373R\277T\275\212\276HN\350\274\350y\002\277+\362:\277>\255^\277d\033\003\276\000\007\026?\200\013\276<}\n/?\030\243K\275DJ\023\276\024\004\200\276\000\026\243>b\322\331\276W\262\212?\2541\355>\230}S=\215\312\035\277,\325l\277\2303\030>\312\215(\276\332\345\213\275 \202\237\276p\303^\277\326\217\272\277\000\022\027\277\374G\222\276\220^\311=\312k\232?\026\342@?P\346\272?d\326\025>\022>\361=\310\200_?\204y\004@\023\251\230?\370\273\004?\336\001\014?u\260\330\277\317\353\021\300\227\322\372\2776\210<\300\323 1\300up^\300|\307W\300\316\227\031\300Yr\034\300\\\312\206\2778\357l\277\230\025\221\275\366\352X\276\354j\320\275\200\342\036:\213\210>?\320G\223?k\243\216?\311f\"@\205\014`@%\200D@\246\2402@V\261\002@\367\346\304?\263.\335?.=\376?\237\352\216?|c\310?\326\277f?\022g4?)lY?\300\rn?\032\234`?{\232@?\340\252t?D\207\027\276x3\214\274\303\3765\274B-\037\276a\021\022\277V\3372\276\230S\272\274\331-\014?\374v\353>\006W\341\276/\251h\276\022\324\240\275R\314\'>g>\251\276\035\207\306>\014\330E\277\2762\242\276\271\300\"\277\230\242\003\277Dh\343\276\231\356\363\2768X&\277AU\013\277\225\304\013\276PE7\2769\370\267=\375\354\027>:/\345=\002\234\325>$3\014\277~\217J\277\026\r\217\277(\307\201\2774\216\210\277|H\244\277\243\373\273\277\352\363@\277\357\001\324=\304\217\276>p\203h\275\272J2?g\355\022>\013\317\344>\024`\255>\212\245<>R\355\274\276<-\215>\374\213d?\362\340\260?\020s\236?9\3774?\246\204v>\326C&\2770\006\230\277\322\302\244\277\274.\246\277r\016\013\277\250{@\277N\260\231\277\311\375\210\277tW\333\277\363\267#\277\000\215\031;\341\333\243\274r\345\313=\252\023\217\276(\223\034=\216F>=\212\023\361>\276\311d>\204\311U\276\324\372\013\276\366)\225\276PV\034\276\026t&?\010\345}?WT\213?\274\363\264>P\307\341>\275\356/?j\r\254>\024\204c?\034|\266?\002c\225?\326\024\277?\n\352w?\036\"\235?\341\243\231?\326\310\217?\340\337y\276F [\277\034<1\277\216\365u>H\213k=@\222\251>LM\203?\364\2400?LB\027?[i\026\277\346D\037\277n\300\301\276+\351\221>\3751\225\276Gm1\277H\224\362>\261\350\001?p\225\300=Q\020z?sV\'?\r\n\204=\324\035\335\274QSR\277\266&B\277\273\212\300\277V\236m\2770)B\277n\020\365\276\322\303\343\276n)h\277\272\215\223\277\3111\244\277dD[\277|\035\223\277\236Q\244\277\356\251G\277=w:\277n\3348\276\254\312\207>\367C ?\000\034>>\020\004W<Z\')\277\324\210\217>\306\255??\320\351\221>\017R\210?\206Ev?\254o\202?.\303\226??SS?\356\252g?\274u\217?4\002\236>I\323\"\277\021\035V\277\235\2340\277\361aH\277\220wb\277\265\016@\277\21217\277\032N\316\276\242\373\177\277@\030\272\276HD\273>\177O\254>\245[\253>;g\217?k\355O?(H\276\276\002\t4?Y\307\"?nNr?\243G$?\n}~?\346\224U>\271\263\252=\313P\024?\377\360\253?\236\200\243?\030\360\372?he\305?\270W\253?\220>U?(6\305?\373\215p?\267\310 ?\017\031\006>\334\031\252\274+\022\240\276\001\376d?\027\353\303>\344\363\343\277p@\250\277K\204\234\277\0218k\277<\346\010\276\304\372\323>\3108\021>e\330.>\350\370\303=BD|\277\354\344\316>\211M\357\276\240\230\210\275\036\224K?Tk(?\352\345-?\2132L?L\265\253?v\231\351>\254\254K?7\347\030?\340\272\'?\030&\234=\243\205\210\276\324\327$\276\202\030\217\276\260\263n<\251\341Y?\240-\027?H\234\220?\371\336\203?\270\177.>\240~\307;4\325\351>\212\271U?\3344\367\275\\\203\302<\352\366\276>\320F\\=\331)l>\020F\020<:M\016?z\245\221\276\260\373\224\277~w\226\277\"\324\315\277\240F\350\277a\252\304\277\323\033e\277\314}\202\277\236K\273\276V\\6>-c\006\277&Z\013?7l\315?\231\345\317?\340F\206=F\301\314>\342\337\244>\356\245\320>\001\235\376\276<\354\020\277\216$0\277\251Ju\277 \275\355\277\244\\\003\300\0328&\300\214\327\222\277\036hg\277\021\337\030\277\323,f\277\032k\202\277H\223>\277\304%\317=iZ\232>Ak\300>vV\223?\312\"K?>\026x?\370~1?Xhm?`I\351=PD\031?\374\024\363>R\017Y\276\025\313!\276E\343J\277\256\240w\277\211\251\001\300\223]\326\277(\307\337\277Q\010\252\2778V\305\277\007\274\244\277\312\374\033\277\210s\331\277\237\322\245\277N\363\213\277\030~\205\277le\006\277\032<\217\276r\276[>\260B.\274\332:*\277\230\261\254=H\336\324\276\322\220q\276J\221R\277\022\240\262\276\376\214@\276\3267\326>Q\327\215?\271n\006@O\"\345?\311BL?N]\241>\277\201~>WB\304\276\242tn\277t\0000\277\325\007\372\277\363\322,\300^]k\277\\\333\300\276A\214\331>\371q]?C\237\272?\223\345\002?\244F\263>\263\367\245?\261\335\217?:N`?P?\000\275\023\016a>x\346\255>\336\233?\276j\305\031>\340}\253\276\272\'\242\276\264a\301>)\231L\277pu*\277\000Ry<\247\204\014?on\224\275\235\370C\277\240\327\211<*\322w\277d\205\274\277\344\370\226\277B\366\r\277\276L\031\277\200\362\250\274lv\232>\276\213\227\275\2668\204\276\277{\362\276\000h\310\276\226\\\356\276\2705\212\277\226\007\307\277\210\344\217\277 E\241\275\362{\243\276\364\324@\277\315\1771\277\367(r\277.\321;\277\177\206\306\276\273\250\214\276l\003\254?\\R\315?\211u\310?J\037\211?.\275\246>z\\<>d\255J=unC>\330\010\314\276P\'\250=v\300\261>\212\242\225\276\0269T?\260A_?G\307`?\252\016\312>\257\336U> \211\217>\342Y\026?\220\220\272=<\021\007>J\267 \2767\244\036\277MHR\277\020\260\302\277\331>\004\300~\022\344\277H\031\263\277\024\322\201\277\005\355\014\277\004$\">\202\017\242\275\266\"\024=\300w\207\276:\032\242\275\250r&\276F2%\276\323{\023>tN_\276(\024\276\276\344\245,>\321\215\266\276\000$\273\271%\002%\277\240\t\213\274$$\006?\314\225;<\223\036\277\275B\235>?mUy?h-P?\002\243\200>\374\023\341>@\3246?\200\023\027\274\250?\261>y`\022?\017[N?8{\235\275\224\253\233\276\352\r\032?\021\314\371>\000\0305\275\262\354~\276e7I\277\365I&\277\220\276\360\274\246\263\370\276\177$8\277\255\000\232\277\251\260^\277\r\213x\277\353\211g\277^\305\300\276\0008!9\364\035\335\275\364\003\020\276\376\322\225\275f<<>\177\020\216\276\020\357\311\274\373\363/?K\200\260>\216<\033\276\031\327W?\301ux>\312i\340\275_\032Y?\"\"\332>;X7?\305E\031?\242\347\005?\207\272\254?0\t\375?LOI\277\006}X\277,\240\237\2777f\254\277X\375_\277\370x\251\277Y}\031?\360\231\244=\221T\312>\234\313\230>\370\221D\276\222\004\032\277z\204\327\276\002\200\"\276\364\330R>:\2340?\270M\345\275\256r\256\276\210z\276\2762\030x\277\322\023y\276\347\265\270\276\252\231\335\276\265~_\277Ri\330>\263\326_> \026\357\273\254\223\303>r\365\306>\333\277\027?\304\233\237>\372w\305>\335\226\275>u\343o?\200\2349\274\356\270L>\306/\245\276$:\223\277\206\372\301\277\357\021(\277,\212\203\275P\2118>\374=\004\277TQQ>9\r\305>Xn\257\276U\237\201>\031\332\204?&\216z?|\017g?\260\363\352?Lb\271?H\215\216?P\246\333?\016d\005@\023\020\257?;\326\373?\305K\333?\216.\236?m\207\203?z\225\332>l\232\265\275f*;>\365\002\374\276\310;\264\276\342,\026?\030a\306\275`\302l>\267m\261?\326\304\232?\376\360D?\200\200G\274l_o>8\016\272\276Z\322\252\275\206\247\264\276\022\267\241\276\212\350+\277\334\266\212\277\300\316\001\277\272\367\016\277!\247%\277P\244\257\277\034_\241\277~\372\227\276AF>\277o\321E\277\250\201/\277\210\300\022\277\000\002S\2739\210\013\277c.\363\276\227$G?t\331\204>\034\2774\276\310\2360\276\243\320\306>\276\352!?\001 p\277\'\004\334\276;\033\207\276\266\270\212\276\334@n\275\3549\217\277\240\376\356\277\221\010\323\277\003T\363\2773\225\324\277\304\312\021\300\335\207\017\300\'\253\004\300\232t\033\300{q\310\277\276\025\r\300@\223d\2770\\u\277n\324\247\276\020N\362\274\205\223\323>w\335\221>\341\377,\277<\350\313=?@_?\352\022\201>\270\231\253>d!^=\004V\276=\276m\377\276W\302\020\276\342\215\377=d\371\273>\232Yb\276\272\354\213>X\026\373>r\221\344>\245\320\354\276\316D\035?)A\250? \243H>ne\237\276t\312D?p\243\223?Z\n\021?\270}A>\306\202\240=\336\250\220>\340\232]\274\225R;?\001\nI?;\272\004?d\212\223>h\362\341\276\201J??\017s\r?\300}\325\273\367p#\276U\255\371>\240\225\237=r%\001?.b\"?\370\245\n\276n(/\277B\270\255\277\267\004\251\277\374\236\204\277\255\263\265\277f\363\272\276\335\227\267>9 \"\277R\340A\276\260\327\342\276\002\032\205\277\370\351\035\276\223\235\371>\202\243\262\276t\357Z\277X\227\245>L\267\335>\230\037\324\275\243[\243\277T-\030\277R\215\306\277F\324\320\277\320\003\247\277\001o\234\277:j\326\276\353\331\n\276&\023\312?l\206x?\350\335@?\316\223\231?\200kg?-\227\272>z\344\252>`\261\344=\240)L\277\307\326V\277\200\333\300\275\326\273\263>\354\241\022?k\250\220\276ks\246\277\\\"y\277\204dH\276 1\211\276\335\271\226>\256\323\032\276OR\265\276\231\345\230\276\336\214D\277\232wy\276[T\225\276\374,O=\351$\021\277\342\020\360\276\254\\=\277\243\302\031@t\2518?waf>}\003b\277L$a\277\371Z\207\277\311\350f\277LO\201\276\"}\221=z\362\232>h\201w\276~\3662\277\301F\r\277 \306\025\275TK\270>\002r<?\016\321-?l\337b?\342\260N?\214\332\205?\244.\213=\200(9\277\365y\303\277^\240_\277\000\333\310?\002\257\352?\370O\353=f\351\000?1\270\024?\002\005\312>vf\370>\3004\254?\344M<?\222{}?<\006\242\276,u\352=\374=\203\276K3(?3h\207?^\274\266>n\371J?f.\255?\374\013\261?\234\253\320?&\300\242?\366UV?\000\276\257\273(\327\300\275\236\210\010\300\337\177\344\277\345\331\034\300{C\215\277\360e\302\276\346\365\202\277 \230\254\277n\032\016\300\024\236\004\300\213\371\230\277|3\222\277\007w\234\277Z\330\306\276\206\344\360\275o7\177\277\237\3718\277\033\207\375>\342_\026\277>-\210\2777\352\355\276L\276_\277\327#\257\276\260\311\034\277\322\350\335\277iHL\277\303\t\376\276\250\036r\277\210\370\027\277\352>\035\276|\034\313\276,\255\271\277\341\220\314\277\024\177\225\277\322\247\247\276\030E\341=R\365D\275\022\000\027>\356\256`=\345R\023?(\231\022?LY\361>\334\\=\276\3359\025\277\026\367)\277F^l\276\264\t\004\277 H\344\275\334\225D?C\235;\276l\215r>!\323\216>n\321P?\0134H?\233\3337?\372\016*?\323\010\365>\202\244\213?\246\257\222\276h\236,?\000\351\004?\314Y\220\276\032\264\376\27588\262\276\270\0019\277C\370\271>6\210\203>s\372\024?\314B\031?7\231\234>\257.\241\276^\372\357\275\0363\213>\253Ql>\024\273L\277\017\306V\277\327Z\202\277H N?\324\202\n\276\023}R\277\315\000x\277\'Tb\277b\234\252\277r\345\364\277\352C\r\300A\234\323\277\312$\364\277\020{\300=\342\031v\276.\016\310>\200^2=\022\325P\276\"\005\016\277\2469\251>\177\242\322>\361\234\252>\024\221>?\210:c\277\304\305=\276\020;\374\276\370P\t\277@V\243<T\235[?\000Z\242?03C?Pa-=\206H\301\275\302\247\032>3\270\003>\323\014\310\276\324\376.>\177N\376>\325L\017>(\330\022\277\\\220I>\330\203;?\320v\201?q\241k?,\241N>D\235\206?_\010h?c\005\021\277P\330\256>\373\\\334?\245\361\233?\322$\\?i\221\274>D\355\221?.\000\226?\351m4?\364\033\036>\016\321\t?\024\325\205?\204\274\231>\245\321\207>\322\020\314>\357\243\274?`\004\317?\220\354\241?P\224\335?L\370d?@|p?\362\275\313\276x,\303\276\254\256i\276R\350\010\277\373p\010?7\377\342>\204&\214>\010(\367\276&\266\310\277\376\341\317\277\204+\233\277\025[\017\277,9\005\277\037(\210>\301nl?\216r\261?N\341L?U\220%?n\255\232?\036\326<>\002\035\315\276\220\341\253\274\224\207h?<\014\235>=<\210=\312\001$\277\214\250\237\277\277^\340\276\342\207M\277\227\207\255\277\354\305\373\2774\232\026\300\324\314\321\277\210\264\341\277\022G>\277\004\340\254\2760\031\020?xR\223?B\340\203?1\231\003@B\374\355?O\220\372?\000\227\251\275\246\350\257\275\241\000\014\276(\374#\277vEL?\240\004\"\275l\004\245\276E\004\316>\000\242\226\275H\271\201\277\342p\253\277\252\024\217\277\267T~\277\213\361!?Yv\320?n\311\236?\370\227\350?\236\"\331?\332\313\245>,RV?\032ay?\211L\206?\214\251\212\276\177\362\n\277\031\251N\277\241\204\014\277dz\267\276\372dF\277\204|\222\277<\227\266\277\302\344\273\277f)G\277\274\021\257\277\260\212\252>\236V\\?\317\'\034?P\3147\276\246\261K\277\033\3605\277\n\265w\277P\345h\277\216\177\'\277\266\246\305\276T+S\276\330\005\330\276\366\305\363\276h\000\214\277b\301\210\277\024\276I\277E\304\032\277P\004l\275I\255@>\364\313\265?!\017\243?\020\301\t?\034\001E>\032\217\272=\342\301\246?\2028\225?\226s\360?dN\275>ZE{?\216\t\345>\210\212 ?\236y\257>\346\233\030?\034\370[>b~\213>\316\001\275>\223\235\314?\231T\327?\305\216\274?(5.?\226\373\347?\300\221V=&\006}>y`\305\277u\024\265\277\324\220\306\277\004\200\250\277l\274\205\277(p\221\277\3245+\277:\274J\2779/\301\276~\345\357>0:\243\274\007\3233>Q\376p?\262@\246?{\356R?\205\202:?\350\030C\276\004=K=l\032\n<\244e\016\276\242#\322\275|T\250>\352C$?\274\020!?`Q\207=\273\252\036\277\210\242\007\276J\266\363>\001\2611?\315YE=\272\343\\>\016a\210\275U\377\217\277\230\223\336\277\242\353J\277\254kU\277p\000<\277\030\252\251\276\321\324\202\276i\2110\277\242\373\244>\316_\263\2760\326\222\274\233n\347<*\001\207<Uig>t\225E?9\005)?D5>>\002wP=\272\271\237\276\022\325\273\275\2404/\276@\252l\277\202)\254\277\374@\002\276\274-E\277\2320?\277\207P\036\277 \264p\274]\r\373\275\262\366{\276\2550#>Ic\245\2761f\202?\300\027D\275\221y1>\003\335\261>\016\352\216?\270\223\023?\226\264\023?\375Qt?.(@?\365\312T?t\275\003>Q\200\214>M\225\177?\266\337\215?\340x\205?\262\340\366?=\256\365?\230v\255?\373\036\036?\262\344\277\276U\243\270\276\2300\315\276BWA\277\224\207\325\277\224}\220\277N\353R\276\340\324\001\275 \334k\277)\036\344\276\215\272J?\245S\370>\372\343\263?\266\205X?\n.\371?$\257%@p\321\010@^\220\\?(\347\263>\372$S\276,\203\376\276\275\262W\276\224u\000\276\325qH\276\333\024\014\277\021h6?im ?n\324\006?\274@\313?*J\273?H\352\253\275\037\345\241>-\000\251?\243\340\355?\323O\256?B\364\377>N^\217?\325%&?f8<>\331\364\023\277\016\035_\277\337\273\037\277\335\370\036\277\266^\341\276\363\002\377\276\346t \276h\326\224<y\366\016?z\324\230?\246\334[?\246\n\212?\273}\275?\027\237\226?\000\017\262<\251\363\326\276^1\000\277l\265\034\277\322\253\036\277\270\204\200\277|1\221\275\211\264\337=\223\023\r\277\033),\276\36501\277\246\247\346\276\260\\h\275=\211\335\277,\240\224\277P(v\277\265x\262\276\3203\357\276\376T%\277\024MM\277m\004\023\277\351\366<\277V]\226\277\272\240j\277\036\332$\277\374|\261\276v\246\026>~\237\252>x\344\372\274\375\276\033>\374\374\203<\327\355j\276\340\276\361>z\274\270?\2066\232?\032\347\235?\373\226h?oQ >_\013+?(\334\266>\245\335\330\276\000\250\275\271o\274<>~\006\234>Q/x?\342/5?,e\335\276\357\237\026\276\200\337\210;\350G\216>\254c\000?\306\010\314>h\371\370\275@\266\225\276h\342\272\277\340G\037\300 U\027\300\376QB\300\217\311\350\277x{\332\277\337\3650\277\336\245\033\277\340tL\277\213<\006\277\3443^\277\300\212\201\277v\001Y\277U\333\026\277G\275\376>Z\335\006?\245\357\221?\244\371\222?\350\221\267?\233\331\263?m\'!?4\301G\276O\331\'\277X!\201>\255\024\254>b!\321>\372F\377=\024\033\'\277\230\363\244\277\332\250\215\277b\310\237\276\270\364\245\277\300\025s\276sw\274\276\0004\377;\343m{\277\006\300\200\276\300+\235\276\022\303\250>\204\231D\277@U\316\277\\\352\204\277\231\214\301\277:\311\317\276\345\336\264\277+?\264\277nP\223\277\025\315\270\2779\236X\277K\323\021\277\010I\t\276\262`\274\2769\247\240\276\265\360g\276\246B1\277\312Z\222?\356\003\316?\223W\254?\312\317\252?\036\276\310?D\205\026@q\003\003@\0330\270?\260\227\273?>&\231?\300\217\300?6\255\242?p3\202>D\275]?R\322\266?\362\014\220\276\213_\032?\234\035\235?\350\223/?lmw?\2244\211?G\345-?\247\210\233>\034\035\227?\221<$\276\246}\344>\024\340\307?\020k\254>^\341)\277_%\024\277\010\312\270=\315$/?\200\243|?\217\202\013?Q\225\311>\0372\022\276\377\266\025>$d\352<]\335.\277ni\322>\252\315>\276*\273\345>\270\'!?Q]\016?\230hL=d\035\374>x\"\026\277\224\225+>\031\"\000?vh]?\250uw?\026\300\267\276|\316\336>\300T\032\275m\302\212\276%\020[\277\032\235\302\277-\310\315\277\270\017p\276\302\265\254>\354.4?\310\343\317=\236\262\333>%P\241?\344\244\240?n\010\231?\340\026\\=\2010\t?\250\367\351\276\365\032\001\277\340\340\257\277D0\376\2778\334\371?\026B\327?h\377\215?\026\266\251?\306\347\014@0\002E?\352\036\303>\212\267\242>0D\260\276\362B^\277q\2608\277`S\255\277\260\273F\275\3058\223?\034\332\342?\0140\205?h\234\320?\022X\323\276\312e\027?}\225\353>(\263\210>\252P\253>\010%<=\262\370\263\275\036\221\243\276\252\r\223=\347\007\021?(\363_? \016\251?p-\232?\356H\322>M\032\035>V\213\365>8\254\365>\344\253\322>\3500\222>\261\324\245\276\003G\300\276\301\\\274\276\354\360\023\277t\223\247>\202\306\020\276\324C\351=\335\261\257\277X\260\300\276\371C,\277l\370[\277\347Tl\277\214\014\321=\35048>\251\325\310=\032\220\370=\372\265\036\276\010e\013?\306a\232>\374[3\276\017\301\027?x6\331=\341\345\"?\034\321M?\276\037\255?t\247\014?\205\306\221?x\242\n?:\001S?\214\'\027>\320\324M>\326W\030\275\237U~?\360\256\344>\001\362\010\277\2625-?5)\273\276\346\213M\276r#\007\276\013\237\323\276\257\020\346\276 \232\005\2778\371\005\277T\314S\276|c@?\264\371\213>\312#B>9\236\272=\300\351h;:\'\201\274]v\216>\023\317\224\277jat\277\030\343\253\277\302)\335\277\225J\203\277\355]\262\277@X\231\274E\357\221\276\332Q\254\276\352\377l\276X\333o\277`\2331\276\016\367]\276nA\303>b\372\250\277\217\032\316\277\361\276\003\300ac\252\277\022\350\237\277\264\331\343\277<B{\277z\"\204\276U\226\260\277\365:\214\277\006s0\277\213\307\307\276\330,\"?F\373\006\276\024\202\271>\216\305\240\276\030\001\302\276`f\352;\367\005\261?\021\203Z?`\331z?\005\351\363>\036s\t\276\340\205}\277Pu\324\277pb\365\276\336\030\326\275b\323\033\2772\003O\277m\315\314\276\361w\205\276\177\341\354\275\024\232\224\276\300z\337\276Kj\221\277|\030\204\277\t3J\277\010q\311=\225\2279\277\324\255\207\277B\231\306\276>\251[?<\t#?\3357#@\300k\372?\242\263\023@\302\035}?(\252\r?nwK\277\260\302\310\277\376=\206\277\370\2530\277\360\237R\276\3319s\276\006\003\272\276\304\3248\276\340<~\276p\247\250\276f\023\226\276\360\372@=\300\361P\277\214Y\235\276\262\243I\277AK\032\277\310X\203\277H\212\001\276\"d\255\277\234,\215\276\361c \276\340\377\367\275\222_\034\277e\202C\277^\271\245>\200p\230\275\n=2\277p\337\222\277\365\004\274\277\206\240\227\277\366F\003\277\224#\232\277\016\244\265>\363\372P?4\0007?x\007\243?\340[\350?\022\023\204?\3652Y?\0370\206?=\021\371>\300\350\005?>2\307>\320\002\246\275|\\\267>y\353>>=\361@\276@\240\377\276\364\312??\374\2006?\202\004\334>\366\222\244>\020X,\276*\032|\277\377ZH\277\237zp\277$\253\227\276b\366\241\276W\242\202\277\244\366\261\2776\344\236\277`\240m\275Z\336\017\277d\350N\276\262g\031\277\024\300_\277\036\214\237\277\003\344O\2773\267\032\277&\036\344\276_\265\360\276\207s8\277{7\002\277\261\217\232>\024\345\203=\030\272\303>\314\236\244\276\021\032\321\275+V\026?\016t\375?)y\006@p.\274?\374\020\217?\2146\024\276z\017\010?/\021&?k\203\000?\242{\000?\010\217\030\275Dx8?\334\022\262?\355\230\267\277\261h\266\277\334\332z\277\230\030\305\276\313\023K\277d\236\200\277\344\300\356>~\212\226?\002\3657?\344\221\n\277\034\330\372\276\254\247C\275*\t\226\275<~\000\277@\002\377<\021\215}>\316\271\377\276\303\317\214\2778\r\261\2768\306\227\276\315\316<\277*\320Y\276\177A\212\277\030_\234\276\r\020\026?\013\262\362>\351][?T\177\324\275\230I\204\276?_\202\276\031\342\230\277O\206\010?<\301\'?>s\207>\000R\263;#+!\277~\304\364\276\276\346[\276\203\225\033?M\223\n?\340\352\365>\241\304J?\000\333z?\272\333\322?\270\343\'@\315I\343?<\245\366?&G\007@Y\322\323?\020b\034@\315z\354?\027G\237?1H\331?\020d\314?\305\230\205?1Iv?\"E\233?\250Yd\276\025\026\001\277\225\325\312>D\317\252?,\317\252?>K\330?\"2\007@xx\246?\001\007\344?\022$\204?f\230\247?\020A\272?\201f\177?\202`\217?\241\240T?7\337\017?U\252\021?\000\315 \275\315I\250\277\256\"\210\277\353\004\302\277\226\376|\277\332E\360\277W*\364\277\362\320\253\277\353\322\340\277\334\247\222\277\260TC\277\322(\276\277\000.\265\277<Fn\277\320\025\013\275\264+\225\275\010\006E=\213\024\032\276`\267\\\277\260\235\273\277,\366\250\277}\000\310\277\024o->\024\360\271>\236\324\037>B\344\023\277\276K\261\276_\036\016?\006\302\261?\000G\351?\3262!@\016\362\364?)o\340?(\2138?\345\265\240?\360\311\335?\352\242\n@2\260\336?\250\022\021@\346.C@\365\322^@\303 j@U[E@\204`I@\216P8@L\213\031@\244U\336\277\303 T\277\020\310\243\276@\276j\274\202\n\351>\246\021\227?\351\345\305?&\340\370?\031\205\236?\253<\354>\252jr?\251\037\254?\306\000r?OCl?\356\315\033?{o&?\320D!\276)\3165>\010\355z\276\332\t\017\2777\205i\277vN\272\276\027\237Q\277\210\025\023\276\314J\002@\200@\277?\374\234\276?\215\364\334?Zp\316?\364\216*?\263.c?\202\350B\277d\241\250\277\240\376k\277Ft\275\276O\266\345\277\360\236\\\277\320\251u\277\277\203/\277dd\004\277{:\363\27695\247\276X*\226\276\247\277\344\277\0241!\300\032i\030\300\202\017\365\277UQ\"\300>\220\025?\377G\016\277\323\324\240\276\0321\213?r**?hM\034=^\346\351>\272\204*\277\354\343\024\277\347\214\354\276\352\346\230\276\204}\025=\361\243\257\275\200\024I\277\214\365\002\276\343\327\260\276\017\010[?\330EX?]\251\236?|\207\226\276t\234I\276\000\301\253\276\340\374k\276\021\017\207>)\342\302\276!m\257>S\210\276\276\224\t\250\277\230 u\277\201\016\254\277\024\224\177\277 n\350\277R\275\320\277\322\024\214\2776O\031\277\245K\303\2772\326A\277P=O>\026Q\022>\346\312\277>\320\357\375<\276\241\017\277\036\300M\277\2035\270\277\364\341C\276\374\004\231\276p-:\276\257\346\210\275\267\313\357?X\331\240?\034\377\230?^i\375>\347F\263\276l\257F\277\002\3221\277\367\326\203\277\200#C\277b\367?\277Zu6\277\"[\204\276\002\303\231>sIb?\334\016\327?\271\206\213?\212\217\026?\016\250\257?R\224*@\262$U@e?S@T\r\035@z :@l\371\014@\\c\377>0\323\340\274\367\205\223\276\320kZ\275>\276v\276\345\332\215>aR\203?\320\303\027\275\033\310\351\276\340N_\274\351-\236\275f-5\277\344d\321\276\016)d>2\256_?x\2464\275\243\343\n?\272\237u?&@D?\265\334\207?f\313\006?pUB\275\272\371t\277CI\244\277\262\016\t\275n\2129>h\202\001\277\212\374\342>\020\033Q\2753\013\375\275\240\305H\277>\343\304\277\306?\357\276A\370\205>\371\276E>\3401\350<(\006|>\276\037Y\277m\221\035\277\014z\235\277\202\372\371\277=z\213\27732\251\276p\002\262=\201\345\001?\336=\253\276\274\322\342\275%\224\\\275#\332\365\275\241\2372?\316\363>>@E\203;\3313P\2758\250A\276\000&(\274\034\211\307<\214o^\277\260\247\024\277(?\235>\240\261t<\023\220\246\275C\363\213\276\312\261\032\277\323\264\014\277\246\020\005\277\032\275\211\277T\343\345\277N\'\020\300\013+\036\300\0017=\277\206F\250\277\003n\241\276{\367\002@\363\227\337?\262\021\353?!\312|?k8\241?\354i\202>\210#\276\276x\311\031>\266?2?D\273k?\303^\271?\265@\010?\244\037E?\232Jc>\326T\376\276\325\355\247\277\250\243\363\277\007N*\300\214Q\002\3004M\n\300T\300\002\300\240\3579\275\320\322\337\275\260T\377<\303\021\310>\274`\203>\330\362\224?\262Ah?\251\244\'?~\027\200?\313\223\210?\324\213\036?\260M\276=\023\021G?\210\010\302?\314\226\314?\267\243\305?\257\314\262?\336\224\311?\254\302\007@L!\314?x\362\"@\034\346\211?\220\265\354?\303#\004@-\313\321?\\\300\263?\334\272\274>\201\355\035\277\274\212.\277nf\022>\255*\265=\236&\035?\336\317\032?p_\224=p\353\323\275l\366\006\277~,\204\277\372\326\366\277#SI\277\337.`\277\244\\\206\277\276J\254\277YW\240\2776\351\327\277\322-\313\277\037\372\327\277,\225T\277\2443\216\276\246\326@\275\276\214\241>c\032\325\276;@\267\277\235r.\27702\263=\377u\370>\376\\\021\277\243\314&\277\316O5\277\306\204Z\277\033\346\330\277A\274\022\300\023\232\236\277\002\035\331\277\262\221\024\277g\000C\277m\354\255>\365\366\020\277\247\325\321\277\274\364\340\277%Jr\277\000sa\275N\354\370\276\217\035\240\277\353\026y\277\254tf\277?\2563\277\3600\354\276\254}\t\277\300S\237\277!1\226\277\372c^\277$\013\227\277#\301\370\277\036\267\016\300gV\007\300r\236\225\277-\206d\277d\261H\277\014\320\232\277x,a\277\250\333\233\277,\'\002\300^\320\207\277%\253\374\276Z\223 \277\354L&\277\360\343\244\277\tt\032\3000\2178\300\373\3509?b\232\201>\270\211\277>$\2074?\007\213\272>p\267+?\354P\223?R\332A?\264s$?\376&g?\270\n\320==5\004\277\014\026g?\305m{?zK\234?\354S;?\035\0106?8\r\364>4p\220?\276\016E?rcb?Z\371\342?\366r\234?(\003\234>q\242\022\276\212\315(?\3608D=\2269N>rJ)\276\213*\226?\3165\267?<\232\316>x {\275\364\020\300>>sU?\222ZP?i\024\320?\300%\033\274\251\235\006?\n\303\341>\230\030\264>l\033\272?=\366\235?\030lQ>\025\352\275\277\300\021\021\275gc0\277\327\354]\277\222Z\007?\t\367^?\014\352\203>\022\r\325\276\356\376\323\276\030\211\n?\350\244F?\274\360?\277r\216g\277\220f\'\275\'EL=\274j >\036L\211=0\346\200>x\315p\275\325\342\'\277\325\rP\277\346\230\031\277y\255\212\277\331b\257\277.u\322\277mO \300\026\361c\300\344\0172\300\205u{\273\322[\027\277\304\322U\277\326\024\252\277M\023\302\2776S\241\277\256\"\211\277\000\321Y>\034k\226>\333rJ?\330i`?\023\3470?Os\257>G\024\003\277\000g\010\274\031g=>d\2027\275\316\360B\277\226\205\374\276 \310\310\274\266\016i\276f\235K\277\377y0\277\274\316\360\276\310\304\344\274^\347\335\276\350/\000\277x`\227\275=\262\223>\233\014\016>\277\010\242>\250:\326>\312\274\020\277 S9>+H\320=@*\226\276\354\241\250>(\036\025\275;h\216\277\342\314\320\277\264\277\367\277\377\315\317\277zgS\277\010fg\277M\002\206\277G\215[\277Fs\331\276\350p.\277\357(\244?0\3678?\322\365\013?\202\325J\276\031\257\026>\302\022\032\276\002D\363\276e8\275\276\245\037\020?\320o\241\275$\343-\275\022\345\271\275*U\233\277\022\002\022\277E\222k?>\307\226>x\310\337\275\026\246\237>:\363\272>\"=K?t:\327>\356\002d\276\214X\204>\300\037\327>\033X\010<k\267\312\275~\342\327\276\374\027\305\275\017\341\217\2777\034\265\277M\264\254\277~,F\277L#.\276sr\316\276F\236\352\2763\345\234\277\204\325\261\277\302\266\216\276\212\257z\276k#\272\276QL%\276\257\300\004>\000\235\327\276>\276P\277\203`;\277>l\367\276D\220\306\276=/\014?k\305\227>\314\301\027?\\^\202?X\237\265?\306-\226?M\025\201?\337\'\255?o|\013@\332:\237?L\320\213?\234\240\303>\214\307\261\275~\266\222\276\336B\233\276\224\375@\277\2616A\276\313\316_\2766\210\244\276r\206\001\277\213\260\347>\357\217\377?7\027\200?\2367\327?\327\345x??\005\361\277!\211\263\277\033\242\260\276\352\305\224\276XY\352\275\374\221\267\275\n\337\374>D\005\251\275\340\023\361\276\200\no\275k\376\030?\302\275\316>\301N\234>\356\354m\277\005\321\274\277\r\307\203\277s\302\253\277*\\\365\277\353\364\247\277\326\347\001\300D\245m\276[?\321\276\360\206[\277\310\267\034?j\227\207\276\306\340\364\276\000[$?y$0?i\316\274>\234[\'\2778d\336\275Q\033\306>\276\300\026?\034\315\226?\314\177t?\314\310\224?\264\342n?\036\312\203?\216\276\274?\340k\366\275Z|]?\241\002\266>L\0232?-\3037\2770=\252\275Ru\234\277\211\307I\277\020\3753\276\007J\001@W\203h?\006.\223?\222\217\302?\020\215\006?\300\233\022\275\256\273\265>\302\264\320?\334\230b?\230@\210>\314i\005?\356\311\033>\314\275\035=v\005x>n\005d\276A\326\267\277>\372\311\277\276\350\242\277\034\220=>\304g\366\276\354j\303\277\224\357\361\277\217\204\350\277\236;\000\300\263\277\200?+\356\022?4\223\350>\312W\345>8\235,=\245je?L\031\263?o\235\240?\326\n\344?\245\0249?B\027G>L\263\341<\346\033\257>\242\254\027?\344\311\001?v2d?N\330\310?\254D\002@XM\"?b\210\245>\352d\264=\314\022=>\037\004\301=d\260\215?\364\372\366\276\t\tG\277\242\260k\277\202#\223\277$\354\\\277[\331\224\277%v\271\276M\275\220\277\337w\207\277>\222i\277\217\247\026\277\316\352\261\276\270\0056\277S\217\027\277\271\307\032\277\322v\333\276e;\241\277\274\032&\277\260\013\261\275\003\203\310?\345\2247?\300mN\277v\237\247\277$b\231\277\306\334\200>z\372#?=h\004?\0253\327>\332\254\037?\317.\252?O\350\340?~\007\026@uU\323?\352\236\315?g\215@?_\335\010?\264\0275\277\035\303^\277\203ip\277\240\277\302\277\035\230\360\276\030f\351\277\001\306J\277\322\315\204\277\0021\357\2760N\315\274\226(F>2\210:\276L\263\363\277\370i\003\300\254v\323\277\372\266%\277\244P\341\276dem=\305\3014\277\241\252\"\277\004jL\2776\377\330\276\036\'\335\277F\326[\277\343\373\010\2774Os\276\005r8>j)+\277\237,\365\276`\003Z<\224\235\305?\274\205o?\340L\302?\020\320\n@J^\331?\212\200\265?P\211y?\220\332\320?\026\377\361>H8\303=?\010Z\2773\325\312\276\"\350\001\277\007\211\024?\020\202Q?\337\306\343>-\306\257>(\'U><(M?\200\301w?\366\334u?\314\353\321>|\216!?\236\352-?^\230\305>~\0078?\374@\226?\272X\265?\243e\215?\014|)?\365l\357\277\031\274\235\277\264\261\332\277^>\264\277\301\266\034\300\270\225\367\277Z\307\030\277\366-[\276$r\321\276\234\237\010\277\337fm\277&\254\235\277\014C\002\300\355\206\222\277\3355\341\277[\212$\300\016\'@\300\350_\216\300\214lb\300\333}\247\277\000\351\375<\177\245m\276\207nB\277\020\361\225\277.\257R\277\352\241\331\277\220\215\034\277Ls\305\276Rk\361\275\320\357\214\275\361S{?\t\033\371>\360<`=\001g\204\276\203b:??;j?\000gb\276\236\315I\277<8R\276%\252b\277\231\371\325\2768\247\"\277\"\002{\276\032V\240>\265\323v\277~f\263\276\331\201\240\277\024\312\311\277\330\237\313\276\031{\253\277\275K\222\277&?a\277E\262\023\277\276E\243\277\2300J\27786\311\277\224\301\323\276\251\251\027?\036n\014?\271\027;?\221\\>?~q\225?2\370\010@\r\251\024@8\300\335>\264\215\204?\034<\027\276`{\303\276\330\300\323\276\000\367)\277\366g\304\277\2341\333\277\303\t\032>\004\177%\276\010\236\217=J\010\331\276\006P\345>\306K\030?\201\216\327>\000]6\275\343\334l\276\364\215&\277\016\320\240\276\023\362\307\276\014\230\334\275\214\307\010\2760\344R\277h~G\277\222\177\350\276lkM\277d\236\211\277RF\304\277`|\244\277F=\332\277\327os\277:\376\024\277\016\374\217\2777<\037\277\336\350\252\277\212\3522\277V\274\274\277$\220\260>N>G\277T\256\220\277@\034-\276\022R\"\276\266\233;\276T\364\303>\243~\201\276z\270\252\2768:\375\276\020\314\220=J\025v\276\006\257\235\277XwR\277\226\356\232\277(l\250\276b\232l\277\373\"\n\277jx}>T\244N>\"\205N?8\320\233\276h\202\n\275aPR\277`\235z\277\301\245\034\277q\031\274\277b\274\270\277\344\000L\2774\276\270\276\000\310b\275v\217!\276\202\222\360\275XA\222\277`f*\2757/\305\275\377\306 \276~\300}\275:XP>,\351q>\214\233\303>\217\325\226>\010\247\243\276\256\241Q?\312\201\002\276\263\351L?\260\312G\275x\r\255=\347\013\215>\374\274\030?\364dn?\"\312\314?t?\241?b\005z?\n/s?n\240\312?\017\253=?N\326z?pX\256?\264\026\274?\252\260\247?\222\221W?\222\220\001?\234\351\313\275\346D\205=8\353\377\276\334\222\213\277\2626\317\277\027!\020\300\014\t\034\300\234\322\271\277X\370\205\277`A\016\277\362^\243>\275%_\277\336PS\277\202\274\351\276\227\220$\2776G\231\276\355 \016>\222\252\230\276\320\237\033\277\036\"\226\277\355\363\200\277rT\017\277F\306\246\277|\323`\277\371:\326\276\240\237\275\273\373\220\324\276\202\366:\277d!\016?\262[X>ad)?q\010\002\277\n\005E\277\300\2166<\354^6?{\365\210?\216by?\220\364\237\276\tt\003\277BI\342\276\"7\007>\221$\301>?\3274?\310\247k?H\221\336=n\017\017\276\350\'\236?\324C\247>@+<?\267i\010?\23635?{^\006?\237\320\236\2768\\!?f\372\270?\340q]>\024\323\234>\315\0026?oYB?\200\325F\274H\016\\>{\t\247\276\364\316\262\276\001\260\366\275<\240^\276\206(\211\275t)\023\276\330\035\321\276\254\302\235\276B\\\211=Bw\330\276\260\347f\277\035\215\207\277l(\377\275\237\031\001\276WJ\373=\363\341\300=\244\030\223\276\304\343\004\277\3402\303=o\242\255\276\276\325(\276\236\251\026\275\264f \277\314\345\000\277d\246a\277-\000\010\300\277\243\001\300\265A\247\277\220q_\277x\003]\277\213\211\330\277\004\320N\277DE\250\277\250C\245\277\305\013\206\277]~\312\277A\362\010\300\177\022\000\300\356\377#\277y\323\244\277\001r\203\277\354%0\277y\036\254\2776\264\322\277\310\273\270\276\\\370\002=\340(_?\020\000X>Pb{<:\2629?\265u_?\305wc?\000Q\323;\027\260\226\276f\207I?m\210??\240\222\021?\346-2?\267\343.?\346 \322?\247\201\217?:k\303?\242\310\326?|.\337\277\360\341\327\277b\215\314\277\326\030\230\277\006N\314\277\300\217\242\277D\216\272\277\270|\032\300\246F\020\300~\035\223\277/\354\255\277\t\3361\277\356/\n\277b\377\343\277\202\010\303\277\007\232#\277\022kl\277\232\370\312\277\235\365\010\300|\010\327\277x\322P\277j\356p\277\260F\317\277\251\233\242\277N\351m\276#\356\247\277g\275~\277 =\021\277|\370\030\277\230,\366=\251&\215\276\214\255b=\371\214v>\310\341O\275^\234;\277:\324z\276j\325\033\277P\304\017=\2707\364\276p$\013\276LW\313>\234\004n\276\262\307\203=t\346\231>\360\014\316>\270\265\212?\332\210s?\342=\234?\345X\362>\350\230\\?\252TX?\3318O?\370>,>\034\320\230\277`\0222\2778\370a\277\273\333k\277\252ZD\277zh\202\276\031Z\'\277\363q\005\277\n\371\037?\274h\261=af\215?\343\324f?\230G\224?\016L\023?\340\242\214\274+\252\003\277\010\330=\277+\300\005\277j\260\367\276g\032n?\003\t\251?\257x\244?\000O\252;\034\236U>/ \213\276\273\320d>\375\377.?8\322\230?\206\301\203?K\252D\277b#\243\277@\236\023\277\203\271T\277\n\340\014\277\373\210B\277\016\005\320\276\262\242X\276v\337\033\277ioB\277\226\310\313\276\025\311\217\276\244\027i>\213Q\252\276N\373I?\210\355^?P\262\030?\224\035\037?\326[\344>w\300\346>\331-$?_\220\013?\372`\220=7\2000?(k\'?T\032\220>\263=\257=X\300y\2766\327=\277|\247\013\276r\306\273\277\344\240\342\277~H\370\277\236\336\342\276Pl\357\276L\353T>\214\220T\275\350\271\221>+\346y\276\262\240 \277\252\376a\277\356\211\206\277\252\214\245\277\254\3536\277\276\274o>` \327\274\327+\t?D5\230?\372E`>\274\352\373<\273\251\207=B\263H>\037y3\276$\326\032>\244|[=\337\245v\276\250 \224\2779T{\277\263\261)\277\373K\223\277\350m\220\276\300~\201\277\205\345\223>YtC\277pU\030\276(3\200\277n1K\277p5\033=\010\2413\276\373s\234\277\351\355\312\276\030$_\277#\216\336\2761\0347\277\006\330i\277\315~\232\277N\214\257\277X\272u\277\204\241\376\276\262\316\207\276\000\024j9\240*I\276\251\360{>*i\004>\005\361\350=\"\260\227\2749\n\212?Q\306\020?e\337??K\316\213><\260\225>R\005\004\277V\262B\277\014g\354=Z\263\r\277\364y:\277|\035U\277$Z\264\2774*\302\277\266\301\344\277\333\321\307\277T\356\213\277\347\343\216\277\r\362\203\277x\341+\277\027:\221\277\316\320Q\276Lv\026\276\324K\201?\254\346\240?\2102\304\277\222Z\227\276\2541\027\277\342\217A\277\355]\220\277l\032\344\276\223Q\223\277\246z\235\277D\250]\277\254\030\252\277 \216\327\277\3207\252\277$\264\253\277\025\270\017\277`v\256\276\351i\242>\324\337r\275\200\236}\277\216\325\313>\240zk?u\303\361>\306\335\326?^\217\265?\326L\254?\261l\313\276j\315;?A~\335>\300\3674=\377F0>J\375\032?\3173?>*0\205\275B\t\320>O\177C?\3304\302\275e\"x?\243Z\212?.\274\021?\307\022\026?P\rk\276\207\265\205\277hy\251\277r\020\274\277$Ui\277\216\367\370\277\035:\024\300+\n\000\300v\262\301\277\305\022 \300\222\220\002\300JN0\300Y\351\327\277H\025Q\276\242\214\227\276\232S\233\275\346\036\247\276d\215$>d\233\220\276\360\035\266=\0106`>>\361\322>\366\261\235?T\001n?\032\314J?t\n\033?~\010\236?\237&j?B\230e?\336&\351?\360\205+@\222\336#@\204\255\010@!N\374>\250A5?D\325\346>\340\230\036?\203y.?\236y\337>\337\377/\276z\350\225\277|\352{\277\250\005\236\277p\263\254\277\372\221c\277R\307\356\277h\322\017\300f\213\001\300\'\023\334\277\016\354\366\277f;\022\277\226\201 \277V\374\321\276\220\231g\277\315t\271\277\264y\333\2776I\212\277\017\341\r?\221g\321>FF>?(\211^?\222.\337?4 \205>b\013\022\277\360\3733=\014pH\277\260\355q\276\024bi\276\350\020\366\274lU\024\275<\273D\277\355\367\033\277*Tq\276\335\264*?W\206\242?\340!\253?\030\362\226?>\213\251?@\311\371=4\372X?\340f\321\274T$\326\277\260m\352\277\246\271\230\277\016\261\374\276<\177s\277\t\3233\277\340\034[\276\241\'\234\276\243a\241>\324\014\302\275m\200\022\277\344\210P?\307\360\025?\000\324\365\274\030\352\223\277\336\266c\277\231\003\220\277\350\241\212\277\346\374q\277!\026\200\276\007\322\315\276\352ka\277\300KQ<\032Y\n?\001\'\374\276\365\302\t\277\276*\324\276\0061\026\277_2\033\277\315\233\r?\336\212[>\002\274@\2776/\261\276a<\002\276Z\016\261?\304L\225?\300\022\325?*\n\375?&\200\273?\370\277\265?\257\250\320?F\005\366>I\211\237\276B\354\343>\354W\276\276\004fE\277\030\000\227\277\\\3535>I\036\311\275\362B]?\240~\370\275\350\352\273\275C\033\306\276\230\307\237\275D1o>`\216\363\276\032)\303>i\022\306>q\344]\277\2161\201>\252\375%\277\025E\377\277uZ\215\277\261j\373\276`\343\031\275p\211\001\277\302\345\274\277Q}F\277\270k\254\275E\255\325\276X\264\236>\220\3669\275\333\313\220\277N\220\331\277J\223\331\277\347\344r\277H\2272\276\3173\325>Z\326!?n,\302>\356\215+>\210)U\275\323\301*>\225\271\016\276\026\326A\276\314\003\"\275c>\310>j\233\006?\322:M\277>@\244\276c\372\"\277\234\2741\277\224\336\266\277\236\363\201\277\344\335\215\277\000\372\217\277\246\204\203\277v\224X\277\246\013\354\276\370\302\305=\213q\302>\271\312\343>2\320\017\277\240\202\270\276\034\252\267\277\275\334\324\276`\360T\276r\235:\276\035\367\204\277\365\317\266\277\371\307/\277*\211\263\277\010\325\207\277\225\242\242\277\364\264O\277 \377n=\034\372>=\267G!> [m>\346\220\240?T\366\206\277N\004(\277\260\242M>\010P\275>\200:;\274\222\307\227>\304\307\373\275\010P\355\273P\247s\275Deu\277<\335\177\276J\331K\277\177U\030\277\262\346,\276\276q1?\324\307<?\210\214\271=\264\'\234\277\201J\203\277\324\032\336>\366\312\371=\000j\245\273\275:]?\304\"\\?\022w\325=\321?\003\2770d\334<\032i \277\252\007J\276\\4t>\2340T?\276L\267\276w\t{>,\010\365\275\242\343\271\277e6\026\2772\025\300>\362\210\223\276n\214c\277X\360\245\276\304\236\240\275\022G\226\274\013W\370>\014\032~\276\014\355\005\277\312\312d\277ZB\021\277z\205\262\276\251\373\217?\330\333\214=V&x?\225M\203?\240\3167>\200\305\004?\260+\211\275e[[>\262\032\246>\220w\232>\007<6>I %\277*c\337\275\324p\234\276($\322>\014WA\275L\224I\277\362\252Z\277\246|]>\"5\221>\023k\203>\343 d?L]j?\322\306\343>\222\007\273\276\303\357<?\3027B?\252\000V\276BH8>\022\r\014?\203\270=?\\\242>?\005\344A?\\\377\244?\272\255\001?\000\263\261\275\242\341\n?\000F/>(\220\316\275\224e\023>\205U(?P\257o?&hf?\270-\277=L\216Y?\204\033\247\277`(\006\300\312\005\241\277\022\310\306\277\"#\255\277Q\205\236\276\220\343\362\275\262\254w\276\322g\000?\004\017\343>\0207\265>H~\026>\316;\373\275W\023\301>\304\n\006\277L\270\'\277\262to\276{S=\277\227L\356\276\262\032+>\364\355U\275\350S[;\233\217;?\220nq?R0z?\371\207\253?\010.\251?\3370\"@\326\350\t@\006R\037@\030\325\327?\2727\266>\376{\236\276\341P\332\276y\246\330\2764\t\030\277>\245\203\276\004V\023\276\341W\206\277\271\325E\277\342\323\032\277hp\305>\352x$?\327\202\204?\220Si>N\201B?\022\321\247\276N\235&\277\254\335\026\277\217\357\245\277\035g\230\277\000\214\232?\310\255R?\314\007\311?\332\301\250?\364\271\352?G\337_?~\206y?\200\204\r=\372\0343>\366\361\002\276\247]:?\356\364\346>\370f\'?\035\262]?\336\202^?v\345\n?(\023i=\034\352\346\276zy>?(\333\367=\200\007\315>2\0379?\260H+=\220\233\t\277\323\335\330\277W)d\277\33463\277i\257\216>X\035\220=\372\022!?\366N\227>\024\311\344=%\003\331\276\336\252C\277\240\340I\275J\352X>\027\236\254?\200\267;?\265\215z?\363\312\355>\324X\357>\270\302a\275g\026-?\232\220B?\355K\211?\205\252\204?\370\365\333\275\307\311i\276.$t>\000\234\205\273\035\313\266\276\257\223\317\275\315\301\360\2768U\275\277\217\246\307\277\233\273\266\277\216\231\353\276\006\230W>F\360^>\222C\371>\274\002u?\026F\024>\352W\343>/\004R?\035\221\242?\300\344\356>\337\311\312?\302\370\344?\2645N?\250\340\027?\301\2178?c\202\005?#3\224\277\354v\230\277\260~\225\275\260\034\330> \216\362\274Z\375\312\274\341\226\202\276\341SO\2772\246\357\277xS\251\277\241A\271\277o:\221\277j\024\300\277F\307\367\277\3060\272\277$J\001\300\3359\033\300(\310\311\277}\277\205\277\256\343\226\277\256\355\376\277\202\377\031\300\3056\234\277\023 \366\276\010\372\277\277\306\332\272\277\025\202\225\277P\020\000>\215\222\023?\210\"\353>\362\227\243\275\003y\202>0\023\353\274zD\030>\220\336\177\277\246\3200\277\301\345>\277\030\223\177\277\302K\t?T\t\300>\346\327\372>\215\354#?\236E1?\020GF\276\256]l\276i\225\342\275\004\'\226>\327\313\306?qny>\215\320\251>\202\341|?\236\272a>\267\221\305\276\355\325\032>&\224T\277t!\010\276\271\200\016\276\356\350\345=\247\332\273\276\241u\336\276wL\277\276U\0214\277\270\200r\277xq\314\2776^\001\300\034[\026\277\211:\233\277\336eg\276\270X#\277\374=J\277\267\350\203\277\262\254\302>\016\340)\277~\272|\277\256{\262\276\224\201\303\275\016Hx?\325^m?n\201\272>BE\300>\000>\354>\204\321X=\276z\240=9\034\213\276M\323\236\276\222n\234\277\374\362@\276\273\240/?\020MW\276\372\033\322\2760\355\245>\350\203\366>\344\222}?O\006\221?\365\256e?\363\262\001?\230h\215\277\340*\301\276\364\353\003=\220e\007\276Dk\216?;y\331>\376\267\232?\233\002q?\360\017\333\2751\013a\277\350(P\277\216\225I\277\t\321\323\276~\301I\277[\256\221\277\330eO\277V\2607\277\230\2206\277\372\223\223\277:\354\363\277\271ej\277\351\020\205\277\220\032*\277\264yS\277\345\365Y>\275y\336>\372\306/\277\024\243\343\275\345^>?`W\321<\324uH?u$=?\212I\350>\020\001\337<P>k\277T\232m\277\273\030\237\277\347.\235\277\320@\221\277Z\222\220\277\272\331\365\276\224\003\305\276{C\206?\350\020->\352\271\341>\000\024\331\271 \207U>\3113\016?\321#\256?u\005U?\021\333\013?\010\336l>\0337\267?N\265\001?\327\377\275>\354\347\371>\364\022\200\276\254H&\277\020\203\322\276\260e;?\364J\016?\213\303\325>J\374\312>\000\206\211\272\214\032\370>\312\005_>\\\265\375\276\246\333\017\277\352\351\341\277\302\304\324\276\377tr\276#\'[\277I\223\216>\267\201\004?\354\010@\276FvX>-y7>\202\244\372\276\303%\211\276\230u\355=\254\215\243=9\274\357>f\306\221>\334\025\005\277^\353\034\2778S\007\277\024\036%\277\340@\366<\034\207\370=n\005(\277\034[\262=\325F\340\276\014\020s\277x&\204\277\020\263\327=\272L\016?$\342\"\277w\251\346\276\230\252\024>\013\367-\277>\376R\277\340Ea>\376&\317\276\265\r\340\277\323\231\362\277\322y\213\277\363b\377\276\323LZ\277\014IX\277Tj\311\277\270\024\220\275\375\322\201>\376\337 ?\227\327p?V\322_?\255\311G?!\n;?\342\323E?(:o?\254\262h>\312\226\366\277\350\026\371\277\006\t\007\300\221>x\277l8\270\276\343\016\355\276\376\027\r>w\227y?\276\214\343?z\3526@^\346\241?`\000\247?\347YJ?I\025#\277\260p-\277\265 d\277\216#\212>j\256$?\272f\030>\215\304D?:\325\351>f\366\215?\250.)>\233N:?\211Z\275\277_\271\311\277\360\213\027=\316\r\024\277l\233\212>\367e\027>\252UX=~3]\277\320\266\362\277PN+\277H\032\256\277\014W\310\277@W\001\300M\273\007\300\240\214\327\277j\363\010\300\272\231\241\277\016\\\266\277\312\331\372\276\240\262\024?f\375G?b,H\276b\333\316\276\352\361\231=\027\'e\276\240\017\232\274\220\371\177\277\215L-\277.\206\270\277\"y\000\277\320(^\277fh\201\277D\030\251\277\000tb\277J\316\220\276\260\336\215>\r\341^?\023\312`?\225\210\201\277[\246\203\277_9D\277\366\322\301\277\'9\276\276\340\377\355\275\312\034X\276\034\312\020\277@\325\263;\301\020\345\276\035\t+\276\270+\014\277;\n\030\277\274B\306\275\\6\364\275\362i\362\276\261\363\031\277N\241\030\277\304\251\243\2778\250\313\277X\037\252\277\371n\246\277\363\373\226\277D\232\355\277\030\333|>5\tT>\325\343\224\276R\336\231>\2734\371>\266\r\201?\212\321\226>\300\310n?H^\223\275\236\306\n\277D\366~\275t\375X<s\031\217>(\033\206>\034\347\261\276|\202\005\277\024\214\024\276\215\322F?\276{O>\266~4?\366\370}>\010;h=GCz\277\031U\303\277\373\232x\277\0311\346\276\334@\214\277\271m\237\277\250\324\244\277\375\006@\277^\004\234\276\277R\\\277\000\350\022:>\246\210>Le2\274\323q\255?Q>\020@\206\250\031@X]+@\302\205$@\272\325-@\356`2@\nUL@\0334U@xy2@\024y\030@\324\201\036@\207G9?\242\265\021?\362v\211?\212\264s? \372\321\275\254?3>t\207\260\276f\315\363\2764\271\033\277\276\2747\276\033p\231\277p\336\000\277\270mZ=\224\221\014?9\337\013?\240D\257?=\222\246?\352\036\260>\306\315\305>\204\365L\276#\206\344\276\316I\321\276j\322\205\277\255k[\277\314<7\276\2077-\277\260E\356\2743\253\256\277\224\002\275\277\320\321\354\277\312\334\252\276T\355Z\275\207\271\374>\252\352\322\276R(\203\277YUR\277\200\336\005;\2644\224\274 \273\351>\273\207\237?\3001\215?D\241\206?\320\rr=~$e\277\264\\Y\276\017d8?\330\301Z?\234=3>b\242\256?\034\362-?\215\021)?\202\336\346?\274o\257?j\021\243?\231\311\244?\024\004\224?\206\014n>\260\242\001?\216\320y\276d\250\310\276\316\255#\277\330\351\254>\351\257\300>\020\213\232?\242\210\267>\330o\254>\265q*>L\204\334<\225|\357\276\004\354\034\277\336\266\231\277`\210\201\277\253\014\373\276>\016)>~-\351>\350\255\250\276\020V\304\274\354H\206\276E\004\265\277\033\373\305\277\323M\226\277C$\310\277\200\273\n\300\022\216\266?\272\322\366?\363i\026@_3\342?\365V\341?\030!\211?\\\334\354>\2656\267\276V[3\277\366\251-\277b\325\202\277\265M\177\277\257\260\343\276\217<\277\276\0107\350<@\204\202?\376%\223><\223\231\276\255\210\321\276(\364\020?a\361f>N\235\376\276\370jy\276\342T\252=\212\'Q?\240\351O>\366\213\340>\260n\352<\025\264\022\277\322k\373\275\3604\262\276Y\310\231\277@\306\221\275\330\326c>\325\255\303?>\206\332?v\021y?x\265\364?\242\265\341?\344N\336>\303\334\031>@\371@<\334\210\003?L\317\353\276\304\247+=\245l\255>\366E\236=\316$\340=\\\336\266\276$\321\335?\214\344\036?\201\327\355>\334%M?2\312\267>T\237\276\276[\261\232\277\322\346B\276\020\243\004\277\224\277\037?\3417\254>\203\026\031?d\217\367=\330v\225\275\352\003\325\274l\366\006>\002\222\021\276\224\301\226\277Y%w\277TJ\252>\312\3722\277n\226\335\277\300rz\274\306\313\022\273\234\225O\277\033,\004\277\3140\210\277\243q\357\277\354i\203\277\021\023\334\276\360\323[?\360~\264\275\276s_\2769\300\262>\244X(>\242\340\013\277\034\316\360\276\350\030\251\277\270\207\211\277D\341\262>\020\374\005?(m\223?\212\215\370?\2650\371?\344\335\321?\343\311\256?\214\243\313>\235d\222?q4\244?\320k\">\323\224A\276n+\006?\356wK?E\213\037?\303\257 ?\014\360\226?Y\003\353>\330\227\315=\272\024g?N\244\317?\\\244D?\204$\n?(\364\016\276\346)\023?\264\311\230?`\223\230?h(\n@\017\360\351?\3548\202?z\3073?~\313\204?\t\273\301?Z\351\221?\235\301S?\004p}?\300G\335?F\006\241?\230\357\037>o`\016>\373\262S?\230\003,\275\324\233\363>\033\201\035\277\302\222J\277[Z\023\277|\265\031>L\210\325>\377\210\304>~\2360?|#/?\241\026\315?\234\315\321?2\306\320?\311i\364?\230jK?\200\327a\275P\263\207>F\3112>\347PU=\221\023\016\277\003j\032\277x\3537\276L\303n\276\354\331m\277R\303\342\276\350P\244\275\200`\300\275p\370\230>?\263\310>\210\n\320=>\343w\276\337\200\221>\243\217\205\277\0220\301\277\260\267\003\300\310o\272\277>\270\246\277\207\264\216\277\300\200\022\277\252\350\022\277\367\246\204\277\321\2415\277@\244J\276\314\232\004\277\362i\240\277\254)0\277\324\255\177\2773\365\221\277\274\364a\277}\235\037\277\3641\232\276~\002R\277\0301S>\311\245\311>,]M>\225\3016?\231\227H?\256\005\023?N\034)?\010\373\005\275aV\010\276\302\014\331=\2006\350\275\235o-\277|\352\200\277M\221\322\276\373\224\310\276`\337\217\275\244qA\275\244\374b?\t\262\360?#t\327?\213\262\356?i\355\341?\021\036\265?\260J\265?Yd\330?RO\375?\307\344\346?DV\002@\340\033\234?\026\"P?q\316\225?\231*\261?\246EK?\000\270\003\274\'\003\237\276\254\331\323\276Fq.\276;i\333\275\004\022(\277\356\235\351\276JE\027>PQ\032\277D\213\236\275j\322\375>OC\210>yp\000?\036K\315?*\3126?\231\254\372>*\222\225?T|\250?o\373\372>\203\353\032\277P\3125\277\316\245}\276E\"\274\276\306\2661\277\220FV\277\324[\344\277\226\231\251?2\311Y? Y3\275\265\376\027>6\017\330>\366\346V?\t\013\205>\3029\317\276@^\367;\347\353B\276\261\277 >:4Z?\030~Y\276\017\344m\277\t\320\230\277\275\0201\277B\374w\2772S\212>\344\006F?K\332\026?\014\321\226?\346\356\266?  \225?\370\341\204?\313y+?\240E\216\274\313\326V?\327&\343>\032\216s?g\270(?N\250\000?\305\255!?#u\203>\220\300\265\276\322\257#\277\016n=\277\320gP\2779J\010\277Bu;\277\204\\\327=\340\3609\276\375\000\200\275\305\212\256\276\276\333/\276\234\203\207\277\240Gh\277\334#\275\277\020\272\017>\000\003\004\300h\002\365\277\202\351H\277\342\236\302\277\020\252\266\277\264Y\037\3002k\313\277\237,\026\277\327\350c\277\024\251\230\276\r\345\337\276\"4\361\276T\t\206\277\232:\246\277\356\236\346\277\210\257\325\277\017\037\340\277?<\266\277\332r\271\277h\310\034\277\302\341\304\277\262a\352\277s\237\343\277\210~\241\277\020a\014@\225.\014@\221\317\035@\264\255\003@\204R\240?\206Vy?Pj\331>\367\253\334>\263\256\247?M3\023@\217%\014@\344,\013@\233{\030@\370\277\231?z\255v?\022\207\267\276\355b\003\277Zqj\277\220\343\254\276\200.#;\"\326\363>\022\247\330>\340H\326=\213)J\277j\002\250\277\332\264\201\277\014\233.\277\336\272E\276F\323Y\276X\263\274\274\2515\324>\274&J?\252B\267\276\360\003\004\277\351\230I\277\250&\r\277\234\030\213\2774U9\277 \305\257\275\2477\360>|\202\212=\225#\215>H\374\036?\372\274s?\310\177\221>\205)\246>\366\244\262>\211\201\223>Ww\264?\026\372\240?\030IV>\n\"\\\276\005\231\353\276%/\256>\204\324\240\275~\227\255=E\245\003?\002\\\027\276\252|\254\2768\023<\277\030d\233\275\020\2116\277\237\230\334\277\002\367\211\277&\240\003\277p\271\t\276\030\r\363\274\210(O<\344\t1\277\000\374\000\277\250\271:\276!lB?S\036\233\277,L\371\276)\216X\276\013\351\271\276<\177\020?\242\203\316=\341\323%\277\220N\240\277\033\237\220\277\322|\032\277}\373l?\220~\250=\317s\033?\346\357\215>z+\203\275\205L\230\277R\317x\277~\276\010\277r\354G\277\3671\375\276\300\032\376\273rV\223=B\253\277=\376\020\367<\357yN\277,b\237\277h\020\301\276\254Z\220=\306\274M>\324\242\024?\2227\222\276>\261\271\276F\034\001\277N&m\277A\311,\277\246\276\237\277\000\2361\277,|\032\276\260\234H=\364\212\211\277\026~\262\277\302\035\256\277^1\374\276N5\213\277\226\226\036?\207\370\255?@\245\236<\346 #>P!s?\215=\002?\000a\226:\210]y\276\243\377\001\277\3328\261\276\206\346e>t\305\337>\362\226.\277\311_-\277\250:\026\277\3468\033\276+[\203\277\260\241\243\277(\004%\277\223\010z\277 \321\263\274?\007\262>j/\202?$\324\277?[Z\n@\356G\323?\364\261\273?vD\333?T\002\312\276\220\341\302=\010W\355>\036K\262>\230\273\350>`\274\017\277 \276\201\274\326C\026\275\332@\273\276\212l5\277\032\231Q\277\007+o\277+\350M\277\304\216\005\276g`\014?\330\314\200? \006)?\251\351\245?\021\315\257?N\304\354?d\356\203?\342\352\261?\340\356\272>F\300\300\276\226@\247\277\346\366\257\277\023\234\200\277\336.\374\277f\265,\300\005\214\026\300\344\037\231\277\\\033\322\277\272+\010\300M\267\302\277\030GS\277(\025\226\277\220\226K\277-1\237\277@\010\320\275\366\277\024\276\340\264\362\276X\373T=\324VC\276\310l9\277\236\264&\277\206&\306\277\'%\000\277\327F\037\277T\t\271>Ss\007?^Z|?\223n\227?H\227\314?\\.\331?\371!\010@0\016\017@\263\266\013@\330\311\306?\2011\315?\240\202\347<h7I;\332\004\301\276V\337\031?\330;s\276\346u\375>\206a\023\276\027\333+\276 7\316\276\254\177\203\276P\263b=\364b\313\274\247\212\'?\372\3728\277|\237\245=\364JR\276\355]}>yW\200>\250\202\302>T&\\\276\370\224G=\247\332b>b/r\276#\351\233\277\200g\301\277\256\000\202\277\236\333\244\277\365E\200\277\335\255T\277\211\231\322\276\253|(\277\322I1\276[\330\004\276\0165\362\2768o\016\277\006\260B\277\020i\332=\023\267\323\276bX\253\277`v\261\277X\010*\276\000\333`\276\364\376v\275\341\013\254\276`6\263\273\254\373(?O\356f?:\271l?\010\033\025>\220\237\324>}+\034>jD/?\034\332\217\276\237\031\310>N\370\n?\002\032d>\327\255\237>~a\n?\2277\004@\032\223\023@\004\223\265?\\.\021\277,\2020\276J\022\346>\3719$?\240\347v\277\022\226\201\277\224>\312\277\231\035\017\300\224d\372\2770\256(\300\361\006\007\300x]$\277\n\356m\276\n]\'\276\323\241\213\276\216z\335=W\312\020?0ZP>\360T@?\316\022\037?\342\327\226?\242z\261?\316\222\021@\370\352\273?>\365?\275\242I\226>\322C\317>W?\242?\204\320\300>\020\321\315\276\330\323\271>\326,\202?l\022\007?\242\306o?\226\253g?\200\352\023=\367&\251\276Ga)\2776\006\213?\330\2647\276`?\215\277\302P\222\277(\322\263\277\351\'\221\277X\270\265\277\036VZ\277r;\216\277\354\212\252\2770@\354\277\301hq\277\323\335\276\277\202\245\326\276x{A\277|\3142\277\364/\231\277\nVm\277.\267\230\277\235\317\324\277\302\026\014\300$\307\013\300\002\372\014\300\321\233$\300}0]\277\266\211)\277<\325\207\277\320\366\035\277\001\354\353\276\346\\\222\276\334\356a\276vC\207\276\364(\017?\274\201\223?\240R\272?\316\265Q?vc\252?Z3\250?\362\357\007?S\177\320>\245\0346\277|e\000?y\376t?\274\237o? o\034?\257\247\337>\301F\321?3\344{?\204\226\275>\230)\220\276\216\027\213\276\2202\201>\251\345\241?\0257\034?v\262v>\332\230\345>u\310=\277\222X\246\277=O\033\277~8\350\276T\302\014\277\340\277K=yCv\276\222pT\277k\265;\277\231\207\364>\240\315\226>.E\'\276\320\230\006\277\331\273\371\276\230U\202\277Gk\253\2775\000\301\277<\341\014\277\350\032\252=&aa\276\250\2727\277\316U{\277\333\374\273\277N\366\277\277\324\301\340\277\240\017\207\277\373\324\355>mo\347>^s\020>.;\263\276p\024\274>\007\347\231?P \262?.\225\017?\306\240\304=\234\322\000>`\200W?\325<\203?E^b?\025\235\325>\357\276\037\277\264\271\353\276\322\270\215\277\262\"\313\277\253\232<\277\'\2202\277\n\303W\277\370\016\376\277\330\306\332\277\'\035\302\277\326\366\002\276\340;\205=\234h\342>\006\316\214?\020\346\351\2756\311\362>\022z$\276\254\034U\276\013\265\211\277:\225\024\277\262\243\013\277`\312~\2752\255\361\276\251(\265\276\300\263:\2770\363!=\337\373\234?\234H\354?9\345\221?m\250\217?lJ\320>\320\003\014>Z\223\244\275\311d)\277+\371N?\000\340<:\277\007\212?v|f?^E\235?\264\262\276?\341_\302?\216\274#@\321\370\333?\270Zr?\372i @\236\034\347?\342w\005@X\202A?\340\332\222\275;\266\230>\366\374&?6E\212?\304\201W?\200\013*\276\256+\315?\365\241\370?<8\030@\032}\333?O.F\277\314\342^\276\305~[\277\250\276\004\276\311\254\352\276\356o\000@M\325\267?\035|N?\004\371J?s\214\017?\026\003;\277\352\016U\277W\325\251\277b+\271\277\334s\373\277(\367>\277\3462\244\276_\035\301\276\262\215\010\277H3\\\277w\210\215\277\323`\257\277\232a\266\277\252\301\361\277\300Q=?~\006\267?\"3\244>y5\212>h.\326\275\243(\005\277&2O>\226_\250\276t\371@\277\233\017\317\276\332!Y\277<{\301\277\351\267\221\277\355<\261\277n\032}\277\230\233\025\275\2731\374\276V\345E\277\2331\314\276\350\313S\277\353@]\277\217\352\366\276FIG\277S\307\232\276\261 \326\277B\365<\277\233!l?\024P<>\370\355\221\275n\263[?|\347\264?\315\026\255?\300v\315<\264z_?o\"\020?\233\3250?D\346\027>\310\262*\274\224\344\344>ZB\"?:\001P?\204&D?\034=\033?\304,\322?}\270R?\260A0?~C\277>\265F\240?\264P\021\276\2136R?O>\n?\3604+?v\231\223?8T\206?[\032P? :\303?2c~?\205\355<?\246K\211?\277\214\226>\002\027J\276\265i\020\2776\233/\277\226Q\243\277\234\0243\2778\343w\277#\251\224\2774[\233\277\000\200X;-\224M\277\216\323\331\277R\267\343\276+b\024@\255\024\305?\261\204\232?\343.\257?\234\254\'?\310\332V?\250\263\307?\365d=?\231/>?\020\227!?H5\240?\007\366:?\370\231\201?\263\376\333?>\'\000@\303\023\307?$b\017@H3\013@9h\021@@\216\247?^\002\246>e\r\244?z\037\260>\211\253\010?3q\311\276\000\325\021\274\036\342\263=\324\202\254>\264I\003?\314,\232=F\2772\275>\234<?\330\214\323=\016\376\200?\335\253B?\006\333\325>\242C\025?\233_#?\0001\243?.-\302?\003\203\261?\030\264\206?\200\235~=\031\326\221\276L\355\244=q\276K?\360\211\332=Gk\216=AQ\032\277y\020\001\277\024\032\320\276\210i\022\277\250#\230\276i\214\315\276@\265O\275\335W\200\276\020\005\016<u \002\276\250V\032\277\314X\r\277|>f>\255=,>j\361\263\276\024\323\303=\266\2451>\2440\227>\3676;?\252\233\374>r\016d?\270?\r?\032\303\n\277\366\242\001?\231\036\234\276\352\032\262\276\026\270\375\276\016\362\201\276\345\340\000\276\317\034\261>i\014\002\277\311c\264\276\337k\206?s\260l?b\206z?\227\245+?\261\336\237?\330\265U?\200V\221\276F\341\212\275,\246\332=8\035\330=\301\237S\277 rd\277{\301\370\276\337\257\033\277>\026Y\277K\246D\277\036\020\322\276\016\212\227\276k\206j?\352\201\266?N\370\254\276\021U}>d\356K\2757\231\217?\206N[?8\254;?\n\252s?\010I\360=<\325\211>\020>\232?N\330\031?\376\230K?\000g;?\365\276\312?\005[\320?\254W\025?\017\341\016?S\254\323>\210\273\276\276P\302 =\342T\322?\223*\312?-\200\234?v\350\214?L\363\024?\302\273\342?\002f\210?\221\360R?\n\027x?>\032\344?F\276\224?\332L\345?\214\310\311?\353\350\225?v\035\274\276S\357O\277\220\305O=\322\233\323\275\033n\030\276\020\245\200>\261\"+\2768\246\261<\342\300\014\277\312CQ\276l??\300\017\020G\300\342\006E\300V$\036\300@A\016\300W\234\001\300NG%\300\r\321\021\300\352\302\354\277\256\240\356\277o\237\252\277\361\352\246\277\300\215\277\277\237f\204\277)\222\013\300\212\347\n\300\r\200\001\277\360\250\033\277$\236\241\277\254bT\276$\0053\277Xn\275\277\3001m\276\364\232:=R\"\240?\2029O?j\004Z?\344\350i?\002\224\244?\352\017-?\312V\222>\022\177\331?\026\325\006@\256\363\207>\335\023\216=1\204\272\276\235B\234\277\022ou\277!\017\357\276\211J\312\276\r\242\322>\305E9>\006 |>\022\224\205\276\3372\277\276\354\354\036\277&\217\021>\2501\265>f3\201?\356\221\271?\240\356S>\362&\006?\375\202\306>P\026\350<!u\026>~\372^\277\220\3007\277\203\344M\277\372XI\277\277\'\310\276x\rJ\277\360*\310\275\001S\250>\005O\315\276@\013$\277\351;\251\276\312\353\354>\305\230\200?\364\271\233\276\272\277\232\277E\016\003\300\007\035~\277\363 \342\277VhI\277q\304q?\304\262\327>\216\220\261>\274|\301\276Gj\211\277\026\230\312\276\240\323,?c\342\345>\212+\'\276k/$\277\262\216\310\277\344y=\276=\356\205\276\212\243\201\277\263Q=\277\n\234\326\276\232%i\277\"\300\001\277\351\271S?O\341\320>\376zT>\360p\000\276DA\257?\020\207\335?\354\362\364?F}s?\354\315\223?\246\207\277?l\365\252?\016\t\224?\302]\253?\342\222\004?\001S\023?\360|\360?\030\200D?\231u\272>\2424\215>x\000\001\277\226\2253\2766\215K\276\nmj\277\000j\343\274\246\235\344\276\310\276@?\242{\344?lX\352?Lx\324\277B\370)\300\356\224\007\3006\'o\277\021\365q\277\214\003\031\277B\256\010\277\320\351\224>\000\214\200= 5\327=\014\337\362=\214b[\275UH\305\275|6C\276\317:~\2770v1\277\260=\227\277B\255\345\276\332\356\227>;\214>\276\366\215\216\276\316k3\277\232\030\312\276\320\022\323\276\237+\263\277D\336\010\277ZQ\247>\342\016\003?\316?\304\276\365)\243\277\361\237\243\277d%\370\277\234s\215\276_\217\356\277V\363\036\300\202\r\037\300\232m#\300\n65\300\252#\025\300\315\352\313\277\026\347\025\277\026\355\236\276Y\020\246\276\351\273\226>~L\'?\000\027V\275\177\273V? &\213=\022\335\342?\343\364\272?s\253\336?m\215\211?\327\323\261?\306\323\366?O\240\220?\032\264q?0\215\261>\205M\202?=\326\352>H@o=\370\023\230>\266WR\2772\333\255\277\350\237=\277(B\267\275\252\377\263\276\312*\226?\227\2352?H\n\254>w\265\215>{\367I\276l\334\027\275\036\336\350\276X@\256\277\254\357\254\277\320vv\277\362\334\371\276\377\263\332\276\260\377\266=\252\272\007\276M\202\276\2773en\277tfV>YZ\302?\210\336\274>\366j\307=\362\275\266=\022\261\372>\314y\034\277\361\270\206\276\253S;>G\361\316?@\307\331=/\205\027>\000\354\372\274\270\0276>\ryQ\277\240\000\202\277\271c\202\277H\376j\277r\256\325\277E\033\323\277,\347\337\277\250\024e\276\352K\232\276 @\360\274\224*\357=\374n\356\275p\004,\275q\210\351\276\000\355\322;\314\374\006?\n\361)?\001(\212?\223\245\233?\244f\035\276C\367\035?\3144\255\276nZ\377\276v;\002>/\227\257>\020\001\334\276\360\326\215<\244\325\036\277|x1\276\330\267\207\276\2520\277\276\3462\345=\232\226\351\276\313>\236\277\036\212\206\2770\356\357\2778d\353\277\0269\267\277P\031 \277\234\326\220>:\266\343>\272$\024\276\276\3660>\276\341\364\276\314\375%>\000r8:et\303\275\346\000#\276P)I?\325\327\200?J\013\010?\260\336\326>S\357V\276\254\277\337>6\001U>\233\036\376>\n\022\210?\034zv>T\033S=\354\376\272\275upO\275\324\352\337\276\214=\302\276\"\232\331\276\021v\306\276t\026\\\276a\212p>u\235A?b\033\303>\220\'\"?N\006\202>\362I\345>C4\033\276\371)\367\275\"*\247\275~~\212?\\\367\344>\346p:?\363F&?$hj?\210\277\306?\227R\221?n\260&?\032\334\363>\036!|?\326\035\316?>}\274?\244;\016?j\r\024?\275(\014?\275\242\237?]\177\201?\224p\214?B\260\230?\205\031\200?L\010 ?3\227\360?\035g\016?h-\300>\340\235D?\346\266M?z\373\025?CX<?\257\265*>O\222+\2761\334b\277\336\3106?\340\273\244\275\330\370C?*\316\210\276\024\264\330\2754]\032\277\304\304\333\275 \"\326\276\030\033\010\275\307rE\277@S\263\276\320{5\277\270\205\250=\304\215\266\275\030\271\212?\330\316\224?\355\224\266?L\236\227?\326\0161?\261\353J?Z\247d>p\2515=\222\377\016?i^\225>\244\226s?\264%E\276\033\217\211>D\233f> \347\210<\034!\211?\257\313v?t\321\253=cC\203\276\"\262\261\276\0279n?\352w\306? \213\'@\027V\311?Z\2449\277.\234\225\276\332\376\204\277rW\306\276\231\013G\2774\214\222\276\272\370+?\3008\273>\002\227i>\363\004\221>^\265:?\236\264Y>\237)\025?x\210\227\276\330\273\r?2n\371>HV\246\276\006\363R\276\024\364\235\277\255=\210\277\264\353Z\277[\226f\277\254\303\262\275\036^!?\366\340\013\277\244g\265\275&n\032\276.sW?\30023<\241C\302=\271\177\274\276\246\027\023\277\226\014>\276t\300\357\276\n\203\034\277&\014\320\276V\302\350\276\274~3\277\274&\206?H\344\237?\372\017\334?\004V~?\014\202\355?\\\t\266?.\352\345?\030xf?\306\356\265?U^\037?\000\037\013\277\220\026{\277\367<\205\277\020\022Y\276dfd=\331?\236\275\300oh>\342x\026\277*)V\277\354S\240=\r\220\224?<B\001@\323\030l?\026\340\255?\260\304\340>\374\350\324\276R[\004\277\2711\217\277\213\221\261\277\356\265.\277X\325\265\277\020\226a>\200\311\004\274\336?\205\275#|\226\276\312M\257\277\243u\346\276\360\350e\277C\2712\277@\373\227\275h@\224>\177\262\032?\177\023\223?D\203P?\304\246\224?(\236\334?S\323\007@\203\354\340?\251\240\364?\334h\277?[\024\272?\216\021\213?\025l\230?\356\017M?H\374Y>\2106\216>@\300i?\354\306`\276\206\351\002\277\261b\"\277\260\344\222\277\322?\010\300a\224\240\277gs\207\277(*p\277\341\263J\277\232\331\324>\372\310\247>$\230\335\276\027J\271>\224\004\213=\030R-=\"\347$\276D3\204=J\242\256\276q\335\236>\224Q ?\224\264m>d8.\2776lT\277\'a>\277\234\346\026>\346\006*? OM?\353\241\310\2760\321n\275NN\227>p\177\364\274I\347\242\275\023c%?Ne~>\006\325\013\276\370\271Z\277x\346\247\277k^o\277\n1\204\277\310\005t\277m\267|\277\334\227\302\276\357)C\276r\345\271>uQ\021?\3008\235\274\3415\030?\312:\027>\262\204\235\276\226o\252\276\360 \360\276h\t]\275\253=\262\276\374\330j\276fj\242\275\036\225\365>\240\315\270<\2322b\277\320\223{\275n{\237\2756U\245>\225T\034?\025^\366\276,\335D\276\340:z\274\203\271\235\277W0\343\277\325\370\233\277\014\252\033\277:\255u\277\031\307[\277\033\232\207\277\251\374<\277\225\007\022\300<\312\241\277\311\337\022\277APT\277R\371\005\300\224\353#\300\354\335&\277\024\226\340\275\311v\342>\356\214<?\326\016\213?N\221\310>\276\314-?\226S(>(B\306>\301S.?\362\262\361>\256\216.\277\272B\243\277\224o\303\277N\227C\277\373\362\266\277\332h\307\277D\322\017\300\315\301i>\246\022\317\276b=.\277\274\210z\276\000\320&<4\371J\276\027t:\277>\034\236\276\332\002\350\275MX\367\276$\221\332=\\\327`\276J6T?\2647\203\275g\016\017?8\n\026>\032;3?\025\344K?\000\010`?Z\353I?H\303k?:[\220>\270\277F?o\006\301>\245\034\310\276\026\370\224\277\014\346\223\277+\211\262\277\241c\275\277\343\022\252\277\200\222\257\277\222\205\236\277G\037\210\277:\341\253\277\034\215\030\277\264\375q>\333\026t\276I\256,\277\241\322\003\277\013\305`\277\217\\o\276\331\331\304\276\210. \277Z\t\263\277h\307\306\275\341\233>\277\232\017&?\326\000(>\234\357G?(\264\243>\210I\241?\224\326.>\252\322\213\275\350\315\016?\276L\301>o,\023?\3663\206?\305\262D?\355\323\030?\013\315\275>\253=O>qn)\2774.^\277\352\343H\277\"\005\274\2776\347\320\277@\\\275\277\344\200\001\277w\327\360\276\2407\226\277\014\301\265\277\321\252z\277\370\2657>\3216#\276;N#\277\310\303\023>\215t\027?4\272D\276\2200\244>I#\206?\362O~\277YC\030\300\360\007\003\300\320\315\372\277\362.\275\277n4\366\277\007\020\230\277\250\337\201\277\204\270\354\276\'l\261\276\212\0275\277{\305\276\276\202\246-?L\244\214>\332\277p\276\204s\006\276\030\t\033?p\272\206>\223\235\034\276\2734\021\277\246\243\231>P!\355\275\004d\224>H$\225<\206|\246\276\336$\026\277\356\006,\276l\353\317\277\356\364\326\277G\037\232\277$\030\016\276\226&\255\276u~.\276\025V\017\277T;0\277\201;7\277\0000r:~7\251\276\370T\361=\010K\201>Y\036\240?\223C\263?\337\301e?\200\251$<\265\016\263=\200\264\202>B\\\231>w\201\202\276@# \277\314\027\330>,1#>\334\247$?\2733\213?L\365G?qy\204?\244&A>*>\007?\343\227\017?\202@y?\214\004\233?\244[\010?n\242[?\272\346\215?\270t\267?\317A\276>\344\037]?\271\316H?4=b?wbp?\307\205L?\0138m?\'v\223?P\007\307?\034\212K>t\027$\276\200q\251?\224\026\330>\334M\265=\177\240\256\276Tn\254>j\366\211>Wz\006?Tbz?\305\266\234?\372\372\311?\236\256\235?3\302\227?.\371\037>\335\333\272?\362D\355?|\"\202?T4v>\245\315\232\277AHm\277D88\277\262\266?\277A\3013\277.\360\203\2775cD\277\310\r\022\276\374\375q\276\246\331\032>\240~\021\277|\004\216\276\373]\364\276\256])\276UG\\\277\375\033X\277cs\232\277\373td\277.\007\332\276\370V\232\275T\342\245\277\266\262\262\276@\333\324\276\254\270\345>\266\342\305?j^\013@]p\301?\306\013\370>\375 !?0\277X?x;q?0\220\302\276H\235\371>\202\252\r?l1\253>\330k\"?\020p\217?\372[G?-\221e?_\256\205?\315\343\215?\3234w?\323o\317?\225t\204?\235\346\031@\n>\272?\352\255\305>\234\315\303=\021\244K\277V\241\213\2778A\253\277\3244\216\277\220\344\262\276\016\343:\277\"\241\t\277\320\2656\2763\315@?\324\373\225>o\226\263?\344Z\202?Hx\212?\\`\301?\312/\320?\242e\321?\020}\226?\256=s?l4\327><\242{\276\014D\262?Z\226\037?\000\322\307<|>7>o\256\014\277\214Qj\276\006+\311\276:2\r?5\303\205?\200\212\017?(\354\n\276V\271:>\364}L?\255`\202?\373\007D?a2\016@Km\205?p\341\031=.\024\017\276t\330\226\276q\033\016\277$\272-\277\300\370\355=di\373\275\334\250\346\276\305\317q\2769\007d\277k\'\000\277@\220\224\276x\254\310>\250\030\306>\240c\r<:\3159\276\307\3751\277\226-u\277\202\024\002\300@:\031\275@\227-=V+\221\276\374\233\257\276\330;\273\276\302\223\t>n\302Y?N\343\320>PY\374>XLR?\310mz?\270fN?|S\217\277\273\246<\277b\357\264\2763\273>\277\\T\010>\372\301\017\275\272\207\366=\270\314P\276\247\304\354\276@g\250=(r\266\275\000\002\330\276R^&\277\361\257|\277\200a\340;\253l\231\275\260{B>\351\027(>>\022J\276H\303\251\276\300\030\267\276\020\336\225=\27397?\365|\237>\271\233G?\355Rv?\334\265\356?S\223\370?\001i\322?\316\000\212?\237\360\362>\030]\234?\305\361\220?\242R\223?8IZ?\243\2469?\300\323\245=\242~l>\006\356z\277:\001\261\277B\222i\277\243l\202\277\315y\335\277,-u\2775\322%\277-\024\230\276.\367[\277\252\021\206\276\007V\201>\3105\244<D\020A?\360a+=\307\n#>\215F\346\276\210\276\342\276\330\250(\275\201\321%\276\214\'M\277iP\303\276\354\336\246\276\003\035\217\276\231\253\270>\256\210\366=\313\271\212\276\246\307\217\276\227\234o\277`1[\277\333\024\227\277G\334@\277\364\252\250\2765\000\336\276\244\262\265=\026\343\221?\272pj?\020\336\215?\242/\266?\356G\200?\215\310\273?5\353\331?\314\321c?c\261C?\002\222/?\243l\211?\200\036\'\274\360\326\316>\024\276\003\277!\327o\277h/\321\275pPD?\210\275i?\247\021\'?Y\277u?\010\016\273>\256\022%\276=\021\253>\325\307s?p\345\027?\330\301@?:\353\203>\030/\241>t\334\247>\016\374\306?\026\256\314?\330\257\306?Wv\241?\355n\234?\342\330\237?T\374\321?\252\216\006@`\227.@\250\263-@\214\350J@]5\332?\024H\232??t\253?\020\017r?X\016\327?\252\236\335?\341\302\353?\322\005\334?\274#\255\277\313\334L\277\307X\261\276P\255O\275\334\r\022\277\000!+<\350\235V\275]\271^\277\234\240@\277\000\220y;\210w[>\000\325\213?\023\330\222?<\"\350?&l|?aD\263?\364\032\312?\362\215\357?N$,@^\341E@e\2221?\004y4?\226\262\205?\312\\\361?!\316\020\277\272;V\277L\337R\277\224(_\277\222\206\r\277\317\0307?j=\217?k_\203?\370\214\034?k\006\004?o\004\271\276l\322\267=\214l\022\277\200\001\374;\260\227c?\322\"\222>\214\014\333>\254\217\324\275%`\211\277\022\301\217\277\240\221\326\277\222\007\303\277>S\242\2768\'\202>"
      }
    }
  }
}
node {
  name: "tensors/normalize_tensors/component_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 800
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        tensor_content: "\224DX\277\010\322\326=\366k\223\2743\001\264>4\376`?l\364\025?\222:t?\216\2004?\006\264\212?<\224\255>xX:\277\023\377\240\277\271\226\232\277\300\202\203\277\306\207z\277*\362\006\277\2763^?l\252\212=f\201,?\036%\206\276\200IB\277F\225#\277)_\'\277jQD\277\310\n\236>jm\245>\345\307\021?h\361\226?\265\341\227?\331\347\205?\250\331\247?\361\035\264?\017\305N?\200\"\211>\355\"\263?\320k\202?T\252\274>\334\330g>\200W\373<\256_*>bE@?\310\262\230?\310\371B?\322v\205?$\363\264>g\030\263>\372\351\021>n\203h\276\212\313 \277:\304\276>P\335\215>>\320\210=\212\207\264\277~\341\014\277_R\217\276\226>/\277n(\361\276\355&\210\277l\213V\277\336c\302\277B\324\302\277\202O:\277u\237\205\277\n\376\221\276>\025\275>\365\260\266?\234\252N?a\002\316\276\010\321\327\275`\250W\273\333v\200>\210\243\030?\305\205\232?tT\273>\273\333\255\277H\006d\277\250V\003\277\210K\246\277n\220a\277n\023?\276\266\241\253>`\t\343?\261n\020@\213}%@\327\321\014@\351tn?\276K\267>(\237\336\275\271\030\214\275N\350\341=\254\260x>*\356I\276W\307\006\277\r\336y\277r\347\315\276\262\006\036\277jA\t?\347\272q?z\n\372?t\0130@\rP\006@\267\211\302?\273\222\336?J\003\345?\272a\"?\307\215\235>\244\263\210?a%4?\205Ha>&\242*\276\027\275\306\277\340\272\223\277v\327\247\277\245i\241\277\331=\037\3005\036$\300\022\275Z\300X\365\022\300\324\207\022\300\250||\2779\3724\277\336\2147\277X\361\204\2770\303\276\277)\327\004\300\24708\300\"{\253\2778=\240\277\333\250\323\277\312\210v\277:_}\277\265\235x\277<\271\236\276\334B\007\277\2346d>~d\256\276X\375u\277\220\362\210\277\376r\200\277 \212%\277\241#m\277\360\315\022\2754\347\213;X\304\344>va%?\"\317\311>gI\031?\030Uw=\357\244\217>V\227\235?\304\027\366>P\326\275\274&h\351=\222r\351>\212H\200?\\<\267?\315\201!?J#\225?\316\202\315?\263gd?\244\0231>o\360\201\276&4\221?\210\303\323>\\\2751?\214\021a>x\325=?*.N?|\263\020\276h.&?<\365\225=1\336$\277\304\276\324\276r\371\036\276t@\326\276\370\275\031\275os\017?E\002-?:hi>\340\227U?h{\353\275.r\201>Y\340V\276\3409\305\277\020a\036\277\271)\207\2766\002)\276Ym\237\275\n\273\300\2760\316\035=\200c\342>\263\232\030? \371\263?\252o!@S\344\240?\277N\262>_\016k?\334\217\r?\342\270O?8\305\250\275+\326\204\277<E\007\300A\215\304\277v\240\366\2776\003_\277ny\277\276T\000\000>\177\371\246\276x>\270\276VF\304\277~l\307\277\232\240g\277\033W\232\277Ur\205\277\3201|=p6\315>\377NU\277\200\016\341<\214- \277`\023\305\276`A\220>\220\'\374>dBT?\235{K?\000n\023\272\0225\225\277SB\326\277\300\006\010\276\\5\n\277\352\200\312\277@4\311\277V\341:\277\000I5;\353f\365>\364K\221=+\363F?P\217\024=9\006\235\275\307]a>\305z\020?\365\214\004?\033I ?xO!?\316l\000?\374)\226=\006d\216=Z[\005\277\335\244\034\277\000\274@:r\370:>\204z\337\2760p\240<\216\321\302??\344\256?\320\255\235?r:\221?\304\372\366?\210e3@3\224\251?_\253U?\254\217m?:,\260?\211+\n?\340\347\317>\364\321\016\276\025\213\332\276\'n\025\276\000\215\337>6\334\022>\000\272\201\271\235\226\233>\307C\017>\351\275[\277\352\250\357\277XE\017\300\306~\367\277\254\343\315\277X\312\327\277\200$\007\300o\217\355\277\001;\031\300,\255\323\277>\202a\277\000D\240\277%\021\274\277.\036\213\277.\234\327\276\344\270\316\275\3711\276?G\020\300?\354\266\316?7A\026@z\276F?\323o\227?\rU\304?\344\273\271?\n\347\300?\350_@@\301\256P@\230z\352?a\r\310?0|\260?\020\364\225>\020\305\236?\364>\000?\000\t\256<\252 $>\334\202\377\276Z\323z\276\362,>\276\250\305\005\275\306Nu\277\201#\253?\356\353\261?\253(\236?\347\227\310>H(\355\275\005\016\203=/@\302\276:d\202\277\272\207-\277@\251\345>\226\024i>\210\225s>\260V\204?\220\237\230?\204#\">\221\036Z\2761\337\354=\367I\333=\253UL?\221\211\302?m}\202?\262\312\310?\316\240\326?\352\226\000@\272n\230?s\'\010@\\\374\233?I{\261?\035G,?T\375\255>A\261R?\354\013\307=hY\245\276$ \004>\271\214\035\277\362\371h\277H0\214\277\002Z\244\276b\306Z\277}\204\227\276be\251>\253\313A?4po?\212\001\013?V\242!>\2463\376>\257\353\370\276r\201b>\220-9?(\257\374=\004I\234\277i\261\026\277x\031\305\277`l\300\277\260\350\327\277\262\r\236\277\026\277*\277x\243\205=\245\275\236?\316\230\343>\270S$?-N\031?\200\007\215?@\217\005<\270-\301=\236\342.\276\254\342<\277\344K\243>h*0>\003\260\207=\250\234\203=Z\276U\277\310\206\333?9t\343?\207\005\345?\014\225\321?\322n\250?\227\004\250?D\267}?\320\367\215>k_\213>A\272d\277tV\202>\3129\230\275M?\217\276oY\370>\245K&?\022H\257?6\321\344?x\207\363\275\025\263T\277r/\031\277\240\254\265\276\344\323\236\277D|\341\277X\255d\276\2533\327??\003\204?q\311\355>\307\"X?\357\343\356>7\242\275\276\023W8\276^HR\277\336{\033\277\232\245\240\277\202\213:\277\266\364\300\277\270\020]>\240Zb\277~\244m?o\271\206? z\032?L\324\234?\345)\250?\232\200$?\367\327\020?}\177\330>\303\261\006>\364\257b\276 \375)\275c\253\006\277/Mm\276\361\026\036\277\213\374\030\277\234\273\304=p\363\236>\002\357\254\275~\207\276\276nT\030?\245\212=?\326IS?9\001-?\250\304\n\277\\,\235=2\207n?5\027\203?^<\302?R\035\021?\354\206D?\374H\361>\363\235\020?\r\334\216?t\221\234\276\242 _\277\320\037\202\277\256\325\254\277q\030\244\277\036s\220\277\\to\277u\313\235\277K`\316\277\342z\020\277\366T\325\2766\342&\277\370He\276\264\265\277\276R\177O\277\214\232\304\276\020\320\'\277 \373\241\274\216\301\210>\261\225!?\351#\'?\226C\267?\360\007\342?E\2472?T\022\343\276\335\355\213?\032\356P?\207\214\212>\347@\342>\354\200\351\276\316\250c\277B\303#\277`\242_\277\000.\253\277\252\372\364\277\324T\225\277\346\327\326\276\2249&\276\021\nq\277\272/)\276\257|\373>k\233$?\360\237\006=\270\254r\274\247\024\270\275\027\013\236\276\0243\217>\253\203\217\276\224D\312=\354R\317?\017CT?\316)\201>\341\\\017?\360\000U?\032X\024>\360\r(<\010\304\313>\221!\354>\354D\204\275(&\236>Gq\240>\216\221\215\277vI+\277\240\311\356>vaX\277O\210\353\276\243\2671\277 \216\033>6Z\273>8\360B?\224\333\235?\246\004\242?H\237{?\000qV?li\272?\320Al?\200\301\240\274\034\306F\275K\235\006?\350\225\255\275f:Z\276\304DN\277\344\245\352\277P\263\264\277\311\277\255\277u\r\277\276\242\327\320\275\0165\246\276w\345\"\277\344\000r\276:\377J\277\340\237\336\277EA[\277\345\373\272\276\213o\271\277\212@\273\277\230E\334\276\267\361\375\276x0+\277RJM\277<\"y>tl\205\275\266\272\236\276\3708\251>\272\257\023\2762\353\274\276\226\031\215\2770G\262\277\006\031\236\277\254p\272\277\317d\013\277R\236E\277\252\277\220\277f2X\277\014\t\004?<\270\201\276y\250^\276\0355\204?\n\350L?q\376%?q+\031?.\236p=\022\301\n\277\274\336\355=,\241\315\276\000;\265;I\003S\277\037\255\205\277|\"\256\277\245]\272\277\301\217\373\276z\010*\277`D\211\277`mP>\226d\304>\375\323\006?\300?\216=-}\230?\207\344T?\220\026\347\276\210G4\276\247\026F?M7\374?}\024\031@Rm\363?zCa\277 \263\232>\326\324\264>\324G!\277\216\375\264> \377\246>\246J\216\276\311\352i\277#_m\277\226\323\253\277-\320?\277R\331\214\276\304\n\002=q\214@?\240\365z=\266r\244>f\221c?\226\302\223?hX\027\276\214wr?hX\315?\324\316\315>X*=?^>%?\224R\367?\237\360\017@Z\216\"@^\\\263?QW\236?\366]1?\302\335\357>(i\256?S\230\000?$\324~?\310~\030?K\367\t?\262\033\362=]SW=\273\032\217\277H\031\301=\263]0\277\377\230\036?C\211\247?\210\357b?6\307\220>,\341\230?\330\230$>(?n\274\022\245\305?\020,\341?\266:d?*\017\247?\243\305\312?\235\354d? \252\004\276\032\000\370>\020\006\363>\250\r\221\276\022N\035>\242\330\025?\263\017\210>ZE\222\275\331z\213?\240\tU=\253\2630?@\242\032=[\3328\277\222\213]\277\264\274\n\277\354\217\201\276\025\032\214\276\"\177j\277\262$|?\260z\333?\365\\\371?\270\n\366?\210*\254?\237x\307?0\247{?t\212o?T{$?\220\275\321\275\354\020\316\274\206\341\271>\26252?\230\303q?\253G/?\260Fl?\241\220*?\304\236\310?t\235(?\326\206\233?\364\034\230?\230\014$\276dv\301\274\014T\036\276\255@\204\277iL\243\277\n\202\360\276\351\266\370\276\350\214\005\277qm\024\277\376I\013\276\2547\034?x\010\257?\241\267\006@r;\010@\306T @!\257\020@\351\311\001@n\222:?*vT?\030\337$=5o7?\024\203|?l6z?\214\177P?\220\275\241\275[0\304>\202\243\223>D\007\262\276\246\371e\277\273\001\322\277\036X\313\277\231\240\306\277Q9\210\2775\'\272\277\220\r\347\277h\342\361\277,{\276\277(\032\335\277\227\214\264\277r\375\263\277\333y\205\277\252\232Z\277\036\212s\277\034\211v>\\\031F>gq\333=\255{\310=.QT>\361r\231=|\367\233>\333\2112?\n\365\025\276\014\021\204\277\"\272\316\277\n\265\256\277 \231\315\277\016\334s\277/\314g\277n\233\306\2771\'\277\277.\361\321\276!\232.>\217\271j\276U\363e\277\200\022\247\277Of\"\277\2307\241\275zw\321\276\2364\361\275A\225\210\276-\205Y\277\0267c\277\370\200\030\276\354\305\273\276\363\310E\277\354\352\273>\367\250\016?u\323\205?\271\307+?\234\364\364=B)\226?\310\267\"?\324\244K?\264\251<?\001jM?\2373`?i\260T?Y\013d?.?\201?\370\n\250=\235X$>\310\000\231\275F0\031=\177n\030\276\352\207\241\276r\033\270\2755|\243=O\031\376>`\005o\274ph\246\276i`\373>\024\252\257=\261Z\t=\221\\\273\276\027\257\247\276v\0106>\211\216\220\2764]:\277\037\200\320\277+\010\006\277+D\353\276\\\200\262\276~\350i\276\333\375\225==^$\277\030z6\275\227e9?\353u\250\276\342P_\276\333\255\246\276\356{\270\277\254\323\220\277\216Lb\277\300\233\036\275#\354\326>\273\037D?R\362\254>\344\337\305=G\363\017>e\257\222\277\320S\324\275\263u\332>\320w\234?\233\261\213?\300R\264?\257\270\350?>\233\265?\022$\022?\223\311\"\277\027\341\302\276q\201\245\277\364k\254\277\230\272m\276\220\236\252\276\373\356\027\277\200F\234<\226jR?\334SY?P\021\004>\2472\t\277\360AL\277x\322\216\275\014\3756\276\255\216\017>\340\362U?X\352K>\262\033\027\277!\0269\277\014\263B\277,X\223\277\332+\005\277(\326\230\276,j\243\277\230v\265\2760-\355\276\3401{=\033t|?\223j ?\002\323\207>:a\364\276\177\347\023\277\006_\312?\357\024\321?0\343\273\275\237?7\277\364\352\271\277\310}\303\277\204\253\205\277\244\274\243\277\361-\024\277iz\253\2773v\241\277\335\036\254\277N\343r\277>]e\277\304\235H\277\2203\006\276xR-\276PE\307>\336\342\200>\274`i>]\013\244\277h\243\320\277q\272\240\277\207hX\277\222v.\276D\370\r\277\260\336\266\274M\304d?\"w7?\310(\222=\227\365\370>@\2278\274\237\222\257\277\000\323\230\274x\277\024?a8\035?\rOX?L\254\264>\372v\376=j\\\022? \256\342>\240\257\320\274\312Y\372\274;\203\323\276m\227\025?Y\226\275>\223\376\266?\364\212\210?\tq^\277\230\264\"\2776\0144>\003\010#?\25021?\333\033\273>4X\364\276\207\356+\277\014\232l\277\320\306r\275#\235\017?>K5?r\212\232?\222\033T?6\326\340\276\344V#?:\255\217?\210\373\262?*\255\317?IU\334?t\330\261?j\370\206?0\354o?\334\360\336?\212\372\317>\352\367j>\020\036\304\276uG}\277\300\313\232=\020\243\342\2766\202%\277\361\343\204\277t\2168\277\200n\226\277\234\024,\276\027\301\245\276\367\332K\277O@\242\276\000\"S\277\366D\005\277D\023m\277D\224N\277\304\262N\277\000\032\234\272xo\207\276\247\034\221\277\000\362\201\277\334O\237\276,\243\260>P\204\022\274M|\207\276\360N\334\276\362\036z\276^\233\302\276\2124\234\276juY\277X\275\222\2755\302\027\277w<\035\276\0016K\276J2\024\277\313\247\320\277x\340\351\276\225v!\277\313\302W\277\214?r\277\216y\323\277o({\277\346\205\'\277\034\0334\277\325\355\272\276\216\362(\277\323&\227?J\273\243?\004vf?@5\200?\356\260\225?x\252B?P\356\023=\240\225\201\276\376\036H>\313\3562?\310Kb?P\340\021=9\3712\275%\\\032\277d\300h\277>\204;\277\320\263&\275\016~+\276`\336\311\273-\0003?\240\025\223>p\213[?\022\337\'\277B\264t\2770MJ\277\2662{\277\021\301n\277\014\200t\277*\241r\277\024\231\"\277\322\014\273\2760\027,\277\017\327s\277\364\226\265\277\357S\246\277\276-\351\277\300v}\276\243\270\237\277\202\245\266\277!\020\237\277\377{\224\277\330\235\021\277\260\203\n=-\365G?2\335\010\277\216\245\\>\242z\014?\377B+?\200t\r?~2[?\311m\247?]\360\277?c\343z?\325\355\225?\374X\206>$ \024?\216\233\257?\252\204`?\306\235\204>6\202\344\275\025\305\025\277\005`\031\277,yM\277C=\202\2778\265\341\277\212\2455\277)r\023\277\020\363\264=\343\377\304\276\260\332\231\276\265\262\366\276\034\001&?\\\307\305\2765\344\242>\2308\213=`\337\033\277 \315\306\277\234u\315\277`\232\220\277\215y\355\276:\303\340\277v\370\244\276)\253\323>c\200\213?\225\021V?\317\364\000?*\330\"?,\305\210\276up\255\276>\260\264\276\256\262\000>\277\3632\277g1\035\277\310\315\346\276\034\206\274\276\330\206\235\275\270\n\205\277\3006\226\277}\362\311\277D#S\277\243Y\213\276\261P\266\277w4\200\277\006\226\324\277\360L\364\276\252\350}\277l\024\023\277\343H^?\324D\345=\377\234\234\276\241\322\266\276\225\224<\277\334\324\212\275>\216?\276%I9\277B\235?\277r\344\271\276t\247[?6[\352>-fF?@\t\357<^6\023\275\366$\253>j\371/?n\330\013?\376\005C?\277\333\201?\240H\337=\256q >\362\240\206\275|\357\370\275<\277\222?:\334\227?\321\337\205?\021?\264?\316W\233?(\230\010@\376s\204?=\343\232?\347x\013?\210\177\230?k\377\014?v->>\"uh\276R\242\216>\252\347#\276\220Q,>\371\363_>I7H?\032@\263?MM\346?\\\"\035@\222O\220?\274,j>\342<H\276\3643S>hv\315?C\272\037@\030\257\377? \322\356?Q<\000@\200/\307?\226l\261?\216\277\253?\\\341\250?Z\006\274?F@\243?\367\242\307?)\363\004?\357\025\255\276>\213\303\276\354g\246\276e7,\277*sl\277x\023\352\275Rs\374=\034\333\206?{\331\271?\320\200N=\312\261\324>h\016.?k\225w\277\314\327T\277`\233\246\277t\302\306\277J\330!\277*\326\255\276\202\376/\277\234;\230>A\264\341\276v\027n\277d\275\315\277\330\000\366\277\2318\324\277\275\235\346\277\250\306g\277\300\235\223\277\300\332\242\275\177g4?\201g\301?\305\304r?\232a\211>\025\250\037?\346\355\200?\346\274\241?\272\036\355>\211\323\365>\002c\\?\3642\334?cc\307?\2343\221?xc\\>\037\230~\277;\'i\2775\236\347\276\035\252\306\277\246<\002\277\354\361z>\311\243\007?\373\274-\277\342u+\277B5\014\2776o\031?J1T?\370a\t?:zu>\362\336\213?s\n\217?@\332\006\275\036\3525\276\377x\005\277\310I\\\276n\235\272\276/\223\315\276\224\261\000?\260\306\230?\0179\231?b\372\321>fwI?\030?\247>\220\261\320\277\242\275\231\277\360\334T\277\364\253H\276\000\302\014\277\236\035\036\276\222-\001?GW>?\\\372U>\177\371L>\352D\304\2760\370\276<\000\220\377>\234\260\267\275\320\246(\276x&5\276\361\2054?\000h\22096\230\230\276\325\343\035\277\220\274\014>T\330\302>\030i\014?\007\217<?\216\200F?\024\203\260>Rp\344\276\200\321\220\273\256\314(>\364Y\022\277Q\014f\277O\323\234\277\355\335\336\276\017\320L>\220XS\277\3436X\277o\230\215\277\304\315z\277\240\035W\277\360\204\031>\313q\231\276\200%(\277W\033\026\277\006\305v\277vSj\277@Aj\275\032\004\036\2751\206\373\276\3209\254?T\307&?\331\214\264?\354\000\034?\016\316$?\264\035\311?\356\237\243?\353\001\232?0\322\265?<\271t> y\342>\336\215\326\275\306\"\005>r/\304\276\346\243]>\356\346\355\276\3120\037\276\377\262\266\275T\354\202\275\270\343}?\376\\\r>9p\313?$Z\225?\343\373\242?m\264\234\277\254\'=\276\310\377J\276\260\025\244\277\225~\336\277\034\335\264\277\273\2261\277Kp-\277\276\247\342\276p\331\206<\346m\007>\200\035\357\276\240\001\327=4\205\350>#\007-?\276\245\277>\2610\215?`\262i?G\341V?\232\266\244?\264\266\033\277O\200\022\277\314\204\031\277\3229\357\276\304\240,\277@7\007\277\375\302E\277\016q\267\276\236\375\360=,\370d\276\026\366\236>2\177\362>L\301A?\033?\252?ic\367?\'L\351?+ \r@\357^\013@\333V\322?N\270\317?6\2211@\273\355\036@I\220\023@\346\310\365?\277*B?\270\\\227\276\037\371\220\277\216W}\2770\257\255?\024\353h>=\232\007?vN\006?\260\377Z?\362\361g>\360Q\000\276{\204\035\276\242\335\215\276p\321\317\275\010C\337\274N{\316=\330\224o\276[k`\277J\226\201\277\243R\213\277\\\250\005>\370\357]=?Dt>\273\001\235>\010f\262\275\366\240U\277\341\221\205\277Ic\223\277~\353^\277*k\226\276\032\017\241\275j\026\321\275t\002\255\276\007\270U\276\263fW>s\330\304>\222\272K?\242\226+?C\340\'?\300[\323<K\275\013?Y\031=?\350\202.>\020@6<s\321o>I%\213\276|\332\214\277\266\354\302\276\207\007\362\276\304\344\370=\252<\370>\324\022\337>\222\024\264\274#\2438?\244\343r\276\274\223t\275\374\345 =\261\340p?\356;\243?U\212G?\0003\255=\224bo\276i:\254>\357<W>$\357\267\276D\345\226\277\010\265\271\277\203=\237\277D\037z\277\374\251\214\277\016\035\274\277\225cj\277\274\313\016\300\232\352\r\300\302R\337\277\366\204$\300\307(q>\210\313~>@\177\211<\211\235\024>\177\375*\277\212\277s\277D\255J\276\364\305\220<\252A\377<lq\310\276\343\303\026>\"\376b\276\222fu>\220YT<\315\315\000\277q\233\375\276\206\'O?\020\0302>2n\341>C\372F\277\246P`\277\277\321C\277\231\331\305\277*B\324\277\346\255%>\30035\274NNG?\266\347z?.\3167?:\251\215?\340y\265=f\256H?u\037\210?\3041\332>\366\321V\276\364\261(\277\256\300\006\277\356\256*\277L\301\231\277\233\203\230\277\036}\377\276\336\202~\277\320\3162=\033\033\020?d\327\033?\272\346y>i\263\013?,7^=\350\016\300=\204\326\333\276\372\203\246\276J\031\201\277\261\300\372\277\240\340\216\277\\\261\375\277\347\370\341\277=5\255\277F\306\017\300\271J\262\277\232\267\347\277`\340?=[\224#?\\-w\276\260\253!\277S\203\216\276\r\032-?\002{\353>\\-m\275\tp\267\276\351n\232\277oB\232\2772\310\232\277(\312\235\274\010\001A\275\253\\\222\277\262\3369\277h\'M>\252\031q?\226\'\007?\010\322\214>@\3461\277\220\376\307\277G#\314\277.\027\224\277\232G\243\277\210\231\215\277\270\267\221\277\201\372\004?(jd?ai5?t\261\202?\266\337v?$w#?ZD\014?\253\276\233?5\223\023?.3\021>\236\3612?zA5?\036\205\221?\353\220\235?\346\304\302?\301a\334>U>C?\\\016\207?.\272\266?|\016\210?\212*\345>\244PQ?\367\254\267?.\336\005@yS\342?1\207\356?T\265\264?\363\214\255?\223\316\263?\247a\310?\027\374\241?|]\236?\\\022\254?PH\245>\377\274\002?\250\376\027?.r\225\276\202\211\310\275n\301\250\276\334^\317\276P\270\200\275lr\n>\266m\036\277\354M\274\277d\272\006\300;\330e\27784\014\277\367\363\220\277\225Y\222\277\274z9\276\3278\366>\034\261\350\276\316\211\233\276\306\337\317\276N\250\251\277\256@\244\277\034\321\263\277\221u\232?L\'\252?@;\201\276B5\242\277\257\304\313\277\357\277\246\277;.\255\276\250\3542\277\340\226\245=(g\333\275\247\334|\277\004\263\214\277~\226!?\300\213\315=\320{\261?Z\336\372?\016) @+\014=?k\243=?\367\332\311?\000\354\266?\017\314\271?\370\037\366?`{3@\240P\006\276\024\214D\276\276OX?.\"\004@\231\340\357?v\243\025@\204\367\020@\246\010\274?\363\0221?\320\311\221?\310\237\022?`T2?\236J\306?$j\020?V\301\005?\260AH?\352nA\276|\301\361>\367\303\230\276-\0356\276\334\013\305>a\257~\276>.\223\275~\261\231>\247\303\272\276\264\357B\277\210\360\267=\005\005\324\276\227]y\276\250\346g\277!\300t\277\320\312l\277n\203\t\277\234.=\277\354\026\252\275\302q.?\002\005\214?\035c\360?B\363\337?\250G@@\2625/@(\306>@>2\315?@\233\236?\177B\261?\200\374\361>\014St?\340\367F?A\231z\277Va\017\277|\206/\277\334+!\276 \013\026?\340k\307>f\254\003\277\234\201\257>\002$\262=\226\305I\277\266\302\237\277D\322U\277\000\203\207\273\004Y\353\276\232>u\277V5_\27766\257\277Qd\022\277v?\224\277\220}\224=2j\314\276\324\032m\277\016\303\331\277\007%9\277\210\335\372=JL\022?\'\336\323>P?\304=T-N?L\213`?\376\324\214\277`\310\251\277\270o\033\277\234\3679\277dM\035\276\331,\005\277\342P\032?\234;\220?\376z\221?\230\213\372\275\303\031;?M\203<?\205\202v?fk\312?\004\006\351?\260w\266?\370;x>B,%=8{\363\277@\236\221\277<LR>\230\205\203\276[\005r?k\022\222?K\336y?\005\356\007?\3347\277\275\302a\036>h\246\227=\200\335\252>RXt?\345\001f?\016L\310?\236n\332?\tu\211?\300\254\274?\243\202\203?\314\270\005? \254c\277\302g\022\277\036\007j\276n\354\334\276w/\334\2764\227\246\2776I\031\300\260\r\367\277b@\301\277$\036\035\277SO\366\276/ST\277\031n\336\276\244\3074\275\255\216\205\277\272c\307\277\263\026\376\276D\002\341\276_\323\003\277~\220\275>\232\t\373\276\316:\313\276\300\'\206\275\177\305N\277\242\351\021\277c;\037\277\231\232)\277\246\022\336\276>7\205\277:C\267\276@\203\t=\016\243\372>K:\207?\316\235.?\344\001\002>\252\224\035>_\323$?\314\247\333>\004\317\355>\351\2643>rg\235\275\277\330\252=&\021\314\275\302^\316==u\034\277\267\363!\277;s\301\276\210\0055?\334\276\336>\224\357\007?\313n^?xSA>\2713\001\277\303\216O\277r\214\004\277\204\315s\277\031i\200\277\240C\336\2771\315\241\277\226}R\277\253\006\310>\300\376P>\322H\005\277,\000\224\276\266B\374\276@\342\342\275\033(x\276k\177\034>\024\032\353\275z%.\277\377\'\221\277\300Q\325\277\310\323\320\277\243\273\267\277\230\007\301\276\206\306\037\277\200\333\221\274\027Pw>@\243\\<\315\221O\276&\244\235\276\271\374\"\277\274\216c\2770\212\343\276 I\002\274\022\211\206>\357Yb?-\261R?h\013s\275\313\232/\277\337\"E\277\340O\203\277\250\n\235\277\327\243\217\277#\222\'\277h\n\202\275k\357A?\366.\332\276c\246\373\277V\216\313\277\242@\212\277b\033\260\277R\323\310\277\326\306+\277\017[D\277\225y\233\277/\275W\277\222\2763>:\306\017\277|\352\233\277J\030\323\277\014K\234\277\310-\010\277@\312\325<\354\020\003\277\323\263\023\277\210\n|\276\340\315\013\2762\247f\277\204\243\245\277\000\022\304>\202\343\023?\330\252,\276\277\014 \277\r\241\215\277\300)\265\275\303K\344\276\324\256\037>\311\200$>\213PW?\250\006H?\002w\327\2762\2422\277\317\233T\277k\323\'\277(\324\363\275\254\252\305\275\013\320\027\277;\'A\2774e\355\276R\027\177\277\331`\264\277{N\265\276\307\037\254\276OS\177\276\242<\353>\322\250\232>\214\233\000?\372\274\206>S~\275\276\306s\017\277We\034\277x7Y>\324\241\244=\265\"\314\2752t\225\277\001\353\262\277\010p\335\277s\026(\277\010\022\220?\022\261\222?\030\177\230?\366q\210?\016\213\322>\214\350\300>\006\376\220=\214\300\004>NR_?\3400*\274\006Z\257\276|i`\277uc\003\277\300\234\016\276\006w\272>\254b\363>B\351g\276\333\033\005>Fr\310\2765\347\033\277A\t\275\276\236\367\010?\342\017k?\247\331\255?\235p\325?\340[\322>\323\3166?\220^\200?h\216o>.o-?(>\014\276>\304M?b\013\214?r\t\251?M\026\375?\004G\031@\250\276\t@\360\360o=0\212\255\276\371*<\276\314\217\023\277\330\223%\276\032\350\026?9|\004?\036\255\034>EP\307>\375\014\272?r=\333>z\304u?/r\246?\224\315\217?\021\226\207?\274g\321>\222\217$?\304\245K\277\347\263S\277\320\335J?a\345\037?\2004\255>\264\240h?\221KZ?\034\3530\277\240\336P=\264\345\262\275yw\262\276RS\016?,\205\310?WT\343?\222\222\263?\341\374\347?\327\364\272?\004\254\265?\220aS?w\255=?\222w\264?\014\246\201?V\024\207?%\001\270?\351;\376>xh\205=\256\242\221\277\2058_\277T\225\022\2766\265\234\276\034\2350>\321\373\375\276\211\307\035\276%\357\205\277\002\004+\277X\343\365\276\244\"\017\277\375\245\375\276\334\376\014\277\260\017\021>\266\023\271>O\273\225?3\321\205\277\320\026\'>\344\024\027\277\030\252\211\277\230\316\233>\34471=\020\344\037\276\023*6??;\202>Y\312;?8\370k?=w\362>\232\000\334>\260\210\242=>5m\276tz\326\276\232~O\277\230\\C\277 \'\355\274\272\207\251\275\001\330\250>W\033/?\320\374\030?b\031\355>\355~\220>pR\352\274\032\317J>~+\250>v\302\024>\257\267\222>\277\214\000>I\304\"\277\336,\316\276\266\003#\277\324\277\312\276\276T\304\276\253Y\254\276\262\347{>\\\215\032?U\317&\277v4\332\275\353\330\016?\252\246\364>`\000\237>\247\352\242>\3329\327?\\\214\252?\032\274\320?\332f\360?g+\330?\345}\342?Bi\223?\003\231\312?\353\336a?\254\000\347=\'\032\010\277\250eX\276\334Na\277%<a\277d\275\315\277ud\205\277\256\346\203>`\245/?Q\251#?\240\276@\275\226C4\277\032\3527\276\t\004\021\277ZC\023?z\256D>\270S\243\274\263X\374=\323}\324\275\024\341/?\311\247\000?$\327\224? \034\225?\037g\333?\362\023\261?\273\244\362?\324\014\t?\3523\026?\356\324\204?\304G\177?XI\231?\230\r)?\205b,?\316\275\213?\227\031\255?\326\336\343>\256(\211>\330\252\272>\007\233\017?R(\212>\240\000/?\354\236.\276zA\264=3\243D\276\264\224\001\276\030\344\344\276\034\214I\276\210\200w\276\206e\034>\256\201F?a\342\317?~d\001?\250P\"?0vE?O\267\231?\274A\343\276\220|\215=.\004H?J\263\256\2760\330\376\274\010\326\r>\036\322o?\305\\\202?\204\314 ?\212]\264>\242\370\265>REu\277\261\245\216\277\014\000\243\277\220xB\277\022=w\277\003\313\330\276Z\354\213\276\000\300\242:\271\025L\277sS^\277 N\301\2772\342\364\276\023\020\253\277\212\237\266?L\001\216?\361\312\207?bE\337?\\#\247?\264\225x\276\035+.\276\215cE?\2360\313>gP\335>\302\020\035\277\344\367\035?4\373\227\276\027\277\237>\264\301\202>\004\354\215?\332\3072?\236\337\367>TV\263>\316\303P?\346\271\264?\005\244\201?\232\204\356?k%s?\332\216\237?\302\337\357?(TE?\222iF?\276(C?\260\235\213?\252\355\264>\324\210\346>vs=?j\223\200\277\340\232\224\277\2165\237\277\031l\276\277\311\t\257\277o\326\240\277eBc\277\230\266\346\275\352P\023\277\346\016 \276\036W\344\275\320\251\203\277KS\304\276`\367\006<\342l\230> \275c=\316v\336>\343\374W?\3165u?\367\305\210?\214\330\307?\261\350X?\376\3143?`\004R?\213\370[?\244\240O?\037\265\212>mr\302?\032\300\240?\204$\250>\034=\322>\256+m?\311\206t?1\215\324?Vhe?\030#\004>\000\350\013=\226\264o?l4 ?<1\236\276\334\177e=\264Xb?\306\273\021?\300\235\027?\030\030\224?\334\215\322?\210\223\217?\242f\345?\354\214\202?\212\223\200?V!\212?\202y0?\030\273\315=\316CG\276\321\0169?\242.\004?\211\274\360>\326\360;\276-\246\367=\337\3400>\370\020\361\276\341\020.\277\353\031\321\276\212\243\223\277\016\224&\300Y\301B\300AE\311\277\037\351\346\277`\256\257\277\252\212\244\277\277;\007\300x\371/\300\264\335.\300\201^.\300\310\'\010\300\304\261\\\277ty\'\277Nd\226\277j\372\031\277k\267\204\277$\316\234\277\317zk\277?;\020\277gw\212\277\340\255\370<\310\334\207\276i^\t\277\355\'7\277V\371\372\276,\034D\277\000\321\007=\247\247\323\275\364\373\316\276#W6?\230\277\373?\327\201\271?\304\265=?\234\364\013\276\362\204S\277\312d\264\277\255@\262\277\314d\207\276\273\\y>\344\325O?@y\273<\366J\355>\220\371G>\2337^\277iBE\277\224\312\204\277\3665\264\276\333\214*?\204\270\'?^\331>?\350\240\022>D\341\314>t\265\273\276])\027\277\302\226!\277\361?G?\374\217U?X\032\250?`\332\212?\213\370;? \334\262>=\273\002?\242\355\027>=]M>\200\003\037>\232y\022?*Ez>\217<\213\277\004\362`\276T\034}\277\006\330x\277\014\352\267\274lK\256>b\240\002\277\350\205V\276\201-v\277\373V\317\276c\271\205\277=\275J\277\271\003\242\277\2443\277\277_\035\346\277D\277\351\277X\253\233\277(\003\253\276r\032/\277\200\216\223>.\312.\277\266\010&\276\345\005\017\276P\360\026?|*\246\276\255\246\217\277\377\016\312\277\206\3751\300P\220\276\276\376\300\006\276\261\213\202\2770\277\234\2752\273\250>:\354,>*r\253>\247\177\247?\200\265P\275\t\002O\276\276\270=?\020\233\234=^\332\002\276\246\212\021\277z\241\226>4S\265?\311\343\002@\022\033\210?b\343\276?\300\300\302<\302\350\251\276&Gh\277I\210\034\277\256\364/\277`D\010=\346\244\376\276\310\001\342>\303\320X?p\375\004\276Z\374\325>\004D1\276I\"m\277\000\027\021\277\362\336\013\277\272*p\277F\027A\277@\004\254\277\253\r\330\277:\275\024\300N$:\300\223\003z\3001\277c\300\205\3508\300\306\325\315\277\360x\213\277\302\242\263\277-\236\034\277*\272[\277\250\010(?\020\215\271\275\367\200.?\266\215\357>C\367\243\276)N5?\021=\271>e\363\235\276+\216\205\276\030\n\256\276\342|,?\310Dw>\006\266\362\2761X\263\276\340\007\364>\031Qu>\006\001\267>\227\275\204>\210\022\233?\224\023\207>\2667\003?\016`\244?]\322\r?6\234\017>Y;\"\277\270\371c\277\370~\222\277\323\300\277\277\366\370^\277\260\277\233\277\346\272\212\277Z\372\333\276a\320\213\276c\352I\276\332\347\302>\266\030\202>\212!/?\203\001A?\264@\030?h\354\240\2768\363!\277\260kO>o7C>\n\3276\276v\210\014?6\000c>\312))>\361>;>\256\254\226?\336\313\202?\240\205\255?\371\353\237?r\034\216\276d\\\210\276\262\323H\277)H\257\276\371\022\335\276r\247\204?v2\276>\020\000U\276o\376V\276\206\250\316\277\017V\346\277Jv\330\277\027\361=\277\326\202\357\277\000l\310\2726\006\353>V8\001?{4\251>\270+;>|\277*?\323\n\203?\351~\343>H\324\035?\001C\245>.\247D\277v\367C\277IG-\277\\\247\241\276\231\000)?\037O\210?\242\355\211?\2461\327?&k\023@\270X\205?\244o\370?_\313\025@\340$,=\240\257+?\342$\345>FzU\276\317\003\325\276\326\214\231>\232\037\026?\200\316=\275\272CL?\256[\237?\374?\333?\010F\272?\362\240\202?\3303\321?\007o\321?\rP\324?\2225\030@h\200\001@\310w\017?\362\312`>\354\272\035\276\220\314\330\276\360\027\021\276\205\235\007\277\355\022o\2775\263\030?l\255o\276\324\370\360\276\275\035\216\277\001v5\277/\n@\277\361\ti\277\002\3741?@1<\274&)\034>\322\246\034?E\342\327?\202\267\254?\221u\303?&\263\323?\343\223t?\010\033\216?\362\025\354>\300\271\241>\346W\016?\363\022M?;;Q?\371\\\312>\365:!?\212f\001?Xa\220>\224GE\276E\275S\277\027\254\322\276~ e>=;\226>\324\036\210\277\016\263\025\300F\366\003\300\243\252\'\300?\026\024\300qG\020\300\217\216\031\300L\316Y\277\nD\010\277^w\313\277\262\303\253\276\325\373\347\276\330\366]\277Wk-\277\200i\000\276\014\021[>\310%\301=\360L)\277\022\246\242\277=\017!\277X\242I\275\264\230\346\275\306c\215>y\356\367>R\242\'>\275\322\260?\033\347 ?\352\340\211>\241;\211?\016 \252?\241\3627?\017+\007?\350\210\322=]>\205=yG\330>c\237\232?~\337\314?TBw?p\203i\275G\327\004?\376\210^?\2736\274?\244\367\017@\013\215\370?\022\310\026@\377K\025@\034\245\031@\006\352\252?\272\206#>\372\220\250=$o\215\276\n\300\237=+\004\332\275\324F@>Q\235\211>\277\017\330\276\240\374X<`z\310\275\032\371\221\276&|0>U\235\327>4}\217\275\365\303|\275\246\0340?\307\016X?\232v\325>\026`\301\276`\274\311\274=h\336>\210\245\'?\377\362\004?\0003\353>\340\214l?\321A\222?Sh\006?m\327.?\000*\021;7\"\236>b\005\005?\374\210\244>PWY>\333\361\017?\016.\205?\270rm?\004|u\276\372\274\025?n\216D?X\301]\275x0\224\275\234\014\344\276rl\341>p\0352>\340\207>\2754Fn\277\007\331\301\276\324\274\377\275q!\202?\376\312\264?\323)\237?p\223U>|\333\207>\206\220\251>\260\255P?\030\030F?\250\313/?0\215\354>\330$\222\275\020:9>P\367\022\277\212\262\361\276\240c7=\236\332c>16\276\276$\003\216\276#\366\016?Xc\347\275\t\034\r\276\337\003\240>]\t\224\276\256\227\025\277\342$\361\277L\313\265\277\377\265\330\277eg\300\277P\334\023=\302;\303=\300\275\002?\315\260\222?\334\335;?\026c\323>\250\270\347>\2422@?\2643\214?c\377\223?g1\215?\300\377\240?\250\377\007@\305\334\007@Q#\212?\200\006|<<\366\242<\336\0360?Z\320\242?\300\311\005?\021\004\026\2772\007\210\277\307m>\277\260\233\343\277\340N\206\277\226)V\277|h\013\276\221\246;\275\236\214\264\276\014\343\273\275\341\271\350>B\270\201\277\023\0256\277f\320z\277\317\367T\277\300\303\'\277\343\350\002?\2268\n?\314u\036?\256\021\334>\010\274\226=\253T\023\277\000\346\224\277\344I\270\2776\337\341?\344|\233?\237#\264?\032{\365>*\255\000@\272k#?,t\315>\234\362\352?\364\347\355?\236n\230?;\247;?\270nm?@\270\276=\330\t\177\276\245A\200\276\026\005G\277\tA?\277\366{G\277\274\202\222=\031\344\233\275\362h=>\246\256X?\"\370,?\341\337J>\204\027\220\276\365\336\347>\245\036\252>.k\215>\030\322\341<z\0255\276\034\233 =d3\'?\200\273\214<L\023\361=\232\037\022=1\026\313>~\277\222?\300N\006@\356\377\320?R6\226?KF\347?j\247\377?\303\342\211?\201\326\223?\204\355\312>\357\034\332>\037\027B\277\341\3645\277\223\334\317>\237\014\020?\203E;?\3562q?&\313\236\276\227\314v\276<\023\213=\342\362\220=\352\346\334<34\035\2753\277\203\277\200\201\311<\374\331\200?\013\246\200?,\337z?L\003\323?\360\222K?@iN?\030]\216?%\034\210?\266L\255>\364\266\025?\214\\w>%\341i?\016N\314>\353\355\372\276o7|\276\304\360\310\2764\232\022=\336\360d?\303\036\222?\332m\254?\246\023\241?2\n\243?\366\3031?\006\222?>\265\237\225?\217\016c?\245jl?\010\025r>\244\006\r?TB\r?Pe\225>\272\372\232\276\000\232\277;\310\3327\275\207\265<?k\324\022?d\302\034?w.&?\233\350??lZ\036?\366\260c\277\307\004\220\277\210s\353\277l\321\237\277\245\010\235\277\200\332\347=.\245\332=^\213\024=\364\211l?x\303]?O\260Q?\343_\223?Q\245\314?\024\215\010?P\r?=\256\004%>\202\340\236>*\301\340\276>\250\276\275*\216\275>\237\212\335?\017\251l?\217\233\261>w\375\362>\365\270\212?\376\262\313>\352\033T?\333#\352>\220j:?\344\020\306?NB\257?)\334\266?\300\344\335=\336\234:>\ne\177>A<<?/\365\276?d\310\257?\336&\212?\211\'\201?\026\013\252>\213\377\275>\316\004\307>&\014\024?@\245\217\2779\211\233\277\310M\350\275\3674\220?\315\345f?o\033\272>\307y\237?0\006\340\275\345;\340>\363\214\221?Z\361\025?\234\022\267>\036\266h?h\322\250?\273#\253?\261\021\216?\200Wb?Y:-?\006?c?\177*\t?\200\365\020>B\373\244?\347uq?\245\024F?w\tG\277\001\024G\277\305\003B\277\331\240~\276\204hc>\005`\372=\2270\232\275\006\177\260>H^D\275[\027j\277\364\366M\277\030\304~\277\010&\300=\202\007\303>\020\204\031\276\361*\253>\220\177d?}U\253?\352\3030?!\326\025\277\036.U\276Km\332\276a\203\212\277\320\230Z><\343d?4`Z>\375tJ\276\206\031 \276\254\226\222\275o(;\277p\010H>\316\232@\276!\276\217=xw\364>3z\253\276sD\203?\367D\310?\261\300\341?\300\335\034@\225\255\t@\265!\251?`\326\261?\304nc?,\020\\\276\001\254\362\275\364\304\307\276|\300\033=\306\0004?\3355F?\374e\014>\366\205[>\220i#\276\252D?\276e\025\226\277\356l\315\277\204~\177\277\346\375i\277\3724\316\277\030Q\007\300\372\262\324\277\\\272\'\277Y\2528\277\311C\025\277\333\201\266\276<~\271\276\221\265\227\277\226A\026\277\256\326k\277\254Z\226\277\226\265\272\277*F&\2772\237\204\276\334\225Q?+U\276>\302w\217\277\340\264\235<^\264\022?N\270\210?\240\377&?\310\360h?/L\207?\240\035\232?\374\315\254?\277\201\307?f>\241?\000 \033\274<eM\277\330\264\234\277\322\223\321\277\036\"\314\277k\216\332\277\200\205\366\273\016\264\207<\340=\373<H\254\346>h\232\214\274\006\304\007\277\200\341M\273}(\310\275\215\344R\277\000d6\273\222.\t?\202\260\007\276\016i&\277\030~\326\276\316\203+?\004\246Y\276\036\364\n?U\376\373\276\306\315\314\276d\330\016\277\016\233]\277\352\017\227\276\213\350\220\276\364\250~\275\002O\023\276\372P\276\276\340\247\023\276f\333\313\276d\255\264=\253\217<\274\031\271\242>e\031\257\276h\'\351\276p\254\361\275\302\312G>\247\360\220?\316\021\223\277:\'C\277vx\237\277WQ\307\277\276\376\243\277\305\274\007\300\006\335\376\277\251\334V\277\352k\207\277`\366\275>\'\334x?\326\266\255?\362R\000@y\370\352?H\321\270>(\312D?\314\326\236?\327\224.\277\371\315\026\277\260j\227\277\376\263\366\276`\356\207\277\335\212G\277n\270\220\277\225k\016\277pB\014>.^\240\277\221\225\241\277\307\223\213\277\326L\260\276\310\025\245= \346b>\326\036\352>x\357\016?\251;\006?\250r\017?\226\031O?d\357\032?\262\216\230\276\224\235\241\277~\215\360\277M\207\210?\337\267\"?\0020*?R\304\266\276i6\246\276\234\342\007\277N53>[\371\004\277\206\307G\276\036\364\211>\3407|\274\276\301C\276A}\222\276\314\206\023\276\326\362~>\313\260@?\003\347C?\341\271\277?W\214\002@\026\t\227?\260\273\252?\273[\342?\210\027k? \254~?p\277\265<\265\020\017?\270^S?|OS?SB\217?(\241\227?\247\257\252?\204\251z>`\306\277\275\363)|?t\251/?E;\025?\352Ew?\340\253\215?\036<\250?\243\205\235?x\250i\277I\376\313\277\2505\341\277\032C\346\277\274\037\216\277\374\036+\277`>\017\2767\371\241\277\010\357\334\275h\270\342>rt\010>+\242z\276D\ts\276\327\222\227\277z\214\220\277\352\277D\277,N\"\277\014\t\351\276h_z\277h\362\013\300\304S\314\276]0\224>P\342\033>\253|t?\225\210\310>\216\030\013>Z\326\261?\"\030y?^}\361\276\006\303\211\275\372\021M\277\245\002C?\304V\336=\006D\204?\300nJ>\030\322V\275Fe\007?\336<B>\317jN\276\335-\224\276Z\313\367\276A\003L\2778\'\277\277\350NI\276\025\222\215\277\020\376\226\277\001\003r\277+aC\277!\316\027\277\346\224z\277y,+\277p)\237\276\000\306a:\025\321\311\276\255\374S\276-y8\277\330h@@\'\350]@\214\315t@R\362C@\331\215H@K\333\022@\"\327\366?\277\246\n@0Y\237?\235o\205?\257U\'?\277\317\275\276\322`\n\277\251,\274\277h\273\331\276.\211\335\2769Y\021\277`[\350<$\334\006\277\375\236\251>\351\307\273?\350\021\266?\366 \207?\"\t\221?|\213\202\2773\365\246\277\207\036\024\277\200F\240\276>9A\276\266\300t\276\001\t\355\2758e\306\276\202\2711>\322\244\021\277\350\361\265=\273\032\250\276\031\\\003?s\217\372>\240\201\335=t$\262\274L\010\233?\217\270\201?\251>Y?\261\004x?)\310E?2X2?\356B\350\276F\226.\277\260q\364\275\234\254\250<\371&\272\2764\310x\277?\207\373\277v\241\362\277w\303\010\3002\345\253\277\256\342\216\277\310\2156\277\265\204K?\310\321\361>\340\334\017\276\333v!\277\335\323q\276p\027\315\274j\033-\277\265O\203\277\224oK>\350`m>\370l\224\275\307P>\277$\325Q\277\220\236\004\275$\312\177\277#%!\277\211\206\230>\222\340u>\007)\017?\214W\005\277(\242\374>{x\031?p)O?BE\"?R\224\275?,\004\220?\037\277L?~!<?N\222T\277\276\026N\277\224!O\277\037\223_\277<\317V\277\345B+\277\207\343V\277q\351(\277\240\032\201>\234\246\352=4a\214\277\274\245\345\277\316\327\234\276\262m\013\277\254\033\374=\214CL?\307\331U?\003\263\362>\360\t\331=\210\343\213\276|\035\214>@\242B?(,\260=VNj\277\326gE\276\345\322\233\277\254\214\007>\252\241\030\277\034\243l\277\314\244S\277\014\371k\277n\237\225\276\t4\236\276\376\213\237\276\300\314l<2\354\260>\240\0164=\3649\263>\010=\252=\325\333\262\276\266\354\311\277t\340\001\277\202\363\361\276)2N\2760\264\204\274\236#\215<\370`W?:\273\374>\020]B\277\330\273!\277\222\341\267\276\252P`\276\325\351\322>)\254O?$iM?\323-F?\203S\035?\000cr\274\2705\265=.IC?h=\302?\024\245\026?hw?\277_X\205\277\014L+\277\231F\020?\2453~?\371\235W?l\211\272?\205\023\254?P\017\320?D\n\257?\344\224M?\202\231q?\264\010\002@@\320\263?\304\233\301?\365\032K?\340\341\247\274H\212\220\275\017q\220=\005O\026\277Xb\005=\22145?\004I\244?\345\030%?\316\024\272?\377g\352?p>F?YA\202?\206it?\330\314~\276\262\237\010?fe\244>~2\252\277\327\025\267\277\210\367V\276 \243\000\277\303\351T\276\177\016\241\276ma\211>\250\177g?M\305\252?\264;J?\350W1\275\251\300x\277\034\014\335?\322\235\000@r\223\255?Q<\234?\306d\341?||\001@b\210\246?\357D\024?\301\225\210>Y\264\235>_1\236\276\250o\006?2Q\327>\254\231\262>\000\275f>-\2751\276y\264x>\335)v>8bp>J\245\245\276^K\242\277\313\312/\277>\243\032\276X\317Y\276\325\032\003>\256\354\017\275i\363k>a\243\203>l\365\237\277\261\246\224\277\200A\221\277,\216\226\277G\355\210\276x\316\037\275\314\252\254\276M8u\277\224\213Z>\241\353}>\312 \204?fI\204?v%f?\0009\241<\3139\004?V\033\333>\304x\t?\034\306\216?\340K\341<\310\022\327<\300\256(\277\344\265-\277Clr\277\330\351-\275\227%Z\277\311\0144\277`\304N\277\024R\302\277\224\270\363\277\373\324F\2778`h\277\300K#\276\343\354\022?p\327T?T\254,>h[\261>\212N\026\277>y\017\277\2648$\277\013s\246\277\242\033\200\277\372\033\315\276\374\244\317\275-\325n\277\245\211\354\2765\376\275\277\247\217\214\277{d\205\276\224]]\277\231\003\253\276\302\3441\277\270\245\224=:\030A\277\2347>\277;\302M\276L\022\206\276\240J\215=\200[\342\276\3669\217\2770\267\305=\013b\203?\307m\300?\272\247\214?\032Y5?NH\244?\020\257/@\017\237\245?\025E]?Y\234+\277\006\323T\2764o\031>\360\031h?z7\241>\261\247\240>P\336\321>\014\017c\276\374IY=\256\300\342=\237\027\217\276\340\312\033\276\232\nG\276\264\217\256\276\362M3\277\024l\242\276\251Y\240\276\270=T=_r\226\276\302\311\030\277\240 \227\276\210\255\021?\341v\274\276\370\227}=\307\n\374>r\273\030?\026\212z?O~P?\367\340\223?KL\240?\010\325\221>\010\216\177\276\276Qb>\020L(\276\022p\201>\320K\350\274\272h+?\000\340\356<\235r\245<\340-\363=\036W6\277\263\276\325\276\254\226\006>byg\2764,\202?\177T{?\204\222a?\021\220H?\354x7?~r\263?a5\257?l\345\342?0\240.>\200\002\323\276\033\253h?\246{\003?R\276\321>$\256\013\277L\021\203\277.\\U\277$hE\277$\221k\277\000s\025?z\271\274>\313t\250\276\032\001\222\276\367\236\034\277\024\350\341\276` \033\277\210nV\276VY$?FVD?trz?\356\251f\277\245\347\251\277\2454\373\277H\302\335\277\316*\006\300$;\260\277\230\267\004\300\2322\003\300\330/\311\277\320\322\252\277`\225=\277w\325\352\276\026z\360> $w=\005B\251\276Lp:\277w[\206\277g\314a\277\257\343\006\277=\333\207\276\247IJ>\344\036=>\332\'7?\247\242\352\276\2008Y\275\233\266\243\277?\"\307\277\001\207\223\277dey\2778\224\352>@$l?\0303\177>y\243\217>\2341\242\275\"\335\374\2767\200\274>\272O\366=\001\242\022\276F\323\021?mZ\215>\322\305\367>LV\245=\367\373\320\276\206\252\365\276\234\335\216\276\310\212\007?\204\2172\277P\"M\277\217\353\210\277\200\362\265<\226\257H>n\364)?\200&\322?ebL?\225\317\251?\036\307\323?\252\222\214?:\317r?\316\365\202>\250\n\224\275\266+\315>\246\320\302>\013\334\\?\257\005\303?\302.\361?\354\324\321\276\342\177\224\277\2762\360\277\346\321\372\277\"\307\037\300\036\016(\300\022E1\277\335\363\302\276\376\237\317\276[\375$\276\014\332\240\276\032\336\336\275P\256\252\274C\277/?\033\373)?\304&\274\275~\333\235\277\231\031\216\277g=\246\277v\325\300\277\034^\031>\342+5?\224\327\253>\340X&?(\327\310>[\302\227>\030\356x\276\235M\231?rA\343?\234\367\023@\002\312\223?\244\r\235?\212A\226?\320n\310?\235\302\313?6Qt?\224\242\215?LH\346\276SL\244\276n\347q\277\312(\310\276\273h\032\276\246\325\335\276\360\231\231\277<(\342\276\256d)\276\202#\033?5\213\327>\313\2619>\373%\016\276\2468\247>.\330\207>\2200<?\320\032\255=\363`\241\276\036\264T\276@B\372>(\237\254>\306\025\264>0\254R?\357(D?\320#\014>\324\2419\275M8\330\275\002 \250\276\316\324f\277\n\376\227\277\210\\\256\277\274U/\277X\255\314=F\371J\276F\255v\276V#\316>o\305\027?F\213\223\276$\027\323\276\020I\326\275\202\263\n>\325HK\277\016\024|\277\310u\213\277\354A0>\324\340\235>P\214/=\336\002\023\277\226\234v\277x\315\205\277\317\364z\277\241f\353\277\001-s\277=\272\226\277\020\323\235\277`\214{\277H\035H\2764\352\241\277T&2\300L\247B\300o \005\300[\324\332\277Y\363\206\277\204\241\324\27729\331\277\226G\266?(4\022>\003\324 \277\251\333\001\277\320\0226\275& U\277V\032\347\276H\3727=\206T\037\277\"J\r\276\324\250i\277\030\013[\277\205\370\222\277\370\264\263\277\2571N\277\277w\213\277\264\304b\277N\253\201\277 a\214=\321\316g>\201\035\250>\312\337\371>\250\230(>\306\3064?r[B?@\352!\274\244\005L\277\222\216\307\277\344\3533\300\324\n\326\277\346Q\274\277\346\243\236\277\262w\341\277 n\022\277\330i\305\277\320\031\350\275\235\300w>\262\035\221>6\'\302\276\224\244\247\276\372\3455\276\316\313\024?\234\347\304>\312\221^\276\212\264\017\277\214\333\332>\343\241\330>\212\257!\276\366At\277\301\316\276\276\350Q\322\275Z9*\277Xv\373\2757\271<\277\310\010\272\276\0224\356>\326\034\241=\031\234O?i\001\333>\342\224\340\275\274\377b\277\257`\254\2772\231\275\277\235\202\254\277\000s\306\277\213\266\247\277\266o\215\277\242\032\177\277\324:\220\276\215g\213>\246\312\211\275\362\026H\277K-\222\276\316\315/\277\302\201f\276b\026\004?k\304<?8\014l>n]\201\277V\020 \300@\317#\300\227\327\347\277v~\034\300\010X\n\300{\316\"\277\337Y\316\276\226\2516\277@\262\220\274\215\263\005\275\341\257\242\275\360\333f<*Y=>(\030\035\277nWZ>\240\244\345>\256\222\225\276#\303}\277\217\206\242\277\370/\017\276\305H\033>JP\004\277\222#\262\2758^>?\033\201\243?:\245\261>8a)\276&\242\253?\314z\254>6X\036\277\240\022\272<L\014\265<\352\326\203>\311\005\357>\016\004V?C\354\\?\203K\035?\'\2472?O\242i?\203\236\356>\306\264\230\276F:\203?\016\200X?G\276\340\276\376\035X\277\213\203\001\277\244\266O\277X{\250\277\030v\261\277rtd\277\304\337$\277\233\366\312\276\232\220\337\277\2009\256\275\013\326\311>\370\030\014\275\\\234\231\275z\033\270>\367\266\322>\260q\257>\212\224W\277\375\245I\277\214\353z\277\220z\215=\336\343h\276\330\r\203?\367\035\231?\227\032q?\346\353\330?\340\2646@h\372\323?6\205\342? \370\004@\254\203\336?\375\263\316?\207\230\327?\326\224Q?M\351\311>\335\0248?\003\302\230?gn\304?B\212\264?\356T\033?H\236\211?2\344\313?x\014(?\314\224\274\275\033\337\217\276\344N)>\254\366\306>\036\016\344=;\033\022?\3763\242?BQ\027?\022j\335>@\216;>\266|\365>\014\375\022?\331Hb?\005\311]?\320G*>\252\266e>m\351y?\021\032\014@\202\206!@\230\\\214?ujU?G3o?n\376q?\240\030\206?4\205T?)\247$?\367\202\240>\370S`?\312\024A>\252\365f\277\\\356\341\277\002k\314\277 \232\017\277\226#\310\276\322\344\370\276R\005\234\276\332\313\014\277\020p\023\276>\201\241\276\236\365\236\277\004l\300\277\212\357\277\277\373\273\301\277\236\003\030\300\336\'\376\2773\237\244\277\210^\305\2774\350\372\277\202#\257\277\2533,\277\3369L\277H\355\305\275\345\330x>\210\233\211\276\340\217\333\273\354\343%?\014\003\203=\323\212\267>\030\245+\277X\355l\277\313\362j\277h\212\205\275\336\374\220\276\224|\367>\234\377\244\275tx\250\276\227p\315\276\270\305\202\277\\w\224\277`1\331\275\"\275\371>\242\031\362?A\323R?\325y\r?\264B\023?\330\220\005?<\036T>\332o\207>\337\222\375\276\207Y\021\277n\300\263>\230\374O?\210o{\275KT\214?\021\232\376>\330\216$>\276\004\234>\2527\205?i\017^?\323E\371>\235\004\341>\272\231\206?\341\031{?\232\206\004?:\2104?\344\276\202?Ir\223>\264\270\323\275\276Kk\276\326\025\215\277~\213\205\277\332\321\226\277\345b\205\277\\\024\201\277\004\305\225\277\226\020,\277\344\366\277\276\203\205\230\276\254Yi>Pv\'\276w\370\032\277\354\370\036\277`h5\275#\006\214?\303\276[?\337n0?%\372\231?m8\256?\320wm><\244\001?\342\016s?d\322\202>\224\311\360>H\0038\277fd\253\276\\{\266=ny\302\276\202\320\317\2756jb?\340\234\353<\330GF\276\250\335\230=\335\220\231\276\2068]\276\236\241\367\276\260\242^\275\\\r\\?\304\227\365>J\337\213>9\003\034?\333\342\274\276\300\374\003\275a)G=\006\301G>@\032|>\006]\225?\252\257\253?\320\314\201=X\243\222\277N\246\341\276\200J\240\273\350\350\006<M[\340>H\257\031? \226<\277\312\340\252\277\300\004W=\367\2772\277Z\2770\277\320\3360\275\325=6\277\224rS\2760\306\312\276\372\357\311=W~\215?W\267\274?+\035\334?^\315\340?\240\2367@V\244/@\027DY@b\346\025?>\270\255>:1v>\252P\327?3\241\217?\3464\345>\320\230\363=\312*\233?\\`\275?\345\326\256?\250\274\347?\007}\204?27\326?G\005\002@\2647,?\204\010b\276\267l\024?$\245\247\275$\252\305>\254\324\035?\234\323\027?\226<W?\304\335z?\320{6?\24698?\000)\341>`\014\035?z \213>\230\234\010>\004k\333>8i\275?t\307\252?\260@a?@ex=\213W\010?.\364A?*K\021?V\360u\277\214\340p\276L\262\236?\226\r7>\326\3707?\246\220\307?\311\213\266?*y\224?q\215~?\247\326\356>\236X\214>\231vW\277\350\2559\277\336\177\361\277Z\203\004\300\360A\225\277{\272O\277\032\010\233\277\036X9\277\222\312l\277\240\020\225\276Pjl\2750\232\354\275\350\361r\2768\357\027=\271\370\345>J\0130>\371\336\201=|\t\037=$\025\274=\274{\364\275\360\202\312\276\215;\014\276G\214\227=C\346l>\033D\214?F\036\210?d\333\326?\n\270\002@\323\250\311?\0227\354>\324\366\">\340\177\346>x\334P>D\'\276>`4\301<1DK\277\200\370K>B\246\374=\325_q\276,\1776\277\213<\005\277B\207\273\276\350\001\277\276\241\366A\277\325\260\215\277\371\220\312\277\3625\254\277\034l\340\277b\245\307?\270[\241?\247\321U?);\255?\261\345\271?\006\335\270?\313s\021?\233+\204>\036\235\275=\207\273\201>\335\203w>\204\274\222?x\022\334?L8\245?p\004\032?\3460\201?\275^!?\207\313\316?\357\375\361?\367\302\232?d\320\255?\260\375\370?\204\310\030@;=\275?\266g\207>\242\007\230=\227G\214=>@\240>D)\343\275W5\374\276\324\202\253\276\226\337\005?\3536\247>t\306\001?n\251\262>\246zh?\354\321`>\243\274\233?iV\227>\310q\232>\244d\357>\030\205t?\240\177`?^4b?8X\317>\000\312\210\273\346\\>\277\202Y\243\277\000{M\275\325\362&?\206\t\231>\364\236Y?\371}H?@\212\310?6Oi?\202`=?LV\206?\374j\214?\030\346L>\\\363$>\037\356G=a\242\266>*\352\231\276\320~]?;\330+?\200\"\200\277\020\034\221\277\207\033\315\277<\215\\\277\310\342\235> \217Y<-\347\247=\025Hy\277\313q\246\277\177\245\262\277^4\346\277Y)X\277\211\334\007\300Qf\371\277\316\t8\277\373T1\277\023\333\253>C\232\236?hq\211?\003\314\261>>\266\243\275\005\336h\276\340\236g\275\315\034\320>\300\200\r;U\200\222\276\3640\201>h\245 \276\260\332\253=\327\321\030\276\002qR\277\202\203|?b\304\240?\010A\233?\036\256\307?s\245\327?\231\213\306?\027\013\245?\303\313\262?1\336\021?\002\334l?P\340\300?\335\330T?\273pt?\034\216K>$\275\200>\274\221z\276D\271\316>\026\033X\277ny\207\277\336\242\034\277\266\376=\276\340\361\254\276\022\203\013\277:\237\007>\256]\275\276L\217\231\276\224\371{?K\334{?o\267z?\373+r?}3\214?:\267\267\276VI\212\276\005\250S> \336T\273\000\226O\276h\350\\=\374\236\254\276\3469\312\276\340\343\223\276\274*$>\204\347C?\\\342i>L\323\201=\346y%>s\0219\276\030k\252>\362\274\244\2764h\327?`\212\313?\354r\323?\201\362D?\210^\373>t\253I? \025C?\030\237u?N4\010> \207\\?^8O?b\310\325> ,(?\203\356p?\222\242o?\';>?\250\272\213>2\305t?\300R\344>\356T3\277\266V\'\277a/u\277P~D\276\374\306\372\2758E\215?\020\247A?\306[\273?\256\276\254>\251J\204\276s\336A\277R\025\342\277\022*\263\277\276\n\260\277,\207u\277\375\350W\277P\007\r\277\020\020\007=\254p\332\275\234\327#?&T\001?\000\231\250\275\250\313\001?\200`x<|X\321>R@\021??\202\035\277!\257\005\300#\242\003\300-\020\326\277\215\322K\277\033\243\"\277\010r\315=\236\006\304\276{~\014\300\361 \202\277|d#\277\260Y\313\276/\032D\277\000=J\275s\017\024\277k\t\241\2779!\212\277\273\344>\277y\302@\277\246\305p\277,|\231\276\305\371\327\276\350Ow\277\220\317\340\277m\301\236\277\276X\203\277\010s\317\276\340n,@\215\004>@e\3062@~Zs?z\212\233>\277}\333?j\215\014@c\310\255?\202\300\363?\3126\370?\256\307\323?B#\213?\276\327\310?\364Y\255?s\377 @\300k\244<\325}\017\277\004\261\314\276\223\224\321\276)\020\330\276\210\214\266=2\022j?\016\261\217?qg5?\304\331\265>h\006:\275\242\361\003\277\033\357X\277n\000J\277\036l\371\276\017=\222>:$\035?\372l\035?(\355\036=L\005\356\276\234\313\005\277r6\005\277\214\256A\277\367\347]\277n\000\276\277o\323\245\277Og\306\277\201\375\204\277 \320n\277\240s\240\276\2409\322=:\263\233>gOc>\364\352\307\277\322\373\242\277\250+\275\277\364{8\277\214\377{\276\310\277\347\276\372\033\370>\311\271\007?\337\327\257\276\220y\300>\202\t}\276\337\014\035\277\366\330\301\277\347\352i\277@\274\346\277`\260:\277\300\256l\277\334\366\002\277\031l;?\200\270\330</\353\266>P\207\365\275F\327\357=\2649\202\276\346\257\010>\023\277\211\276\242\206D\277\350]\013\277\367\333\236\277\270B\034>\300\312\242\276\234\364`\276\024\234\201\2761\271k\276\000H~:\312\307\376>\345<\231\2766\245>\276\206\276T\276}@\235?\371V\247?\270te?PeK>fR\212\276\023\247q>\360\030b\277\246\016B\2778\261x\277--\312>r\\\342>&\334\305?\206=\024@Y\261U?\250/\314\276k\241\246\277\260S\237\277\231\272G\277\204\2022\277\026y#\277\"U\277\277\241\021\224\277r\225q\277\223<\223\277\371|\202\277\032\321\324\277\332\253\267\277\326\261\000\300\211\203\315\277^\2070\277\354\226\026\277\212\032\313\277\314\255\277\277$\356\335\277\010\270s\277%\260p\277(Mu\276\020\310\236>\034\200=?xA^?\270\"\300?\224%E?\007\'\306?\322z\322?\2403^?t\2506>\216\3458?\342\345\377>\324\312\315>\004\235\272\275\254+\034\277~\350\264\2750\261><\034\377\342\276\245\376\020\277\002$\244\277R\276\321\277\242E\330\276|\266\330\276\003\375\024\276\312\032\213\277\262}\233\277\201\323H\277\027\233\327\276\217hN\277WG\243\277\200?\366\273\307\273#?,\241W?\330lb>8\343/\276\373\333\227\276\270*_\277z*\245\277\216\203\351\277\240\003\301\277\322\005\n\3001\204\346\2770S\262\2777\361W\2775\332\355\276\260<L?cU\307?.\345_?\305n\035?\250\027\304\275\014v\241\277\260t\230\277:\253\231\277\244\260\n\300\232z \300Z\246\324\277\362\270\225\277\'\257\264\2772u\304\277\330P\334\277\356\351\034\300k$\301\2779#b\277\350uP\277\'\232K\276\225\315\201\277\334\251\215\277Q\343\273\277\272@\333\2762\204d?\000w-\273\277X\213>\316\036P\277\325\323\177\277\214\177j\277\362:\304\277\332\271t\277\330\375\360\276{\367\255>\256\266)\277Ik>\277\367?\315\276JW\216\276(\300\300>\320\232\325\275\036K>>\031\232\256>N\263\023>\324\242\230=\204\025\250>\365\211L?\3449\\?W+ ?\247?\223\276\324q\332\277\020\200\366\2770\313\230\277\356\252{\277\332\016\214\277\312S\006\277\341\301\226>\310\252\323>\330\014K\276D_\277=\241\261\334\276\246\226\377\276\024\000\361=\354\340\213\274q\334\261\2766}>\277\206Y_\277E!/\277\334\305\310>T\271?\2768\006\326<c\231J\276\214\360\227\276h#\006\276\316$B\276\345ja>&\334\244>\340L\261\274\331M\237>\'\345\002?&\255\377>\226R)?\227\000\277?\036\377\365?\203\032^?\360:\306\275\220\004M\276\364\251\340>\272\267\312\275\032\365l\276\304\244V\277\210=\'\276\320\363\213>0\235\300\274\010\253v\276\223\260\210\276~\352h\277\016\232\224>,\025-?0\315\026?\324\211!?\330\361\264?({\014?\0133`? \200\356>\244G\021?\202\255&?\254\347m>\341\t\001\277 \352L\277\212\260\243\277\322`\353\277@\334\275\277\306\305\\\277Or\361\276\220\324\213=\346\237e\2760AS\277\212\206D\277M\013 \277z\247W\277T\010\235\276`,\217==\037\036?\362\364\275>\222\272\350>\007\226*?\314f\223=06\261>\374\211\230\276$\034f?L\360d?x\215\n?D3\005?\324i\006\277\372\362\264\277\334[\216\277lB:\276\3229\"\277\022\342\310\277\345\'_\277\205\253!\277\036\313d>\336\260S\276B\337L? !\215\274a>z>\223\367\221?\200\r\244?KF\336>\224\350T?\327\303k?z\314J\276&\302\206>g%\337\276,@\230\275X\301\270\273\201$\305>f\344\'?\233\"\212\276\001\375|\276\206-i\2768U\034?\265!\033?\360tQ?\036\247d?\031]\032?;\n\222?\024qV?\320D+\277@\017\234>\377\356\037?\220<\205?.\343\272?\2003b?\007\363\000?\032j$\277\262\326\377\276\023\343\363\276j\365\202\276\230=D\277\350\310\035>x\250\206\276x2\315>\240\237\256\274:\315\211\276]p,\276\370\020l=\231\3459=\301\033e\276\241\331\023\277\342\017\031?@\276\233<5\333\353?\342\030\374?u\254\363?D=\363?,\307\327?\304\n\226?\356\000\322>\252n[?\2505\205?\320\243@?\370)\005>\253U\223\276\t\273{?\275\016b?\202\324\203>-Y\356=\222\322\311=\212\210\010>\204E\273>\022\376>?\204\330\007?\224c\033\276\307\017X\277\240a\034\276h\0341\276(l\372\276\241\006\362\276@[\014?N\3774\276i\341\356\275\250`\342\276\276\001g\277F\277+\277\235\337\372\277\0049\233\277\300\375\277=\243\035\204?\314\002m?_\022[?\210\300\204?\374\271\243?D>\\?\000\261K?\300x\312;\201\226Z\275\250\237Q\276I\036\236>\212m\244\275 \324\351\273T\315\272=\341\204N\277\304\325\277\277\316m\352\276\204_\006?^\2603>\277\364\241\275\014\007\335\276\210\r\336>\332x\271>\331#)?\241\217\272?\376\215\234?\366\266d?B\255v?\036\273u>\003f\213?\232\026+?\355\235&?0R\214>\352 \207\276\361{*>\003v\013>\244{\321?\340\261\351>~\241\n?\224\322\234\277\373\207\321\277\376\307\232\277\201\255\305\277\231\340X\277d\374\223\276P\325O\277(\261>\277@}\005?\216\025a\276V\314J\277:\026\271\276\214\273>\277\304\232\343=\310\346\334>,\337\246\275\211\366\036=W|\364\276\032k}>\214\356`\275CB\003\2776\361\003\276#lp\276\026\331\205\276v\306R\277\027\036\200\276\206\002\347>RnA?\014?=\276\332\310V=\0262\006?K\211$?\214\245a?\260\375\255?\2106\021> \021\277>w\230\002>\322e\004?{\'\316>\000\235\352=~\252\003?2\261R?Puo>\345\352\331\276\360\254>\276\201C\226?n\372\312?VN\322?.\210\237?\314\013\266?{\313\264>?cU\276\336\204\005?\312}\252>\342w\245>H\331U\275\244\025A\277\022\nx\277\206\237G\277\n\005\242\276\246^\t\276\354\"\356>\272\320W\276\334\222S=\242\005\217=L\256\036>a\275\222?\332\227\206?\261\361\203?\301\274\376\276Xo\005>\314\302\035?\273s$?\023%\312>\202F5?C}\256\276\237\334l\277el\034\277[\021\367\2760\364\013\276g\024\301>\323\243\307>TO\000?|\234\262\276 \306\274?nc\224?g\005\233?\375\020_?\035\260\303?)=\246?W\377f?bw\233?\246\212\005?\300\262\373\275\234O\255\276\351`3>EZ\\>\352\254C>g\267\022?\364\260(\277\372C:\276\000z\251\2739\267\277\275\276\370/=\366L\001\277^\nV\277\0072d\277\213\200\202\277\333R\221\277|\364(\277 \215\302\276?\346\023\276\242~\301\2760\261\201>\264\337:\275\306\0356?)<\215?\020}%=\370\373\360>\262\tQ?\261~N?z\357\220?\367\254>?@\353\233\274\372\305\030\276nc\n?n2\\?t\320\205?H\037%?l\022\310=\372-]?\024\001*?\220\324\314\276d;\035>\264\274\004?\364\020\341\276)\021l?\233\013\222?\030y\251?s:\242?\204\203l>\340\272`\277\034j\273\275$\034K\276\013\002}?\314\343$?\246\241E?\010\014\260?\314\231\344?\326\2613@F\250\036@p\347\375?\340\037H?\3242m?~h+\277\334]\003\277\376G\352\276\032\020X\277n\344\035\277|\020\271\277\003\013E\277H\244F>\312\n\323>\230\210\017\275\240\326\224\275\007?,?\240/\013=&\211c?\n\274\005?\3771\345>\217B\364>@\\\035<\022\242\276=m:\306\276\302\217\336>\"\333\026?l\027S\276\345\374O\276\207\254\262>JA\377>7\324%?\370\200\373\275\310\330\231=\333\322\375\276\2169\232\277\373!W\277>\315\206\277\220\272\320\275\354\0215\277nD\325>Z\353\004\277\024\004\376\276C}\242\277@\016e=\374\232\237?\342\000%?\353\n\244>\216\354\227?\361|~?h\346T>\200r\331>\376Ax?\022\352J?\001\344w?\316\005w>`Q\001?\252\337\033?\"\251\240>\206W\364=(\234\220>t2\267\276\254\'l\277_\373\025\277\220\334\034\275V8)?C\022j?\026PE?u\346\247?\262\262\262?\304\217\326?m(a?\"\316\231>H\014l>\332lF>\334\353\312>\302\367q>Z\307\265>\326\326G\277`8O\276\020\366\311>\215G\n?\022O\343>\306\206\213\2760.X\274\n\315g\276_\360G\277\302\366\203\276\n\3565\277\020\262\236\277\030}\232\277\3743-\277\324\266{\277k]\222\276E\331\000\300X\235\255\277\364\222\007\300\234\316\027\300\006\226\003\277\224>4\276\200\234\340\274`\271J\277\312d\233\277\236K\335\277&\365\363\277s\024\233\277\335\2374\277\030\365\221\277\033H\353\277\253=\302\277$O\301\277\013\010\031\300\200vs\277d|\254\277\332\t\303\277\036\004\232\277\010\371\216\275\340\316\376\272\251\372}>\024#\253\276\200:9\277\364\240\231\276\2412\371\276$;L\2769\373G?\315j\200?t\364\275?\337\202\265?t\\Q?$\316T>\264\360R\276K\371)\277\324\331{\276!\200\371>\006\217f?N\001\236?F\\\240\276\364\007\327\276\024EI\276\220:\'\2744\357!>\344\013\205>\315\0018?\0320h?^\311\006?\023\372;?\267\027E>\202s\233\276\3444\323=\300Ps?\220\3302\276\247\355R\276r\326\236\276A*\236?+`\312?61J?\214\360\306?Y\306\215?\226\'\336>\273.\337>\357=\211?`\031\313\276\210w&=\246*?\2763lO\276\372\215p>t\347\247\276\330\305\335=t\377\276\276\204c8?\367W\013?\373n\220?^b4?\342\315Z?\301@S?\016\341\342>|\r\017>r?F>\\\305%\277\244\350\256\276\020\222\244=\336\177\233\276\272-\361>\035\276B?\242\'\375\276y\362u\276Ld\036>r\374\016?n%\214\276q\177g\277\223b\341>G\203\034?\304\257[\276\236\r\"?\244\346J?\310L=>a\357\334>v\256h\276\213\200\352\276%\321Z\276~X \277\200\2566\277DP\265\277\003M\210\277.\250\335\277]^\301\277\340\365\021\300\230\330*\300\262\277\357>\014\244{?\022\014\251>\201\212\000>\216\021\316>\033\273\376>\223\321o\277\264\005W>T%+?~k\323?\262\244J?\377\317s?\337\253\242?\264Il?\200n0?\360\200\244<[\260\256>\\W\370=)\301K\2768f\t\277\030\266\013\275\247\\U?\376\r-?<\334G?\266\250\022\277g\324\375\276\030\364\361\276Y\254\213>pp\013\274\325\240\205=0\327c\276\036\371C\277\026\210\262\277W\335\177\277m\251\323\276\244\372\261>\001;4>\\\010\252\276Pn\017\277\262\355\201\275vv\265\276\222>\221\277\354\343O\276\006\006\363\275\"\212(>!\034\250>Xhf\2762\333W?\224\341/\277\274+/\277\233]3\277\253\"\232\276\250\204\233\276\222\036q\277\326\241\023\2778o\225\276\306AN\277\014_/\277:\001\262\277>Ru\277\276\005\005\277\370\341\240\277\\CQ\277\252\253\274>\2409\342\275\'\014\335>\341\251N?\272iB?\316\344\276>\272\316\301? \227\242?\003\037\263?\031\324\311\277\017\356\335\277\360\343[\277\247\234E\277\256!!\277 \022n\27702\021=_\312z\276\272H\000\276[(|\277\224\214\263\277\336\236\200\277\252T\016\277\3704\231\277\224\274\030\277X\322c\277\265\330H\277\'\305\356>\370\265\255>^\240\316>3\346\233?\330\251u>\027\315)\277$t\233\277\2028\231>\252 \016\2770\245Z\276W\026\233\277\220\233P\275vl\277>\350\273\223? uE=\021\343\227>Z\242\003?\211\r\005?\330\377C=[\241\022\277s\t\250\276@\216\272>\326\223\014>\336\007\021\277\240\017\371\274\313\267\301\277\240\346i\277P\033\032\277\2352\367\276\246=\000\277\314\\\244\276/\244*?{\027\014?\0328\037\277\202)\000?\200`\204?\200\256\200?\0062u?>\256v?\357\247X?\312\364\000?\257\250\303>OM:?\027]\236?h\275\346>\234\330\317=)\377J\277\243\363\200\277~Fv\277\236\r/\277&\005\025\277xH\247\277FG\332\276e\311\372\276b\357\030\277;\n\326\276\3100\301>\360Hm>]\\1\277\202\036\323\277\266\304>\277\373\034\312\277\311,\242\277\2602\212\277&\274[\277.\351\r\276\036c\233\275\\W\377<\305\262L?\312G\330?\027\302\374>j\273l?$\272\313>\364\336\031?h\254\250>\022_\013>\344F\021\277Sy\245\277$X8\277v\331\033\300\244\346\024\300\300\326\002\300\256~\352\277v\262\221\277\240\200\273\277(\032\030\300*\302\237\277 \021\276\275\366f\016\277\310\027o\275\001\206\225>\300\242\214\274y_@\277\244\305<\277[[\273\277\'\240\037\277\002\276\035\276\322v\216> RT?r\3363?\016\003\371>\255\3476?\226$\213?\224^\330?\241\343\230?_[W?\001/\244>\321p\006?\002\340\"\276G* ?\266\246\005>?\321\223\276ZZ\'?\t,\017?\020\271\250<[\024\200\277\240E\001\275)C5?;\000v?W\324t?z\320\217>Sg-\277\220\272\022>\220\210\314>\014d\n=\320fW>\323n\334>\t\321\227\276\2518\315\276Hf\r?pu5\275\"\301e\277v\006\217\276\024\302\203\276jyk>@\250U?\366\231\277>\000v\210\272\r\0147\276GJ4?l\nC\276\375|\004\277\232\274v>\2311\\\277\224\016\262\277\031\225 \277\273\001t\277\026R-?8_\370\276\370d\247\276\340LP\274>\337d\277.A\226\277\234\364\273\277w\346\027\277\006\003\311\276\342{\247\276\244;\270=B\365\213=\235>\352\2764\364\202\275j\2346\277\363\274\267>63\037?`\317&?(\271\302>#\314\263?\310\223 ?Xl\177>5\303\227?y\302\254?\246[\370?\346G\220?>\377\241?\177\251\272?\350\034+?\246\361\t\277\330`\211\275\313$\344>\030\303S=@c\375\276`)\311<\3139#\277\356\027\212>\363\032\271?\210&\226>\332vi?G\212\306?\357\205\337?A\025\347>W\010\237?P\303\370?\201^\337?\244\335G?\264sZ?\337.G?\032\n7?`\223\245\275R\032\006>~D\027?\224\014%?\234\206\224?\231\261\006@4o\270?L1\257?\036\231\323>}2v?\226\3520?\354\2752?\re\244\276\014\334\330=\253\177-?\264!\r?\316\344\246>\371\304\032?\234\005e?<e\227?\327L\263?[\013\"?`Y[?$}\215\275\'e\362\277\334>\302\277\016\223V>)\265d>Sz5?\300w\270\275\307\321+\275\263\371\236\277\226\200\355\277\331\217\000\300\027\347\n\300\376\371\t\300[I\323\277\206\234+\300\315\3404\300\260N\020\300\242\357\312\277!V\001\300\024\240\205\277:x\016\277\273Ob?@xa\276\302:\211>\224!\177=\014w\203\277\306\236\232\276\016\222\321\275P\357s\276\200\324\030\277\306\304\231\277\350\034\256\277\026\262`\277\000L1\275j\244\367=\003\251\227\275\314\322R\276\003<\037\277\230\262\351>\360Xh>2\313\213>\210\266\037?\204;g\276m\277\317\275\370:\033>\202\203\247=\036\000\356>\371\026%?\352a\332\276H\030\333=\236HP\276@<\310\277\227\326\234\277\022m\016\277K-\375\276$O\364\275N\230\211?\373\354S?d\357q?\010M\336?|\303\010?\336\023\227=r\300\245>x\331\'>\202\205M>\006\226\360\276\313\341\207\276\255\020\014?f\226\016?N\272\237?\224L%>wx`\277G,8\277s\225\355\276\010<\220=p\376\221\275\\\376\250>T\374/?\360\347v?\374\345\213?\264\017\n?is7?|1[\276H\334\342>\353-\307\276\351\231\235\277`\001.\277\366\027b\277J\202\033\277\374\200P\277\250Jx=r\270\314\276\230s\242>\314\025G?\220\006\003?t\204O>\316\3628=8H\315<\321s\010?\377\321\023?\246\030\343>\314\241\306>\366\302\310\276\200\350\025;\370#\364\276_\310#\277\330M7\277\222\226\177\277\262J\006\277\322\220$\277\235\006\032\277\320T{\277\310\347\035\277&H\320>\334\323\275=\360\252\005\277\004\016\250\276\230\306=>\3057|?\250\033\221?\370z\315\276\367M\024\2768z7?\325\035\336\276\221z\370\2767:\033\277\272\035\232\277\323\037\'\277hc]\276\234\251\222\277\022\242\325\277f\355\357\277\374%\361\276\372\013\236\277\264\252\335\276 #\024\277\372\225\251\277\030\252\032\277J\226@\277\2376\205\276\016\324i\276\325\352\006?|\312\235\275X\352J?\347\034\350>\323\313\003?\0176\205?\365\336p\277\204=\363\276X\302\206\277\353\325\034\277,\264\014\277\323I\333\276\024\3053\277\016!\225\2774Pu\277l\250\030\277!\235\221\277\255\245\251\276<\"[?\256F\231?4\334\230\276\352\022\343=h\177\221\2760\220\000\275\276Gt\277dk\200\277\304[+\300\"<\317\277:l+\300.\250M\300>{\353?\t\013\225?7\037\213?\336?\350\276\257\251\233\277 \337\321\276\206.\'\277\306\331\244>\177\314\035\277\240\337\324=\357\312\316\276Y\031\210\276G\316\007?\362?\016>dj\303?\243\316n?\204KG?\360\240\233?+c\233?\305\023|?,\310f?\2346E\276\274\375B\275\216\324\220>\300.>\274\364\212\273>\266P\335>\370\337\336>@\226\016>\026\313.\277.\314\345\277\252\350\347\277\032\205\221\277N\026\032\277\205\245\211\277o\205\037\277tm\331\276^O\'\277`\244\223\2742\010V\275o\'@\2762\352\n\277\343\321\340\276%\032\273>Ikw?\361\340\030?\265\234\212>FN\220>N\014\324>\350\270\010\275_\225y?t,h?\004cH>\312\2777\277\200#\203\274N\036\252>\244\320;?N\312\245>\264\271\253=\235g0\277\032\272\357\276\222K\271\276\206\3457\277o\221:\277\300U?\275\316\261\200\276\036\212\352\275CvM\276\2501~\276`/\210\277Nt\206\277<uT>\363\373\361>\0142\307?C\303\354?\rQ\216?\323\301\223>%\341\207>|)C\277|f;?\332\254t?vl:?\020\006\177>]\331h>\246o\356>\367\023\203?4y\353?\330\270\317\275E\213\242>z\232\321>\304\315\217\275.\214\230>\000\206|\273\270\254\017\277\276\035\'\277\200\004\371;\026\016S\277}\347\005\277:\2560\276.\357\006\275\276\262\341>@:\312\274\231X\'\277\005?\201\277\217SU\277x\333\034=\002#/?\265;\333?[\206U?\253\003\207?*\223\264?m\027<?m\225\036?N\034\277>z\033\320\275\375}\216\276\035?J\276\2402\352<\260\201\006>\351\370\273>z\314L>\263\253M=o\324r>_\354N\276B3)=\014\355\013\277\244\277\311\276\3644\037\277r\026\210\277\366h\355\277\365$\016\300f\303\'\277mC\311\277\020\001z\276\016\276O\277\267\351u\277DM\224\277\363\257\310\277\230\250S\276P\373?>7)2?u\253\335>\352\247)?\351_\313?\303e}?In>?n\030x?\324\016\350?fd?@\005\275\370?\240\0034?y\353w?8\036A>\023\252\177\277^@\215\27785\001>{\305&\277\2753\341\276\300\021\262\277\304\"\030\276\230\264\334\274\025g\251\274\307\303\360\276\200?\201\274d\024\275\276\204\t\026\277x\3507\276&c\203\277\232\225\202\277\276\036\204\277\202w\t\277\2700\244\276\372\004)?V\010 ?\363;\265>\214\347\360\276\030\022v>\231\3434\276\226b\223\276f\004\023>c\243\351\276\2420\336\276\303\377\343\276\214\204\017>\256&B\276\006\027\034?2\340\242?:\312j>H\324\305\274\331\234\251>!\241\263>\\f\275>\373V\003\277\330V\000\277\214h\221=\313\350:?/\016\375>\327\201!?\344\250\357=\035\020\203?\212\t\243?V\322A?&s\220?t\366$?_\365\222>\360J\221\275:\214\007\277 g`=\322KT?\257UC?\006\177d\276@c\010>\0318)?\324\364\347>\362\037\t?\204Z\361>\262\223\327\277\247\031-\300\230\246\243\277k\324\321\277l\245\356\277a\336\032\300\274*\000\300\267\022\252\277\207O\"\277\360\tV\277f,)\277\276\2272\277\000q\224\277\342^\372\277\317\345\004\300M\342\255\277Nf\276\277\3257+\277\370D\035\277\234Ix\277\031\3341\300\347\201I\300\264\005\214\277\313`^\277\207\211\002?\300\027J<f\241\315>\027I\200>vVF?~\3736?\322\241\247\276Eb6\277X\207v\276\235;:\277\375\316\256\277@\013[\277\3606\265\2770g\322\276^\312{\277X\336k\277\276\233\312\277\271\334\n\300\215\n\364\277\024\357\323\276\277\225\305\276h\201x\275\236\274\322\276\204Q\004\277\344\274\017\277\350!\337=\314\231(?f\025\253>\3600\264<\000w\021?U\275Q?qW\022?(\260\315>\272Y\226>\324:\003\277\2724\303\276\374\246\234>~\t\362=4\301P\276\345R\224>\266\025\310?\024e\307?\314\325\326?bL\005@R\022\345?\361\320\315?\304\244\222?Z\320}?\344\346/>*\265Q\275\331\226)\277\340d\206\275\277\350\002\277bu\230\277\\w\241\277\261Z\311\277\256\270\315\277\360\r\233\277x\361\310\277\324d\n\300m\200u\277\'wm\277Q~\266\276\253\314$\277\234\317\335\276\344V\346\276hO\260\276i\315\220\277\032\021\331\277\351\362\330\277g{E\277\2109\230\277\014\371\244?H\214\231?\373\251\317?\016\271)?,\303\207\276N\234n\277QI\315\276\214s\257\276\236He\277\322d\325\276\212\314\365>ktD>sY\002\276\001\032u>\010\034\313>m\245\254>\227fM?7\212\327?K.0?4z\017?~\312F?v\002e?\304b\244?!r\223?\315\375\315?\255\366I?N$\325\276L\267\251\275Kt\324>H\245A>\330\231\220?\352\327l?\311L\010?\244\272^?5-o?q\323\336>\244S\227=\342\031\301\276\302\017\033?\024\\\306=$73?n\341:?\256\016\255?Z\303\225?\'\014\251?(\000\271?D<0?@\223K\275\343\031\300\276&\014O?2\271\351\276\236\334\211\277Oq[\277F\2620\277\3606\225\274\211\363\212\276\261\365\370\276u\022i\277X\3715\276\3358\'\276\021\312\311\276\350\277e>d\203\025\277\024g\356\276\265\3729\277\244\326\201\276uZb>9\\!\277?\245\256\277\326\262\365\277R\3421\300\260\360\254\277\302L\340\2751\370\027\276bB\213\276\016\355\177\277\344\213\210\277\025,\376\277r\030\224\277s?\246\277\312\275\035\300\375\005\t\300\023\327\210\277\341i\003\277\000\250Q:\256\353\261\276\330\3259?2\272\235?\200\242\206?\347,\242?\244\260\233?\277\361\256?-\315]?\370\330\305\276m4\017>\256:\021\276\301}\302>\346\343\254\275\300\021\211\276\024\206\252\274\214\000C\276\251|!?H%3?\330E\032>\014\305W>\353\202\335>\337\177J>\311\304\316>\211\267\266?p\226\231?\311\362E?\200<\005\276\266G\006\276,:D?\325\333\332>\362\243\202\276\201s\354>\330\235k=:\2460\276bh\013\276\357\301\227\277\220\225\265>\006\260\214?\261\303\262?Boz?\3023g?6\250\227>\253s%?\266\264\013>\243\314\034\277\204\360a>\220?\250\276@\352n<\036\222\254?\335\027\353?\244\327d?|_Q?#wq?z\254G?\204\264c?\275\207\206?\365Mc?G[g?\314\322\347?\330\003\377=\234yu>\220\000\001?\250\002\335=\354\007\302\276 \037\261\276\376\017K\276\036\322W\276\031I\314\277\222\212\226\276e\342\240\276\255\347\230>\354K\034\277\nR\340\276\360\206+\277\340\360\302\274p\373\022\275\206\272y\275\207L\271=\360\267\n>\234#O?v\"\310\276y\r\n\277\036\372\325>\320\016\025\275:ru>\006\005\275\275V\205A\277d\\\222\277\032c\234>\003{\206\277\376@\261\277W\252\302\277\367{\252\277}V&\277\200d\333<g\017\263>\263B\222>\256\356\353=63\250\276\370\316\235>\344a\304\275\336>\322\275\227\311d\276\0047E=\216\343(\277`\345T\277]X\206\276\021\240E\277[:z\277^\224\r\300\204\004\006\300\234s\302\277o\212\315\277b\014\n\277o\006\210\277\345\364W\277\325;\273\277\250\254\357\277\265\277\013\300\255\021\027\300j\2542\300\r\256\361\277\346n\267\277q\352\253\277=\243?\277\201\004U\277#\362C\277\345\206\310\276\350\330\010\275\340+Y\272\264|\212?\rE\322\276\253\033\234\276X\037\220>\264\005\202?\237I\t?$\242\237\2769\022>\277RC#\277\014\376\277\276 \016X<;s\004?\036II?+\024L?L\334\000><O3\277\"\373\020\277\000\215\371<\230\3249?\022\226_?\304\362\202>\306\003\014>\276k\254>\324uC\276NCI\277\350\020\202>m\346\217?\017\205Z?\364\336\032\276\034\306\241\276\221\210\266\277\362\340\350\277\232\027\231\277\215\253\240\277\264\201C\277\277\230\344\276\310\245@>!\322\357>\360t5?\320\246\271?\244\034t?\233\022\214?\032v=?<:\256?\276\340\257?\205C\010@\346\221\r@\260\306\372?\222\324\335?\346\206\243\277H\273\001\300\030\256 \300\213\006F\277j\026q\277\004[?\277a\214N\277\345\013q\277\353+`\277\342\317\344\276z\306 \277\254\226\315\276\366\246\226>\264\267B\277j\004\032\277\334T\262\276\256\004\023\276p\275><\224\240[\277&\252b\277;\340\"\277\223&\215\276\006(\201\275\374\266\301>J1S\276\206\325\325\2760\324\234\277,\222,\300\256\303\345\277)\356\266\277.3=\277\207\227R\277D\255\004\300g)\222\277\'\372P\277\332\325\r\277\256i\213\277\022 Y\277\340X\036\277X\356|\277\334g\275>\242\351O\276\330\347\025?|\020\356==\"\203\277t\233O\276\205\027P?\025\255`?\344Z\262\276\245\362\264\276&o#?8%E>\335\354:\276\240\371\276>s]\'>\306+\200>\260o\035<\221\177@\277\264\035\253\277nr\210\277,\002\304\276@\204v=\353aK?\220\306\243\274v\266\375\276\250Y+\275\002\347\037?@\304\234\2744z)\276\020vw\277]ZB\277\3748H\277\306\3551?\366\366\227?\300\245\302?\014/\321?2\024\333?$\023\254>\0022q?R~\021?(\250\254?\300E\333?\3450\266? \017\006\276\337]\257\276:\"\"\277\010I|>\325\366l\277\336Bt\277\320\263\363>\001)\210?\352\311\343?[\373\270?P\324R?IW\352?\244\266\352?\310\303\255>\024{\225>\256-k?f\343\273>\372\213L?\234\377\251?;z\321?p]\250?\337\302b?O\364[?\320\004\242>\037\350\355\276\202\260\021\277\244\272e\277\362\254\335\277o#6\300\r\236=\300,\205\026\300\240o\274\277<\367e>\\\223\344\276:\nk\277\232\346\216\276\315\022\367\276\265\201\\?I\236\357?N\n\216?\307,\221?\333)\316?\234N\235?NT\322?\332\336?@p\330\367?\326k\243?\223nA?\2267%\276\327fj>\\\315w=\207Z-\277K\"\006\277NNn\276\210P\366<(\345V\277\260|\240\277\035(\317\277\0050\300\277\234F\232\277\032\377H\277\002\205\323?u\247\363?F\n#@\300\265U\275\272#\\\276<\360\013>\217p\243\275V-\215\276;\235\037>^@U>\036\335\352\276f\342\214>\010S-\277\024\306h\276\3245\312\276\204^\261\277\310\210M\276\353>\231?\364\2074?\376\224W?}B\212?[A\371>\320O9>>H\304?.\3578?\030\032q?\351\032<?\024yy>H\"O>z\347\243?i\233\334?\rE\004@\036\237\341>8\201I\275\247G\033\277\366\330)\277x*&\276\032g\212\276\320\332\007?\035|\240?\206\375n?)\2174@\024\335J@|\210\364?\3401\265?\222e\002?\2522W>]\260\205\275*\372>?\014\036\036\277X\256J\276\361\372Z>_\007%\277\300bu=t\005\217\276\340#\202\274\000\222%=\342\020>\275(\007\007\277q.!\277Z:c\276\000\022h?\004\272Z?@\304\021?f\313\210?\247L\220?\373\315$?2\000\322?)YN?\314\003\014?\306\315\316>`\354\377=%\307\212=\004\254\356>\342:\236?z\242t?\323Y\223?\013#\223?\2641\260?;}\337>\265A\317>\260b\034=6>\332\275\332\335p?\210\305\243?\027\223\202?r\2273?\014\215h>\330&\310\275K\311Q\276b(\336>\214\265=>[\321\037?\260\355\273?\272\004\305>\002u4?\306\'\244?\235\233\021@\261e\334?\313~e?\306\274\301?\232\325\267?\013\335\000@I\265(@\332\3374@\341\341h@~\037}@\3133{@\326\251\267?f7\255?S\007x?\000\206\310\273;=;?\t\361\267>\211\263\001?p\237\357>Vn\370>\000\213^\275\374\376\334\275\207\257\355>a!h\276\240\201D;\036\274\377\276\006)\227\276hE\\\277\311\273!\277\303IJ\277\275+0\277\260[\246\275\206\nS\276\\\230\324\276\310.\220\276e\'>\277p\325\373\277\215\016\002\300\000e\277\277\330\340\367\275\206K\341=\343\255\305>\007\313\033\277\027\217\226\276z6\303\276\356b \277gQ8\277\322\341h?\365\3477?\266\313\256\276\004`\353\2766\345\313\276@\252\010?\241^\355>\206\323\003?\212\276O?\224QF>\210\252#\277\330\n\215\2757f\025?\3208\203<\021\264\020?\021\374\257>\304\245C?;\214\000?\260\273\247>\250\222.>\275\311&\277@\341P\275\254\301\300>E\025$?\256\362\341>@w\311\275\315\276\276>\0229\027?\200\004Y<\300\304\223\276i\2157?X\322\263\275L+\031?\254\323\205?\221\375\212>\'O9\276\222g>>\264&B?RgJ>d\353\256=\035\375\017=\274\334\030<J\240\006\277\335\334\341\276\366\320r?\212\356\314\276t\271F?\252\306$\277\262wg>hO\217\277\224\246\252\277\320R\221=\034\r\026>C6R\277n\036g\277z$G\277\344,\237\276\227\277x\277\363\371\214\277\227M\301\277A\256K\277\2027m\277\312\216Z\277\266\330\"\277\004\177%>J6\202>&\016\036?\036\370\361?r\271\006@\224L\322?/C\264?\310\227\257?V\273k?\354M\214\276\226v\032>l\241c?<R\232\276tc\242\277\200\264\203;`d\342\276|\234W>\0205=\276\217\204\311\276\344N\312>\3151\355\276^\371,\277\304\030j\276\326*\377\276\200\021\275\274\314\032G?\372\242\252\276\021\365\347\276\360G$?.I\353>\341\302$?\346\237b>\346\200\004? \371\316?\300\266\220?V1\275?\333\002l?\355\264 ?\306sL>\224\302?=\262Z[\277\300\311\006\275D\270\211\277\342\275\304\277.\272P\277\004\013M\277H\022\251\2771`z\277\210\360J\276\240q_\273\026}\227=\374t\251\276\030\266[\276\022\306S>m&\322=\324\252\346\274J\343\345?\003\332\216?\3164\302?R\355\217?\014b\302?\220\205\n@z[\313?\366p\016@V\274\344?\313;\214?\336H\267?\365_\377?r\021\215?\264qe>b\207\257>\211E)?HC\220?\020kR?\204A\213?\343B\260?lZ\260?\013\367\232?^e{?\332H\253\276\237\327\206>\324\215\303?\326,\026?u\253\200\277E\347r\277\264\363\256\277%\236~\277\n ^\277T=\313\277[\000\027\277\374.\246\277\317\357#\277\240A\376<\204U^\275\215[\230\277\356\330\256\277\227p0\277;\265\246\276\2440\345\276\363\210\'\276&\261\243=\035\201M\2773\r\311\277k\262\355\277J\035\231\276\"\206N\277\224\2609\277-\315F\277\022\022w\276\224\272\010\277\000\242\016\274\204\243\252=N9&?\370\236\314\276\312}2\276\327V:\276\240_\254\276#_\001\277\246\314<?\241\270m?R\006G?\022\213\341?\342h\342?,\336\320?\305\312\366?\204\\\370?7\t\000@\rT\227?hV\n\300\023\240\n\300d\027\014\300>\272\264\277\343O\277\277M\231\001\300]\024\205\277\3650.\277\353\010\205\277\354\013\214\276\001&+\277\000\373\333<\003\224\335>\020!>?\223\240\233>\310mS?\036\n>>z\335\314>P4}?\344?)?\210D\360=\332v\317>8w\225=OjL?\232\205Q?a }?\026\306{?\350\234\332?\276=\357>\210\n\221>\230\2176?\000\214#>\332\251C?q\312\376>\240\004\310=&\372\332>:\250e\276\346k\221\277:&!\277\t1_\277:4\202\277\210\000/\276\230T\205>]~=?\3141\212\2758\3235? \3640\275\203\202\026?\\:\240\277\316G\t\300&\346\001\300(\007\020\300>\007\253\277\307\\\266\277\244\231R\277\003x1\277\016mt\277q:y\277\230\220K>\017\275S\277\275\274*\277\302\321\\\277\021a\025\277\001\216\232\276[\314`\276$I\224\276\377\365:>C$\306\275\006x:\277D\001\235\277\346\267\026\300\250\035\356\277\374C\000=\327\354\034> Rd>\241\005s?\n\332\376>\356\304\246?\320*\027\275}\006\036?\275\224E?\331\321s?\200E\210?\005\222Z?\266zr?\221\277\215>`\177\352=\334\350u\275\325\307\233\276@\360\022?\r\002\370>\340\341\023>\340~j\274C\256\034\275\242\010\306\275\373D\340\276\343Y\271>\260\034\276=\344\361s\276(\274\366\276g\341\263\277\326\332E\277\250\177\212\2778\247\315\275Co\013?\324\201\364=\247\315u\277(\307\355=3\301\032\2776\353\241\277\350\000G\277(7*\277\313\276\035\277\333\3309\277\232^\216\276\010:\337\275\271\216S?f\377\340?^G!?\r\260n?\001(\033\277d}g\276\3438\261\276N\213\t\2779\206\310\277N\327\034?\250\t\023>\246\021\251>$\346\002\277\260\363\352=\347)\021>\302?M?\216o\201?\337\013\226?\314\200\032?M\324\303\276\\\270\301>o3\024\277\313\226\'\277\246 \244\277\013\237\233\277\256\371%\300\024\005H\300\347C%\300\022\334D\277\034[\r\276n\361\r?d\315j?\202\036\333?\010E\264>\332]\201\275\374M%>O[O?\250\317R?\360\017\022\275\260tf>l\362W\276\376\024\311\276\221\255\260\276\t_\374\276@6-?\365\"\030?J\223]>@f{\273\221\350\203\276\245K\270\276yk\220\276+\256\034\277v\311\223>\374AQ\277\341\212\233\276@\225\305\275\340\257\366>R\210\247?\330\316S\276-\013\016>.\365\305>\214h\222?\372-\301?{\300\233?\342\032I?&J\241?\200\243\335\275\27002\277\241\376\313>\034\350B?\235f\264>N\002\322\276\005\310\276\277\210\036\340\277\001vZ\277t\303H\276\225\217\263\277\214o\021\300\035\223-\300\327q\021\300\327\252#\300\325\225%\300\241\374\t\300 \213\306\277PR4\275(\317\225=U\371g\276A\221B\276\212I\237\276\334FJ\277\314\363j\276\210\200?>\253\331k\277\014\223\341\277\353@\225\277Z\266\235\277\204\361;\277I\225\244\276\375\244%\276~\252\210=\264J(\276l\377.?l\301L?\305\035\331>\033$\304>i\030\024?J\325\020>\375\252\271\276l\036t\277L-\332\277\030\232~\277\211y\235\277\202\206\022\277T\251\217\275\316\3400?\237XJ?\323\341\003\277\304\360+\2772\251\265>\002\321\320?h\340L?\270~s\276\000\272L\277\027\213\320\276N8V?X\226A?\271\373\241>\255\326#>\017Oj?\016\270\277>\t\272\\?\3248\033?\225\246\002?\270\204\r>\000*\342\276\254\323\263\277\377\334<\277\233Q\265\277\026Bm\277\310\306;\277\"\246\177\277\376\274\221\277\014\227\034\300\264,7\277L\006\212\275\367\203\240\277\000\221\220\277`\t\361\275\324\034\372\275\322\365\337>1\231A?\207\273\202?\240\201\032?\032\262\251?\374\240m?@\2317\2760\010\261\274\270l\036=\212\333\201\275R>\277>\340\355\311\274v\226\000?a\252O?\036\343\225?Xv\345>\344\362a?,\037\306?\224X\241?\374`&?\267\357G>\022\222\020?:\023\301>\\\326}\277^\334u\277o\200\222\277j\230\234\276\rMx\276+\033X\277\332\035K\277\207\0025?\\\004\321?\337\225\331?\377\256|?\024|\321?\006\213\333?RN\004?\364\250\016\276\276\223\222\276`\377%\275\237H9\277\262\363)\277$~5>x\324,\277\375\363\\\277JV\215\277\234\256\357>\204\216\365>\354\270]?\003\2130?\361\006\013?k\022\215?\032\000=?\000\326\036=\267\351_\276\234\373\217\277\301#\025\3004\037H\300\210:1\300bH\016\300,\245\025\300&\335\357\277GZ\220\277l\032R\276\357\246\'\276\025j\211\276\320^\360=3N\356\276[wX\276\366\214g\277yh\355\276W\321\007?gO1?\206\221\360>\217;\243>\222\021C\276B \247\275r<\307\276\224\222\025\277\230\261\270\276t\210G\276\271\007m\277\335V\366\277O|\307\277\020\0232\276\000\000\255\270\260\204\004?\020\3602\275\241\330\212\277\214\006(\277\004\"G>\211c+??\2725\277\226\017\271\2760\020\304<t\317\274\277\356\362n\277H\300z\276x\332\202?`\336\220\274I\277[\277\357\306$\277P\240c\277\021\336\214\277\240\212\336=PaQ<\022\325\204>\007,\373>R\207i?8t\230?\343\216\303>\351\343\254\276\310|i=\220\355\010\277\307P\223\277T\r\230> \242~<;\320\n\277\230\362\237\277\274\305\305\276\2729\300\277g\2548\2778\001\202\277h\r\272\2754\202\366\276\214o\203\275\275cW\276\032\267\313=tS\253<\020\322\230\276\302\347\274\275( 9\277\225\005\377\276t1E\276@\031\352=EM\334\275\345\2241\276\031\366\251\276\320V\210\277\2427\240\276\274-\016\277\3723\221\276`\365\027\276\000\206K?F\t\007@]x\036@\351\254\271?\354\257\215?>\340\220?\314\021\377>\224\265:>\247\312\240\276\034\315\305\275\027!8>\252\252\346\276\027>Y\277Yo\225\277\360]\005\276e\372\335>\376\220z?\331\'l?\030\307/?\"Y\253\276\225\315\225\276\\\036\022?\344*\t@X\327\364?\276\317\316?)p\177?\227\3626?\322\204j?b\246\233?_9\364?&\003\303?\370\206\036?,FV>R?\377\276j\357|\276#E^?`\346P\275\001\256\303>2\335Z?\377\260\235?Y?\202?\243\377\201?\270rB?\0021\037?\234h\241?\327\230\251?i\345\021?\t\315\317>d9\035\277\n\227\246\276\236P\233\276@\356\263>\206\\1?\026j\244?VJ\254?p\340\251>\272\253\330>\322\357R>\344\314)>>x\276>*\014I>H\033C?`\253\007=\232\344\223\276\024\303\223=m\020\206\277\303\010S\277\270\211?\277\330\002x\277]`\224\277\336\303\357\276t\366P\277R\332L?\030\260\300\276\2331\205\277\023\277\233\277\267/6\277\272\016\036\277\211\223\'\277\"\266H\277\276\205\370\276\037Fh\277LsT\276\006s\271\276\275\341\025>\215+7?{\013\t?Q\277\305>f\255R?\342\340\t>p\334\236\277\354\220r\277\010h\275\2774\361\270\277L\254e\277\365C\345\276\321\237u>(\364\251?\244\215\324>\360\344\313\276\030\237I\275\343\004#\277p\236a\275\304X-\277c\335\211\277\353\254;\277\000q*\2733\'\251>E\200\022\276\300\337\301\276\317\316\212?n\tB?O9 \277X5\341\276-\273\225\276\027R\341>Nd8?`6\222?\006[\335?@F\217?Il}?\227\237O?\241\033R?Dr\245?tq^?\017\376\002?|\017=?\240\261\230=\324S\312\276h\026\354=\216f\352>\336\213\225>\200\260\205;\'C\026?\000^;?\027\224u?F5\254?(1:?\324_\031\276\004h\237\276<\230\215\277\334C\007\300lS)\300&\302\270\277\300\375\312\275\026I\231\277\370.\345\277Y\026\352\2777\377\346\277\340\334l\275\312\207j>T\ts=\321\306>\276\034O\202\276$)\201\277\030\234.\277\354\302\367\276\237\035\030\277T\027o\277T\r\270\276\001\274\213\276\\7\374\276\333\261\234>\246r\324\276\202!\217>v\331\016?\342\325\t?\341\362\235?\017B\310?\306\n\320?!\367.?%\276\202?\233\227v?\272\021\237?x7\320=\350s\330\276yG\251>\004\001M?\350CH\276\241\241I\277\004e\202=|\250\202>\231\t^\277\033\n\321\277\376\347\206\277\nxb\277Vjl\277\366\226\225>\257\001\231\276\217\005\254\277\302\317\210\277\204RS\2776\251&\300d\270C\300O]\031\300\345B\002\300\007 \263\277B_\342\277\276\262\304\277\254[\313\277R\035\350\277@?\375\277R\317Q\277x\372\217\277\214\275\311\277s\253\270\277\2369\374\277|\037\310\277\322j~\277\\*$\277\326s\013\277\3065\017\277~WF\276\200\370\242?\202]4?\254|\031>\277K\317>\370$}\275\342/\217\277y6\223\277\032-\017\300\272\031\364\2779f\000\300\022R\316\277H\366\210\277 \031Y\2761\263\001\277X\313\034\276\007~\262\276|z\212>YY\202>\204{U\275\3416\264=l\254o\276\264\200\223\274\024Tv\276#0\024\276\212\211\205=F\010\000? \017e\275\014\276\266?l\224\202>\271<\013?R<l?4\257\306?\267/d?X\221\240?ki+?\200~\220>|j\307=R1 \277\210\217D\276j\346\004=?\374m\276*6\247\276J\027W\277\r\360Z\277`-\245\276H\205\243<\314\237\036>\274\222\037?\243\205\025?~\242L?\247Vd?\304K\006\300\360\006\023\300\024+\361\277\006\027\271\277\360%$\277\000\010%=s\303{\276@\035\264\277=7\325\277\373Z\344\277\3340\220\277\276\237\231\276S\033\036\277\240A\022\276\020\372\205\276F$\310>$\345\246>\353\2367?\226\321p?b\226\353>Z\331\234?\210\364\262?\340:\256=Z\353\024?|\246\t\300:]w\277\211\000\177\277WI\004\277\300(\247\277\276\246\002\300A\333\233\277\232f\372\276Z\3035?\276\202m?\016R\006>t\376\315>\214\336\255=[\356\003?\360\271]?\340\217\014?\260\nT>\210\324\347>E \327\276\242\270\006\277\024Xg\277@\350\332\277\010\250&\300\311h\005\300\361\255\265\276\23090\276\214sF>_\325\010\276hKd?a\310&?\230\205\213\277\222\004Y\2774y\231\276\010\316\200=BQ\206>\336\037{?\262\232\264?\202>\232>\330\352L?N\353\231?\236\376\312>\"\3152?\237(\331>Z6p?\340a\371<\375$\360=\203>}>\244\314y\275\364\265\007>9U\001\277}\r\242\277xJb\277\354)\r\277\022\332*>;%\017?\320\204\257\276I\254\270\276\2549\257=\322\324l\276\032b\035=>\222\330\276\020<\330\276\206\233\335>M\244\251\276\006\376.\277\230p\033>\260\360\302>\203\322\307>wn\203?\236h\345>\022M\344>\2232\247>d\370\333?\355M\307?\000B @V\261)@\024\337\260?u\341\247?\302u\262?\310\344+?\304\344\200?\032\021\257?\360\340v?k\201\205?]\036Y?\240Ua=\007\224^?\355\005\207?\363\001\013?\225\023\245?$\235m>\n\000\212=$\210_\276\204\254\003>\036V\277\2758\343/\276>:\031?>\220\307>-\340??\220\227[=\317S^\277\216O\223\277`<\264\277r6^\277 7\201\277\264\241&\277\014rB\277\nOM>\265\2115\277\024E\276>T\3455?\034\375>?\274\303O? E\206?a/\305>t\252\255?v\'\301>\r\3149?\302\005\206>H\271:>yO\032\300x\333;\3008\221f\300\301\372O\300h\2278\30026\017\300\332`\025\300\036\326)\300\210\253\200\277\017\275\001\300b@\347\277\331\341y\277\213Ne\277\312X\242>Z\345\001?0\264\211>fz\265\276\352:v>\343\335\217>\000\365\203\272!\202 ?2gs>\002\317\317\275-\347\"?0a\010\276\224\300\345>\212z\354>\223\342A?\274\267^\276\250Q\316\276*|\021\300_\243\n\300\350\362\307\277\013\022\235\277\255%\227\2777b\220\277\035\330V\277\255\244\331\276x\236&\277\376\230\376\276\024\270\022\277\354Zf\277\220\350\267<x\352\270\276\0028i\277\001\274\204\277R\2664\277l\261\234\276\001\331\215\277\214:\263\276\272\334\256\275[(S\276\202d\214>\025\273\272?L\016\367?\372\325\322?\352\036\221\2765A\010?F\352U?\373<\207>[\206q?F\217\202?\333m\360>\264g\376>\310*\205>\262(C?\000.-=$\301o=\313\374\302\276\201\250\222\277l\374\253\277\241\324P\277\266\214\372>\330\351[?\242\025U>\315\032\006\277F\343T\277\230?g\276 \ny\275\211\035\220\276\227JU\277\312\026\216\277T\374\253\277\336\276\243\277\214\r\004\277\346$\317\275o\013\007\277jy>\276\213c3\276\332\3568\276\227\347`>\324\242#\275\344\350\243\276\036\032M\277\370\224\220=J\t-?H\364\256>\31670?\336dp?\274\215\274?\260\261n?S\304|?x\023B?\200\235S\274Tl\t\276H\356Z<\301\324\312\2766\321F\277\223\300N\277\024\022y\276|i\342\276\200\254\207\277 \356\256\274,\033@<\217\242<?Yr\211?\262\234\326?\326\n\267?\374g\212>\022#S\277\225tr\277\272}\234\277\372\322\262\277F\026\325\277H\367\206\277-\242\376\276\262\323]\277\027\323-\277\254\037\237\276\310\245M\277b<{\277\215{\211\277\203\010\206\277v>\243\277\376\220\312\2773\"\356\277)\363`\277t\242\316\277\037B\302\277\302\022\374\277\344\000;\300\302V\327\277\013.\310\277j\301C\277X\325\316\275\314\261^\277\340\035\024\277\276\024\020\277vt[\277\\\215\247>Vi\276>(\227\327>\200W\310;i\241,?\000\3040:\326ca>\206\3551?\374\347@?N T>\360\242\266\276\375\212\227\277\326\315\007\277\213\033\317>\371\005\007?-\027\002\277\312\250\336>\310\006P?\240;4>@\034\356>\364\037\231>\276\302W?\2329\007\276I\271b\277r\\(\277x\335g>cK\304>\300\343U?C\361\337\276\222\034X\277&g\222\277\254hS\277\315\376\277\277r\3458\300\370K\301\277|\223\005\300\234C`\277\231\322\352\276\007\341\022\277\010\247\251=Fk\201\276 \233m\274\372\342\034\277\217\033x>\000\346\352\271\366>V\277\262Z\301\277;\337\331\277*K\232\277\254\227\266\277\307Y\301\2774\037\332\277\016\216\223\277\320\231\233\277,\245\001\277\240\277\\\276\210\313\251>\036\323J>\340\026J?bW\207>k\362\202\276mu\010\277 \330@\276~\357\225\276*6R\276\200c)\276`\n$?\002~/?\316\022\271?\217\362\030?\202<\316>\310\243\250? \037\235?N1J?\276[\203?\321\177\314?\314\241\360?d\277\234?*w\363>y\372:?\246\323G?\305\247\245>\010\004C>\250\032\r\2770\rH\277\202\307\202\277ICH\277>\014\201\276\036!7>n\321\201\276|\370\304>`Da\275;w-=\336\214m>\232\323\217\275\306\020\316>\264\331M?\\\326;\276\"^\034\277k\"\371\276w\333\353>\251\350n?h\330\267\276\311\2171>j\324_\276\026\353\020?\014\370\026\277\351bW\277\351k\230\277P\230\037\300\002V\035\300W\255@\300\352l\001\300\315\346\360\277\273\351\024\300\271\255g\277f\237\344\276\234\376\227\275\006\2358>\277s\252\276\027\357\000\277\250\001\367\275\2211e?0\256\376\274\263t4\276\300)\364\276D\026\253\277\217\305\204\2773z\255\277\305\225\305\277\373\327\302\277\354\204\216\277\021\006\272\277\2748\205\277>\034\221\277\220\336\250\276\243\232\211\277\033c\021?\2713J?(\270\022@_e\373?\347\254\354?\237 \272?0\337\321?`\265\202?\270\332s>\202\253_>\005\264\033?gg\177?\335G2?\331\017\375\276v\266\303\277x\006\211=\321\332\226>\303\n\205>\206\324H?|)j?\257\303b?@\003\367?,\335\271?,\350>?\202n`?\3200w\275\010\233\023?\000t\030\274<G\240\276\202\322\'>\304\007\324=\370\2357\275\234g*\277<\022 \277\204\333\031\276\314\014\343\276\331\243\321\276\216]\355\276cT\215\276k7\366>\000\242\317\273\311\231\t?w,A?XkW?&\377\360>Y_w?W\272\230?KyU?o\367\323?\213\365\347?\304\312\271\277\013W\375\277Ef@\300\372\232I\300\256!;\300\361/\311\277\322\372\250\277\2440\036\277\264 \210\275\250*\216<\032#~>\254\333[?\252.\320\276C\372\201\27612O>\205\020\037\276\370\224\035\275(u\035<\035\021\302\276 \354\345<H\3640\276\312\220x\277\374\314\262\277\221\333\226\2776\330\214\276i\'\022\277\264a\234>\036\303x?\216-\271?\200\216H<\350\031\320\275,d\273>\270\241:\275\271W$\276\314\342\307=Z\'o>v\252\207?\335\0233?U\356h?\274\275]?\306H\t?l\250<\277\350\233c\275F\203\341\275\256E\001\276\340F\267>n\336|>\306\354\346>\310\351\230=6\310\363=f\017D\275\311\017q?\342\260\240?h\314\002@\274H\253?\000\253\207?\226\032\245?\207+\323?\0006\243>o\306\027?\240\326\t?R\230_?B\361B?\034\307F?>7\246?\350\207\366?\377>\006@\262\254\344?\023\351\232?Q\207\236?\210~D>\021\006\203\277{\037\303>\2624I\276\032y(\276\230h^\277\274R1\2775\240\204\276\016\370\240>\334\271{?\334\334\332>\220\004\274\274\n,\363\276\2372\363\277d\247\212\277\205\363\264\277\231\315\305\277\211\036C\277\312\377\356\276\304\247\344=|\226?\276$4Q\277f\240<\277\324\227&\276~\232\261\276T\037\023>|a<\277\235yd\277p\254\365\276\312\265u\277\234\330\310\276\216\303\316\276K\3117\277\366}\213\276\r\306\200\277\356\200\230\27730\277\277/E\202\277\001A\214\277\372\001\033\277\032\261\220>\350U6?FM=\276mJ\003\277\364^\016?\256\331D\276I|Y\277\326\264\250>\324\214\014?\354\036\007?\272}\203>\022\256H=\224\355\231\275>c\250\275\200J\025\277\307Y\334>0\026\373>;\024\223\2769\305\202\276^\240\273>\305\325\337>\272\302\000\276\306\373\201?\034Y\270\276\257|b\276U\242\025\276{\271\373\276\314\261\003\277\322\350\274\276\356\000\006\276}0\214?7\260\323?.\310\363?\224\272\'@\264\330\245?\330Q\022@\241\001>@\230+\010@\034\261{?\352\t\200?\260\005\353=\240\324\253>\220}\205?\342\255@?B\230\302?\014m\333?\276o\330?L4\230?\027\304\'?\370\215\215?\316\254\334?&,\"@\004\205S@2.W@\244\240,?\032\312a\276\nx\'\277\365|\020\277D\340;?A; ?hI\312>\334\203(?\220\301\202?\035O\203?\216\343\235?\212/7?\313(\252?\256\030\010@e=\361?\330\300\241>\364\352\234?\252\213\220?\016\352Y?Z\004E?\333\340\310>\214\356p>v!\337\276\3602\325\275\001E\254\276\341u\211?Z\313\005?h\330\344\275M\001E?\207\036g?G\332\254?\360\211\377>\344\227\377\276_\316\242>\002\255\r\277\367y\023\277\377\303n\277\034\3601>\247\234\025>\210yb\277\3430\374\276`\331\200<\316y\233=\316\376;\276\021\372\302\276\274\271`\277\000\362\367\276\326$\234\276(*/\277s\031q\277\027\002\362\277\371\213\313\277\330\262\036?\331\276B?\n\3608?\032X\240\276\260\257\314=FGl\276\302D\036\277@\332c<\265\017\037?\246\304\312\276\242/\001?\246g\336>hMn?\350%#?\000zt=\n_\006=\302\001M\276\364\031\024\277\326\311\257\277\300lT\277\340+7?w\307\245?j\315\333?P\232\350\275\306\005V?H\305x??\354\023?\210\025\255>q1.?CQ\371>0\207\252=9\255\211\2776\341\342\277\245\356\226\277\340\372\266=\014\263\334=f\316\005\276\377\241\020\277\026\2344\276$\205\260\275\327`[> 4\010=\220N\034>\234\027\217?hS]?\362i\314>\262\027^\276h\035\355\276\204@\336\275\320\262G\277%S\312\277\255\033\235\277\322*\213\276\256D\227\275\370\3172\277\375q\n\277\000\367\224:O\326\036\2760f\203\276\3558\265\276\266\231\240?_\271\336>\240\006Z=\341|\310\2769*J\276\017\343a>2\330-?\032_\273?\260{z>\202\344\374=*\234\033>\234\0212\276iL&?H\252G?O\237\265?a\273\000@Ph\032@\346L\257?\032a\302?xz\313>\317+\316>\374\300R\277x\361\211\277$f\315\276\031\326\376>\tY\214?Y\200\200?\025\n~?*\264\310>\350\025l\275\034\217\364>\256\013)\277\367R\334\277\374\017\331\277\300E\026\277pQ1\276\344\224\245\276\300u_<\351\336+\276^\003\322>t~|?\'\336\323?\205\000\223?P\022`>p.\223\277\220\371:=\016\334\366=m\324\240>\210\211\224<\350j\374>\316[V?\\\225\034?$,K?\207\213q?\020\271\301>aH\214\276B\013\331\276H\3047\277z\214\215>`8a\274pc\356?\246\273\376?\002A\322?N\362\272? \312\232>\270\007\230=j\236u\276^\225\365>\t\345A\277\255Zo\277\334lq\276N\311d?\006\033f>6\317,?d65?\273\301 ?\230w\n>4d\334\276\243\334\026\277Z\252\331\276\256r;\277\222\220\237\277@M\226=J\346!?\253\336+\300\334\330\246\277\225\243[\277\214\354]\277z\237S\277B\241@\277~\332\002\277B\004~\277\\\277E\277\360\270\216\277\222\332\217\277I\321\253\277\266\352\255\277\223)\260\277J\246\010\300\340Z2\300r\'\022\300\256$]\300@\351(\300t\253\311\276\320YQ=T\2224\276\234\311\333=\276A&?\226\177\017>\304\310\275\275\036\355\003\276\257\316\332>\260\333\266<\\\340\234\276\2446+\276\237\375\r\277\004\334\263=\251\245(?\306\373\255>h\326@?\264\217\271>F\362.?4\2233>\223\265\002\277u+\332\276\313\264c?\351l\232?\376&\363?\320D\334?1\177\036@\013\002 @\356\210\"@T\210`>\364\001\002?b\027%?:G\026?&i\207?P_\217>\324\237X\275<\227\201?8X\017?\226Y;?/\006\311>\354{{?fj\220?$\377\251>\366i\225\276\260o\265<\361z\213?2S[?:\025\305?\241I\243?\2400Q=\254\344q>45\t?\200\320&\273\210p<?\n\033\275?n^\234?-\311\250?\037V\231?\334\013\313?\340\311\014@\254@J?\0102\026?\2648\004>\2759\006?\007\305\027?ZXf?b\r\200?da\261>\322\220\356>VP\037\276\025#+\277\214:\022>=5\215\277\244\210\263\277\344\247\013\300s\241\375\277\362\362\002\3004Q4\277e\305-?\304N\032?F\237\013?\205j\204?\324\331;?h\371\245=\210\204\032=?\337s>O\207X>\356\270\013\277\007q5\277 \203\364\276*P\241\277\007\373\305\277\340\'\022\300\317[\024\300\365P\025\300G\347\035\300\256\264\000\300\034|/\300\n,3\300F\324\243\277\350\2171\276\270\377\270=!\377\033?\316\3708?\220\275V>(T\233?\241\n\177?O\257\351?\334\211\031@\246\345,@\224\204\024@\266\233(@*\274\n@\370\234\322?\316a\240>\264)\250?._4?\374\373]?\343=\234\276\312\357H\277\320\003x>\206\036\267\276nw\200\276]\265\231\277\336w\030\277\322_\221?\027\306\321?\271\252\201?O\305\016?\0059\217?i\316\223>\304~k?<U0?x\330\263=\322.!=\303\373+?h\321\325>\242jL?\377gd?\003\360\266?w_\240?\371\364<?\232\307\221>lzC?\347\271\232>\312\322Z\276\322\230|?0\2617?SI2?\250\202\260>\360g\261>z/ ?\234D\233?\347|\327?\237,\021@\241\3532?\220\034\335\276\317W\003\277\213\226\207>@\023K\275\014(h?h\201\347>p\034>=\306\314\317\275&\201\373\276\236\326\257\276\333\024\274\277\220\"\347\2770\311\257\276\271\315\233\276\300)Z\276\360\264w=u\210\207\277\324\247\301?\302\275\301?F\367\301?\360\230\302?\334\357\233>@{@\275\023-\356> \364\025?\226\320\006>9v\241?\246\026\336?\365\361\325?\331\\3?\300NL>\324\242\354?\344\026y?\323\222\355?\375\3375?D\226j?\246\373\376>\202\273~> \342z\274\025\203\361>\222X\377>\262\2532@\212\224\365?\272q\023@\036\216?@\210\303?@\327\3542@,4&@\267\035,@}`\340?\321Y\002@\357.\366?:d\001?\\\t\262\275\313u1\276i\322\277\276\376\353\222\277,\376\027\277\334\016\240\276\032\256j\277\202\304\215\277\252\217\243\277T\313\027\300&\315\025\300\203\021\025\300,(\000\276\215\324\333\276\324\252\213\276\360\027\255>\350\\\307>,/\200>\371\223\020\277\342\350J?`i\034<\307\225\"\276\254\r\022>\014\350f\276[`)\277\220\221\226\2777p\254\276RtL\277\254\376\200\277b\004\363>\254\244\256\275\242\303\304\276TU(\277@\253K=\020]\215>\311\017Z?\234,\330?\226\351\260?\260U6>/Ng\276W@>?X\357\241=\366q2>\254Z)\277\"^\025\277/\250\260\277=Ax\277\204\003\314\277T\313y\277x\225)\277\246k\233\277N\034\211\277[\236,\277\234\220\026>\272\367p?\0059\205?\362\310\340? \311\224?\366_\274?\274s\362?h\234\336>\357\304\241>#\037\t\277r\232\033\277\022\356\306\276T~\210\275\220\313\264?H\233\217?\262m\310>\221M\211\276\256\304\030>\326\355\275>\013_\367>\2042\327?\350\237E?Nk;?\0346T?\006\265C?\234\252\031>?Y0?\266\300\200?8/\244?\235\014c?\323>\256?FlU?\224\024\374\275t\324W\276\371\020\325\276\230\276f\277\016\3743\277:\230>\277\323U\275\276p\004\237\277\364\212\231\277h[\340\277\274\351\260\277\206\300\344\277\332!\201\277\370\017\256\277\\\2139\277\365h\206\277\245Rh\277\350\215g\275x5\332=\226\3746?\177\030\210?\375.\203>XWZ=\272\307\331\2777\374\257\277\312\205\262\277\377/\237\277B\034\320\277\314{\374\277}\242G\277\342\032\260\277bO\345\277\274\201\257\277\277\322\215\277\353W\252\277>\264\263\277\335U\273\277\201\022\372\277\227\267\252\277\"\210(\277\220\001|=\314\302\333\276\362\212\306>\356\217\277\276j\361\030\277ibJ\277\270\034\277=\255\257\225\276\362\203\245\276sK\177\277\310\2573\277\256\226j\277l\356\244\277\204?o\277\316\3007\277\004\025o\277T~i>\002\024/?\2344X?\240\265.?\305\035\340?w\260\210?\200\260v?\212-S?\324\256\200?\334\246u>\260\325\216=\234\301\335>\242s\321>\315Y\215>\010y\332<\016K\322\277\010\267\006\300\332\265\010\300\340\227\325\275\214\032\304\276\002\266\225\276\377K7\277\304\261\002\276\277\025\022\277\200\365x?\255kl?\013\205\025? \0239=P\204\262\277\371\312\233\277\236\016\273\277Dpj?\006\242J\276?l\342\275\310@\307\275\20246\277\332\300\203\277\244\246\256\277K\260 \277\014\320\207>\264\234\027>\021\025\212\277\000\247R\274\365\235!>`\321\r<\254\371\302\274m%\206\274\350\037\t\276\244E\t=s\022_?8\034?>$c\255\275\243&\371\276=\367\232\277\353^\241\277*\201$\277\273\r\375\276X\214\257\275\214\221e>FvD?\320G\270?\333\226\275?,\205\253>\246\233u?\260W\230>\242C\222\276\360\233\341>\034xy?\372D\275?\006\027\254?\033\013\220?\366 \037?\324\223x>^\334\017\277\352\260\367>\347\002\332\276RF\207\276p,p\276\"\0041?@\025\356<j\373\025?\262iM>O~\013?p\\x=\177\323;\277@\ng\275\214\353\356\276\027\250\276\276\300s\230>()Q?\226$\224>2\020\301\276:o\313\276\313\331\360\276to\246\277\355\301p\277\310\007\253\277|\022\237\277\217(\242\277\216r\203\276\347d#>\366$\016\277\236sw\277\340\320\003\275\3213\321\276,\n\252=\320U\202\274a\217\r\277\220&V\277\322Q\236\277&,\025\277\331P\026?`o\257\275\324\357\210\275\\\361J\277p)u\277\372w0\277pns\277\304o\001\276\300C\215\276\266f\236>\356JG\277\373\000\216\277P\223\177\277>\240\241\276\210\354\230=\354\037\212\277\375\014\003\277K\253f\2779\010\255\277\010p\303\277\275\264\032\300\334\250\205\277\277Zj\277p\253\252\277\302\220\271\276\325\334\377\276\276\210\016\276\374Z\'\277\216\246\244>\367\032\005?\026me?\307\347>?W\002\242?\024K\326\276}\254\213>/\2448?\006\r\214?\226U\260>\177\341\227>\"\021S?\271\025\n?c\203\277?v]\261>5\t\230>\204Q\245=\r\257\371\276\240\037I<Q\343\204\276\330A\313?5\010\001?\300\022b?\033\370\242?\013{\020?\256V^?J\333\253?\272\241T?\222q\330>\265m\364\2764P\031\2762\347\000\277Lr\233=&\342=\277Q\366\251\2764K\034\276^l\374>^R\001>=\010\300\276\020j\376\275\303\2371\275PNF\277\350\266\240\275c\031\264=lZ\327>\263q)?W\312\"?\202\367\003? |\211>x\376\365>\260\3208\277\202\344\376\276(\364\277\275\221\267)?\330:&?\205\210\235>x\027\264?^\030@?\250\354\016>\330m\367\275\263L\356\276\230oD>\"\372\274>\314V\261\276\326k1\277\344f\217\277\251\202\261\277\260\223\037\300\225\242\331?_y\300?\270\010\030?\002\310\211?\345\242\223?XJ@?m28?\217\021\257?N\032P?,\313\014@B\036z?\016\'\336?r\362\363?W\367\337?\304\253\370>\003&A?\315S\300>\330\267*=\216\030\n\276\n\007\346\275\200o/\276D6\350\276\274\3204=\031W\222>\021h\210\277w\220\242\277\364x\320\276\350\257\213>\371\221\264>\014\\+\277\027`#\277=\204u\277m\177\231\277\304\355\213\277\315r\232\277r\251\224\277@\3303\277m\023\307\276\230\255\272\276Z\305\237=_8\206>\270b~=\002\330\223={\227\227=@\225W?\316O\200?R\203\232?\352\230 \277\344\223\017@j+\355?\032\254\007@\274\247\276?/\352\201?\003\272\352?\017\025\004@\303\355\305?#\342\275?\256n\305?&\351&@\254\007Y?\200A\360>t\'\000>V\213\223\276\307\025\343\276nK\205\277dE\033>b\t3>.\205\230?\367\026\215?\304I\272>l\254\207\276`\353\270=\204\302\020?[\3430?b\263??\364v\007\276\t\036\335=\377\'$?8\005\025?\0047H?\020\352\033=_\230y>>\357\201?\002\335\270?\000\235\254?5\021 ?\364.\335=\262\367\325\275\021\004\210\277\272\222\336\277h{\227\277\272\271\322\277kaj\277\016\334\256\277\002\316z\277E\252V\277\315@I\277t\375,\276\242O\347>O\003\211?y\271\272?\020\307#@\307\247!@\3678\371?\227a6?\r\253W?\212\007;\277\347Z\244\277\332$\314\277\r\016\353\277]x7\300\21577\300\335tB\300\013\373U\300\221Da\300:\267.\3008y\266\277\344?_\277\251\300\210\277\352.~\277\267\211M\2776\222\371\276<\007\353\275J\300\206\277M\213X\277`\307\350\275V\255\204\276\014\034\340\2766/\005\277\251d\260\277\367R\234\277|n+>0\371\352\274\203\352\026>\031\335Z?\354\t\331>;sx\277Z\242B\276\2467k\277\200]p\277\356{x\277g\376v\277\220hx\2770\213\222\277\313q[\277a\216\253\277\274\343E\277\'`\022\277\266x=\276\323\335p?\020{L>\036\364H?\304\327%?irH?\304\005\350>\237T\310\276\260\330\341\274W\223\003?2IB?\227%\263?\330U\230?\255\233I?\202\nx>7\365\r?\240PU?,\226\324>\034</> \232f\274{\272\250\277\260\022\016=\2344\265\277l\250\217\277\325+\255\277>\204\340\276d[\010?\241|+?z\210%?\336(\255\276h\3454?\204\236N?\273*V?\354\300\201?(\371\235>\340\251$?\356!\265\276\252{\275>p\367\315>&A>?\220?\304=\257\202\327\276\354f=\276z9\321\276tn\020?\267ca?,\230\005\276\306\370\t\277\301\\\000\277\370\t\013\277\230\240l\277+N\256\276\013k\267\276t\266K\277\025^h\2774\036\271\277\320\307g\275\366|\232\276r_\254\277\020P>=\307pN\277\304\276\004\276\016\363\364\275\206\235*>%\311\342=D\2368>\350X\264\275n3(?@\030K<\364?S>\244\326\202=\245G\252\275\346g[\277\247\223\227\277\356\272\242\276\263\215\354\276\205\266\032?\ts\006?\022\321\255>z\200\302?U(w?x\243\246>},\342>\002P&>X/\306\275=wJ\277\313\260\035\277\334\333\253\2769\204\026\2776*Q\276u\266\235\276\347\301\331>yk\237>Go\350>9\272\n?T\237G?\2668\224?\016\004\224?\007\316L?X\353\003?\376X\337>\234v\242>\226\237\003?RJ\201?\214\311\253?\\O\303?\331\324\365?\362\334\033@9\007#@H\266\014@\244(\223>\213\252O?D\365\206?p\262*=\350\363+\277\272\024A?=\3448@\016|\267?\360Q\305?\032\023\023?\377\254\234\276\272?[\277\356\234\202\276=\353$\277\3426\205\277Z\031C\277\240\331\357\276H\365\264\276`\327R\275X[w\276/\321\234>p\206h\276\366\242\236>\002\257\345=h\000\202\276 \257\237;\322<\314>d\232\342>\333\t(\277iB\341\276\226)E\277M^B\276\":F\277\242U\212\276\372\237J\276\364o)?\034.6?\344\335\006?\340n\242\275\276\004\231=\204N,<FZ@\277\000\336\013\275\256z_\275\234\321\261>\342\223%\276Z\024r\276\233#\031?\216\361i?\350:\211=]\373\016\276\333|#>u\301k?:6\330><\357r>\334\314L\276\023\347+\277\037\372*\277\010N@?\037F\311?\216\232\305?a\034\377?\017\300\273?H\367\225?\370m+>\320\032\210?\030\237\254?\344\342\251?\235\007\022@\324\225\006@AW\201?\034i\'?\366\364D?f\261V?\300\263!=B%\303\277\177\244\246\277\300\t\252\277\321\246\007=\247\227,>\232\023;?\2646\274?K\026\227?\310&F@\\\3350@D\371D@nn\007@\212V\237?\004\0248?\310\353\225?b#\266>\261\020\220\276lR\263\277\000\253v<\214\016\223>\304Y\237>\203U\302?\217~.?\240\372\202?\2702\007?\026;e?\206\005\262?&\026\302\277\262v\367\277\214\016\023\300p\361\267\276\340\331]\277j\213\254\277\222\374\026\300\276\203\020\3002\320\312\276\354;\336\276\013\214\355\276\364y\342>I.\036?-4\231>\020w\361\2753<`>&\227b\275\240R\213\275V\250\031\275K\200\016\277\333\2315\277\342\357O\276\274P\377\275=\017\033\277Wo\302\277\036p\206\277\034B\325\277\342J\255\277ken\277dP$\276\226\005t\276\366kc\2775\327K\277\312\024\204\277x\232\204\277\240[\314\276\374l\260\276\360\260\237=\240\200\033\275_y4?\320\352\340\274Y\245\014\277\334}:\277\261|\270\277\356(\326\277\233\273\351\277@\200\n=`>\256\277\356@\310\275\234@k\276\202?\017\276\253\302%\277C9E\277\244\r\217\276<aG\275\237\306\"\277\250\203I>3\333\351\276\030fV\275\324\262_\276\230\307\374\276d\216!\277PiD=\214\203\226\277(2\357\275\315\260\345\276$mV= \373\356=\200\344\341:\224D\003?|uE?\317e\277>\270\2131\277\351\363\201\276\203\202,\277i\256\364\276\374\371\031\277\024w\211\277r\245:\277d\304\335\277\374\204s\276\216\375,\277\364\237F?l\334\316\276\006\217\003\276\026$\341>\204[\213?\254\203\245>\035\347\344\276\020\013\234>\021K\213\276\356g\207\276\266\311,\277\366\201P\276\010\3667\277\260\250\203=\226\003\346\277U\017\025\300\307X\330\277 -v\277D\355<\277f<d\276\222\226P>\217B\363=x\321\364\275\233\270\263\277OL\360\277\241\226\004\300\355\3667\300\250\347<\300zL1\300\227\376\367\277-\272\000\300 \300\001\300\356I\247\277Y\301\225\277\310{\302\277\252~_\2776\216P\277?\001\253\276\252Z\357\275\322q\300>\201\006\273>(M\253=\352\324\353\276\005\036\241>\216\270\323?\320i\302?\030\270\321?\350\271\333?\363\2213@(0\364?\027\335\004@\272o~?,\343p>\210|\r>\000\016\000=\'\346K?\224\225\320>\375\325\376>S\020\003?*8@\276\361\234u\277\342\224\254\2778\303\242\276\214\024\365>\312\002\177?\330\263E?0ml?g\0079?.\010x?\313\325n?\210\024F>Pq+?\210\331\215?\321o$@4\346k@\236Z\276?W\"\007@\341\313\374?J\'\264?u\302\320?\220\353]=\364P\250?2X\346?\223O\277?\220!\365?\365\010\000@A\032\205>n\300\036\276\017\376\352\275\230\332/=\035\254\n>\030^\007?\310\217\374>n\232\340\2765aQ\276\244\014\337\276|\257\006\277\000\006\323\276\222\371\202\276\220y\237\275\377\235\314>|\274(\276@\252\362=\230\307*\275A\016\254\276\010h]\277\363$\321\276L.\240\276\223\261\235>\032\253\254\276\026y{>q\"??\234\003F?\021\334\002?\210\013\225\275\356gU\274\335\376\370\275,\025\222\275\014C.>\354\245\202\276\006\231\310>\363\362\260?\221\253<?IE\262?\000\324l=\262W\250\277\362A\r\277\026\0147\276\354\306\215\276P\370\271<\275e=\276\013\251\206\276(\212\360=v>R\276\004\302\026\276j\377f\277\235\360\270\276v\317\t>\271\277v\277s\237\222\277\254L}\277^\374\312\277 \262\322\277Bu\354\277O\332\357\277<\361\344\277\364\315\260\277n\224\375\276\300\2377\277$6\006>\363\347\030\277Sb\264\277\202\002l\277z.\034\277\007\343\030\277\323<q\277\257\355\213\2770\014\264\275N+`?\327\276z?\"\014\263>\270m\222?\250\377\361\276\370~\216\276*\006E\277\242\324\242\277\240\245t\277\376\261\357\277T\022\016\300\220\315\021\300\224\301\034\300\001WH\277\354G!>\000!\300=\020^\303\276X\257\275>\275\201\200?\002\211\006?\354S\271\277\036\227\032\277\361\001\004\277\266\336\\\277\0249\346>d\346\200?\ti\376>\021\256\000?K\016\366>?o\366>Er\347>3\213\'?\300\211\254\274\006\304{\275\301\214\302=\376\262V?\316\244\255\276\252\017\032\277\260\204p\277\256Rc\277\0207\253\276\211@\n\277h\2079\277\354-\277\276\226>\224\276PZ\'\277H\tc\275\210\353\037?S\351^\27706\367\275M\250^\276X(\310\276\337\031\222>pqJ\276!\227\033?\304]\302?\340s\022>*\034J>\255M\036?~\212\324=[\337\023?\016\270i>\220\305\275\276\322\020\037\277\2553\322\276\344\270\336=\224\366\010\277:t\013?\r\007p?\026\006\336?\342-\026?-\r\311>\222<\241>R\030\204>\020\275\254>\002\2539?\027\205\221?\332\024]?\306\312\027?\212\351\324>P\021\216?\302\365\220?\000\027\226\273l\243L?\356\356\177?|`\230\276\0165W\276t\346\254\277\216\001$\277b\320\020\276Q\222G\2776Ey\277\300\376?\277\322\364p\277\032\210\253\277\031Z\213\277d\307\023\277XY\017\276\311\242\200>o\023!?_\370\301?|7\374?\373G\004@\026\251\210?\\\232\266?k?\220?\224\230\220?u\363\273?$\035\364?c\377\225?j;P?2Un?\246\245\351>\005\210L?T\244\341>Lu\333>\302\304\241>\234v\267>\336\233\034\277iq\257\277$\362\034\300\372\230\371\277P#\324\277\224\241\344\277\343\307\257\277yA\277\277\242\230\270\277\253~\235\277\006\202\265\277\305^\007\277j\375b\276N\303\206\276a\365\017>k<v>\254u^\277\010\333T\276J\345\371\276\362\007c\277\"\006V\277Y\267\003\277\334\032\212\277\246\355\241\277k7\013\277\252My\277G;j\275\300\273\316>\245\004\007\277n\270G\2763@\255>\346$\212?\265\350O?\225\252\352>8z\215\2756Pv\277\243!\266\276\257\237\234\276o\225\376\276\345x\367>\204\204{?\320\021J\276\266\035\030\277\033\276\342\2770\255\'\300\022\003\211\277\366\260\261\277q\244\203\277-\2778\277\204\003\212\277<q{\277X9-\277^\025E\277`\341\206\277\300m\343>i\367\263\276\370\246\t\277x\373/\275N\222\r\277^\256\001\277\002k\271\276\270\325z\277yI@\277\016\332J\276\2305\373\276\217\216\326\276\021,\r>\315\332j=04\335>\216S\365\276h\244\030\275\326\016L\276\377}\016\276V\204R?8o\024\276\363\232\256>\007sX?\347\216<?\210\267G?l\007\370?\334\255\221?\027\027\344?\016&\375?J\035\352?\315Z\320?f\r\255>\016\002\035>\356\315\020\277,C.?\344\242c>>\370\306>\341\027\\>Z0\245\275r(L?Rwy>\225D\314>\202{\256>C\213Y\276\n~\253\277\307X\233\277\220\376>\275\231e\213\276(,W?\267\356\346>\345\\\234>\260\177\365=\007\341\316\276%M$\276A\2141\276\346d\222>\255\324\356\276\217\337:\277\252\036\273\277.o\264\277~\024M\277\261\342\371\276L\247I?\036\274\243?Xa\304?>E\201?#\260\030?e\002\257?\027\247\313>\\$\234?\372\030\331?v\"\177? p\314=bC\233\277\356\"}\277\003\326=?\346i_?m\321\240?\034\212G>\020s\235\276\317h\371>\310j.\275\250\363\005\273f\323)\277\252\037\210\277\350\306^\277\373:v\277\300`d\277\253\n\\\277f\242K\277\341\"N\277O\321A\277\340\006\312<l\223#?6 H?\331\3211\277&\202\220\277\322\342\213\277rR\023\277\252\372T\277\374\314\244\277\014n\236\277\322C\241\277\376\t\304\276\342\301\305>t\306\200\2753\371\350\275\245\312\210\2768\276\275\276\226\362\377\275\351\036~\277\342-\254\276\034:\343>\030\260m?0:\263<\\*\r?P\275\031\277\313I\357\2761\300\372\276\026uV\276\014\220\025>.\\n?\200e\206>\363\023\243?m\246\010@\223\"\240?\324\302%>`\3178<%\324e\275\303IV\277P\020#\277\320A\247\277\021\326\250\276\356\312\023\277<^\376\276\001u\317>\325\213s>Z\370u\276\274\353c>Ch\n>\352\361x?J\021\211?\244\336\010?@)\311>\241\220\305?l\233\017@\322\263\030@\353v\374?\312`\007@\010D<?\036\243\026\276!\276\221>\366)\266=\356\211#\277\317\367\232\276\356\031/?K\242\027?\007\034\212?8\221\332\275\377\000\317>\330\016\360>\020\\\037\276\220w\014?\344\204\314= k\200?k\216q?la\251? >\304?-2\327?\267z\253?B*f?\014\245\326?\320\203\315>\323\375\326>g]X\276\002!\003?.8\237?H\"8\2760\030O?l\201\001\277\200\223\221\277\3561\360\276\236\303\321\276\306\260.?]\r\272?^\007\253?n\236^?\323\376\221>\2257\336>\322\305\033?\317\233C?\360X\371>\2307\203?\232\325\003?Y_\344>\337\304\256?H\346\234?\205r\245?\266{\253?/b\264?\340\220\036?(1k>@\261\313;\371\366\354>cr\323\276Iy\223>\341F\024?yA\000\277\244\211C\277\254:4\276\025U\004\277:\254%>\210\333_?\354}\\?2\014N?\377\346\250>\360\356\217?\221\235??\231\265\006?\260\340w?\0355\244?\014r\343?\266\356\034@\365,\310?\355\013T?\220\243\310?c\273 ?\2731\212?>3p?x&\201>\226\222c\277\352\001\254>\364)\207?ii\336?zL\360?jrb?\306\344\307\277\201\021\303\277\021p\003\300\262\262\377\2779z\217\277\006\010Q\277\330\265\344\276\274\215\363\276%Z\207?\321\240\300?\223%\234?d\301\t?\220.\033\276\222\274\321>\220\373\000?X\330\003\276\355\330\360\275\273f\n\277\005\243\270\276\330E\333<S\240\261\275\340\2210\276\254\033l?I\330!?\224C\314\275\230\310\320\276\202\022x\276\265\213\275\277\312\207\013\300\"6\302\277\345\256\342\276:\260\340>\033\r\227>\220\034\212\276y\232Y\276\200\200\273<%\300H\277\234\030;\277\312>\214\277\310\'1\277j\371\351\277\2574\364\277k\377\333\277\340\330\n\300\240\351\036\277\254\200S\276\030\021\231\277\340\343\226=,\017E?1\232\236?&\223\250?\177\2130?`8\201?\0264\007@v\'\006@\370\202\256?\300(+>\242\315\021>\207Hj=\022\0141?\350Z\244=\232pC>\256\234\257\276\300I\210\276p\250\271>\353\023Z?\035\227\365>)\352\257>\212\023\374=t\241{?B\n6?p(\301?\253\250\261\276\000\034\277\271}\235k?g\200\276?+\260\257?&?\226?^\322\374>-\r\031?\2355E?|\362\237?W\222\210?\200\033\r@\017\346\252?x\322\275?X\370R?\000\366v<\210\026\203\276\025(J\276.\211\247=\'>\360\2760\240\344>\310\031I\276\260\215\205\277\215\002z\277\020Oy>\310\362%\277\302\220^\276O\260\351\275\017\233\253>\350\020v>L\027\241>\311\"\355>\037\374\377\276\013\245\327\277\347\250\272\277\"n\216\277\303\237b\277 \207\"\277\362i\027\2761\203\315\275\312\021\226?\3418`?\234\267\363\276v\340C\277\261\320\021\277tz\362>\267\370\313>\023\302\000@y\204\002\277\025\003\237>\3521\024?\203\035.\277\275\260C\277\\\n\216>\236\232\325>\231?\236?&~\217?\260\221Z=\220\212f\274\274\033g\277`34\277\220d`\275\351\370\000\2756\327\032\277\004\024K>*\362\246>\210\371\364>6\352T?0`\010?\200\036}?\345q`?,xg?6\017\372=\346\267=\276\336:\020\277b\217\333\276] O\277L\232\351\276\330f\272\274\334\223{\276D5\201\277\264\272\177\276\325\2679\277\022\315\273>\374 \226\275\347}f\277\"\354/\277\300\377!\274\252\327\002\2763\247\000\2763O\177?\203\255\031?Mx\002?\200W>\273\332\260\205\276;\013T>\020\"\241?\334\233\234>\031\001\t?\2259\026?dt\256?m\001>?\240\\\004\2765V\000\277\250\203+>\312u7\276\310\370\020>\260\231\344;\300\221\301>\357\203\230?\034$\306>\374\001u?\342\203\323?\036k\016?\326z3?\324\244\031\277\246\321\213\277\334\326\267\276\372d\216>\330\032\t?\276C[\276\334\263_\277\201\020.\277\351+\016\277p\246\220\274\376\213\014\277S\276\266\276\224(\001\277\375W\365\276\300(\026\276d>D>\220\035(\277Y@\323\276\203T\226\276\322d\274\276\215e\331\276V\367\236\277\265\270\334\277G>[\277\240\267)\2744bD\277MM\204\276F\353\334=\217\375\033>\247\273\034\300Xq\032\300\030\265\'\300\332\n\010\300\210\243\222\2774\035\312\277:I\257\277\300o\330\277\266\n\272\277&\276\231\277\020\341b\277j\3065\276\311\036\366=\303\323Y\276\203\225\317>&_\324\276\337i\271>\340\367Y?\310\342L?\006\353\013>\371\304\006?r\rQ?2\014r?\274\331\232=\220\354z?\262\307\235?\2109c?4j\335>\236\013j\277!\243\311\276\323\024.\277\210q\020>ma\244>\210\262\241>\206\264J?\010\337k?(Yp?\216Z\377>w.\355\276\240\360\303\277\315[\021\300+\022\344\277\352e\373\277\036\222?\277vs8\276\255{\003\277\364\202r\277\210\332\322\277\254\214\000\277\360`o=\316\0334?p\242\t=\274\225x\277\030\356\\\276\004\236\255\276\340.O\275j\r5>\2309\277\276N\371\260\275}\314>\277\221\017\215\276-\343q\276qw\306\276\312h\r?\370.\023>V\237\014?:/\311\276\235\361\036\277\244}\205\276\237\365r\276\016\213B\275\321z\310\276\32745\277\334Z\355\276L\307>\277\0168D\277\360v\333\276W\213\000\277n&\276\276\336b\024\2760z5?\360\026\262\276\230L\022\277 \206\340<\302\301.?\014jU>\277d\236\276\267\346\242\277\256Kb\277\211Z\344\276\031\213\205?\217\332\240?Y-\243?n\344\335?\356\206\245?\252\204\001?\200\247\006>\017<\033\277#\'\301\2772\327\274\277\377\307\253\277\360v\342\277\243Z\006\300V\010\'\300\210N`\300\340\255\001\300sr\022\300N@\306\277\'\024\251\277\310\223\246\276\336[\335=t\332\223<\323\365p\277\215h4\277b\037]\277k\317\366\276-#\310>\276S\317>\230\361\034\277F\334\310>\357\205\030\277\214\274\202\276\224\277\247\2758\032Z?\223b\223?\224\t\014@\363\007\025?\251\326\'?\227KR?\314{\"?\273K~?\300\371\205?\270!R\276\262\367\315\277\216\201\256\277\250<z\277\265\215@\277\362\252W\277pP\205\277G\353\035\277\226JV\277\353\214\212\277x\253\242\275\372\214b=\273\304Q=\r\346;\276\317\343g\277\225xf\277\350\021\233\275\350\312\016?\204:\233\276\350\005$=VD\005>\200\223\306=4P\252>Dy\243? \336\200\2752G5?\220x\272?p\223\265>@\003\222?\357\013\236?\021\266\333?\225\363\314? \030w\276X\023\222\275\273\363\002?\345I\237?!\272\035\300 2\300\277w{\251\277\026J:\277\251\254\261\276Z_d\277\314N\n\276:\227\r\277jQ\201\277\016\t\374>\276h\232?}K[?}p\003?\3740D>\020\266\027\277=|/\277\2031\217\277|\200}\276\236\034\234\276\274C\035\277\317\267\025\277\226=c\277\252R\226\277\210\252o\277\266\302\020\277\345>\256\277\257\356\305\277\317\263\002\300\316\361\"\3008zM\300l\210C\300\020\246K\300O63\300\316\366\347\277\016\214\t\300\273D\255\277f\322\320\277\312\251w\277\204\301\001\277\340\217\255\276~s\221\276*<l\277\222\215\276\277D\215X\277x\277Y\276X\312\226\276\200Yx>1\247\202>\274\342\260?`\250\263?\004\365\367?\035\337\352?K\2368?\030\"\010>\321\007\223>\320\"\243?+\267\253?W\010\263?\223\246M?\002\357\311>\325W\004\276\000\244\340=X\201\262<\2235\177>=\347\345>\332\377\351\275n\327\303\27611\352\276n\301\016>;c\'?\024\332\230\275\014k\354>\254\177u\276\210\337\031?\304\267\266\2764\013\252\277\243\365\270\276\200\234H\275\377\017r\276\002\253o>\002\224\315\276\340\010a\277\253\025\265\276&W\205\277V\242J\277\310)\243\2770j\236>\231P\214\277\346\216\221\277L\325\201\277p\336i=\020\222\215\274f\332r\276O\377\245?Xs\177>w\240\216>\004#\007><\276\212\276(\314\242>9-\004\277U2\260\277\265a\265\277\n\".\300\332\344\\\300\246@\234\277\377f#\277l=\211\277\340\354\004>\340\014J>\344\024\337\276\252\265L\277\224>\270\277G~\202\277\027\201\364\276\324B\245\277x>\030>\216_\003?\336\345c?\343\212\247?\377L\374?@\305a\275\362\204\002?\276\030O?D&\034?|Q(?\240\225\236\274w5\023\277\207h\204\276\317\237X\277\314\027\237\277\004y\024\300$=\370\277O\037\225\277B\"\363\277zl\224\277\343\024m\277\257vS\277\346w\200\276t\230\031\276>+\264=\252)Y>\212\210/?B\026\321\276:\317o\277\305\320\325\276Ba\014\276\236\017C\275\022\\D\276\230\317\302\274\201\265\211\276\262QC\277\306\356\013\276.\377\247\276\344\271\254\277VN\343\277)\324h\277\207\026\304\277\311;\013\300\304\n\361\277\346\231\266\277b\035\366\277\320\255\264\2770>\017\277\355Zr\277\"o\362\277\346v\242\277*\216\304\277\211\025\025\277\336\016\020\300t\034\215\277\300n\335=v~\263>\214\274u\276`\334]\276\n\346\264\276^t\r\277n\334\002\2770\205\006\300\217\322\027\300\262OB\300\370\017n\3005K\020\300\216\374\014\300\352\227\311\277\350\001\276\277\343\227\314\277\266\324\213\276\347\302\232\276\177\263\242>\353l\206>\340\300\201?\2310\200?\210\360\032\276c\014c?\306\350\230>b\317\030?\222\346\177>4\020i=\034S\032\2773\337\236\276\331c\254\276&\365\007\277\232\310\240\276\356\031\262\276A\264\321\276\033\350J\277\000\353\"=\332\371\r\277~.\233\277\316F\305\277`\262Y=N\036\264\276\305\\^\276\340|k\276\366\206\260\277\227\345\034\277\304q\014\276\275\014\352\276\034\266\202\275e\317|?\340\265\333\274i9\316=\200-\307=\344@\213\274,\016\327>\3704\022?9.\006?\264\010s>b!\302\276\352\340J?\035fr?\340\351\243\275!\363\013\275Q\302\362\276\\\0373\277\212\203\203\276\333\024\001\276\000\264z>\200\326a\276b\0245\276|\205\026@\014\333 @C1@@\367\321%@T^\342?&!\315?_\272\235?#K\235?\204A\n?\r\304&?\261H(\277 \022\200=\213\310<?\256\313C>U\240\332\276\377\005\204\277\370\014\r\277\"n\340>\210\223\013\276\031\262\364=V\212g>\347II?\030\247$?\372\035x>\266$\221?l\203\020?\200{\343=\234\364\032\277T\222\266\276=\345\361>\\\3137?\232\252&?\200!\312\273\353\232\253>\347r\004?8T\005\276\375Ia\275\307\361\256<\364k\026\277\001m\223\277\001\336w\277w#\227\277\t\305n\277g\373(\277\020q\273\277\265z\227\277\202\235\336\277t\370|\277\006G\351>\204\024\n=\027\224,\277I;U\277D,\025\277^\177A\276\361O\004?\260\007c?\314Z%?\264\235\300>\006-\017?\224\023\333>[\305}>\000\242@<\317\302\236>\334\321\236?\375i\227?\277j\223?\342\205\366>\020-;?\000\322\342:J\343\204?\267\001:?\0358\025?\001[Z?XVI?\253V\177?\356\243\026? \361f>\001E\340>\256\274)?X1\246\275[\272\\\277^\210\253\277Y\202\244\277\016\303\332\277\220vW\277>%\235\277\367\200\244\277\322\376/\277\0309\202\277\334Hk\277CM\226\277\217\307\242\276N\314\340\275\022\327\365<\220\315?\275jC\220\277>\344Y?\333%\212>,t\216?:}\001?\264\031.?\"\303\370>:\034\024>\334\236\316\276Y\021}\276h\"v\276m9K\276\"\n\033\277\252O\210\277\336t{\276\177\344\315\275m\336\017\276\235\335\247\277\310\236\256=\217:/?\314\032\215?\366{\260?\010\331|\276\273\315\003\276\223\0372?\030\304\217?s\334\246?1\001\210?y\234\200?\336\tg?\314\251\362>4t\211\276n\355\220\277\371\273\324\277w\335\306\277\316t \277\313\255\241\276\230S\237\276\314\347\314=\356B\226\275Z\331h\277P\022\247\277\243F\336\277\210\032\231\277\374\2206\277\374\252\271\276\270\2655\277\270W\312\277<L\311\277\221\3607>A\212H>\300\232\314\274\230o_<\370s0\277c\207\t?4 \002?\343\362s?\251\250\207?\263K\023?o\310\n?(\306\362>4\224\224\275\177P\342>\362\245>\277\374\225*\276{\035\017\275*\331\252>\321\306[\276@j]?1\322\003?^z\354=\224\353\347=6gu>|\275\247\276\376\027\272>\246\340\232>\333\337\030?\212E\242>\222\257\257\276\224\010=>\034\274\230>0nS\2764\201\274\276\277i\324\276&\327\355\276>*\t\277\016\252\331\277\201(\314\277v`\215\277\254U\244\277\313~\335\277\350\251\325\276:84\277\226bm?\022u\004>\007\024\213>&*\206?\335\246 @a\354\354?4\216\347?9;\353?\003\260\367?\365\240\004@\340a\265?w`\222?\274\252\032?\325\025\216?\032J2>\003y\377\275\231\376\243>s\302\001\277\340L8<\013\350\363\276\233\227\201?\020\303\307>x\326\234<(\234X\275\214\225\\>\223*_?\326@\212?P\235\327?\322\325\002>\310\313L\276\372gD\2765\355 \276\2620\300\277\346r\263\277\356\224\225\277\270k)\277\252\325b\277\374\337\227\276\346\333M\277>\332\026\277z\264\235\276=%\277\276\000\271\341\276\000\365\272\277\332\334\007\300Q\372\"\300\364[\350\277\007\004\277\277q\305\364\276Bd\371>P\277Y\275\347(C\277\373\037\375\276\340pq<\253\303\006>\325\336h>r\\\340=\032\020X>s\2202?\272\260\203?B\206\203?3\337\005@\300e\020\275w\235D\276\330\254\363\275\027*\334>\333\273X?\224\270a?\020\351\177>\2371{>\343pz?\276s\027?\264\330\254?/\227\304>,\266\024\276ja\210\276\007\276\002\277\234*\207\277\336\345\331\277^\271\226\277\000\rb<U\204\030\277\266\254-\276t_\272\276\372\373m\277\2028f\277\tf\230\277\224\323\327\277\010\312\257\277\220\261d\277\225{\230\277V\324\220\277\0006\332\274\265\247$\277\374N\244>pS\336<\236R\363>\025\250\210?=\323\340?\316@\317?6\344\211>\224L@?Ar\265>\204\376\026?\244rd\276w\005\001\277\337\317\215\27705\242\277`\217v\275?h\026=\335\020\300>\304ts>`!`\275\\>\355=T\313\252>\000e\206?Ph\322?\264>\301?\264c\363>\201TP>t\277\332=z\225\177>\232\213<\277Qr\332>\210\267\022>\300\220\244>\005SX?e\367E?\257\270\226?b\017]?>\032\263?[I\251>\335\335\313>D\2250\276\210\334\210\277\023\035\210\277<\356\251\277\203q\031\277w\217\221\276\376k+?\226{]?\031a\227>S\023\342\276\n\004\216=_c\325\275N\022s\276r\360\000\277\312N\300\276\313\010??\211\217!?\0229i?\356\257b?hS\251?U\374\033?kC\003\277@\347\031<\362{\207\276\354\370n\276\251}D\276\224\032\351\276\303m\330?\370\245+@\030\373\034@\016\217\001@`?\311?\244\255\t@\033\013\352?\225\221\305?p\370\332=A\346\345\275\026\335\210>\026\262\265\275x\213\207>\313\363\224?\220#a?\220&\234>\2006\226=\362\263#>1\234\033>\0022\262?g\376\276?\370y\221?\250\253\240=\2044N?f\026\327>3X-?\2704\270\275$at\2765\237q?9|3\277i\307\000\277@*\364\273\200\236\256\276p\254_>ji&\277GX\352\277\023o\301\277\030\374\300\277>\347\374\277j3\367\277\377\342\350\277;\033\237\277\2108\"\277\200\234\201\273\323\016$\277W\340\214\277\024\211R\277e\312\301\277\213\257\021\300\241\260\217\277|B\005\277\000\3054\276:\272Y\277\251\342\233>D}\004\277\232\025\220>\303\271\213\277\322jX\277(\357\356\275\230\023t>\352\r\233>n?\316>\250\272Z?X\263\240?\003-\226>\347,\215?h<\314>\277\275\374>\234\020i\276\205\025\203>\272\t\220?\262\256\246?4%\231\2765\023@>\227)\t?X?\227?\325B\313?\020\036\305?w\022\231?\264j\251?\237\003h?8\r\254=\366\2542>\037UZ?\356C\347?\010-h?\343\213#?\306\001\374\276h\364\010\277\320Bp=\346_\270\274E\330\340\276\222\3510\277\020\200N\277\266 Y\277H\275\211\277\031,s\277\305\313S\277<\356\351\277\222\375u\277\"\266\211\277h>\302\277\256\237.\277\304\237&\276\357\3512\277>}\306\276F\355@\276v\303\246\275\354\024\002?\3755\304>Z\021\021?`yQ>\312\331v\276L\017\013=\275cC\275%\357S>\337\231\025>X\026t\277\224\215\306\277\367\320\320\276s\375K\277\232\216\251\276\345\362\230>\313\275J\276\031pz\277\274Q\340\277\233\341\240\277\006\010\376\277\240\337\363\277\r{e\277+\267`\277\3161\244\2770\031(?\322\0258?\332F\340?^K\342?\335\016\260?\311\253\251?z\251\024?\304K\230?\271\034\246?d\017\325>\037c\014?\356\217\320>B8\200\276\354\311\377\275\3453\205\277\330\035\207=\272\016\311<\007\261\n\277(\361\022?*\216\035>\372c\206\276p\372\372>N\250\020\276\272Y\302>9\246\'\277\374\316%>\211\032F?\'\355\243>r\256p?\376\321\313?h\203Y?\034o\337?^(\236?d~\017\276\244\226\367>\350\227\003=\3563\023?\000\003[\275\3157\372\274I\365\\?b\206R?g\273\233?\333\271\245?\206\370]?C\350\335>=\342\246>\347\356\257\276`\0278\277\337\005\312>\003/1>5u)\2773,\025\277T\2212>\000*\250?d\t\214?>/\314?x\261\220?\362\232\032?,\361\253>\220\016\027?\254p\211=\254\226-?\207\343\216?p\n\214>0l6=\334cD\277\034j#\277\264\251\307>Gf\240\276\341\020p\276\253\335B?\242\032\225\276\350\211\325?=\216X?c\224\203?\326\342\000?\205+\241>\027\016\214?\234\237\035?\250?\221\276\360\242v\274\233\361\005\277\332\346\250\277y\275Z\277\206\270\245\276m`\220\27602\274=\213\262!=\270C\365\274\252\324z?\000\252\367\272`\n{\277yw\217\277(6\202\277F\351\274\276\353H5\2769\006|?\336V0?\364`\370=\222\303?>^\202\357>0[\341<\311\305\310<}\367Q>\240+\363>(~G\275T\t\032?N\334\234\276\321\305\021\277\263\215z\277\302x\233\277wM4\277P\325)=\351\345\377=\244y\362>\3647\211>r\201\035?`\304\'?\311\tj?L\021\177?\200$\265=\370\003\264\276p\2742=\275C\252\275\0372\206>\254\3257\277ZV\033>\3024\230>\220\255\206>\n\305I?\310K\237=F\0052?\265\334*?\202\332x?\263H\360?\302\343&@\224^\006@.\270\245?t\'\201?\332%o?n\255\027?\362\270\016?x\021\305\275\313.P\277\317\236\033?\3746\204?&\030\364?\3609\272?F_\260?\016\326\256?\323\250\275?AQ\307?\210\233\022@\334\377\350?\234A\035@\266\375\361?Y\336\254?L\243\204?b!\364>\324e\242>|\344T>\250\244\341>\274\230`\276NPV\276\177\222\001\277\334%\177?fz\260>$I\205\277\326\204\343\276f\007>\277)\201\234\276\233v$\277l\322\371\276x\334<>\303XY?\200\233\261\275\205\275\273>X\262\216=\277\247\266>\364\022\205\275\375\004\205?\227\022\022\277\250\2261>\025\274\024?\205\312\213?\231eR?\006\rD?\027\260\017?\"a\224\276\205\374\"\277\236\217\'\276H\303\247\274lo\n\276U\200\211\277\364+\202\277|k\337\2770\204\312\277\010]\021\300`7\n\300\261S\t\300\2425\250\277\2106\315\276\246\214\021?\266\272\306>\036\367\256>^\313@?o4+?,\254\016?C\272<\277\266\346\215>\014KH>J\325\263=\272.\326\276\016\007\352>J\342\374>>\363\021\276\244\363\257?\316\317\223?^\362+?L\212\264?\346\312\242?U\345\032@\264\010\017@\311b\365?\245Z$@\000\353\220\274i\033\005\276\255\2273\276l\232\t\277\376\005^\276+\022\201\277\234\003\311\276\364\324\300\277,>\215\277?s\217\277f\300v\277\326@\241\277\005\'p\277\227Nx\277\220\313\025\277\033T\257?\020\313\271?\241\263\254?S*\273?o\020\005@_\263\304?\351\036\206?,q\226?i/\201?\037\361v?\340\231\202\275\201\211\016\277\020|\271\276L\021\026\277\026\023\307\277/v\375\277`lQ\2750w\274\275x\366)?\022O\224?\2424\232?\241\365\222?[\355\014?\375\251\010?\034U%@-\010!@\376\000\305>8\177<\275\204\003d\277\300\246\276\276\237\r\210\277\257EN\277\236\316|\277\214\272\206\277\312\224\274\277\r\377\257\277\242\331\220\276\031\337\310\276\"w\030?PZ/\275\321\262\201\275\201\266\331>\254\373\372\275\014R\003\277\r\036H\277\\\234n>\2569\300=\361J<\276\001\330_\276\256\257\357\276\375\334k\277\356k\361\276\ne\371\275\314m&\276n\267b?\340\263\300<\242cF?\374\016\034?\266\322h?Z&\363>\227\222l? q\263>\302\016\025?\212(\252=\3407\211\275\364\270\213>\270\202@?oss?\006\353\340?\3547\316>\200C\247\274{\277Z\277\002\030\271?~\321\356?\302\037\271?\206_\344?\335\003\317?\363C\304?\034\0319?\331\230\007?\340\221g?8\3071?C\275\005>\371\311\034? \325\316<\325z\'\275NO\024?\036w\005?\0374\327?\3521\331?\372!\314?\236\241(@\267\3358@\222z1@`\0139@\311\260\367?\315VM?.\312e?\034HG\276X\204\235>\341\364\277>.*\200?\264/\013>\031\237\200>Y\305\211?vRf?\207d\255?\261i2?\000\223\004\275P\356\035?N\321O\276\341y\010\277\240\310\246\274P;\006?:\0303>p\303\200?\254SK?g\300\271>\324m^\276 \310\345\273\021\304[?\262\255\027?\332\366\215?\327\266\203>\215\374L>\361\344\024?\352\rz>\250[\230?\204F\251?\003\353\264?\020p\005@\312\356x?\246\260\007?\235\261\260?\267\263\235?7~ ?)D\205\276\366\340\321\276\350>\312\276-\260\226\276\204\346\020\277b\336\304?\354\337\010>\266\213\274\277*\272\255\277\260Xj\276\275\033K\277\335\211m\277\227\260\261\277R\035P\277\004\340\222\277\257\211\246\277H\240\247\277\336\355m\277qg\311\276\342\rZ>\3031\241>\031\341\217\276\214\030_\277r\307>\277QM4?\360\027.>\350M\260>8\324\330\276\321\320\263\276\242\306\343\275\345\245\005\277\330\3251?\325\267\202?\351\037\321?\277\020\007@`E\316?\264v\263?\223\345\245?U\303 ?\257\273\226?\321\201\230>\211\341r>\2648\347\275|\246i\277zN\256\276\354\274\237\276\232\211!>B\325d>\230\255\031?\034(\275\276\034\227\314\275\030\303\274>\232\030\363>\314\373\275\2757\005\333=\353S\014\276\036\313X?\317\262\227>\365\256\350?\332\037\364?\\B\271?\272]\243?\340`\r=\211\005\377\276\014\035\314=k\2411\276\332\305\303\276\340\340\341\276\243\300\220\276\022u\t\277\r\363\212\277\237\224\203\277\004\020\037\277\276\221\244\277{!\016\277\000V>\277(b\241\275\014o\036=\326\237\254>%[4?\262\267\026\277@\305r\277k+\005\277\376\356x\277X\225\364\276l\016%\2775\363\204\277|\366\033\300#\352\t\300\320jL\300`D)\300\026c\211\277\025\032\331\277\232:0\277\306N\020\277\216\004\247>vQ\370\276\220\320R\277H\307\203\277\250w\213\277\217\306\013\300\321q\374\277AJ\000\300\372\004\025\300\036l\032\300\252I!\300\351F\256\277\235<\305\277\025\271\335\277\324\216\000\300\240\010\001\300=w\347\277\203y\242\277\351\342\300\277\275m\220\277v\333\220\276\217\303\007>p\021\360>\354\226\026?.1\'>\376\007\027?\377\264R?\215\252\370>\000\275\224?\204f\235?\026ha?\254E\017?\206;\023?\000o\355\276\250\031\245?\360*E?\\6\354>\3647\213?e%\325?\026E\306>\2524\016>\326\254\'\2766\357V\277\261@\234\277\207\260O\277\230\001:\276\002p\020\277\0349s\277n\376{\277\370r\n\277\314F\364\276b\357Z\277\324O\234\277\324\371\212\277\177yx\277f\027\203\276\344\377\261\276\006\237\261>\310[\220\276K\3368\277\330\254\224\277\223\353\213\277CW\231\277\006N\264\277\277\3504\277\332\345\243\277z\021\202\277\216\210}\277\030\026d\276sm2\277t\014j\277\330\367-\277LnC?\234\245\300?w\303\301?\307\273=?e=\212?\000\245\254?\022\204\207?\352\265\217>(\336\252\275\215\n\234\277\\\023\274\2770\0075\276\312\233\010\277>\231\024\277\240x$>\245Z9\276\031\373\264\275$\352z\274\330-0\277\312D\346\276?H\333\277\261\022\303\277\376(\360\276k\t\320\276\006QL\2771\2029\277@\302\"\274\252!f>\030\036\010?/\253\332>\n\322\365>AKP>\177ZT?\234\364\250?\376\244\314?\333sD?\250\337P>\007\344\347?J\263\245?u\374z?\314\313\206?\003\312\206>\240\342\222=\276\\\236\275\363?\213\277*\237\r\277\251\0054\277\226\032q\277\000\333X?\272ld?\014\317)?\004\236\345>\034\244!>6$\304=\240,S=\222@\005\276\3237\340>\277[\303?Y\211\025?\200\033h\273\000S\303\275\t\024G\277\234%\034\276\370\307\377\275f\3624>\350\232D?\247\345*?\260\203\221?\274\375\231?\201\035Q?x,\010>\322\275\201>\246\303\212?{\014\254?\177\371\232?;\335B?.\231\261?Y`\216?\226\315\354?\343\353a?\212\303\320>\234n\321=$W6\277\203\301\325>\220 n<H\034\374>\007\224`>\312\"\336>\032mV?\274 Z?\373\201\317>\200^;=w\345\347\276\350\2425\275Y\350\367>\326^\234?\242&\340\276\014\317t\277\342-\254\277-\316~\277\312kF\277\004\334=\2774\345\025\277@\341\356\276\355\224;\277\320\372\032\277@0\233=h\206\265\276\306\026\007\277\356\014r\277n\007^\277\203\036\r\277\221\275\t?\031!6?x\343\314=(\232R?Y\262\366>7W\232\276\356\247J?\302\256\312\276\200fI<+\204\314=\035\332\273\276[Sk\277\364\351\013\277\270|1\277\216|.?t\206j?\2372\270?\354\330\262?\323\302\031?D\260 ?2\221\211?L\302\326?\350\220s?\240\323\177\275\376\301\324>\264l\332=jqI>\000\203\376>jCx>2\312+?\034_\010?\334\250\242>Tg\277\276QL\264>{\314m>\225_1?\036\'\246?\200*\213\274\023\307\273>\260\225\255<\230H\214\276\257\232[\277\275\3714\277a\366\216\277\301O\370\277\260\257L\300\220\234F\300pw%\300X\254\274\277\251\216\237\277\232\360\314\277\320\375\334\277`\320\230\2778\243\207\277l.\260\277\300\200\005\277A;|\277d\270\371\277=\347\236\277 \222\n\300\324\375\213\277\006\214\216\277\212\\J\277\211\0233\277\200\225\244\275\240\343v=_\211\007>\270\251\256\276$\177\206\277\323\230W\277\020\277\255\275\031VP\276N#\007?\316\207\023?\240\031\301<\3160\330=%\2065?p\257,\2752\255\010?}p\244?XE\226?\022|\177?\321O\344>r\277\241>\360\340\350\274gP\023\276\240\177\201>]\362]>\235\311`?x\225N=\276\027\220\276\257|a\277\216\334c\277\306\365\211\277\222\217\245\277\030\\l\277Pq\007\276\3245\350>\220F\303\276\242\031A\277\262o\020\277<\303\274\276@7\031\277/^<\277|c$\276\253\246>?\344\342Y\276\357\232\220>\350M(>\322\251\201\276\316\025\021\277\230\241\203\275\2347.<5\024N\277H\212O\277njO\277\212\232+\277\350=G>\312xl?\032\004\231?\323\276\237?\304\235\254?\232n\220?>\246\343?\027\017\354>\300\032\341;7:\331>\346\304\003?\324m\340>\370\327u\276\021\264\034\277\326e\037\277\252\ra\277 \237l\277\005\332\276\277\264\241}\277d< \276\215\273\364>|\361\225=4.t>t\005&?E\214\010>$\342\275>\204\246\327>\256\344\256>\241\345\345>\216\276z?h\236r?\037\002\222>\306\312\260?J,I?\260\375\325?H\211\341?\030\223\213?Y%\371?T\314\021@\250h\007@\366\3300@\271\233\367?r\242S\277\346\240\'\277N\256\270>D\260%?v\356\221?\260\230\\?\n\033\024>\204\022\025\275F~7\276\310\335\201\276\220\371O=\224^\324><Z\351?\223\245\006@\016\0057@kn(@\357]\276?\201\370\373?\223l|?\0107\236?\032*\364>\332;6\276\224W\031\277p\306?\277\220/h=\235\375\203?\231\334\256?\007R\016@\024\006\255?\010Z,?\327\017\020?t\035\203?H\206v?\360\255j\275\004h\271>\000)\211?\224M\274?\246\344\223?S_\356?\241\257\327?\020C\372>Z\037}\276\030\300C\277\000e\026?\270\350\345\275*\260\023\275<;\231\277\216\340\330\277t\273\010\3004j3\300i\240\276?\226\226\340?Q\'\035?\234\0165?R\230\222?\240n\241?\334\357\335>\336v\260>C\252\201?\252.s?\344\014\004>\236\213:\276rn0\275b@>?\326\211Z\276D\330\330>\300a%\275\324\021_\276bx+\276p\345n\276\314\307\277\276\317\360\247\277}\001\241\277\306\330\226\277h\343\003\276\367cx\277\030\277\007\277\220\321\036\276\0035M\276t\323N\277b/\216\277\262\245)\277\026\3077\276\244\262/\276\315c\247>\326\247F\276\021\350\352\276@\360m\2744\n\217>yJ,\276\347\233{\277\354\225o\277\216\240\r\277\254\214\261>A\250\"?\034\333\207>\302\361\307?SN\257?\\N\375\277\247#\001\300\302\367\354\277b\323]\277\264,\227\277\036\224\317\276X\327\034\276\010\362\313=\204\027\030>\347\366g\276f\203\003>\203\022\227\276\3646\331\276\224\326\362\276\267\325f\277O\266\307\277v4\324\277\'2\221\277\007\203}\277\340\031R\276P\000\210\277\006=\234\2770`\350\276\230\t7>\347\016\033?B\013\230?\035B\303>\206dL?81*\2761\'.\276ZpS\275\300\361\000\276\246\002\013\277\344\005\235\275\327\007B\277(\356\276\277 \017\231\277\250\031+\277\260\005\210=\362\374w\276,\244\244\277\366\350\313\277J\024x\277\332\241\213\2778\333)\277>_\000>Zt\351=p\301b?\217l\225\275+\230\340>,\340\340\275\"\014\005\277\204\201\240\275$\375\246?\334\2000?\000\316\036:\301t\330\276(\363?\277\010\363J\276\274\'\017>\031\032\240\276\030\031\203\2770U\263\275\307\264\274\276O,@\277\300;\307\277\2421\251\277\371_\023\277@\033$=\000\'\246?j\377\370?W\304\022@\023\002\252\276v\002\337>\034_\272\275\003#\241=\224\372\325>\311,\247>\221\002\366>:5=\276\000\\\355>+R\"?\202\205\006?\336\0032?W\306\314>\322!\340>\212\237)?\264H;\276\340(;\276#\351\202\276\365 i\2771\025\234\277\346\232o\277\375\005d\277,6s\277\277\257\346\276\263AC@?Q\034@\273+\200?\010\245\013?h\372\301> \307s\275\216j\022\277\376!\316>\200>\217:E\202j\277\313X1\277JS\016\276\310\366Q?\030\360=?\340=n?^n\215>gX\272\276hvq\277!}Z\277\276\345Q\277{,<\277\346\007\010\277\206\263W\277b\304\253\277\210\000#?,$\203?\234U\002?\302\\\216>F\0166?\032;\374\276\224\007\225=\236\014\301\276F4\r?\034+_?\212N\227>\320\t\270\274\021\201\356>\004Q$\276m\026;\277XE\256\277\nK\232\276\036M\016>\265\304\371>\336\273\226\276\346\036r\277\204b\014\277(\232\026\277@\0034\277\260\004\224?\220\335\352>\004\212\227\275\214\n<\277,E:\277a\0340\277\343\235\344\276\272 i\277y\360\254\2773$c\277\rVA\277\215\3030\277\362\203/\276@q>\275X\220o\275\352XP\276buk\276\021\341\250\276\366\220\'\277\272\371C\277\225Sx\277\004j\322\277\323\034\337\2778E\010\300\211i\005?\0000{?>0\276?o\232U?\336\250\023?t\000\254>?\2307>\256\214n?T\234\323?C\003(@,>\340?ej\231?\302R\212?\226\207\224?\032\032!?\312\336\'?:-\206?v\322\212?\252\225!?\222\326\022?%\374\022\277\357\370\205\276\250\361L\277s\231\346\276[kK?\2177\374>*!\303>\351e\251\276z\265>\277\252\220C\277\233%\301\276\322ou\277\300\201\312\275\316m\206\277\220\246\016\277j]/\277N\217\025\276\214\330J\276~0]?^+\336\276[d\213\277\\\203\203\276\333\000\036>\010\031+\277%\237\001\277\177H\272>xaR>\023\316\010\277K\004\026?U\330\212>\313\014\202>\374\312\377>\242\000\241?\315\234&?x\0360\276b\206D?\351\025\031?D\307\214?\312\3178?\0312\243>\3572\351>\376\372\252>\314l\312\275S\232\377=\001\003l?\364!J>\340\217*=fL\331>\222C\014?\244b\201\276\353&\307\276CDb\277\262\343\212>\300\037\247\274\260%\214\273\271\326\321>.B\317\276\236\026\r\277\032c\274\276\277B\030\277\231D\243\277\352t\243\277\311_=\277\235{\032\277<I\223\277\3574\232\277LEL\277\221\265\365>\227\217E>`\232\375\2756P\336\276\354a\037\276\177\301\214\277\220\237a=\240\301\213\276\320R\341\276R\375\037?\240A_?\346|\260?X\007F>\252\201o?H_\201?\217\201\211?\224\350\023?\313,\257>n\3359\276:\303\357>\343\016\203?\022\032\270?Y\364\236?H\t\221\276(\317\361\276$\300S\277n#\226\277\2778\036\277\270s\217>j\242+\277M\036L\2774\255\031>\222\253\363\275\232Yt\277\032iP\277&\262\033\277\212\3227\2777\341D\277\370\036\211\276 \321`\277\232 \312\2770\343I\277\344\375\233\277\000D\347\276\356\265v\277`\005\202\277\005\261&\277lS\236\277\366?\302\276`}g\277\370U\254\2779N\201\277\227\306`\277*\344<?\205\001B?\314%N\276\372v\000\277F|\245>\230\373\253\275)\247w?6=\217?\262w3?\262\014\001? E\326<\177\021d\276e>\277\276\230Ld>\340\021~?\355\225\002@\007\017\310?r\316\370>\351\375_?\213\311\242>\235\035\016\276\305\275)\277B\'\330\276\t\234\221\276N\000\216\277\320\n\365\276X\034\215\277`\'S\277\370\n\251\277\037+\266\277\267\332\027\277\367`\243\277j\020\211\276bp\364\276\202\235\265\276\340\376-\277\020!7\277\305\366\216\277\035\367Y\277\207\273$\277\2002h\274X\315\215?\2029\347?d\3428?\231\"\267>\357\243\342>J\270\326?\\6\277?\354\323\221?^\204y?\373\2320?\207X\206>7}q?j:\270?\312\034\210?9\243\312>P\'x\274\305\207\220\276`\301\032?\274\021\374>Sw\247>\252\305<>;\330#?\261\362\001?\232\375k?7\2541?(\001j>\370;\215>\022[\035?\366\2566?\356\3730?\321\333h?\010\007\336>\366$f\277\317\305\315\276\336 d\276W6j?A\321\233?\037i\255?8\026\353>,\211\017>TO6>Xo\242=\\XS?\301\204\277>\311\372\027\276L\357\257\275\274\214\327\276\314\204\236\276\226<U\276\302\216\000?\030?\240>ac\220\276\240\312G<\016*i\275\t{ >\036&\377>\342\267o?\330Ww>a\316\203>=\352\030\277\371X\023\277\024\001\240\277\220&\002\300\351\022\376\277\217\"a\277y\302\315>D\363\031?\024\345\342>\270\237\230>\212\340\024>8b\000?\356j\270?u\333\201?\361\372\327>@u\317<B\227\017=\350 \230={D\014>\246<\206\277\200G\000\276\030\344\r>\366%\323\276\340\3010=\233\027\230\276P\213\306<,Y\336>\256\255\372>\033h\253>\246R\351>\005\200\331\276MTm\276DBB=\007\275\213>\315~\246>o7\265?\252\262u?\030\306\202=\024#\227?\265W\220?\030\305\256?^S\320?\212M\370>\177\0134?\300De>)\032\004\276\244\263Q\276\'0\352>\276\264\260?L\255\245?\360\276\345?7\362\361?\266\340\026@\013J\206?\310\334\330?(\215\275?<\031\373?z\361\330?n\3640?\014U\317=\325\013\305>,\210\323>]4\010\277\211^\031\276\342\342\216?x\215\242?\365M\251?\204/C?H\2544?\014\365#?H\303\266?t.C?\025m\235\277\216\001\177\277\032\352\221\277\206\361\206\277\304\276\245\276\252k\026\277\215\021(\277G\027\205\277\r\357\207?_\277\221?c\346\232?\220\023\304>\210\347\210>\\\030q\276\263\355\207\275\017;7\276\330J;>\000t\320\276\260Xo?\362\'\254>\2643\376>@-\271\274ec}>v\314?>\245\344\220>j\236\353>\334\236?=\224)\357>\302_m>\340\225\231=<#\026?(\336p>G\353T?\252\0272?\340\314\360<b\305\226\276\344\373\311=\251\360:>\3572\320\276E\354\234\276\314\231<?T\352R>3\024\315>^\313V?`\333\251=\034\020\237>2~?\276r\302k\277\353\035G\277T2x\277\331\325\247\276\262K\231>\242\313\357>\240\005\361>\352p(?E\253U?\364k1>P2\030?R\315\235>\341\r6\276(\020m\277(\263\202\277R\371\004\300\004c\377\277\370f\365\277\234r-\300\251\2611\300\240\005\"\300\263\014\223\277\261\177$\277&\335\352>\342\247\226\275\242O4\277\271\326\200>C\372\371\276\312\t\004\276\256t\211>\200\316\237>\226\205t=\363;Y\276\254\303E\277\200\244:\275\275\017V>p3\n\277\356y0\277\020lz\276\214\307\364\276\031_\317\276\236\260\003?\336<:?i0\246>\272\027\327=\377\370\030?SS ?d\301s?\341\3468?\353\325]\276\225\353%\277h\304\253\276\274T\262\275\257^Q?~\242\177?\000`\257\276\223\300\014\276SM9\277\024\301\034\277\360\222,=N\335\247>\242m\345>c\034?>\210Z\025\276.\316\301>\341\361\"?L\3346? \3413=j\034\217\276\201\304\236\276{b\376\276S\361\325\276PF\273\276f\246H?bM\324>\235p\301>\247|\255?\350\262\211?C\232[?\346SC?\230\260\243?9:!?\260\341f?\210A-?\230V\002\276\030\214\374>\322\220*>w\026\367\276CUh\276*\3310\277\000^\257\273\201\203\340\275\2542\341=\212\266\360>\006\"\265>&p2\277kR\342\277\272%\371?\321`\t@\214d\024@D\305\322?&\370\306?f\\\342?\224\262\007?\310\330\312=\002\277\253>\200\254-<\275s\202>\022\240|?\254\2150?\3402\027\275-\334\233>\244o\t?4\354\264=\306g^\277\216U\245\277\2553\301\277(\370\315\277^\260r\277\023$\r\300\350[\035\300\233cY\277lJ&\277\021y\222\277\203\234\016\277p\274\373\275\340\232\366\276\n(\331\275\333Y\262\276\316c$\277H\267\247=\336J\211?\251{\212?\332e\356?t\014\343?\344v\027@\233w\266?V\372i?\240\365\324\274\026\341u\276\206\247\331\276B\320D\277\333?\303\277N\362\037\277n\353$\276\340\301\220?p\344\213=\3338\"?A)\366>\017\317\315\276`\037+\274\223\336n\277\013\\\362\276\220R\313\275\376S\215\275\016|\002\276nh\342\276\363\221h\276\240-\275\276b\250\226\277\024Co\277\200\025\021\276\020\3770\277\343\035\337\276:\005\254\277\320\351\005\300\n\256\231\277\327\245\232\277:\256m\276\322\r1?\274\333\004\276c\324\033\277\277!J\277\300?\t<\272\315f\275C{h\277\356\"m\277\270\375\265\277R\237\352\277\225_\274\277\275y\340\277N8\025\300^\003\250\277\334Y\336\277\250\245\242\276\354E\033\277\312l\202\277\306\217\216\277\257\221-\277\242}\027\276\216\no?\300\r9\275\333\223\210\2761Q\014\277\230 \316\277\034\025\005\300\007\356\003\3002\021=\277\267-H\277\223!\336\277\344P\202>M\271a\276\323W\001>\262\354i\276\202K\256=\366\335\242=b\327i\277\017\'J\277\321\305\350\276\346b\314>6\202\301>\257\271r\277\325dN\277\032\247n\2762E}\277\320\271\202\277j0\310\277\234\032P>X{d\275\347~]\277\3201\261\275\035n\225?dv\220?\017i\026?G\204\253?\313P\307?h\005\222?j\355\232?\352\303b?\324\244\204>\264c\345\275\3758\262\276\316\211\025\276y\316\014?\235\"H?v\222\256\276\372\202\323>\034\262\222?\234\245\226?\360\205(>\200\230\225>\222b8\275\315=\321\276x\2217\277\032\325o>Dh\250\275\325\r\026\277\306H\027\277\0140t\277\370\226-\277\200-\030\277\360I\360<\365\000$\277@\222.\277\336Z\377\276[\251\236\277O\343\341\277T\023\000\300q\230;\300&\"u\300\207\020\003\300+\004\013\277 9V<z\233\277<\362\311\202=,\353\236\277\273\206\264\277\240\342\303\274\347u\345\276\036~o?\036\235,?\202\210^>\322\216&\277\"\212\213\277Z\301\317\277X:\202\277`\025\234\277\016\177k\276\344\3536\2770SZ\277\243\307\035\277\260\032\200\275\360v\222>\004\213\262>S2\003?\356\267F> F;\276\030\321W\276\264\016\035=\250\374\324?\354b\226?\001 y?r\027\234?2\026\311?\371Jq?\"\333\306>c9\203?d\250\302?\374S(?\352\014\321?\363^B?]\271\331>/nc>+]\234?\200B\014@\206?D?\335m$?\276\341\213?\254Y!?\200\367\023\276Y\"\000?\246\304&\276d\325\206\276\247\342\001\276fkA\277h\221\256\276h\251\030\277\025\250H\277\230`\030\277>d\351>\372Uw\276\213\264:?\370P\352?\303\233y?\334\357\000?\252T{\276t\021\260\276\346\007\201\277\331\314\013\277\246\361j>J\252&?\303\2553?)\177\245>\270\214\204?\037\002\r?\251\331\'?\2171\346>\300\351m\277~5\230\277\020\252\037\277J\262\274>D\350\337>\247H\030?f1\033>0\307\261>\302MD?\326D{?|_\220?8n\360>=T\037?\330\267\024\276\301\315%\276KQ\247\277\225>\'\300IdJ\3004\3763\300\\PU\300\317\274B\300\350\025c\300+\250g\300\001Ep\300\214\374\202>d\3636?\022\026\027>\247\351\021?\311\024\017?\000\347\013;]\356y?7\017\003?\033X\032?\366lP?\331\303\310?\027V\207?f\262\232>\030`:?uI`>\267\266\342\275\252o\300\276\220]^\277{\031~\277\240+\307\277mH\030\300\331fF\300[\202\000\300\230\010\227\277\344\312\254?\n\215\024?RW\207?H0\322?\313\325\307?\235\360\256?\324\320\227?8D\202?T\325k>\037\360;?~\242\266?\304Q\305?X/\235?\020\270\350?\032w\227?\000\215\231?\270|9?0\357\233=<\370\177>/\177\277?\213\330\221?\262\277=?i\305\250?Z\211\200>\300,\332?\302\314!@L\344\272?T\"\014?o\202:?\3711\316>\374J\214?\273\346\260?\3501\301>\264\343`\277_\376E\277*\3158>:\017\022?\234\2370>@:\266<\311\361\017\277*>\022\277(\362\236\277<2\342\277t\020\255\277\216\271\363\277B;\026\300\250\022\241\277\266\342\214\277\000G @\327\211\205?\260o\037\275O\211e?\341\302\037?\370\216\020\277\334\340\201\276\021\010\264>\222\375\271\276(2,\277l\332\316\276\2548\214\277\331\264!\277\202N\350\276\350\323T=$\306\r\277\267{R\277xH\241\277\372\267\202\276\330L@>\357\222\322=\036bi>\006v}>\'\313,\277\261\227\200\277A\3043\277v\006/?\252\371\010?\364l\022>\036$\226>\350ah?`\247\276?\205\211(@Cz\271?\252\177\224>\264\023$?\202\033>?\\;\254?\312$\"?\306\021y?\322\303N?\221\202@?\332\331\227>\340dS<\020\005q\277\301cj\277J\360j\277M\217Z\277\270\326\023\275q\2416\277JHa\276\310]\000?\345\224\355>B\276\264>\221\262P?\r&\222?\363\316\033?\377nm>\300S\276\277\0267f\277\230A\310\277L\357\033\300\216\3021\300\021X\007\300\345\363\025\300\335\303\024\300h\210\240\277u\367\276\277\370\016\245\277n\354\205\277\361\tA\277\030\362M\277\346\232\247?tlW?\234k\304?\333\007\264?)\305A?\2402\200<\231A\034>\370\251\311=u\t6?j\367\345>\346X8\276\217\361\016?\242pc?\204\362P?\376\247\242>\325\340\205?-F\252?a\\\260?\r9E?|\254\007?\220T\323\275\331b\316\276\000\032\270\273\210\037\237>ZpG?X_T?\373-\271?@\256j?\nP\262?N\223H?V\267\026?\304\223\022\277h\007\274=\271:\n\277~U\267\276?\0241?\240@\033\274WmJ\276\212U*>4\332\217\276\320\217Z\277,+\001\277\271\331\275\276\030\353\334\276\352\237V>\032\360\376\275\247\355\273>\314\344l=EM\222\276\372P>\277\352\031s\276\301\037W\277\024\253\234\277\277\260\240\277\256\252\263\277\"\225g\277\346B\235\277\330\211\307\277\316\301\266\277\354\331\312\277\325\364\315\277#\303/\277\226x\354\276\273\t\205\276\372\247C\277\021[\255\277\213_\215\277\036Q\351\276\274\350F>\027\314t?\362N\246?\236\032\351>\310\227\255\275<\337\003\277\032\031l\2776\365\237\276t\027\026\277\20016>K\260\200>^^\270>P\201\021=,\262H>b\305\n\2758\231\000?h\213\346=r\371i=X\250\355\276#\337\004\277q\n\t\277\\!C\2776\220\177>/H\355\276\371N\'\277m\361\217\277\344\303\363\277b;\322\277\200\264\376<f\325\235\2761\362\003?\302\2665?\354\370\261\275T\237\361\275\030\031V\276\020\375-=\354O\236=\2655\001?(\237\234?\206\335F?(\334\267?\234kq?:*\335>|bM?Z\034\004\277\367\242\214\277\344\\R\277@\2221<O\313\300\2766$\236\277sr\201\277\014b\353\277N\031F?\350\031\365>&\371\240>}*\325>x\322\356\274B\256G=\367M\204>(\361\312<\332&\305>\2363\351?\357\303T?$a\211?\350\366\225\275\014\2406\276\003\252\t\276\265os\277\346\t\322\277\350m\004\300\r\347\336\277\346\306\225\277a\325\214\277d\355\351\275\344\027\023?\346Mx>\275*,?\214\027\232?V\360\315?\224}H?\034\203B?P\r\242? \341\357>\310l\314>\270X\004?\320X\237?\356\243\244?\200<\371?\027O\007@$\003!@\240\327&@\247\276/@\264\030E@\264E0@\r<%@\301!\022@\363.k?\322\351>?\215g\212?\222\267\244?N]\262\277\374\206:\277E\357\223\277(\273\350>!\037K?le\017?\301\254{?\337V\204?\272\020\201?\221\223\236?\256\367x?\n\257\216?H\312\244=n\305\260\275k\246:\277\261\367\263\276,\327\020>\276p\250>Tf7>\250\310\336>\013\231\210>\204~\025>!\262\206\277\"0\240\276\207\'z\277\003h\'\277\006^\322\276\232\033\256\276v\365\355\275\342x\323\276\010\217T\2774\375\237\277y\270\031\300\272s6\300o\201A\300\242\n\336\277x\320\216\277\230\313\356\276\336\314\035\276&\031\240==\031\356>i\234\025?k\353c?\236\356\271?\002e-?5b\032>4\377\224?\200\265\262?\225#\262\277\350\320U\276\205\3337\277\340 \221\276\303FA>\004\314\356=\224\357\'\276\300\322\273\273\223\033k>C\372\332\275H\201i?\350\322\004\276\310\265\034\276`\362\366>\242\207\022>;\305/\277\341\2649\277\202\326v\277\354\362S\276bg\227=\337\217\014?P\010#?\240\0361?F\264->\305\2414\277\302:\237>\335e\227\276\275\316\n\276`IK>\000\205J\273|\302\r:\320\370\355\276(]\362\276\342\313`\2769\226\222\276\007?\022\277p\246\032>\310\217\343<nK\245>q\336\231\276`\341\024?\263\301\370>\260j:?\2107t=A\032&\277P\265<>\322.\224\276oz\r?\024\035/\300\362\3762\277\225Y|\277[A\010\277\250\2205?\214\222\023\276(YK\275\312\344+\277\204\004\025>\242\256N?\234\3221>\003\272H>Dv.=\321+\217\276X5\240\277\357\016J\277(\242\003\277\324s\254\275\020Vu\276\322f*\277\240[\206\277\251\265\215\277\3037\236\277\010\331\332\275h\002-@\337\025\340?\346\216\315>\220\347\351>\t\333\353>V`\032\276\200\272\340\276\334\270\020\277\\~\333\277\365\314\314\277\2001\032\276Ry\251\276P+=>\020\"\244>\344\007\231\275\0265\310\276\276y\330\276\357\275\312\276\255\337\213>\221{\243>D\206E?yNM?un\347\276\366\3035\277\002qJ?\245\373\275?\034]\255?\230\337q?\360\010\243<\000^\347=\020\002\034\274y\n<?\364\276\037?\376\030\021?\344\213\023\276\241\273P\277\177\302\025\277\345IQ\277\024v\317\277\264\257\237\277R\306\253\277D0+>G>}>\360n/>\312\224Z\277Y<\244>2\371\304>\037\321\204\27700\367\276\030.\017\2770\313\307<$\321\251\275\261\235\342>\340\363\236\276D\312\216\277&\032\214\277\244\245n\276\371\202\202\277\312\222\205\277\240\373\271\277\210\237\311=\300s\367=\351\347\262>\264oW?wk\233?\001\027\005@\352c\377?\030\332\355?BC\017@\240|\230?6\3643?vEh?\265\331\252\277\312\273 \277\002\215\204>\333\346_>\310\325\354\276\000\330\262\275\350\251\005\277\033\212\204>\220\273\370\274F\216\230>\006\324e>\270\353\204?\302\212\236?\000\215\220\274G\370\016?:\306\343>\231\300A?\306\n\250\276\252\266!\277\274\307\337=\n{\210?P\250,\275\311lm\276p\375\276>\032\367\275\2772\031\346\277\320t\377\277\324\251\353\277k\322\306\277\252\325\020\300\243\202\274\277Zq$\300P]\014\300J\226\206\277r?\263\277\215\357\302\277\200h\353\275\266\347\036\275\321F\230>~\305\273>\374mW\277\301\201N\277\210l\332\277\240Za\276\242\335\257\276\360\363 ?\241\254Q\277\312\340\351\276\362t\353>\262\331\232>\302\210\031\277{a\365\276\206\321b\277\215\2535\277.\314\033\277\316\304\224\2770,\272\275`\320\257\276]z\036\277K\201\223\276\"\"\231\276\032\332\273\275H\310\002>\305.\203?\303\224\376>@\236\213?^\247\032?\266\366\242>\030\240\003?\350\210K\276\260\254m\277\311]\267\276\2744\206\275\342\235\036?@3\236?\334Y\366>\270dl\277\272N\324\277\343\304\236\2779\202\204\277{\314\267\277\247F\277\276\363x\231\277\241d\206\277\325L\277\276\362\"#\276\316\3519\276X\251\220\277\375\000\027\300\036!\337\277\340&\001\300h\226\247\277g\245\371\276~\266[\277\212\024o\277\220\244_=`\212\275>&}8\276\372\252`\277/EK\277]Yq\277\311\346F\277\274\304\027\277\214\230\203\277Y\364\236\277v\216\307\277\237\3710\277vdc\276\366Q\341\276\0207\305=\225\212\032?\202@\026?\363n\024?^\341\261>\005\017+?0`\000?\2638\233?\322\315*?\352\005\230>\024\376)\277\326\362\263\277W\337\224\277*\020\312\277k`\032\277\235\016\005\277\324{\025\276mj\366=8\213\344>\317\371\213?\272\350\226?\324\345\010>\000\303c>\2440\300\276?Q\272\276\311\317\337\276%\200\237\277\376\251\001\277\013\2702\277\036\231\245\277X\274\234\276\355\353\016\277\246|\222\2768\214\311\2754\247\372>\264/\342\276q\342\204\277&;9\277\332d\204\277\235\347\207\277\270\267\232\275\\L\252>\304\373!?\326\240\203?\222\367\330\276\324E#\277\346\027C\277e{\210\277\3407~\277I:n\277T\266(\277B\307\231\276\210\r\227?\370l\307>,\324\304>l\266\212?\226\320B?x\237\260?o\r\315?\204\202\243\277\2143\267\277\230g\366\277x\262\370\277\334D\014\300\373g\013\300\027\267\365\277\222\244C\277\312`\254\276\200JO;\252\323\262>\274[\216\275r~\215?\3423\324>\244\240\022?\300j\351=vK\300=T\032\304\276vJ\211\277\374\213G>\207K\325\276\222\226\010\277#?\214\277\336\3646\277\303i\354>\020&\037\277\317\303\216\277\204\031\321\277\366\355\330\277\027\273\333\277o\034\220\277\331\303\242\277\324b\320\277\263\340\255\277\201\343\316\277\333!\023\300Q\3449\277\r\256u\277\222\236<\277U!\211\277\010\305\352\276\242\360\233\277\334\370\002\276\032\237\352\276N\216\244\277\252\031\333\277\325\016\340\277p\273/\300\266\306\201?\306>\240>\312\264:?\271\375\207?\"\274\230>\270}\021=\205M\364>\242 f>\377\210\314>r\353\024\276NCA>H\231<?\3511x?\200\374\023?\310(\002>\316o\034?H*+?na\260>\260\316\215\276\251H\250>\324\240\203>\334\340\030?\361z\240?h$7?\245r5?\350mw?\362\370\221?.\366\021?\005\0355? \204\340>\206\326\217?\333\343\330>\216z\307\276\217[\000>H\263\245\274\r\037\366>\334\236\265>\237\344\037>\250J\031>\\\277\357\275\321\376`>=\032\255\276\027{\002\277\354\326\025\276\243L\226\276\373\227\324>\340H\237\273\004\260\202\277\005Q\230>\332\225\325>\017\366\020>\341\027T\276ar\331\276@\'\003=S\022\345>\000\305\005>\013M\014>\025\364a>\010aa\2761!\212\276\314B\316\275\210\235}?\302\341\374>T\252;>\020tY<Ft\371<\267\322\246>\200\366}=\324C\203>\217\327c?JO\365>\261\232f?\250#\365?\013if?\036\206\235?u&\207?\345\300\214?!\271|?\n\224;?\373\346\223?\004SK\276\250\205:\277J\010v\277]\006\334\277\224M\237\277q\032\220\277!\026\003\300\275\307\310\277\260:\357\277.\020\204\277\032T<\277t\272\321>\000b{\273\303\243\003\277T\372;>\261\224\010?\374\310\007>oe\213>\200\017\003\277\272I\030\277\020\363\257\277\247\215\206\276\303M\344\276\r\022\230\277M\373R\277T\275\212\276HN\350\274\350y\002\277+\362:\277>\255^\277d\033\003\276\000\007\026?\200\013\276<}\n/?\030\243K\275DJ\023\276\024\004\200\276\000\026\243>b\322\331\276\226,\313\277\2541\355>\230}S=\215\312\035\277,\325l\277\2303\030>\312\215(\276\332\345\213\275 \202\237\276p\303^\277\326\217\272\277\000\022\027\277\374G\222\276\220^\311=\312k\232?\026\342@?P\346\272?d\326\025>\022>\361=\310\200_?\204y\004@\023\251\230?\370\273\004?\336\001\014?&\0365?\317\353\021\300\227\322\372\2776\210<\300\323 1\300up^\300|\307W\300\316\227\031\300Yr\034\300\\\312\206\2778\357l\277\230\025\221\275\366\352X\276\354j\320\275\200\342\036:\213\210>?\320G\223?k\243\216?\311f\"@\205\014`@%\200D@\246\2402@V\261\002@\367\346\304?V\371\241?.=\376?\237\352\216?|c\310?\326\277f?\022g4?)lY?\300\rn?\032\234`?{\232@?\340\252t?D\207\027\276x3\214\274\303\3765\274B-\037\276a\021\022\277V\3372\276\230S\272\274\331-\014?\374v\353>\006W\341\276/\251h\276\022\324\240\275R\314\'>\271\016m>\035\207\306>\014\330E\277\2762\242\276\271\300\"\277\230\242\003\277Dh\343\276\231\356\363\2768X&\277AU\013\277\225\304\013\276PE7\2769\370\267=\375\354\027>:/\345=\002\234\325>$3\014\277~\217J\277\026\r\217\277(\307\201\2774\216\210\277|H\244\277\243\373\273\277\352\363@\277\\\027\254>\304\217\276>p\203h\275\272J2?g\355\022>\013\317\344>\024`\255>\212\245<>R\355\274\276<-\215>\374\213d?\362\340\260?\020s\236?9\3774?\246\204v>\326C&\2770\006\230\277\322\302\244\277\274.\246\277r\016\013\277\250{@\277N\260\231\277\311\375\210\277tW\333\277wB\310\277\000\215\031;\341\333\243\274r\345\313=\252\023\217\276(\223\034=\216F>=\212\023\361>\276\311d>\204\311U\276\324\372\013\276\366)\225\276PV\034\276\026t&?\010\345}?WT\213?\274\363\264>P\307\341>\275\356/?j\r\254>\024\204c?\034|\266?\002c\225?\326\024\277?\r\2455?\036\"\235?\341\243\231?\326\310\217?\340\337y\276F [\277\034<1\277\216\365u>H\213k=@\222\251>LM\203?\364\2400?LB\027?[i\026\277\346D\037\277n\300\301\276+\351\221>\3751\225\276Gm1\277H\224\362>\261\350\001?p\225\300=Q\020z?sV\'?\270\3629\276\324\035\335\274QSR\277\266&B\277\273\212\300\277V\236m\2770)B\277n\020\365\276\322\303\343\276n)h\277\272\215\223\277\3111\244\277dD[\277|\035\223\277\236Q\244\277\356\251G\277=w:\277n\3348\276\254\312\207>\367C ?\000\034>>\020\004W<Z\')\277\324\210\217>YiU?\320\351\221>\017R\210?\206Ev?\254o\202?.\303\226??SS?\356\252g?\274u\217?4\002\236>I\323\"\277\021\035V\277\235\2340\277\361aH\277\220wb\277\265\016@\277\21217\277\032N\316\276\242\373\177\277@\030\272\276HD\273>\177O\254>\245[\253>;g\217?\335\260\206?(H\276\276\002\t4?Y\307\"?nNr?\243G$?\n}~?\346\224U>\271\263\252=\313P\024?\377\360\253?\236\200\243?\030\360\372?he\305?\270W\253?\220>U?(6\305?\373\215p?\267\310 ?\017\031\006>\334\031\252\274+\022\240\276\001\376d?\027\353\303>D\235\"?p@\250\277K\204\234\277\0218k\277<\346\010\276\304\372\323>\3108\021>e\330.>\350\370\303=BD|\277\354\344\316>\211M\357\276\240\230\210\275\036\224K?Tk(?\352\345-?\2132L?L\265\253?v\231\351>\254\254K?7\347\030?\340\272\'?\030&\234=\243\205\210\276\336<\204>\202\030\217\276\260\263n<\251\341Y?\240-\027?H\234\220?\371\336\203?\270\177.>\240~\307;4\325\351>\212\271U?\3344\367\275\\\203\302<\352\366\276>\320F\\=\331)l>\020F\020<:M\016?z\245\221\276\260\373\224\277~w\226\277\"\324\315\277\240F\350\277a\252\304\277%\225@\277\314}\202\277\236K\273\276V\\6>-c\006\277&Z\013?7l\315?\231\345\317?\340F\206=F\301\314>\342\337\244>\356\245\320>\001\235\376\276<\354\020\277\216$0\277\251Ju\277 \275\355\277\244\\\003\300\0328&\300\214\327\222\277\036hg\277\021\337\030\277\323,f\277\032k\202\277pef\277\304%\317=iZ\232>Ak\300>vV\223?\312\"K?>\026x?\370~1?Xhm?`I\351=PD\031?\374\024\363>R\017Y\276\025\313!\276E\343J\277\256\240w\277\211\251\001\300\223]\326\277(\307\337\277Q\010\252\2778V\305\277\007\274\244\277\312\374\033\277\210s\331\277\247\315K\277N\363\213\277\030~\205\277le\006\277\032<\217\276r\276[>\260B.\274\332:*\277\230\261\254=H\336\324\276\322\220q\276J\221R\277\022\240\262\276\376\214@\276\3267\326>Q\327\215?\271n\006@O\"\345?\311BL?N]\241>\277\201~>WB\304\276\242tn\277t\0000\277\002s\264\276\363\322,\300^]k\277\\\333\300\276A\214\331>\371q]?C\237\272?\223\345\002?\244F\263>\263\367\245?\261\335\217?:N`?P?\000\275\023\016a>x\346\255>\336\233?\276j\305\031>\340}\253\276\272\'\242\276\264a\301>)\231L\277pu*\277\000Ry<\247\204\014?\320?I?\235\370C\277\240\327\211<*\322w\277d\205\274\277\344\370\226\277B\366\r\277\276L\031\277\200\362\250\274lv\232>\276\213\227\275\2668\204\276\277{\362\276\000h\310\276\226\\\356\276\2705\212\277\226\007\307\277\210\344\217\277 E\241\275\362{\243\276\364\324@\277\315\1771\277\367(r\277.\321;\277({\365\276\273\250\214\276l\003\254?\\R\315?\211u\310?J\037\211?.\275\246>z\\<>d\255J=unC>\330\010\314\276P\'\250=v\300\261>\212\242\225\276\0269T?\260A_?G\307`?\252\016\312>\257\336U> \211\217>\342Y\026?\220\220\272=<\021\007>J\267 \276\214\304\027?MHR\277\020\260\302\277\331>\004\300~\022\344\277H\031\263\277\024\322\201\277\005\355\014\277\004$\">\202\017\242\275\266\"\024=\300w\207\276:\032\242\275\250r&\276F2%\276\323{\023>tN_\276(\024\276\276\344\245,>\321\215\266\276\000$\273\271%\002%\277\240\t\213\274$$\006?:~\344\276\223\036\277\275B\235>?mUy?h-P?\002\243\200>\374\023\341>@\3246?\200\023\027\274\250?\261>y`\022?\017[N?8{\235\275\224\253\233\276\352\r\032?\021\314\371>\000\0305\275\262\354~\276e7I\277\365I&\277\220\276\360\274\246\263\370\276\177$8\277\255\000\232\277\311\000\311\277\r\213x\277\353\211g\277^\305\300\276\0008!9\364\035\335\275\364\003\020\276\376\322\225\275f<<>\177\020\216\276\020\357\311\274\373\363/?K\200\260>\216<\033\276\031\327W?\301ux>\312i\340\275_\032Y?\"\"\332>;X7?\305E\031?\242\347\005?\207\272\254?0\t\375?\270\363\271?\006}X\277,\240\237\2777f\254\277X\375_\277\370x\251\277Y}\031?\360\231\244=\221T\312>\234\313\230>\370\221D\276\222\004\032\277z\204\327\276\002\200\"\276\364\330R>:\2340?\270M\345\275\256r\256\276\210z\276\2762\030x\277\322\023y\276\347\265\270\276\252\231\335\276\265~_\277\260nd\277\263\326_> \026\357\273\254\223\303>r\365\306>\333\277\027?\304\233\237>\372w\305>\335\226\275>u\343o?\200\2349\274\356\270L>\306/\245\276$:\223\277\206\372\301\277\357\021(\277,\212\203\275P\2118>\374=\004\277TQQ>9\r\305>Xn\257\276U\237\201>\031\332\204?\276\307\244?|\017g?\260\363\352?Lb\271?H\215\216?P\246\333?\016d\005@\023\020\257?;\326\373?\305K\333?\216.\236?m\207\203?z\225\332>l\232\265\275f*;>\365\002\374\276\310;\264\276\342,\026?\030a\306\275`\302l>\267m\261?\326\304\232?\376\360D?\200\200G\274\306\262\003\2778\016\272\276Z\322\252\275\206\247\264\276\022\267\241\276\212\350+\277\334\266\212\277\300\316\001\277\272\367\016\277!\247%\277P\244\257\277\034_\241\277~\372\227\276AF>\277o\321E\277\250\201/\277\210\300\022\277\000\002S\2739\210\013\277c.\363\276\227$G?t\331\204>\034\2774\276\310\2360\276\261>\302\276\276\352!?\001 p\277\'\004\334\276;\033\207\276\266\270\212\276\334@n\275\3549\217\277\240\376\356\277\221\010\323\277\003T\363\2773\225\324\277\304\312\021\300\335\207\017\300\'\253\004\300\232t\033\300{q\310\277\276\025\r\300@\223d\2770\\u\277n\324\247\276\020N\362\274\205\223\323>w\335\221>\207\300\202\277<\350\313=?@_?\352\022\201>\270\231\253>d!^=\004V\276=\276m\377\276W\302\020\276\342\215\377=d\371\273>\232Yb\276\272\354\213>X\026\373>r\221\344>\245\320\354\276\316D\035?)A\250? \243H>ne\237\276t\312D?p\243\223?Z\n\021?\270}A>\000\r\362<\336\250\220>\340\232]\274\225R;?\001\nI?;\272\004?d\212\223>h\362\341\276\201J??\017s\r?\300}\325\273\367p#\276U\255\371>\240\225\237=r%\001?.b\"?\370\245\n\276n(/\277B\270\255\277\267\004\251\277\374\236\204\277\255\263\265\277f\363\272\276\335\227\267>\302\335\320>R\340A\276\260\327\342\276\002\032\205\277\370\351\035\276\223\235\371>\202\243\262\276t\357Z\277X\227\245>L\267\335>\230\037\324\275\243[\243\277T-\030\277R\215\306\277F\324\320\277\320\003\247\277\001o\234\277:j\326\276\353\331\n\276&\023\312?l\206x?\350\335@?\316\223\231?\200kg?\352\030\003@z\344\252>`\261\344=\240)L\277\307\326V\277\200\333\300\275\326\273\263>\354\241\022?k\250\220\276ks\246\277\\\"y\277\204dH\276 1\211\276\335\271\226>\256\323\032\276OR\265\276\231\345\230\276\336\214D\277\232wy\276[T\225\276\374,O=\351$\021\277\342\020\360\276\254\\=\277\256\0064\276t\2518?waf>}\003b\277L$a\277\371Z\207\277\311\350f\277LO\201\276\"}\221=z\362\232>h\201w\276~\3662\277\301F\r\277 \306\025\275TK\270>\002r<?\016\321-?l\337b?\342\260N?\214\332\205?\244.\213=\200(9\277\365y\303\277^\240_\277t\020\371>\002\257\352?\370O\353=f\351\000?1\270\024?\002\005\312>vf\370>\3004\254?\344M<?\222{}?<\006\242\276,u\352=\374=\203\276K3(?3h\207?^\274\266>n\371J?f.\255?\374\013\261?\234\253\320?&\300\242?\366UV?\000\276\257\273(\327\300\275\200\236\262?\337\177\344\277\345\331\034\300{C\215\277\360e\302\276\346\365\202\277 \230\254\277n\032\016\300\024\236\004\300\213\371\230\277|3\222\277\007w\234\277Z\330\306\276\206\344\360\275o7\177\277\237\3718\277\033\207\375>\342_\026\277>-\210\2777\352\355\276L\276_\277\327#\257\276\260\311\034\277\322\350\335\277\312\331\304\277\303\t\376\276\250\036r\277\210\370\027\277\352>\035\276|\034\313\276,\255\271\277\341\220\314\277\024\177\225\277\322\247\247\276\030E\341=R\365D\275\022\000\027>\356\256`=\345R\023?(\231\022?LY\361>\334\\=\276\3359\025\277\026\367)\277F^l\276\264\t\004\277 H\344\275\334\225D?8E\257=l\215r>!\323\216>n\321P?\0134H?\233\3337?\372\016*?\323\010\365>\202\244\213?\246\257\222\276h\236,?\000\351\004?\314Y\220\276\032\264\376\27588\262\276\270\0019\277C\370\271>6\210\203>s\372\024?\314B\031?7\231\234>\257.\241\276^\372\357\275\0363\213>\320\345\200\276\024\273L\277\017\306V\277\327Z\202\277H N?\324\202\n\276\023}R\277\315\000x\277\'Tb\277b\234\252\277r\345\364\277\352C\r\300A\234\323\277\312$\364\277\020{\300=\342\031v\276.\016\310>\200^2=\022\325P\276\"\005\016\277\2469\251>\177\242\322>\361\234\252>\024\221>?\263\036\234>\304\305=\276\020;\374\276\370P\t\277@V\243<T\235[?\000Z\242?03C?Pa-=\206H\301\275\302\247\032>3\270\003>\323\014\310\276\324\376.>\177N\376>\325L\017>(\330\022\277\\\220I>\330\203;?\320v\201?q\241k?,\241N>D\235\206?_\010h?\014\023\006?P\330\256>\373\\\334?\245\361\233?\322$\\?i\221\274>D\355\221?.\000\226?\351m4?\364\033\036>\016\321\t?\024\325\205?\204\274\231>\245\321\207>\322\020\314>\357\243\274?`\004\317?\220\354\241?P\224\335?L\370d?@|p?\362\275\313\276x,\303\276\254\256i\276\306\210\237\277\373p\010?7\377\342>\204&\214>\010(\367\276&\266\310\277\376\341\317\277\204+\233\277\025[\017\277,9\005\277\037(\210>\301nl?\216r\261?N\341L?U\220%?n\255\232?\036\326<>\002\035\315\276\220\341\253\274\224\207h?<\014\235>=<\210=\312\001$\277\214\250\237\277ne\227\277\342\207M\277\227\207\255\277\354\305\373\2774\232\026\300\324\314\321\277\210\264\341\277\022G>\277\004\340\254\2760\031\020?xR\223?B\340\203?1\231\003@B\374\355?O\220\372?\000\227\251\275\246\350\257\275\241\000\014\276(\374#\277vEL?\240\004\"\275l\004\245\276E\004\316>\000\242\226\275\031\204\203?\342p\253\277\252\024\217\277\267T~\277\213\361!?Yv\320?n\311\236?\370\227\350?\236\"\331?\332\313\245>,RV?\032ay?\211L\206?\214\251\212\276\177\362\n\277\031\251N\277\241\204\014\277dz\267\276\372dF\277\204|\222\277<\227\266\277\302\344\273\277f)G\277\274\021\257\277+g\224\277\236V\\?\317\'\034?P\3147\276\246\261K\277\033\3605\277\n\265w\277P\345h\277\216\177\'\277\266\246\305\276T+S\276\330\005\330\276\366\305\363\276h\000\214\277b\301\210\277\024\276I\277E\304\032\277P\004l\275I\255@>\364\313\265?!\017\243?\020\301\t?\034\001E>\032\217\272=\034xi?\2028\225?\226s\360?dN\275>ZE{?\216\t\345>\210\212 ?\236y\257>\346\233\030?\034\370[>b~\213>\316\001\275>\223\235\314?\231T\327?\305\216\274?(5.?\226\373\347?\300\221V=&\006}>y`\305\277u\024\265\277\324\220\306\277\004\200\250\277l\274\205\277\204Aq\276\3245+\277:\274J\2779/\301\276~\345\357>0:\243\274\007\3233>Q\376p?\262@\246?{\356R?\205\202:?\350\030C\276\004=K=l\032\n<\244e\016\276\242#\322\275|T\250>\352C$?\274\020!?`Q\207=\273\252\036\277\210\242\007\276J\266\363>\001\2611?V3\237?\272\343\\>\016a\210\275U\377\217\277\230\223\336\277\242\353J\277\254kU\277p\000<\277\030\252\251\276\321\324\202\276i\2110\277\242\373\244>\316_\263\2760\326\222\274\233n\347<*\001\207<Uig>t\225E?9\005)?D5>>\002wP=\272\271\237\276\022\325\273\275\2404/\276s\365\312\276\202)\254\277\374@\002\276\274-E\277\2320?\277\207P\036\277 \264p\274]\r\373\275\262\366{\276\2550#>Ic\245\2761f\202?\300\027D\275\221y1>\003\335\261>\016\352\216?\270\223\023?\226\264\023?\375Qt?.(@?\365\312T?t\275\003>Q\200\214>M\225\177?\327\303Q?\340x\205?\262\340\366?=\256\365?\230v\255?\373\036\036?\262\344\277\276U\243\270\276\2300\315\276BWA\277\224\207\325\277\224}\220\277N\353R\276\340\324\001\275 \334k\277)\036\344\276\215\272J?\245S\370>\372\343\263?\266\205X?\n.\371?$\257%@p\321\010@^\220\\?Xh\203>\372$S\276,\203\376\276\275\262W\276\224u\000\276\325qH\276\333\024\014\277\021h6?im ?n\324\006?\274@\313?*J\273?H\352\253\275\037\345\241>-\000\251?\243\340\355?\323O\256?B\364\377>N^\217?\325%&?f8<>\331\364\023\277\016\035_\277\337\273\037\2779j\276>\266^\341\276\363\002\377\276\346t \276h\326\224<y\366\016?z\324\230?\246\334[?\246\n\212?\273}\275?\027\237\226?\000\017\262<\251\363\326\276^1\000\277l\265\034\277\322\253\036\277\270\204\200\277|1\221\275\211\264\337=\223\023\r\277\033),\276\36501\277\246\247\346\276\260\\h\275#\014\277\276,\240\224\277P(v\277\265x\262\276\3203\357\276\376T%\277\024MM\277m\004\023\277\351\366<\277V]\226\277\272\240j\277\036\332$\277\374|\261\276v\246\026>~\237\252>x\344\372\274\375\276\033>\374\374\203<\327\355j\276\340\276\361>z\274\270?\2066\232?\032\347\235?\373\226h?\0179\237?_\013+?(\334\266>\245\335\330\276\000\250\275\271o\274<>~\006\234>Q/x?\342/5?,e\335\276\357\237\026\276\200\337\210;\350G\216>\254c\000?\306\010\314>h\371\370\275@\266\225\276h\342\272\277\340G\037\300 U\027\300\376QB\300\217\311\350\277x{\332\277\337\3650\277\216\303\234\277\340tL\277\213<\006\277\3443^\277\300\212\201\277v\001Y\277U\333\026\277G\275\376>Z\335\006?\245\357\221?\244\371\222?\350\221\267?\233\331\263?m\'!?4\301G\276O\331\'\277X!\201>\255\024\254>b!\321>\372F\377=\024\033\'\277\230\363\244\277\332\250\215\277b\310\237\2764\364\276\277\300\025s\276sw\274\276\0004\377;\343m{\277\006\300\200\276\300+\235\276\022\303\250>\204\231D\277@U\316\277\\\352\204\277\231\214\301\277:\311\317\276\345\336\264\277+?\264\277nP\223\277\025\315\270\2779\236X\277K\323\021\277\010I\t\276\262`\274\2769\247\240\276\265\360g\276\246B1\277\354\337\325=\356\003\316?\223W\254?\312\317\252?\036\276\310?D\205\026@q\003\003@\0330\270?\260\227\273?>&\231?\300\217\300?6\255\242?p3\202>D\275]?R\322\266?\362\014\220\276\213_\032?\234\035\235?\350\223/?lmw?\2244\211?G\345-?\247\210\233>\034\035\227?v\275k?\246}\344>\024\340\307?\020k\254>^\341)\277_%\024\277\010\312\270=\315$/?\200\243|?\217\202\013?Q\225\311>\0372\022\276\377\266\025>$d\352<]\335.\277ni\322>\252\315>\276*\273\345>\270\'!?Q]\016?\230hL=d\035\374>x\"\026\277\224\225+>\014\365\231=vh]?\250uw?\026\300\267\276|\316\336>\300T\032\275m\302\212\276%\020[\277\032\235\302\277-\310\315\277\270\017p\276\302\265\254>\354.4?\310\343\317=\236\262\333>%P\241?\344\244\240?n\010\231?\340\026\\=\2010\t?\250\367\351\276\365\032\001\277\340\340\257\277D0\376\277%\367\365\277\026B\327?h\377\215?\026\266\251?\306\347\014@0\002E?\352\036\303>\212\267\242>0D\260\276\362B^\277q\2608\277`S\255\277\260\273F\275\3058\223?\034\332\342?\0140\205?h\234\320?\022X\323\276\312e\027?}\225\353>(\263\210>\252P\253>\010%<=\262\370\263\275t$\244=\252\r\223=\347\007\021?(\363_? \016\251?p-\232?\356H\322>M\032\035>V\213\365>8\254\365>\344\253\322>\3500\222>\261\324\245\276\003G\300\276\301\\\274\276\354\360\023\277t\223\247>\202\306\020\276\324C\351=\335\261\257\277X\260\300\276\371C,\277l\370[\277\347Tl\277t\312\247\277\35048>\251\325\310=\032\220\370=\372\265\036\276\010e\013?\306a\232>\374[3\276\017\301\027?x6\331=\341\345\"?\034\321M?\276\037\255?t\247\014?\205\306\221?x\242\n?:\001S?\214\'\027>\320\324M>\326W\030\275\237U~?\360\256\344>\001\362\010\277\2625-? B\263=\346\213M\276r#\007\276\013\237\323\276\257\020\346\276 \232\005\2778\371\005\277T\314S\276|c@?\264\371\213>\312#B>9\236\272=\300\351h;:\'\201\274]v\216>\023\317\224\277jat\277\030\343\253\277\302)\335\277\225J\203\277\355]\262\277@X\231\274E\357\221\276\332Q\254\276\006\244.>X\333o\277`\2331\276\016\367]\276nA\303>b\372\250\277\217\032\316\277\361\276\003\300ac\252\277\022\350\237\277\264\331\343\277<B{\277z\"\204\276U\226\260\277\365:\214\277\006s0\277\213\307\307\276\330,\"?F\373\006\276\024\202\271>\216\305\240\276\030\001\302\276`f\352;\367\005\261?\330\263e?`\331z?\005\351\363>\036s\t\276\340\205}\277Pu\324\277pb\365\276\336\030\326\275b\323\033\2772\003O\277m\315\314\276\361w\205\276\177\341\354\275\024\232\224\276\300z\337\276Kj\221\277|\030\204\277\t3J\277\010q\311=\225\2279\277\324\255\207\277B\231\306\276>\251[?<\t#?\251_\323\276\300k\372?\242\263\023@\302\035}?(\252\r?nwK\277\260\302\310\277\376=\206\277\370\2530\277\360\237R\276\3319s\276\006\003\272\276\304\3248\276\340<~\276p\247\250\276f\023\226\276\360\372@=\300\361P\277\214Y\235\276\262\243I\277AK\032\277\310X\203\277H\212\001\276\"d\255\277\214\016\254>\361c \276\340\377\367\275\222_\034\277e\202C\277^\271\245>\200p\230\275\n=2\277p\337\222\277\365\004\274\277\206\240\227\277\366F\003\277\224#\232\277\016\244\265>\363\372P?4\0007?x\007\243?\340[\350?\022\023\204?\3652Y?\0370\206?=\021\371>\300\350\005?>2\307>\310\250\201?|\\\267>y\353>>=\361@\276@\240\377\276\364\312??\374\2006?\202\004\334>\366\222\244>\020X,\276*\032|\277\377ZH\277\237zp\277$\253\227\276b\366\241\276W\242\202\277\244\366\261\2776\344\236\277`\240m\275Z\336\017\277d\350N\276\262g\031\277\024\300_\277\036\214\237\277\373e\307\2773\267\032\277&\036\344\276_\265\360\276\207s8\277{7\002\277\261\217\232>\024\345\203=\030\272\303>\314\236\244\276\021\032\321\275+V\026?\016t\375?)y\006@p.\274?\374\020\217?\2146\024\276z\017\010?/\021&?k\203\000?\242{\000?\010\217\030\275Dx8?\334\022\262?\223\244\034?\261h\266\277\334\332z\277\230\030\305\276\313\023K\277d\236\200\277\344\300\356>~\212\226?\002\3657?\344\221\n\277\034\330\372\276\254\247C\275*\t\226\275<~\000\277@\002\377<\021\215}>\316\271\377\276\303\317\214\2778\r\261\2768\306\227\276\315\316<\277*\320Y\276\177A\212\277\030_\234\276\346\250\243>\013\262\362>\351][?T\177\324\275\230I\204\276?_\202\276\031\342\230\277O\206\010?<\301\'?>s\207>\000R\263;#+!\277~\304\364\276\276\346[\276\203\225\033?M\223\n?\340\352\365>\241\304J?\000\333z?\272\333\322?\270\343\'@\315I\343?<\245\366?&G\007@\226\333\206?\020b\034@\315z\354?\027G\237?1H\331?\020d\314?\305\230\205?1Iv?\"E\233?\250Yd\276\025\026\001\277\225\325\312>D\317\252?,\317\252?>K\330?\"2\007@xx\246?\001\007\344?\022$\204?f\230\247?\020A\272?\201f\177?\202`\217?\241\240T?\233\307n?U\252\021?\000\315 \275\315I\250\277\256\"\210\277\353\004\302\277\226\376|\277\332E\360\277W*\364\277\362\320\253\277\353\322\340\277\334\247\222\277\260TC\277\322(\276\277\000.\265\277<Fn\277\320\025\013\275\264+\225\275\010\006E=\213\024\032\276`\267\\\277\260\235\273\277,\366\250\277}\000\310\277\354R\300\277\024\360\271>\236\324\037>B\344\023\277\276K\261\276_\036\016?\006\302\261?\000G\351?\3262!@\016\362\364?)o\340?(\2138?\345\265\240?\360\311\335?\352\242\n@2\260\336?\250\022\021@\346.C@\365\322^@\303 j@U[E@\204`I@\216P8@L\213\031@\310+\001@\303 T\277\020\310\243\276@\276j\274\202\n\351>\246\021\227?\351\345\305?&\340\370?\031\205\236?\253<\354>\252jr?\251\037\254?\306\000r?OCl?\356\315\033?{o&?\320D!\276)\3165>\010\355z\276\332\t\017\2777\205i\277vN\272\276\027\237Q\277\210\025\023\276\262fd>\200@\277?\374\234\276?\215\364\334?Zp\316?\364\216*?\263.c?\202\350B\277d\241\250\277\240\376k\277Ft\275\276O\266\345\277\360\236\\\277\320\251u\277\277\203/\277dd\004\277{:\363\27695\247\276X*\226\276\247\277\344\277\0241!\300\032i\030\300\202\017\365\277UQ\"\300\254\213\233\277\377G\016\277\323\324\240\276\0321\213?r**?hM\034=^\346\351>\272\204*\277\354\343\024\277\347\214\354\276\352\346\230\276\204}\025=\361\243\257\275\200\024I\277\214\365\002\276\343\327\260\276\017\010[?\330EX?]\251\236?|\207\226\276t\234I\276\000\301\253\276\340\374k\276\021\017\207>\373\350\326\276!m\257>S\210\276\276\224\t\250\277\230 u\277\201\016\254\277\024\224\177\277 n\350\277R\275\320\277\322\024\214\2776O\031\277\245K\303\2772\326A\277P=O>\026Q\022>\346\312\277>\320\357\375<\276\241\017\277\036\300M\277\2035\270\277\364\341C\276\374\004\231\276p-:\276\257\346\210\275\007;x\277X\331\240?\034\377\230?^i\375>\347F\263\276l\257F\277\002\3221\277\367\326\203\277\200#C\277b\367?\277Zu6\277\"[\204\276\002\303\231>sIb?\334\016\327?\271\206\213?\212\217\026?\016\250\257?R\224*@\262$U@e?S@T\r\035@z :@l\371\014@$\237\027@0\323\340\274\367\205\223\276\320kZ\275>\276v\276\345\332\215>aR\203?\320\303\027\275\033\310\351\276\340N_\274\351-\236\275f-5\277\344d\321\276\016)d>2\256_?x\2464\275\243\343\n?\272\237u?&@D?\265\334\207?f\313\006?pUB\275\272\371t\277CI\244\277\264#\210>n\2129>h\202\001\277\212\374\342>\020\033Q\2753\013\375\275\240\305H\277>\343\304\277\306?\357\276A\370\205>\371\276E>\3401\350<(\006|>\276\037Y\277m\221\035\277\014z\235\277\202\372\371\277=z\213\27732\251\276p\002\262=\201\345\001?\336=\253\276\274\322\342\275%\224\\\275vmo=\241\2372?\316\363>>@E\203;\3313P\2758\250A\276\000&(\274\034\211\307<\214o^\277\260\247\024\277(?\235>\240\261t<\023\220\246\275C\363\213\276\312\261\032\277\323\264\014\277\246\020\005\277\032\275\211\277T\343\345\277N\'\020\300\013+\036\300\0017=\277\206F\250\277\003n\241\276\0340;\277\363\227\337?\262\021\353?!\312|?k8\241?\354i\202>\210#\276\276x\311\031>\266?2?D\273k?\303^\271?\265@\010?\244\037E?\232Jc>\326T\376\276\325\355\247\277\250\243\363\277\007N*\300\214Q\002\3004M\n\300T\300\002\300\240\3579\275\320\322\337\275\260T\377<D\355\253>\274`\203>\330\362\224?\262Ah?\251\244\'?~\027\200?\313\223\210?\324\213\036?\260M\276=\023\021G?\210\010\302?\314\226\314?\267\243\305?\257\314\262?\336\224\311?\254\302\007@L!\314?x\362\"@\034\346\211?\220\265\354?\303#\004@-\313\321?\\\300\263?\334\272\274>]\204\357>\274\212.\277nf\022>\255*\265=\236&\035?\336\317\032?p_\224=p\353\323\275l\366\006\277~,\204\277\372\326\366\277#SI\277\337.`\277\244\\\206\277\276J\254\277YW\240\2776\351\327\277\322-\313\277\037\372\327\277,\225T\277\2443\216\276\246\326@\275\276\214\241>c\032\325\276\343[E\277\235r.\27702\263=\377u\370>\376\\\021\277\243\314&\277\316O5\277\306\204Z\277\033\346\330\277A\274\022\300\023\232\236\277\002\035\331\277\262\221\024\277g\000C\277m\354\255>\365\366\020\277\247\325\321\277\274\364\340\277%Jr\277\000sa\275N\354\370\276\217\035\240\277\353\026y\277\254tf\277\300\335\234\277\3600\354\276\254}\t\277\300S\237\277!1\226\277\372c^\277$\013\227\277#\301\370\277\036\267\016\300gV\007\300r\236\225\277-\206d\277d\261H\277\014\320\232\277x,a\277\250\333\233\277,\'\002\300^\320\207\277%\253\374\276Z\223 \277\354L&\277\360\343\244\277\tt\032\3000\2178\300\313\360B\300b\232\201>\270\211\277>$\2074?\007\213\272>p\267+?\354P\223?R\332A?\264s$?\376&g?\270\n\320==5\004\277\014\026g?\305m{?zK\234?\354S;?\035\0106?8\r\364>4p\220?\276\016E?rcb?Z\371\342?\366r\234?(\003\234>\334&,=\212\315(?\3608D=\2269N>rJ)\276\213*\226?\3165\267?<\232\316>x {\275\364\020\300>>sU?\222ZP?i\024\320?\300%\033\274\251\235\006?\n\303\341>\230\030\264>l\033\272?=\366\235?\030lQ>\025\352\275\277\300\021\021\275gc0\277\327\354]\277\260\240\232\274\t\367^?\014\352\203>\022\r\325\276\356\376\323\276\030\211\n?\350\244F?\274\360?\277r\216g\277\220f\'\275\'EL=\274j >\036L\211=0\346\200>x\315p\275\325\342\'\277\325\rP\277\346\230\031\277y\255\212\277\331b\257\277.u\322\277mO \300\026\361c\300\344\0172\3006;A\300\322[\027\277\304\322U\277\326\024\252\277M\023\302\2776S\241\277\256\"\211\277\000\321Y>\034k\226>\333rJ?\330i`?\023\3470?Os\257>G\024\003\277\000g\010\274\031g=>d\2027\275\316\360B\277\226\205\374\276 \310\310\274\266\016i\276f\235K\277\377y0\277\274\316\360\276\312\to\277^\347\335\276\350/\000\277x`\227\275=\262\223>\233\014\016>\277\010\242>\250:\326>\312\274\020\277 S9>+H\320=@*\226\276\354\241\250>(\036\025\275;h\216\277\342\314\320\277\264\277\367\277\377\315\317\277zgS\277\010fg\277M\002\206\277G\215[\277Fs\331\276\350p.\277\300\'\\=0\3678?\322\365\013?\202\325J\276\031\257\026>\302\022\032\276\002D\363\276e8\275\276\245\037\020?\320o\241\275$\343-\275\022\345\271\275*U\233\277\022\002\022\277E\222k?>\307\226>x\310\337\275\026\246\237>:\363\272>\"=K?t:\327>\356\002d\276\214X\204>\300\037\327>:\310E?k\267\312\275~\342\327\276\374\027\305\275\017\341\217\2777\034\265\277M\264\254\277~,F\277L#.\276sr\316\276F\236\352\2763\345\234\277\204\325\261\277\302\266\216\276\212\257z\276k#\272\276QL%\276\257\300\004>\000\235\327\276>\276P\277\203`;\277>l\367\276D\220\306\276=/\014?\324\277\370\275\314\301\027?\\^\202?X\237\265?\306-\226?M\025\201?\337\'\255?o|\013@\332:\237?L\320\213?\234\240\303>\214\307\261\275~\266\222\276\336B\233\276\224\375@\277\2616A\276\313\316_\2766\210\244\276r\206\001\277\213\260\347>\357\217\377?7\027\200?\2367\327?\327\345x?\214\317\364>!\211\263\277\033\242\260\276\352\305\224\276XY\352\275\374\221\267\275\n\337\374>D\005\251\275\340\023\361\276\200\no\275k\376\030?\302\275\316>\301N\234>\356\354m\277\005\321\274\277\r\307\203\277s\302\253\277*\\\365\277\353\364\247\277\326\347\001\300D\245m\276[?\321\276\360\206[\277\310\267\034? \301\373=\306\340\364\276\000[$?y$0?i\316\274>\234[\'\2778d\336\275Q\033\306>\276\300\026?\034\315\226?\314\177t?\314\310\224?\264\342n?\036\312\203?\216\276\274?\340k\366\275Z|]?\241\002\266>L\0232?-\3037\2770=\252\275Ru\234\277\211\307I\277\020\3753\276\327\030S>W\203h?\006.\223?\222\217\302?\020\215\006?\300\233\022\275\256\273\265>\302\264\320?\334\230b?\230@\210>\314i\005?\356\311\033>\314\275\035=v\005x>n\005d\276A\326\267\277>\372\311\277\276\350\242\277\034\220=>\304g\366\276\354j\303\277\224\357\361\277\217\204\350\277\236;\000\300\376\356\003\300+\356\022?4\223\350>\312W\345>8\235,=\245je?L\031\263?o\235\240?\326\n\344?\245\0249?B\027G>L\263\341<\346\033\257>\242\254\027?\344\311\001?v2d?N\330\310?\254D\002@XM\"?b\210\245>\352d\264=\314\022=>\037\004\301=d\260\215?\332+u?\t\tG\277\242\260k\277\202#\223\277$\354\\\277[\331\224\277%v\271\276M\275\220\277\337w\207\277>\222i\277\217\247\026\277\316\352\261\276\270\0056\277S\217\027\277\271\307\032\277\322v\333\276e;\241\277\274\032&\277\260\013\261\275\003\203\310?\345\2247?\300mN\277v\237\247\277$b\231\277\036\375\202\277z\372#?=h\004?\0253\327>\332\254\037?\317.\252?O\350\340?~\007\026@uU\323?\352\236\315?g\215@?_\335\010?\264\0275\277\035\303^\277\203ip\277\240\277\302\277\035\230\360\276\030f\351\277\001\306J\277\322\315\204\277\0021\357\2760N\315\274\226(F>2\210:\276\310F\301\274\370i\003\300\254v\323\277\372\266%\277\244P\341\276dem=\305\3014\277\241\252\"\277\004jL\2776\377\330\276\036\'\335\277F\326[\277\343\373\010\2774Os\276\005r8>j)+\277\237,\365\276`\003Z<\224\235\305?\274\205o?\340L\302?\020\320\n@J^\331?\212\200\265?\250\276\033?\220\332\320?\026\377\361>H8\303=?\010Z\2773\325\312\276\"\350\001\277\007\211\024?\020\202Q?\337\306\343>-\306\257>(\'U><(M?\200\301w?\366\334u?\314\353\321>|\216!?\236\352-?^\230\305>~\0078?\374@\226?\272X\265?\243e\215?\014|)?\"\366\324>\031\274\235\277\264\261\332\277^>\264\277\301\266\034\300\270\225\367\277Z\307\030\277\366-[\276$r\321\276\234\237\010\277\337fm\277&\254\235\277\014C\002\300\355\206\222\277\3355\341\277[\212$\300\016\'@\300\350_\216\300\214lb\300\333}\247\277\000\351\375<\177\245m\276\207nB\277\020\361\225\277\000\346m\275\352\241\331\277\220\215\034\277Ls\305\276Rk\361\275\320\357\214\275\361S{?\t\033\371>\360<`=\001g\204\276\203b:??;j?\000gb\276\236\315I\277<8R\276%\252b\277\231\371\325\2768\247\"\277\"\002{\276\032V\240>\265\323v\277~f\263\276\331\201\240\277\024\312\311\277\321\023\223\277\031{\253\277\275K\222\277&?a\277E\262\023\277\276E\243\277\2300J\27786\311\277\224\301\323\276\251\251\027?\036n\014?\271\027;?\221\\>?~q\225?2\370\010@\r\251\024@8\300\335>\264\215\204?\034<\027\276`{\303\276\330\300\323\276\000\367)\277\366g\304\277\2341\333\277\226\220\351\277\004\177%\276\010\236\217=J\010\331\276\006P\345>\306K\030?\201\216\327>\000]6\275\343\334l\276\364\215&\277\016\320\240\276\023\362\307\276\014\230\334\275\214\307\010\2760\344R\277h~G\277\222\177\350\276lkM\277d\236\211\277RF\304\277`|\244\277F=\332\277\327os\277:\376\024\277\210\276\235\2777<\037\277\336\350\252\277\212\3522\277V\274\274\277$\220\260>N>G\277T\256\220\277@\034-\276\022R\"\276\266\233;\276T\364\303>\243~\201\276z\270\252\2768:\375\276\020\314\220=J\025v\276\006\257\235\277XwR\277\226\356\232\277(l\250\276b\232l\277\373\"\n\277jx}>\3625X\277\"\205N?8\320\233\276h\202\n\275aPR\277`\235z\277\301\245\034\277q\031\274\277b\274\270\277\344\000L\2774\276\270\276\000\310b\275v\217!\276\202\222\360\275XA\222\277`f*\2757/\305\275\377\306 \276~\300}\275:XP>,\351q>\214\233\303>\217\325\226>\010\247\243\276;\207\215\277\312\201\002\276\263\351L?\260\312G\275x\r\255=\347\013\215>\374\274\030?\364dn?\"\312\314?t?\241?b\005z?\n/s?n\240\312?\017\253=?N\326z?pX\256?\264\026\274?\252\260\247?\222\221W?\222\220\001?\234\351\313\275\346D\205=8\353\377\276\334\222\213\277]\201\360\277\027!\020\300\014\t\034\300\234\322\271\277X\370\205\277`A\016\277\362^\243>\275%_\277\336PS\277\202\274\351\276\227\220$\2776G\231\276\355 \016>\222\252\230\276\320\237\033\277\036\"\226\277\355\363\200\277rT\017\277F\306\246\277|\323`\277\371:\326\276\240\237\275\273\373\220\324\276\202\366:\277\221-P\277\262[X>ad)?q\010\002\277\n\005E\277\300\2166<\354^6?{\365\210?\216by?\220\364\237\276\tt\003\277BI\342\276\"7\007>\221$\301>?\3274?\310\247k?H\221\336=n\017\017\276\350\'\236?\324C\247>@+<?\267i\010?\23635?{^\006?\330\261\'\2778\\!?f\372\270?\340q]>\024\323\234>\315\0026?oYB?\200\325F\274H\016\\>{\t\247\276\364\316\262\276\001\260\366\275<\240^\276\206(\211\275t)\023\276\330\035\321\276\254\302\235\276B\\\211=Bw\330\276\260\347f\277\035\215\207\277l(\377\275\237\031\001\276WJ\373=\271\201\004\276\244\030\223\276\304\343\004\277\3402\303=o\242\255\276\276\325(\276\236\251\026\275\264f \277\314\345\000\277d\246a\277-\000\010\300\277\243\001\300\265A\247\277\220q_\277x\003]\277\213\211\330\277\004\320N\277DE\250\277\250C\245\277\305\013\206\277]~\312\277A\362\010\300\177\022\000\300\356\377#\277B7\307\276\001r\203\277\354%0\277y\036\254\2776\264\322\277\310\273\270\276\\\370\002=\340(_?\020\000X>Pb{<:\2629?\265u_?\305wc?\000Q\323;\027\260\226\276f\207I?m\210??\240\222\021?\346-2?\267\343.?\346 \322?\247\201\217?:k\303?\242\310\326?C\305\245?\360\341\327\277b\215\314\277\326\030\230\277\006N\314\277\300\217\242\277D\216\272\277\270|\032\300\246F\020\300~\035\223\277/\354\255\277\t\3361\277\356/\n\277b\377\343\277\202\010\303\277\007\232#\277\022kl\277\232\370\312\277\235\365\010\300|\010\327\277x\322P\277j\356p\277\260F\317\277\251\233\242\277\252\037\004\277#\356\247\277g\275~\277 =\021\277|\370\030\277\230,\366=\251&\215\276\214\255b=\371\214v>\310\341O\275^\234;\277:\324z\276j\325\033\277P\304\017=\2707\364\276p$\013\276LW\313>\234\004n\276\262\307\203=t\346\231>\360\014\316>\270\265\212?\332\210s?\342=\234?5\231\236?\350\230\\?\252TX?\3318O?\370>,>\034\320\230\277`\0222\2778\370a\277\273\333k\277\252ZD\277zh\202\276\031Z\'\277\363q\005\277\n\371\037?\274h\261=af\215?\343\324f?\230G\224?\016L\023?\340\242\214\274+\252\003\277\010\330=\277+\300\005\277j\260\367\276\230h,=\003\t\251?\257x\244?\000O\252;\034\236U>/ \213\276\273\320d>\375\377.?8\322\230?\206\301\203?K\252D\277b#\243\277@\236\023\277\203\271T\277\n\340\014\277\373\210B\277\016\005\320\276\262\242X\276v\337\033\277ioB\277\226\310\313\276\025\311\217\276\244\027i>\213Q\252\276\334\033#\277\210\355^?P\262\030?\224\035\037?\326[\344>w\300\346>\331-$?_\220\013?\372`\220=7\2000?(k\'?T\032\220>\263=\257=X\300y\2766\327=\277|\247\013\276r\306\273\277\344\240\342\277~H\370\277\236\336\342\276Pl\357\276L\353T>\214\220T\275\350\271\221>X\273p?\262\240 \277\252\376a\277\356\211\206\277\252\214\245\277\254\3536\277\276\274o>` \327\274\327+\t?D5\230?\372E`>\274\352\373<\273\251\207=B\263H>\037y3\276$\326\032>\244|[=\337\245v\276\250 \224\2779T{\277\263\261)\277\373K\223\277\350m\220\276\300~\201\277\212\262\346\276YtC\277pU\030\276(3\200\277n1K\277p5\033=\010\2413\276\373s\234\277\351\355\312\276\030$_\277#\216\336\2761\0347\277\006\330i\277\315~\232\277N\214\257\277X\272u\277\204\241\376\276\262\316\207\276\000\024j9\240*I\276\251\360{>*i\004>\005\361\350=\"\260\227\274\271N\255>Q\306\020?e\337??K\316\213><\260\225>R\005\004\277V\262B\277\014g\354=Z\263\r\277\364y:\277|\035U\277$Z\264\2774*\302\277\266\301\344\277\333\321\307\277T\356\213\277\347\343\216\277\r\362\203\277x\341+\277\027:\221\277\316\320Q\276Lv\026\276\324K\201?\254\346\240?@*~<\222Z\227\276\2541\027\277\342\217A\277\355]\220\277l\032\344\276\223Q\223\277\246z\235\277D\250]\277\254\030\252\277 \216\327\277\3207\252\277$\264\253\277\025\270\017\277`v\256\276\351i\242>\324\337r\275\200\236}\277\216\325\313>\240zk?u\303\361>\306\335\326?^\217\265?\326L\254?\375\354\267?j\315;?A~\335>\300\3674=\377F0>J\375\032?\3173?>*0\205\275B\t\320>O\177C?\3304\302\275e\"x?\243Z\212?.\274\021?\307\022\026?P\rk\276\207\265\205\277hy\251\277r\020\274\277$Ui\277\216\367\370\277\035:\024\300+\n\000\300v\262\301\277\327\010\312\277\222\220\002\300JN0\300Y\351\327\277H\025Q\276\242\214\227\276\232S\233\275\346\036\247\276d\215$>d\233\220\276\360\035\266=\0106`>>\361\322>\366\261\235?T\001n?\032\314J?t\n\033?~\010\236?\237&j?B\230e?\336&\351?\360\205+@\222\336#@\204\255\010@\271\350\330?\250A5?D\325\346>\340\230\036?\203y.?\236y\337>\337\377/\276z\350\225\277|\352{\277\250\005\236\277p\263\254\277\372\221c\277R\307\356\277h\322\017\300f\213\001\300\'\023\334\277\016\354\366\277f;\022\277\226\201 \277V\374\321\276\220\231g\277\315t\271\277\264y\333\2776I\212\277\0307\213\277\221g\321>FF>?(\211^?\222.\337?4 \205>b\013\022\277\360\3733=\014pH\277\260\355q\276\024bi\276\350\020\366\274lU\024\275<\273D\277\355\367\033\277*Tq\276\335\264*?W\206\242?\340!\253?\030\362\226?>\213\251?@\311\371=4\372X?\340f\321\274\r\265\376>\260m\352\277\246\271\230\277\016\261\374\276<\177s\277\t\3233\277\340\034[\276\241\'\234\276\243a\241>\324\014\302\275m\200\022\277\344\210P?\307\360\025?\000\324\365\274\030\352\223\277\336\266c\277\231\003\220\277\350\241\212\277\346\374q\277!\026\200\276\007\322\315\276\352ka\277\300KQ<\032Y\n?\251X\207?\365\302\t\277\276*\324\276\0061\026\277_2\033\277\315\233\r?\336\212[>\002\274@\2776/\261\276a<\002\276Z\016\261?\304L\225?\300\022\325?*\n\375?&\200\273?\370\277\265?\257\250\320?F\005\366>I\211\237\276B\354\343>\354W\276\276\004fE\277\030\000\227\277\\\3535>\210=<?\362B]?\240~\370\275\350\352\273\275C\033\306\276\230\307\237\275D1o>`\216\363\276\032)\303>i\022\306>q\344]\277\2161\201>\252\375%\277\025E\377\277uZ\215\277\261j\373\276`\343\031\275p\211\001\277\302\345\274\277Q}F\277\270k\254\275E\255\325\276X\264\236>\220\3669\275AP\237\276N\220\331\277J\223\331\277\347\344r\277H\2272\276\3173\325>Z\326!?n,\302>\356\215+>\210)U\275\323\301*>\225\271\016\276\026\326A\276\314\003\"\275c>\310>j\233\006?\322:M\277>@\244\276c\372\"\277\234\2741\277\224\336\266\277\236\363\201\277\344\335\215\277\000\372\217\277\003\310j\277v\224X\277\246\013\354\276\370\302\305=\213q\302>\271\312\343>2\320\017\277\240\202\270\276\034\252\267\277\275\334\324\276`\360T\276r\235:\276\035\367\204\277\365\317\266\277\371\307/\277*\211\263\277\010\325\207\277\225\242\242\277\364\264O\277 \377n=\034\372>=\267G!> [m>\346\220\240?~\212\264?N\004(\277\260\242M>\010P\275>\200:;\274\222\307\227>\304\307\373\275\010P\355\273P\247s\275Deu\277<\335\177\276J\331K\277\177U\030\277\262\346,\276\276q1?\324\307<?\210\214\271=\264\'\234\277\201J\203\277\324\032\336>\366\312\371=\000j\245\273\275:]?\304\"\\?\000&\265=\321?\003\2770d\334<\032i \277\252\007J\276\\4t>\2340T?\276L\267\276w\t{>,\010\365\275\242\343\271\277e6\026\2772\025\300>\362\210\223\276n\214c\277X\360\245\276\304\236\240\275\022G\226\274\013W\370>\014\032~\276\014\355\005\277\312\312d\277ZB\021\277z\205\262\276f\200\214=\330\333\214=V&x?\225M\203?\240\3167>\200\305\004?\260+\211\275e[[>\262\032\246>\220w\232>\007<6>I %\277*c\337\275\324p\234\276($\322>\014WA\275L\224I\277\362\252Z\277\246|]>\"5\221>\023k\203>\343 d?L]j?\322\306\343>\242\302/?\303\357<?\3027B?\252\000V\276BH8>\022\r\014?\203\270=?\\\242>?\005\344A?\\\377\244?\272\255\001?\000\263\261\275\242\341\n?\000F/>(\220\316\275\224e\023>\205U(?P\257o?&hf?\270-\277=L\216Y?\204\033\247\277`(\006\300\312\005\241\277k;\000\300\"#\255\277Q\205\236\276\220\343\362\275\262\254w\276\322g\000?\004\017\343>\0207\265>H~\026>\316;\373\275W\023\301>\304\n\006\277L\270\'\277\262to\276{S=\277\227L\356\276\262\032+>\364\355U\275\350S[;\233\217;?\220nq?R0z?\371\207\253?\010.\251?\240\305\254>\326\350\t@\006R\037@\030\325\327?\2727\266>\376{\236\276\341P\332\276y\246\330\2764\t\030\277>\245\203\276\004V\023\276\341W\206\277\271\325E\277\342\323\032\277hp\305>\352x$?\327\202\204?\220Si>N\201B?\022\321\247\276N\235&\277\254\335\026\277\217\357\245\277\035g\230\277\315\0268\277\310\255R?\314\007\311?\332\301\250?\364\271\352?G\337_?~\206y?\200\204\r=\372\0343>\366\361\002\276\247]:?\356\364\346>\370f\'?\035\262]?\336\202^?v\345\n?(\023i=\034\352\346\276zy>?(\333\367=\200\007\315>2\0379?\260H+=\220\233\t\277P\311\234\276W)d\277\33463\277i\257\216>X\035\220=\372\022!?\366N\227>\024\311\344=%\003\331\276\336\252C\277\240\340I\275J\352X>\027\236\254?\200\267;?\265\215z?\363\312\355>\324X\357>\270\302a\275g\026-?\232\220B?\355K\211?\205\252\204?\370\365\333\275\307\311i\276\034\331\036\275\000\234\205\273\035\313\266\276\257\223\317\275\315\301\360\2768U\275\277\217\246\307\277\233\273\266\277\216\231\353\276\006\230W>F\360^>\222C\371>\274\002u?\026F\024>\352W\343>/\004R?\035\221\242?\300\344\356>\337\311\312?\302\370\344?\2645N?\250\340\027?\301\2178?c\202\005?W\007w?\354v\230\277\260~\225\275\260\034\330> \216\362\274Z\375\312\274\341\226\202\276\341SO\2772\246\357\277xS\251\277\241A\271\277o:\221\277j\024\300\277F\307\367\277\3060\272\277$J\001\300\3359\033\300(\310\311\277}\277\205\277\256\343\226\277\256\355\376\277\202\377\031\300\3056\234\277\023 \366\276\306Q\222\277\306\332\272\277\025\202\225\277P\020\000>\215\222\023?\210\"\353>\362\227\243\275\003y\202>0\023\353\274zD\030>\220\336\177\277\246\3200\277\301\345>\277\030\223\177\277\302K\t?T\t\300>\346\327\372>\215\354#?\236E1?\020GF\276\256]l\276i\225\342\275\004\'\226>\327\313\306?tM\n?\215\320\251>\202\341|?\236\272a>\267\221\305\276\355\325\032>&\224T\277t!\010\276\271\200\016\276\356\350\345=\247\332\273\276\241u\336\276wL\277\276U\0214\277\270\200r\277xq\314\2776^\001\300\034[\026\277\211:\233\277\336eg\276\270X#\277\374=J\277\267\350\203\277\262\254\302>\240o\r\276~\272|\277\256{\262\276\224\201\303\275\016Hx?\325^m?n\201\272>BE\300>\000>\354>\204\321X=\276z\240=9\034\213\276M\323\236\276\222n\234\277\374\362@\276\273\240/?\020MW\276\372\033\322\2760\355\245>\350\203\366>\344\222}?O\006\221?\365\256e?\363\262\001?t)\253>\340*\301\276\364\353\003=\220e\007\276Dk\216?;y\331>\376\267\232?\233\002q?\360\017\333\2751\013a\277\350(P\277\216\225I\277\t\321\323\276~\301I\277[\256\221\277\330eO\277V\2607\277\230\2206\277\372\223\223\277:\354\363\277\271ej\277\351\020\205\277\220\032*\277\264yS\277\t\311\234\276\275y\336>\372\306/\277\024\243\343\275\345^>?`W\321<\324uH?u$=?\212I\350>\020\001\337<P>k\277T\232m\277\273\030\237\277\347.\235\277\320@\221\277Z\222\220\277\272\331\365\276\224\003\305\276{C\206?\350\020->\352\271\341>\000\024\331\271 \207U>\3113\016?f\207\"?u\005U?\021\333\013?\010\336l>\0337\267?N\265\001?\327\377\275>\354\347\371>\364\022\200\276\254H&\277\020\203\322\276\260e;?\364J\016?\213\303\325>J\374\312>\000\206\211\272\214\032\370>\312\005_>\\\265\375\276\246\333\017\277\352\351\341\277\302\304\324\276\377tr\276#\'[\277\310c\021\275\267\201\004?\354\010@\276FvX>-y7>\202\244\372\276\303%\211\276\230u\355=\254\215\243=9\274\357>f\306\221>\334\025\005\277^\353\034\2778S\007\277\024\036%\277\340@\366<\034\207\370=n\005(\277\034[\262=\325F\340\276\014\020s\277x&\204\277\020\263\327=\272L\016?\374\377_>w\251\346\276\230\252\024>\013\367-\277>\376R\277\340Ea>\376&\317\276\265\r\340\277\323\231\362\277\322y\213\277\363b\377\276\323LZ\277\014IX\277Tj\311\277\270\024\220\275\375\322\201>\376\337 ?\227\327p?V\322_?\255\311G?!\n;?\342\323E?(:o?\254\262h>D!\007\277\350\026\371\277\006\t\007\300\221>x\277l8\270\276\343\016\355\276\376\027\r>w\227y?\276\214\343?z\3526@^\346\241?`\000\247?\347YJ?I\025#\277\260p-\277\265 d\277\216#\212>j\256$?\272f\030>\215\304D?:\325\351>f\366\215?\250.)>\233N:?\036\374\322>_\271\311\277\360\213\027=\316\r\024\277l\233\212>\367e\027>\252UX=~3]\277\320\266\362\277PN+\277H\032\256\277\014W\310\277@W\001\300M\273\007\300\240\214\327\277j\363\010\300\272\231\241\277\016\\\266\277\312\331\372\276\240\262\024?f\375G?b,H\276b\333\316\276\352\361\231=\265\254i\276\240\017\232\274\220\371\177\277\215L-\277.\206\270\277\"y\000\277\320(^\277fh\201\277D\030\251\277\000tb\277J\316\220\276\260\336\215>\r\341^?\023\312`?\225\210\201\277[\246\203\277_9D\277\366\322\301\277\'9\276\276\340\377\355\275\312\034X\276\034\312\020\277@\325\263;\301\020\345\276f\273\007>\270+\014\277;\n\030\277\274B\306\275\\6\364\275\362i\362\276\261\363\031\277N\241\030\277\304\251\243\2778\250\313\277X\037\252\277\371n\246\277\363\373\226\277D\232\355\277\030\333|>5\tT>\325\343\224\276R\336\231>\2734\371>\266\r\201?\212\321\226>\300\310n?H^\223\275\236\306\n\277\016\246g\277t\375X<s\031\217>(\033\206>\034\347\261\276|\202\005\277\024\214\024\276\215\322F?\276{O>\266~4?\366\370}>\010;h=GCz\277\031U\303\277\373\232x\277\0311\346\276\334@\214\277\271m\237\277\250\324\244\277\375\006@\277^\004\234\276\277R\\\277\000\350\022:>\246\210>$\316q?\323q\255?Q>\020@\206\250\031@X]+@\302\205$@\272\325-@\356`2@\nUL@\0334U@xy2@\024y\030@\324\201\036@\207G9?\242\265\021?\362v\211?\212\264s? \372\321\275\254?3>t\207\260\276f\315\363\2764\271\033\277\276\2747\276\033p\231\277\326\323\267\276\270mZ=\224\221\014?9\337\013?\240D\257?=\222\246?\352\036\260>\306\315\305>\204\365L\276#\206\344\276\316I\321\276j\322\205\277\255k[\277\314<7\276\2077-\277\260E\356\2743\253\256\277\224\002\275\277\320\321\354\277\312\334\252\276T\355Z\275\207\271\374>\252\352\322\276R(\203\277\336\266\260\277\200\336\005;\2644\224\274 \273\351>\273\207\237?\3001\215?D\241\206?\320\rr=~$e\277\264\\Y\276\017d8?\330\301Z?\234=3>b\242\256?\034\362-?\215\021)?\202\336\346?\274o\257?j\021\243?\231\311\244?\024\004\224?\206\014n>\260\242\001?\216\320y\276\224^\367>\316\255#\277\330\351\254>\351\257\300>\020\213\232?\242\210\267>\330o\254>\265q*>L\204\334<\225|\357\276\004\354\034\277\336\266\231\277`\210\201\277\253\014\373\276>\016)>~-\351>\350\255\250\276\020V\304\274\354H\206\276E\004\265\277\033\373\305\277\323M\226\277C$\310\277\200\273\n\300D\357\215\277\272\322\366?\363i\026@_3\342?\365V\341?\030!\211?\\\334\354>\2656\267\276V[3\277\366\251-\277b\325\202\277\265M\177\277\257\260\343\276\217<\277\276\0107\350<@\204\202?\376%\223><\223\231\276\255\210\321\276(\364\020?a\361f>N\235\376\276\370jy\276\342T\252=\222$P\277\240\351O>\366\213\340>\260n\352<\025\264\022\277\322k\373\275\3604\262\276Y\310\231\277@\306\221\275\330\326c>\325\255\303?>\206\332?v\021y?x\265\364?\242\265\341?\344N\336>\303\334\031>@\371@<\334\210\003?L\317\353\276\304\247+=\245l\255>\366E\236=\316$\340= 1^?$\321\335?\214\344\036?\201\327\355>\334%M?2\312\267>T\237\276\276[\261\232\277\322\346B\276\020\243\004\277\224\277\037?\3417\254>\203\026\031?d\217\367=\330v\225\275\352\003\325\274l\366\006>\002\222\021\276\224\301\226\277Y%w\277TJ\252>\312\3722\277n\226\335\277\300rz\274\377qq<\234\225O\277\033,\004\277\3140\210\277\243q\357\277\354i\203\277\021\023\334\276\360\323[?\360~\264\275\276s_\2769\300\262>\244X(>\242\340\013\277\034\316\360\276\350\030\251\277\270\207\211\277D\341\262>\020\374\005?(m\223?\212\215\370?\2650\371?\344\335\321?\343\311\256?\214\243\313>\264)\212\276q4\244?\320k\">\323\224A\276n+\006?\356wK?E\213\037?\303\257 ?\014\360\226?Y\003\353>\330\227\315=\272\024g?N\244\317?\\\244D?\204$\n?(\364\016\276\346)\023?\264\311\230?`\223\230?h(\n@\017\360\351?\3548\202?z\3073?~\313\204?\021l\245>Z\351\221?\235\301S?\004p}?\300G\335?F\006\241?\230\357\037>o`\016>\373\262S?\230\003,\275\324\233\363>\033\201\035\277\302\222J\277[Z\023\277|\265\031>L\210\325>\377\210\304>~\2360?|#/?\241\026\315?\234\315\321?2\306\320?\311i\364?\230jK?\245|I>P\263\207>F\3112>\347PU=\221\023\016\277\003j\032\277x\3537\276L\303n\276\354\331m\277R\303\342\276\350P\244\275\200`\300\275p\370\230>?\263\310>\210\n\320=>\343w\276\337\200\221>\243\217\205\277\0220\301\277\260\267\003\300\310o\272\277>\270\246\277\207\264\216\277\300\200\022\277\nRr>\367\246\204\277\321\2415\277@\244J\276\314\232\004\277\362i\240\277\254)0\277\324\255\177\2773\365\221\277\274\364a\277}\235\037\277\3641\232\276~\002R\277\0301S>\311\245\311>,]M>\225\3016?\231\227H?\256\005\023?N\034)?\010\373\005\275aV\010\276\302\014\331=\2006\350\275)4\037>|\352\200\277M\221\322\276\373\224\310\276`\337\217\275\244qA\275\244\374b?\t\262\360?#t\327?\213\262\356?i\355\341?\021\036\265?\260J\265?Yd\330?RO\375?\307\344\346?DV\002@\340\033\234?\026\"P?q\316\225?\231*\261?\246EK?\000\270\003\274\'\003\237\276$\355\215\275Fq.\276;i\333\275\004\022(\277\356\235\351\276JE\027>PQ\032\277D\213\236\275j\322\375>OC\210>yp\000?\036K\315?*\3126?\231\254\372>*\222\225?T|\250?o\373\372>\203\353\032\277P\3125\277\316\245}\276E\"\274\276\306\2661\277\220FV\277\324[\344\277\344\321\270\2772\311Y? Y3\275\265\376\027>6\017\330>\366\346V?\t\013\205>\3029\317\276@^\367;\347\353B\276\261\277 >:4Z?\030~Y\276\017\344m\277\t\320\230\277\275\0201\277B\374w\2772S\212>\344\006F?K\332\026?\014\321\226?\346\356\266?  \225?\370\341\204?v\251\201?\240E\216\274\313\326V?\327&\343>\032\216s?g\270(?N\250\000?\305\255!?#u\203>\220\300\265\276\322\257#\277\016n=\277\320gP\2779J\010\277Bu;\277\204\\\327=\340\3609\276\375\000\200\275\305\212\256\276\276\333/\276\234\203\207\277\240Gh\277\334#\275\277\020\272\017>\007*\273?h\002\365\277\202\351H\277\342\236\302\277\020\252\266\277\264Y\037\3002k\313\277\237,\026\277\327\350c\277\024\251\230\276\r\345\337\276\"4\361\276T\t\206\277\232:\246\277\356\236\346\277\210\257\325\277\017\037\340\277?<\266\277\332r\271\277h\310\034\277\302\341\304\277\262a\352\277s\237\343\277\210~\241\277S\021\342\277\225.\014@\221\317\035@\264\255\003@\204R\240?\206Vy?Pj\331>\367\253\334>\263\256\247?M3\023@\217%\014@\344,\013@\233{\030@\370\277\231?z\255v?\022\207\267\276\355b\003\277Zqj\277\220\343\254\276\200.#;\"\326\363>\022\247\330>\340H\326=\213)J\277\207\355{\277\332\264\201\277\014\233.\277\336\272E\276F\323Y\276X\263\274\274\2515\324>\274&J?\252B\267\276\360\003\004\277\351\230I\277\250&\r\277\234\030\213\2774U9\277 \305\257\275\2477\360>|\202\212=\225#\215>H\374\036?\372\274s?\310\177\221>\205)\246>\366\244\262>\211\201\223>N6\302\275\026\372\240?\030IV>\n\"\\\276\005\231\353\276%/\256>\204\324\240\275~\227\255=E\245\003?\002\\\027\276\252|\254\2768\023<\277\030d\233\275\020\2116\277\237\230\334\277\002\367\211\277&\240\003\277p\271\t\276\030\r\363\274\210(O<\344\t1\277\000\374\000\277\250\271:\276!lB?03\331<,L\371\276)\216X\276\013\351\271\276<\177\020?\242\203\316=\341\323%\277\220N\240\277\033\237\220\277\322|\032\277}\373l?\220~\250=\317s\033?\346\357\215>z+\203\275\205L\230\277R\317x\277~\276\010\277r\354G\277\3671\375\276\300\032\376\273rV\223=B\253\277=\376\020\367<\213g/\277,b\237\277h\020\301\276\254Z\220=\306\274M>\324\242\024?\2227\222\276>\261\271\276F\034\001\277N&m\277A\311,\277\246\276\237\277\000\2361\277,|\032\276\260\234H=\364\212\211\277\026~\262\277\302\035\256\277^1\374\276N5\213\277\226\226\036?\207\370\255?@\245\236<\346 #>\374\335\242?\215=\002?\000a\226:\210]y\276\243\377\001\277\3328\261\276\206\346e>t\305\337>\362\226.\277\311_-\277\250:\026\277\3468\033\276+[\203\277\260\241\243\277(\004%\277\223\010z\277 \321\263\274?\007\262>j/\202?$\324\277?[Z\n@\356G\323?\364\261\273?vD\333?\247\375\235?\220\341\302=\010W\355>\036K\262>\230\273\350>`\274\017\277 \276\201\274\326C\026\275\332@\273\276\212l5\277\032\231Q\277\007+o\277+\350M\277\304\216\005\276g`\014?\330\314\200? \006)?\251\351\245?\021\315\257?N\304\354?d\356\203?\342\352\261?\340\356\272>F\300\300\276`u\'\277\346\366\257\277\023\234\200\277\336.\374\277f\265,\300\005\214\026\300\344\037\231\277\\\033\322\277\272+\010\300M\267\302\277\030GS\277(\025\226\277\220\226K\277-1\237\277@\010\320\275\366\277\024\276\340\264\362\276X\373T=\324VC\276\310l9\277\236\264&\277\206&\306\277\'%\000\277\327F\037\277$|\307=Ss\007?^Z|?\223n\227?H\227\314?\\.\331?\371!\010@0\016\017@\263\266\013@\330\311\306?\2011\315?\240\202\347<h7I;\332\004\301\276V\337\031?\330;s\276\346u\375>\206a\023\276\027\333+\276 7\316\276\254\177\203\276P\263b=\364b\313\274\247\212\'?\246B\004>|\237\245=\364JR\276\355]}>yW\200>\250\202\302>T&\\\276\370\224G=\247\332b>b/r\276#\351\233\277\200g\301\277\256\000\202\277\236\333\244\277\365E\200\277\335\255T\277\211\231\322\276\253|(\277\322I1\276[\330\004\276\0165\362\2768o\016\277\006\260B\277\020i\332=\000.\236\273bX\253\277`v\261\277X\010*\276\000\333`\276\364\376v\275\341\013\254\276`6\263\273\254\373(?O\356f?:\271l?\010\033\025>\220\237\324>}+\034>jD/?\034\332\217\276\237\031\310>N\370\n?\002\032d>\327\255\237>~a\n?\2277\004@\032\223\023@\004\223\265?X\010\222?,\2020\276J\022\346>\3719$?\240\347v\277\022\226\201\277\224>\312\277\231\035\017\300\224d\372\2770\256(\300\361\006\007\300x]$\277\n\356m\276\n]\'\276\323\241\213\276\216z\335=W\312\020?0ZP>\360T@?\316\022\037?\342\327\226?\242z\261?\316\222\021@\370\352\273?\000]\357=\242I\226>\322C\317>W?\242?\204\320\300>\020\321\315\276\330\323\271>\326,\202?l\022\007?\242\306o?\226\253g?\200\352\023=\367&\251\276Ga)\2776\006\213?\330\2647\276`?\215\277\302P\222\277(\322\263\277\351\'\221\277X\270\265\277\036VZ\277r;\216\277\354\212\252\277M6\241\277\301hq\277\323\335\276\277\202\245\326\276x{A\277|\3142\277\364/\231\277\nVm\277.\267\230\277\235\317\324\277\302\026\014\300$\307\013\300\002\372\014\300\321\233$\300}0]\277\266\211)\277<\325\207\277\320\366\035\277\001\354\353\276\346\\\222\276\334\356a\276vC\207\276\364(\017?\274\201\223?\312\364\017@\316\265Q?vc\252?Z3\250?\362\357\007?S\177\320>\245\0346\277|e\000?y\376t?\274\237o? o\034?\257\247\337>\301F\321?3\344{?\204\226\275>\230)\220\276\216\027\213\276\2202\201>\251\345\241?\0257\034?v\262v>\332\230\345>u\310=\277\222X\246\277\315\205\313\277~8\350\276T\302\014\277\340\277K=yCv\276\222pT\277k\265;\277\231\207\364>\240\315\226>.E\'\276\320\230\006\277\331\273\371\276\230U\202\277Gk\253\2775\000\301\277<\341\014\277\350\032\252=&aa\276\250\2727\277\316U{\277\333\374\273\277N\366\277\277\324\301\340\277\240\017\207\277\036S\032\277mo\347>^s\020>.;\263\276p\024\274>\007\347\231?P \262?.\225\017?\306\240\304=\234\322\000>`\200W?\325<\203?E^b?\025\235\325>\357\276\037\277\264\271\353\276\322\270\215\277\262\"\313\277\253\232<\277\'\2202\277\n\303W\277\370\016\376\277\330\306\332\277\'\035\302\277\201\037\342\276\340;\205=\234h\342>\006\316\214?\020\346\351\2756\311\362>\022z$\276\254\034U\276\013\265\211\277:\225\024\277\262\243\013\277`\312~\2752\255\361\276\251(\265\276\300\263:\2770\363!=\337\373\234?\234H\354?9\345\221?m\250\217?lJ\320>\320\003\014>Z\223\244\275\311d)\277@8\032<\000\340<:\277\007\212?v|f?^E\235?\264\262\276?\341_\302?\216\274#@\321\370\333?\270Zr?\372i @\236\034\347?\342w\005@X\202A?\340\332\222\275;\266\230>\366\374&?6E\212?\304\201W?\200\013*\276\256+\315?\365\241\370?<8\030@\032}\333?jb\202?\314\342^\276\305~[\277\250\276\004\276\311\254\352\276\356o\000@M\325\267?\035|N?\004\371J?s\214\017?\026\003;\277\352\016U\277W\325\251\277b+\271\277\334s\373\277(\367>\277\3462\244\276_\035\301\276\262\215\010\277H3\\\277w\210\215\277\323`\257\277\232a\266\277\252\301\361\277\246\022\353\277~\006\267?\"3\244>y5\212>h.\326\275\243(\005\277&2O>\226_\250\276t\371@\277\233\017\317\276\332!Y\277<{\301\277\351\267\221\277\355<\261\277n\032}\277\230\233\025\275\2731\374\276V\345E\277\2331\314\276\350\313S\277\353@]\277\217\352\366\276FIG\277S\307\232\276<cd\276B\365<\277\233!l?\024P<>\370\355\221\275n\263[?|\347\264?\315\026\255?\300v\315<\264z_?o\"\020?\233\3250?D\346\027>\310\262*\274\224\344\344>ZB\"?:\001P?\204&D?\034=\033?\304,\322?}\270R?\260A0?~C\277>\265F\240?d\357\362?\2136R?O>\n?\3604+?v\231\223?8T\206?[\032P? :\303?2c~?\205\355<?\246K\211?\277\214\226>\002\027J\276\265i\020\2776\233/\277\226Q\243\277\234\0243\2778\343w\277#\251\224\2774[\233\277\000\200X;-\224M\277\216\323\331\277R\267\343\276\214\361Q?\255\024\305?\261\204\232?\343.\257?\234\254\'?\310\332V?\250\263\307?\365d=?\231/>?\020\227!?H5\240?\007\366:?\370\231\201?\263\376\333?>\'\000@\303\023\307?$b\017@H3\013@9h\021@@\216\247?^\002\246>e\r\244?z\037\260>\211\253\010?N\306\245?\000\325\021\274\036\342\263=\324\202\254>\264I\003?\314,\232=F\2772\275>\234<?\330\214\323=\016\376\200?\335\253B?\006\333\325>\242C\025?\233_#?\0001\243?.-\302?\003\203\261?\030\264\206?\200\235~=\031\326\221\276L\355\244=q\276K?\360\211\332=Gk\216=W\352C\277y\020\001\277\024\032\320\276\210i\022\277\250#\230\276i\214\315\276@\265O\275\335W\200\276\020\005\016<u \002\276\250V\032\277\314X\r\277|>f>\255=,>j\361\263\276\024\323\303=\266\2451>\2440\227>\3676;?\252\233\374>r\016d?\270?\r?\032\303\n\277\366\242\001?\234\336\305?\352\032\262\276\026\270\375\276\016\362\201\276\345\340\000\276\317\034\261>i\014\002\277\311c\264\276\337k\206?s\260l?b\206z?\227\245+?\261\336\237?\330\265U?\200V\221\276F\341\212\275,\246\332=8\035\330=\301\237S\277 rd\277{\301\370\276\337\257\033\277>\026Y\277K\246D\277\260\355\200=\016\212\227\276k\206j?\352\201\266?N\370\254\276\021U}>d\356K\2757\231\217?\206N[?8\254;?\n\252s?\010I\360=<\325\211>\020>\232?N\330\031?\376\230K?\000g;?\365\276\312?\005[\320?\254W\025?\017\341\016?S\254\323>\210\273\276\276P\302 =ba-?\223*\312?-\200\234?v\350\214?L\363\024?\302\273\342?\002f\210?\221\360R?\n\027x?>\032\344?F\276\224?\332L\345?\214\310\311?\353\350\225?v\035\274\276S\357O\277\220\305O=\322\233\323\275\033n\030\276\020\245\200>\261\"+\2768\246\261<\342\300\014\277\312CQ\276`e\024\277\017\020G\300\342\006E\300V$\036\300@A\016\300W\234\001\300NG%\300\r\321\021\300\352\302\354\277\256\240\356\277o\237\252\277\361\352\246\277\300\215\277\277\237f\204\277)\222\013\300\212\347\n\300\r\200\001\277\360\250\033\277$\236\241\277\254bT\276$\0053\277Xn\275\277\3001m\276\364\232:=%\017\007\276\2029O?j\004Z?\344\350i?\002\224\244?\352\017-?\312V\222>\022\177\331?\026\325\006@\256\363\207>\335\023\216=1\204\272\276\235B\234\277\022ou\277!\017\357\276\211J\312\276\r\242\322>\305E9>\006 |>\022\224\205\276\3372\277\276\354\354\036\277&\217\021>\2501\265>\245\360\207?\356\221\271?\240\356S>\362&\006?\375\202\306>P\026\350<!u\026>~\372^\277\220\3007\277\203\344M\277\372XI\277\277\'\310\276x\rJ\277\360*\310\275\001S\250>\005O\315\276@\013$\277\351;\251\276\312\353\354>\305\230\200?\364\271\233\276\272\277\232\277E\016\003\300\007\035~\277Ni[\277VhI\277q\304q?\304\262\327>\216\220\261>\274|\301\276Gj\211\277\026\230\312\276\240\323,?c\342\345>\212+\'\276k/$\277\262\216\310\277\344y=\276=\356\205\276\212\243\201\277\263Q=\277\n\234\326\276\232%i\277\"\300\001\277\351\271S?O\341\320>\376zT>\360p\000\276\013\242Q?\020\207\335?\354\362\364?F}s?\354\315\223?\246\207\277?l\365\252?\016\t\224?\302]\253?\342\222\004?\001S\023?\360|\360?\030\200D?\231u\272>\2424\215>x\000\001\277\226\2253\2766\215K\276\nmj\277\000j\343\274\246\235\344\276\310\276@?\242{\344?lX\352?\2102\230?B\370)\300\356\224\007\3006\'o\277\021\365q\277\214\003\031\277B\256\010\277\320\351\224>\000\214\200= 5\327=\014\337\362=\214b[\275UH\305\275|6C\276\317:~\2770v1\277\260=\227\277B\255\345\276\332\356\227>;\214>\276\366\215\216\276\316k3\277\232\030\312\276\320\022\323\276b\354\300=D\336\010\277ZQ\247>\342\016\003?\316?\304\276\365)\243\277\361\237\243\277d%\370\277\234s\215\276_\217\356\277V\363\036\300\202\r\037\300\232m#\300\n65\300\252#\025\300\315\352\313\277\026\347\025\277\026\355\236\276Y\020\246\276\351\273\226>~L\'?\000\027V\275\177\273V? &\213=\201_*\277\343\364\272?s\253\336?m\215\211?\327\323\261?\306\323\366?O\240\220?\032\264q?0\215\261>\205M\202?=\326\352>H@o=\370\023\230>\266WR\2772\333\255\277\350\237=\277(B\267\275\252\377\263\276\312*\226?\227\2352?H\n\254>w\265\215>{\367I\276l\334\027\275*h\256\276X@\256\277\254\357\254\277\320vv\277\362\334\371\276\377\263\332\276\260\377\266=\252\272\007\276M\202\276\2773en\277tfV>YZ\302?\210\336\274>\366j\307=\362\275\266=\022\261\372>\314y\034\277\361\270\206\276\253S;>G\361\316?@\307\331=/\205\027>\000\354\372\274\270\0276>\021&1\277\240\000\202\277\271c\202\277H\376j\277r\256\325\277E\033\323\277,\347\337\277\250\024e\276\352K\232\276 @\360\274\224*\357=\374n\356\275p\004,\275q\210\351\276\000\355\322;\314\374\006?\n\361)?\001(\212?\223\245\233?\244f\035\276C\367\035?\3144\255\276nZ\377\276v;\002>\310\352\307>\020\001\334\276\360\326\215<\244\325\036\277|x1\276\330\267\207\276\2520\277\276\3462\345=\232\226\351\276\313>\236\277\036\212\206\2770\356\357\2778d\353\277\0269\267\277P\031 \277\234\326\220>:\266\343>\272$\024\276\276\3660>\276\341\364\276\314\375%>\000r8:et\303\275\346\000#\276\362G\251>\325\327\200?J\013\010?\260\336\326>S\357V\276\254\277\337>6\001U>\233\036\376>\n\022\210?\034zv>T\033S=\354\376\272\275upO\275\324\352\337\276\214=\302\276\"\232\331\276\021v\306\276t\026\\\276a\212p>u\235A?b\033\303>\220\'\"?N\006\202>\362I\345>n\304\'?\371)\367\275\"*\247\275~~\212?\\\367\344>\346p:?\363F&?$hj?\210\277\306?\227R\221?n\260&?\032\334\363>\036!|?\326\035\316?>}\274?\244;\016?j\r\024?\275(\014?\275\242\237?]\177\201?\224p\214?B\260\230?\205\031\200?L\010 ?T\250\262>\035g\016?h-\300>\340\235D?\346\266M?z\373\025?CX<?\257\265*>O\222+\2761\334b\277\336\3106?\340\273\244\275\330\370C?*\316\210\276\024\264\330\2754]\032\277\304\304\333\275 \"\326\276\030\033\010\275\307rE\277@S\263\276\320{5\277\270\205\250=\304\215\266\275\306\022\266>\330\316\224?\355\224\266?L\236\227?\326\0161?\261\353J?Z\247d>p\2515=\222\377\016?i^\225>\244\226s?\264%E\276\033\217\211>D\233f> \347\210<\034!\211?\257\313v?t\321\253=cC\203\276\"\262\261\276\0279n?\352w\306? \213\'@\027V\311?\230\251\267?.\234\225\276\332\376\204\277rW\306\276\231\013G\2774\214\222\276\272\370+?\3008\273>\002\227i>\363\004\221>^\265:?\236\264Y>\237)\025?x\210\227\276\330\273\r?2n\371>HV\246\276\006\363R\276\024\364\235\277\255=\210\277\264\353Z\277[\226f\277\254\303\262\275\036^!?\254\2428?\244g\265\275&n\032\276.sW?\30023<\241C\302=\271\177\274\276\246\027\023\277\226\014>\276t\300\357\276\n\203\034\277&\014\320\276V\302\350\276\274~3\277\274&\206?H\344\237?\372\017\334?\004V~?\014\202\355?\\\t\266?.\352\345?\030xf?\306\356\265?U^\037?2q\032>\220\026{\277\367<\205\277\020\022Y\276dfd=\331?\236\275\300oh>\342x\026\277*)V\277\354S\240=\r\220\224?<B\001@\323\030l?\026\340\255?\260\304\340>\374\350\324\276R[\004\277\2711\217\277\213\221\261\277\356\265.\277X\325\265\277\020\226a>\200\311\004\274\336?\205\275\320\214\347\275\312M\257\277\243u\346\276\360\350e\277C\2712\277@\373\227\275h@\224>\177\262\032?\177\023\223?D\203P?\304\246\224?(\236\334?S\323\007@\203\354\340?\251\240\364?\334h\277?[\024\272?\216\021\213?\025l\230?\356\017M?H\374Y>\2106\216>@\300i?\354\306`\276\232\245%\277\261b\"\277\260\344\222\277\322?\010\300a\224\240\277gs\207\277(*p\277\341\263J\277\232\331\324>\372\310\247>$\230\335\276\027J\271>\224\004\213=\030R-=\"\347$\276D3\204=J\242\256\276q\335\236>\224Q ?\224\264m>d8.\2776lT\277\'a>\277\234\346\026>\272\354\261\276 OM?\353\241\310\2760\321n\275NN\227>p\177\364\274I\347\242\275\023c%?Ne~>\006\325\013\276\370\271Z\277x\346\247\277k^o\277\n1\204\277\310\005t\277m\267|\277\334\227\302\276\357)C\276r\345\271>uQ\021?\3008\235\274\3415\030?\312:\027>\262\204\235\2764\3578\277\360 \360\276h\t]\275\253=\262\276\374\330j\276fj\242\275\036\225\365>\240\315\270<\2322b\277\320\223{\275n{\237\2756U\245>\225T\034?\025^\366\276,\335D\276\340:z\274\203\271\235\277W0\343\277\325\370\233\277\014\252\033\277:\255u\277\031\307[\277\033\232\207\277\251\374<\277\251\375\224\277<\312\241\277\311\337\022\277APT\277R\371\005\300\224\353#\300\354\335&\277\024\226\340\275\311v\342>\356\214<?\326\016\213?N\221\310>\276\314-?\226S(>(B\306>\301S.?\362\262\361>\256\216.\277\272B\243\277\224o\303\277N\227C\277\373\362\266\277\332h\307\277D\322\017\300\000\005\034\300\246\022\317\276b=.\277\274\210z\276\000\320&<4\371J\276\027t:\277>\034\236\276\332\002\350\275MX\367\276$\221\332=\\\327`\276J6T?\2647\203\275g\016\017?8\n\026>\032;3?\025\344K?\000\010`?Z\353I?H\303k?:[\220>\270\277F?o\006\301>\235\322\005\277\026\370\224\277\014\346\223\277+\211\262\277\241c\275\277\343\022\252\277\200\222\257\277\222\205\236\277G\037\210\277:\341\253\277\034\215\030\277\264\375q>\333\026t\276I\256,\277\241\322\003\277\013\305`\277\217\\o\276\331\331\304\276\210. \277Z\t\263\277h\307\306\275\341\233>\277\232\017&?\326\000(>\004\r\257>(\264\243>\210I\241?\224\326.>\252\322\213\275\350\315\016?\276L\301>o,\023?\3663\206?\305\262D?\355\323\030?\013\315\275>\253=O>qn)\2774.^\277\352\343H\277\"\005\274\2776\347\320\277@\\\275\277\344\200\001\277w\327\360\276\2407\226\277\014\301\265\277\321\252z\277\256\tk\277\3216#\276;N#\277\310\303\023>\215t\027?4\272D\276\2200\244>I#\206?\362O~\277YC\030\300\360\007\003\300\320\315\372\277\362.\275\277n4\366\277\007\020\230\277\250\337\201\277\204\270\354\276\'l\261\276\212\0275\277{\305\276\276\202\246-?L\244\214>\332\277p\276\204s\006\276\205\243\265\276p\272\206>\223\235\034\276\2734\021\277\246\243\231>P!\355\275\004d\224>H$\225<\206|\246\276\336$\026\277\356\006,\276l\353\317\277\356\364\326\277G\037\232\277$\030\016\276\226&\255\276u~.\276\025V\017\277T;0\277\201;7\277\0000r:~7\251\276\370T\361=\010K\201>\234<\271>\223C\263?\337\301e?\200\251$<\265\016\263=\200\264\202>B\\\231>w\201\202\276@# \277\314\027\330>,1#>\334\247$?\2733\213?L\365G?qy\204?\244&A>*>\007?\343\227\017?\202@y?\214\004\233?\244[\010?n\242[?\272\346\215?\270t\267?\220\0029?\344\037]?\271\316H?4=b?wbp?\307\205L?\0138m?\'v\223?P\007\307?\034\212K>t\027$\276\200q\251?\224\026\330>\334M\265=\177\240\256\276Tn\254>j\366\211>Wz\006?Tbz?\305\266\234?\372\372\311?\236\256\235?3\302\227?.\371\037>\276Z\200>\362D\355?|\"\202?T4v>\245\315\232\277AHm\277D88\277\262\266?\277A\3013\277.\360\203\2775cD\277\310\r\022\276\374\375q\276\246\331\032>\240~\021\277|\004\216\276\373]\364\276\256])\276UG\\\277\375\033X\277cs\232\277\373td\277.\007\332\276\370V\232\275n:\245\276\266\262\262\276@\333\324\276\254\270\345>\266\342\305?j^\013@]p\301?\306\013\370>\375 !?0\277X?x;q?0\220\302\276H\235\371>\202\252\r?l1\253>\330k\"?\020p\217?\372[G?-\221e?_\256\205?\315\343\215?\3234w?\323o\317?\225t\204?F\222\221?\n>\272?\352\255\305>\234\315\303=\021\244K\277V\241\213\2778A\253\277\3244\216\277\220\344\262\276\016\343:\277\"\241\t\277\320\2656\2763\315@?\324\373\225>o\226\263?\344Z\202?Hx\212?\\`\301?\312/\320?\242e\321?\020}\226?\256=s?l4\327><\242{\276\255A\201\276Z\226\037?\000\322\307<|>7>o\256\014\277\214Qj\276\006+\311\276:2\r?5\303\205?\200\212\017?(\354\n\276V\271:>\364}L?\255`\202?\373\007D?a2\016@Km\205?p\341\031=.\024\017\276t\330\226\276q\033\016\277$\272-\277\300\370\355=di\373\275\365\277N\277\305\317q\2769\007d\277k\'\000\277@\220\224\276x\254\310>\250\030\306>\240c\r<:\3159\276\307\3751\277\226-u\277\202\024\002\300@:\031\275@\227-=V+\221\276\374\233\257\276\330;\273\276\302\223\t>n\302Y?N\343\320>PY\374>XLR?\310mz?\270fN?\030\253\371\275\273\246<\277b\357\264\2763\273>\277\\T\010>\372\301\017\275\272\207\366=\270\314P\276\247\304\354\276@g\250=(r\266\275\000\002\330\276R^&\277\361\257|\277\200a\340;\253l\231\275\260{B>\351\027(>>\022J\276H\303\251\276\300\030\267\276\020\336\225=\27397?\365|\237>\340\341\022\277\355Rv?\334\265\356?S\223\370?\001i\322?\316\000\212?\237\360\362>\030]\234?\305\361\220?\242R\223?8IZ?\243\2469?\300\323\245=\242~l>\006\356z\277:\001\261\277B\222i\277\243l\202\277\315y\335\277,-u\2775\322%\277-\024\230\276.\367[\277\252\021\206\276\330<\032\277\3105\244<D\020A?\360a+=\307\n#>\215F\346\276\210\276\342\276\330\250(\275\201\321%\276\214\'M\277iP\303\276\354\336\246\276\003\035\217\276\231\253\270>\256\210\366=\313\271\212\276\246\307\217\276\227\234o\277`1[\277\333\024\227\277G\334@\277\364\252\250\2765\000\336\276\244\262\265=\021\372E\276\272pj?\020\336\215?\242/\266?\356G\200?\215\310\273?5\353\331?\314\321c?c\261C?\002\222/?\243l\211?\200\036\'\274\360\326\316>\024\276\003\277!\327o\277h/\321\275pPD?\210\275i?\247\021\'?Y\277u?\010\016\273>\256\022%\276=\021\253>\325\307s?\204K\307\276\330\301@?:\353\203>\030/\241>t\334\247>\016\374\306?\026\256\314?\330\257\306?Wv\241?\355n\234?\342\330\237?T\374\321?\252\216\006@`\227.@\250\263-@\214\350J@]5\332?\024H\232??t\253?\020\017r?X\016\327?\252\236\335?\341\302\353?\322\005\334?\256\037\307?\313\334L\277\307X\261\276P\255O\275\334\r\022\277\000!+<\350\235V\275]\271^\277\234\240@\277\000\220y;\210w[>\000\325\213?\023\330\222?<\"\350?&l|?aD\263?\364\032\312?\362\215\357?N$,@^\341E@e\2221?\004y4?\226\262\205?\312\\\361?\333\240\261?\272;V\277L\337R\277\224(_\277\222\206\r\277\317\0307?j=\217?k_\203?\370\214\034?k\006\004?o\004\271\276l\322\267=\214l\022\277\200\001\374;\260\227c?\322\"\222>\214\014\333>\254\217\324\275%`\211\277\022\301\217\277\240\221\326\277\222\007\303\277>S\242\2768\'\202>\374\022\\="
      }
    }
  }
}
node {
  name: "tensors/normalize_tensors/component_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 800
          }
        }
        tensor_content: "\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@\000\000\000\000\000\0008@"
      }
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "tensors/normalize_tensors/component_0"
  input: "tensors/normalize_tensors/component_1"
  input: "tensors/normalize_tensors/component_2"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "filename"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "CacheDataset"
  op: "CacheDataset"
  input: "TensorSliceDataset"
  input: "filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 500
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "CacheDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 4
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "BatchDatasetV2"
  op: "BatchDatasetV2"
  input: "ShuffleDataset"
  input: "batch_size"
  input: "drop_remainder"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 4
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
}
node {
  name: "tensors_1/normalize_tensors/component_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        tensor_content: "\004\247\217?\246!\224?Z\373\254?\302C\351?v*\357?\240\315e\276\306\035\031\277\306\346\351>\261\222<?\260\377D\276?8\007\277\034\037\373\275}\205\037\277\250T\236\277<\303\252\277\250\332\270\276UX\177\277\000\034\004\275\034X\237\275\325\205\007\277\370\001x=\t\301;\277\330Y8\277w\n\271\276\311\322\014?P\323\357\2749G\010\2770\3417\277\352\023\207\277\244\270\204\276b\270\346\276 \003;>\247G\216\277>(\220\277\007\350\000\300\2445\340\277\256\365\214\277\314\213\360\277\255\331\230\277@\007\361\274xG\212>\024\241\356\276^v@\276\220+\326\2744\254]\277\353\265\256\276\317\014\252\276m\305\236\277\370~\305\276\n6\370\276gg\306\277\002\216\267\277 \263\313\277\344\215:\277\342_A\276$_\016=%\230\257?\372q\201?\0360\203?^K\214>\266\335\377>\310\242\207>\361\204y\277#\376\320\277\252R\364\277\234\n\234\277\236\343\253\276\030o\264\277\260\370\216\2775\251i\277J\343\255\277\213\n\253\277Q\017\365\276\312\010{\277\365\216\374\276\270\302\211>7S\257>d| ?Z\224\005?X8t?\016\027\322?\340\363\274?\310\'\253?bF\237?\247\244 ?\200\323\233<V\367\211>\313Z\316\276&0i\277\000\220c\2761\014r\276\326\376\001\277\342\246\027\277\330\274\034=~\357\306\276\212LC\277Z\255\020\300\267i\265\277@VF\277@3\322\274e\320\003\277\230\3421=\001\027\257\277C\257\255\277\000\202}\277,h\217\2769g\022\276\026\030\376\276\336l\346\276\330\314(\277\364SA>%\340\264=\272\351\321=\316\307\255=x\010(\274ex\220?\347\336T?\250do=\230\034\252\274\336Or?d\367g>\356\225\327\275\361-\210>\262tH>\360\331\223\2760@\314\276\276\016\301\276TBQ\277;\204\032\277y\242(\277\3673T\277\270\0354>\314\0029>\230a\305>\236\305\314\276\223$b\277\321\305p?^\355\207>\264\313T\276\326\323\257\276\001\311;>\350\236\024\276D*\354\276\237\321\213\277u;S>\006\243)?\322\371>\277;\255]\277\021\316\355\276\262+\203>l#[?m\225??\326\366\020?\260p)>E\024\355=G\223\372\276@\031\276\275\3442\351\275kA(>z\260\200\275p\207e;\0337x=\251nH\276z\267\013\277\274Z$\277a\224/\277@F\324\276\322\237\215\277\216\326\207\277|\266\232\276\230\372)=`j\t?\362Z\225?\260\266\327\275m\244\242\276\006O\253\276@lp\277\274\360\'\276r\246\270\276\375\274\025\277\"F\253\277\004\224\216\277G\222\222\277,\016B\277\241\274\r\277\027Z\n\277XVf\277\t\033\310\276[C\251>\025\377\030?\270+w?@8U?\364\3536\277$E\226=n\256\312>_\274Y>\320k[\274r\307\225\277Ti\354\276 \2629=\037\201\250>\376\276\224?\305q\214?\000Z\221?\227\347\014?~O[>\270\300\"\276\376\354\216\276t\010^\276z]\031\276\3323\000?n\302\203>\360,>?\337\n\345>.\205G?^\233\221?\350\242\366\276\320$\243\275\372\327<>X\226e=)\311h> \314\204\275n\302+\277\236aF\277\326\236\r?0JI>\233R\212\277\014e\r\277\266\021I\276)h]\276\202\256\377\276v\306\240\277\nT\236\277\353\333\340\277\314\000y\277\366\333Y\277\003`\206\276\364\231*=0\323\354>N\206\216>\236X\206\277h\211\203\277TTH\276\306\026A?\234}\254\275h\324\r\276\240\022\033?^\214\355>\006\237\216?\274!1>\374\266P?8x\352\276\224\253\314\2751d\340>l\305\345\275Pc\322\274\026\2437>\200FL\277`\352\311\276\232i\037\277\220\017\206=P\0210;\336\252w\277.FE\277\374\271\256?\214O5?\263G\260>\360\364\354>\275\276\232?\275\275\224?\320\242D?\315\"\r? \315\334=Bc(?(\346\204=\344\371\r?\364\031\326\276B\362J\277_`\027\277\020\235\020\2774H\244\276\233\031\t\276\250\320K\276L\361W\276\336\310p>\222 \317>\336\214d\276\264\325\000?/\247\037\276\364\364,\275^\006U>\013q\320\276\370>\305\276\031\004@\276A\264\033>W\324\237>\331h%\277-\243\272\277M\311\240\277\356\225\357\277%k\n\300\277\"$\300\350\321\276\277\000\363\031\274\343\327\021?i\307\r?\251\261}?\322\231\202?\"\272\252?\002\336\223>\204\320\346>\307h\244?\367w\364>\256\n\026?h\227\351=xT5?FP\037?v}\257>2\305\327\276\203\005\002\277zh\371\276\214\264\312\275\341]C>S\256F\277\250(\330\275\2477\211\276(\353\353=\233\013\252>\230\354\020?<R\301?n#\343?W\354x?\342\271\233>\235\t\207?\000\323l>\367\202\366>!\004m\277\330U??\316kX>\302\356\315\276gy\334>I\325\334\2760I\214\274\030\037\001?\300\023\'?y\364\266>\323\023X?\010\275\347=\237\216\300\276[\202\232\276\210\002\271>\267\037 >\304\365Z?2\201V?Y\232\355\276`cL\277\217X@\277P\336\004\275\354 \253\276\032A\362\276\n\306y?\200\331\365\274I\260\252\276Ino>\357#\013\276ean\277\217\362\232\277\032w\377\277@\322\243\277\345\211V\277`\217\r\276\200\233:>\204\230\336>\250(\200?|N\233?4A\205?\370\211\263?69\236?\206\t\214?\035\036\236?I\372\257?bO\302>\370\337\201?V\222\267?\267YL?\315\224r?\305qc?\334\3223?\234;\273?,\217\356?@\2770?\250m\351>\276]\302>Xv\270\275v\356\r?\354\316\372\275\253H\275\275\027/8?\2361\350\276\030e_\276\004P\027\277\336\260q\277@\221\206<#\r\022\277\263 \211\277NO\204\277\312\005\021\277)\261\242\277{\035^>\315\356\032?\355I\225?\276~\216?\272!\225?\346\210\237\276\210\202\031=\324\232\221>\342e\250\277\026\323\216\276\241\321\n\277I/a\277F\241z\277\337/\232\277\300\323\210=\"1\367\276\323\320\007?\274\'$?\304\252\023?\023\253\203>\353A\037\277J\2315\277\335\263W\277\320\232\022\276\225\305\225?J\277\335?\\h\303?p\322\226=\350t\320\274\352\206\224\2747\241\212\276,\324i>lBe?XG\n\277\026`y\2775?W\277q_f\277>*Y\277\370[\206\277\2002\372\277z!\341\277\010f\363\277\306\210\363\277W\323\202\277\272\"@\277B\266j\276P\301\023<\230XB\277I\344\201\276w\237\025\277Q\212\330\276\352\317b?\006\177\237?tp\230?h=\235>j\360w?T\005\240?\010\374<?\001\237 ?\336c\217>P\306\307\276\021,\274\276\370\320\315=\355\'\371>\216N*\277\274hd\277Ml\256\276\220\2760\276fg\006?\004\321\263\275\022\005\311>\301?\246>j\374\001?\332\336\001\2764@@\276\210R\317\276:\314\202\277\342\300\301\277H\374\257\277\022\312\225\277=\347d\277o<\\\277\231\355=\277\310\036\326>L\035\314?%u\017@j\235!@\301\002\032@\266\014\272?g\321\205?\207\270\350>\322\000\037?~,\271\276L\031>\277\020\376%\276MI\233\275E\002\344=\222\232\214?P\316D?\204\2301?\242=;>t\'\243\276\222`Q>P-\276=\370\301\241\274\327=\000\276\336f\205?d\001\342>\377&\201>A\260I?,v\203?\003Pd?\000`E=\365\205T>^\306\302\276\024`\240\276&\224\201\277Yx\267\277n\036\357\277j\270\241\277\322\023^\275\360\313\220\276X\201\204\277F(\016\277\302\344\013\277\2302\313\2758\020\255<\2648\233>\374\234#?8\307\250>\026WM?\n!\203?\220\\\020\275\262c\n\276\202t\325>d\246,>`\327\275\276*A&?\370\231@?lin?\341\2171?\n\222\213?\r\301j?\000$\010\275\215\'6\276\216\016\022\277kR\302\277\005\331\233\277\315\326\310\277\2003\331\277 \234\343\277\000\000\245\277\246\325\310\276\214\002\232\277\364\241B\276>d\230\2768\035\362\274(\362:\277\224\004K\276\244\3612?\037\r\216?b\365<?B=\343>\234\262\322>H\236[?f}J?p\256\273?F\256\277?Bf>\277z\213*\277,\251\025\277+j\224\277\321\273\302\2760\'\211\277@@\345\276\004\324\205>\002}\342\275T\263K\276\007\n\236\276W\237\033>\034_\007?\270[\314>\310O\220?R\002V?\014\325\367>\3204\271\277\313\271@\277P\005\305\275\004\374\033\2760E~=Sb\370=\377X\220?\333\002\025@\333R\261?\211\323\366?\177\037\000@\266\037\302?\034\232\362?\353\030\320?^\222\302?\301,I?L\374Y\276\332\242H\277\000|\032\277Jo\221\277\320\374\272>Ph\332>\240\214h=\364\371\031\277`\'\301>!\n\254\277\246\227\264\277ho)\277\363\344\203\276\350\366a>\376\037\311\276(\372\000?\211C\375>\203\377\257?\255\360\246?\373\376\242?\361\003\240>\032U}\277\346\320\227>\246\241\272>\305\251B?\324\334\024\277\n\212\253\276\350\230(\277\273\371\013?\036\202\255?\352\331\244\276R\354t>\033\323\211?\236*\251\276\236\031y?\366\017\354?f\002\210?r\202\255?\304\251\202?\262\370\221=+VK>X\005\204?\370\262w?)5\255>\342\035Y?\202[U?\204:6?\316\ni?\204<\225?\3059\037?\260\336\255?\336e\340>\262\360g\276\347O\356\276\205\264\021\277\t<(?\364\007\222?\024v\341?i\212\336?\332*\324>\306\324\023\2771M\247\276{3\350\276S\330\313>oDB?3\031\202?`tt?wQ\352?\3315\324?E\215\305?\335y\352?C\235\335?l\316\255?!\351-?f8[?8\346\213?\025\034\200?\260\362\233?\033\0053?\270\r\250?\222\233\304>\003j\276>\036q\000?\354\376\370>\204\370L\276\262\374\224\277\2669\326\277\242\272\216?\177y\233?>\232x?:\210\000@\215\200\343?\006}\r@\002V+@X\242\355?\256Y\356?\tC\363?\246\233\325?dEK?.\271\036>\177\3751\277\303.\017\277\374\354\200\276\314\366U>\007\355\223>\2169%\276(\023e=\261\034>\277\214\251Y>Y?\024\277\204\021\r?\203*\265?\340\t\r>\363Q\314\276 \017\230>&\221\361>\312\374\266> \350{>\007y\001\276\027\363\317>\277\314Y>d\252\377\276y\316\037\277.v\000\276\222\326z>\226\254,\277\200\3208\274\247\023\347>\307\250*?~}\021?r\250\316>\220\210\235\276\200*\211\277\230\253P\277\3600&\276ZQ\217\277{C\222\277V\317\026\277\237y\000\277\202\203\234\277\r\341\205\276<W\203\277TF\223\276\204Q<\277ha0>}}\037?G\024\177?\003Tq?\216\r\201?\356\255G?vj\346>\306a\020?PQ\216?V\341u?\231\035\314?\265\264\307?\002\366\004@\347\265\230?\276Y:?\262\204\322>h\2658>nOA>v\275\213\276l\030>\277(\342x\277\\\221\013\277dRV\277\005\222P\277\256\272\201\2770\307\266\277\252\327\360\277\214\342\210\277\200B\222\274\330h)?\017\360\202?x\035\236?\364\003\200?[\277\023?\213\262-?6\020\242?\225\370\251?p#\354?\031m\213?[\265\204\277\024s\333\277\247\220\254\277\010\361\272\277\032R\000\277\n\261\277\276H\317\345\276\302\327\373\276X\243W\277[\257n\277\366\003\274\277\264\360\025\276\231\211\007?\225 \226?O\017!@\n\321\364?\"C\216?\264<\255?1y\254?#\250=?Zk\022\276c\356\220>\350<\\?\226=\217>\033\211\357\276\220\007\236\275}Uc\277X\201D\276\364\263\322\276\023\'\230\276\212\226\007\276\032\361\212\2774ep\277\356\333\244\277jb\235\277\256\313`\277\274fg\277YaX\277\010&\210\276\203\362\003?\330\331\301\275OjA\275\340\210E\277\276?\277\277(`\226\277\275P\244\277\206\310[\276\230\272\270\275@6\360\276\340{|\274R\204n\275;\217\270\276}\267\227\275\010\203\032\2756I\'\277\214\t\216>\032H\354>R5\334>\265\336\252?\310\t\213?\036\312\275?\\\370\231>\366\334J\276\236\326\270\276\311V\205>\262\304V?\017\340\233?\330\272P>8\303\354\276\021\263s\277,\321\032>-\036\331\2765\021\001\277\244\"n\277\\\3469\277^q\232\277\336\360w\277g\332\256\277Bm\344\277qk\340\277\204\261\367\277\250\253\344\276\302x.\277\224\356\245>\324\024y?YM\325>_]2?\026\025d?\250\326p\275\010xP>\373\210\376\276,\220f>`\253\024\277/\272\037\277\336(@\277\264\263\325\277\236$\321\277\254\324\275\276}N\336>\016z\255>\216\216\261?\014\\\377?\377}\376?,W\332?|\363V\276\300|\216>3YP\277\300>\254\275\322\343\312>\362L\277>\351[\315>\352\301t?\210\235\000?*\246\026?P\034u=\307\\\036?\334\220\032\276{&3\277v$\"\277X\r\356=4\0373\2772\241\350\277\300+)\274\307\235\032\277\240.\002\277]\236\223?\342\201\252>\014\365\335\276\362\223@\277g\3571\277\236\215f\277A\223 \277\265\257\014\277[\252E\276\330\r\t>\245\233\353>\006Z\212?h\315a?\000bd\272\037P\372=w\331\344>\366\333K?R\355\266>\001%\304=\004[\375>\300d\217?\034\311\221?\200\355\003\274\341R\205>\274\273~?\340\242\241=G#\205>z\"\304>\031\315\301>\332\225\376>\270\266\024?I71?`\265\331<\376t\242\276\317vP\277\300\314v<\300\333\013>\203\350\301>Q\3500>\265\200\035\277T:\026>\221\361\252\277\230m\256\275\224\212.@ z\274??\230\177?\335\250;?\223$\203?\224C\325?l\266\270?\346D\313?\262\361\377?n\026\361?\315\000\003@\277&\360?\235o\336?\305MS?\320\036E\275\030u\215\277z\266\021\277\376\335\023\277\020\035\022=h4\222<\203\273\347\276(\273\202=4\016\273>>o!?\200&E\277\302\333Q\277\254E\006\276r\026n\277`\352\343>\346.\r?h{%=J\320\003\276h`\242=\260w\303>\330\023]=\201S\004?;#-?\002\231\217?l_}>\202\024\020\276\2465`>#Hv=h\031\005\277\310_x=\340\022\335>\356::?\354@\300>\236\312\202?\273\354\017\277h\303\234\277\233j\332\277\023\374\332\277X\214\340\276\262\260\246\276\346\016\014\276\310@\212\277\250\242\005\277\010\232e\277F\276\313\277\307\224\264\2770\310b>\0003\245\273\026\030\356\276!\023{\277F\257J\277\302\344C\277\267\017k\277B\375\222\276\226\004\234\275XQ\026<H\314\343>\315,\305\276f6&?vC*\276\266\226;\277`\347\372\275\361N\253\276\312\363\315\277k=\362\277\007\274\020\300d\0056\300\356?\231\277\270z?>\314\362\311\276)\257\026\277\037\2550\277\320\355\267=>&L?}\030\024?\374\336_?!\034\366?R\'\304?-\327\253?\240>\030=\312A\267>3\037\373\276\211\366G\277/\262\221\277\220\263\023\275\325\314\210\277\001;f\277c=J\277\210Dg\275 \212\330\274\222\316L\277<\277\205\276\000P\037>Ve\206\275U\341m\276v,v\276\376F\346\276\377\331@\276\264\026\203>5(\351>\237\307\212?\230\303\026?E\236\305>\034X\365\2750\265\211>Fx\215\276\364%-\277~(\242\276`[\334\276*4\263\2766\251\210\277\223\027\237\277SL\345\277\245Wj\277AR\n\277%\274\006\276(\260!?Zr\022?\315\020:?%B+?,\306Z>_D/\277l\343(>\234\305}\275\362\032\327>\256?\310=}\251\341\275\350\375\210\276?\317\001\277\320\027\314\275\255\361V\277]\027r\277\374\251J\277\200\017\234;}Q%\277\226\000\022\277\23028>K\370\366>v]\306>6\035\303>\221|\365>h\362\272\275\0314\274\276o\274\205\277KG\362\276\322!1\277\355z%\277l\346\332>1G.>\000\3629:\r\010\314>\n\212\337\276\306\336\346\276\350o\335<Nk\277\277\367@\266\277y4b\277\307\026\206\277\230\226\177\277.\223\303\276j\232\241\276\2244r\276tu\350\276\216\346X\277\251\243\032\2778\213{\276j\233\343\276LR\356\276#$b\276\027E\035\276\340\307\n\276\350P\225>p\270\206?$\342[?N\202A?\306~\261?R\316\326?M\372\016@\243\317\251\277g\244\326\277\336a\346\277,\005\375\277\212\301\307\277\000O^\277t&f\277I\024n\277\240AK=D\306\016?\t\214\r?\307a\205?$0Y?\341\233\356>\232\201\\?\356T\336?j\355\216?\217$\201?\262:\246?\244\227\001@\372O\352?\261\202\216?\366\225\236?d\2461>\252nR\276vs\362\276@\275X\275<\366\217\276t\270=?8\376\210?\351\270f?\312l3?\210\252u?\005X\220?\277\220\342?FW\367?\205d\304?\231Q\246?\222\037~?j\247\275>ZN\271\276\226\374\251\276\000\211B\276r\270\212\277u\361\265\277\342N\374\277\240\347\231\277\342q\262\277\315\245\002?\354i\020?\264\361N?\222\347{?\210m$\276\344\265\371\275`\313\216\277y\266\033\277FH\305\277\032N9\277Q\3416\277\'F\033\277&\371\211?\026Y@?P\352\257<\270\230y<\223\356\361>(\030\373\275\034@\337=s\315D\276@\321D\277\020p\201=\360\375\022?*?\325=7w\301?\306\373\006@\3744\373?G\306\240?\326I\216?\204\222\353?\325\236\205?\205\020L?=\341\263?\002\007*@\\\020\244?\024:\240?\340\300\241?\263l\210?\346-\346\276\014jt=\222>/\277K\021\331\276]!\272\277-\034\025\277!_\251>\nHE\277\215\303\272\277\020\030\231\276\'\0274\277\225\201\342\276T\345\177>Z\231Y>6<\227\275_hL?\235V2?1\273\007?G\031\241>\323\226\002\277Q\027\215\277z\235L\276\344F\225>Z\375\027\276\350\220\022?\343\331\003?41\352>\016\371 ?\334\252\277>r7>\277\252\322\320\277\372\036\251\276w20\277\3522<\277\274R\314>E\364\231\276\343\304\t\277\\\257\233=\307\t\212?&\222\243?\'v\244?0\252\347?\302M)@\300\354)@W\220\024@P\225\'@\356,\327?\244*\215?\214M{>\214\353E=\002\356(\277\340\036\324<P\tR?IRh?\201/\247?\265-\376?\264&\r?=\206?>-\326N\272\216\0326\276\250\363~\276\234\304\230\276\220wm>.\367\014\277\\\330O\276\032_\201=\324\300\225>n18\276\022\203\010??\314\300>e\242\203>\304\225\001?\311`\212>Q\177\004?`5\375<\006\2140>\302\314\206>\304y\223\275\245\204\343>\262*\362>\302\264\006\277\016\321\323\276\237\352\212\277\000\247\362\276(S.\277*\200U>\373\266\242\276Mm\204?4\343t?\274\323H\276\352\024\353\276\025\016\316\276\251\244\341\276\004q\254\275\006\332\307\276\010T\034\277\331\206\240\276\376\373\013\277$\242\375\276\260\352O\277\332b\002\277,\035V\277L#\363\276\262l@\277\002A\007\277\364\326\305=\tvG\276U\234\224>\224\347\357>\220\200\241?\223\2120?j|\315?\177N#?\030\206\\=I\343\224>~\010\334>\004+\324=\037\203\n\277N\030Y\2772\373^\277\277LA\277\004\303r\277\\\361z\277\302\337\231\277\324\377\026\277\376\035\213\277g\034\367\276\261\240\027\277x>\222\277\334\007\263\277\366L\345>\366v\376>P\252\210<\356\007-\277\204b\200\277L0\325\277\3252\214\277\345\362\277\277\227<\302\277\221`\022\300\335\214*\3001\t\257\277\273\3334\2770*\214>\354Q\231=\022\312\252\276{\375\341>\260\217\307\276\323\332\266\276^\\\027\277\310\214\304\276\235\345\020\276\254,\003=q\275\324>p$\307\277C\010\311\276\317\351\241?\236\225\211?\232\303\222?\274$ ??\240\026?{\031\341>\265\224&?\300\220M=V\302\004\276\244B\223\277\220\206d=&\265\302>V\303\356>\305?\315>\2400\211?\254T\230?\226\356\362>\200\020/\275\314\252\257\275J\214\037\277\304\222&?\360\377\250\275\264\222\245?#\241\014@$\222\'@=\316\007@\327.k?\354\315\327\276\210g\334<UQ\377\276\222\260a\277\333P\241\277\210y\036\277\330\367\333>D\362z\276\332x\252\276+\301\034\276>D`\276\024\357\302>i^\002?\252\020`\276\260\326\032<\250\026\203\277\256\264\032\276\315\250\020\277[\335<\277\227\032\243\277*\020\021?X\231<\276ql$\276\254\211,>\005\301\033?y_n?\332J@?\340\353\320>\270c\003\277y\343\252\276$t\373\275\261w\005\276\314\304S?R]\022?|\325\373=@\022\221>\304\355_>\250u\016\277\240FE\277\240\004\204\276\227CI\2770\225\036\276\225\223<\277\312\357\002\300wi\333\277pW\237\275\276\370\265\276x#\220>\362-\242><C\203>pN4<\255\347\340\275\216S\341\276\360\3750>\035\343\254\275\235\200\243>\024i8\277\350H\271\277\321\276\302\277\245 \351\277\220\266%\300\373`\007\300~\215<\300\035A\356\277n^\312\2770\005~>\250q==\273\333\010>\010\305\263>\035\316\213?\374.\232?0u\264>\343\247D\2776\264{\277^Y\242\276n\032\213\277\363i.\277\315\003\037\277\005l\001\277m\211\016\277\330j\270\277\374m#>\322\002/\277\276\260t?\300\213p\275O\225\000?\270\335C\277\371\314\023\277\336\362\224\277\246z\204\2778\225.\276\037K\202\277o\216\205\277v\344\367\277\312\031G\277\177\310\212\277 v\220\277*J\245\277)\214\223\277\002\365\201\277\276\336\212\277\202L\000?v\006\351>\010\251+=Wy2\276_2\006\277\306P{?$\211\262\276\360\346w\275\266\320\333>\275s\327>!+3?Z\303r?X\242W?\240\240\005?rE\004?`Y\363>\343%\327>\212j\242?T\227q?f?\244?\177\261T?\220\332K?,1\360=\340\021\204?\022n\376?\034;\307?\300tj?*\010\213?\324\026\014@0\341\270=\020\014\r?\'&\256?6\371i?\242\232\004?\350\326\014>,Vr>\010\003\007\277\316\243\334\276-N\205?\277q\357?\275\307\340?|\302\310?j\362\304?\220\365X?P\216_?\266\270*?\324\307\017\276@==\2778\311\205\275\254\250\271=\331X.\276\3345\274=\346\224{>\234\346\037>\265\334\004>:\311q\276\317\330T\277\214E\332\276\205Q\226\276\340^*\277\016\271w\277B\253\005\277^0\211\276\nIC\276\320z\311=\372\013\262>\"\177\017\276\030\030{\276`\364\344;\342\025\027?\340`\316<S\035~>k\201\230> d\014\276\266X\027\275\234\375\r\277p\245\223\276p\327\017?d\356\336\276\016\320\005?>+t>\232{\220\276\006\273,\277\300\257\243\277F\356\371\276\255\026\241>\214\334\261?\321\030\232?\'\220.?\000\217\270;Yt\034>\3473V\276\326\002\213>\036\262\264?\020Q\305?/s\025@\326\303\304?Psc\275P\232#=\312\234y?\360\t\227?`\263\215?x\230\231\276\024\274\036\277\254\014\217\277\250\215\004?,Q\254=\313\304\342\275\300ue\276\346U\325\276\001\t\334\277\247\276\272\277p[\030\276\017\264q\277\010OG\277\210\003r\275n\214c>\276s\243\275\273J\247\277t\177\311\276r#\257\276\270[C\275\363\221\241\277.\203\223\277\344|O\277\236G\200\277\352\301\030\276\266\025\r\277:h\245\277\254\304\214\277\372\263\350\276\0030^\276\032\345U\277%\372\212\277T\253\033\277Bo`\277X\247\310>\350\024\375>^Mu?WXy?\2025\237?\000G\271\2747\037\033?t[\364=\n\376\307?\204\346\316?\347Yq?\310\262\273>\200l\217=t\214T\276\253\033~>\272\033\325\276c\200\312\276\260\025!?\265\025\340>Z\013\262\276\343\252a\277\232\217\330\276\321\206\365?\316\271\331?\000\352\271?O\334\230?\204m\t\276H\253\266>h\027\365>\252f\231?G^\\?\354\006V?*\001\007?v\016\025?\374\004\211>x\321,?\004\213G?\000\036\020\275\034\"\313\276(\217\014\277um\275\276\2756x\27719R\277HAp\277t\310\322\277\221z\323\277\223\236\030\277\204\360\342\276\335\212\256\276\327\321\230>\272\236\n?\306\310X?\323\016\340>\030t\036?\344\177\320?\321V\300?,\"\262?W1&?>\334\265?\250\001\351=$\330B?([\372\276\205L!\277\302\270\365\276@.w\277 \033J\276\232A{\277\321H\361\276\372\036\004>\023n\242>7\021!\277\347\302\200\277\304\037\372\276\\\257\254\276\020v\303<\330\307\302\276\177_%\277t\272(>\252\227r\276\234\320,\277\002\230\357\276\"\374\356>\230\310\345>P\244\256>U\356\210\276\306\233\351\276\020\343\n\2771\231*\277\200\223\345\274\354&\227>j\310\243?\205\303\207?U*}?\034\005\335?\263\330\330?\331\346|?\020\212O?8\333\223>\201\243\364>\362k6?\257\225\"?U\2448>\242\004\320>\232\231b?\371\"\312?\261A\202?\321\257n?\315\241\273?\331V\244?\343\366\222?\344\217+?\240\tG\276^\224\216\275h\346\374\276\240\331\253\277\362[\224\277m1\200\2776\305\260\277\241{>?<!4\276\225\337M>:\246\021?\335\224\022>\343E`\276\230f\035?3d+?\354KU?O\006\233?\\\003m?\254\364\351?!,\203?J\312\374?\373\246\204?\244\276A?\304\364>?G\264\310>\014\271\213>B$@\276\362$\031>H\227N\277\267\273\314>\362\217\330>T`\212\277W\304\216\277\n\351\027\277p\275\322\276\2262\207\275\206\274\033\276\251u\205\276\236\2302\277\334\3058\277\244U}\277a\2450\277\351?r?y\002h?\014mR\276\202\032\343=C3;?\334L\202>\221\350i?\327=\305?\254\017{?\010\356\255?\206+c?\374#\245?B\257\326?\007\212\215\276\364X\204\276\315\202\301>*:\034?0\330o\276\270y\033\277\302\305`\277P\301\032\277\216\306G\277Pv[\277\024(\340\277L\346\252\277\002\020D\277\247\316!\277z`\322\276\311\316y>l|\202\276\370S+?\200C\372=v\205\330\276)\024<\276>\372g\277\276\253*\276\327\243\263>\014Y\310\277\3662\305\277\202\343h\2773\022\021\277\330b\257>0m\207\275\311Aj\276\216\031\326>\\\033\353>\027\345\201?\204&\'>vGZ>\345N\023\276\366\305w\276r\333\370\276^ck\277|\237h\276\362;\271\275\223\316\354\276\324b\032\277Ph\200\2771\332\236\277@6\340\277_v\310\277]\035\210\276\033\301+\277L26?\212\353,?TR\316>X\356==\254\303\221\274\243\266\311>XS!?\215\2426?\270\354l\275?\350\206>\270@3\275V\207\220\277\214*C\277\000\212?\277\212r\210\276\264u\210>\214\257(\277\034\013%\277N\033\203\277\240X\273\276\320}\027\277\005\250\227\277\244H\025\277B\177q\276\363\t\203?&\233U?F\371N?\226\022\014>\363\207\022=\203Z\177>\010%\244=N\236\201\276\304e,>&/\216\2776^\325\276\200\261\277;\032#\r\276\r\340T\277\355J\224\277\237Y\032\277|\346\365\276G\233\207>\245\216\r?\377\020\312?\272\271\206?\026b\216>?\364J\276P.\002?\217\255\210?gF\226?\304\220i?]]h?^\321\211?H\366\244=e\375R\276\315s:?\257Xc?\371\310\213?v\270\005?\340\344j\275\302\317\241>\003\340 \276DG/\277\332%\303\276\342\023\t?\375\321_>\320\033\262>\221\303\264\276\204V\261\276\n8\355\276\375\232\005@\270m\354?s\177\350?\314x\363?\266\020\370?\267H\345?Z\033\020@4\262-@f\211\032@\0041\361?f\'\322?+\377\315>\305\034\020?N\004\036>c\233&?I\026\206?\214\212\034>jM\264=\324B@?8g4\276\321\213\031\277\354\325Q\276\325\350\027?M\234\335>B\325\302\277V\257\372\277\005>\017\300\345\231\003\300K?\333\277\273`o\277\024\2523\276\0107I>\263\r\326>\025l\016?J`\257?\300p\356?|C\005@DS @\014\327\376?C.\274?\262\212\021@K@\032@Ra\257?\264\306q>,\004C\275\330\302:>S\246 >\256\233\276\276\014\273\374>\360\245\236?2\373\357>\346H\222?\264\177\366>\310o\"=v\316\222?\372\237\231?\255\233u?\034f6?PQ\255?\3518\202?&\224C? \306!?\004-{?\004H\272\276\215,\310\277\270\323\320\277a?\271\277\000\305\n\274\037\250\r\277\232\276\034\277\344K\230\277\016\311m\277\250\227\232?\310\272\257>\266p\001>\252\344\215\2755I\001\277?h\304> \350H>d\352\305>\304\245\360\275\320\365\265\276\000\245\207\277\310\301\025?\000\034\244:\311\034M?|\263\261?\316A\313?j\267\323?4\235\306?:(\000@\362*\n@L\275\376?\016\034\315>\000\216|\273\222\376>\277Z\234<\276}\222\223\275\016\004\204>;O/>\241\362\035?^l@?\035\214{?\241\345\260?\315\252\220?|\324#?\006\335\000>*\254\017>\306\326\273<\227\325\332=D\337\343\276~^ \277\344$\352\276Z\023\236\276\303\214\351\276\336\212\005\277a\232?\277\212\000@\277\345\033\007\277(+\326\276\345\236\277\275X\230\266\276\000\227l;\217c\260>\212\232\025\276\031\223\227\276\222\022\363\276\316\344\351\276\343\260\340\276\256\3111\277\236\211<\277\010\361L\277`\205\351=\235\337l>\345\177\217?}\306c?x\273\207>\340S\227?t\357\002@!\023\340?\234\026\213?\343\3265?P\252\320\276\357\n\321>\034\220\031\277\244\016\255>a\330\032?\204\331\374> 6\027\274]\002W\276b\312\262\276(f\212\2776]]\277\263\270~\277\002\232\320\277/v\305\277\005+\263\277C\021\246\277\240\370\027\275\322\331\022?|\t\372\276\316;\"\277:\020e\277\000-\255\277P\030i\276f\356\236\276\006/\033\277\010\360\326>?b\225\277$a\333\277\266\366\322\277\016o\203\277\302\207\231>\354u%?\225\3525?\300O\222\274w\275\230\277\244\267\254\276\266\222[\277\345\324r\277\222T\335\277\331\001\332\277\331\200K\277\243\212R\277p*X\276Cu\207\277\231\377\"\277\350\302\004\277\254\014\r>\251\002\202?\222\360D?T0\221?\0165\205\276\200:\r\277\222\031\275\277\\\377\362\277\364\276\210\277\320\365\315\277\224\316\003\300\212\336,\300:\330\021\300\n\244[\277y\025#\277X6\360>.\327\250\276\215;Z\277\207)\317\276\t\0363>\t\272f\277r\254}\277\246La\276\000\026\200>\3468\306\276\276\013\232\276U[Y\276\274p!\277\244:\003?)\r\010?b\315\232?,\270Y?\200s\027?*\211!?\200L\266=B\222#\277\000\264v\277\325\213\001\300\340\212&\300\340V{\277\300}\010\274\033U\233\276\242\315#\277\300~R\277\370hb\277`\217\203\276\306\360\036\277\344^\320\275O3\201\276\020[\320<\037\3101?~.o>$\t\370\275z\327*=\266\331\221<\212\007\266>\032\256\346\275v\302:\276ra->\324\202\021\275\232f\356>*\326\027?\316Ya>\'Fg\276\334\326\313>\232\030\240?(\003,>\013]B\277)$\331\276d\266\026\277\231k\204?\3006\256?yE??\266\216\331?Y\225\262?r\301C?>A\302?~M\212?\345\322\303?\352&\333?|\320\326?\306\253\202?,7\351?p\\\316?\262U\251?\200\334s<@~B\276\263\253\243>\r\245c?\202\361\327?\344\317\351?&\266\272?\343r@?\317\025\017?D\340\363>\272=\212\277\367\rg\277\363\202\232\277\230N\204=G\243\270?\250\334\372?\t\251\322?k\314\367?\333D\275?Ni\266? \'1?\030\216F?>\273@?\246\237\366\276p\023E\277j\311j\277\207O\375\2764\333X\277\250\341\260\277:\361\265\277\274\001\246\277@\225\360\277L\250\222\2770\256u\277RJP\277\010:\022\277b\nw\277\270\372-\277\342\241\n\277\363\273o>\217!k\276\370\202\333>\304\311\227\276\020A\303<\201\234k\277`K]\277\346\372\207\276\014!>>\314`\240>h\344\230\276\354\177<\277\255\212=\277v\341\232\277\010R\336\277z\334\340\277\002\274\260\277Nh\347\277\253\235\210\277\232\230\300\276{\377\002\277p\210S\276\236\306/\277\224*\221\277\252`\334\276\204q\301\275\246lh>\014\263\016>\376X\002@\005\364\306?\214\246?\276\312\267\371>\204\3031>\367\333\221\277iU\226\277\256hX\277\014g\343\276P\377\226=\360\032\363\275\231\337\177\276\002\323$\277-@\036\276\267\216c?\360k\244<M\247\354\275\0238\232>\2408H?Tn\352?\322E]?P\023\032\275\341\207\245>\307\246c\277\322\014;\277\022\2720\277\373\363\000\300\366c\n\300\326(\213\277\276<\314\277\203\377\230\277\344\017C\277W\205D\276\224\343A?\212sX?j\247\254?\202Lb?\372\332??\317\022\275\276\022\262\337=\216\343\347=\312Z\007\277Z\257\316\277\022\367\257\277U\276,\275*&\336>\341~\204?\332lJ?\274\002j>A\2536\277\363[\033\277\330\037\227>\227\312\212?T\334<?\230\"\243\276\366\270\032\277\035\3336\277\270\343\r>\331\223f>Vp6?80`\276x\364/?\226\335u?\374a2>\207>\247>\245\rB?l\033\001\2776\r#\277&\354n?h\336->\322\027\002? eC?\372\300^?\036\000Z\276\320sG\275&\326\001?b\002\361>\214h\207=S^m>\003\"\"\277\033\212n?>\357\201>e\027\026?\036\354\362>\340\366\360>\000qm;\327\251\037=\262\370\331>\354y\260=/\202\014?\210\014V>g\207\342=\037f0?7v\177>\363\3611?5A\252>;g^>I\225\311\276O\232\365\276-\3766?\274\235/?\\\320\234?\377\330\212?\357G\200?\"\300\323>`<\377>\364\332\372=2\007\365>\234\213\275\275\225\240F=\277\341\034\276^\'Q?\205+\202?\201m\200?\037G\\?\262\020\212>"
      }
    }
  }
}
node {
  name: "tensors_1/normalize_tensors/component_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        tensor_content: "\246!\224?Z\373\254?\302C\351?v*\357?\240\315e\276\306\035\031\277\306\346\351>\261\222<?\260\377D\276?8\007\277\034\037\373\275}\205\037\277\250T\236\277<\303\252\277\250\332\270\276UX\177\277\000\034\004\275\034X\237\275\325\205\007\277\370\001x=\t\301;\277\330Y8\277w\n\271\276\264A\220\276P\323\357\2749G\010\2770\3417\277\352\023\207\277\244\270\204\276b\270\346\276 \003;>\247G\216\277>(\220\277\007\350\000\300\2445\340\277\256\365\214\277\314\213\360\277\255\331\230\277@\007\361\274xG\212>\024\241\356\276^v@\276\220+\326\2744\254]\277\353\265\256\276\317\014\252\276m\305\236\277L\205\203\277\n6\370\276gg\306\277\002\216\267\277 \263\313\277\344\215:\277\342_A\276$_\016=%\230\257?\372q\201?\0360\203?^K\214>\266\335\377>\310\242\207>\361\204y\277#\376\320\277\252R\364\277\234\n\234\277\236\343\253\276\030o\264\277\260\370\216\2775\251i\277J\343\255\277\213\n\253\277yO\324\277\312\010{\277\365\216\374\276\270\302\211>7S\257>d| ?Z\224\005?X8t?\016\027\322?\340\363\274?\310\'\253?bF\237?\247\244 ?\200\323\233<V\367\211>\313Z\316\276&0i\277\000\220c\2761\014r\276\326\376\001\277\342\246\027\277\330\274\034=~\357\306\276\212LC\277\230Z\321\277\267i\265\277@VF\277@3\322\274e\320\003\277\230\3421=\001\027\257\277C\257\255\277\000\202}\277,h\217\2769g\022\276\026\030\376\276\336l\346\276\330\314(\277\364SA>%\340\264=\272\351\321=\316\307\255=x\010(\274ex\220?\347\336T?\250do=\230\034\252\274\336Or?\376\341\023?\356\225\327\275\361-\210>\262tH>\360\331\223\2760@\314\276\276\016\301\276TBQ\277;\204\032\277y\242(\277\3673T\277\270\0354>\314\0029>\230a\305>\236\305\314\276\223$b\277\321\305p?^\355\207>\264\313T\276\326\323\257\276\001\311;>\350\236\024\276D*\354\276\237\321\213\277O \365\276\006\243)?\322\371>\277;\255]\277\021\316\355\276\262+\203>l#[?m\225??\326\366\020?\260p)>E\024\355=G\223\372\276@\031\276\275\3442\351\275kA(>z\260\200\275p\207e;\0337x=\251nH\276z\267\013\277\274Z$\277a\224/\277@F\324\276\322\237\215\277B\356\206\277|\266\232\276\230\372)=`j\t?\362Z\225?\260\266\327\275m\244\242\276\006O\253\276@lp\277\274\360\'\276r\246\270\276\375\274\025\277\"F\253\277\004\224\216\277G\222\222\277,\016B\277\241\274\r\277\027Z\n\277XVf\277\t\033\310\276[C\251>\025\377\030?\270+w?@8U?\244\r\363>$E\226=n\256\312>_\274Y>\320k[\274r\307\225\277Ti\354\276 \2629=\037\201\250>\376\276\224?\305q\214?\000Z\221?\227\347\014?~O[>\270\300\"\276\376\354\216\276t\010^\276z]\031\276\3323\000?n\302\203>\360,>?\337\n\345>.\205G?^\233\221?e(\\?\320$\243\275\372\327<>X\226e=)\311h> \314\204\275n\302+\277\236aF\277\326\236\r?0JI>\233R\212\277\014e\r\277\266\021I\276)h]\276\202\256\377\276v\306\240\277\nT\236\277\353\333\340\277\314\000y\277\366\333Y\277\003`\206\276\364\231*=0\323\354>N\206\216>\177\246\265?h\211\203\277TTH\276\306\026A?\234}\254\275h\324\r\276\240\022\033?^\214\355>\006\237\216?\274!1>\374\266P?8x\352\276\224\253\314\2751d\340>l\305\345\275Pc\322\274\026\2437>\200FL\277`\352\311\276\232i\037\277\220\017\206=P\0210;\336\252w\277.FE\277\374\253\214\276\214O5?\263G\260>\360\364\354>\275\276\232?\275\275\224?\320\242D?\315\"\r? \315\334=Bc(?(\346\204=\344\371\r?\364\031\326\276B\362J\277_`\027\277\020\235\020\2774H\244\276\233\031\t\276\250\320K\276L\361W\276\336\310p>\222 \317>\336\214d\276\264\325\000?,\367\244\276\364\364,\275^\006U>\013q\320\276\370>\305\276\031\004@\276A\264\033>W\324\237>\331h%\277-\243\272\277M\311\240\277\356\225\357\277%k\n\300\277\"$\300\350\321\276\277\000\363\031\274\343\327\021?i\307\r?\251\261}?\322\231\202?\"\272\252?\002\336\223>\204\320\346>\307h\244?X6P?\256\n\026?h\227\351=xT5?FP\037?v}\257>2\305\327\276\203\005\002\277zh\371\276\214\264\312\275\341]C>S\256F\277\250(\330\275\2477\211\276(\353\353=\233\013\252>\230\354\020?<R\301?n#\343?W\354x?\342\271\233>\235\t\207?\000\323l>\367\202\366>F\220\315>\330U??\316kX>\302\356\315\276gy\334>I\325\334\2760I\214\274\030\037\001?\300\023\'?y\364\266>\323\023X?\010\275\347=\237\216\300\276[\202\232\276\210\002\271>\267\037 >\304\365Z?2\201V?Y\232\355\276`cL\277\217X@\277P\336\004\275\354 \253\276\032A\362\276R\265\257\276\200\331\365\274I\260\252\276Ino>\357#\013\276ean\277\217\362\232\277\032w\377\277@\322\243\277\345\211V\277`\217\r\276\200\233:>\204\230\336>\250(\200?|N\233?4A\205?\370\211\263?69\236?\206\t\214?\035\036\236?I\372\257?bO\302>\370\337\201?V\222\267?\233n\213?\315\224r?\305qc?\334\3223?\234;\273?,\217\356?@\2770?\250m\351>\276]\302>Xv\270\275v\356\r?\354\316\372\275\253H\275\275\027/8?\2361\350\276\030e_\276\004P\027\277\336\260q\277@\221\206<#\r\022\277\263 \211\277NO\204\277\312\005\021\277)\261\242\2776c\360\277\315\356\032?\355I\225?\276~\216?\272!\225?\346\210\237\276\210\202\031=\324\232\221>\342e\250\277\026\323\216\276\241\321\n\277I/a\277F\241z\277\337/\232\277\300\323\210=\"1\367\276\323\320\007?\274\'$?\304\252\023?\023\253\203>\353A\037\277J\2315\277\335\263W\277\320\232\022\276\340:\263\276J\277\335?\\h\303?p\322\226=\350t\320\274\352\206\224\2747\241\212\276,\324i>lBe?XG\n\277\026`y\2775?W\277q_f\277>*Y\277\370[\206\277\2002\372\277z!\341\277\010f\363\277\306\210\363\277W\323\202\277\272\"@\277B\266j\276P\301\023<\230XB\277\004\360f\276w\237\025\277Q\212\330\276\352\317b?\006\177\237?tp\230?h=\235>j\360w?T\005\240?\010\374<?\001\237 ?\336c\217>P\306\307\276\021,\274\276\370\320\315=\355\'\371>\216N*\277\274hd\277Ml\256\276\220\2760\276fg\006?\004\321\263\275\022\005\311>\301?\246>\000tI\275\332\336\001\2764@@\276\210R\317\276:\314\202\277\342\300\301\277H\374\257\277\022\312\225\277=\347d\277o<\\\277\231\355=\277\310\036\326>L\035\314?%u\017@j\235!@\301\002\032@\266\014\272?g\321\205?\207\270\350>\322\000\037?~,\271\276L\031>\277\020\376%\276MI\233\275\234\344\242=\222\232\214?P\316D?\204\2301?\242=;>t\'\243\276\222`Q>P-\276=\370\301\241\274\327=\000\276\336f\205?d\001\342>\377&\201>A\260I?,v\203?\003Pd?\000`E=\365\205T>^\306\302\276\024`\240\276&\224\201\277Yx\267\277n\036\357\277j\270\241\277\313im\277\360\313\220\276X\201\204\277F(\016\277\302\344\013\277\2302\313\2758\020\255<\2648\233>\374\234#?8\307\250>\026WM?\n!\203?\220\\\020\275\262c\n\276\202t\325>d\246,>`\327\275\276*A&?\370\231@?lin?\341\2171?\n\222\213?\r\301j?\000$\010\275\373\277\276\276\216\016\022\277kR\302\277\005\331\233\277\315\326\310\277\2003\331\277 \234\343\277\000\000\245\277\246\325\310\276\214\002\232\277\364\241B\276>d\230\2768\035\362\274(\362:\277\224\004K\276\244\3612?\037\r\216?b\365<?B=\343>\234\262\322>H\236[?f}J?p\256\273?F\256\277?\240\355\232?z\213*\277,\251\025\277+j\224\277\321\273\302\2760\'\211\277@@\345\276\004\324\205>\002}\342\275T\263K\276\007\n\236\276W\237\033>\034_\007?\270[\314>\310O\220?R\002V?\014\325\367>\3204\271\277\313\271@\277P\005\305\275\004\374\033\2760E~=Sb\370=\377X\220?;\000\223?\333R\261?\211\323\366?\177\037\000@\266\037\302?\034\232\362?\353\030\320?^\222\302?\301,I?L\374Y\276\332\242H\277\000|\032\277Jo\221\277\320\374\272>Ph\332>\240\214h=\364\371\031\277`\'\301>!\n\254\277\246\227\264\277ho)\277\363\344\203\276\350\366a>\376\037\311\276\240\365\260\274\211C\375>\203\377\257?\255\360\246?\373\376\242?\361\003\240>\032U}\277\346\320\227>\246\241\272>\305\251B?\324\334\024\277\n\212\253\276\350\230(\277\273\371\013?\036\202\255?\352\331\244\276R\354t>\033\323\211?\236*\251\276\236\031y?\366\017\354?f\002\210?r\202\255?\304\251\202?*\342\024?+VK>X\005\204?\370\262w?)5\255>\342\035Y?\202[U?\204:6?\316\ni?\204<\225?\3059\037?\260\336\255?\336e\340>\262\360g\276\347O\356\276\205\264\021\277\t<(?\364\007\222?\024v\341?i\212\336?\332*\324>\306\324\023\2771M\247\276{3\350\276\246c\021\277oDB?3\031\202?`tt?wQ\352?\3315\324?E\215\305?\335y\352?C\235\335?l\316\255?!\351-?f8[?8\346\213?\025\034\200?\260\362\233?\033\0053?\270\r\250?\222\233\304>\003j\276>\036q\000?\354\376\370>\204\370L\276\262\374\224\277\2669\326\277\355\257u\277\177y\233?>\232x?:\210\000@\215\200\343?\006}\r@\002V+@X\242\355?\256Y\356?\tC\363?\246\233\325?dEK?.\271\036>\177\3751\277\303.\017\277\374\354\200\276\314\366U>\007\355\223>\2169%\276(\023e=\261\034>\277\214\251Y>Y?\024\277\204\021\r?\370\251\\?\340\t\r>\363Q\314\276 \017\230>&\221\361>\312\374\266> \350{>\007y\001\276\027\363\317>\277\314Y>d\252\377\276y\316\037\277.v\000\276\222\326z>\226\254,\277\200\3208\274\247\023\347>\307\250*?~}\021?r\250\316>\220\210\235\276\200*\211\277\230\253P\277\3600&\276(\302\370\276{C\222\277V\317\026\277\237y\000\277\202\203\234\277\r\341\205\276<W\203\277TF\223\276\204Q<\277ha0>}}\037?G\024\177?\003Tq?\216\r\201?\356\255G?vj\346>\306a\020?PQ\216?V\341u?\231\035\314?\265\264\307?\002\366\004@\347\265\230?\276Y:?\231\031Y?h\2658>nOA>v\275\213\276l\030>\277(\342x\277\\\221\013\277dRV\277\005\222P\277\256\272\201\2770\307\266\277\252\327\360\277\214\342\210\277\200B\222\274\330h)?\017\360\202?x\035\236?\364\003\200?[\277\023?\213\262-?6\020\242?\225\370\251?p#\354?\031m\213?\346\020\253?\024s\333\277\247\220\254\277\010\361\272\277\032R\000\277\n\261\277\276H\317\345\276\302\327\373\276X\243W\277[\257n\277\366\003\274\277\264\360\025\276\231\211\007?\225 \226?O\017!@\n\321\364?\"C\216?\264<\255?1y\254?#\250=?Zk\022\276c\356\220>\350<\\?\226=\217>k\315\003?\220\007\236\275}Uc\277X\201D\276\364\263\322\276\023\'\230\276\212\226\007\276\032\361\212\2774ep\277\356\333\244\277jb\235\277\256\313`\277\274fg\277YaX\277\010&\210\276\203\362\003?\330\331\301\275OjA\275\340\210E\277\276?\277\277(`\226\277\275P\244\277\206\310[\276\230\272\270\275\273B\241\276\340{|\274R\204n\275;\217\270\276}\267\227\275\010\203\032\2756I\'\277\214\t\216>\032H\354>R5\334>\265\336\252?\310\t\213?\036\312\275?\\\370\231>\366\334J\276\236\326\270\276\311V\205>\262\304V?\017\340\233?\330\272P>8\303\354\276\021\263s\277,\321\032>-\036\331\276L\217C\277\244\"n\277\\\3469\277^q\232\277\336\360w\277g\332\256\277Bm\344\277qk\340\277\204\261\367\277\250\253\344\276\302x.\277\224\356\245>\324\024y?YM\325>_]2?\026\025d?\250\326p\275\010xP>\373\210\376\276,\220f>`\253\024\277/\272\037\277\336(@\277\264\263\325\277\033n9\277\254\324\275\276}N\336>\016z\255>\216\216\261?\014\\\377?\377}\376?,W\332?|\363V\276\300|\216>3YP\277\300>\254\275\322\343\312>\362L\277>\351[\315>\352\301t?\210\235\000?*\246\026?P\034u=\307\\\036?\334\220\032\276{&3\277v$\"\277X\r\356=\334=\242=2\241\350\277\300+)\274\307\235\032\277\240.\002\277]\236\223?\342\201\252>\014\365\335\276\362\223@\277g\3571\277\236\215f\277A\223 \277\265\257\014\277[\252E\276\330\r\t>\245\233\353>\006Z\212?h\315a?\000bd\272\037P\372=w\331\344>\366\333K?R\355\266>\001%\304=\266;\237\275\300d\217?\034\311\221?\200\355\003\274\341R\205>\274\273~?\340\242\241=G#\205>z\"\304>\031\315\301>\332\225\376>\270\266\024?I71?`\265\331<\376t\242\276\317vP\277\300\314v<\300\333\013>\203\350\301>Q\3500>\265\200\035\277T:\026>\221\361\252\277\230m\256\275\356\265\017= z\274??\230\177?\335\250;?\223$\203?\224C\325?l\266\270?\346D\313?\262\361\377?n\026\361?\315\000\003@\277&\360?\235o\336?\305MS?\320\036E\275\030u\215\277z\266\021\277\376\335\023\277\020\035\022=h4\222<\203\273\347\276(\273\202=4\016\273>>o!?\300b5<\302\333Q\277\254E\006\276r\026n\277`\352\343>\346.\r?h{%=J\320\003\276h`\242=\260w\303>\330\023]=\201S\004?;#-?\002\231\217?l_}>\202\024\020\276\2465`>#Hv=h\031\005\277\310_x=\340\022\335>\356::?\354@\300>\236\312\202?,8e>h\303\234\277\233j\332\277\023\374\332\277X\214\340\276\262\260\246\276\346\016\014\276\310@\212\277\250\242\005\277\010\232e\277F\276\313\277\307\224\264\2770\310b>\0003\245\273\026\030\356\276!\023{\277F\257J\277\302\344C\277\267\017k\277B\375\222\276\226\004\234\275XQ\026<H\314\343>\315,\305\276\361)\215\277vC*\276\266\226;\277`\347\372\275\361N\253\276\312\363\315\277k=\362\277\007\274\020\300d\0056\300\356?\231\277\270z?>\314\362\311\276)\257\026\277\037\2550\277\320\355\267=>&L?}\030\024?\374\336_?!\034\366?R\'\304?-\327\253?\240>\030=\312A\267>3\037\373\276@{\036\276/\262\221\277\220\263\023\275\325\314\210\277\001;f\277c=J\277\210Dg\275 \212\330\274\222\316L\277<\277\205\276\000P\037>Ve\206\275U\341m\276v,v\276\376F\346\276\377\331@\276\264\026\203>5(\351>\237\307\212?\230\303\026?E\236\305>\034X\365\2750\265\211>Fx\215\276\265 \243\276~(\242\276`[\334\276*4\263\2766\251\210\277\223\027\237\277SL\345\277\245Wj\277AR\n\277%\274\006\276(\260!?Zr\022?\315\020:?%B+?,\306Z>_D/\277l\343(>\234\305}\275\362\032\327>\256?\310=}\251\341\275\350\375\210\276?\317\001\277\320\027\314\275\021\342\\\277]\027r\277\374\251J\277\200\017\234;}Q%\277\226\000\022\277\23028>K\370\366>v]\306>6\035\303>\221|\365>h\362\272\275\0314\274\276o\274\205\277KG\362\276\322!1\277\355z%\277l\346\332>1G.>\000\3629:\r\010\314>\n\212\337\276\306\336\346\276\350o\335<\350\374\364>\367@\266\277y4b\277\307\026\206\277\230\226\177\277.\223\303\276j\232\241\276\2244r\276tu\350\276\216\346X\277\251\243\032\2778\213{\276j\233\343\276LR\356\276#$b\276\027E\035\276\340\307\n\276\350P\225>p\270\206?$\342[?N\202A?\306~\261?R\316\326?M\372\016@[m-@g\244\326\277\336a\346\277,\005\375\277\212\301\307\277\000O^\277t&f\277I\024n\277\240AK=D\306\016?\t\214\r?\307a\205?$0Y?\341\233\356>\232\201\\?\356T\336?j\355\216?\217$\201?\262:\246?\244\227\001@\372O\352?\261\202\216?\366\225\236?d\2461>&*\262>vs\362\276@\275X\275<\366\217\276t\270=?8\376\210?\351\270f?\312l3?\210\252u?\005X\220?\277\220\342?FW\367?\205d\304?\231Q\246?\222\037~?j\247\275>ZN\271\276\226\374\251\276\000\211B\276r\270\212\277u\361\265\277\342N\374\277\240\347\231\277\342q\262\277\2724\376\277\354i\020?\264\361N?\222\347{?\210m$\276\344\265\371\275`\313\216\277y\266\033\277FH\305\277\032N9\277Q\3416\277\'F\033\277&\371\211?\026Y@?P\352\257<\270\230y<\223\356\361>(\030\373\275\034@\337=s\315D\276@\321D\277\020p\201=\360\375\022?*?\325=\262\376\212>\306\373\006@\3744\373?G\306\240?\326I\216?\204\222\353?\325\236\205?\205\020L?=\341\263?\002\007*@\\\020\244?\024:\240?\340\300\241?\263l\210?\346-\346\276\014jt=\222>/\277K\021\331\276]!\272\277-\034\025\277!_\251>\nHE\277\215\303\272\277\020\030\231\276\201I~\276\225\201\342\276T\345\177>Z\231Y>6<\227\275_hL?\235V2?1\273\007?G\031\241>\323\226\002\277Q\027\215\277z\235L\276\344F\225>Z\375\027\276\350\220\022?\343\331\003?41\352>\016\371 ?\334\252\277>r7>\277\252\322\320\277\372\036\251\276w20\277\3522<\277 &=\275E\364\231\276\343\304\t\277\\\257\233=\307\t\212?&\222\243?\'v\244?0\252\347?\302M)@\300\354)@W\220\024@P\225\'@\356,\327?\244*\215?\214M{>\214\353E=\002\356(\277\340\036\324<P\tR?IRh?\201/\247?\265-\376?\264&\r?=\206?>\342\335\212\276\216\0326\276\250\363~\276\234\304\230\276\220wm>.\367\014\277\\\330O\276\032_\201=\324\300\225>n18\276\022\203\010??\314\300>e\242\203>\304\225\001?\311`\212>Q\177\004?`5\375<\006\2140>\302\314\206>\304y\223\275\245\204\343>\262*\362>\302\264\006\277\016\321\323\276\316\354H\276\000\247\362\276(S.\277*\200U>\373\266\242\276Mm\204?4\343t?\274\323H\276\352\024\353\276\025\016\316\276\251\244\341\276\004q\254\275\006\332\307\276\010T\034\277\331\206\240\276\376\373\013\277$\242\375\276\260\352O\277\332b\002\277,\035V\277L#\363\276\262l@\277\002A\007\277\364\326\305=\237\245$?U\234\224>\224\347\357>\220\200\241?\223\2120?j|\315?\177N#?\030\206\\=I\343\224>~\010\334>\004+\324=\037\203\n\277N\030Y\2772\373^\277\277LA\277\004\303r\277\\\361z\277\302\337\231\277\324\377\026\277\376\035\213\277g\034\367\276\261\240\027\277x>\222\277\334\007\263\277\034\340E\300\366v\376>P\252\210<\356\007-\277\204b\200\277L0\325\277\3252\214\277\345\362\277\277\227<\302\277\221`\022\300\335\214*\3001\t\257\277\273\3334\2770*\214>\354Q\231=\022\312\252\276{\375\341>\260\217\307\276\323\332\266\276^\\\027\277\310\214\304\276\235\345\020\276\254,\003=q\275\324>\202\221|?C\010\311\276\317\351\241?\236\225\211?\232\303\222?\274$ ??\240\026?{\031\341>\265\224&?\300\220M=V\302\004\276\244B\223\277\220\206d=&\265\302>V\303\356>\305?\315>\2400\211?\254T\230?\226\356\362>\200\020/\275\314\252\257\275J\214\037\277\304\222&?\360\377\250\275\306\300I>#\241\014@$\222\'@=\316\007@\327.k?\354\315\327\276\210g\334<UQ\377\276\222\260a\277\333P\241\277\210y\036\277\330\367\333>D\362z\276\332x\252\276+\301\034\276>D`\276\024\357\302>i^\002?\252\020`\276\260\326\032<\250\026\203\277\256\264\032\276\315\250\020\277[\335<\277\317\341K\277*\020\021?X\231<\276ql$\276\254\211,>\005\301\033?y_n?\332J@?\340\353\320>\270c\003\277y\343\252\276$t\373\275\261w\005\276\314\304S?R]\022?|\325\373=@\022\221>\304\355_>\250u\016\277\240FE\277\240\004\204\276\227CI\2770\225\036\276\225\223<\277p\363u\277wi\333\277pW\237\275\276\370\265\276x#\220>\362-\242><C\203>pN4<\255\347\340\275\216S\341\276\360\3750>\035\343\254\275\235\200\243>\024i8\277\350H\271\277\321\276\302\277\245 \351\277\220\266%\300\373`\007\300~\215<\300\035A\356\277n^\312\2770\005~>\250q==?\235\017?\010\305\263>\035\316\213?\374.\232?0u\264>\343\247D\2776\264{\277^Y\242\276n\032\213\277\363i.\277\315\003\037\277\005l\001\277m\211\016\277\330j\270\277\374m#>\322\002/\277\276\260t?\300\213p\275O\225\000?\270\335C\277\371\314\023\277\336\362\224\277\246z\204\2778\225.\276\234d\205\276o\216\205\277v\344\367\277\312\031G\277\177\310\212\277 v\220\277*J\245\277)\214\223\277\002\365\201\277\276\336\212\277\202L\000?v\006\351>\010\251+=Wy2\276_2\006\277\306P{?$\211\262\276\360\346w\275\266\320\333>\275s\327>!+3?Z\303r?X\242W?\240\240\005?p\006\252\275`Y\363>\343%\327>\212j\242?T\227q?f?\244?\177\261T?\220\332K?,1\360=\340\021\204?\022n\376?\034;\307?\300tj?*\010\213?\324\026\014@0\341\270=\020\014\r?\'&\256?6\371i?\242\232\004?\350\326\014>,Vr>\010\003\007\277\316\243\334\2766\203K\277\277q\357?\275\307\340?|\302\310?j\362\304?\220\365X?P\216_?\266\270*?\324\307\017\276@==\2778\311\205\275\254\250\271=\331X.\276\3345\274=\346\224{>\234\346\037>\265\334\004>:\311q\276\317\330T\277\214E\332\276\205Q\226\276\340^*\277\016\271w\277B\253\005\277\220N\343<\nIC\276\320z\311=\372\013\262>\"\177\017\276\030\030{\276`\364\344;\342\025\027?\340`\316<S\035~>k\201\230> d\014\276\266X\027\275\234\375\r\277p\245\223\276p\327\017?d\356\336\276\016\320\005?>+t>\232{\220\276\006\273,\277\300\257\243\277F\356\371\276\255\026\241>PD\022\275\321\030\232?\'\220.?\000\217\270;Yt\034>\3473V\276\326\002\213>\036\262\264?\020Q\305?/s\025@\326\303\304?Psc\275P\232#=\312\234y?\360\t\227?`\263\215?x\230\231\276\024\274\036\277\254\014\217\277\250\215\004?,Q\254=\313\304\342\275\300ue\276\346U\325\276\272\032$\277\247\276\272\277p[\030\276\017\264q\277\010OG\277\210\003r\275n\214c>\276s\243\275\273J\247\277t\177\311\276r#\257\276\270[C\275\363\221\241\277.\203\223\277\344|O\277\236G\200\277\352\301\030\276\266\025\r\277:h\245\277\254\304\214\277\372\263\350\276\0030^\276\032\345U\277%\372\212\277\300\355\200\277Bo`\277X\247\310>\350\024\375>^Mu?WXy?\2025\237?\000G\271\2747\037\033?t[\364=\n\376\307?\204\346\316?\347Yq?\310\262\273>\200l\217=t\214T\276\253\033~>\272\033\325\276c\200\312\276\260\025!?\265\025\340>Z\013\262\276\343\252a\277\232\217\330\2760f\035\276\316\271\331?\000\352\271?O\334\230?\204m\t\276H\253\266>h\027\365>\252f\231?G^\\?\354\006V?*\001\007?v\016\025?\374\004\211>x\321,?\004\213G?\000\036\020\275\034\"\313\276(\217\014\277um\275\276\2756x\27719R\277HAp\277t\310\322\277\221z\323\277q\372T\277\204\360\342\276\335\212\256\276\327\321\230>\272\236\n?\306\310X?\323\016\340>\030t\036?\344\177\320?\321V\300?,\"\262?W1&?>\334\265?\250\001\351=$\330B?([\372\276\205L!\277\302\270\365\276@.w\277 \033J\276\232A{\277\321H\361\276\372\036\004>\023n\242>2@\271=\347\302\200\277\304\037\372\276\\\257\254\276\020v\303<\330\307\302\276\177_%\277t\272(>\252\227r\276\234\320,\277\002\230\357\276\"\374\356>\230\310\345>P\244\256>U\356\210\276\306\233\351\276\020\343\n\2771\231*\277\200\223\345\274\354&\227>j\310\243?\205\303\207?U*}?\034\005\335?\213\241\203?\331\346|?\020\212O?8\333\223>\201\243\364>\362k6?\257\225\"?U\2448>\242\004\320>\232\231b?\371\"\312?\261A\202?\321\257n?\315\241\273?\331V\244?\343\366\222?\344\217+?\240\tG\276^\224\216\275h\346\374\276\240\331\253\277\362[\224\277m1\200\2776\305\260\277\360(!\277<!4\276\225\337M>:\246\021?\335\224\022>\343E`\276\230f\035?3d+?\354KU?O\006\233?\\\003m?\254\364\351?!,\203?J\312\374?\373\246\204?\244\276A?\304\364>?G\264\310>\014\271\213>B$@\276\362$\031>H\227N\277\267\273\314>\362\217\330>f9\276>W\304\216\277\n\351\027\277p\275\322\276\2262\207\275\206\274\033\276\251u\205\276\236\2302\277\334\3058\277\244U}\277a\2450\277\351?r?y\002h?\014mR\276\202\032\343=C3;?\334L\202>\221\350i?\327=\305?\254\017{?\010\356\255?\206+c?\374#\245?B\257\326?\333K\366?\364X\204\276\315\202\301>*:\034?0\330o\276\270y\033\277\302\305`\277P\301\032\277\216\306G\277Pv[\277\024(\340\277L\346\252\277\002\020D\277\247\316!\277z`\322\276\311\316y>l|\202\276\370S+?\200C\372=v\205\330\276)\024<\276>\372g\277\276\253*\276\327\243\263>\345@4>\3662\305\277\202\343h\2773\022\021\277\330b\257>0m\207\275\311Aj\276\216\031\326>\\\033\353>\027\345\201?\204&\'>vGZ>\345N\023\276\366\305w\276r\333\370\276^ck\277|\237h\276\362;\271\275\223\316\354\276\324b\032\277Ph\200\2771\332\236\277@6\340\277_v\310\277\264\237\320\277\033\301+\277L26?\212\353,?TR\316>X\356==\254\303\221\274\243\266\311>XS!?\215\2426?\270\354l\275?\350\206>\270@3\275V\207\220\277\214*C\277\000\212?\277\212r\210\276\264u\210>\214\257(\277\034\013%\277N\033\203\277\240X\273\276\320}\027\277\005\250\227\2771\031\202\277B\177q\276\363\t\203?&\233U?F\371N?\226\022\014>\363\207\022=\203Z\177>\010%\244=N\236\201\276\304e,>&/\216\2776^\325\276\200\261\277;\032#\r\276\r\340T\277\355J\224\277\237Y\032\277|\346\365\276G\233\207>\245\216\r?\377\020\312?\272\271\206?\026b\216>\304\021e?P.\002?\217\255\210?gF\226?\304\220i?]]h?^\321\211?H\366\244=e\375R\276\315s:?\257Xc?\371\310\213?v\270\005?\340\344j\275\302\317\241>\003\340 \276DG/\277\332%\303\276\342\023\t?\375\321_>\320\033\262>\221\303\264\276\204V\261\276\n8\355\276<?\247>\270m\354?s\177\350?\314x\363?\266\020\370?\267H\345?Z\033\020@4\262-@f\211\032@\0041\361?f\'\322?+\377\315>\305\034\020?N\004\036>c\233&?I\026\206?\214\212\034>jM\264=\324B@?8g4\276\321\213\031\277\354\325Q\276\325\350\027?M\234\335>\2425F?V\257\372\277\005>\017\300\345\231\003\300K?\333\277\273`o\277\024\2523\276\0107I>\263\r\326>\025l\016?J`\257?\300p\356?|C\005@DS @\014\327\376?C.\274?\262\212\021@K@\032@Ra\257?\264\306q>,\004C\275\330\302:>S\246 >\256\233\276\276\253\332(?\360\245\236?2\373\357>\346H\222?\264\177\366>\310o\"=v\316\222?\372\237\231?\255\233u?\034f6?PQ\255?\3518\202?&\224C? \306!?\004-{?\004H\272\276\215,\310\277\270\323\320\277a?\271\277\000\305\n\274\037\250\r\277\232\276\034\277\344K\230\277\016\311m\277\003\342\032\277\310\272\257>\266p\001>\252\344\215\2755I\001\277?h\304> \350H>d\352\305>\304\245\360\275\320\365\265\276\000\245\207\277\310\301\025?\000\034\244:\311\034M?|\263\261?\316A\313?j\267\323?4\235\306?:(\000@\362*\n@L\275\376?\016\034\315>\000\216|\273\222\376>\277}P\264\277}\222\223\275\016\004\204>;O/>\241\362\035?^l@?\035\214{?\241\345\260?\315\252\220?|\324#?\006\335\000>*\254\017>\306\326\273<\227\325\332=D\337\343\276~^ \277\344$\352\276Z\023\236\276\303\214\351\276\336\212\005\277a\232?\277\212\000@\277\345\033\007\277(+\326\276\270G?=X\230\266\276\000\227l;\217c\260>\212\232\025\276\031\223\227\276\222\022\363\276\316\344\351\276\343\260\340\276\256\3111\277\236\211<\277\010\361L\277`\205\351=\235\337l>\345\177\217?}\306c?x\273\207>\340S\227?t\357\002@!\023\340?\234\026\213?\343\3265?P\252\320\276\357\n\321>4\020\255\275\244\016\255>a\330\032?\204\331\374> 6\027\274]\002W\276b\312\262\276(f\212\2776]]\277\263\270~\277\002\232\320\277/v\305\277\005+\263\277C\021\246\277\240\370\027\275\322\331\022?|\t\372\276\316;\"\277:\020e\277\000-\255\277P\030i\276f\356\236\276\006/\033\277\010\360\326>\276\001\r\277$a\333\277\266\366\322\277\016o\203\277\302\207\231>\354u%?\225\3525?\300O\222\274w\275\230\277\244\267\254\276\266\222[\277\345\324r\277\222T\335\277\331\001\332\277\331\200K\277\243\212R\277p*X\276Cu\207\277\231\377\"\277\350\302\004\277\254\014\r>\251\002\202?\222\360D?T0\221?\205\310\274?\200:\r\277\222\031\275\277\\\377\362\277\364\276\210\277\320\365\315\277\224\316\003\300\212\336,\300:\330\021\300\n\244[\277y\025#\277X6\360>.\327\250\276\215;Z\277\207)\317\276\t\0363>\t\272f\277r\254}\277\246La\276\000\026\200>\3468\306\276\276\013\232\276U[Y\276\274p!\2770\3255\277)\r\010?b\315\232?,\270Y?\200s\027?*\211!?\200L\266=B\222#\277\000\264v\277\325\213\001\300\340\212&\300\340V{\277\300}\010\274\033U\233\276\242\315#\277\300~R\277\370hb\277`\217\203\276\306\360\036\277\344^\320\275O3\201\276\020[\320<\037\3101?~.o>e\217]?z\327*=\266\331\221<\212\007\266>\032\256\346\275v\302:\276ra->\324\202\021\275\232f\356>*\326\027?\316Ya>\'Fg\276\334\326\313>\232\030\240?(\003,>\013]B\277)$\331\276d\266\026\277\231k\204?\3006\256?yE??\266\216\331?Y\225\262?r\301C?tr\226?~M\212?\345\322\303?\352&\333?|\320\326?\306\253\202?,7\351?p\\\316?\262U\251?\200\334s<@~B\276\263\253\243>\r\245c?\202\361\327?\344\317\351?&\266\272?\343r@?\317\025\017?D\340\363>\272=\212\277\367\rg\277\363\202\232\277\230N\204=G\243\270?\337\314\222?\t\251\322?k\314\367?\333D\275?Ni\266? \'1?\030\216F?>\273@?\246\237\366\276p\023E\277j\311j\277\207O\375\2764\333X\277\250\341\260\277:\361\265\277\274\001\246\277@\225\360\277L\250\222\2770\256u\277RJP\277\010:\022\277b\nw\277\270\372-\277\342\241\n\277V\273[>\217!k\276\370\202\333>\304\311\227\276\020A\303<\201\234k\277`K]\277\346\372\207\276\014!>>\314`\240>h\344\230\276\354\177<\277\255\212=\277v\341\232\277\010R\336\277z\334\340\277\002\274\260\277Nh\347\277\253\235\210\277\232\230\300\276{\377\002\277p\210S\276\236\306/\277\224*\221\277\323\247\032\277\204q\301\275\246lh>\014\263\016>\376X\002@\005\364\306?\214\246?\276\312\267\371>\204\3031>\367\333\221\277iU\226\277\256hX\277\014g\343\276P\377\226=\360\032\363\275\231\337\177\276\002\323$\277-@\036\276\267\216c?\360k\244<M\247\354\275\0238\232>\2408H?Tn\352?\206\354\334?P\023\032\275\341\207\245>\307\246c\277\322\014;\277\022\2720\277\373\363\000\300\366c\n\300\326(\213\277\276<\314\277\203\377\230\277\344\017C\277W\205D\276\224\343A?\212sX?j\247\254?\202Lb?\372\332??\317\022\275\276\022\262\337=\216\343\347=\312Z\007\277Z\257\316\277\022\367\257\277\3212\220\277*&\336>\341~\204?\332lJ?\274\002j>A\2536\277\363[\033\277\330\037\227>\227\312\212?T\334<?\230\"\243\276\366\270\032\277\035\3336\277\270\343\r>\331\223f>Vp6?80`\276x\364/?\226\335u?\374a2>\207>\247>\245\rB?l\033\001\2776\r#\277\277\212.\277h\336->\322\027\002? eC?\372\300^?\036\000Z\276\320sG\275&\326\001?b\002\361>\214h\207=S^m>\003\"\"\277\033\212n?>\357\201>e\027\026?\036\354\362>\340\366\360>\000qm;\327\251\037=\262\370\331>\354y\260=/\202\014?\210\014V>g\207\342=\nc\014\2757v\177>\363\3611?5A\252>;g^>I\225\311\276O\232\365\276-\3766?\274\235/?\\\320\234?\377\330\212?\357G\200?\"\300\323>`<\377>\364\332\372=2\007\365>\234\213\275\275\225\240F=\277\341\034\276^\'Q?\205+\202?\201m\200?\037G\\?\262\020\212>\270\375\004?"
      }
    }
  }
}
node {
  name: "tensors_1/normalize_tensors/component_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 100
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "TensorSliceDataset_1"
  op: "TensorSliceDataset"
  input: "tensors_1/normalize_tensors/component_0"
  input: "tensors_1/normalize_tensors/component_1"
  input: "tensors_1/normalize_tensors/component_2"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_size_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 4
      }
    }
  }
}
node {
  name: "drop_remainder_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "BatchDatasetV2_1"
  op: "BatchDatasetV2"
  input: "TensorSliceDataset_1"
  input: "batch_size_1"
  input: "drop_remainder_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 4
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
}
node {
  name: "tensors_2/normalize_tensors/component_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        tensor_content: "\026\247\275\277\322A\204\277\204F_\277\300\215k\276n\271\357\275`\017\276\276\300\300\215\277& \253\277\321ZU\277H\022\216\277\ri%\277<lu\277\n.\361\276_\021\230\277\000j\225\277\034\275T\277l>I\277\216\375\203\277\036\322\341\2771pF\277H$\366\276\327\323\206\277\346\003\036\276\356J\201\277\344\241O?\234\370\026?\335\304\200?\014!\315>:7A>qE\205\276\367\364V\277>\212^\277\201o\242\277FW\346\276\005Dt\276\266\017\207\276\334m1=\225\030t?\260]e>H7O\277\230\2516>LOj\277\020\326%=\272\256\002\277\026\027K\277\305>\023\277\014\303D\277\036\216\352>Dj%\300\351\341\203\277\326\n\025\277\027\014 \277\271\300\265\276\365\216(>\rM\025?\3023\236?\024#\315>\304fj?\203s\306?@M~>\225\306!\276x\245\267\276>\247]>4(\323\276\320s\022\276L\363\233\277\001\333=\277\302\237~\277}\355\335\276\026\336/\277\342k\355>\0060/\277\344\247s>\372\242\232\276\363oH?\001\031A?\314\023\355\275\217\332C>21\267\276D\251\344>\034\344\014?0\013\021?\r\311\210>\232\357y?2\260\246?\373\236\261?\206\014\246?\215?\300?R\251\t@\366\317j?\311?Z?\325D\254?`\245\270?\020C\025>m\366\202?|o|>\001\212\t\277\243\234\263\276\354v\217\275P\020\310?:C\226?\270_\300?\231a\004@{\355\230?\364\'\211?\311K\212?\361\037*?\262\241\230?\220\026\204=\204Z\251>2\257r\276\020\244l?\262\227\237?\334K\345?\366q\365?\300g\024?sh\217\276;\036\255\277\275\320\037\277\200\265\346\273\270`\340>\330\250\232?}R\016?V\364\t\276l\035\225\277N\362\231\277\304\213=\277t\0039\277\r\037\217>\366L\223?\364\002\232>\240\256\366>\332\242\031\277\024\177\317\277\226^\214\277\253\201\252\276:\344o\2771\2346\277\326\272\246\277\264\360\326\277\373g\314\277G\347\213\277\270\306\250\275\233\317\234=\367\236\332\276 +\371=\262\032\216\276.WO\276N\344W>\3031\350\276\205\252\244\276\020\361\204>\255k\006\276\002\215\036?l\037x\276\354\350\366\277\252\317\355\277E\253\367\277\236f\271\276h\263l=\2614\347>\350\274\252?\030\343\t@\261\260\332?\261\r\327?\326\300\320?L\360\307?\364p\273?\234\035;\275\206(s\277\362\331\213>0qR? \362\254>~\306p?\316\372B?\300\032]\2741\312\325>\024L\t?\300UY>\336\035u\277|\216!\276\216\226\240>\274\376j>\214\177\017\276m\376\326>T\341\013?\032\366L\276(8J\277>\225\006\276~:\310\276\247\217l\277(\016\267\277q\337\006\300z\t\200\277\037\213h\277\203\257[\277\327|\242\276!>\021?\201\230,?&\002\001?\347\254\007@\252I\357?)\353\362?\013C\333?G\030\314?\211\246\315?k\344\326?q\242v?\000\r\312>\337\227\205>\004_\033?\020\305\226\276\271Q\031\277\251C2\277\374U\234>\232\243`?N\326\264?,\222\320?N\031\003@\020\235J@\220\235\255?\200\017\300?\253\243\031?\271\335\247?\017\240%?\020F\276\275\211\311\035>\211\253\353>\266V\257\276\324\037x\276\331\'\325\276\030\324\337=\242\333\021\277P&t\277\370\352\223=\352\216`\2778\361\226\277h-\333=\372\373\216>$\026\265\276\371Z\265\276*Rq\277\312\"N\277g9\023\277\310\206*\277\300\234&\277_]\023?\235\0300?\003R\205?pOa?L\353\032?\350\273\242?X\354(>C+d=\255\333\263\276x0(\276 \014\347\276\224\252`>KW\004@~\336.?R\223\230?\322zG?S\007\257?\355q/?5\270v?\320u\037?\242\224{?z\331\263?8\002n?\262sg?\030\250\031?B\036C?\2502d?\202\246K?g\266\204>\212\306\207>\025\004\'\276\312\375\000\276,\362\252\274\337\016\006\277C\2522\277f$\022>\366\025\025\277\334\014\340\275\030l\201>\356c\267>\264\256\276?\261u\305?\224\177.\300\217E-\300\340\371\306\277n\241o\277\235\030\200\277\376M\265\277\230\307\277\277T7\310\277\221X\264\277p\363u\276\n\271o\277\032\037\241\277\020\353=\277_\356\034\277\364\346\230\277\322=\203\277.\373\010\276t\2168>\302\013{\277\300\250\302<\365z\321>l\253_?\347\301\016?\320\2230?\301\257\037>v\360\200\276\001v\301\277\210\215\t\276\027h\322>\374NV\276NB\212\277\250\244P\277\307\2207\277\226\007I\277\352\2504\277z\323Z\277-\232\307\276\202G\354\276`\372@\277\315\201\254\277\342mN\277>\371\347\276\226[\242\276z\230\310\276\370\354D\277\330XA\277`\212\317\277\230\022\000\277\022W\344\277\002\344\377\277Zk\214\277\024\313\215\277\214}\311\276T\\\205\275\315\270\027\275 \357%\277\303\005 \277\270\270H\276\203%\205\277\231\272\002\300\225C\361\277\3507\212\277\231A6\277&\245\354\276\0145o\277\014\221\374\277\220\351\'\300\341\360 \300\2500\014\300\264D\225\277muX\277@\3451\275\213\0322\275\0067\r\277~\234\013\277TW\240\277\013\327\226\277\377\272\263\277\347\356\261\277B\327\305\277\351`\241\277\241\267U\277h;D\276ci\343>|\2778?\006\364\036>x\220\206\274T\312b=\336\206\346\276,\215q\277X\363\360\275\3643\260=y\324\323>\t\031l?\274\t\232?(\304\304?f\332\302?\313bM?\314\201R?\270\026\'=\233\005\317\276\370Y\226>D\306S?/|D?\026\331/\277t\344|\2774\033\362>\340\262\316\276\020\302\357<G\250\344>r\334\246>\030\004U\277\226K\227\277\351\235\213\277\304\307\236\277\331\213\005\300\314Z\277\277\300,\342>\320sD?4<D?\365\234\001>\260ct\276\324\023z\275r\372\224\276\250\024k\277Lx\277\277y\234\241\277\342H2\277\2625\275\276\277\216X>*13?\362k\353\276x\177h>\341\373\327>\226\223F>\306\236\302>\315\361\224>\327\250\'>\277\246\350=NI\204?rY\220?7l\222?\214\301\326\276H\270\324\277\205^\332\276\244;\035?R\320\261?\330~E>\273\270^\276 \220\027=&10?\235<\255>\321\306\213>\250\220I?\346\360\345\276\022\177\265\277\370e\013\276\254\"\022\277i\204\233\277\375.\357\277\022\303\014\300~Q\r\300\345<\317\277\276\033(\277\377\004\261\276\324\212\030\277\266z\n\277\350\230\265\276\037\032M?x\271\276\275\204\035Y=x<\203?\336;\007?\353\307\241?\334J\022>\270\206\260>\314h&?L\020\226?\022Ch>\240/\264?\245~\373>\270!\341>[T\215\2760\353\340>\324+\342\276lu=\277\031y|\277p_{\277\311E\342\277H\357\331\277?\352\273\277\260\262\271\277\224S\205\277\275F\235\277\2360\230\277[\202;\2776\302m\277H\313\241\275\342)P\277\367\311\243\277\377b\243\277\377\270^\277 \204=\277\022\017\264\277\241g\300\277\346Qx\277\365\371\314\277~\345\001\300\276l\345\276\267\"\244\277\010&0\277\227~\226\277\\&e\276\342\256\346\276\362\302\303\276\020;[\277\033^\251>D=\370>\242\000\"?\326F$?\310\014\013?\250l\303\275\272\254\025\277\000\352\221=\232\'\370>7\360\271?x\365F?\020M\023?\332\177\027>(\222\355\276\022\265D\277\230\375\'=\361\277\363\276p\005\t=\213\244\017?\370Z\010>\326R\242>.\211\202\277\220\241\200>2\220\001\277\016[\210\277\314\372T\277 }\372=\237\236\371\276^\3450\277#\364\'\276\213}\347\276\322c3\276a\211$?X\215\262>\212BO?\276\034\320?\3731\344?\r\372\234?\371\303a?C\n\202?\302\273*?\355\177\204?\326\203o?\032\376\225?\314e\365>\253L\237>\000g\253\276\235\277\221\276T\276\363<\270:\351>G\036\230>\257\326\016>\022q\013\277\200\2509\274\265\036#?,\300\032?\317\273\370>\004\002\200?\210h1?hif?`]\311>\232\241\005\277x|\337\276\276\301\302>\367@\003?\371\010\206?WKs?8\312\273?|\336\211?`\253U?EX\212?\354K\337?-\321X\277\207\316\223\277\252\204\253\277\273W\323\276\024f\023=\032\316\000\277O\302\342\276\030\300\n?0f\256\274\004L\r\277Vf\372>\214\375\345>\354\250\331=\240\343\024=N6\020?\213\371#?P\"H=\r{Q\277r+\332\277 1\250\277l\032\031\276?\275g>\342,I\276T\027 >\300\307+\277\341\007\265\276vpj\277\204*\326\276&y\276\276\014s\241\277A+\006\300\247\207\023\300^\375\003\300m\"\210\277\271]\017\277\350\323\311=\216\2006\277\266VB\277\371\305\014\277\264\221X\276B\0060\276t\306\n\275-@\270>t\027\253?D\355\364?\357\343\337?F\221\367?9\026\030@\003E\301\275\276\207}\277B\330\337\276g^o\276\r\300\306\275\377c<\277HHR\277*o\253\277\030\324\343\276\350\217\\\276\204K\351>K;\344>\345\220\236\2760\315E\276\270\300v>>i\233\276T*\304\277\207b\005\300\350O\246\277\242{K\277\376\221\235\276\330\325\344\276T\245\323\276\271q\346\276\035\224H?\237\r\222\276\0326J\277\\\215+\277\263l\021\276cC\271\275\003\247\020>\246\350\272>Z\277\360>[\316\372>\020p\025?\375]#>\034O\r?2\021|?\316&\210?\037y\267>\204\226\346\275:i?\277\210\216m\277\325\204\231\277\377\261`\277\320AB\275\006$\275\276\264\344_?G\177\326?\220\255\037?\320r\256\275\031\303\021?\207h@?\030B\316>,2\027\277\2724\032\276\302m/?\340p\273=\001\357\231\276)\275\356\276\016W8>\222\321\234?\272\244\010?`\034\002\274P\250\331>\364\320\r?\365U)\277,.\021>&pI\277\016V\003\300\233\216\346\277\314\026>\277:\343\270\277h\355<\277P&k\2766\200\264\276\240\314\021=V\243b\276\220\325\332\276\n\027\343\276\240\310P\2760\221$\276\256\'\270>\307S/>\022\207+\2765Yf\275\271\326\365>\010kD?X\010\212?)\236??\206\205u?W\317\226? +C?\214+*?\021\207)>I\n<?\376\263\227\277Z\250\310\277\263\334\022\277\322\315\203\277\224\230+\2771\005\307\276\020\341#\277\024\270\017\277P2\366\276#*\372\276\242\025\247\276p%\336\276Iz\212\276n\300?\277@\r\362\275\366[\363=\002\320D?p\200$?\021\331\013?(\027\366>\246\262\202?\312$e?\214\213\343?\006zM?\311d\203?\352\204E>\230\260e\275\242\311\002=\222\216\020>\010\263\014\2766]{\276\263\204E\277f\002n\276\340\214A?dg@?\257\205t>\000\207\002?\350\342\\>\335\337\027>\n\254\340\275\375\340\305\276\334\233]\277eT\020\277\344p+>\004v-\276\221\250\255\275y\320\375\2760\275\214\276\r\375(\276 \035\202>\306@\336>\020\010\255?#\325\002?u\327f?\371\230G?\216W\225?W\313$?\350cT\276UuB?E\007\003?\252M\034>$\344*\277\300c\'\277bz \277\225N0\277\n\317\025\277\341\253Z\2774\250\210\276\232|\221\277\262W\013\276\331\367<\277\360\227f\277\220N\360?\347\027\333?U\361\315?\227\rj?\320A{?\362\273\202?\364+\366>\345a\343\276/\\Z\277\320t,\276\322M\004?P4\261<\321\342]\277\245\030n\277>\302R\277b\371\362>\241.\300\276\201\207\336\276\210\323\000=\002L\307=\206\3307\277\276\220\321\276^d\360>\030\255E=\345\247[?\300)2= \274\344>\273\235\204?\3267a?ZY\035\277\241\0105\277\222t2\277L\330T\277@\355\262\275\331\255\203>\033I\213\277\016\272\203\277\"\005\340\276\260\020\300\275\322\246\201\277\220\177\r>\356&>\277;o\212\276\226\334c\277\177\326)\277i<\\\277\313\200x\277\300\263,=,\036\024\277\340\260\377\2748kV=\316is>Q\265\027?\300\tp=\326N\334>Z\3200?\242\367\244?\312H\200?@W\210<n\344\265\275/\337Z\277\315\233[\277N\"\271\276\232\023\006?\304\027s?\376\030\201?\344\373\252?T\227\305?\254}\370?e\321\023@Ru\030@\266\345/@\203\216\206\277\304\026U\277\260\256h\277l\276\001\2776\002f?\224\016\031>zO}\276}\'\377>Y\374\032\277\250z2\277;zv\276\300\337\240>\244F\340\276zM6\276\n\246j>L<\206\276\002\256\256>PF\306<\221D#\277\214i\r\277T\003\237\276\020m\266<\006\037:?7\254\247?v\235%\277\351&&\277\312\341\021\277O \357\276\340\325\330\276\344l\205\277\203\024x\277\225\265\000\277N\336G\277\211]5\277\341\030b\277\t?\201\277\000h\357\274\356\206\001\277-;\260\277\240O\230\277Z\230\324\277Z\344\207\277D4\242\277\202\376\321\277 B\303<\335\304%>W\340\221?`i\243?\025n.\276z1\263\276\336*u\276}p@>\026T\035\277\276\003\300\276\256\004\017\276]\034R?\370\271P?H\267G>\340\345\037<\201j\313>\340k\035\275\2759\236\277\234\213]\276J\303\224\276\000\202\373=X\222\031?\305\261\013?\262\375a?`A\364\275%m\324\276nw\205\276\025\223\\\276]\336x?=\0243\277\013`\276\2760uM\277\354\254\236\277kx\252\276\306\375W\277c2\377\276u\202\256>\352\245 \276\204\313b=\363\207E\277\022l\313\277\210\225\333\277p\322\277\277$\373>\277\217\350\207\277r\033\320>U8\224>\252\024\031?!\255\004?<\343U?\252\257\003?\320Y\224\274\010\351}\277p\"\264\275\246\235\007\277\320\247\256\275\034\324\236\276n1/\277\210x\262\277^\255\000?\200\373\365;}\257\211?J\255\007?\302\276\021?P\034l=\256\261X\275\337J\220\277*\n\253>p\276\365=\036\2777?\213b\000?\326\311\034?\274\005\213>\010E\310<j\344\247\277\033\243\204\277\025\336\035@\000H\363?\363\264\344?h\371\313?\215\313\273?z\317\265?\034\224\350?\216\006l?x,e\276\214\\F\275|\2541>I\215I\276\256G\234\277Vu\342>\300\"%<\254\001x>\024\037\200?\320\302\262?\030\206\345?\033\223\362?\346\336\301?\364-\335>\\%\312\275\364\r\032\277\223\021\244\276\026\354\267\276\367\234\256\277\010\362P>$eg\275@W\005\277n\306.\277\210\346\226=d\331\232\275\244p\246\276\'fk\276\311\376Z\277\000\244H\274DJ\230\277\003\002q\277\223\330\234\277=_/\277\252F\261\276l\023\347\277\316\277\277\277f\206\312\277\2773\r\300\244\251\266\277\016#\274\277tk.?o\251\213?\272\234\237>J\263]>\260\r\n\276u~ \277\301\344\000\277\224\361i\277V\335B\277\306\336a\277dy\206\276\300\245A\277^\373G\277\330\300\324>\016H\234\276\310\243^=\270\2751\277\356\220\236\277&\256\230\277\337+\234\277Ni\355\277\271\r\326\277]\006^\277\032\314\030\277E\340x?[0,?\362\030s?\010j\210=\306\205\254\276h\254\243\276B\025l?\302L\310?\2247>?\356{4?\377\025\312?\333I\264?)\241\230?\014\004\227?\320\300x>V\027\275\276\310\307\206\276\216\234\r\277Nq\217\276\372\217\211\277\210\322\212\277\346\3538\277n\245f\277\254i7\277oW\303\276#\370\r\277P\330\231=\271j\236\276\211\266\270>\005\020\325=\373\346N\2778Gd\277\3075\235\277\315 ]\277\262s\224\277x\340a\277\3070\235\277\037\307\315\277\274x\301\277\357)\204\277\322\201\224\277s\037_\277f\247\021\277\004\376\246\277\316\212\030\277M\351\265\277\340\001\306\275\034\025u<\310\316\251?\244\351o?:V\347?/\377\325?\030\230Y?\030<\253?dR\337?\321\302\216?v\242\300?\265d\226?\272\000\267?\250\242\321?6\'\n@)\207\304?\234\353\007?\236\233k?\212\221\306>!L\337?Qz\273?v\230\353?\374\030\345?\214!\014?\\HQ>s\315\361> \031Q\277\301\236\210>\254\033q\276\334\216:?\351d\001?\014\304\353\27619\007\277\260\204\205\275\273,\005?@\3055?93\375>),\"?\010AZ?8\325\303\275\357\241\225\277k\331H\277Y]\306\277D\277\223\277\360T\300\275\361\242\343\276\214:\204\275\230\256(??\362j?;\363\212?\325\224w>\212(2\277\350\263\330\277)\315\241\277&\241\205\277d\202\210\277i\013C\277\202({\277\333\306*\277\226\300?\277\300gR\275U\201\216>2k\032\276\325=\255\276\235\275\256\276]\301\217\276\217\276\263\276\320\371\347\276\020\r\226\276\204\"\013\277T\327\230\276\260\253V\277jp5\277Y\373\274\277\263k\230?:\035\323?@(M=\035e\333\276JW\345>x\312)>\310\223\243>\330S`\277\227q\010\300)$\331\277\354Z\251\277\302\360\246\276\377Y\200>P\217\372>\3062F\276|\313#?\260.K?F\354c?\330\201t?\206\346\"?\243\247|>\272\224\335>\353\225A?\353=\340>\340\276\224\277\320\320t\277\332\231\251>Xk\031\277\010O\020\275\224E\276>\362>o\277\337\222\334\276\370#e\276\254\006\026\276=\307^\276\324%G?:\005\247?mb.?\224c\271?-]\t?}\024\252?J\002\365?hX\313?\024\256\205?\244a\000>8Y\200>qW\327>\032/\250?\215\221\365\277\276\370\022\300e\325-\300\035Q\230\277\0072\253\277\267:\226\277z\317\035\276,B8\277\330\242\010\277\216\'\202\276\376h\205\277\264>p\277\265\356\032\2778\032T\277\235\301\345\276x\330\201\277\tq*\277\330l4\277k8>\277gQ$\2770,\272\276\256s\222\277\241w\273\276\242X\020\277M\371\257\276\341\307\210\276\220aM\275\021\000:\277\262\014\316\276]h\205\277\034\027\360>\333\354:?\353\225\211?\0145\240?\364\334>?\254\235\024\276l\221%\277\220\nv\275\010\0061>\024\r\222>\005+\003?\022.A?6On>\200\353@>\217\247\333=Qn\240?\314\374\222>\177\024\217\276\357\333\246\276\216\341\006\276S\367P\277\304p\022\277\344\303\303\275Ct\r?||\022?l\237\301>\310\306\366>x\232J?\177\264\'?\344H`?y\337*?!\334\274?\004\275\345?\320(\214=\361\321\316\276\252k5\277\020n\256\275\347\227\324\276\340\035q\277m\375\255\277\r\316\205\277*\177\332\277\252\317|\275\304F7\276b\250\203>\243\276W?+~6?3\325T? (d?\033\374Z?\311G\235?\276\370\306?\036\345\321?\254\n\326?O\026\347?\r\307\271?\353\320\211?O\250\300?\353!\235?\200\255\326>\322\332\216?0\333!\277h\021\016\277L\341\004\277\300y\005\275\002\032\017?\264}\037?\302\201F?\360}\210=\372\363\333>\221\372<?`\rx\276d/H\277PbW?n\321\235?b\235U?\237R\330>\332\204C?\374\230\253?\267L\241?\332\357\025?\2261\310?\334\373R?\240\345]\275\273\003\206>\326\251O\276\263\006#\277V\204\010>\016\332d?\251[\257?\272\013)>K\003\004\276\n\322\031\276\254\357\265\276\313\004\330>\217\2619\2778`\323\276\303cc\276\2367l?\"\203\225>.\344\010\277P\211\356\277\034\246\253\277d\276b\276\315j\250\276\257\2547?\212\314c\276\204\211X>w\230\007?\334\233\246>\003\261\263>\020\255\323\275\276\021\210\276\320Aq\277\243\230\007\277\354@\234\277\312\201\223\277\260\210\206\277\217\036P\277^\025\006\277\363,=\277\2239\257\276\030\201(=\223o\344\276O\312\326\276.\3460\277\200\216\365;\263\354\230>x>\336\276u\321\260>\344\221\017\276\367\212\222\2763J~\276\263\200\217\277}a\232\277M\026\002\300\271\361\000\300\276*p\277X>\244?`\271O?0\252M?\254\026\227?\366<\036@\302\3226@\353\354\t@\264\334\007?\311\217\204?}\035\257?\222\366\254?\334C\003?\256\327+?\314\3504?\374og\276\274)J\277x<:\277<\210(\276\265\327m\277\r\3625\277\213\320\007\277T\213`\277\203\366\244\277\n\263\210\277\301\222\033\300Gd\330\277\300\206\366\274\213I\330\276f\325\014?\030\247\017=\352J$\277\355#\263\277\2274\220\277\216\345\312\277J\225\244\277\352r\256\277\256\343\214\277\no\221\277\2049{\276\200\250\t=\024_\356=\333H\360\275\206X\215=1>Z\277l\254\000\277\234\202\t\277\265\315\020\277`\254G\274\357\207\267\277\230\237\002\300e\257\333\277\266\234\267\276vG`\276\024\204J\277\260\270\020\277\304f\253\277\3425\253\277%\217\222\277\212x(\277\332\010\247>p\373\240=\225#\014?\207\220w?\256)\245?\372\"N>\356+$\276\311\2616?\212\217\031>\240\375 \277\2129\317\277\244\022\261\277Q<>\277\215\335-?@\351\256<\253C\013\277\342\033\007\277\232\'\216\276BI\202\277\\5`\277\314\n^>\245\026\231\277B\202\355\276l\275\274>\206\316\315\276w\177\353\276\272kO\276\303\203A?\2370\204>q\245\310>\241\033\245?`\236`?>H\262?\373\250\312?2\367i?\024\204V?\204\306\361=\320\273\260?\215w;?\254\030Z?\032m\225>\022\333*?\000\313\036?\020}M?>\247y?\266\302@?\344]f>(\234\300\276\220}\000?,\n\001=|Q\255\276x\324\307<\304Yw\277D\242\200\2778zB\277\356\014\316\276 \017\217\274r\243\352<q\362\034\2746\257\245=\264\243\352\2769\232W?\325\225\375>\376qs?\310\352\312>\330l\233\276\361UX\277\363\244c\277\346\025\370\277~\344\320\277\320\312p\277\320X\333\276\320.\\>\262.\020?P\227,?\337/\212?0\220\247?\360\312\325?4i\256>\337\3237?\375\257\210\277\324\211\373\277\242H\300\277+\342\307\276b\346\255>@\255a? \017z\275\223D\027\277\336\273f\277T.\220\277\022\251\252\277z\345\265>\014yf?\311\304\030?fev?\213\002\200?\234\236\265>R\031\373>\227\326\354>\320\030u\276\310\0252\276\034u\371\276c\234\205\277? v\277\263Gt\277\262\334\324>\207\335\364\276\275\224\352\277\000\331\241\277\276\252\220\276z\305\211\277\207\036\210\277(Z\217\277t\367\020\300\t\240\211\277\026\243\005\277 \202(\277\330\027R\276v\004\246\277+\241k\277\263\377\201\277\261w\000\300\014\237\245\277\037y\257\277\333\373}\277\272\206\304\277\201\375\331\277\2507\275\277\230\302W\277\330\251\031\277 \314\014=\213\245\245?\222\340E?\006\'\324<\2261d?\034\'t\276\257\257R\277?\246\032\277:s\023\277\235_:?\250\3208>p\322L?,\1777?/\366i?\006\243\004?\024\212\200?x\311~?\317\013\316>\021\323\223\276\263\245\332\276\212K\320\276\273\3147\277ziY\277:\0026\276\351\346\373\276\370\3763\275\237\033\215>\221\223A?\203c\327\276\254\357\267=7\324\021?\302\266\370>&\260\350>\2401[<\317\223\202\276\367\006X\276\210\341\031?)\025\r?\222\212O?\300\002\231\276P\221\006\277\t\221\250\276<\3655>\022<\034?n\200\034?\017\253\256\276^K\271\276r\263\002\277\260(\346=\370\301A\277\225\2218\277\031~/@\350\2410@\356\250\377>\322t|?\200\315\245?9\250\203?\214`k?\017]\021?\322\341\271?\020\t\330?\2738R?\032\220\276? \224 \275\200O\036\276\324\376\275>\370\n\306\276\304\232\247>p\376\330>\3601\371>j\326\003?\2569j>\241\205\211>\301\025\264>Z\013\345>\020j\272?h\256Y?\206\000\025\277\207\212C?`\374W\275\310\0108?j\270\\?\306\005\007\276.\224n>3j\003?\317\025\210?C\373\222?\254\244\241?\3344W?\000\177\342=\366\376\017?\245\252\336?h\346\335?\226\212\204?\r$L?\357;\351>\006\225\203?M\030\030?x\321T?B\334\275>z\3768\277\232\3670\277-^\252\277\376\215\317\277\303\300\252\277\307\244\025\277\300l\n<\365\005\265\276\r>\216\276hi,\276\'i\206\276\365x\310\277B\374\306\277V\233p\277\001\227\210\277\024\335\000\300b\272\263\277\242\231\341\276\361:\227\277\250\316\000\276\352Op=\024\2517=\343\216N?[\220\327?s6\302?\210\234&?L\272\204?6\350\223?(\363\033\276\203\253^\277`\035(\275\306\375s\276\376\322\215\277\270\246\253\277*\177O\277\356\222Y\277\024\264\023\276\271\344R\2750\020\206\276$\214?>q\320B?KHF?\214\177\246?\306y\252?\031N\254>\3412\221>\034So=\200\373\361>s\264\216?\270\236\247\276}\242\275\276q\246\210\277\331m\025\277\310\037R\276v\343D\277\310\320\275\277UD\360\276F\350\235\277\220\001\235\277<\032\204>4\t\035?\023\326\223>V\271u\276\276t\231>\224\227\305\2750\321>\276Y\"p\276\217\0247\276\330\326d>\300\034\341;J\315@?J\377\177\276T\217\365=f\3211\277R\365,\277@D~\275\022f\226\277\207\365\t\277\345\025y?n\030\237?\373\347a?\017,\353>\346\371\233\276\234\330P\277\250F\223\275\246\311J?\236x\335?\251\313\361?\037\262:@\370\352*@\006g\367>\354\207\014\277~Rc\277\002\377\346\277\277\022\354\277|\266\271> \351\250>` \356=\'h\232?\231[l?\366\312\230?\222[\344?\320!\364?\207\007\014@\355\003m?\207\302q?\275^\035?/v\366>BH\260?\020\341\366?\300C\276?\232\273\031@\254\010??\020\206\227=t\001*?\320-H?\221\243\226?\315\357\"?\302\331#?\326F~\276\214C\220\277\236\177p\277\002\3368\277p\244\230\277\230\277n\277\232\264\225\277\266j\326\276\275_ \276\325H\212\276 \317\321<{\366\305\276*\366\t\277\330\347\247\276Q\260\220>0SV?\024)^?\300\256-?\366\2077?\262D\364>\267f1\277\360\307\217\277\346\303\205\276\016\363\330\276\341nH>H\323\235?\344,]?\202\014\257?q\234\017?\003\306\330>-\241+>\202l\346\276\004U\335>\256\206a?p^s?b\327\214?\025\274A?=]$?h\352\333?=\315\247?\276\271\307?\\\257\353?\302-\256?l\321\377>\213\305\000?\371\213\207?\205\204\200?x\302d?\273\355\257\277\214\316\324\277\305\375\310\277\321`\260\277_\253=\277i\217-\277\006\203E\277\260\026\013\277\022\224j\277\352*\021\277Rn\217\277\356xq?\252\364\310?~\244\312>1\341\221\277/pz\277\340q\212\276\000J\325\271\025it\276\274\3467\277_\206\321\277\3331\341\276j\023\257>i\306\237>3Q\017\277r\377F\277\'\212\251\276\240\364\357\274;\213\233\276\370*\016\275;\002R\276\307\301\342>\265\371\374>\362\251V?\0361J? \217C\275\242\211\252\276}k,\276\350\236\002>\232:\210=\006\347\013?\361\"G?|\231T?\3209\t\277s\022\366\276\360JR=\311\313\017\277\017\2366\277\201-\324\277\004}\253\276w\250Q\277\350\205\314\276b\021d>iMe?\"\212\365>$\336e\277\3439\020\277\004\2740?\222=p?$\014\224?\264k\267?\"\207\343><\211\310=\237\300\n\276\314=\203?YE\247?vED?\316\316\201?\002\242\241?r<a?\267%\370?\341\317\r@ zN\277\021\226\223\276\310\367\014>\366&9?\370e\367>@\306\330\274\005<\321\275\346\216\227\276\240\026\204;\207\204\025\277\242\364\256>\202\371$?:\017\311>>RH>\360\343D>>\002,?\311\201J?S\026\034?\3003\306>:\254]?\277_,?\266\247\036?\331o\252>\256H\361>S\322|\277\250\036\313\276(\201\211?\200\215\210=\3044$\277J,\n\277F\250\253\277\034\346U\277\335\2713\277\200v\310>O\250\275>\027$\216>@\016>\273)\250D>\250\365`?\274\255Y?g:\300?N\236\330?t\352\236>\314\0338\277\211\002<\277z\267\241\277;\326\260\277f.\245\277\365\002n?\255\242\230?\226\351\204?H\030\202?$\377^?\272/2?\372s9?([\250\275/\347\273\276fjR\277\210z\001>P!\355>\362\342V\276\272g\202>\270M\307\274\030\243\246=x\237\205?t^\233?\020`\261?$o\205?\312\207U?a\2467?jV\022??\315R>\216\260\210\276\tLH\276\003J*\276\316\374\241?\271F\237?\020\357\321>ur\362\276%r\230\2774\265g\2779\365\031\277\224*?\277\255W)\277xC\010\277\336^\264>\346v\030?\030\222\225=\031\324\227>\'\322\352\276\372\250\325>\306\324V?\3722\307?\346>\357>L\317B>F\010\205>\354-\351=\340\225%\276(o\307\276\335\314\276>\246\207\'\276h\023\253\274\032\224\243\276n\010\031\276+\306\300= \352_\277\352\027D\277\342\236\333\276\301\253!\277\224\257\230>xY*\276\366\373\342\276\214\340W\277\264\343\241\277N;\345\277p\000N\277\235\024B\277#~F\277\203\273V\277\232fe\277\301\320\343?eY\213?\2603B=a\352\306>\250\322\231>\246\261\320>\273\350\237>f\261\307\275\"a&>/C\362?\346\346\024?Y\304\017>db\007\2774\177\350\276P\276\223\277\320\221\n\300`\324u\277\222\034\254\277\233B\310\276\364D0>\010\303z\277\026\230\302\276\234-N\277\305\342\231\277\215\202\370\275\242Y\021\277\010\3377\276\250No\276\014QO\277\032\327\255\277Kv\240\276\240\357\214\277\372\353\237\277J\206\344\277B*\002\300t\225\345\277\222\276\325\277\337sE\277\225\335b\277V\036\212\277\030\332\235\277\243q\001\300\360t\324\277\253\203\233\277\314(\302\277-\320I\277?\223\204\276\024k2?`\245\330\276\\\033a\275\350\302\267=\314C\006?P\244\250\275:c\215?N\306]?\004\331s>\0024\211\275\250\371\"\276\026&k\276C\336\006\277\035\201H\277t\306d\277\342\244W\277\032\255\207\277\374\rU\277\304\271W\277\270`\234\276\004N\271\276\314\313\217>Z\325L\2764\314\022?\325+t?x\217c?#kJ?\351\255\203?\242\313\203?^\345\031?\\\2360?\372\364\304?\224K\355?\3343\353>\342@-?\372s\230>\247i\020? \236;\276!Y\320\276\027\331(\277\360\014\020\277\242\351\017\276T\351\"\277\225g1\277\244\002o>x];?\346\364\262?.\353\215?\225\026\037@q6\356?o\343\t@b\220\331?5._?\277\337\230>\022\256\236>\300&e<\277\331]?D\236\006\277\254\270 ?\307\246\247>\265J`>\024WW=c[\235=\332\304-?C\203\324>\202\224\211>\024\263\324<2>\201\276\204/\243>5f\'?\270\225\303\275\013]\352=\362\372\225=\213\241?>f#\373=\276\n\022?~@\036?\34778?\343\234\010?\220\340\204\276\264)\207\277\036^)\277\000\001\216>\342\236\336>\204\177\253?Bo\001?.\016\035?\312Xg?A.,?&\3616?<TQ>\216\003\004>\002\201\212>\027+\013\277Wk\371\276LK\325\276\334x%=3\376\237\276S9L?z\236\244>\375\2240?h`\200?|\203\030??\260!?H+\316>\217\220E?\300\216\254?\350\203\216?\261\0270?\322\303\240>\300\023\372\274\037\355-\277((\036\277\000\033}<\213lF?\273\311\224?H\256\271>c\246}?#\305\202>\221\246I>2M\300\275,\257\204\277\235\343)\277]R\350\276l\002\211\275S\311\331>\000R\232=G\231\200>fI\220?\354l\355?um:@\r\035J@Mtd@\302\360\005@\010@\026@\032\246\r@k\204\006@$8\033@\343\247\r@\322\203\337?\316\326I?6\2636?\274<&?\210k\017>0\272\006?\026\312\370\275\216\234`\275\002|\017>\200\267\365\276\002\314\317>\220\275S?\231\272\244?\033\332\203>\240\200\r<s\027\002\276\005\304\217\277tD\312\276\327\351\240\277\310X\312\276V\242\366=+\304\275>\254\023&?|K\360>\207?\337\277\033:\240\277\200\324B=\365\245\205>\315\201\002?\240z\340\274\016\373;\277\336\3276\2775\260[\277\032u\254\2773)l\277\020\257\245>\311\372\237>\002\033\273>\027\003\256>\027\245B?\242\027D?\341Qj?\253M\235?\025\277\264?_0\265?T9\372?V\301\256?\346d\236?\010\224\316\276\36219\277\271\364\177\277NC\221\277\302\333\257> \372\035=\007\036\312\276\004\014\250\276\260\3536>\346)\263\27607\342=V\357\352=\341\3450?rn/?\272\370j>bc\005\277\022\324\375\276\302\364d\2773\017\317\277\334\210\305\277,\363\017\300\277\306\242\277\336\255\177\277\230\231\200\277\272\343\020\277@\332\326<\177\350\273>\276\002x?\352\324\321?\021\000[?\204\327\356>\340\276\334\274\363;\006\277\355\026\205>#\260\312\276\232\235\332\277\234\200\205\276\257}2?\250\257+?d\014\">\200`\025\274g\t\006\277 \315)\276\024\367 >\376_\t?\006\261\232?\"\351Z?pB]?\326\361\210?\374b\272?\007\313\242?h\345\235?\370\227\t\276\2602\016\277lk\204?:\336[?\226xd?\214\201X>\202\347\024?z\250*?\327\244\202?\332(\230?\"\003@?asK?\024\300\025?H\010\021\276\362\032\215>J\222\233=w_V>\016\310\247>\0276)>\355\204/?$\376\364>\036\252Q?\206\260\212?\006\372\264?-\357\323?$\036\003@\323\204\306\2762\tz\276\334\363,\277>\221,\277C8\217\277\350G\352\276\220\230k\277\264\267\213\277No\223>v \'?\025a\223?\370\311\266>F\272&\276\031\262U\276M\371\003\277\005g:?\376O\252?\314\3561?j\225%>xK??_\301\264>\340\\\036\274f\000\271\275o\363\361\275\021\246\316\2763*n\277\237 \354\276(\022\030\2760%\235\277M\n\250\277H\337\207\277\000\220\256\277\034lH\277 \237\222\277\034J\323\277>\261\330\277@\204\202\274\016m\354\275.\211\200\276`e\027\277x\344N\277x\316\"\275\312\212\210\277\316C\262\277\272\344\211\277\312\236\032\277\330X\007\277\374\016r\277"
      }
    }
  }
}
node {
  name: "tensors_2/normalize_tensors/component_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        tensor_content: "\322A\204\277\204F_\277\300\215k\276n\271\357\275`\017\276\276\300\300\215\277& \253\277\321ZU\277H\022\216\277\ri%\277<lu\277\n.\361\276_\021\230\277\000j\225\277\034\275T\277l>I\277\216\375\203\277\036\322\341\2771pF\277H$\366\276\327\323\206\277\346\003\036\276\356J\201\277\nU\254\277\234\370\026?\335\304\200?\014!\315>:7A>qE\205\276\367\364V\277>\212^\277\201o\242\277FW\346\276\005Dt\276\266\017\207\276\334m1=\225\030t?\260]e>H7O\277\230\2516>LOj\277\020\326%=\272\256\002\277\026\027K\277\305>\023\277\014\303D\277\036\216\352>\366\371\374>\351\341\203\277\326\n\025\277\027\014 \277\271\300\265\276\365\216(>\rM\025?\3023\236?\024#\315>\304fj?\203s\306?@M~>\225\306!\276x\245\267\276>\247]>4(\323\276\320s\022\276L\363\233\277\001\333=\277\302\237~\277}\355\335\276\026\336/\277\342k\355>\0060/\277\026\010\007\277\372\242\232\276\363oH?\001\031A?\314\023\355\275\217\332C>21\267\276D\251\344>\034\344\014?0\013\021?\r\311\210>\232\357y?2\260\246?\373\236\261?\206\014\246?\215?\300?R\251\t@\366\317j?\311?Z?\325D\254?`\245\270?\020C\025>m\366\202?|o|>\022\016\031?\243\234\263\276\354v\217\275P\020\310?:C\226?\270_\300?\231a\004@{\355\230?\364\'\211?\311K\212?\361\037*?\262\241\230?\220\026\204=\204Z\251>2\257r\276\020\244l?\262\227\237?\334K\345?\366q\365?\300g\024?sh\217\276;\036\255\277\275\320\037\277\200\265\346\273\345\t\227\276\330\250\232?}R\016?V\364\t\276l\035\225\277N\362\231\277\304\213=\277t\0039\277\r\037\217>\366L\223?\364\002\232>\240\256\366>\332\242\031\277\024\177\317\277\226^\214\277\253\201\252\276:\344o\2771\2346\277\326\272\246\277\264\360\326\277\373g\314\277G\347\213\277\270\306\250\275\233\317\234=\357}\302\276 +\371=\262\032\216\276.WO\276N\344W>\3031\350\276\205\252\244\276\020\361\204>\255k\006\276\002\215\036?l\037x\276\354\350\366\277\252\317\355\277E\253\367\277\236f\271\276h\263l=\2614\347>\350\274\252?\030\343\t@\261\260\332?\261\r\327?\326\300\320?L\360\307?\364p\273?\372\266r?\206(s\277\362\331\213>0qR? \362\254>~\306p?\316\372B?\300\032]\2741\312\325>\024L\t?\300UY>\336\035u\277|\216!\276\216\226\240>\274\376j>\214\177\017\276m\376\326>T\341\013?\032\366L\276(8J\277>\225\006\276~:\310\276\247\217l\277(\016\267\277\377;\264\277z\t\200\277\037\213h\277\203\257[\277\327|\242\276!>\021?\201\230,?&\002\001?\347\254\007@\252I\357?)\353\362?\013C\333?G\030\314?\211\246\315?k\344\326?q\242v?\000\r\312>\337\227\205>\004_\033?\020\305\226\276\271Q\031\277\251C2\277\374U\234>\232\243`?\201v2?,\222\320?N\031\003@\020\235J@\220\235\255?\200\017\300?\253\243\031?\271\335\247?\017\240%?\020F\276\275\211\311\035>\211\253\353>\266V\257\276\324\037x\276\331\'\325\276\030\324\337=\242\333\021\277P&t\277\370\352\223=\352\216`\2778\361\226\277h-\333=\372\373\216>$\026\265\276\301\355\n\277*Rq\277\312\"N\277g9\023\277\310\206*\277\300\234&\277_]\023?\235\0300?\003R\205?pOa?L\353\032?\350\273\242?X\354(>C+d=\255\333\263\276x0(\276 \014\347\276\224\252`>KW\004@~\336.?R\223\230?\322zG?S\007\257?\355q/?\353\206N?\320u\037?\242\224{?z\331\263?8\002n?\262sg?\030\250\031?B\036C?\2502d?\202\246K?g\266\204>\212\306\207>\025\004\'\276\312\375\000\276,\362\252\274\337\016\006\277C\2522\277f$\022>\366\025\025\277\334\014\340\275\030l\201>\356c\267>\264\256\276?\261u\305?\243\322\242?\217E-\300\340\371\306\277n\241o\277\235\030\200\277\376M\265\277\230\307\277\277T7\310\277\221X\264\277p\363u\276\n\271o\277\032\037\241\277\020\353=\277_\356\034\277\364\346\230\277\322=\203\277.\373\010\276t\2168>\302\013{\277\300\250\302<\365z\321>l\253_?\347\301\016?\320\2230?\272\226\203?v\360\200\276\001v\301\277\210\215\t\276\027h\322>\374NV\276NB\212\277\250\244P\277\307\2207\277\226\007I\277\352\2504\277z\323Z\277-\232\307\276\202G\354\276`\372@\277\315\201\254\277\342mN\277>\371\347\276\226[\242\276z\230\310\276\370\354D\277\330XA\277`\212\317\277\230\022\000\277\351\337\215\277\002\344\377\277Zk\214\277\024\313\215\277\214}\311\276T\\\205\275\315\270\027\275 \357%\277\303\005 \277\270\270H\276\203%\205\277\231\272\002\300\225C\361\277\3507\212\277\231A6\277&\245\354\276\0145o\277\014\221\374\277\220\351\'\300\341\360 \300\2500\014\300\264D\225\277muX\277@\3451\275\352\325\010?\0067\r\277~\234\013\277TW\240\277\013\327\226\277\377\272\263\277\347\356\261\277B\327\305\277\351`\241\277\241\267U\277h;D\276ci\343>|\2778?\006\364\036>x\220\206\274T\312b=\336\206\346\276,\215q\277X\363\360\275\3643\260=y\324\323>\t\031l?\274\t\232?(\304\304?\340\246\277?\313bM?\314\201R?\270\026\'=\233\005\317\276\370Y\226>D\306S?/|D?\026\331/\277t\344|\2774\033\362>\340\262\316\276\020\302\357<G\250\344>r\334\246>\030\004U\277\226K\227\277\351\235\213\277\304\307\236\277\331\213\005\300\314Z\277\277\300,\342>\320sD?4<D?\023\347:?\260ct\276\324\023z\275r\372\224\276\250\024k\277Lx\277\277y\234\241\277\342H2\277\2625\275\276\277\216X>*13?\362k\353\276x\177h>\341\373\327>\226\223F>\306\236\302>\315\361\224>\327\250\'>\277\246\350=NI\204?rY\220?7l\222?\214\301\326\276H\270\324\2770\257\"\275\244;\035?R\320\261?\330~E>\273\270^\276 \220\027=&10?\235<\255>\321\306\213>\250\220I?\346\360\345\276\022\177\265\277\370e\013\276\254\"\022\277i\204\233\277\375.\357\277\022\303\014\300~Q\r\300\345<\317\277\276\033(\277\377\004\261\276\324\212\030\277\266z\n\277\350\230\265\276\236C\203>x\271\276\275\204\035Y=x<\203?\336;\007?\353\307\241?\334J\022>\270\206\260>\314h&?L\020\226?\022Ch>\240/\264?\245~\373>\270!\341>[T\215\2760\353\340>\324+\342\276lu=\277\031y|\277p_{\277\311E\342\277H\357\331\277?\352\273\277\260\262\271\277\000\020\336\277\275F\235\277\2360\230\277[\202;\2776\302m\277H\313\241\275\342)P\277\367\311\243\277\377b\243\277\377\270^\277 \204=\277\022\017\264\277\241g\300\277\346Qx\277\365\371\314\277~\345\001\300\276l\345\276\267\"\244\277\010&0\277\227~\226\277\\&e\276\342\256\346\276\362\302\303\276\020;[\277T\227y>D=\370>\242\000\"?\326F$?\310\014\013?\250l\303\275\272\254\025\277\000\352\221=\232\'\370>7\360\271?x\365F?\020M\023?\332\177\027>(\222\355\276\022\265D\277\230\375\'=\361\277\363\276p\005\t=\213\244\017?\370Z\010>\326R\242>.\211\202\277\220\241\200>2\220\001\277\004\303r\276\314\372T\277 }\372=\237\236\371\276^\3450\277#\364\'\276\213}\347\276\322c3\276a\211$?X\215\262>\212BO?\276\034\320?\3731\344?\r\372\234?\371\303a?C\n\202?\302\273*?\355\177\204?\326\203o?\032\376\225?\314e\365>\253L\237>\000g\253\276\235\277\221\276\370\005\316\276\270:\351>G\036\230>\257\326\016>\022q\013\277\200\2509\274\265\036#?,\300\032?\317\273\370>\004\002\200?\210h1?hif?`]\311>\232\241\005\277x|\337\276\276\301\302>\367@\003?\371\010\206?WKs?8\312\273?|\336\211?`\253U?EX\212?\354K\337?3\266\262?\207\316\223\277\252\204\253\277\273W\323\276\024f\023=\032\316\000\277O\302\342\276\030\300\n?0f\256\274\004L\r\277Vf\372>\214\375\345>\354\250\331=\240\343\024=N6\020?\213\371#?P\"H=\r{Q\277r+\332\277 1\250\277l\032\031\276?\275g>\342,I\276T\027 >\230\006\202>\341\007\265\276vpj\277\204*\326\276&y\276\276\014s\241\277A+\006\300\247\207\023\300^\375\003\300m\"\210\277\271]\017\277\350\323\311=\216\2006\277\266VB\277\371\305\014\277\264\221X\276B\0060\276t\306\n\275-@\270>t\027\253?D\355\364?\357\343\337?F\221\367?9\026\030@\t\014\026@\276\207}\277B\330\337\276g^o\276\r\300\306\275\377c<\277HHR\277*o\253\277\030\324\343\276\350\217\\\276\204K\351>K;\344>\345\220\236\2760\315E\276\270\300v>>i\233\276T*\304\277\207b\005\300\350O\246\277\242{K\277\376\221\235\276\330\325\344\276T\245\323\276\271q\346\276Fz\014>\237\r\222\276\0326J\277\\\215+\277\263l\021\276cC\271\275\003\247\020>\246\350\272>Z\277\360>[\316\372>\020p\025?\375]#>\034O\r?2\021|?\316&\210?\037y\267>\204\226\346\275:i?\277\210\216m\277\325\204\231\277\377\261`\277\320AB\275\006$\275\276\264\344_?(\021\224\275\220\255\037?\320r\256\275\031\303\021?\207h@?\030B\316>,2\027\277\2724\032\276\302m/?\340p\273=\001\357\231\276)\275\356\276\016W8>\222\321\234?\272\244\010?`\034\002\274P\250\331>\364\320\r?\365U)\277,.\021>&pI\277\016V\003\300\233\216\346\277\314\026>\277\257S\226\276h\355<\277P&k\2766\200\264\276\240\314\021=V\243b\276\220\325\332\276\n\027\343\276\240\310P\2760\221$\276\256\'\270>\307S/>\022\207+\2765Yf\275\271\326\365>\010kD?X\010\212?)\236??\206\205u?W\317\226? +C?\214+*?\021\207)>I\n<?\203eo?Z\250\310\277\263\334\022\277\322\315\203\277\224\230+\2771\005\307\276\020\341#\277\024\270\017\277P2\366\276#*\372\276\242\025\247\276p%\336\276Iz\212\276n\300?\277@\r\362\275\366[\363=\002\320D?p\200$?\021\331\013?(\027\366>\246\262\202?\312$e?\214\213\343?\006zM?\340\203\261?\352\204E>\230\260e\275\242\311\002=\222\216\020>\010\263\014\2766]{\276\263\204E\277f\002n\276\340\214A?dg@?\257\205t>\000\207\002?\350\342\\>\335\337\027>\n\254\340\275\375\340\305\276\334\233]\277eT\020\277\344p+>\004v-\276\221\250\255\275y\320\375\2760\275\214\276\202\220\330= \035\202>\306@\336>\020\010\255?#\325\002?u\327f?\371\230G?\216W\225?W\313$?\350cT\276UuB?E\007\003?\252M\034>$\344*\277\300c\'\277bz \277\225N0\277\n\317\025\277\341\253Z\2774\250\210\276\232|\221\277\262W\013\276\331\367<\277\360\227f\277\020m\216\277\347\027\333?U\361\315?\227\rj?\320A{?\362\273\202?\364+\366>\345a\343\276/\\Z\277\320t,\276\322M\004?P4\261<\321\342]\277\245\030n\277>\302R\277b\371\362>\241.\300\276\201\207\336\276\210\323\000=\002L\307=\206\3307\277\276\220\321\276^d\360>\030\255E=\230\337\311\275\300)2= \274\344>\273\235\204?\3267a?ZY\035\277\241\0105\277\222t2\277L\330T\277@\355\262\275\331\255\203>\033I\213\277\016\272\203\277\"\005\340\276\260\020\300\275\322\246\201\277\220\177\r>\356&>\277;o\212\276\226\334c\277\177\326)\277i<\\\277\313\200x\277\300\263,=\273\302\225\275\340\260\377\2748kV=\316is>Q\265\027?\300\tp=\326N\334>Z\3200?\242\367\244?\312H\200?@W\210<n\344\265\275/\337Z\277\315\233[\277N\"\271\276\232\023\006?\304\027s?\376\030\201?\344\373\252?T\227\305?\254}\370?e\321\023@Ru\030@\266\345/@\177\377\245?\304\026U\277\260\256h\277l\276\001\2776\002f?\224\016\031>zO}\276}\'\377>Y\374\032\277\250z2\277;zv\276\300\337\240>\244F\340\276zM6\276\n\246j>L<\206\276\002\256\256>PF\306<\221D#\277\214i\r\277T\003\237\276\020m\266<\006\037:?7\254\247?\317\267\257?\351&&\277\312\341\021\277O \357\276\340\325\330\276\344l\205\277\203\024x\277\225\265\000\277N\336G\277\211]5\277\341\030b\277\t?\201\277\000h\357\274\356\206\001\277-;\260\277\240O\230\277Z\230\324\277Z\344\207\277D4\242\277\202\376\321\277 B\303<\335\304%>W\340\221?`i\243?\210\317\033@z1\263\276\336*u\276}p@>\026T\035\277\276\003\300\276\256\004\017\276]\034R?\370\271P?H\267G>\340\345\037<\201j\313>\340k\035\275\2759\236\277\234\213]\276J\303\224\276\000\202\373=X\222\031?\305\261\013?\262\375a?`A\364\275%m\324\276nw\205\276\025\223\\\2761\321V>=\0243\277\013`\276\2760uM\277\354\254\236\277kx\252\276\306\375W\277c2\377\276u\202\256>\352\245 \276\204\313b=\363\207E\277\022l\313\277\210\225\333\277p\322\277\277$\373>\277\217\350\207\277r\033\320>U8\224>\252\024\031?!\255\004?<\343U?\252\257\003?\320Y\224\274*a\366>p\"\264\275\246\235\007\277\320\247\256\275\034\324\236\276n1/\277\210x\262\277^\255\000?\200\373\365;}\257\211?J\255\007?\302\276\021?P\034l=\256\261X\275\337J\220\277*\n\253>p\276\365=\036\2777?\213b\000?\326\311\034?\274\005\213>\010E\310<j\344\247\277\033\243\204\277\267\222T\277\000H\363?\363\264\344?h\371\313?\215\313\273?z\317\265?\034\224\350?\216\006l?x,e\276\214\\F\275|\2541>I\215I\276\256G\234\277Vu\342>\300\"%<\254\001x>\024\037\200?\320\302\262?\030\206\345?\033\223\362?\346\336\301?\364-\335>\\%\312\275\364\r\032\277X\303\234\276\026\354\267\276\367\234\256\277\010\362P>$eg\275@W\005\277n\306.\277\210\346\226=d\331\232\275\244p\246\276\'fk\276\311\376Z\277\000\244H\274DJ\230\277\003\002q\277\223\330\234\277=_/\277\252F\261\276l\023\347\277\316\277\277\277f\206\312\277\2773\r\300\244\251\266\277\016#\274\277\277\327(\277o\251\213?\272\234\237>J\263]>\260\r\n\276u~ \277\301\344\000\277\224\361i\277V\335B\277\306\336a\277dy\206\276\300\245A\277^\373G\277\330\300\324>\016H\234\276\310\243^=\270\2751\277\356\220\236\277&\256\230\277\337+\234\277Ni\355\277\271\r\326\277]\006^\277\032\314\030\277\354^\230\277[0,?\362\030s?\010j\210=\306\205\254\276h\254\243\276B\025l?\302L\310?\2247>?\356{4?\377\025\312?\333I\264?)\241\230?\014\004\227?\320\300x>V\027\275\276\310\307\206\276\216\234\r\277Nq\217\276\372\217\211\277\210\322\212\277\346\3538\277n\245f\277\254i7\277\345\347\337\276#\370\r\277P\330\231=\271j\236\276\211\266\270>\005\020\325=\373\346N\2778Gd\277\3075\235\277\315 ]\277\262s\224\277x\340a\277\3070\235\277\037\307\315\277\274x\301\277\357)\204\277\322\201\224\277s\037_\277f\247\021\277\004\376\246\277\316\212\030\277M\351\265\277\340\001\306\275\034\025u<\262\010+?\244\351o?:V\347?/\377\325?\030\230Y?\030<\253?dR\337?\321\302\216?v\242\300?\265d\226?\272\000\267?\250\242\321?6\'\n@)\207\304?\234\353\007?\236\233k?\212\221\306>!L\337?Qz\273?v\230\353?\374\030\345?\214!\014?\\HQ>s\315\361>F\273\037?\301\236\210>\254\033q\276\334\216:?\351d\001?\014\304\353\27619\007\277\260\204\205\275\273,\005?@\3055?93\375>),\"?\010AZ?8\325\303\275\357\241\225\277k\331H\277Y]\306\277D\277\223\277\360T\300\275\361\242\343\276\214:\204\275\230\256(??\362j?;\363\212?\344\025d?\212(2\277\350\263\330\277)\315\241\277&\241\205\277d\202\210\277i\013C\277\202({\277\333\306*\277\226\300?\277\300gR\275U\201\216>2k\032\276\325=\255\276\235\275\256\276]\301\217\276\217\276\263\276\320\371\347\276\020\r\226\276\204\"\013\277T\327\230\276\260\253V\277jp5\277Y\373\274\2778\346U\276:\035\323?@(M=\035e\333\276JW\345>x\312)>\310\223\243>\330S`\277\227q\010\300)$\331\277\354Z\251\277\302\360\246\276\377Y\200>P\217\372>\3062F\276|\313#?\260.K?F\354c?\330\201t?\206\346\"?\243\247|>\272\224\335>\353\225A?\353=\340>\262\365w\276\320\320t\277\332\231\251>Xk\031\277\010O\020\275\224E\276>\362>o\277\337\222\334\276\370#e\276\254\006\026\276=\307^\276\324%G?:\005\247?mb.?\224c\271?-]\t?}\024\252?J\002\365?hX\313?\024\256\205?\244a\000>8Y\200>qW\327>\032/\250?\030!{>\276\370\022\300e\325-\300\035Q\230\277\0072\253\277\267:\226\277z\317\035\276,B8\277\330\242\010\277\216\'\202\276\376h\205\277\264>p\277\265\356\032\2778\032T\277\235\301\345\276x\330\201\277\tq*\277\330l4\277k8>\277gQ$\2770,\272\276\256s\222\277\241w\273\276\242X\020\277\n\256\031\277\341\307\210\276\220aM\275\021\000:\277\262\014\316\276]h\205\277\034\027\360>\333\354:?\353\225\211?\0145\240?\364\334>?\254\235\024\276l\221%\277\220\nv\275\010\0061>\024\r\222>\005+\003?\022.A?6On>\200\353@>\217\247\333=Qn\240?\314\374\222>\177\024\217\276\371e\273\276\216\341\006\276S\367P\277\304p\022\277\344\303\303\275Ct\r?||\022?l\237\301>\310\306\366>x\232J?\177\264\'?\344H`?y\337*?!\334\274?\004\275\345?\320(\214=\361\321\316\276\252k5\277\020n\256\275\347\227\324\276\340\035q\277m\375\255\277\r\316\205\277*\177\332\277\361\030n\277\304F7\276b\250\203>\243\276W?+~6?3\325T? (d?\033\374Z?\311G\235?\276\370\306?\036\345\321?\254\n\326?O\026\347?\r\307\271?\353\320\211?O\250\300?\353!\235?\200\255\326>\322\332\216?0\333!\277h\021\016\277L\341\004\277\300y\005\275\002\032\017?p\252t\276\302\201F?\360}\210=\372\363\333>\221\372<?`\rx\276d/H\277PbW?n\321\235?b\235U?\237R\330>\332\204C?\374\230\253?\267L\241?\332\357\025?\2261\310?\334\373R?\240\345]\275\273\003\206>\326\251O\276\263\006#\277V\204\010>\016\332d?\251[\257?z\203\310?K\003\004\276\n\322\031\276\254\357\265\276\313\004\330>\217\2619\2778`\323\276\303cc\276\2367l?\"\203\225>.\344\010\277P\211\356\277\034\246\253\277d\276b\276\315j\250\276\257\2547?\212\314c\276\204\211X>w\230\007?\334\233\246>\003\261\263>\020\255\323\275\276\021\210\276\320Aq\277\240\304\260\277\354@\234\277\312\201\223\277\260\210\206\277\217\036P\277^\025\006\277\363,=\277\2239\257\276\030\201(=\223o\344\276O\312\326\276.\3460\277\200\216\365;\263\354\230>x>\336\276u\321\260>\344\221\017\276\367\212\222\2763J~\276\263\200\217\277}a\232\277M\026\002\300\271\361\000\300\276*p\277s\201\206\277`\271O?0\252M?\254\026\227?\366<\036@\302\3226@\353\354\t@\264\334\007?\311\217\204?}\035\257?\222\366\254?\334C\003?\256\327+?\314\3504?\374og\276\274)J\277x<:\277<\210(\276\265\327m\277\r\3625\277\213\320\007\277T\213`\277\203\366\244\277\n\263\210\277\002\321D\277Gd\330\277\300\206\366\274\213I\330\276f\325\014?\030\247\017=\352J$\277\355#\263\277\2274\220\277\216\345\312\277J\225\244\277\352r\256\277\256\343\214\277\no\221\277\2049{\276\200\250\t=\024_\356=\333H\360\275\206X\215=1>Z\277l\254\000\277\234\202\t\277\265\315\020\277`\254G\274\223\031\374\276\230\237\002\300e\257\333\277\266\234\267\276vG`\276\024\204J\277\260\270\020\277\304f\253\277\3425\253\277%\217\222\277\212x(\277\332\010\247>p\373\240=\225#\014?\207\220w?\256)\245?\372\"N>\356+$\276\311\2616?\212\217\031>\240\375 \277\2129\317\277\244\022\261\277Q<>\277\324a\221\277@\351\256<\253C\013\277\342\033\007\277\232\'\216\276BI\202\277\\5`\277\314\n^>\245\026\231\277B\202\355\276l\275\274>\206\316\315\276w\177\353\276\272kO\276\303\203A?\2370\204>q\245\310>\241\033\245?`\236`?>H\262?\373\250\312?2\367i?\024\204V?\204\306\361=\324*\346\276\215w;?\254\030Z?\032m\225>\022\333*?\000\313\036?\020}M?>\247y?\266\302@?\344]f>(\234\300\276\220}\000?,\n\001=|Q\255\276x\324\307<\304Yw\277D\242\200\2778zB\277\356\014\316\276 \017\217\274r\243\352<q\362\034\2746\257\245=\264\243\352\276\200\025\334=\325\225\375>\376qs?\310\352\312>\330l\233\276\361UX\277\363\244c\277\346\025\370\277~\344\320\277\320\312p\277\320X\333\276\320.\\>\262.\020?P\227,?\337/\212?0\220\247?\360\312\325?4i\256>\337\3237?\375\257\210\277\324\211\373\277\242H\300\277+\342\307\276b\346\255>K\254\273> \017z\275\223D\027\277\336\273f\277T.\220\277\022\251\252\277z\345\265>\014yf?\311\304\030?fev?\213\002\200?\234\236\265>R\031\373>\227\326\354>\320\030u\276\310\0252\276\034u\371\276c\234\205\277? v\277\263Gt\277\262\334\324>\207\335\364\276\275\224\352\277\000\331\241\277e\364\264\277z\305\211\277\207\036\210\277(Z\217\277t\367\020\300\t\240\211\277\026\243\005\277 \202(\277\330\027R\276v\004\246\277+\241k\277\263\377\201\277\261w\000\300\014\237\245\277\037y\257\277\333\373}\277\272\206\304\277\201\375\331\277\2507\275\277\230\302W\277\330\251\031\277 \314\014=\213\245\245?\222\340E?\242\311\327>\2261d?\034\'t\276\257\257R\277?\246\032\277:s\023\277\235_:?\250\3208>p\322L?,\1777?/\366i?\006\243\004?\024\212\200?x\311~?\317\013\316>\021\323\223\276\263\245\332\276\212K\320\276\273\3147\277ziY\277:\0026\276\351\346\373\276\370\3763\275\237\033\215>\r\032T?\203c\327\276\254\357\267=7\324\021?\302\266\370>&\260\350>\2401[<\317\223\202\276\367\006X\276\210\341\031?)\025\r?\222\212O?\300\002\231\276P\221\006\277\t\221\250\276<\3655>\022<\034?n\200\034?\017\253\256\276^K\271\276r\263\002\277\260(\346=\370\301A\277\225\2218\277\377v6\277\350\2410@\356\250\377>\322t|?\200\315\245?9\250\203?\214`k?\017]\021?\322\341\271?\020\t\330?\2738R?\032\220\276? \224 \275\200O\036\276\324\376\275>\370\n\306\276\304\232\247>p\376\330>\3601\371>j\326\003?\2569j>\241\205\211>\301\025\264>Z\013\345>\303\003\t\276h\256Y?\206\000\025\277\207\212C?`\374W\275\310\0108?j\270\\?\306\005\007\276.\224n>3j\003?\317\025\210?C\373\222?\254\244\241?\3344W?\000\177\342=\366\376\017?\245\252\336?h\346\335?\226\212\204?\r$L?\357;\351>\006\225\203?M\030\030?x\321T?\230\371\252=z\3768\277\232\3670\277-^\252\277\376\215\317\277\303\300\252\277\307\244\025\277\300l\n<\365\005\265\276\r>\216\276hi,\276\'i\206\276\365x\310\277B\374\306\277V\233p\277\001\227\210\277\024\335\000\300b\272\263\277\242\231\341\276\361:\227\277\250\316\000\276\352Op=\024\2517=\343\216N?\324\301\230>s6\302?\210\234&?L\272\204?6\350\223?(\363\033\276\203\253^\277`\035(\275\306\375s\276\376\322\215\277\270\246\253\277*\177O\277\356\222Y\277\024\264\023\276\271\344R\2750\020\206\276$\214?>q\320B?KHF?\214\177\246?\306y\252?\031N\254>\3412\221>\034So=\210\247\233\276s\264\216?\270\236\247\276}\242\275\276q\246\210\277\331m\025\277\310\037R\276v\343D\277\310\320\275\277UD\360\276F\350\235\277\220\001\235\277<\032\204>4\t\035?\023\326\223>V\271u\276\276t\231>\224\227\305\2750\321>\276Y\"p\276\217\0247\276\330\326d>\300\034\341;J\315@?\031\005$?T\217\365=f\3211\277R\365,\277@D~\275\022f\226\277\207\365\t\277\345\025y?n\030\237?\373\347a?\017,\353>\346\371\233\276\234\330P\277\250F\223\275\246\311J?\236x\335?\251\313\361?\037\262:@\370\352*@\006g\367>\354\207\014\277~Rc\277\002\377\346\277\277\022\354\277/W\004\300 \351\250>` \356=\'h\232?\231[l?\366\312\230?\222[\344?\320!\364?\207\007\014@\355\003m?\207\302q?\275^\035?/v\366>BH\260?\020\341\366?\300C\276?\232\273\031@\254\010??\020\206\227=t\001*?\320-H?\221\243\226?\315\357\"?\302\331#?;\033\000?\214C\220\277\236\177p\277\002\3368\277p\244\230\277\230\277n\277\232\264\225\277\266j\326\276\275_ \276\325H\212\276 \317\321<{\366\305\276*\366\t\277\330\347\247\276Q\260\220>0SV?\024)^?\300\256-?\366\2077?\262D\364>\267f1\277\360\307\217\277\346\303\205\276\016\363\330\276p\272\342>H\323\235?\344,]?\202\014\257?q\234\017?\003\306\330>-\241+>\202l\346\276\004U\335>\256\206a?p^s?b\327\214?\025\274A?=]$?h\352\333?=\315\247?\276\271\307?\\\257\353?\302-\256?l\321\377>\213\305\000?\371\213\207?\205\204\200?x\302d?\327\344v?\214\316\324\277\305\375\310\277\321`\260\277_\253=\277i\217-\277\006\203E\277\260\026\013\277\022\224j\277\352*\021\277Rn\217\277\356xq?\252\364\310?~\244\312>1\341\221\277/pz\277\340q\212\276\000J\325\271\025it\276\274\3467\277_\206\321\277\3331\341\276j\023\257>i\306\237>\300[\260\274r\377F\277\'\212\251\276\240\364\357\274;\213\233\276\370*\016\275;\002R\276\307\301\342>\265\371\374>\362\251V?\0361J? \217C\275\242\211\252\276}k,\276\350\236\002>\232:\210=\006\347\013?\361\"G?|\231T?\3209\t\277s\022\366\276\360JR=\311\313\017\277\017\2366\277\010\3016\276\004}\253\276w\250Q\277\350\205\314\276b\021d>iMe?\"\212\365>$\336e\277\3439\020\277\004\2740?\222=p?$\014\224?\264k\267?\"\207\343><\211\310=\237\300\n\276\314=\203?YE\247?vED?\316\316\201?\002\242\241?r<a?\267%\370?\341\317\r@\324\014\254?\021\226\223\276\310\367\014>\366&9?\370e\367>@\306\330\274\005<\321\275\346\216\227\276\240\026\204;\207\204\025\277\242\364\256>\202\371$?:\017\311>>RH>\360\343D>>\002,?\311\201J?S\026\034?\3003\306>:\254]?\277_,?\266\247\036?\331o\252>\256H\361>\223\226\\>\250\036\313\276(\201\211?\200\215\210=\3044$\277J,\n\277F\250\253\277\034\346U\277\335\2713\277\200v\310>O\250\275>\027$\216>@\016>\273)\250D>\250\365`?\274\255Y?g:\300?N\236\330?t\352\236>\314\0338\277\211\002<\277z\267\241\277;\326\260\277f.\245\277;\237\320\277\255\242\230?\226\351\204?H\030\202?$\377^?\272/2?\372s9?([\250\275/\347\273\276fjR\277\210z\001>P!\355>\362\342V\276\272g\202>\270M\307\274\030\243\246=x\237\205?t^\233?\020`\261?$o\205?\312\207U?a\2467?jV\022??\315R>\300\030\231>\tLH\276\003J*\276\316\374\241?\271F\237?\020\357\321>ur\362\276%r\230\2774\265g\2779\365\031\277\224*?\277\255W)\277xC\010\277\336^\264>\346v\030?\030\222\225=\031\324\227>\'\322\352\276\372\250\325>\306\324V?\3722\307?\346>\357>L\317B>F\010\205>\225\314\307?\340\225%\276(o\307\276\335\314\276>\246\207\'\276h\023\253\274\032\224\243\276n\010\031\276+\306\300= \352_\277\352\027D\277\342\236\333\276\301\253!\277\224\257\230>xY*\276\366\373\342\276\214\340W\277\264\343\241\277N;\345\277p\000N\277\235\024B\277#~F\277\203\273V\277\232fe\277\354\251p\276eY\213?\2603B=a\352\306>\250\322\231>\246\261\320>\273\350\237>f\261\307\275\"a&>/C\362?\346\346\024?Y\304\017>db\007\2774\177\350\276P\276\223\277\320\221\n\300`\324u\277\222\034\254\277\233B\310\276\364D0>\010\303z\277\026\230\302\276\234-N\277\305\342\231\2778\270\345\276\242Y\021\277\010\3377\276\250No\276\014QO\277\032\327\255\277Kv\240\276\240\357\214\277\372\353\237\277J\206\344\277B*\002\300t\225\345\277\222\276\325\277\337sE\277\225\335b\277V\036\212\277\030\332\235\277\243q\001\300\360t\324\277\253\203\233\277\314(\302\277-\320I\277?\223\204\276\024k2?y\035\203?\\\033a\275\350\302\267=\314C\006?P\244\250\275:c\215?N\306]?\004\331s>\0024\211\275\250\371\"\276\026&k\276C\336\006\277\035\201H\277t\306d\277\342\244W\277\032\255\207\277\374\rU\277\304\271W\277\270`\234\276\004N\271\276\314\313\217>Z\325L\2764\314\022?\325+t?8\240\212\275#kJ?\351\255\203?\242\313\203?^\345\031?\\\2360?\372\364\304?\224K\355?\3343\353>\342@-?\372s\230>\247i\020? \236;\276!Y\320\276\027\331(\277\360\014\020\277\242\351\017\276T\351\"\277\225g1\277\244\002o>x];?\346\364\262?.\353\215?\225\026\037@\231\306\016@o\343\t@b\220\331?5._?\277\337\230>\022\256\236>\300&e<\277\331]?D\236\006\277\254\270 ?\307\246\247>\265J`>\024WW=c[\235=\332\304-?C\203\324>\202\224\211>\024\263\324<2>\201\276\204/\243>5f\'?\270\225\303\275\013]\352=\362\372\225=\343\031\274\276f#\373=\276\n\022?~@\036?\34778?\343\234\010?\220\340\204\276\264)\207\277\036^)\277\000\001\216>\342\236\336>\204\177\253?Bo\001?.\016\035?\312Xg?A.,?&\3616?<TQ>\216\003\004>\002\201\212>\027+\013\277Wk\371\276LK\325\276\334x%=\256\220\240\274S9L?z\236\244>\375\2240?h`\200?|\203\030??\260!?H+\316>\217\220E?\300\216\254?\350\203\216?\261\0270?\322\303\240>\300\023\372\274\037\355-\277((\036\277\000\033}<\213lF?\273\311\224?H\256\271>c\246}?#\305\202>\221\246I>2M\300\275\300F?=\235\343)\277]R\350\276l\002\211\275S\311\331>\000R\232=G\231\200>fI\220?\354l\355?um:@\r\035J@Mtd@\302\360\005@\010@\026@\032\246\r@k\204\006@$8\033@\343\247\r@\322\203\337?\316\326I?6\2636?\274<&?\210k\017>0\272\006?\026\2163\277\216\234`\275\002|\017>\200\267\365\276\002\314\317>\220\275S?\231\272\244?\033\332\203>\240\200\r<s\027\002\276\005\304\217\277tD\312\276\327\351\240\277\310X\312\276V\242\366=+\304\275>\254\023&?|K\360>\207?\337\277\033:\240\277\200\324B=\365\245\205>\315\201\002?\240z\340\2742C)\276\336\3276\2775\260[\277\032u\254\2773)l\277\020\257\245>\311\372\237>\002\033\273>\027\003\256>\027\245B?\242\027D?\341Qj?\253M\235?\025\277\264?_0\265?T9\372?V\301\256?\346d\236?\010\224\316\276\36219\277\271\364\177\277NC\221\277\302\333\257> \372\035=\343\027N>\004\014\250\276\260\3536>\346)\263\27607\342=V\357\352=\341\3450?rn/?\272\370j>bc\005\277\022\324\375\276\302\364d\2773\017\317\277\334\210\305\277,\363\017\300\277\306\242\277\336\255\177\277\230\231\200\277\272\343\020\277@\332\326<\177\350\273>\276\002x?\352\324\321?\021\000[?\200\236t>\340\276\334\274\363;\006\277\355\026\205>#\260\312\276\232\235\332\277\234\200\205\276\257}2?\250\257+?d\014\">\200`\025\274g\t\006\277 \315)\276\024\367 >\376_\t?\006\261\232?\"\351Z?pB]?\326\361\210?\374b\272?\007\313\242?h\345\235?\370\227\t\276\2602\016\277cc\330\276:\336[?\226xd?\214\201X>\202\347\024?z\250*?\327\244\202?\332(\230?\"\003@?asK?\024\300\025?H\010\021\276\362\032\215>J\222\233=w_V>\016\310\247>\0276)>\355\204/?$\376\364>\036\252Q?\206\260\212?\006\372\264?-\357\323?$\036\003@\330\202\217?2\tz\276\334\363,\277>\221,\277C8\217\277\350G\352\276\220\230k\277\264\267\213\277No\223>v \'?\025a\223?\370\311\266>F\272&\276\031\262U\276M\371\003\277\005g:?\376O\252?\314\3561?j\225%>xK??_\301\264>\340\\\036\274f\000\271\275o\363\361\275zI\246>3*n\277\237 \354\276(\022\030\2760%\235\277M\n\250\277H\337\207\277\000\220\256\277\034lH\277 \237\222\277\034J\323\277>\261\330\277@\204\202\274\016m\354\275.\211\200\276`e\027\277x\344N\277x\316\"\275\312\212\210\277\316C\262\277\272\344\211\277\312\236\032\277\330X\007\277\374\016r\277\210V\233\277"
      }
    }
  }
}
node {
  name: "tensors_2/normalize_tensors/component_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 100
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "TensorSliceDataset_2"
  op: "TensorSliceDataset"
  input: "tensors_2/normalize_tensors/component_0"
  input: "tensors_2/normalize_tensors/component_1"
  input: "tensors_2/normalize_tensors/component_2"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_size_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 100
      }
    }
  }
}
node {
  name: "drop_remainder_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "BatchDatasetV2_2"
  op: "BatchDatasetV2"
  input: "TensorSliceDataset_2"
  input: "batch_size_2"
  input: "drop_remainder_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
}
node {
  name: "OneShotIterator"
  op: "OneShotIterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dataset_factory"
    value {
      func {
        name: "_make_dataset_OSH5aSdnThQ"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 4
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "OneShotIterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "OneShotIterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 4
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 4
          }
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "transpose/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transpose"
  op: "Transpose"
  input: "IteratorGetNext"
  input: "transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "transpose_1/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transpose_1"
  op: "Transpose"
  input: "IteratorGetNext:1"
  input: "transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Cast"
  op: "Cast"
  input: "IteratorGetNext:2"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "Shape"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Tile/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\n\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Tile"
  op: "Tile"
  input: "transpose"
  input: "Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Tile_1/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\n\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Tile_1"
  op: "Tile"
  input: "transpose_1"
  input: "Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Tile_2/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "Tile_2"
  op: "Tile"
  input: "Cast"
  input: "Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Max"
  op: "Max"
  input: "Tile_2"
  input: "Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\030\000\000\000(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_1"
  op: "StridedSlice"
  input: "Shape_1"
  input: "strided_slice_1/stack"
  input: "strided_slice_1/stack_1"
  input: "strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "TensorArray"
  op: "TensorArrayV3"
  input: "strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: false
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "TensorArrayUnstack/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\030\000\000\000(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "TensorArrayUnstack/Shape"
  input: "TensorArrayUnstack/strided_slice/stack"
  input: "TensorArrayUnstack/strided_slice/stack_1"
  input: "TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack/range"
  op: "Range"
  input: "TensorArrayUnstack/range/start"
  input: "TensorArrayUnstack/strided_slice"
  input: "TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "TensorArray"
  input: "TensorArrayUnstack/range"
  input: "Tile"
  input: "TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Tile"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Shape_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\030\000\000\000(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_2"
  op: "StridedSlice"
  input: "Shape_2"
  input: "strided_slice_2/stack"
  input: "strided_slice_2/stack_1"
  input: "strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "TensorArray_1"
  op: "TensorArrayV3"
  input: "strided_slice_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: false
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "TensorArrayUnstack_1/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\030\000\000\000(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_1/strided_slice"
  op: "StridedSlice"
  input: "TensorArrayUnstack_1/Shape"
  input: "TensorArrayUnstack_1/strided_slice/stack"
  input: "TensorArrayUnstack_1/strided_slice/stack_1"
  input: "TensorArrayUnstack_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "TensorArrayUnstack_1/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_1/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_1/range"
  op: "Range"
  input: "TensorArrayUnstack_1/range/start"
  input: "TensorArrayUnstack_1/strided_slice"
  input: "TensorArrayUnstack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "TensorArray_1"
  input: "TensorArrayUnstack_1/range"
  input: "Tile_1"
  input: "TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Tile_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Shape_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\030\000\000\000(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_3/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_3"
  op: "StridedSlice"
  input: "Shape_3"
  input: "strided_slice_3/stack"
  input: "strided_slice_3/stack_1"
  input: "strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_4/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_4"
  op: "StridedSlice"
  input: "Shape_3"
  input: "strided_slice_4/stack"
  input: "strided_slice_4/stack_1"
  input: "strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "Reshape"
  op: "Reshape"
  input: "Tile_1"
  input: "Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.42640143632888794
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.42640143632888794
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "mlp/data_encoder_0/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "mlp/data_encoder_0/kernel/Initializer/random_uniform/max"
  input: "mlp/data_encoder_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "mlp/data_encoder_0/kernel/Initializer/random_uniform/RandomUniform"
  input: "mlp/data_encoder_0/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Initializer/random_uniform"
  op: "Add"
  input: "mlp/data_encoder_0/kernel/Initializer/random_uniform/mul"
  input: "mlp/data_encoder_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "mlp/data_encoder_0/kernel"
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Assign"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_0/kernel"
  input: "mlp/data_encoder_0/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_0/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "mlp/data_encoder_0/bias"
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias/Assign"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_0/bias"
  input: "mlp/data_encoder_0/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_0/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_0/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_0/MatMul"
  op: "MatMul"
  input: "Reshape"
  input: "mlp/data_encoder_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "mlp/data_encoder_0/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_0/BiasAdd"
  op: "BiasAdd"
  input: "mlp/data_encoder_0/MatMul"
  input: "mlp/data_encoder_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "mlp/data_encoder_0/Relu"
  op: "Relu"
  input: "mlp/data_encoder_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3061862289905548
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3061862289905548
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "mlp/data_encoder_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "mlp/data_encoder_1/kernel/Initializer/random_uniform/max"
  input: "mlp/data_encoder_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "mlp/data_encoder_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "mlp/data_encoder_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "mlp/data_encoder_1/kernel/Initializer/random_uniform/mul"
  input: "mlp/data_encoder_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "mlp/data_encoder_1/kernel"
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_1/kernel"
  input: "mlp/data_encoder_1/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "mlp/data_encoder_1/bias"
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias/Assign"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_1/bias"
  input: "mlp/data_encoder_1/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_1/MatMul"
  op: "MatMul"
  input: "mlp/data_encoder_0/Relu"
  input: "mlp/data_encoder_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "mlp/data_encoder_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_1/BiasAdd"
  op: "BiasAdd"
  input: "mlp/data_encoder_1/MatMul"
  input: "mlp/data_encoder_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "mlp/data_encoder_1/Relu"
  op: "Relu"
  input: "mlp/data_encoder_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "Reshape_1/shape/2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "Reshape_1/shape"
  op: "Pack"
  input: "strided_slice_3"
  input: "strided_slice_4"
  input: "Reshape_1/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_1"
  op: "Reshape"
  input: "mlp/data_encoder_1/Relu"
  input: "Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "Shape_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\030\000\000\000(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_5/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_5"
  op: "StridedSlice"
  input: "Shape_4"
  input: "strided_slice_5/stack"
  input: "strided_slice_5/stack_1"
  input: "strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "TensorArray_2"
  op: "TensorArrayV3"
  input: "strided_slice_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: false
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "TensorArrayUnstack_2/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\030\000\000\000(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_2/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_2/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_2/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_2/strided_slice"
  op: "StridedSlice"
  input: "TensorArrayUnstack_2/Shape"
  input: "TensorArrayUnstack_2/strided_slice/stack"
  input: "TensorArrayUnstack_2/strided_slice/stack_1"
  input: "TensorArrayUnstack_2/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "TensorArrayUnstack_2/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_2/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_2/range"
  op: "Range"
  input: "TensorArrayUnstack_2/range/start"
  input: "TensorArrayUnstack_2/strided_slice"
  input: "TensorArrayUnstack_2/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "TensorArray_2"
  input: "TensorArrayUnstack_2/range"
  input: "Reshape_1"
  input: "TensorArray_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ReverseSequence"
  op: "ReverseSequence"
  input: "Reshape_1"
  input: "Tile_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 1
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 0
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "rnn/LSTMCellZeroState/Const"
  input: "rnn/LSTMCellZeroState/Const_1"
  input: "rnn/LSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/zeros"
  op: "Fill"
  input: "rnn/LSTMCellZeroState/concat"
  input: "rnn/LSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "rnn/LSTMCellZeroState/Const_4"
  input: "rnn/LSTMCellZeroState/Const_5"
  input: "rnn/LSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "rnn/LSTMCellZeroState/concat_1"
  input: "rnn/LSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "rnn/LSTMCellZeroState/Const_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "rnn/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\030\000\000\000(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "rnn/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/strided_slice"
  op: "StridedSlice"
  input: "rnn/Shape"
  input: "rnn/strided_slice/stack"
  input: "rnn/strided_slice/stack_1"
  input: "rnn/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "rnn/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "rnn/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/concat"
  op: "ConcatV2"
  input: "rnn/Const"
  input: "rnn/Const_1"
  input: "rnn/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/zeros"
  op: "Fill"
  input: "rnn/concat"
  input: "rnn/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/time"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/TensorArray"
  op: "TensorArrayV3"
  input: "rnn/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 40
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "rnn/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "rnn/TensorArray_1"
  op: "TensorArrayV3"
  input: "rnn/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 40
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "rnn/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\030\000\000\000(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "rnn/TensorArrayUnstack/Shape"
  input: "rnn/TensorArrayUnstack/strided_slice/stack"
  input: "rnn/TensorArrayUnstack/strided_slice/stack_1"
  input: "rnn/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/range"
  op: "Range"
  input: "rnn/TensorArrayUnstack/range/start"
  input: "rnn/TensorArrayUnstack/strided_slice"
  input: "rnn/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "rnn/TensorArray_1"
  input: "rnn/TensorArrayUnstack/range"
  input: "ReverseSequence"
  input: "rnn/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReverseSequence"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/Maximum/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/Maximum"
  op: "Maximum"
  input: "rnn/Maximum/x"
  input: "rnn/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/Minimum"
  op: "Minimum"
  input: "rnn/strided_slice"
  input: "rnn/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/iteration_counter"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/while/Enter"
  op: "Enter"
  input: "rnn/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Enter_1"
  op: "Enter"
  input: "rnn/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Enter_2"
  op: "Enter"
  input: "rnn/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Enter_3"
  op: "Enter"
  input: "rnn/LSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Enter_4"
  op: "Enter"
  input: "rnn/LSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Merge"
  op: "Merge"
  input: "rnn/while/Enter"
  input: "rnn/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Merge_1"
  op: "Merge"
  input: "rnn/while/Enter_1"
  input: "rnn/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Merge_2"
  op: "Merge"
  input: "rnn/while/Enter_2"
  input: "rnn/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Merge_3"
  op: "Merge"
  input: "rnn/while/Enter_3"
  input: "rnn/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Merge_4"
  op: "Merge"
  input: "rnn/while/Enter_4"
  input: "rnn/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Less"
  op: "Less"
  input: "rnn/while/Merge"
  input: "rnn/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Less/Enter"
  op: "Enter"
  input: "rnn/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Less_1"
  op: "Less"
  input: "rnn/while/Merge_1"
  input: "rnn/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Less_1/Enter"
  op: "Enter"
  input: "rnn/Minimum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/LogicalAnd"
  op: "LogicalAnd"
  input: "rnn/while/Less"
  input: "rnn/while/Less_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/LoopCond"
  op: "LoopCond"
  input: "rnn/while/LogicalAnd"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Switch"
  op: "Switch"
  input: "rnn/while/Merge"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Switch_1"
  op: "Switch"
  input: "rnn/while/Merge_1"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Switch_2"
  op: "Switch"
  input: "rnn/while/Merge_2"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Switch_3"
  op: "Switch"
  input: "rnn/while/Merge_3"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Switch_4"
  op: "Switch"
  input: "rnn/while/Merge_4"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Identity"
  op: "Identity"
  input: "rnn/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Identity_1"
  op: "Identity"
  input: "rnn/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Identity_2"
  op: "Identity"
  input: "rnn/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Identity_3"
  op: "Identity"
  input: "rnn/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Identity_4"
  op: "Identity"
  input: "rnn/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/add/y"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/while/add"
  op: "Add"
  input: "rnn/while/Identity"
  input: "rnn/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "rnn/while/TensorArrayReadV3/Enter"
  input: "rnn/while/Identity_1"
  input: "rnn/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "rnn/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "rnn/lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1767766922712326
      }
    }
  }
}
node {
  name: "rnn/lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1767766922712326
      }
    }
  }
}
node {
  name: "rnn/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "rnn/lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "rnn/lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "rnn/lstm_cell/kernel/Initializer/random_uniform/max"
  input: "rnn/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "rnn/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "rnn/lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn/lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "rnn/lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "rnn/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn/lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/lstm_cell/kernel/Assign"
  op: "Assign"
  input: "rnn/lstm_cell/kernel"
  input: "rnn/lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/lstm_cell/kernel/read"
  op: "Identity"
  input: "rnn/lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn/lstm_cell/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/lstm_cell/bias/Assign"
  op: "Assign"
  input: "rnn/lstm_cell/bias"
  input: "rnn/lstm_cell/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/lstm_cell/bias/read"
  op: "Identity"
  input: "rnn/lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/concat/axis"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/concat"
  op: "ConcatV2"
  input: "rnn/while/TensorArrayReadV3"
  input: "rnn/while/Identity_4"
  input: "rnn/while/lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/MatMul"
  op: "MatMul"
  input: "rnn/while/lstm_cell/concat"
  input: "rnn/while/lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "rnn/while/lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "rnn/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "rnn/while/lstm_cell/MatMul"
  input: "rnn/while/lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "rnn/while/lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "rnn/lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/lstm_cell/Const"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/split/split_dim"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/split"
  op: "Split"
  input: "rnn/while/lstm_cell/split/split_dim"
  input: "rnn/while/lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "rnn/while/lstm_cell/add/y"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/add"
  op: "Add"
  input: "rnn/while/lstm_cell/split:2"
  input: "rnn/while/lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "rnn/while/lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/mul"
  op: "Mul"
  input: "rnn/while/lstm_cell/Sigmoid"
  input: "rnn/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "rnn/while/lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/Tanh"
  op: "Tanh"
  input: "rnn/while/lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/mul_1"
  op: "Mul"
  input: "rnn/while/lstm_cell/Sigmoid_1"
  input: "rnn/while/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/add_1"
  op: "Add"
  input: "rnn/while/lstm_cell/mul"
  input: "rnn/while/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "rnn/while/lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/Tanh_1"
  op: "Tanh"
  input: "rnn/while/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/lstm_cell/mul_2"
  op: "Mul"
  input: "rnn/while/lstm_cell/Sigmoid_2"
  input: "rnn/while/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "rnn/while/Identity_1"
  input: "rnn/while/lstm_cell/mul_2"
  input: "rnn/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "rnn/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/add_1/y"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/while/add_1"
  op: "Add"
  input: "rnn/while/Identity_1"
  input: "rnn/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/NextIteration"
  op: "NextIteration"
  input: "rnn/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/NextIteration_1"
  op: "NextIteration"
  input: "rnn/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/NextIteration_2"
  op: "NextIteration"
  input: "rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/NextIteration_3"
  op: "NextIteration"
  input: "rnn/while/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/NextIteration_4"
  op: "NextIteration"
  input: "rnn/while/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Exit"
  op: "Exit"
  input: "rnn/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Exit_1"
  op: "Exit"
  input: "rnn/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Exit_2"
  op: "Exit"
  input: "rnn/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Exit_3"
  op: "Exit"
  input: "rnn/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Exit_4"
  op: "Exit"
  input: "rnn/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "rnn/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "rnn/TensorArray"
  input: "rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/TensorArrayStack/range"
  op: "Range"
  input: "rnn/TensorArrayStack/range/start"
  input: "rnn/TensorArrayStack/TensorArraySizeV3"
  input: "rnn/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "rnn/TensorArray"
  input: "rnn/TensorArrayStack/range"
  input: "rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 40
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "rnn/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\030\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "rnn/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "ReverseSequence_1"
  op: "ReverseSequence"
  input: "rnn/TensorArrayStack/TensorArrayGatherV3"
  input: "Tile_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 1
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 0
    }
  }
}
node {
  name: "Shape_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\030\000\000\000(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_6/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_6"
  op: "StridedSlice"
  input: "Shape_5"
  input: "strided_slice_6/stack"
  input: "strided_slice_6/stack_1"
  input: "strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "TensorArray_3"
  op: "TensorArrayV3"
  input: "strided_slice_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: false
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "TensorArrayUnstack_3/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\030\000\000\000(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_3/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_3/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_3/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_3/strided_slice"
  op: "StridedSlice"
  input: "TensorArrayUnstack_3/Shape"
  input: "TensorArrayUnstack_3/strided_slice/stack"
  input: "TensorArrayUnstack_3/strided_slice/stack_1"
  input: "TensorArrayUnstack_3/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "TensorArrayUnstack_3/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_3/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_3/range"
  op: "Range"
  input: "TensorArrayUnstack_3/range/start"
  input: "TensorArrayUnstack_3/strided_slice"
  input: "TensorArrayUnstack_3/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_3/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "TensorArray_3"
  input: "TensorArrayUnstack_3/range"
  input: "ReverseSequence_1"
  input: "TensorArray_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReverseSequence_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Shape_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "strided_slice_7/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_7"
  op: "StridedSlice"
  input: "Shape_6"
  input: "strided_slice_7/stack"
  input: "strided_slice_7/stack_1"
  input: "strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Max_1"
  op: "Max"
  input: "Cast"
  input: "Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SequenceMask/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SequenceMask/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SequenceMask/Range"
  op: "Range"
  input: "SequenceMask/Const"
  input: "Max_1"
  input: "SequenceMask/Const_1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "SequenceMask/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "SequenceMask/ExpandDims"
  op: "ExpandDims"
  input: "Cast"
  input: "SequenceMask/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "SequenceMask/Cast"
  op: "Cast"
  input: "SequenceMask/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "SequenceMask/Less"
  op: "Less"
  input: "SequenceMask/Range"
  input: "SequenceMask/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "SequenceMask/Cast_1"
  op: "Cast"
  input: "SequenceMask/Less"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "transpose_2/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transpose_2"
  op: "Transpose"
  input: "SequenceMask/Cast_1"
  input: "transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "Tile_3/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "Tile_3"
  op: "Tile"
  input: "transpose_2"
  input: "Tile_3/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "mask_ta"
  op: "TensorArrayV3"
  input: "Max_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "TensorArrayUnstack_4/Shape"
  op: "Shape"
  input: "Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "TensorArrayUnstack_4/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_4/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_4/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_4/strided_slice"
  op: "StridedSlice"
  input: "TensorArrayUnstack_4/Shape"
  input: "TensorArrayUnstack_4/strided_slice/stack"
  input: "TensorArrayUnstack_4/strided_slice/stack_1"
  input: "TensorArrayUnstack_4/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "TensorArrayUnstack_4/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_4/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_4/range"
  op: "Range"
  input: "TensorArrayUnstack_4/range/start"
  input: "TensorArrayUnstack_4/strided_slice"
  input: "TensorArrayUnstack_4/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "TensorArrayUnstack_4/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "mask_ta"
  input: "TensorArrayUnstack_4/range"
  input: "Tile_3"
  input: "mask_ta:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Tile_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "mul"
  op: "Mul"
  input: "strided_slice"
  input: "mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/ExpandDims"
  op: "ExpandDims"
  input: "mul"
  input: "LSTMCellZeroState/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "LSTMCellZeroState/ExpandDims"
  input: "LSTMCellZeroState/Const"
  input: "LSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/zeros"
  op: "Fill"
  input: "LSTMCellZeroState/concat"
  input: "LSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTMCellZeroState/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "mul"
  input: "LSTMCellZeroState/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/ExpandDims_2"
  op: "ExpandDims"
  input: "mul"
  input: "LSTMCellZeroState/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "LSTMCellZeroState/ExpandDims_2"
  input: "LSTMCellZeroState/Const_2"
  input: "LSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "LSTMCellZeroState/concat_1"
  input: "LSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTMCellZeroState/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/ExpandDims_3"
  op: "ExpandDims"
  input: "mul"
  input: "LSTMCellZeroState/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "LSTMCellZeroState/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "zeros/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "zeros/mul"
  op: "Mul"
  input: "mul"
  input: "zeros/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros/Less/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "zeros/Less"
  op: "Less"
  input: "zeros/mul"
  input: "zeros/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros/packed/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "zeros/packed"
  op: "Pack"
  input: "mul"
  input: "zeros/packed/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "zeros"
  op: "Fill"
  input: "zeros/packed"
  input: "zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "zeros_1/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "zeros_1/mul"
  op: "Mul"
  input: "mul"
  input: "zeros_1/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_1/Less/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "zeros_1/Less"
  op: "Less"
  input: "zeros_1/mul"
  input: "zeros_1/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_1/packed/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "zeros_1/packed"
  op: "Pack"
  input: "mul"
  input: "zeros_1/packed/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "zeros_1"
  op: "Fill"
  input: "zeros_1/packed"
  input: "zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "log_weights_ta"
  op: "TensorArrayV3"
  input: "Max_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "resampled_ta"
  op: "TensorArrayV3"
  input: "Max_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "zeros_2/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "zeros_2/mul"
  op: "Mul"
  input: "zeros_2/mul/x"
  input: "strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_2/Less/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "zeros_2/Less"
  op: "Less"
  input: "zeros_2/mul"
  input: "zeros_2/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_2/packed/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "zeros_2/packed"
  op: "Pack"
  input: "zeros_2/packed/0"
  input: "strided_slice_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "zeros_2/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "zeros_2"
  op: "Fill"
  input: "zeros_2/packed"
  input: "zeros_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "zeros_3/Less/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "zeros_3/Less"
  op: "Less"
  input: "strided_slice_7"
  input: "zeros_3/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zeros_3/packed"
  op: "Pack"
  input: "strided_slice_7"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "zeros_3/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "zeros_3"
  op: "Fill"
  input: "zeros_3/packed"
  input: "zeros_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/Enter"
  op: "Enter"
  input: "Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/Enter_1"
  op: "Enter"
  input: "LSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/Enter_2"
  op: "Enter"
  input: "LSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/Enter_3"
  op: "Enter"
  input: "zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/Enter_4"
  op: "Enter"
  input: "zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/Enter_5"
  op: "Enter"
  input: "while/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/Enter_6"
  op: "Enter"
  input: "log_weights_ta:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/Enter_7"
  op: "Enter"
  input: "resampled_ta:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/Enter_8"
  op: "Enter"
  input: "zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/Enter_9"
  op: "Enter"
  input: "zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/Merge"
  op: "Merge"
  input: "while/Enter"
  input: "while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Merge_1"
  op: "Merge"
  input: "while/Enter_1"
  input: "while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Merge_2"
  op: "Merge"
  input: "while/Enter_2"
  input: "while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Merge_3"
  op: "Merge"
  input: "while/Enter_3"
  input: "while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Merge_4"
  op: "Merge"
  input: "while/Enter_4"
  input: "while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Merge_5"
  op: "Merge"
  input: "while/Enter_5"
  input: "while/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Merge_6"
  op: "Merge"
  input: "while/Enter_6"
  input: "while/NextIteration_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Merge_7"
  op: "Merge"
  input: "while/Enter_7"
  input: "while/NextIteration_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Merge_8"
  op: "Merge"
  input: "while/Enter_8"
  input: "while/NextIteration_8"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Merge_9"
  op: "Merge"
  input: "while/Enter_9"
  input: "while/NextIteration_9"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Less"
  op: "Less"
  input: "while/Merge"
  input: "while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Less/Enter"
  op: "Enter"
  input: "Max_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/LoopCond"
  op: "LoopCond"
  input: "while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Switch"
  op: "Switch"
  input: "while/Merge"
  input: "while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Switch_1"
  op: "Switch"
  input: "while/Merge_1"
  input: "while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Switch_2"
  op: "Switch"
  input: "while/Merge_2"
  input: "while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Switch_3"
  op: "Switch"
  input: "while/Merge_3"
  input: "while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Switch_4"
  op: "Switch"
  input: "while/Merge_4"
  input: "while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Switch_5"
  op: "Switch"
  input: "while/Merge_5"
  input: "while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Merge_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Switch_6"
  op: "Switch"
  input: "while/Merge_6"
  input: "while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Merge_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Switch_7"
  op: "Switch"
  input: "while/Merge_7"
  input: "while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Merge_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Switch_8"
  op: "Switch"
  input: "while/Merge_8"
  input: "while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Merge_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/Switch_9"
  op: "Switch"
  input: "while/Merge_9"
  input: "while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Merge_9"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/Identity"
  op: "Identity"
  input: "while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Identity_1"
  op: "Identity"
  input: "while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Identity_2"
  op: "Identity"
  input: "while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Identity_3"
  op: "Identity"
  input: "while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Identity_4"
  op: "Identity"
  input: "while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Identity_5"
  op: "Identity"
  input: "while/Switch_5:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Identity_6"
  op: "Identity"
  input: "while/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Identity_7"
  op: "Identity"
  input: "while/Switch_7:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Identity_8"
  op: "Identity"
  input: "while/Switch_8:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/Identity_9"
  op: "Identity"
  input: "while/Switch_9:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "while/TensorArrayReadV3/Enter"
  input: "while/Identity"
  input: "while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "mask_ta"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "TensorArrayUnstack_4/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/TensorArrayReadV3_1"
  op: "TensorArrayReadV3"
  input: "while/TensorArrayReadV3_1/Enter"
  input: "while/Identity"
  input: "while/TensorArrayReadV3_1/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/TensorArrayReadV3_1/Enter"
  op: "Enter"
  input: "TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/TensorArrayReadV3_1/Enter_1"
  op: "Enter"
  input: "TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/TensorArrayReadV3_2"
  op: "TensorArrayReadV3"
  input: "while/TensorArrayReadV3_2/Enter"
  input: "while/Identity"
  input: "while/TensorArrayReadV3_2/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/TensorArrayReadV3_2/Enter"
  op: "Enter"
  input: "TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/TensorArrayReadV3_2/Enter_1"
  op: "Enter"
  input: "TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp/data_encoder_0/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter"
  op: "Enter"
  input: "mlp/data_encoder_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp/data_encoder_0/MatMul"
  op: "MatMul"
  input: "while/TensorArrayReadV3_1"
  input: "while/mlp/data_encoder_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "while/mlp/data_encoder_0/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter"
  op: "Enter"
  input: "mlp/data_encoder_0/bias"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp/data_encoder_0/BiasAdd"
  op: "BiasAdd"
  input: "while/mlp/data_encoder_0/MatMul"
  input: "while/mlp/data_encoder_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "while/mlp/data_encoder_0/Relu"
  op: "Relu"
  input: "while/mlp/data_encoder_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp/data_encoder_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter"
  op: "Enter"
  input: "mlp/data_encoder_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp/data_encoder_1/MatMul"
  op: "MatMul"
  input: "while/mlp/data_encoder_0/Relu"
  input: "while/mlp/data_encoder_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "while/mlp/data_encoder_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter"
  op: "Enter"
  input: "mlp/data_encoder_1/bias"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp/data_encoder_1/BiasAdd"
  op: "BiasAdd"
  input: "while/mlp/data_encoder_1/MatMul"
  input: "while/mlp/data_encoder_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "while/mlp/data_encoder_1/Relu"
  op: "Relu"
  input: "while/mlp/data_encoder_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/concat/axis"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/concat"
  op: "ConcatV2"
  input: "while/mlp/data_encoder_1/Relu"
  input: "while/Identity_3"
  input: "while/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "`\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.16366341710090637
      }
    }
  }
}
node {
  name: "lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.16366341710090637
      }
    }
  }
}
node {
  name: "lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "lstm_cell/kernel/Initializer/random_uniform/max"
  input: "lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_cell/kernel/Assign"
  op: "Assign"
  input: "lstm_cell/kernel"
  input: "lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_cell/kernel/read"
  op: "Identity"
  input: "lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "lstm_cell/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_cell/bias/Assign"
  op: "Assign"
  input: "lstm_cell/bias"
  input: "lstm_cell/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_cell/bias/read"
  op: "Identity"
  input: "lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "while/lstm_cell/concat/axis"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/lstm_cell/concat"
  op: "ConcatV2"
  input: "while/concat"
  input: "while/Identity_2"
  input: "while/lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "while/lstm_cell/MatMul"
  op: "MatMul"
  input: "while/lstm_cell/concat"
  input: "while/lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "while/lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "while/lstm_cell/MatMul"
  input: "while/lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "while/lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/lstm_cell/Const"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "while/lstm_cell/split/split_dim"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/lstm_cell/split"
  op: "Split"
  input: "while/lstm_cell/split/split_dim"
  input: "while/lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "while/lstm_cell/add/y"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "while/lstm_cell/add"
  op: "Add"
  input: "while/lstm_cell/split:2"
  input: "while/lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "while/lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/lstm_cell/mul"
  op: "Mul"
  input: "while/lstm_cell/Sigmoid"
  input: "while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "while/lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/lstm_cell/Tanh"
  op: "Tanh"
  input: "while/lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/lstm_cell/mul_1"
  op: "Mul"
  input: "while/lstm_cell/Sigmoid_1"
  input: "while/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/lstm_cell/add_1"
  op: "Add"
  input: "while/lstm_cell/mul"
  input: "while/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "while/lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/lstm_cell/Tanh_1"
  op: "Tanh"
  input: "while/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/lstm_cell/mul_2"
  op: "Mul"
  input: "while/lstm_cell/Sigmoid_2"
  input: "while/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/concat_1/concat_dim"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/concat_1"
  op: "Identity"
  input: "while/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3061862289905548
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3061862289905548
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform/max"
  input: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform/RandomUniform"
  input: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform"
  op: "Add"
  input: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform/mul"
  input: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_2/prior_fcnet_0/kernel"
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_0/kernel"
  input: "while/mlp_2/prior_fcnet_0/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_0/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_2/prior_fcnet_0/bias"
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_0/bias"
  input: "while/mlp_2/prior_fcnet_0/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_0/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_2/prior_fcnet_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/MatMul"
  op: "MatMul"
  input: "while/concat_1"
  input: "while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_2/prior_fcnet_0/bias"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/BiasAdd"
  op: "BiasAdd"
  input: "while/mlp_2/prior_fcnet_0/MatMul"
  input: "while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/Relu"
  op: "Relu"
  input: "while/mlp_2/prior_fcnet_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.25
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.25
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform/max"
  input: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform/mul"
  input: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_2/prior_fcnet_1/kernel"
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_1/kernel"
  input: "while/mlp_2/prior_fcnet_1/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_2/prior_fcnet_1/bias"
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_1/bias"
  input: "while/mlp_2/prior_fcnet_1/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_2/prior_fcnet_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/MatMul"
  op: "MatMul"
  input: "while/mlp_2/prior_fcnet_0/Relu"
  input: "while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_2/prior_fcnet_1/bias"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/BiasAdd"
  op: "BiasAdd"
  input: "while/mlp_2/prior_fcnet_1/MatMul"
  input: "while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/Relu"
  op: "Relu"
  input: "while/mlp_2/prior_fcnet_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Const_1"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "while/split/split_dim"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/split"
  op: "Split"
  input: "while/split/split_dim"
  input: "while/mlp_2/prior_fcnet_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 2
    }
  }
}
node {
  name: "while/add/y"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "while/add"
  op: "Add"
  input: "while/split:1"
  input: "while/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Softplus"
  op: "Softplus"
  input: "while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Maximum/y"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/Maximum"
  op: "Maximum"
  input: "while/Softplus"
  input: "while/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal/loc"
  op: "Identity"
  input: "while/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal/scale"
  op: "Identity"
  input: "while/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/TensorArrayReadV3_3"
  op: "TensorArrayReadV3"
  input: "while/TensorArrayReadV3_3/Enter"
  input: "while/Identity"
  input: "while/TensorArrayReadV3_3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/TensorArrayReadV3_3/Enter"
  op: "Enter"
  input: "TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/TensorArrayReadV3_3/Enter_1"
  op: "Enter"
  input: "TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/Normal/mean/ones_like/Shape"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "while/Normal/mean/ones_like/Const"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "while/Normal/mean/ones_like"
  op: "Fill"
  input: "while/Normal/mean/ones_like/Shape"
  input: "while/Normal/mean/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/Normal/mean/mul"
  op: "Mul"
  input: "while/Normal/loc"
  input: "while/Normal/mean/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/concat_2/axis"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/concat_2"
  op: "ConcatV2"
  input: "while/lstm_cell/mul_2"
  input: "while/TensorArrayReadV3_3"
  input: "while/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.25
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.25
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform/max"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform/RandomUniform"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform"
  op: "Add"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform/mul"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_4/approximate_posterior_fcnet_0/kernel"
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_4/approximate_posterior_fcnet_0/bias"
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/MatMul"
  op: "MatMul"
  input: "while/concat_2"
  input: "while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/BiasAdd"
  op: "BiasAdd"
  input: "while/mlp_4/approximate_posterior_fcnet_0/MatMul"
  input: "while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/Relu"
  op: "Relu"
  input: "while/mlp_4/approximate_posterior_fcnet_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.25
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.25
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform/max"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform/mul"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_4/approximate_posterior_fcnet_1/kernel"
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_4/approximate_posterior_fcnet_1/bias"
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/MatMul"
  op: "MatMul"
  input: "while/mlp_4/approximate_posterior_fcnet_0/Relu"
  input: "while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/BiasAdd"
  op: "BiasAdd"
  input: "while/mlp_4/approximate_posterior_fcnet_1/MatMul"
  input: "while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/Relu"
  op: "Relu"
  input: "while/mlp_4/approximate_posterior_fcnet_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/Const_2"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "while/split_1/split_dim"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/split_1"
  op: "Split"
  input: "while/split_1/split_dim"
  input: "while/mlp_4/approximate_posterior_fcnet_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 2
    }
  }
}
node {
  name: "while/add_1/y"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "while/add_1"
  op: "Add"
  input: "while/split_1:1"
  input: "while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Softplus_1"
  op: "Softplus"
  input: "while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Maximum_1/y"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/Maximum_1"
  op: "Maximum"
  input: "while/Softplus_1"
  input: "while/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/add_2"
  op: "Add"
  input: "while/split_1"
  input: "while/Normal/mean/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/loc"
  op: "Identity"
  input: "while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/scale"
  op: "Identity"
  input: "while/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/sample_shape"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/batch_shape_tensor/batch_shape"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/concat/values_0"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/concat/axis"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/concat"
  op: "ConcatV2"
  input: "while/Normal_1/sample/concat/values_0"
  input: "while/Normal_1/batch_shape_tensor/batch_shape"
  input: "while/Normal_1/sample/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/random_normal/mean"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/random_normal/stddev"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "while/Normal_1/sample/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "while/Normal_1/sample/random_normal/mul"
  op: "Mul"
  input: "while/Normal_1/sample/random_normal/RandomStandardNormal"
  input: "while/Normal_1/sample/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/random_normal"
  op: "Add"
  input: "while/Normal_1/sample/random_normal/mul"
  input: "while/Normal_1/sample/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/mul"
  op: "Mul"
  input: "while/Normal_1/sample/random_normal"
  input: "while/Normal_1/scale"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/add"
  op: "Add"
  input: "while/Normal_1/sample/mul"
  input: "while/Normal_1/loc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/Shape"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/strided_slice/stack"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/strided_slice/stack_1"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/strided_slice/stack_2"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/strided_slice"
  op: "StridedSlice"
  input: "while/Normal_1/sample/Shape"
  input: "while/Normal_1/sample/strided_slice/stack"
  input: "while/Normal_1/sample/strided_slice/stack_1"
  input: "while/Normal_1/sample/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "while/Normal_1/sample/concat_1/axis"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/concat_1"
  op: "ConcatV2"
  input: "while/Normal_1/sample/sample_shape"
  input: "while/Normal_1/sample/strided_slice"
  input: "while/Normal_1/sample/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/sample/Reshape"
  op: "Reshape"
  input: "while/Normal_1/sample/add"
  input: "while/Normal_1/sample/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3061862289905548
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3061862289905548
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform/max"
  input: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform/RandomUniform"
  input: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform"
  op: "Add"
  input: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform/mul"
  input: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_1/latent_encoder_0/kernel"
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_0/kernel"
  input: "while/mlp_1/latent_encoder_0/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_0/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_1/latent_encoder_0/bias"
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_0/bias"
  input: "while/mlp_1/latent_encoder_0/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_0/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_1/latent_encoder_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/MatMul"
  op: "MatMul"
  input: "while/Normal_1/sample/Reshape"
  input: "while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_1/latent_encoder_0/bias"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/BiasAdd"
  op: "BiasAdd"
  input: "while/mlp_1/latent_encoder_0/MatMul"
  input: "while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/Relu"
  op: "Relu"
  input: "while/mlp_1/latent_encoder_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3061862289905548
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3061862289905548
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform/max"
  input: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform/mul"
  input: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_1/latent_encoder_1/kernel"
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_1/kernel"
  input: "while/mlp_1/latent_encoder_1/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_1/latent_encoder_1/bias"
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_1/bias"
  input: "while/mlp_1/latent_encoder_1/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_1/latent_encoder_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/MatMul"
  op: "MatMul"
  input: "while/mlp_1/latent_encoder_0/Relu"
  input: "while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_1/latent_encoder_1/bias"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/BiasAdd"
  op: "BiasAdd"
  input: "while/mlp_1/latent_encoder_1/MatMul"
  input: "while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/Relu"
  op: "Relu"
  input: "while/mlp_1/latent_encoder_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/concat_3/axis"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/concat_3"
  op: "ConcatV2"
  input: "while/mlp_1/latent_encoder_1/Relu"
  input: "while/lstm_cell/mul_2"
  input: "while/concat_3/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.25
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.25
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform/max"
  input: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform/RandomUniform"
  input: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform"
  op: "Add"
  input: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform/mul"
  input: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_3/generative_fcnet_0/kernel"
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_0/kernel"
  input: "while/mlp_3/generative_fcnet_0/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_0/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_3/generative_fcnet_0/bias"
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_0/bias"
  input: "while/mlp_3/generative_fcnet_0/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_0/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_3/generative_fcnet_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/MatMul"
  op: "MatMul"
  input: "while/concat_3"
  input: "while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_3/generative_fcnet_0/bias"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/BiasAdd"
  op: "BiasAdd"
  input: "while/mlp_3/generative_fcnet_0/MatMul"
  input: "while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/Relu"
  op: "Relu"
  input: "while/mlp_3/generative_fcnet_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.42008402943611145
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.42008402943611145
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform/max"
  input: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform/mul"
  input: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_3/generative_fcnet_1/kernel"
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_1/kernel"
  input: "while/mlp_3/generative_fcnet_1/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_3/generative_fcnet_1/bias"
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_1/bias"
  input: "while/mlp_3/generative_fcnet_1/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_3/generative_fcnet_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/MatMul"
  op: "MatMul"
  input: "while/mlp_3/generative_fcnet_0/Relu"
  input: "while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter"
  op: "Enter"
  input: "while/mlp_3/generative_fcnet_1/bias"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/BiasAdd"
  op: "BiasAdd"
  input: "while/mlp_3/generative_fcnet_1/MatMul"
  input: "while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/Relu"
  op: "Relu"
  input: "while/mlp_3/generative_fcnet_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "while/Const_3"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "while/split_2/split_dim"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/split_2"
  op: "Split"
  input: "while/split_2/split_dim"
  input: "while/mlp_3/generative_fcnet_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 2
    }
  }
}
node {
  name: "while/add_3/y"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.25
      }
    }
  }
}
node {
  name: "while/add_3"
  op: "Add"
  input: "while/split_2:1"
  input: "while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "while/Softplus_2"
  op: "Softplus"
  input: "while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "while/Maximum_2/y"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/Maximum_2"
  op: "Maximum"
  input: "while/Softplus_2"
  input: "while/Maximum_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_2/loc"
  op: "Identity"
  input: "while/split_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_2/scale"
  op: "Identity"
  input: "while/Maximum_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_2/log_prob/standardize/sub"
  op: "Sub"
  input: "while/TensorArrayReadV3_2"
  input: "while/Normal_2/loc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_2/log_prob/standardize/truediv"
  op: "RealDiv"
  input: "while/Normal_2/log_prob/standardize/sub"
  input: "while/Normal_2/scale"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_2/log_prob/Square"
  op: "Square"
  input: "while/Normal_2/log_prob/standardize/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_2/log_prob/mul/x"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5
      }
    }
  }
}
node {
  name: "while/Normal_2/log_prob/mul"
  op: "Mul"
  input: "while/Normal_2/log_prob/mul/x"
  input: "while/Normal_2/log_prob/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_2/log_prob/Log"
  op: "Log"
  input: "while/Normal_2/scale"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_2/log_prob/add/x"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9189385175704956
      }
    }
  }
}
node {
  name: "while/Normal_2/log_prob/add"
  op: "Add"
  input: "while/Normal_2/log_prob/add/x"
  input: "while/Normal_2/log_prob/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_2/log_prob/sub"
  op: "Sub"
  input: "while/Normal_2/log_prob/mul"
  input: "while/Normal_2/log_prob/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "while/Sum/reduction_indices"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "while/Sum"
  op: "Sum"
  input: "while/Normal_2/log_prob/sub"
  input: "while/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "while/Normal/log_prob/standardize/sub"
  op: "Sub"
  input: "while/Normal_1/sample/Reshape"
  input: "while/Normal/loc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal/log_prob/standardize/truediv"
  op: "RealDiv"
  input: "while/Normal/log_prob/standardize/sub"
  input: "while/Normal/scale"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal/log_prob/Square"
  op: "Square"
  input: "while/Normal/log_prob/standardize/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal/log_prob/mul/x"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5
      }
    }
  }
}
node {
  name: "while/Normal/log_prob/mul"
  op: "Mul"
  input: "while/Normal/log_prob/mul/x"
  input: "while/Normal/log_prob/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal/log_prob/Log"
  op: "Log"
  input: "while/Normal/scale"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal/log_prob/add/x"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9189385175704956
      }
    }
  }
}
node {
  name: "while/Normal/log_prob/add"
  op: "Add"
  input: "while/Normal/log_prob/add/x"
  input: "while/Normal/log_prob/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal/log_prob/sub"
  op: "Sub"
  input: "while/Normal/log_prob/mul"
  input: "while/Normal/log_prob/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Sum_1/reduction_indices"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "while/Sum_1"
  op: "Sum"
  input: "while/Normal/log_prob/sub"
  input: "while/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "while/Normal_1/log_prob/standardize/sub"
  op: "Sub"
  input: "while/Normal_1/sample/Reshape"
  input: "while/Normal_1/loc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/log_prob/standardize/truediv"
  op: "RealDiv"
  input: "while/Normal_1/log_prob/standardize/sub"
  input: "while/Normal_1/scale"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/log_prob/Square"
  op: "Square"
  input: "while/Normal_1/log_prob/standardize/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/log_prob/mul/x"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5
      }
    }
  }
}
node {
  name: "while/Normal_1/log_prob/mul"
  op: "Mul"
  input: "while/Normal_1/log_prob/mul/x"
  input: "while/Normal_1/log_prob/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/log_prob/Log"
  op: "Log"
  input: "while/Normal_1/scale"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/log_prob/add/x"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9189385175704956
      }
    }
  }
}
node {
  name: "while/Normal_1/log_prob/add"
  op: "Add"
  input: "while/Normal_1/log_prob/add/x"
  input: "while/Normal_1/log_prob/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Normal_1/log_prob/sub"
  op: "Sub"
  input: "while/Normal_1/log_prob/mul"
  input: "while/Normal_1/log_prob/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Sum_2/reduction_indices"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "while/Sum_2"
  op: "Sum"
  input: "while/Normal_1/log_prob/sub"
  input: "while/Sum_2/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "while/add_4"
  op: "Add"
  input: "while/Sum_1"
  input: "while/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "while/sub"
  op: "Sub"
  input: "while/add_4"
  input: "while/Sum_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "while/mul"
  op: "Mul"
  input: "while/sub"
  input: "while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "while/Reshape/shape/0"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "while/Reshape/shape"
  op: "Pack"
  input: "while/Reshape/shape/0"
  input: "while/Reshape/shape/Enter"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "while/Reshape/shape/Enter"
  op: "Enter"
  input: "strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/Reshape"
  op: "Reshape"
  input: "while/mul"
  input: "while/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/add_5"
  op: "Add"
  input: "while/Identity_8"
  input: "while/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/Shape"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "while/strided_slice/stack"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/strided_slice/stack_1"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/strided_slice/stack_2"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/strided_slice"
  op: "StridedSlice"
  input: "while/Shape"
  input: "while/strided_slice/stack"
  input: "while/strided_slice/stack_1"
  input: "while/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "while/ReduceLogSumExp/Max/reduction_indices"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp/Max"
  op: "Max"
  input: "while/add_5"
  input: "while/ReduceLogSumExp/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "while/ReduceLogSumExp/IsFinite"
  op: "IsFinite"
  input: "while/ReduceLogSumExp/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp/zeros_like"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp/Select"
  op: "Select"
  input: "while/ReduceLogSumExp/IsFinite"
  input: "while/ReduceLogSumExp/Max"
  input: "while/ReduceLogSumExp/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp/StopGradient"
  op: "StopGradient"
  input: "while/ReduceLogSumExp/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp/Sub"
  op: "Sub"
  input: "while/add_5"
  input: "while/ReduceLogSumExp/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp/Exp"
  op: "Exp"
  input: "while/ReduceLogSumExp/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp/Sum/reduction_indices"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp/Sum"
  op: "Sum"
  input: "while/ReduceLogSumExp/Exp"
  input: "while/ReduceLogSumExp/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "while/ReduceLogSumExp/Log"
  op: "Log"
  input: "while/ReduceLogSumExp/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp/Shape"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp/Reshape"
  op: "Reshape"
  input: "while/ReduceLogSumExp/StopGradient"
  input: "while/ReduceLogSumExp/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp/Add"
  op: "Add"
  input: "while/ReduceLogSumExp/Log"
  input: "while/ReduceLogSumExp/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/mul_1/x"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "while/mul_1"
  op: "Mul"
  input: "while/mul_1/x"
  input: "while/ReduceLogSumExp/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/mul_2/x"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "while/mul_2"
  op: "Mul"
  input: "while/mul_2/x"
  input: "while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_1/Max/reduction_indices"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_1/Max"
  op: "Max"
  input: "while/mul_2"
  input: "while/ReduceLogSumExp_1/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "while/ReduceLogSumExp_1/IsFinite"
  op: "IsFinite"
  input: "while/ReduceLogSumExp_1/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_1/zeros_like"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_1/Select"
  op: "Select"
  input: "while/ReduceLogSumExp_1/IsFinite"
  input: "while/ReduceLogSumExp_1/Max"
  input: "while/ReduceLogSumExp_1/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_1/StopGradient"
  op: "StopGradient"
  input: "while/ReduceLogSumExp_1/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_1/Sub"
  op: "Sub"
  input: "while/mul_2"
  input: "while/ReduceLogSumExp_1/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_1/Exp"
  op: "Exp"
  input: "while/ReduceLogSumExp_1/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_1/Sum/reduction_indices"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_1/Sum"
  op: "Sum"
  input: "while/ReduceLogSumExp_1/Exp"
  input: "while/ReduceLogSumExp_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "while/ReduceLogSumExp_1/Log"
  op: "Log"
  input: "while/ReduceLogSumExp_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_1/Shape"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_1/Reshape"
  op: "Reshape"
  input: "while/ReduceLogSumExp_1/StopGradient"
  input: "while/ReduceLogSumExp_1/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_1/Add"
  op: "Add"
  input: "while/ReduceLogSumExp_1/Log"
  input: "while/ReduceLogSumExp_1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/sub_1"
  op: "Sub"
  input: "while/mul_1"
  input: "while/ReduceLogSumExp_1/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ToFloat"
  op: "Cast"
  input: "while/strided_slice"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/truediv/y"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "while/truediv"
  op: "RealDiv"
  input: "while/ToFloat"
  input: "while/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Log"
  op: "Log"
  input: "while/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/LessEqual"
  op: "LessEqual"
  input: "while/sub_1"
  input: "while/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_2/Max/reduction_indices"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_2/Max"
  op: "Max"
  input: "while/add_5"
  input: "while/ReduceLogSumExp_2/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "while/ReduceLogSumExp_2/IsFinite"
  op: "IsFinite"
  input: "while/ReduceLogSumExp_2/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_2/zeros_like"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_2/Select"
  op: "Select"
  input: "while/ReduceLogSumExp_2/IsFinite"
  input: "while/ReduceLogSumExp_2/Max"
  input: "while/ReduceLogSumExp_2/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_2/StopGradient"
  op: "StopGradient"
  input: "while/ReduceLogSumExp_2/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_2/Sub"
  op: "Sub"
  input: "while/add_5"
  input: "while/ReduceLogSumExp_2/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_2/Exp"
  op: "Exp"
  input: "while/ReduceLogSumExp_2/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_2/Sum/reduction_indices"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_2/Sum"
  op: "Sum"
  input: "while/ReduceLogSumExp_2/Exp"
  input: "while/ReduceLogSumExp_2/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "while/ReduceLogSumExp_2/Log"
  op: "Log"
  input: "while/ReduceLogSumExp_2/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_2/Add"
  op: "Add"
  input: "while/ReduceLogSumExp_2/Log"
  input: "while/ReduceLogSumExp_2/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/sub_2"
  op: "Sub"
  input: "while/add_5"
  input: "while/ReduceLogSumExp_2/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/transpose/perm"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "while/transpose"
  op: "Transpose"
  input: "while/sub_2"
  input: "while/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "while/Categorical/probs"
  op: "Softmax"
  input: "while/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "while/Categorical/batch_rank"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/Categorical/logits_shape"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "while/Categorical/event_size"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "while/Categorical/batch_shape"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "while/Categorical/sample/sample_shape"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "while/Categorical/sample/sample_shape_1"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "while/Categorical/sample/multinomial/Multinomial/num_samples"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "while/Categorical/sample/multinomial/Multinomial"
  op: "Multinomial"
  input: "while/transpose"
  input: "while/Categorical/sample/multinomial/Multinomial/num_samples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "output_dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "while/Categorical/sample/transpose/perm"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "while/Categorical/sample/transpose"
  op: "Transpose"
  input: "while/Categorical/sample/multinomial/Multinomial"
  input: "while/Categorical/sample/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/Categorical/batch_shape_tensor/batch_shape"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "while/Categorical/sample/concat/values_0"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "while/Categorical/sample/concat/axis"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/Categorical/sample/concat"
  op: "ConcatV2"
  input: "while/Categorical/sample/concat/values_0"
  input: "while/Categorical/batch_shape_tensor/batch_shape"
  input: "while/Categorical/sample/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "while/Categorical/sample/Reshape"
  op: "Reshape"
  input: "while/Categorical/sample/transpose"
  input: "while/Categorical/sample/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/Categorical/sample/Shape"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "while/Categorical/sample/strided_slice/stack"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/Categorical/sample/strided_slice/stack_1"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/Categorical/sample/strided_slice/stack_2"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/Categorical/sample/strided_slice"
  op: "StridedSlice"
  input: "while/Categorical/sample/Shape"
  input: "while/Categorical/sample/strided_slice/stack"
  input: "while/Categorical/sample/strided_slice/stack_1"
  input: "while/Categorical/sample/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "while/Categorical/sample/concat_1/axis"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/Categorical/sample/concat_1"
  op: "ConcatV2"
  input: "while/Categorical/sample/sample_shape_1"
  input: "while/Categorical/sample/strided_slice"
  input: "while/Categorical/sample/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "while/Categorical/sample/Reshape_1"
  op: "Reshape"
  input: "while/Categorical/sample/Reshape"
  input: "while/Categorical/sample/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/StopGradient"
  op: "StopGradient"
  input: "while/Categorical/sample/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/range/start"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/range/delta"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/range"
  op: "Range"
  input: "while/range/start"
  input: "while/Reshape/shape/Enter"
  input: "while/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ExpandDims/dim"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/ExpandDims"
  op: "ExpandDims"
  input: "while/range"
  input: "while/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/mul_3"
  op: "Mul"
  input: "while/StopGradient"
  input: "while/Reshape/shape/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/add_6"
  op: "Add"
  input: "while/mul_3"
  input: "while/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/Reshape_1/shape"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "while/Reshape_1"
  op: "Reshape"
  input: "while/add_6"
  input: "while/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "while/GatherV2/axis"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/GatherV2"
  op: "GatherV2"
  input: "while/lstm_cell/add_1"
  input: "while/Reshape_1"
  input: "while/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "while/GatherV2_1/axis"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/GatherV2_1"
  op: "GatherV2"
  input: "while/lstm_cell/mul_2"
  input: "while/Reshape_1"
  input: "while/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "while/GatherV2_2/axis"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/GatherV2_2"
  op: "GatherV2"
  input: "while/mlp_1/latent_encoder_1/Relu"
  input: "while/Reshape_1"
  input: "while/GatherV2_2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "while/GatherV2_3/axis"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/GatherV2_3"
  op: "GatherV2"
  input: "while/lstm_cell/mul_2"
  input: "while/Reshape_1"
  input: "while/GatherV2_3/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "while/strided_slice_1/stack"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/strided_slice_1/stack_1"
  op: "Pack"
  input: "while/Reshape/shape/Enter"
  input: "^while/Identity"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "while/strided_slice_1/stack_2"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/strided_slice_1"
  op: "StridedSlice"
  input: "while/TensorArrayReadV3"
  input: "while/strided_slice_1/stack"
  input: "while/strided_slice_1/stack_1"
  input: "while/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "while/Greater/y"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/Greater"
  op: "Greater"
  input: "while/strided_slice_1"
  input: "while/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "while/LogicalAnd"
  op: "LogicalAnd"
  input: "while/LessEqual"
  input: "while/Greater"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ToFloat_1"
  op: "Cast"
  input: "while/LogicalAnd"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/Tile/multiples"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "while/Tile"
  op: "Tile"
  input: "while/LogicalAnd"
  input: "while/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "while/Select"
  op: "Select"
  input: "while/Tile"
  input: "while/GatherV2"
  input: "while/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Select_1"
  op: "Select"
  input: "while/Tile"
  input: "while/GatherV2_1"
  input: "while/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Select_2"
  op: "Select"
  input: "while/Tile"
  input: "while/GatherV2_2"
  input: "while/mlp_1/latent_encoder_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Select_3"
  op: "Select"
  input: "while/Tile"
  input: "while/GatherV2_3"
  input: "while/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_3/Max/reduction_indices"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_3/Max"
  op: "Max"
  input: "while/add_5"
  input: "while/ReduceLogSumExp_3/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "while/ReduceLogSumExp_3/IsFinite"
  op: "IsFinite"
  input: "while/ReduceLogSumExp_3/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_3/zeros_like"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_3/Select"
  op: "Select"
  input: "while/ReduceLogSumExp_3/IsFinite"
  input: "while/ReduceLogSumExp_3/Max"
  input: "while/ReduceLogSumExp_3/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_3/StopGradient"
  op: "StopGradient"
  input: "while/ReduceLogSumExp_3/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_3/Sub"
  op: "Sub"
  input: "while/add_5"
  input: "while/ReduceLogSumExp_3/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_3/Exp"
  op: "Exp"
  input: "while/ReduceLogSumExp_3/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_3/Sum/reduction_indices"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_3/Sum"
  op: "Sum"
  input: "while/ReduceLogSumExp_3/Exp"
  input: "while/ReduceLogSumExp_3/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "while/ReduceLogSumExp_3/Log"
  op: "Log"
  input: "while/ReduceLogSumExp_3/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_3/Shape"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_3/Reshape"
  op: "Reshape"
  input: "while/ReduceLogSumExp_3/StopGradient"
  input: "while/ReduceLogSumExp_3/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_3/Add"
  op: "Add"
  input: "while/ReduceLogSumExp_3/Log"
  input: "while/ReduceLogSumExp_3/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ToFloat_2/x"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "while/ToFloat_2"
  op: "Cast"
  input: "while/ToFloat_2/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Log_1"
  op: "Log"
  input: "while/ToFloat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/sub_3"
  op: "Sub"
  input: "while/ReduceLogSumExp_3/Add"
  input: "while/Log_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/sub_4/y"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/sub_4"
  op: "Sub"
  input: "while/Less/Enter"
  input: "while/sub_4/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Less_1"
  op: "Less"
  input: "while/Identity"
  input: "while/sub_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/cond/Switch"
  op: "Switch"
  input: "while/Less_1"
  input: "while/Less_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/cond/switch_t"
  op: "Identity"
  input: "while/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/cond/switch_f"
  op: "Identity"
  input: "while/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/cond/pred_id"
  op: "Identity"
  input: "while/Less_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/cond/mul"
  op: "Mul"
  input: "while/cond/mul/Switch:1"
  input: "while/cond/mul/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/cond/mul/Switch"
  op: "Switch"
  input: "while/sub_3"
  input: "while/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/sub_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/cond/mul/Switch_1"
  op: "Switch"
  input: "while/ToFloat_1"
  input: "while/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ToFloat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/cond/Switch_1"
  op: "Switch"
  input: "while/sub_3"
  input: "while/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/sub_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/cond/Merge"
  op: "Merge"
  input: "while/cond/Switch_1"
  input: "while/cond/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "while/add_7"
  op: "Add"
  input: "while/Identity_9"
  input: "while/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "while/Identity"
  input: "while/add_5"
  input: "while/Identity_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/add_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "log_weights_ta"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/add_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/TensorArrayWrite_1/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  input: "while/Identity"
  input: "while/ToFloat_1"
  input: "while/Identity_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ToFloat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "resampled_ta"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ToFloat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "while/strided_slice_2/stack"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "while/strided_slice_2/stack_1"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "while/strided_slice_2/stack_2"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "while/strided_slice_2"
  op: "StridedSlice"
  input: "while/ToFloat_1"
  input: "while/strided_slice_2/stack"
  input: "while/strided_slice_2/stack_1"
  input: "while/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "while/Tile_1/multiples"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "while/Tile_1"
  op: "Tile"
  input: "while/strided_slice_2"
  input: "while/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/sub_5/x"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "while/sub_5"
  op: "Sub"
  input: "while/sub_5/x"
  input: "while/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/mul_4"
  op: "Mul"
  input: "while/add_5"
  input: "while/sub_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_4/Max/reduction_indices"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_4/Max"
  op: "Max"
  input: "while/mul_4"
  input: "while/ReduceLogSumExp_4/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "while/ReduceLogSumExp_4/IsFinite"
  op: "IsFinite"
  input: "while/ReduceLogSumExp_4/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_4/zeros_like"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_4/Select"
  op: "Select"
  input: "while/ReduceLogSumExp_4/IsFinite"
  input: "while/ReduceLogSumExp_4/Max"
  input: "while/ReduceLogSumExp_4/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_4/StopGradient"
  op: "StopGradient"
  input: "while/ReduceLogSumExp_4/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_4/Sub"
  op: "Sub"
  input: "while/mul_4"
  input: "while/ReduceLogSumExp_4/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_4/Exp"
  op: "Exp"
  input: "while/ReduceLogSumExp_4/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_4/Sum/reduction_indices"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_4/Sum"
  op: "Sum"
  input: "while/ReduceLogSumExp_4/Exp"
  input: "while/ReduceLogSumExp_4/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "while/ReduceLogSumExp_4/Log"
  op: "Log"
  input: "while/ReduceLogSumExp_4/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/ReduceLogSumExp_4/Add"
  op: "Add"
  input: "while/ReduceLogSumExp_4/Log"
  input: "while/ReduceLogSumExp_4/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/sub_6"
  op: "Sub"
  input: "while/mul_4"
  input: "while/ReduceLogSumExp_4/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/add_8/y"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "while/add_8"
  op: "Add"
  input: "while/Identity"
  input: "while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Const_4"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "while/NextIteration"
  op: "NextIteration"
  input: "while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/NextIteration_1"
  op: "NextIteration"
  input: "while/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/NextIteration_2"
  op: "NextIteration"
  input: "while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/NextIteration_3"
  op: "NextIteration"
  input: "while/Select_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/NextIteration_4"
  op: "NextIteration"
  input: "while/Select_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/NextIteration_5"
  op: "NextIteration"
  input: "while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/NextIteration_6"
  op: "NextIteration"
  input: "while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/NextIteration_7"
  op: "NextIteration"
  input: "while/TensorArrayWrite_1/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/NextIteration_8"
  op: "NextIteration"
  input: "while/sub_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/NextIteration_9"
  op: "NextIteration"
  input: "while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/Exit"
  op: "Exit"
  input: "while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Exit_1"
  op: "Exit"
  input: "while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Exit_2"
  op: "Exit"
  input: "while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Exit_3"
  op: "Exit"
  input: "while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Exit_4"
  op: "Exit"
  input: "while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "while/Exit_5"
  op: "Exit"
  input: "while/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Exit_6"
  op: "Exit"
  input: "while/Switch_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Exit_7"
  op: "Exit"
  input: "while/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/Exit_8"
  op: "Exit"
  input: "while/Switch_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "while/Exit_9"
  op: "Exit"
  input: "while/Switch_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "log_weights_ta"
  input: "while/Exit_6"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@log_weights_ta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@log_weights_ta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@log_weights_ta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayStack/range"
  op: "Range"
  input: "TensorArrayStack/range/start"
  input: "TensorArrayStack/TensorArraySizeV3"
  input: "TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@log_weights_ta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "log_weights_ta"
  input: "TensorArrayStack/range"
  input: "while/Exit_6"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@log_weights_ta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 4
        }
      }
    }
  }
}
node {
  name: "TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "resampled_ta"
  input: "while/Exit_7"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resampled_ta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resampled_ta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resampled_ta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TensorArrayStack_1/range"
  op: "Range"
  input: "TensorArrayStack_1/range/start"
  input: "TensorArrayStack_1/TensorArraySizeV3"
  input: "TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resampled_ta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "resampled_ta"
  input: "TensorArrayStack_1/range"
  input: "while/Exit_7"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resampled_ta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
}
node {
  name: "transpose_3/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transpose_3"
  op: "Transpose"
  input: "TensorArrayStack/TensorArrayGatherV3"
  input: "transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "ToFloat"
  op: "Cast"
  input: "Cast"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "truediv"
  op: "RealDiv"
  input: "while/Exit_9"
  input: "ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "truediv"
  input: "Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean_1"
  op: "Mean"
  input: "while/Exit_9"
  input: "Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_ll_per_seq/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "train_ll_per_seq"
      }
    }
  }
}
node {
  name: "train_ll_per_seq"
  op: "ScalarSummary"
  input: "train_ll_per_seq/tags"
  input: "Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_ll_per_t/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "train_ll_per_t"
      }
    }
  }
}
node {
  name: "train_ll_per_t"
  op: "ScalarSummary"
  input: "train_ll_per_t/tags"
  input: "Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Neg"
  op: "Neg"
  input: "Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/f_count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_1"
  op: "Enter"
  input: "gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/Merge"
  op: "Merge"
  input: "gradients/f_count_1"
  input: "gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch"
  op: "Switch"
  input: "gradients/Merge"
  input: "while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Add/y"
  op: "Const"
  input: "^while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add"
  op: "Add"
  input: "gradients/Switch:1"
  input: "gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration"
  op: "NextIteration"
  input: "gradients/Add"
  input: "^gradients/while/GatherV2_grad/Reshape_1/StackPushV2"
  input: "^gradients/while/Maximum_1_grad/GreaterEqual/StackPushV2"
  input: "^gradients/while/Maximum_2_grad/GreaterEqual/StackPushV2"
  input: "^gradients/while/Maximum_grad/GreaterEqual/StackPushV2"
  input: "^gradients/while/Normal/log_prob/Log_grad/Reciprocal/StackPushV2"
  input: "^gradients/while/Normal/log_prob/Square_grad/Mul/StackPushV2"
  input: "^gradients/while/Normal/log_prob/mul_grad/Mul/StackPushV2"
  input: "^gradients/while/Normal/log_prob/standardize/truediv_grad/Neg/StackPushV2"
  input: "^gradients/while/Normal/mean/mul_grad/Mul/StackPushV2"
  input: "^gradients/while/Normal/mean/mul_grad/Mul_1/StackPushV2"
  input: "^gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/StackPushV2"
  input: "^gradients/while/Normal_1/log_prob/Square_grad/Mul/StackPushV2"
  input: "^gradients/while/Normal_1/log_prob/mul_grad/Mul/StackPushV2"
  input: "^gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg/StackPushV2"
  input: "^gradients/while/Normal_1/sample/mul_grad/Mul_1/StackPushV2"
  input: "^gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/StackPushV2"
  input: "^gradients/while/Normal_2/log_prob/Square_grad/Mul/StackPushV2"
  input: "^gradients/while/Normal_2/log_prob/mul_grad/Mul/StackPushV2"
  input: "^gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg/StackPushV2"
  input: "^gradients/while/ReduceLogSumExp_3/Exp_grad/mul/StackPushV2"
  input: "^gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal/StackPushV2"
  input: "^gradients/while/ReduceLogSumExp_4/Exp_grad/mul/StackPushV2"
  input: "^gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal/StackPushV2"
  input: "^gradients/while/Select_grad/Select/StackPushV2"
  input: "^gradients/while/Softplus_1_grad/Sigmoid/StackPushV2"
  input: "^gradients/while/Softplus_2_grad/Sigmoid/StackPushV2"
  input: "^gradients/while/Softplus_grad/Sigmoid/StackPushV2"
  input: "^gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  input: "^gradients/while/cond/Merge_grad/StackPushV2"
  input: "^gradients/while/cond/mul_grad/Mul/f_sync"
  input: "^gradients/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  input: "^gradients/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  input: "^gradients/while/lstm_cell/mul_2_grad/Mul/StackPushV2"
  input: "^gradients/while/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  input: "^gradients/while/lstm_cell/mul_grad/Mul/StackPushV2"
  input: "^gradients/while/lstm_cell/mul_grad/Mul_1/StackPushV2"
  input: "^gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul/StackPushV2"
  input: "^gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul/StackPushV2"
  input: "^gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad/StackPushV2"
  input: "^gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul/StackPushV2"
  input: "^gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul/StackPushV2"
  input: "^gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/StackPushV2"
  input: "^gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul/StackPushV2"
  input: "^gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul/StackPushV2"
  input: "^gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad/StackPushV2"
  input: "^gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul/StackPushV2"
  input: "^gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul/StackPushV2"
  input: "^gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad/StackPushV2"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul/StackPushV2"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul/StackPushV2"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad/StackPushV2"
  input: "^gradients/while/mul_4_grad/Mul/StackPushV2"
  input: "^gradients/while/mul_4_grad/Mul_1/StackPushV2"
  input: "^gradients/while/mul_grad/Mul/StackPushV2"
  input: "^gradients/while/mul_grad/Mul_1/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_2"
  op: "Exit"
  input: "gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_1"
  op: "Enter"
  input: "gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/Merge_1"
  op: "Merge"
  input: "gradients/b_count_1"
  input: "gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/Merge_1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/b_count_2"
  op: "LoopCond"
  input: "gradients/GreaterEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_1"
  op: "Switch"
  input: "gradients/Merge_1"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sub"
  op: "Sub"
  input: "gradients/Switch_1:1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_1"
  op: "NextIteration"
  input: "gradients/Sub"
  input: "^gradients/while/Select_grad/Select/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_3"
  op: "Exit"
  input: "gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Neg_grad/Neg"
  op: "Neg"
  input: "gradients/Fill"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/Neg_grad/Neg"
  input: "gradients/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Tile"
  op: "Tile"
  input: "gradients/Mean_grad/Reshape"
  input: "gradients/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 4.0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/Mean_grad/Tile"
  input: "gradients/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/truediv_grad/Shape"
  input: "gradients/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/Mean_grad/truediv"
  input: "ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/truediv_grad/RealDiv"
  input: "gradients/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/truediv_grad/Sum"
  input: "gradients/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/Neg"
  op: "Neg"
  input: "while/Exit_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/truediv_grad/Neg"
  input: "ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/truediv_grad/RealDiv_1"
  input: "ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/mul"
  op: "Mul"
  input: "gradients/Mean_grad/truediv"
  input: "gradients/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/truediv_grad/mul"
  input: "gradients/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/truediv_grad/Sum_1"
  input: "gradients/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/truediv_grad/Reshape"
  input: "^gradients/truediv_grad/Reshape_1"
}
node {
  name: "gradients/truediv_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/truediv_grad/Reshape"
  input: "^gradients/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/truediv_grad/Reshape_1"
  input: "^gradients/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/truediv_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros"
  op: "Fill"
  input: "gradients/zeros/shape_as_tensor"
  input: "gradients/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_1/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_1"
  op: "Fill"
  input: "gradients/zeros_1/shape_as_tensor"
  input: "gradients/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_2/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/zeros_2/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_2"
  op: "Fill"
  input: "gradients/zeros_2/shape_as_tensor"
  input: "gradients/zeros_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_3/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/zeros_3/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_3"
  op: "Fill"
  input: "gradients/zeros_3/shape_as_tensor"
  input: "gradients/zeros_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/Exit_9_grad/b_exit"
  op: "Enter"
  input: "gradients/truediv_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Exit_6_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Exit_7_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Exit_8_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Switch_9_grad/b_switch"
  op: "Merge"
  input: "gradients/while/Exit_9_grad/b_exit"
  input: "gradients/while/Switch_9_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "gradients/while/Exit_1_grad/b_exit"
  input: "gradients/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/while/Exit_2_grad/b_exit"
  input: "gradients/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/while/Exit_3_grad/b_exit"
  input: "gradients/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Switch_8_grad/b_switch"
  op: "Merge"
  input: "gradients/while/Exit_8_grad/b_exit"
  input: "gradients/while/Switch_8_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_9_grad/Switch"
  op: "Switch"
  input: "gradients/while/Switch_9_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_9_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_9_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Merge_9_grad/Switch"
}
node {
  name: "gradients/while/Merge_9_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Merge_9_grad/Switch"
  input: "^gradients/while/Merge_9_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_9_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_9_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Merge_9_grad/Switch:1"
  input: "^gradients/while/Merge_9_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_9_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "gradients/while/Switch_1_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Merge_1_grad/Switch"
}
node {
  name: "gradients/while/Merge_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Merge_1_grad/Switch"
  input: "^gradients/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Merge_1_grad/Switch:1"
  input: "^gradients/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Merge_2_grad/Switch"
}
node {
  name: "gradients/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Merge_2_grad/Switch"
  input: "^gradients/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Merge_2_grad/Switch:1"
  input: "^gradients/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Merge_3_grad/Switch"
}
node {
  name: "gradients/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Merge_3_grad/Switch"
  input: "^gradients/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Merge_3_grad/Switch:1"
  input: "^gradients/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_8_grad/Switch"
  op: "Switch"
  input: "gradients/while/Switch_8_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_8_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_8_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Merge_8_grad/Switch"
}
node {
  name: "gradients/while/Merge_8_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Merge_8_grad/Switch"
  input: "^gradients/while/Merge_8_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_8_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Merge_8_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Merge_8_grad/Switch:1"
  input: "^gradients/while/Merge_8_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_8_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Enter_9_grad/Exit"
  op: "Exit"
  input: "gradients/while/Merge_9_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "gradients/while/Merge_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Enter_8_grad/Exit"
  op: "Exit"
  input: "gradients/while/Merge_8_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_7_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Merge_9_grad/tuple/control_dependency_1"
}
node {
  name: "gradients/while/add_7_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Merge_9_grad/tuple/control_dependency_1"
  input: "^gradients/while/add_7_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_9_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_7_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Merge_9_grad/tuple/control_dependency_1"
  input: "^gradients/while/add_7_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_9_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Select_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Select_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/Select_grad/zeros_like"
  op: "Fill"
  input: "gradients/while/Select_grad/zeros_like/shape_as_tensor"
  input: "gradients/while/Select_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/while/Select_grad/Select"
  op: "Select"
  input: "gradients/while/Select_grad/Select/StackPopV2"
  input: "gradients/while/Merge_1_grad/tuple/control_dependency_1"
  input: "gradients/while/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Select_grad/Select/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Tile"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Select_grad/Select/f_acc"
  op: "StackV2"
  input: "gradients/while/Select_grad/Select/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Tile"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Select_grad/Select/Enter"
  op: "Enter"
  input: "gradients/while/Select_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Select_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Select_grad/Select/Enter"
  input: "while/Tile"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Select_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Select_grad/Select/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/while/Select_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Select_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Select_grad/Select/b_sync"
  op: "ControlTrigger"
  input: "^gradients/while/GatherV2_grad/Reshape_1/StackPopV2"
  input: "^gradients/while/Maximum_1_grad/GreaterEqual/StackPopV2"
  input: "^gradients/while/Maximum_2_grad/GreaterEqual/StackPopV2"
  input: "^gradients/while/Maximum_grad/GreaterEqual/StackPopV2"
  input: "^gradients/while/Normal/log_prob/Log_grad/Reciprocal/StackPopV2"
  input: "^gradients/while/Normal/log_prob/Square_grad/Mul/StackPopV2"
  input: "^gradients/while/Normal/log_prob/mul_grad/Mul/StackPopV2"
  input: "^gradients/while/Normal/log_prob/standardize/truediv_grad/Neg/StackPopV2"
  input: "^gradients/while/Normal/mean/mul_grad/Mul/StackPopV2"
  input: "^gradients/while/Normal/mean/mul_grad/Mul_1/StackPopV2"
  input: "^gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/StackPopV2"
  input: "^gradients/while/Normal_1/log_prob/Square_grad/Mul/StackPopV2"
  input: "^gradients/while/Normal_1/log_prob/mul_grad/Mul/StackPopV2"
  input: "^gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg/StackPopV2"
  input: "^gradients/while/Normal_1/sample/mul_grad/Mul_1/StackPopV2"
  input: "^gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/StackPopV2"
  input: "^gradients/while/Normal_2/log_prob/Square_grad/Mul/StackPopV2"
  input: "^gradients/while/Normal_2/log_prob/mul_grad/Mul/StackPopV2"
  input: "^gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg/StackPopV2"
  input: "^gradients/while/ReduceLogSumExp_3/Exp_grad/mul/StackPopV2"
  input: "^gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal/StackPopV2"
  input: "^gradients/while/ReduceLogSumExp_4/Exp_grad/mul/StackPopV2"
  input: "^gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal/StackPopV2"
  input: "^gradients/while/Select_grad/Select/StackPopV2"
  input: "^gradients/while/Softplus_1_grad/Sigmoid/StackPopV2"
  input: "^gradients/while/Softplus_2_grad/Sigmoid/StackPopV2"
  input: "^gradients/while/Softplus_grad/Sigmoid/StackPopV2"
  input: "^gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  input: "^gradients/while/cond/Merge_grad/StackPopV2"
  input: "^gradients/while/cond/mul_grad/Mul/StackPopV2"
  input: "^gradients/while/cond/mul_grad/Mul_1/StackPopV2"
  input: "^gradients/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "^gradients/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "^gradients/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "^gradients/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "^gradients/while/lstm_cell/mul_grad/Mul/StackPopV2"
  input: "^gradients/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  input: "^gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul/StackPopV2"
  input: "^gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul/StackPopV2"
  input: "^gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad/StackPopV2"
  input: "^gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul/StackPopV2"
  input: "^gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul/StackPopV2"
  input: "^gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/StackPopV2"
  input: "^gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul/StackPopV2"
  input: "^gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul/StackPopV2"
  input: "^gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad/StackPopV2"
  input: "^gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul/StackPopV2"
  input: "^gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul/StackPopV2"
  input: "^gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad/StackPopV2"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul/StackPopV2"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul/StackPopV2"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad/StackPopV2"
  input: "^gradients/while/mul_4_grad/Mul/StackPopV2"
  input: "^gradients/while/mul_4_grad/Mul_1/StackPopV2"
  input: "^gradients/while/mul_grad/Mul/StackPopV2"
  input: "^gradients/while/mul_grad/Mul_1/StackPopV2"
}
node {
  name: "gradients/while/Select_grad/Select_1"
  op: "Select"
  input: "gradients/while/Select_grad/Select/StackPopV2"
  input: "gradients/while/Select_grad/zeros_like"
  input: "gradients/while/Merge_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Select_grad/Select"
  input: "^gradients/while/Select_grad/Select_1"
}
node {
  name: "gradients/while/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Select_grad/Select"
  input: "^gradients/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Select_grad/Select_1"
  input: "^gradients/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Select_1_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Select_1_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/Select_1_grad/zeros_like"
  op: "Fill"
  input: "gradients/while/Select_1_grad/zeros_like/shape_as_tensor"
  input: "gradients/while/Select_1_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/while/Select_1_grad/Select"
  op: "Select"
  input: "gradients/while/Select_grad/Select/StackPopV2"
  input: "gradients/while/Merge_2_grad/tuple/control_dependency_1"
  input: "gradients/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Select_1_grad/Select_1"
  op: "Select"
  input: "gradients/while/Select_grad/Select/StackPopV2"
  input: "gradients/while/Select_1_grad/zeros_like"
  input: "gradients/while/Merge_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Select_1_grad/Select"
  input: "^gradients/while/Select_1_grad/Select_1"
}
node {
  name: "gradients/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Select_1_grad/Select"
  input: "^gradients/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Select_1_grad/Select_1"
  input: "^gradients/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Select_2_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Select_2_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/Select_2_grad/zeros_like"
  op: "Fill"
  input: "gradients/while/Select_2_grad/zeros_like/shape_as_tensor"
  input: "gradients/while/Select_2_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/while/Select_2_grad/Select"
  op: "Select"
  input: "gradients/while/Select_grad/Select/StackPopV2"
  input: "gradients/while/Merge_3_grad/tuple/control_dependency_1"
  input: "gradients/while/Select_2_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Select_2_grad/Select_1"
  op: "Select"
  input: "gradients/while/Select_grad/Select/StackPopV2"
  input: "gradients/while/Select_2_grad/zeros_like"
  input: "gradients/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Select_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Select_2_grad/Select"
  input: "^gradients/while/Select_2_grad/Select_1"
}
node {
  name: "gradients/while/Select_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Select_2_grad/Select"
  input: "^gradients/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Select_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Select_2_grad/Select_1"
  input: "^gradients/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_6_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/sub_6_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/sub_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/sub_6_grad/Shape"
  input: "gradients/while/sub_6_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_6_grad/Sum"
  op: "Sum"
  input: "gradients/while/Merge_8_grad/tuple/control_dependency_1"
  input: "gradients/while/sub_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/sub_6_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/sub_6_grad/Sum"
  input: "gradients/while/sub_6_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_6_grad/Sum_1"
  op: "Sum"
  input: "gradients/while/Merge_8_grad/tuple/control_dependency_1"
  input: "gradients/while/sub_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/sub_6_grad/Neg"
  op: "Neg"
  input: "gradients/while/sub_6_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_6_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/sub_6_grad/Neg"
  input: "gradients/while/sub_6_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_6_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/sub_6_grad/Reshape"
  input: "^gradients/while/sub_6_grad/Reshape_1"
}
node {
  name: "gradients/while/sub_6_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/sub_6_grad/Reshape"
  input: "^gradients/while/sub_6_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/sub_6_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_6_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/sub_6_grad/Reshape_1"
  input: "^gradients/while/sub_6_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/sub_6_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/cond/Merge_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/cond/pred_id"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/cond/Merge_grad/f_acc"
  op: "StackV2"
  input: "gradients/while/cond/Merge_grad/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/cond/pred_id"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/cond/Merge_grad/Enter"
  op: "Enter"
  input: "gradients/while/cond/Merge_grad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/cond/Merge_grad/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/cond/Merge_grad/Enter"
  input: "while/cond/pred_id"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/cond/Merge_grad/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/cond/Merge_grad/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/while/cond/Merge_grad/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/cond/Merge_grad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/while/add_7_grad/tuple/control_dependency_1"
  input: "gradients/while/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_9_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/while/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/cond/Merge_grad/cond_grad"
  input: "^gradients/while/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_9_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/cond/Merge_grad/cond_grad:1"
  input: "^gradients/while/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Switch_9_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000\000\000\000\000 \000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/Cast"
  op: "Cast"
  input: "gradients/while/GatherV2_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/Size"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/ExpandDims/dim"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/while/GatherV2_grad/Size"
  input: "gradients/while/GatherV2_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/strided_slice/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/strided_slice/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/strided_slice/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/while/GatherV2_grad/Cast"
  input: "gradients/while/GatherV2_grad/strided_slice/stack"
  input: "gradients/while/GatherV2_grad/strided_slice/stack_1"
  input: "gradients/while/GatherV2_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/concat/axis"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/concat"
  op: "ConcatV2"
  input: "gradients/while/GatherV2_grad/ExpandDims"
  input: "gradients/while/GatherV2_grad/strided_slice"
  input: "gradients/while/GatherV2_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Select_grad/tuple/control_dependency"
  input: "gradients/while/GatherV2_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/GatherV2_grad/Reshape_1/StackPopV2"
  input: "gradients/while/GatherV2_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/Reshape_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/Reshape_1/f_acc"
  op: "StackV2"
  input: "gradients/while/GatherV2_grad/Reshape_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/Reshape_1/Enter"
  op: "Enter"
  input: "gradients/while/GatherV2_grad/Reshape_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/Reshape_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/GatherV2_grad/Reshape_1/Enter"
  input: "while/Reshape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/Reshape_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/GatherV2_grad/Reshape_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/while/GatherV2_grad/Reshape_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/GatherV2_grad/Reshape_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/GatherV2_1_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000\000\000\000\000 \000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_1_grad/Cast"
  op: "Cast"
  input: "gradients/while/GatherV2_1_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_1_grad/Size"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_1_grad/ExpandDims/dim"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_1_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/while/GatherV2_1_grad/Size"
  input: "gradients/while/GatherV2_1_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_1_grad/strided_slice/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_1_grad/strided_slice/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_1_grad/strided_slice/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_1_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/while/GatherV2_1_grad/Cast"
  input: "gradients/while/GatherV2_1_grad/strided_slice/stack"
  input: "gradients/while/GatherV2_1_grad/strided_slice/stack_1"
  input: "gradients/while/GatherV2_1_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/while/GatherV2_1_grad/concat/axis"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_1_grad/concat"
  op: "ConcatV2"
  input: "gradients/while/GatherV2_1_grad/ExpandDims"
  input: "gradients/while/GatherV2_1_grad/strided_slice"
  input: "gradients/while/GatherV2_1_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Select_1_grad/tuple/control_dependency"
  input: "gradients/while/GatherV2_1_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/GatherV2_grad/Reshape_1/StackPopV2"
  input: "gradients/while/GatherV2_1_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_2_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000\000\000\000\000 \000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_2_grad/Cast"
  op: "Cast"
  input: "gradients/while/GatherV2_2_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_2_grad/Size"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_2_grad/ExpandDims/dim"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_2_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/while/GatherV2_2_grad/Size"
  input: "gradients/while/GatherV2_2_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_2_grad/strided_slice/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_2_grad/strided_slice/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_2_grad/strided_slice/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_2_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/while/GatherV2_2_grad/Cast"
  input: "gradients/while/GatherV2_2_grad/strided_slice/stack"
  input: "gradients/while/GatherV2_2_grad/strided_slice/stack_1"
  input: "gradients/while/GatherV2_2_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/while/GatherV2_2_grad/concat/axis"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_2_grad/concat"
  op: "ConcatV2"
  input: "gradients/while/GatherV2_2_grad/ExpandDims"
  input: "gradients/while/GatherV2_2_grad/strided_slice"
  input: "gradients/while/GatherV2_2_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Select_2_grad/tuple/control_dependency"
  input: "gradients/while/GatherV2_2_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/GatherV2_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/GatherV2_grad/Reshape_1/StackPopV2"
  input: "gradients/while/GatherV2_2_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/sub_6_grad/tuple/control_dependency_1"
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/sub_6_grad/tuple/control_dependency_1"
  input: "^gradients/while/ReduceLogSumExp_4/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/sub_6_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/sub_6_grad/tuple/control_dependency_1"
  input: "^gradients/while/ReduceLogSumExp_4/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/sub_6_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Switch_9_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/while/add_7_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/Switch_2"
  op: "Switch"
  input: "gradients/Const"
  input: "gradients/while/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Const"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/cond/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/while/cond/Merge_grad/tuple/control_dependency"
  input: "gradients/Switch_2:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul"
  op: "Mul"
  input: "gradients/while/cond/Merge_grad/tuple/control_dependency_1"
  input: "gradients/while/cond/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ToFloat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/while/cond/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ToFloat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/while/cond/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/cond/mul_grad/Mul/StackPushV2/Switch:1"
  input: "while/cond/mul/Switch_1:1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul/StackPushV2/Switch"
  op: "Switch"
  input: "gradients/while/cond/mul_grad/Mul/Enter"
  input: "while/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/cond/mul_grad/Mul/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul/f_sync"
  op: "ControlTrigger"
  input: "^gradients/while/cond/mul_grad/Mul/StackPushV2"
  input: "^gradients/while/cond/mul_grad/Mul_1/StackPushV2"
}
node {
  name: "gradients/while/cond/mul_grad/Mul/Switch"
  op: "Switch"
  input: "gradients/while/cond/mul_grad/Mul/Switch/Enter"
  input: "gradients/while/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ToFloat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul/Switch/Enter"
  op: "Enter"
  input: "gradients/while/cond/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ToFloat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/cond/mul_grad/Mul/Switch:1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/while/cond/Merge_grad/tuple/control_dependency_1"
  input: "gradients/while/cond/mul_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/sub_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/cond/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/sub_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/while/cond/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/cond/mul_grad/Mul_1/StackPushV2/Switch:1"
  input: "while/cond/mul/Switch:1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul_1/StackPushV2/Switch"
  op: "Switch"
  input: "gradients/while/cond/mul_grad/Mul_1/Enter"
  input: "while/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/cond/mul_grad/Mul_1/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul_1/Switch"
  op: "Switch"
  input: "gradients/while/cond/mul_grad/Mul_1/Switch/Enter"
  input: "gradients/while/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/sub_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul_1/Switch/Enter"
  op: "Enter"
  input: "gradients/while/cond/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/sub_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/cond/mul_grad/Mul_1/Switch:1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/cond/mul_grad/Mul"
  input: "^gradients/while/cond/mul_grad/Mul_1"
}
node {
  name: "gradients/while/cond/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/cond/mul_grad/Mul"
  input: "^gradients/while/cond/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/cond/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/cond/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/cond/mul_grad/Mul_1"
  input: "^gradients/while/cond/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/cond/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal/StackPopV2"
  input: "^gradients/while/ReduceLogSumExp_4/Add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ReduceLogSumExp_4/Sum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal/f_acc"
  op: "StackV2"
  input: "gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ReduceLogSumExp_4/Sum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal/Enter"
  op: "Enter"
  input: "gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal/Enter"
  input: "while/ReduceLogSumExp_4/Sum"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Log_grad/mul"
  op: "Mul"
  input: "gradients/while/ReduceLogSumExp_4/Add_grad/tuple/control_dependency"
  input: "gradients/while/ReduceLogSumExp_4/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Const_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/Switch_3"
  op: "Switch"
  input: "gradients/Const_1"
  input: "gradients/while/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Const_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/cond/mul/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/Switch_3"
  input: "gradients/while/cond/mul_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/Size"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_4/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/add"
  op: "Add"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/add/Const"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_4/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/add/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_4/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/add"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_4/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_4/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/range/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_4/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/range/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_4/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/range"
  op: "Range"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/range/start"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/Size"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_4/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/Fill/value"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_4/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/Shape_1"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_4/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/range"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/mod"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/Shape"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_4/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/Maximum/y"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_4/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/DynamicStitch"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_4/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/Shape"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_4/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/ReduceLogSumExp_4/Log_grad/mul"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/Reshape"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN"
  op: "AddN"
  input: "gradients/while/cond/Switch_1_grad/cond_grad"
  input: "gradients/while/cond/mul/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/cond/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_3_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/while/sub_3_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/sub_3_grad/Shape"
  input: "gradients/while/sub_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_3_grad/Sum"
  op: "Sum"
  input: "gradients/AddN"
  input: "gradients/while/sub_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/sub_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/sub_3_grad/Sum"
  input: "gradients/while/sub_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_3_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN"
  input: "gradients/while/sub_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/sub_3_grad/Neg"
  op: "Neg"
  input: "gradients/while/sub_3_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/sub_3_grad/Neg"
  input: "gradients/while/sub_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/sub_3_grad/Reshape"
  input: "^gradients/while/sub_3_grad/Reshape_1"
}
node {
  name: "gradients/while/sub_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/sub_3_grad/Reshape"
  input: "^gradients/while/sub_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/sub_3_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/sub_3_grad/Reshape_1"
  input: "^gradients/while/sub_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/sub_3_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul"
  op: "Mul"
  input: "gradients/while/ReduceLogSumExp_4/Sum_grad/Tile"
  input: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ReduceLogSumExp_4/Exp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul/f_acc"
  op: "StackV2"
  input: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ReduceLogSumExp_4/Exp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul/Enter"
  op: "Enter"
  input: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul/Enter"
  input: "while/ReduceLogSumExp_4/Exp"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/sub_3_grad/tuple/control_dependency"
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/sub_3_grad/tuple/control_dependency"
  input: "^gradients/while/ReduceLogSumExp_3/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/sub_3_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/sub_3_grad/tuple/control_dependency"
  input: "^gradients/while/ReduceLogSumExp_3/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/sub_3_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sub_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sub_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/ReduceLogSumExp_4/Sub_grad/Shape"
  input: "gradients/while/ReduceLogSumExp_4/Sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sub_grad/Sum"
  op: "Sum"
  input: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul"
  input: "gradients/while/ReduceLogSumExp_4/Sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/ReduceLogSumExp_4/Sub_grad/Sum"
  input: "gradients/while/ReduceLogSumExp_4/Sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/while/ReduceLogSumExp_4/Exp_grad/mul"
  input: "gradients/while/ReduceLogSumExp_4/Sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sub_grad/Neg"
  op: "Neg"
  input: "gradients/while/ReduceLogSumExp_4/Sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/ReduceLogSumExp_4/Sub_grad/Neg"
  input: "gradients/while/ReduceLogSumExp_4/Sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/ReduceLogSumExp_4/Sub_grad/Reshape"
  input: "^gradients/while/ReduceLogSumExp_4/Sub_grad/Reshape_1"
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/ReduceLogSumExp_4/Sub_grad/Reshape"
  input: "^gradients/while/ReduceLogSumExp_4/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_4/Sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_4/Sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/ReduceLogSumExp_4/Sub_grad/Reshape_1"
  input: "^gradients/while/ReduceLogSumExp_4/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_4/Sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal/StackPopV2"
  input: "^gradients/while/ReduceLogSumExp_3/Add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ReduceLogSumExp_3/Sum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal/f_acc"
  op: "StackV2"
  input: "gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ReduceLogSumExp_3/Sum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal/Enter"
  op: "Enter"
  input: "gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal/Enter"
  input: "while/ReduceLogSumExp_3/Sum"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Log_grad/mul"
  op: "Mul"
  input: "gradients/while/ReduceLogSumExp_3/Add_grad/tuple/control_dependency"
  input: "gradients/while/ReduceLogSumExp_3/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Reshape_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/ReduceLogSumExp_3/Add_grad/tuple/control_dependency_1"
  input: "gradients/while/ReduceLogSumExp_3/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_1"
  op: "AddN"
  input: "gradients/while/ReduceLogSumExp_4/Add_grad/tuple/control_dependency_1"
  input: "gradients/while/ReduceLogSumExp_4/Sub_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/sub_6_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sum_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sum_grad/Size"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_3/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sum_grad/add"
  op: "Add"
  input: "gradients/while/ReduceLogSumExp_3/Sum_grad/add/Const"
  input: "gradients/while/ReduceLogSumExp_3/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_3/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sum_grad/add/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_3/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/while/ReduceLogSumExp_3/Sum_grad/add"
  input: "gradients/while/ReduceLogSumExp_3/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_3/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sum_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_3/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sum_grad/range/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_3/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sum_grad/range/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_3/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sum_grad/range"
  op: "Range"
  input: "gradients/while/ReduceLogSumExp_3/Sum_grad/range/start"
  input: "gradients/while/ReduceLogSumExp_3/Sum_grad/Size"
  input: "gradients/while/ReduceLogSumExp_3/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_3/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sum_grad/Fill/value"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_3/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/while/ReduceLogSumExp_3/Sum_grad/Shape_1"
  input: "gradients/while/ReduceLogSumExp_3/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_3/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/while/ReduceLogSumExp_3/Sum_grad/range"
  input: "gradients/while/ReduceLogSumExp_3/Sum_grad/mod"
  input: "gradients/while/ReduceLogSumExp_3/Sum_grad/Shape"
  input: "gradients/while/ReduceLogSumExp_3/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_3/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sum_grad/Maximum/y"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_3/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/while/ReduceLogSumExp_3/Sum_grad/DynamicStitch"
  input: "gradients/while/ReduceLogSumExp_3/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_3/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/while/ReduceLogSumExp_3/Sum_grad/Shape"
  input: "gradients/while/ReduceLogSumExp_3/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_3/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/ReduceLogSumExp_3/Log_grad/mul"
  input: "gradients/while/ReduceLogSumExp_3/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/while/ReduceLogSumExp_3/Sum_grad/Reshape"
  input: "gradients/while/ReduceLogSumExp_3/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul"
  op: "Mul"
  input: "gradients/while/ReduceLogSumExp_3/Sum_grad/Tile"
  input: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ReduceLogSumExp_3/Exp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul/f_acc"
  op: "StackV2"
  input: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/ReduceLogSumExp_3/Exp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul/Enter"
  op: "Enter"
  input: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul/Enter"
  input: "while/ReduceLogSumExp_3/Exp"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sub_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sub_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/ReduceLogSumExp_3/Sub_grad/Shape"
  input: "gradients/while/ReduceLogSumExp_3/Sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sub_grad/Sum"
  op: "Sum"
  input: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul"
  input: "gradients/while/ReduceLogSumExp_3/Sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/ReduceLogSumExp_3/Sub_grad/Sum"
  input: "gradients/while/ReduceLogSumExp_3/Sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/while/ReduceLogSumExp_3/Exp_grad/mul"
  input: "gradients/while/ReduceLogSumExp_3/Sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sub_grad/Neg"
  op: "Neg"
  input: "gradients/while/ReduceLogSumExp_3/Sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/ReduceLogSumExp_3/Sub_grad/Neg"
  input: "gradients/while/ReduceLogSumExp_3/Sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/ReduceLogSumExp_3/Sub_grad/Reshape"
  input: "^gradients/while/ReduceLogSumExp_3/Sub_grad/Reshape_1"
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/ReduceLogSumExp_3/Sub_grad/Reshape"
  input: "^gradients/while/ReduceLogSumExp_3/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_3/Sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/ReduceLogSumExp_3/Sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/ReduceLogSumExp_3/Sub_grad/Reshape_1"
  input: "^gradients/while/ReduceLogSumExp_3/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_3/Sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_2"
  op: "AddN"
  input: "gradients/while/ReduceLogSumExp_3/Reshape_grad/Reshape"
  input: "gradients/while/ReduceLogSumExp_3/Sub_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_3/Reshape_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_3"
  op: "AddN"
  input: "gradients/while/sub_6_grad/tuple/control_dependency"
  input: "gradients/while/ReduceLogSumExp_4/Sub_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/sub_6_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/Mul"
  op: "Mul"
  input: "gradients/AddN_3"
  input: "gradients/while/mul_4_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/sub_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/while/mul_4_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/sub_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mul_4_grad/Mul/Enter"
  input: "while/sub_5"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mul_4_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/Mul_1"
  op: "Mul"
  input: "gradients/AddN_3"
  input: "gradients/while/mul_4_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/add_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/mul_4_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/add_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/while/mul_4_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mul_4_grad/Mul_1/Enter"
  input: "while/add_5"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mul_4_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mul_4_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mul_4_grad/Mul"
  input: "^gradients/while/mul_4_grad/Mul_1"
}
node {
  name: "gradients/while/mul_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mul_4_grad/Mul"
  input: "^gradients/while/mul_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mul_4_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mul_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mul_4_grad/Mul_1"
  input: "^gradients/while/mul_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mul_4_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_4"
  op: "AddN"
  input: "gradients/while/ReduceLogSumExp_3/Sub_grad/tuple/control_dependency"
  input: "gradients/while/mul_4_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_3/Sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_5_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/AddN_4"
}
node {
  name: "gradients/while/add_5_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/AddN_4"
  input: "^gradients/while/add_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_3/Sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_5_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/AddN_4"
  input: "^gradients/while/add_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/ReduceLogSumExp_3/Sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Reshape_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "gradients/while/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/add_5_grad/tuple/control_dependency_1"
  input: "gradients/while/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Switch_8_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/while/add_5_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mul_grad/Mul"
  op: "Mul"
  input: "gradients/while/Reshape_grad/Reshape"
  input: "gradients/while/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/while/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mul_grad/Mul/Enter"
  input: "while/TensorArrayReadV3"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/while/Reshape_grad/Reshape"
  input: "gradients/while/mul_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/while/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mul_grad/Mul_1/Enter"
  input: "while/sub"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mul_grad/Mul"
  input: "^gradients/while/mul_grad/Mul_1"
}
node {
  name: "gradients/while/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mul_grad/Mul"
  input: "^gradients/while/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mul_grad/Mul_1"
  input: "^gradients/while/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_grad/Neg"
  op: "Neg"
  input: "gradients/while/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mul_grad/tuple/control_dependency"
  input: "^gradients/while/sub_grad/Neg"
}
node {
  name: "gradients/while/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mul_grad/tuple/control_dependency"
  input: "^gradients/while/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/sub_grad/Neg"
  input: "^gradients/while/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/sub_grad/tuple/control_dependency"
}
node {
  name: "gradients/while/add_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/sub_grad/tuple/control_dependency"
  input: "^gradients/while/add_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/sub_grad/tuple/control_dependency"
  input: "^gradients/while/add_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/Size"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/add"
  op: "Add"
  input: "gradients/while/Sum_2_grad/add/Const"
  input: "gradients/while/Sum_2_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/add/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/mod"
  op: "FloorMod"
  input: "gradients/while/Sum_2_grad/add"
  input: "gradients/while/Sum_2_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/range/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/range/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/range"
  op: "Range"
  input: "gradients/while/Sum_2_grad/range/start"
  input: "gradients/while/Sum_2_grad/Size"
  input: "gradients/while/Sum_2_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/Fill/value"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/Fill"
  op: "Fill"
  input: "gradients/while/Sum_2_grad/Shape_1"
  input: "gradients/while/Sum_2_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/while/Sum_2_grad/range"
  input: "gradients/while/Sum_2_grad/mod"
  input: "gradients/while/Sum_2_grad/Shape"
  input: "gradients/while/Sum_2_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/Maximum/y"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/Maximum"
  op: "Maximum"
  input: "gradients/while/Sum_2_grad/DynamicStitch"
  input: "gradients/while/Sum_2_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/while/Sum_2_grad/Shape"
  input: "gradients/while/Sum_2_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/sub_grad/tuple/control_dependency_1"
  input: "gradients/while/Sum_2_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_2_grad/Tile"
  op: "Tile"
  input: "gradients/while/Sum_2_grad/Reshape"
  input: "gradients/while/Sum_2_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_1_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Sum_1_grad/Size"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/while/Sum_1_grad/add"
  op: "Add"
  input: "gradients/while/Sum_1_grad/add/Const"
  input: "gradients/while/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_1_grad/add/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Sum_1_grad/mod"
  op: "FloorMod"
  input: "gradients/while/Sum_1_grad/add"
  input: "gradients/while/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_1_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_1_grad/range/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/Sum_1_grad/range/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/Sum_1_grad/range"
  op: "Range"
  input: "gradients/while/Sum_1_grad/range/start"
  input: "gradients/while/Sum_1_grad/Size"
  input: "gradients/while/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_1_grad/Fill/value"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/Sum_1_grad/Fill"
  op: "Fill"
  input: "gradients/while/Sum_1_grad/Shape_1"
  input: "gradients/while/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/while/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/while/Sum_1_grad/range"
  input: "gradients/while/Sum_1_grad/mod"
  input: "gradients/while/Sum_1_grad/Shape"
  input: "gradients/while/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_1_grad/Maximum/y"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "gradients/while/Sum_1_grad/DynamicStitch"
  input: "gradients/while/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/while/Sum_1_grad/Shape"
  input: "gradients/while/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/add_4_grad/tuple/control_dependency"
  input: "gradients/while/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_1_grad/Tile"
  op: "Tile"
  input: "gradients/while/Sum_1_grad/Reshape"
  input: "gradients/while/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/Size"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/add"
  op: "Add"
  input: "gradients/while/Sum_grad/add/Const"
  input: "gradients/while/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/add/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/while/Sum_grad/add"
  input: "gradients/while/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/range/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/range/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/range"
  op: "Range"
  input: "gradients/while/Sum_grad/range/start"
  input: "gradients/while/Sum_grad/Size"
  input: "gradients/while/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/Fill/value"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/while/Sum_grad/Shape_1"
  input: "gradients/while/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/while/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/while/Sum_grad/range"
  input: "gradients/while/Sum_grad/mod"
  input: "gradients/while/Sum_grad/Shape"
  input: "gradients/while/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/Maximum/y"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/while/Sum_grad/DynamicStitch"
  input: "gradients/while/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/while/Sum_grad/Shape"
  input: "gradients/while/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/add_4_grad/tuple/control_dependency_1"
  input: "gradients/while/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/while/Sum_grad/Reshape"
  input: "gradients/while/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/sub_grad/Neg"
  op: "Neg"
  input: "gradients/while/Sum_2_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal_1/log_prob/sub_grad/Neg"
  input: "^gradients/while/Sum_2_grad/Tile"
}
node {
  name: "gradients/while/Normal_1/log_prob/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Sum_2_grad/Tile"
  input: "^gradients/while/Normal_1/log_prob/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_2_grad/Tile"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal_1/log_prob/sub_grad/Neg"
  input: "^gradients/while/Normal_1/log_prob/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/log_prob/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/sub_grad/Neg"
  op: "Neg"
  input: "gradients/while/Sum_1_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal/log_prob/sub_grad/Neg"
  input: "^gradients/while/Sum_1_grad/Tile"
}
node {
  name: "gradients/while/Normal/log_prob/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Sum_1_grad/Tile"
  input: "^gradients/while/Normal/log_prob/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_1_grad/Tile"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal/log_prob/sub_grad/Neg"
  input: "^gradients/while/Normal/log_prob/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal/log_prob/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/sub_grad/Neg"
  op: "Neg"
  input: "gradients/while/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal_2/log_prob/sub_grad/Neg"
  input: "^gradients/while/Sum_grad/Tile"
}
node {
  name: "gradients/while/Normal_2/log_prob/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Sum_grad/Tile"
  input: "^gradients/while/Normal_2/log_prob/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Sum_grad/Tile"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal_2/log_prob/sub_grad/Neg"
  input: "^gradients/while/Normal_2/log_prob/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_2/log_prob/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Shape"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/Mul"
  op: "Mul"
  input: "gradients/while/Normal_1/log_prob/sub_grad/tuple/control_dependency"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_1/log_prob/Square"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_1/log_prob/Square"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Mul/Enter"
  input: "while/Normal_1/log_prob/Square"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/Sum"
  op: "Sum"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Mul"
  input: "gradients/while/Normal_1/log_prob/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Sum"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Mul_1/Const"
  input: "gradients/while/Normal_1/log_prob/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/Mul_1/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Mul_1"
  input: "gradients/while/Normal_1/log_prob/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Sum_1"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal_1/log_prob/mul_grad/Reshape"
  input: "^gradients/while/Normal_1/log_prob/mul_grad/Reshape_1"
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Reshape"
  input: "^gradients/while/Normal_1/log_prob/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/log_prob/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal_1/log_prob/mul_grad/Reshape_1"
  input: "^gradients/while/Normal_1/log_prob/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/log_prob/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/add_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/Normal_1/log_prob/add_grad/Shape"
  input: "gradients/while/Normal_1/log_prob/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/add_grad/Sum"
  op: "Sum"
  input: "gradients/while/Normal_1/log_prob/sub_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal_1/log_prob/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Normal_1/log_prob/add_grad/Sum"
  input: "gradients/while/Normal_1/log_prob/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/while/Normal_1/log_prob/sub_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal_1/log_prob/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/Normal_1/log_prob/add_grad/Sum_1"
  input: "gradients/while/Normal_1/log_prob/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal_1/log_prob/add_grad/Reshape"
  input: "^gradients/while/Normal_1/log_prob/add_grad/Reshape_1"
}
node {
  name: "gradients/while/Normal_1/log_prob/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal_1/log_prob/add_grad/Reshape"
  input: "^gradients/while/Normal_1/log_prob/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/log_prob/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal_1/log_prob/add_grad/Reshape_1"
  input: "^gradients/while/Normal_1/log_prob/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/log_prob/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/Normal/log_prob/mul_grad/Shape"
  input: "gradients/while/Normal/log_prob/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/Mul"
  op: "Mul"
  input: "gradients/while/Normal/log_prob/sub_grad/tuple/control_dependency"
  input: "gradients/while/Normal/log_prob/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal/log_prob/Square"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal/log_prob/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal/log_prob/Square"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/while/Normal/log_prob/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal/log_prob/mul_grad/Mul/Enter"
  input: "while/Normal/log_prob/Square"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal/log_prob/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal/log_prob/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/Sum"
  op: "Sum"
  input: "gradients/while/Normal/log_prob/mul_grad/Mul"
  input: "gradients/while/Normal/log_prob/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Normal/log_prob/mul_grad/Sum"
  input: "gradients/while/Normal/log_prob/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/while/Normal/log_prob/mul_grad/Mul_1/Const"
  input: "gradients/while/Normal/log_prob/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/Mul_1/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/while/Normal/log_prob/mul_grad/Mul_1"
  input: "gradients/while/Normal/log_prob/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/Normal/log_prob/mul_grad/Sum_1"
  input: "gradients/while/Normal/log_prob/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal/log_prob/mul_grad/Reshape"
  input: "^gradients/while/Normal/log_prob/mul_grad/Reshape_1"
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal/log_prob/mul_grad/Reshape"
  input: "^gradients/while/Normal/log_prob/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal/log_prob/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal/log_prob/mul_grad/Reshape_1"
  input: "^gradients/while/Normal/log_prob/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal/log_prob/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/add_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/Normal/log_prob/add_grad/Shape"
  input: "gradients/while/Normal/log_prob/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/add_grad/Sum"
  op: "Sum"
  input: "gradients/while/Normal/log_prob/sub_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal/log_prob/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Normal/log_prob/add_grad/Sum"
  input: "gradients/while/Normal/log_prob/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/while/Normal/log_prob/sub_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal/log_prob/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/Normal/log_prob/add_grad/Sum_1"
  input: "gradients/while/Normal/log_prob/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal/log_prob/add_grad/Reshape"
  input: "^gradients/while/Normal/log_prob/add_grad/Reshape_1"
}
node {
  name: "gradients/while/Normal/log_prob/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal/log_prob/add_grad/Reshape"
  input: "^gradients/while/Normal/log_prob/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal/log_prob/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal/log_prob/add_grad/Reshape_1"
  input: "^gradients/while/Normal/log_prob/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal/log_prob/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Shape"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/Mul"
  op: "Mul"
  input: "gradients/while/Normal_2/log_prob/sub_grad/tuple/control_dependency"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_2/log_prob/Square"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_2/log_prob/Square"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Mul/Enter"
  input: "while/Normal_2/log_prob/Square"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/Sum"
  op: "Sum"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Mul"
  input: "gradients/while/Normal_2/log_prob/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Sum"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Mul_1/Const"
  input: "gradients/while/Normal_2/log_prob/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/Mul_1/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Mul_1"
  input: "gradients/while/Normal_2/log_prob/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Sum_1"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal_2/log_prob/mul_grad/Reshape"
  input: "^gradients/while/Normal_2/log_prob/mul_grad/Reshape_1"
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Reshape"
  input: "^gradients/while/Normal_2/log_prob/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_2/log_prob/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal_2/log_prob/mul_grad/Reshape_1"
  input: "^gradients/while/Normal_2/log_prob/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_2/log_prob/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/add_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/Normal_2/log_prob/add_grad/Shape"
  input: "gradients/while/Normal_2/log_prob/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/add_grad/Sum"
  op: "Sum"
  input: "gradients/while/Normal_2/log_prob/sub_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal_2/log_prob/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Normal_2/log_prob/add_grad/Sum"
  input: "gradients/while/Normal_2/log_prob/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/while/Normal_2/log_prob/sub_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal_2/log_prob/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/Normal_2/log_prob/add_grad/Sum_1"
  input: "gradients/while/Normal_2/log_prob/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal_2/log_prob/add_grad/Reshape"
  input: "^gradients/while/Normal_2/log_prob/add_grad/Reshape_1"
}
node {
  name: "gradients/while/Normal_2/log_prob/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal_2/log_prob/add_grad/Reshape"
  input: "^gradients/while/Normal_2/log_prob/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_2/log_prob/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal_2/log_prob/add_grad/Reshape_1"
  input: "^gradients/while/Normal_2/log_prob/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_2/log_prob/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Square_grad/Const"
  op: "Const"
  input: "^gradients/while/Normal_1/log_prob/mul_grad/tuple/control_dependency_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Square_grad/Mul"
  op: "Mul"
  input: "gradients/while/Normal_1/log_prob/Square_grad/Mul/StackPopV2"
  input: "gradients/while/Normal_1/log_prob/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Square_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_1/log_prob/standardize/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Square_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal_1/log_prob/Square_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_1/log_prob/standardize/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Square_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/while/Normal_1/log_prob/Square_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Square_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal_1/log_prob/Square_grad/Mul/Enter"
  input: "while/Normal_1/log_prob/standardize/truediv"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Square_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal_1/log_prob/Square_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Square_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal_1/log_prob/Square_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Square_grad/Mul_1"
  op: "Mul"
  input: "gradients/while/Normal_1/log_prob/mul_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal_1/log_prob/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/StackPopV2"
  input: "^gradients/while/Normal_1/log_prob/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_1/scale"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_1/scale"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/Enter"
  op: "Enter"
  input: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/Enter"
  input: "while/Normal_1/scale"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/Log_grad/mul"
  op: "Mul"
  input: "gradients/while/Normal_1/log_prob/add_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Square_grad/Const"
  op: "Const"
  input: "^gradients/while/Normal/log_prob/mul_grad/tuple/control_dependency_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Square_grad/Mul"
  op: "Mul"
  input: "gradients/while/Normal/log_prob/Square_grad/Mul/StackPopV2"
  input: "gradients/while/Normal/log_prob/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Square_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal/log_prob/standardize/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Square_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal/log_prob/Square_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal/log_prob/standardize/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Square_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/while/Normal/log_prob/Square_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Square_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal/log_prob/Square_grad/Mul/Enter"
  input: "while/Normal/log_prob/standardize/truediv"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Square_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal/log_prob/Square_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Square_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal/log_prob/Square_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Square_grad/Mul_1"
  op: "Mul"
  input: "gradients/while/Normal/log_prob/mul_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal/log_prob/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/StackPopV2"
  input: "^gradients/while/Normal/log_prob/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal/scale"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal/scale"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/Enter"
  op: "Enter"
  input: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/Enter"
  input: "while/Normal/scale"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/Log_grad/mul"
  op: "Mul"
  input: "gradients/while/Normal/log_prob/add_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal/log_prob/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Square_grad/Const"
  op: "Const"
  input: "^gradients/while/Normal_2/log_prob/mul_grad/tuple/control_dependency_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Square_grad/Mul"
  op: "Mul"
  input: "gradients/while/Normal_2/log_prob/Square_grad/Mul/StackPopV2"
  input: "gradients/while/Normal_2/log_prob/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Square_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_2/log_prob/standardize/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Square_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal_2/log_prob/Square_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_2/log_prob/standardize/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Square_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/while/Normal_2/log_prob/Square_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Square_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal_2/log_prob/Square_grad/Mul/Enter"
  input: "while/Normal_2/log_prob/standardize/truediv"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Square_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal_2/log_prob/Square_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Square_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal_2/log_prob/Square_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Square_grad/Mul_1"
  op: "Mul"
  input: "gradients/while/Normal_2/log_prob/mul_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal_2/log_prob/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/StackPopV2"
  input: "^gradients/while/Normal_2/log_prob/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_2/scale"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_2/scale"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/Enter"
  op: "Enter"
  input: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/Enter"
  input: "while/Normal_2/scale"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/Log_grad/mul"
  op: "Mul"
  input: "gradients/while/Normal_2/log_prob/add_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Shape"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/while/Normal_1/log_prob/Square_grad/Mul_1"
  input: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/RealDiv"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Sum"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg"
  op: "Neg"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_1/log_prob/standardize/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_1/log_prob/standardize/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg/Enter"
  op: "Enter"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg/Enter"
  input: "while/Normal_1/log_prob/standardize/sub"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Neg"
  input: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/RealDiv_1"
  input: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/mul"
  op: "Mul"
  input: "gradients/while/Normal_1/log_prob/Square_grad/Mul_1"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/mul"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Sum_1"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal_1/log_prob/standardize/truediv_grad/Reshape"
  input: "^gradients/while/Normal_1/log_prob/standardize/truediv_grad/Reshape_1"
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Reshape"
  input: "^gradients/while/Normal_1/log_prob/standardize/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/log_prob/standardize/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/Reshape_1"
  input: "^gradients/while/Normal_1/log_prob/standardize/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/log_prob/standardize/truediv_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Shape"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/while/Normal/log_prob/Square_grad/Mul_1"
  input: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/RealDiv"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Sum"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/Neg"
  op: "Neg"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Neg/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/Neg/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal/log_prob/standardize/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/Neg/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Neg/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal/log_prob/standardize/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/Neg/Enter"
  op: "Enter"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/Neg/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Neg/Enter"
  input: "while/Normal/log_prob/standardize/sub"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/Neg/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Neg/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/Neg/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Neg"
  input: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/RealDiv_1"
  input: "gradients/while/Normal/log_prob/Log_grad/Reciprocal/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/mul"
  op: "Mul"
  input: "gradients/while/Normal/log_prob/Square_grad/Mul_1"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/mul"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Sum_1"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal/log_prob/standardize/truediv_grad/Reshape"
  input: "^gradients/while/Normal/log_prob/standardize/truediv_grad/Reshape_1"
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Reshape"
  input: "^gradients/while/Normal/log_prob/standardize/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal/log_prob/standardize/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/truediv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/Reshape_1"
  input: "^gradients/while/Normal/log_prob/standardize/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal/log_prob/standardize/truediv_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Shape"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/while/Normal_2/log_prob/Square_grad/Mul_1"
  input: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/RealDiv"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Sum"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg"
  op: "Neg"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_2/log_prob/standardize/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_2/log_prob/standardize/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg/Enter"
  op: "Enter"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg/Enter"
  input: "while/Normal_2/log_prob/standardize/sub"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Neg"
  input: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/RealDiv_1"
  input: "gradients/while/Normal_2/log_prob/Log_grad/Reciprocal/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/mul"
  op: "Mul"
  input: "gradients/while/Normal_2/log_prob/Square_grad/Mul_1"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/mul"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Sum_1"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal_2/log_prob/standardize/truediv_grad/Reshape"
  input: "^gradients/while/Normal_2/log_prob/standardize/truediv_grad/Reshape_1"
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Reshape"
  input: "^gradients/while/Normal_2/log_prob/standardize/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_2/log_prob/standardize/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/Reshape_1"
  input: "^gradients/while/Normal_2/log_prob/standardize/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_2/log_prob/standardize/truediv_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/sub_grad/Neg"
  op: "Neg"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal_1/log_prob/standardize/sub_grad/Neg"
  input: "^gradients/while/Normal_1/log_prob/standardize/truediv_grad/tuple/control_dependency"
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/tuple/control_dependency"
  input: "^gradients/while/Normal_1/log_prob/standardize/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/log_prob/standardize/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/log_prob/standardize/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal_1/log_prob/standardize/sub_grad/Neg"
  input: "^gradients/while/Normal_1/log_prob/standardize/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/log_prob/standardize/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/sub_grad/Neg"
  op: "Neg"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal/log_prob/standardize/sub_grad/Neg"
  input: "^gradients/while/Normal/log_prob/standardize/truediv_grad/tuple/control_dependency"
}
node {
  name: "gradients/while/Normal/log_prob/standardize/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/tuple/control_dependency"
  input: "^gradients/while/Normal/log_prob/standardize/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal/log_prob/standardize/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/log_prob/standardize/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal/log_prob/standardize/sub_grad/Neg"
  input: "^gradients/while/Normal/log_prob/standardize/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal/log_prob/standardize/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_5"
  op: "AddN"
  input: "gradients/while/Normal/log_prob/Log_grad/mul"
  input: "gradients/while/Normal/log_prob/standardize/truediv_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal/log_prob/Log_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/sub_grad/Neg"
  op: "Neg"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal_2/log_prob/standardize/sub_grad/Neg"
  input: "^gradients/while/Normal_2/log_prob/standardize/truediv_grad/tuple/control_dependency"
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/tuple/control_dependency"
  input: "^gradients/while/Normal_2/log_prob/standardize/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_2/log_prob/standardize/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_2/log_prob/standardize/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal_2/log_prob/standardize/sub_grad/Neg"
  input: "^gradients/while/Normal_2/log_prob/standardize/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_2/log_prob/standardize/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_6"
  op: "AddN"
  input: "gradients/while/Normal_2/log_prob/Log_grad/mul"
  input: "gradients/while/Normal_2/log_prob/standardize/truediv_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_2/log_prob/Log_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/Shape_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/zeros/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/zeros"
  op: "Fill"
  input: "gradients/while/Maximum_grad/Shape_2"
  input: "gradients/while/Maximum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/while/Maximum_grad/GreaterEqual/StackPopV2"
  input: "gradients/while/Maximum_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Softplus"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "gradients/while/Maximum_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Softplus"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/while/Maximum_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Maximum_grad/GreaterEqual/Enter"
  input: "while/Softplus"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Maximum_grad/GreaterEqual/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Maximum_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/Maximum_grad/Shape"
  input: "gradients/while/Maximum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/Select"
  op: "Select"
  input: "gradients/while/Maximum_grad/GreaterEqual"
  input: "gradients/AddN_5"
  input: "gradients/while/Maximum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/Sum"
  op: "Sum"
  input: "gradients/while/Maximum_grad/Select"
  input: "gradients/while/Maximum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Maximum_grad/Sum"
  input: "gradients/while/Maximum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/Select_1"
  op: "Select"
  input: "gradients/while/Maximum_grad/GreaterEqual"
  input: "gradients/while/Maximum_grad/zeros"
  input: "gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/Sum_1"
  op: "Sum"
  input: "gradients/while/Maximum_grad/Select_1"
  input: "gradients/while/Maximum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/Maximum_grad/Sum_1"
  input: "gradients/while/Maximum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Maximum_grad/Reshape"
  input: "^gradients/while/Maximum_grad/Reshape_1"
}
node {
  name: "gradients/while/Maximum_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Maximum_grad/Reshape"
  input: "^gradients/while/Maximum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Maximum_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Maximum_grad/Reshape_1"
  input: "^gradients/while/Maximum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Maximum_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/Shape_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/zeros/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/zeros"
  op: "Fill"
  input: "gradients/while/Maximum_2_grad/Shape_2"
  input: "gradients/while/Maximum_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/while/Maximum_2_grad/GreaterEqual/StackPopV2"
  input: "gradients/while/Maximum_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Softplus_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "gradients/while/Maximum_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Softplus_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/while/Maximum_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Maximum_2_grad/GreaterEqual/Enter"
  input: "while/Softplus_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Maximum_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Maximum_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/Maximum_2_grad/Shape"
  input: "gradients/while/Maximum_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/Select"
  op: "Select"
  input: "gradients/while/Maximum_2_grad/GreaterEqual"
  input: "gradients/AddN_6"
  input: "gradients/while/Maximum_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/Sum"
  op: "Sum"
  input: "gradients/while/Maximum_2_grad/Select"
  input: "gradients/while/Maximum_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Maximum_2_grad/Sum"
  input: "gradients/while/Maximum_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/Select_1"
  op: "Select"
  input: "gradients/while/Maximum_2_grad/GreaterEqual"
  input: "gradients/while/Maximum_2_grad/zeros"
  input: "gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/while/Maximum_2_grad/Select_1"
  input: "gradients/while/Maximum_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/Maximum_2_grad/Sum_1"
  input: "gradients/while/Maximum_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Maximum_2_grad/Reshape"
  input: "^gradients/while/Maximum_2_grad/Reshape_1"
}
node {
  name: "gradients/while/Maximum_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Maximum_2_grad/Reshape"
  input: "^gradients/while/Maximum_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Maximum_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Maximum_2_grad/Reshape_1"
  input: "^gradients/while/Maximum_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Maximum_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Softplus_grad/Sigmoid"
  op: "Sigmoid"
  input: "gradients/while/Softplus_grad/Sigmoid/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Softplus_grad/Sigmoid/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Softplus_grad/Sigmoid/f_acc"
  op: "StackV2"
  input: "gradients/while/Softplus_grad/Sigmoid/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Softplus_grad/Sigmoid/Enter"
  op: "Enter"
  input: "gradients/while/Softplus_grad/Sigmoid/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Softplus_grad/Sigmoid/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Softplus_grad/Sigmoid/Enter"
  input: "while/add"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Softplus_grad/Sigmoid/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Softplus_grad/Sigmoid/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Softplus_grad/Sigmoid/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Softplus_grad/Sigmoid/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Softplus_grad/mul"
  op: "Mul"
  input: "gradients/while/Maximum_grad/tuple/control_dependency"
  input: "gradients/while/Softplus_grad/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Softplus_2_grad/Sigmoid"
  op: "Sigmoid"
  input: "gradients/while/Softplus_2_grad/Sigmoid/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Softplus_2_grad/Sigmoid/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/add_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Softplus_2_grad/Sigmoid/f_acc"
  op: "StackV2"
  input: "gradients/while/Softplus_2_grad/Sigmoid/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/add_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Softplus_2_grad/Sigmoid/Enter"
  op: "Enter"
  input: "gradients/while/Softplus_2_grad/Sigmoid/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Softplus_2_grad/Sigmoid/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Softplus_2_grad/Sigmoid/Enter"
  input: "while/add_3"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Softplus_2_grad/Sigmoid/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Softplus_2_grad/Sigmoid/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Softplus_2_grad/Sigmoid/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Softplus_2_grad/Sigmoid/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Softplus_2_grad/mul"
  op: "Mul"
  input: "gradients/while/Maximum_2_grad/tuple/control_dependency"
  input: "gradients/while/Softplus_2_grad/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/add_grad/Shape"
  input: "gradients/while/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_grad/Sum"
  op: "Sum"
  input: "gradients/while/Softplus_grad/mul"
  input: "gradients/while/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/add_grad/Sum"
  input: "gradients/while/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/while/Softplus_grad/mul"
  input: "gradients/while/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/add_grad/Sum_1"
  input: "gradients/while/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/add_grad/Reshape"
  input: "^gradients/while/add_grad/Reshape_1"
}
node {
  name: "gradients/while/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/add_grad/Reshape"
  input: "^gradients/while/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/add_grad/Reshape_1"
  input: "^gradients/while/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_3_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/add_3_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/add_3_grad/Shape"
  input: "gradients/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_3_grad/Sum"
  op: "Sum"
  input: "gradients/while/Softplus_2_grad/mul"
  input: "gradients/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/add_3_grad/Sum"
  input: "gradients/while/add_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "gradients/while/Softplus_2_grad/mul"
  input: "gradients/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/add_3_grad/Sum_1"
  input: "gradients/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/add_3_grad/Reshape"
  input: "^gradients/while/add_3_grad/Reshape_1"
}
node {
  name: "gradients/while/add_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/add_3_grad/Reshape"
  input: "^gradients/while/add_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/add_3_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/add_3_grad/Reshape_1"
  input: "^gradients/while/add_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/add_3_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/split_2_grad/concat"
  op: "ConcatV2"
  input: "gradients/while/Normal_2/log_prob/standardize/sub_grad/tuple/control_dependency_1"
  input: "gradients/while/add_3_grad/tuple/control_dependency"
  input: "gradients/while/split_2_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/split_2_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/while/split_2_grad/concat"
  input: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad/Enter"
  op: "Enter"
  input: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad/Enter"
  input: "while/mlp_3/generative_fcnet_1/Relu"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_3/generative_fcnet_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad"
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad"
  input: "^gradients/while/mlp_3/generative_fcnet_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_3/generative_fcnet_1/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_3/generative_fcnet_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_3/generative_fcnet_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul/Enter"
  input: "while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/Enter"
  input: "while/mlp_3/generative_fcnet_0/Relu"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1"
  input: "^gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/tuple/control_dependency"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/MatMul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/while/mlp_3/generative_fcnet_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_3/generative_fcnet_0/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_3/generative_fcnet_0/Relu_grad/ReluGrad"
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_3/generative_fcnet_0/Relu_grad/ReluGrad"
  input: "^gradients/while/mlp_3/generative_fcnet_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_3/generative_fcnet_0/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_3/generative_fcnet_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_3/generative_fcnet_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul/Enter"
  input: "while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/concat_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/concat_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1/Enter"
  input: "while/concat_3"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1"
  input: "^gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_3_grad/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/concat_3_grad/Rank"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/while/concat_3_grad/mod"
  op: "FloorMod"
  input: "gradients/while/concat_3_grad/Const"
  input: "gradients/while/concat_3_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_3_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/concat_3_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/concat_3_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/while/concat_3_grad/mod"
  input: "gradients/while/concat_3_grad/Shape"
  input: "gradients/while/concat_3_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_3_grad/Slice"
  op: "Slice"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/tuple/control_dependency"
  input: "gradients/while/concat_3_grad/ConcatOffset"
  input: "gradients/while/concat_3_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_3_grad/Slice_1"
  op: "Slice"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/tuple/control_dependency"
  input: "gradients/while/concat_3_grad/ConcatOffset:1"
  input: "gradients/while/concat_3_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/concat_3_grad/Slice"
  input: "^gradients/while/concat_3_grad/Slice_1"
}
node {
  name: "gradients/while/concat_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/concat_3_grad/Slice"
  input: "^gradients/while/concat_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/concat_3_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/concat_3_grad/Slice_1"
  input: "^gradients/while/concat_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/concat_3_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/strided_slice/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/strided_slice/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice"
  op: "StridedSlice"
  input: "gradients/Shape_1"
  input: "gradients/strided_slice/stack"
  input: "gradients/strided_slice/stack_1"
  input: "gradients/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/range/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/range/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/range"
  op: "Range"
  input: "gradients/range/start"
  input: "gradients/strided_slice"
  input: "gradients/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Shape_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/strided_slice_1/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/strided_slice_1/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_1/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_1"
  op: "StridedSlice"
  input: "gradients/Shape_2"
  input: "gradients/strided_slice_1/stack"
  input: "gradients/strided_slice_1/stack_1"
  input: "gradients/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/range_1/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/range_1/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/range_1"
  op: "Range"
  input: "gradients/range_1/start"
  input: "gradients/strided_slice_1"
  input: "gradients/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat/axis"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/concat"
  op: "ConcatV2"
  input: "gradients/while/Select_2_grad/tuple/control_dependency_1"
  input: "gradients/while/GatherV2_2_grad/Reshape"
  input: "gradients/while/concat_3_grad/tuple/control_dependency"
  input: "gradients/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_1/axis"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/concat_1"
  op: "ConcatV2"
  input: "gradients/range"
  input: "gradients/while/GatherV2_2_grad/Reshape_1"
  input: "gradients/range_1"
  input: "gradients/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/strided_slice/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/strided_slice/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/strided_slice/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/strided_slice"
  op: "StridedSlice"
  input: "gradients/Shape_1"
  input: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/strided_slice/stack"
  input: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/strided_slice/stack_1"
  input: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/gradients"
  op: "UnsortedSegmentSum"
  input: "gradients/concat"
  input: "gradients/concat_1"
  input: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/gradients"
  input: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/Enter"
  op: "Enter"
  input: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/Enter"
  input: "while/mlp_1/latent_encoder_1/Relu"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_1/latent_encoder_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad"
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad"
  input: "^gradients/while/mlp_1/latent_encoder_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_1/latent_encoder_1/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_1/latent_encoder_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_1/latent_encoder_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_1/latent_encoder_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/while/mlp_1/latent_encoder_1/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul/Enter"
  input: "while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/while/mlp_1/latent_encoder_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/Enter"
  input: "while/mlp_1/latent_encoder_0/Relu"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_1/latent_encoder_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1"
  input: "^gradients/while/mlp_1/latent_encoder_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/tuple/control_dependency"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/MatMul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_1/latent_encoder_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/while/mlp_1/latent_encoder_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_1/latent_encoder_0/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_1/latent_encoder_0/Relu_grad/ReluGrad"
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_1/latent_encoder_0/Relu_grad/ReluGrad"
  input: "^gradients/while/mlp_1/latent_encoder_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_1/latent_encoder_0/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_1/latent_encoder_0/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_1/latent_encoder_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_1/latent_encoder_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/while/mlp_1/latent_encoder_0/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul/Enter"
  input: "while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/while/mlp_1/latent_encoder_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_1/sample/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_1/sample/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1/Enter"
  input: "while/Normal_1/sample/Reshape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_1/latent_encoder_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1"
  input: "^gradients/while/mlp_1/latent_encoder_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_1/latent_encoder_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_7"
  op: "AddN"
  input: "gradients/while/Normal_1/log_prob/standardize/sub_grad/tuple/control_dependency"
  input: "gradients/while/Normal/log_prob/standardize/sub_grad/tuple/control_dependency"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/log_prob/standardize/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/Reshape_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/AddN_7"
  input: "gradients/while/Normal_1/sample/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_1/latent_encoder_0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/add_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/Normal_1/sample/add_grad/Shape"
  input: "gradients/while/Normal_1/sample/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/add_grad/Sum"
  op: "Sum"
  input: "gradients/while/Normal_1/sample/Reshape_grad/Reshape"
  input: "gradients/while/Normal_1/sample/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Normal_1/sample/add_grad/Sum"
  input: "gradients/while/Normal_1/sample/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/while/Normal_1/sample/Reshape_grad/Reshape"
  input: "gradients/while/Normal_1/sample/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/Normal_1/sample/add_grad/Sum_1"
  input: "gradients/while/Normal_1/sample/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal_1/sample/add_grad/Reshape"
  input: "^gradients/while/Normal_1/sample/add_grad/Reshape_1"
}
node {
  name: "gradients/while/Normal_1/sample/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal_1/sample/add_grad/Reshape"
  input: "^gradients/while/Normal_1/sample/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/sample/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal_1/sample/add_grad/Reshape_1"
  input: "^gradients/while/Normal_1/sample/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/sample/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/Normal_1/sample/mul_grad/Shape"
  input: "gradients/while/Normal_1/sample/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/Mul"
  op: "Mul"
  input: "gradients/while/Normal_1/sample/add_grad/tuple/control_dependency"
  input: "gradients/while/Normal_1/log_prob/Log_grad/Reciprocal/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/Sum"
  op: "Sum"
  input: "gradients/while/Normal_1/sample/mul_grad/Mul"
  input: "gradients/while/Normal_1/sample/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Normal_1/sample/mul_grad/Sum"
  input: "gradients/while/Normal_1/sample/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/while/Normal_1/sample/mul_grad/Mul_1/StackPopV2"
  input: "gradients/while/Normal_1/sample/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_1/sample/random_normal"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal_1/sample/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal_1/sample/random_normal"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/while/Normal_1/sample/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal_1/sample/mul_grad/Mul_1/Enter"
  input: "while/Normal_1/sample/random_normal"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal_1/sample/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal_1/sample/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/while/Normal_1/sample/mul_grad/Mul_1"
  input: "gradients/while/Normal_1/sample/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/Normal_1/sample/mul_grad/Sum_1"
  input: "gradients/while/Normal_1/sample/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal_1/sample/mul_grad/Reshape"
  input: "^gradients/while/Normal_1/sample/mul_grad/Reshape_1"
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal_1/sample/mul_grad/Reshape"
  input: "^gradients/while/Normal_1/sample/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/sample/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal_1/sample/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal_1/sample/mul_grad/Reshape_1"
  input: "^gradients/while/Normal_1/sample/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/sample/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_8"
  op: "AddN"
  input: "gradients/while/Normal_1/log_prob/standardize/sub_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal_1/sample/add_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/log_prob/standardize/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_9"
  op: "AddN"
  input: "gradients/while/Normal_1/log_prob/Log_grad/mul"
  input: "gradients/while/Normal_1/log_prob/standardize/truediv_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal_1/sample/mul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/log_prob/Log_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/AddN_8"
}
node {
  name: "gradients/while/add_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/AddN_8"
  input: "^gradients/while/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/log_prob/standardize/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/AddN_8"
  input: "^gradients/while/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal_1/log_prob/standardize/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/Shape_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/zeros/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/zeros"
  op: "Fill"
  input: "gradients/while/Maximum_1_grad/Shape_2"
  input: "gradients/while/Maximum_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/while/Maximum_1_grad/GreaterEqual/StackPopV2"
  input: "gradients/while/Maximum_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Softplus_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "gradients/while/Maximum_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Softplus_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/while/Maximum_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Maximum_1_grad/GreaterEqual/Enter"
  input: "while/Softplus_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Maximum_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Maximum_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/Maximum_1_grad/Shape"
  input: "gradients/while/Maximum_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/Select"
  op: "Select"
  input: "gradients/while/Maximum_1_grad/GreaterEqual"
  input: "gradients/AddN_9"
  input: "gradients/while/Maximum_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/Sum"
  op: "Sum"
  input: "gradients/while/Maximum_1_grad/Select"
  input: "gradients/while/Maximum_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/Maximum_1_grad/Sum"
  input: "gradients/while/Maximum_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/Select_1"
  op: "Select"
  input: "gradients/while/Maximum_1_grad/GreaterEqual"
  input: "gradients/while/Maximum_1_grad/zeros"
  input: "gradients/AddN_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/while/Maximum_1_grad/Select_1"
  input: "gradients/while/Maximum_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/Maximum_1_grad/Sum_1"
  input: "gradients/while/Maximum_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Maximum_1_grad/Reshape"
  input: "^gradients/while/Maximum_1_grad/Reshape_1"
}
node {
  name: "gradients/while/Maximum_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Maximum_1_grad/Reshape"
  input: "^gradients/while/Maximum_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Maximum_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Maximum_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Maximum_1_grad/Reshape_1"
  input: "^gradients/while/Maximum_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Maximum_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/Mul"
  op: "Mul"
  input: "gradients/while/add_2_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal/mean/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal/mean/ones_like"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal/mean/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal/mean/ones_like"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/while/Normal/mean/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal/mean/mul_grad/Mul/Enter"
  input: "while/Normal/mean/ones_like"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal/mean/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal/mean/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/while/add_2_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal/mean/mul_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal/loc"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/Normal/mean/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Normal/loc"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/while/Normal/mean/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Normal/mean/mul_grad/Mul_1/Enter"
  input: "while/Normal/loc"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Normal/mean/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Normal/mean/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/Normal/mean/mul_grad/Mul"
  input: "^gradients/while/Normal/mean/mul_grad/Mul_1"
}
node {
  name: "gradients/while/Normal/mean/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/Normal/mean/mul_grad/Mul"
  input: "^gradients/while/Normal/mean/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal/mean/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Normal/mean/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/Normal/mean/mul_grad/Mul_1"
  input: "^gradients/while/Normal/mean/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal/mean/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Softplus_1_grad/Sigmoid"
  op: "Sigmoid"
  input: "gradients/while/Softplus_1_grad/Sigmoid/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Softplus_1_grad/Sigmoid/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/Softplus_1_grad/Sigmoid/f_acc"
  op: "StackV2"
  input: "gradients/while/Softplus_1_grad/Sigmoid/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/Softplus_1_grad/Sigmoid/Enter"
  op: "Enter"
  input: "gradients/while/Softplus_1_grad/Sigmoid/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Softplus_1_grad/Sigmoid/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/Softplus_1_grad/Sigmoid/Enter"
  input: "while/add_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/Softplus_1_grad/Sigmoid/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/Softplus_1_grad/Sigmoid/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/Softplus_1_grad/Sigmoid/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/Softplus_1_grad/Sigmoid/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Softplus_1_grad/mul"
  op: "Mul"
  input: "gradients/while/Maximum_1_grad/tuple/control_dependency"
  input: "gradients/while/Softplus_1_grad/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_10"
  op: "AddN"
  input: "gradients/while/Normal/log_prob/standardize/sub_grad/tuple/control_dependency_1"
  input: "gradients/while/Normal/mean/mul_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/Normal/log_prob/standardize/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_1_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/add_1_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/add_1_grad/Shape"
  input: "gradients/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/while/Softplus_1_grad/mul"
  input: "gradients/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/add_1_grad/Sum"
  input: "gradients/while/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/while/Softplus_1_grad/mul"
  input: "gradients/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/add_1_grad/Sum_1"
  input: "gradients/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/add_1_grad/Reshape"
  input: "^gradients/while/add_1_grad/Reshape_1"
}
node {
  name: "gradients/while/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/add_1_grad/Reshape"
  input: "^gradients/while/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/add_1_grad/Reshape_1"
  input: "^gradients/while/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/AddN_10"
  input: "gradients/while/add_grad/tuple/control_dependency"
  input: "gradients/while/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/split_1_grad/concat"
  op: "ConcatV2"
  input: "gradients/while/add_2_grad/tuple/control_dependency"
  input: "gradients/while/add_1_grad/tuple/control_dependency"
  input: "gradients/while/split_1_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/split_1_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/while/split_grad/concat"
  input: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad/Enter"
  op: "Enter"
  input: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad/Enter"
  input: "while/mlp_2/prior_fcnet_1/Relu"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/while/split_1_grad/concat"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad/Enter"
  op: "Enter"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad/Enter"
  input: "while/mlp_4/approximate_posterior_fcnet_1/Relu"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_2/prior_fcnet_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad"
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad"
  input: "^gradients/while/mlp_2/prior_fcnet_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_2/prior_fcnet_1/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_2/prior_fcnet_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_2/prior_fcnet_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad"
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_4/approximate_posterior_fcnet_1/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul/Enter"
  input: "while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/Enter"
  input: "while/mlp_2/prior_fcnet_0/Relu"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1"
  input: "^gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul/Enter"
  input: "while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/Enter"
  input: "while/mlp_4/approximate_posterior_fcnet_0/Relu"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/tuple/control_dependency"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/MatMul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/tuple/control_dependency"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/MatMul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/while/mlp_2/prior_fcnet_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_2/prior_fcnet_0/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_2/prior_fcnet_0/Relu_grad/ReluGrad"
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_2/prior_fcnet_0/Relu_grad/ReluGrad"
  input: "^gradients/while/mlp_2/prior_fcnet_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_2/prior_fcnet_0/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_2/prior_fcnet_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_2/prior_fcnet_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_0/Relu_grad/ReluGrad"
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/Relu_grad/ReluGrad"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_4/approximate_posterior_fcnet_0/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul/Enter"
  input: "while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/concat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/concat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1/Enter"
  input: "while/concat_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1"
  input: "^gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul/Enter"
  input: "while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/concat_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/concat_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1/Enter"
  input: "while/concat_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1"
  input: "^gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_2_grad/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/concat_2_grad/Rank"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/while/concat_2_grad/mod"
  op: "FloorMod"
  input: "gradients/while/concat_2_grad/Const"
  input: "gradients/while/concat_2_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_2_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/concat_2_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/concat_2_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/while/concat_2_grad/mod"
  input: "gradients/while/concat_2_grad/Shape"
  input: "gradients/while/concat_2_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_2_grad/Slice"
  op: "Slice"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/tuple/control_dependency"
  input: "gradients/while/concat_2_grad/ConcatOffset"
  input: "gradients/while/concat_2_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_2_grad/Slice_1"
  op: "Slice"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/tuple/control_dependency"
  input: "gradients/while/concat_2_grad/ConcatOffset:1"
  input: "gradients/while/concat_2_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/concat_2_grad/Slice"
  input: "^gradients/while/concat_2_grad/Slice_1"
}
node {
  name: "gradients/while/concat_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/concat_2_grad/Slice"
  input: "^gradients/while/concat_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/concat_2_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/concat_2_grad/Slice_1"
  input: "^gradients/while/concat_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/concat_2_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Shape_3"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/strided_slice_2/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/strided_slice_2/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_2/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_2"
  op: "StridedSlice"
  input: "gradients/Shape_3"
  input: "gradients/strided_slice_2/stack"
  input: "gradients/strided_slice_2/stack_1"
  input: "gradients/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/range_2/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/range_2/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/range_2"
  op: "Range"
  input: "gradients/range_2/start"
  input: "gradients/strided_slice_2"
  input: "gradients/range_2/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Shape_4"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/strided_slice_3/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/strided_slice_3/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_3/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_3"
  op: "StridedSlice"
  input: "gradients/Shape_4"
  input: "gradients/strided_slice_3/stack"
  input: "gradients/strided_slice_3/stack_1"
  input: "gradients/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/range_3/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/range_3/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/range_3"
  op: "Range"
  input: "gradients/range_3/start"
  input: "gradients/strided_slice_3"
  input: "gradients/range_3/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Shape_5"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/strided_slice_4/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/strided_slice_4/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_4/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_4"
  op: "StridedSlice"
  input: "gradients/Shape_5"
  input: "gradients/strided_slice_4/stack"
  input: "gradients/strided_slice_4/stack_1"
  input: "gradients/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/range_4/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/range_4/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/range_4"
  op: "Range"
  input: "gradients/range_4/start"
  input: "gradients/strided_slice_4"
  input: "gradients/range_4/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Shape_6"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/strided_slice_5/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/strided_slice_5/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_5/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_5"
  op: "StridedSlice"
  input: "gradients/Shape_6"
  input: "gradients/strided_slice_5/stack"
  input: "gradients/strided_slice_5/stack_1"
  input: "gradients/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/range_5/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/range_5/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/range_5"
  op: "Range"
  input: "gradients/range_5/start"
  input: "gradients/strided_slice_5"
  input: "gradients/range_5/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_2/axis"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/concat_2"
  op: "ConcatV2"
  input: "gradients/while/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/while/GatherV2_1_grad/Reshape"
  input: "gradients/while/concat_3_grad/tuple/control_dependency_1"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul_grad/tuple/control_dependency"
  input: "gradients/while/concat_2_grad/tuple/control_dependency"
  input: "gradients/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_3/axis"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/concat_3"
  op: "ConcatV2"
  input: "gradients/range_2"
  input: "gradients/while/GatherV2_1_grad/Reshape_1"
  input: "gradients/range_3"
  input: "gradients/range_4"
  input: "gradients/range_5"
  input: "gradients/concat_3/axis"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/lstm_cell/mul_2_grad/Shape"
  input: "gradients/while/lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul/strided_slice/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul/strided_slice/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul/strided_slice/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul/strided_slice"
  op: "StridedSlice"
  input: "gradients/Shape_3"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul/strided_slice/stack"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul/strided_slice/stack_1"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul/x"
  op: "UnsortedSegmentSum"
  input: "gradients/concat_2"
  input: "gradients/concat_3"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul/x"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul/Enter"
  input: "while/lstm_cell/Tanh_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul"
  input: "gradients/while/lstm_cell/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/lstm_cell/mul_2_grad/Sum"
  input: "gradients/while/lstm_cell/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul_1/strided_slice/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul_1/strided_slice/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul_1/strided_slice/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul_1/strided_slice"
  op: "StridedSlice"
  input: "gradients/Shape_3"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul_1/strided_slice/stack"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul_1/strided_slice/stack_1"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul_1/y"
  op: "UnsortedSegmentSum"
  input: "gradients/concat_2"
  input: "gradients/concat_3"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  input: "while/lstm_cell/Sigmoid_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul_1"
  input: "gradients/while/lstm_cell/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/lstm_cell/mul_2_grad/Sum_1"
  input: "gradients/while/lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/lstm_cell/mul_2_grad/Reshape"
  input: "^gradients/while/lstm_cell/mul_2_grad/Reshape_1"
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/lstm_cell/mul_2_grad/Reshape"
  input: "^gradients/while/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/lstm_cell/mul_2_grad/Reshape_1"
  input: "^gradients/while/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/TensorArrayReadV3_3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/TensorArrayReadV3_3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/TensorArrayReadV3_3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/while/TensorArrayReadV3_3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/TensorArrayReadV3_3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  input: "gradients/while/concat_2_grad/tuple/control_dependency_1"
  input: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  op: "StackV2"
  input: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "while/Identity"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/while/lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "gradients/while/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/b_acc_1"
  input: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/Add"
  op: "Add"
  input: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/Switch:1"
  input: "gradients/while/TensorArrayReadV3_3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Shape_7"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/strided_slice_6/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/strided_slice_6/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_6/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_6"
  op: "StridedSlice"
  input: "gradients/Shape_7"
  input: "gradients/strided_slice_6/stack"
  input: "gradients/strided_slice_6/stack_1"
  input: "gradients/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/range_6/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/range_6/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/range_6"
  op: "Range"
  input: "gradients/range_6/start"
  input: "gradients/strided_slice_6"
  input: "gradients/range_6/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Shape_8"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/strided_slice_7/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/strided_slice_7/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_7/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_7"
  op: "StridedSlice"
  input: "gradients/Shape_8"
  input: "gradients/strided_slice_7/stack"
  input: "gradients/strided_slice_7/stack_1"
  input: "gradients/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/range_7/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/range_7/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/range_7"
  op: "Range"
  input: "gradients/range_7/start"
  input: "gradients/strided_slice_7"
  input: "gradients/range_7/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_4/axis"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/concat_4"
  op: "ConcatV2"
  input: "gradients/while/Select_grad/tuple/control_dependency_1"
  input: "gradients/while/GatherV2_grad/Reshape"
  input: "gradients/while/lstm_cell/Tanh_1_grad/TanhGrad"
  input: "gradients/concat_4/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_5/axis"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/concat_5"
  op: "ConcatV2"
  input: "gradients/range_6"
  input: "gradients/while/GatherV2_grad/Reshape_1"
  input: "gradients/range_7"
  input: "gradients/concat_5/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_1_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_1_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/lstm_cell/add_1_grad/Shape"
  input: "gradients/while/lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_1_grad/Sum/strided_slice/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_1_grad/Sum/strided_slice/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_1_grad/Sum/strided_slice/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_1_grad/Sum/strided_slice"
  op: "StridedSlice"
  input: "gradients/Shape_7"
  input: "gradients/while/lstm_cell/add_1_grad/Sum/strided_slice/stack"
  input: "gradients/while/lstm_cell/add_1_grad/Sum/strided_slice/stack_1"
  input: "gradients/while/lstm_cell/add_1_grad/Sum/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_1_grad/Sum/input"
  op: "UnsortedSegmentSum"
  input: "gradients/concat_4"
  input: "gradients/concat_5"
  input: "gradients/while/lstm_cell/add_1_grad/Sum/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/while/lstm_cell/add_1_grad/Sum/input"
  input: "gradients/while/lstm_cell/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/lstm_cell/add_1_grad/Sum"
  input: "gradients/while/lstm_cell/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_1_grad/Sum_1/strided_slice/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_1_grad/Sum_1/strided_slice/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_1_grad/Sum_1/strided_slice/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_1_grad/Sum_1/strided_slice"
  op: "StridedSlice"
  input: "gradients/Shape_7"
  input: "gradients/while/lstm_cell/add_1_grad/Sum_1/strided_slice/stack"
  input: "gradients/while/lstm_cell/add_1_grad/Sum_1/strided_slice/stack_1"
  input: "gradients/while/lstm_cell/add_1_grad/Sum_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_1_grad/Sum_1/input"
  op: "UnsortedSegmentSum"
  input: "gradients/concat_4"
  input: "gradients/concat_5"
  input: "gradients/while/lstm_cell/add_1_grad/Sum_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/while/lstm_cell/add_1_grad/Sum_1/input"
  input: "gradients/while/lstm_cell/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/lstm_cell/add_1_grad/Sum_1"
  input: "gradients/while/lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/lstm_cell/add_1_grad/Reshape"
  input: "^gradients/while/lstm_cell/add_1_grad/Reshape_1"
}
node {
  name: "gradients/while/lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/lstm_cell/add_1_grad/Reshape"
  input: "^gradients/while/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/lstm_cell/add_1_grad/Reshape_1"
  input: "^gradients/while/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "TensorArray_2"
  input: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@TensorArray_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/b_acc_3"
  input: "^gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@TensorArray_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "TensorArrayUnstack_2/range"
  input: "gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/while/TensorArrayReadV3_3/Enter_1_grad/b_acc_3"
}
node {
  name: "gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/TensorArrayReadV3_3/Enter_1_grad/b_acc_3"
  input: "^gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/TensorArrayReadV3_3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/Mul"
  op: "Mul"
  input: "gradients/while/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "gradients/while/lstm_cell/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/while/lstm_cell/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/while/lstm_cell/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/lstm_cell/mul_grad/Mul/Enter"
  input: "while/Identity_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/lstm_cell/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/lstm_cell/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/while/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "gradients/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/lstm_cell/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/while/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/lstm_cell/mul_grad/Mul_1/Enter"
  input: "while/lstm_cell/Sigmoid"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/lstm_cell/mul_grad/Mul"
  input: "^gradients/while/lstm_cell/mul_grad/Mul_1"
}
node {
  name: "gradients/while/lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/lstm_cell/mul_grad/Mul"
  input: "^gradients/while/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/lstm_cell/mul_grad/Mul_1"
  input: "^gradients/while/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul/Enter"
  input: "while/lstm_cell/Tanh"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  input: "while/lstm_cell/Sigmoid_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/lstm_cell/mul_1_grad/Mul"
  input: "^gradients/while/lstm_cell/mul_1_grad/Mul_1"
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul"
  input: "^gradients/while/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/mul_1_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul_1"
  input: "^gradients/while/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Reshape_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\300\003\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "gradients/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  input: "gradients/while/lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/while/lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "gradients/while/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/Reshape_1_grad/Reshape"
  input: "mlp/data_encoder_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/while/lstm_cell/add_grad/Shape"
  input: "gradients/while/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "gradients/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/while/lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/while/lstm_cell/add_grad/Sum"
  input: "gradients/while/lstm_cell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/while/lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/while/lstm_cell/add_grad/Sum_1"
  input: "gradients/while/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/lstm_cell/add_grad/Reshape"
  input: "^gradients/while/lstm_cell/add_grad/Reshape_1"
}
node {
  name: "gradients/while/lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/lstm_cell/add_grad/Reshape"
  input: "^gradients/while/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/lstm_cell/add_grad/Reshape_1"
  input: "^gradients/while/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/while/lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/mlp/data_encoder_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mlp/data_encoder_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/mlp/data_encoder_1/Relu_grad/ReluGrad"
}
node {
  name: "gradients/mlp/data_encoder_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mlp/data_encoder_1/Relu_grad/ReluGrad"
  input: "^gradients/mlp/data_encoder_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mlp/data_encoder_1/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mlp/data_encoder_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/mlp/data_encoder_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mlp/data_encoder_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/while/lstm_cell/Tanh_grad/TanhGrad"
  input: "gradients/while/lstm_cell/add_grad/tuple/control_dependency"
  input: "gradients/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/while/lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/mlp/data_encoder_1/BiasAdd_grad/tuple/control_dependency"
  input: "mlp/data_encoder_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "mlp/data_encoder_0/Relu"
  input: "gradients/mlp/data_encoder_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mlp/data_encoder_1/MatMul_grad/MatMul"
  input: "^gradients/mlp/data_encoder_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/mlp/data_encoder_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mlp/data_encoder_1/MatMul_grad/MatMul"
  input: "^gradients/mlp/data_encoder_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mlp/data_encoder_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mlp/data_encoder_1/MatMul_grad/MatMul_1"
  input: "^gradients/mlp/data_encoder_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mlp/data_encoder_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/while/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/lstm_cell/split_grad/concat"
}
node {
  name: "gradients/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/lstm_cell/split_grad/concat"
  input: "^gradients/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/mlp/data_encoder_1/MatMul_grad/tuple/control_dependency"
  input: "mlp/data_encoder_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/while/lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "while/lstm_cell/concat"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/while/lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/while/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/lstm_cell/MatMul_grad/MatMul_1"
  input: "^gradients/while/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/while/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/mlp/data_encoder_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mlp/data_encoder_0/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/mlp/data_encoder_0/Relu_grad/ReluGrad"
}
node {
  name: "gradients/mlp/data_encoder_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mlp/data_encoder_0/Relu_grad/ReluGrad"
  input: "^gradients/mlp/data_encoder_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mlp/data_encoder_0/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mlp/data_encoder_0/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/mlp/data_encoder_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mlp/data_encoder_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/concat_grad/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/while/lstm_cell/concat_grad/Const"
  input: "gradients/while/lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/concat_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/concat_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/while/lstm_cell/concat_grad/mod"
  input: "gradients/while/lstm_cell/concat_grad/Shape"
  input: "gradients/while/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "gradients/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/while/lstm_cell/concat_grad/ConcatOffset"
  input: "gradients/while/lstm_cell/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/while/lstm_cell/concat_grad/ConcatOffset:1"
  input: "gradients/while/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/lstm_cell/concat_grad/Slice"
  input: "^gradients/while/lstm_cell/concat_grad/Slice_1"
}
node {
  name: "gradients/while/lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/lstm_cell/concat_grad/Slice"
  input: "^gradients/while/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/lstm_cell/concat_grad/Slice_1"
  input: "^gradients/while/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "gradients/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "gradients/while/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/mlp/data_encoder_0/BiasAdd_grad/tuple/control_dependency"
  input: "mlp/data_encoder_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Reshape"
  input: "gradients/mlp/data_encoder_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mlp/data_encoder_0/MatMul_grad/MatMul"
  input: "^gradients/mlp/data_encoder_0/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/mlp/data_encoder_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mlp/data_encoder_0/MatMul_grad/MatMul"
  input: "^gradients/mlp/data_encoder_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mlp/data_encoder_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 960
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mlp/data_encoder_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mlp/data_encoder_0/MatMul_grad/MatMul_1"
  input: "^gradients/mlp/data_encoder_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mlp/data_encoder_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_grad/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/while/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/while/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/while/concat_grad/Const"
  input: "gradients/while/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/concat_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/while/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/while/concat_grad/mod"
  input: "gradients/while/concat_grad/Shape"
  input: "gradients/while/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_grad/Slice"
  op: "Slice"
  input: "gradients/while/lstm_cell/concat_grad/tuple/control_dependency"
  input: "gradients/while/concat_grad/ConcatOffset"
  input: "gradients/while/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/while/lstm_cell/concat_grad/tuple/control_dependency"
  input: "gradients/while/concat_grad/ConcatOffset:1"
  input: "gradients/while/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/concat_grad/Slice"
  input: "^gradients/while/concat_grad/Slice_1"
}
node {
  name: "gradients/while/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/concat_grad/Slice"
  input: "^gradients/while/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/concat_grad/Slice_1"
  input: "^gradients/while/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/while/concat_grad/tuple/control_dependency"
  input: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp/data_encoder_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp/data_encoder_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad/Enter"
  op: "Enter"
  input: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad/Enter"
  input: "while/mlp/data_encoder_1/Relu"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/while/lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp/data_encoder_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad"
}
node {
  name: "gradients/while/mlp/data_encoder_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad"
  input: "^gradients/while/mlp/data_encoder_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp/data_encoder_1/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp/data_encoder_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp/data_encoder_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp/data_encoder_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/while/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/while/mlp/data_encoder_1/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp/data_encoder_1/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp/data_encoder_1/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul/Enter"
  input: "while/mlp/data_encoder_1/MatMul/ReadVariableOp"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/while/mlp/data_encoder_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp/data_encoder_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp/data_encoder_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/Enter"
  input: "while/mlp/data_encoder_0/Relu"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul"
  input: "^gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul"
  input: "^gradients/while/mlp/data_encoder_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1"
  input: "^gradients/while/mlp/data_encoder_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/tuple/control_dependency"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/MatMul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp/data_encoder_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/while/mlp/data_encoder_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp/data_encoder_0/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp/data_encoder_0/Relu_grad/ReluGrad"
}
node {
  name: "gradients/while/mlp/data_encoder_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp/data_encoder_0/Relu_grad/ReluGrad"
  input: "^gradients/while/mlp/data_encoder_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp/data_encoder_0/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp/data_encoder_0/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/while/mlp/data_encoder_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp/data_encoder_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp/data_encoder_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_11"
  op: "AddN"
  input: "gradients/mlp/data_encoder_1/BiasAdd_grad/tuple/control_dependency_1"
  input: "gradients/while/mlp/data_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mlp/data_encoder_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/while/mlp/data_encoder_0/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp/data_encoder_0/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp/data_encoder_0/MatMul/ReadVariableOp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul/Enter"
  input: "while/mlp/data_encoder_0/MatMul/ReadVariableOp"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/while/mlp/data_encoder_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/TensorArrayReadV3_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/TensorArrayReadV3_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1/Enter"
  input: "while/TensorArrayReadV3_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul"
  input: "^gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul"
  input: "^gradients/while/mlp/data_encoder_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1"
  input: "^gradients/while/mlp/data_encoder_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/while/mlp/data_encoder_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_12"
  op: "AddN"
  input: "gradients/mlp/data_encoder_1/MatMul_grad/tuple/control_dependency_1"
  input: "gradients/while/mlp/data_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mlp/data_encoder_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp/data_encoder_0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 30
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc_1"
  input: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/Add"
  op: "Add"
  input: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/Switch:1"
  input: "gradients/while/mlp/data_encoder_0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_13"
  op: "AddN"
  input: "gradients/mlp/data_encoder_0/BiasAdd_grad/tuple/control_dependency_1"
  input: "gradients/while/mlp/data_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mlp/data_encoder_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_14"
  op: "AddN"
  input: "gradients/mlp/data_encoder_0/MatMul_grad/tuple/control_dependency_1"
  input: "gradients/while/mlp/data_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mlp/data_encoder_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "mlp/data_encoder_0/kernel/Adam"
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_0/kernel/Adam"
  input: "mlp/data_encoder_0/kernel/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "mlp/data_encoder_0/kernel/Adam_1"
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_0/kernel/Adam_1"
  input: "mlp/data_encoder_0/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_0/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "mlp/data_encoder_0/bias/Adam"
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_0/bias/Adam"
  input: "mlp/data_encoder_0/bias/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "mlp/data_encoder_0/bias/Adam_1"
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_0/bias/Adam_1"
  input: "mlp/data_encoder_0/bias/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_0/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "mlp/data_encoder_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "mlp/data_encoder_1/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "mlp/data_encoder_1/kernel/Adam"
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_1/kernel/Adam"
  input: "mlp/data_encoder_1/kernel/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "mlp/data_encoder_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "mlp/data_encoder_1/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "mlp/data_encoder_1/kernel/Adam_1"
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_1/kernel/Adam_1"
  input: "mlp/data_encoder_1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_1/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "mlp/data_encoder_1/bias/Adam"
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_1/bias/Adam"
  input: "mlp/data_encoder_1/bias/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "mlp/data_encoder_1/bias/Adam_1"
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_1/bias/Adam_1"
  input: "mlp/data_encoder_1/bias/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mlp/data_encoder_1/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "mlp/data_encoder_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "`\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_cell/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "lstm_cell/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "lstm_cell/kernel/Adam"
  input: "lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "`\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "lstm_cell/kernel/Adam_1"
  input: "lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "lstm_cell/bias/Adam"
  input: "lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "lstm_cell/bias/Adam_1"
  input: "lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_2/prior_fcnet_0/kernel/Adam"
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_2/prior_fcnet_0/kernel/Adam_1"
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam_1"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_2/prior_fcnet_0/bias/Adam"
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_2/prior_fcnet_0/bias/Adam_1"
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam_1"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_0/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_2/prior_fcnet_1/kernel/Adam"
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_2/prior_fcnet_1/kernel/Adam_1"
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam_1"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_2/prior_fcnet_1/bias/Adam"
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_2/prior_fcnet_1/bias/Adam_1"
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam_1"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_2/prior_fcnet_1/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam"
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1"
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam"
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1"
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam"
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1"
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam"
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1"
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_1/latent_encoder_0/kernel/Adam"
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_1/latent_encoder_0/kernel/Adam_1"
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam_1"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_1/latent_encoder_0/bias/Adam"
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_0/bias/Adam"
  input: "while/mlp_1/latent_encoder_0/bias/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_1/latent_encoder_0/bias/Adam_1"
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_0/bias/Adam_1"
  input: "while/mlp_1/latent_encoder_0/bias/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_0/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_1/latent_encoder_1/kernel/Adam"
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_1/latent_encoder_1/kernel/Adam_1"
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam_1"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_1/latent_encoder_1/bias/Adam"
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_1/bias/Adam"
  input: "while/mlp_1/latent_encoder_1/bias/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_1/latent_encoder_1/bias/Adam_1"
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_1/bias/Adam_1"
  input: "while/mlp_1/latent_encoder_1/bias/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_1/latent_encoder_1/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_1/latent_encoder_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_3/generative_fcnet_0/kernel/Adam"
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_3/generative_fcnet_0/kernel/Adam_1"
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam_1"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_3/generative_fcnet_0/bias/Adam"
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_3/generative_fcnet_0/bias/Adam_1"
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam_1"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_0/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_3/generative_fcnet_1/kernel/Adam"
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_3/generative_fcnet_1/kernel/Adam_1"
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam_1"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_3/generative_fcnet_1/bias/Adam"
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "while/mlp_3/generative_fcnet_1/bias/Adam_1"
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam_1"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "while/mlp_3/generative_fcnet_1/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-05
      }
    }
  }
}
node {
  name: "Adam/beta1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/epsilon"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "Adam/update_mlp/data_encoder_0/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "mlp/data_encoder_0/kernel"
  input: "mlp/data_encoder_0/kernel/Adam"
  input: "mlp/data_encoder_0/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mlp/data_encoder_0/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "mlp/data_encoder_0/bias"
  input: "mlp/data_encoder_0/bias/Adam"
  input: "mlp/data_encoder_0/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_0/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mlp/data_encoder_1/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "mlp/data_encoder_1/kernel"
  input: "mlp/data_encoder_1/kernel/Adam"
  input: "mlp/data_encoder_1/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_mlp/data_encoder_1/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "mlp/data_encoder_1/bias"
  input: "mlp/data_encoder_1/bias/Adam"
  input: "mlp/data_encoder_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mlp/data_encoder_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "lstm_cell/kernel"
  input: "lstm_cell/kernel/Adam"
  input: "lstm_cell/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "lstm_cell/bias"
  input: "lstm_cell/bias/Adam"
  input: "lstm_cell/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_2/prior_fcnet_0/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_2/prior_fcnet_0/kernel"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_2/prior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_2/prior_fcnet_0/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_2/prior_fcnet_0/bias"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_2/prior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_2/prior_fcnet_1/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_2/prior_fcnet_1/kernel"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_2/prior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_2/prior_fcnet_1/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_2/prior_fcnet_1/bias"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_2/prior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_2/prior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_4/approximate_posterior_fcnet_0/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_4/approximate_posterior_fcnet_0/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_4/approximate_posterior_fcnet_1/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_4/approximate_posterior_fcnet_1/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_4/approximate_posterior_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_4/approximate_posterior_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_1/latent_encoder_0/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_1/latent_encoder_0/kernel"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_1/latent_encoder_0/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_1/latent_encoder_0/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_1/latent_encoder_0/bias"
  input: "while/mlp_1/latent_encoder_0/bias/Adam"
  input: "while/mlp_1/latent_encoder_0/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_1/latent_encoder_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_0/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_1/latent_encoder_1/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_1/latent_encoder_1/kernel"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_1/latent_encoder_1/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_1/latent_encoder_1/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_1/latent_encoder_1/bias"
  input: "while/mlp_1/latent_encoder_1/bias/Adam"
  input: "while/mlp_1/latent_encoder_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_1/latent_encoder_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_1/latent_encoder_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_3/generative_fcnet_0/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_3/generative_fcnet_0/kernel"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_3/generative_fcnet_0/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_3/generative_fcnet_0/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_3/generative_fcnet_0/bias"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_3/generative_fcnet_0/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_0/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_3/generative_fcnet_1/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_3/generative_fcnet_1/kernel"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_3/generative_fcnet_1/MatMul/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_while/mlp_3/generative_fcnet_1/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "while/mlp_3/generative_fcnet_1/bias"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/while/mlp_3/generative_fcnet_1/BiasAdd/ReadVariableOp/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@while/mlp_3/generative_fcnet_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "Adam/beta1"
  input: "^Adam/update_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_mlp/data_encoder_0/bias/ResourceApplyAdam"
  input: "^Adam/update_mlp/data_encoder_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_mlp/data_encoder_1/bias/ResourceApplyAdam"
  input: "^Adam/update_mlp/data_encoder_1/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_1/latent_encoder_0/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_1/latent_encoder_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_1/latent_encoder_1/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_1/latent_encoder_1/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_2/prior_fcnet_0/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_2/prior_fcnet_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_2/prior_fcnet_1/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_2/prior_fcnet_1/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_3/generative_fcnet_0/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_3/generative_fcnet_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_3/generative_fcnet_1/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_3/generative_fcnet_1/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_4/approximate_posterior_fcnet_0/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_4/approximate_posterior_fcnet_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_4/approximate_posterior_fcnet_1/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_4/approximate_posterior_fcnet_1/kernel/ResourceApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "Adam/beta2"
  input: "^Adam/update_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_mlp/data_encoder_0/bias/ResourceApplyAdam"
  input: "^Adam/update_mlp/data_encoder_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_mlp/data_encoder_1/bias/ResourceApplyAdam"
  input: "^Adam/update_mlp/data_encoder_1/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_1/latent_encoder_0/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_1/latent_encoder_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_1/latent_encoder_1/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_1/latent_encoder_1/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_2/prior_fcnet_0/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_2/prior_fcnet_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_2/prior_fcnet_1/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_2/prior_fcnet_1/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_3/generative_fcnet_0/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_3/generative_fcnet_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_3/generative_fcnet_1/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_3/generative_fcnet_1/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_4/approximate_posterior_fcnet_0/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_4/approximate_posterior_fcnet_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_4/approximate_posterior_fcnet_1/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_4/approximate_posterior_fcnet_1/kernel/ResourceApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/update"
  op: "NoOp"
  input: "^Adam/Assign"
  input: "^Adam/Assign_1"
  input: "^Adam/update_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_mlp/data_encoder_0/bias/ResourceApplyAdam"
  input: "^Adam/update_mlp/data_encoder_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_mlp/data_encoder_1/bias/ResourceApplyAdam"
  input: "^Adam/update_mlp/data_encoder_1/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_1/latent_encoder_0/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_1/latent_encoder_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_1/latent_encoder_1/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_1/latent_encoder_1/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_2/prior_fcnet_0/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_2/prior_fcnet_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_2/prior_fcnet_1/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_2/prior_fcnet_1/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_3/generative_fcnet_0/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_3/generative_fcnet_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_3/generative_fcnet_1/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_3/generative_fcnet_1/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_4/approximate_posterior_fcnet_0/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_4/approximate_posterior_fcnet_0/kernel/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_4/approximate_posterior_fcnet_1/bias/ResourceApplyAdam"
  input: "^Adam/update_while/mlp_4/approximate_posterior_fcnet_1/kernel/ResourceApplyAdam"
}
node {
  name: "Adam/value"
  op: "Const"
  input: "^Adam/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "Adam"
  op: "AssignAdd"
  input: "global_step"
  input: "Adam/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "Add"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^global_step/Assign"
  input: "^lstm_cell/bias/Adam/Assign"
  input: "^lstm_cell/bias/Adam_1/Assign"
  input: "^lstm_cell/bias/Assign"
  input: "^lstm_cell/kernel/Adam/Assign"
  input: "^lstm_cell/kernel/Adam_1/Assign"
  input: "^lstm_cell/kernel/Assign"
  input: "^mlp/data_encoder_0/bias/Adam/Assign"
  input: "^mlp/data_encoder_0/bias/Adam_1/Assign"
  input: "^mlp/data_encoder_0/bias/Assign"
  input: "^mlp/data_encoder_0/kernel/Adam/Assign"
  input: "^mlp/data_encoder_0/kernel/Adam_1/Assign"
  input: "^mlp/data_encoder_0/kernel/Assign"
  input: "^mlp/data_encoder_1/bias/Adam/Assign"
  input: "^mlp/data_encoder_1/bias/Adam_1/Assign"
  input: "^mlp/data_encoder_1/bias/Assign"
  input: "^mlp/data_encoder_1/kernel/Adam/Assign"
  input: "^mlp/data_encoder_1/kernel/Adam_1/Assign"
  input: "^mlp/data_encoder_1/kernel/Assign"
  input: "^rnn/lstm_cell/bias/Assign"
  input: "^rnn/lstm_cell/kernel/Assign"
  input: "^while/mlp_1/latent_encoder_0/bias/Adam/Assign"
  input: "^while/mlp_1/latent_encoder_0/bias/Adam_1/Assign"
  input: "^while/mlp_1/latent_encoder_0/bias/Assign"
  input: "^while/mlp_1/latent_encoder_0/kernel/Adam/Assign"
  input: "^while/mlp_1/latent_encoder_0/kernel/Adam_1/Assign"
  input: "^while/mlp_1/latent_encoder_0/kernel/Assign"
  input: "^while/mlp_1/latent_encoder_1/bias/Adam/Assign"
  input: "^while/mlp_1/latent_encoder_1/bias/Adam_1/Assign"
  input: "^while/mlp_1/latent_encoder_1/bias/Assign"
  input: "^while/mlp_1/latent_encoder_1/kernel/Adam/Assign"
  input: "^while/mlp_1/latent_encoder_1/kernel/Adam_1/Assign"
  input: "^while/mlp_1/latent_encoder_1/kernel/Assign"
  input: "^while/mlp_2/prior_fcnet_0/bias/Adam/Assign"
  input: "^while/mlp_2/prior_fcnet_0/bias/Adam_1/Assign"
  input: "^while/mlp_2/prior_fcnet_0/bias/Assign"
  input: "^while/mlp_2/prior_fcnet_0/kernel/Adam/Assign"
  input: "^while/mlp_2/prior_fcnet_0/kernel/Adam_1/Assign"
  input: "^while/mlp_2/prior_fcnet_0/kernel/Assign"
  input: "^while/mlp_2/prior_fcnet_1/bias/Adam/Assign"
  input: "^while/mlp_2/prior_fcnet_1/bias/Adam_1/Assign"
  input: "^while/mlp_2/prior_fcnet_1/bias/Assign"
  input: "^while/mlp_2/prior_fcnet_1/kernel/Adam/Assign"
  input: "^while/mlp_2/prior_fcnet_1/kernel/Adam_1/Assign"
  input: "^while/mlp_2/prior_fcnet_1/kernel/Assign"
  input: "^while/mlp_3/generative_fcnet_0/bias/Adam/Assign"
  input: "^while/mlp_3/generative_fcnet_0/bias/Adam_1/Assign"
  input: "^while/mlp_3/generative_fcnet_0/bias/Assign"
  input: "^while/mlp_3/generative_fcnet_0/kernel/Adam/Assign"
  input: "^while/mlp_3/generative_fcnet_0/kernel/Adam_1/Assign"
  input: "^while/mlp_3/generative_fcnet_0/kernel/Assign"
  input: "^while/mlp_3/generative_fcnet_1/bias/Adam/Assign"
  input: "^while/mlp_3/generative_fcnet_1/bias/Adam_1/Assign"
  input: "^while/mlp_3/generative_fcnet_1/bias/Assign"
  input: "^while/mlp_3/generative_fcnet_1/kernel/Adam/Assign"
  input: "^while/mlp_3/generative_fcnet_1/kernel/Adam_1/Assign"
  input: "^while/mlp_3/generative_fcnet_1/kernel/Assign"
  input: "^while/mlp_4/approximate_posterior_fcnet_0/bias/Adam/Assign"
  input: "^while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1/Assign"
  input: "^while/mlp_4/approximate_posterior_fcnet_0/bias/Assign"
  input: "^while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam/Assign"
  input: "^while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1/Assign"
  input: "^while/mlp_4/approximate_posterior_fcnet_0/kernel/Assign"
  input: "^while/mlp_4/approximate_posterior_fcnet_1/bias/Adam/Assign"
  input: "^while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1/Assign"
  input: "^while/mlp_4/approximate_posterior_fcnet_1/bias/Assign"
  input: "^while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam/Assign"
  input: "^while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1/Assign"
  input: "^while/mlp_4/approximate_posterior_fcnet_1/kernel/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "rnn/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "rnn/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_22"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_23"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_24"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_25"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_26"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_27"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_28"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_29"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_30"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_31"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_32"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_33"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_34"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_35"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_36"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_37"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_38"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_39"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_40"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_41"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_42"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_43"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_44"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_45"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_46"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_47"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_48"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_49"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_50"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_51"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_52"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_53"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_54"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_55"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_56"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_57"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_58"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_59"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/VarIsInitializedOp"
  input: "report_uninitialized_variables/VarIsInitializedOp_1"
  input: "report_uninitialized_variables/VarIsInitializedOp_2"
  input: "report_uninitialized_variables/VarIsInitializedOp_3"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_5"
  input: "report_uninitialized_variables/VarIsInitializedOp_6"
  input: "report_uninitialized_variables/VarIsInitializedOp_7"
  input: "report_uninitialized_variables/VarIsInitializedOp_8"
  input: "report_uninitialized_variables/VarIsInitializedOp_9"
  input: "report_uninitialized_variables/VarIsInitializedOp_10"
  input: "report_uninitialized_variables/VarIsInitializedOp_11"
  input: "report_uninitialized_variables/VarIsInitializedOp_12"
  input: "report_uninitialized_variables/VarIsInitializedOp_13"
  input: "report_uninitialized_variables/VarIsInitializedOp_14"
  input: "report_uninitialized_variables/VarIsInitializedOp_15"
  input: "report_uninitialized_variables/VarIsInitializedOp_16"
  input: "report_uninitialized_variables/VarIsInitializedOp_17"
  input: "report_uninitialized_variables/VarIsInitializedOp_18"
  input: "report_uninitialized_variables/VarIsInitializedOp_19"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/VarIsInitializedOp_20"
  input: "report_uninitialized_variables/VarIsInitializedOp_21"
  input: "report_uninitialized_variables/VarIsInitializedOp_22"
  input: "report_uninitialized_variables/VarIsInitializedOp_23"
  input: "report_uninitialized_variables/VarIsInitializedOp_24"
  input: "report_uninitialized_variables/VarIsInitializedOp_25"
  input: "report_uninitialized_variables/VarIsInitializedOp_26"
  input: "report_uninitialized_variables/VarIsInitializedOp_27"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/VarIsInitializedOp_28"
  input: "report_uninitialized_variables/VarIsInitializedOp_29"
  input: "report_uninitialized_variables/VarIsInitializedOp_30"
  input: "report_uninitialized_variables/VarIsInitializedOp_31"
  input: "report_uninitialized_variables/VarIsInitializedOp_32"
  input: "report_uninitialized_variables/VarIsInitializedOp_33"
  input: "report_uninitialized_variables/VarIsInitializedOp_34"
  input: "report_uninitialized_variables/VarIsInitializedOp_35"
  input: "report_uninitialized_variables/VarIsInitializedOp_36"
  input: "report_uninitialized_variables/VarIsInitializedOp_37"
  input: "report_uninitialized_variables/VarIsInitializedOp_38"
  input: "report_uninitialized_variables/VarIsInitializedOp_39"
  input: "report_uninitialized_variables/VarIsInitializedOp_40"
  input: "report_uninitialized_variables/VarIsInitializedOp_41"
  input: "report_uninitialized_variables/VarIsInitializedOp_42"
  input: "report_uninitialized_variables/VarIsInitializedOp_43"
  input: "report_uninitialized_variables/VarIsInitializedOp_44"
  input: "report_uninitialized_variables/VarIsInitializedOp_45"
  input: "report_uninitialized_variables/VarIsInitializedOp_46"
  input: "report_uninitialized_variables/VarIsInitializedOp_47"
  input: "report_uninitialized_variables/VarIsInitializedOp_48"
  input: "report_uninitialized_variables/VarIsInitializedOp_49"
  input: "report_uninitialized_variables/VarIsInitializedOp_50"
  input: "report_uninitialized_variables/VarIsInitializedOp_51"
  input: "report_uninitialized_variables/VarIsInitializedOp_52"
  input: "report_uninitialized_variables/VarIsInitializedOp_53"
  input: "report_uninitialized_variables/VarIsInitializedOp_54"
  input: "report_uninitialized_variables/VarIsInitializedOp_55"
  input: "report_uninitialized_variables/VarIsInitializedOp_56"
  input: "report_uninitialized_variables/VarIsInitializedOp_57"
  input: "report_uninitialized_variables/VarIsInitializedOp_58"
  input: "report_uninitialized_variables/VarIsInitializedOp_59"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 71
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 71
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 71
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 71
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 71
          }
        }
        string_val: "global_step"
        string_val: "mlp/data_encoder_0/kernel"
        string_val: "mlp/data_encoder_0/bias"
        string_val: "mlp/data_encoder_1/kernel"
        string_val: "mlp/data_encoder_1/bias"
        string_val: "rnn/lstm_cell/kernel"
        string_val: "rnn/lstm_cell/bias"
        string_val: "lstm_cell/kernel"
        string_val: "lstm_cell/bias"
        string_val: "while/mlp_2/prior_fcnet_0/kernel"
        string_val: "while/mlp_2/prior_fcnet_0/bias"
        string_val: "while/mlp_2/prior_fcnet_1/kernel"
        string_val: "while/mlp_2/prior_fcnet_1/bias"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/kernel"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/bias"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/kernel"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/bias"
        string_val: "while/mlp_1/latent_encoder_0/kernel"
        string_val: "while/mlp_1/latent_encoder_0/bias"
        string_val: "while/mlp_1/latent_encoder_1/kernel"
        string_val: "while/mlp_1/latent_encoder_1/bias"
        string_val: "while/mlp_3/generative_fcnet_0/kernel"
        string_val: "while/mlp_3/generative_fcnet_0/bias"
        string_val: "while/mlp_3/generative_fcnet_1/kernel"
        string_val: "while/mlp_3/generative_fcnet_1/bias"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "mlp/data_encoder_0/kernel/Adam"
        string_val: "mlp/data_encoder_0/kernel/Adam_1"
        string_val: "mlp/data_encoder_0/bias/Adam"
        string_val: "mlp/data_encoder_0/bias/Adam_1"
        string_val: "mlp/data_encoder_1/kernel/Adam"
        string_val: "mlp/data_encoder_1/kernel/Adam_1"
        string_val: "mlp/data_encoder_1/bias/Adam"
        string_val: "mlp/data_encoder_1/bias/Adam_1"
        string_val: "lstm_cell/kernel/Adam"
        string_val: "lstm_cell/kernel/Adam_1"
        string_val: "lstm_cell/bias/Adam"
        string_val: "lstm_cell/bias/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_0/kernel/Adam"
        string_val: "while/mlp_2/prior_fcnet_0/kernel/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_0/bias/Adam"
        string_val: "while/mlp_2/prior_fcnet_0/bias/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_1/kernel/Adam"
        string_val: "while/mlp_2/prior_fcnet_1/kernel/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_1/bias/Adam"
        string_val: "while/mlp_2/prior_fcnet_1/bias/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1"
        string_val: "while/mlp_1/latent_encoder_0/kernel/Adam"
        string_val: "while/mlp_1/latent_encoder_0/kernel/Adam_1"
        string_val: "while/mlp_1/latent_encoder_0/bias/Adam"
        string_val: "while/mlp_1/latent_encoder_0/bias/Adam_1"
        string_val: "while/mlp_1/latent_encoder_1/kernel/Adam"
        string_val: "while/mlp_1/latent_encoder_1/kernel/Adam_1"
        string_val: "while/mlp_1/latent_encoder_1/bias/Adam"
        string_val: "while/mlp_1/latent_encoder_1/bias/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_0/kernel/Adam"
        string_val: "while/mlp_3/generative_fcnet_0/kernel/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_0/bias/Adam"
        string_val: "while/mlp_3/generative_fcnet_0/bias/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_1/kernel/Adam"
        string_val: "while/mlp_3/generative_fcnet_1/kernel/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_1/bias/Adam"
        string_val: "while/mlp_3/generative_fcnet_1/bias/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 71
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 71
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 71
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 71
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 71
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "rnn/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "rnn/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_22"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_23"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_0/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_24"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_25"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_26"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_27"
  op: "VarIsInitializedOp"
  input: "mlp/data_encoder_1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_28"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_29"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_30"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_31"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_32"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_33"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_34"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_35"
  op: "VarIsInitializedOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_36"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_37"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_38"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_39"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_40"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_41"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_42"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_43"
  op: "VarIsInitializedOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_44"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_45"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_46"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_47"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_0/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_48"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_49"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_50"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_51"
  op: "VarIsInitializedOp"
  input: "while/mlp_1/latent_encoder_1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_52"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_53"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_54"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_55"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_56"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_57"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_58"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_59"
  op: "VarIsInitializedOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/VarIsInitializedOp"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_22"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_23"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_24"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_25"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_26"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_27"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  input: "report_uninitialized_variables_1/IsVariableInitialized_9"
  input: "report_uninitialized_variables_1/IsVariableInitialized_10"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_28"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_29"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_30"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_31"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_32"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_33"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_34"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_35"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_36"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_37"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_38"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_39"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_40"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_41"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_42"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_43"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_44"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_45"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_46"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_47"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_48"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_49"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_50"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_51"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_52"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_53"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_54"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_55"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_56"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_57"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_58"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_59"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 71
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 71
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 71
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 71
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 71
          }
        }
        string_val: "global_step"
        string_val: "mlp/data_encoder_0/kernel"
        string_val: "mlp/data_encoder_0/bias"
        string_val: "mlp/data_encoder_1/kernel"
        string_val: "mlp/data_encoder_1/bias"
        string_val: "rnn/lstm_cell/kernel"
        string_val: "rnn/lstm_cell/bias"
        string_val: "lstm_cell/kernel"
        string_val: "lstm_cell/bias"
        string_val: "while/mlp_2/prior_fcnet_0/kernel"
        string_val: "while/mlp_2/prior_fcnet_0/bias"
        string_val: "while/mlp_2/prior_fcnet_1/kernel"
        string_val: "while/mlp_2/prior_fcnet_1/bias"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/kernel"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/bias"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/kernel"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/bias"
        string_val: "while/mlp_1/latent_encoder_0/kernel"
        string_val: "while/mlp_1/latent_encoder_0/bias"
        string_val: "while/mlp_1/latent_encoder_1/kernel"
        string_val: "while/mlp_1/latent_encoder_1/bias"
        string_val: "while/mlp_3/generative_fcnet_0/kernel"
        string_val: "while/mlp_3/generative_fcnet_0/bias"
        string_val: "while/mlp_3/generative_fcnet_1/kernel"
        string_val: "while/mlp_3/generative_fcnet_1/bias"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "mlp/data_encoder_0/kernel/Adam"
        string_val: "mlp/data_encoder_0/kernel/Adam_1"
        string_val: "mlp/data_encoder_0/bias/Adam"
        string_val: "mlp/data_encoder_0/bias/Adam_1"
        string_val: "mlp/data_encoder_1/kernel/Adam"
        string_val: "mlp/data_encoder_1/kernel/Adam_1"
        string_val: "mlp/data_encoder_1/bias/Adam"
        string_val: "mlp/data_encoder_1/bias/Adam_1"
        string_val: "lstm_cell/kernel/Adam"
        string_val: "lstm_cell/kernel/Adam_1"
        string_val: "lstm_cell/bias/Adam"
        string_val: "lstm_cell/bias/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_0/kernel/Adam"
        string_val: "while/mlp_2/prior_fcnet_0/kernel/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_0/bias/Adam"
        string_val: "while/mlp_2/prior_fcnet_0/bias/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_1/kernel/Adam"
        string_val: "while/mlp_2/prior_fcnet_1/kernel/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_1/bias/Adam"
        string_val: "while/mlp_2/prior_fcnet_1/bias/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1"
        string_val: "while/mlp_1/latent_encoder_0/kernel/Adam"
        string_val: "while/mlp_1/latent_encoder_0/kernel/Adam_1"
        string_val: "while/mlp_1/latent_encoder_0/bias/Adam"
        string_val: "while/mlp_1/latent_encoder_0/bias/Adam_1"
        string_val: "while/mlp_1/latent_encoder_1/kernel/Adam"
        string_val: "while/mlp_1/latent_encoder_1/kernel/Adam_1"
        string_val: "while/mlp_1/latent_encoder_1/bias/Adam"
        string_val: "while/mlp_1/latent_encoder_1/bias/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_0/kernel/Adam"
        string_val: "while/mlp_3/generative_fcnet_0/kernel/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_0/bias/Adam"
        string_val: "while/mlp_3/generative_fcnet_0/bias/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_1/kernel/Adam"
        string_val: "while/mlp_3/generative_fcnet_1/kernel/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_1/bias/Adam"
        string_val: "while/mlp_3/generative_fcnet_1/bias/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 71
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 71
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 71
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 71
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 71
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "train_ll_per_seq"
  input: "train_ll_per_t"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_9b23f7543bf047fd934248f86976afeb/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 71
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 71
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "global_step"
        string_val: "lstm_cell/bias"
        string_val: "lstm_cell/bias/Adam"
        string_val: "lstm_cell/bias/Adam_1"
        string_val: "lstm_cell/kernel"
        string_val: "lstm_cell/kernel/Adam"
        string_val: "lstm_cell/kernel/Adam_1"
        string_val: "mlp/data_encoder_0/bias"
        string_val: "mlp/data_encoder_0/bias/Adam"
        string_val: "mlp/data_encoder_0/bias/Adam_1"
        string_val: "mlp/data_encoder_0/kernel"
        string_val: "mlp/data_encoder_0/kernel/Adam"
        string_val: "mlp/data_encoder_0/kernel/Adam_1"
        string_val: "mlp/data_encoder_1/bias"
        string_val: "mlp/data_encoder_1/bias/Adam"
        string_val: "mlp/data_encoder_1/bias/Adam_1"
        string_val: "mlp/data_encoder_1/kernel"
        string_val: "mlp/data_encoder_1/kernel/Adam"
        string_val: "mlp/data_encoder_1/kernel/Adam_1"
        string_val: "rnn/lstm_cell/bias"
        string_val: "rnn/lstm_cell/kernel"
        string_val: "while/mlp_1/latent_encoder_0/bias"
        string_val: "while/mlp_1/latent_encoder_0/bias/Adam"
        string_val: "while/mlp_1/latent_encoder_0/bias/Adam_1"
        string_val: "while/mlp_1/latent_encoder_0/kernel"
        string_val: "while/mlp_1/latent_encoder_0/kernel/Adam"
        string_val: "while/mlp_1/latent_encoder_0/kernel/Adam_1"
        string_val: "while/mlp_1/latent_encoder_1/bias"
        string_val: "while/mlp_1/latent_encoder_1/bias/Adam"
        string_val: "while/mlp_1/latent_encoder_1/bias/Adam_1"
        string_val: "while/mlp_1/latent_encoder_1/kernel"
        string_val: "while/mlp_1/latent_encoder_1/kernel/Adam"
        string_val: "while/mlp_1/latent_encoder_1/kernel/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_0/bias"
        string_val: "while/mlp_2/prior_fcnet_0/bias/Adam"
        string_val: "while/mlp_2/prior_fcnet_0/bias/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_0/kernel"
        string_val: "while/mlp_2/prior_fcnet_0/kernel/Adam"
        string_val: "while/mlp_2/prior_fcnet_0/kernel/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_1/bias"
        string_val: "while/mlp_2/prior_fcnet_1/bias/Adam"
        string_val: "while/mlp_2/prior_fcnet_1/bias/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_1/kernel"
        string_val: "while/mlp_2/prior_fcnet_1/kernel/Adam"
        string_val: "while/mlp_2/prior_fcnet_1/kernel/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_0/bias"
        string_val: "while/mlp_3/generative_fcnet_0/bias/Adam"
        string_val: "while/mlp_3/generative_fcnet_0/bias/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_0/kernel"
        string_val: "while/mlp_3/generative_fcnet_0/kernel/Adam"
        string_val: "while/mlp_3/generative_fcnet_0/kernel/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_1/bias"
        string_val: "while/mlp_3/generative_fcnet_1/bias/Adam"
        string_val: "while/mlp_3/generative_fcnet_1/bias/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_1/kernel"
        string_val: "while/mlp_3/generative_fcnet_1/kernel/Adam"
        string_val: "while/mlp_3/generative_fcnet_1/kernel/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/bias"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/kernel"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/bias"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/kernel"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 71
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 71
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "beta1_power"
  input: "beta2_power"
  input: "global_step"
  input: "lstm_cell/bias"
  input: "lstm_cell/bias/Adam"
  input: "lstm_cell/bias/Adam_1"
  input: "lstm_cell/kernel"
  input: "lstm_cell/kernel/Adam"
  input: "lstm_cell/kernel/Adam_1"
  input: "mlp/data_encoder_0/bias/Read/ReadVariableOp"
  input: "mlp/data_encoder_0/bias/Adam/Read/ReadVariableOp"
  input: "mlp/data_encoder_0/bias/Adam_1/Read/ReadVariableOp"
  input: "mlp/data_encoder_0/kernel/Read/ReadVariableOp"
  input: "mlp/data_encoder_0/kernel/Adam/Read/ReadVariableOp"
  input: "mlp/data_encoder_0/kernel/Adam_1/Read/ReadVariableOp"
  input: "mlp/data_encoder_1/bias/Read/ReadVariableOp"
  input: "mlp/data_encoder_1/bias/Adam/Read/ReadVariableOp"
  input: "mlp/data_encoder_1/bias/Adam_1/Read/ReadVariableOp"
  input: "mlp/data_encoder_1/kernel/Read/ReadVariableOp"
  input: "mlp/data_encoder_1/kernel/Adam/Read/ReadVariableOp"
  input: "mlp/data_encoder_1/kernel/Adam_1/Read/ReadVariableOp"
  input: "rnn/lstm_cell/bias"
  input: "rnn/lstm_cell/kernel"
  input: "while/mlp_1/latent_encoder_0/bias/Read/ReadVariableOp"
  input: "while/mlp_1/latent_encoder_0/bias/Adam/Read/ReadVariableOp"
  input: "while/mlp_1/latent_encoder_0/bias/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Read/ReadVariableOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam/Read/ReadVariableOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_1/latent_encoder_1/bias/Read/ReadVariableOp"
  input: "while/mlp_1/latent_encoder_1/bias/Adam/Read/ReadVariableOp"
  input: "while/mlp_1/latent_encoder_1/bias/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Read/ReadVariableOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam/Read/ReadVariableOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Read/ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam/Read/ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Read/ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam/Read/ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Read/ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam/Read/ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Read/ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam/Read/ReadVariableOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Read/ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam/Read/ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Read/ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam/Read/ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Read/ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam/Read/ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Read/ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam/Read/ReadVariableOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Read/ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam/Read/ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Read/ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam/Read/ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Read/ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam/Read/ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1/Read/ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Read/ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam/Read/ReadVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1/Read/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 71
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 71
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "global_step"
        string_val: "lstm_cell/bias"
        string_val: "lstm_cell/bias/Adam"
        string_val: "lstm_cell/bias/Adam_1"
        string_val: "lstm_cell/kernel"
        string_val: "lstm_cell/kernel/Adam"
        string_val: "lstm_cell/kernel/Adam_1"
        string_val: "mlp/data_encoder_0/bias"
        string_val: "mlp/data_encoder_0/bias/Adam"
        string_val: "mlp/data_encoder_0/bias/Adam_1"
        string_val: "mlp/data_encoder_0/kernel"
        string_val: "mlp/data_encoder_0/kernel/Adam"
        string_val: "mlp/data_encoder_0/kernel/Adam_1"
        string_val: "mlp/data_encoder_1/bias"
        string_val: "mlp/data_encoder_1/bias/Adam"
        string_val: "mlp/data_encoder_1/bias/Adam_1"
        string_val: "mlp/data_encoder_1/kernel"
        string_val: "mlp/data_encoder_1/kernel/Adam"
        string_val: "mlp/data_encoder_1/kernel/Adam_1"
        string_val: "rnn/lstm_cell/bias"
        string_val: "rnn/lstm_cell/kernel"
        string_val: "while/mlp_1/latent_encoder_0/bias"
        string_val: "while/mlp_1/latent_encoder_0/bias/Adam"
        string_val: "while/mlp_1/latent_encoder_0/bias/Adam_1"
        string_val: "while/mlp_1/latent_encoder_0/kernel"
        string_val: "while/mlp_1/latent_encoder_0/kernel/Adam"
        string_val: "while/mlp_1/latent_encoder_0/kernel/Adam_1"
        string_val: "while/mlp_1/latent_encoder_1/bias"
        string_val: "while/mlp_1/latent_encoder_1/bias/Adam"
        string_val: "while/mlp_1/latent_encoder_1/bias/Adam_1"
        string_val: "while/mlp_1/latent_encoder_1/kernel"
        string_val: "while/mlp_1/latent_encoder_1/kernel/Adam"
        string_val: "while/mlp_1/latent_encoder_1/kernel/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_0/bias"
        string_val: "while/mlp_2/prior_fcnet_0/bias/Adam"
        string_val: "while/mlp_2/prior_fcnet_0/bias/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_0/kernel"
        string_val: "while/mlp_2/prior_fcnet_0/kernel/Adam"
        string_val: "while/mlp_2/prior_fcnet_0/kernel/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_1/bias"
        string_val: "while/mlp_2/prior_fcnet_1/bias/Adam"
        string_val: "while/mlp_2/prior_fcnet_1/bias/Adam_1"
        string_val: "while/mlp_2/prior_fcnet_1/kernel"
        string_val: "while/mlp_2/prior_fcnet_1/kernel/Adam"
        string_val: "while/mlp_2/prior_fcnet_1/kernel/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_0/bias"
        string_val: "while/mlp_3/generative_fcnet_0/bias/Adam"
        string_val: "while/mlp_3/generative_fcnet_0/bias/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_0/kernel"
        string_val: "while/mlp_3/generative_fcnet_0/kernel/Adam"
        string_val: "while/mlp_3/generative_fcnet_0/kernel/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_1/bias"
        string_val: "while/mlp_3/generative_fcnet_1/bias/Adam"
        string_val: "while/mlp_3/generative_fcnet_1/bias/Adam_1"
        string_val: "while/mlp_3/generative_fcnet_1/kernel"
        string_val: "while/mlp_3/generative_fcnet_1/kernel/Adam"
        string_val: "while/mlp_3/generative_fcnet_1/kernel/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/bias"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/kernel"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/bias"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/kernel"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam"
        string_val: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 71
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 71
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "lstm_cell/bias"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "lstm_cell/bias/Adam"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "lstm_cell/bias/Adam_1"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "lstm_cell/kernel"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "lstm_cell/kernel/Adam"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_0/bias"
  input: "save/Identity_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_0/bias/Adam"
  input: "save/Identity_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_0/bias/Adam_1"
  input: "save/Identity_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_4"
  op: "Identity"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_0/kernel"
  input: "save/Identity_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_5"
  op: "Identity"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_0/kernel/Adam"
  input: "save/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_6"
  op: "Identity"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_0/kernel/Adam_1"
  input: "save/Identity_6"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_7"
  op: "Identity"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_6"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_1/bias"
  input: "save/Identity_7"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_8"
  op: "Identity"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_7"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_1/bias/Adam"
  input: "save/Identity_8"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_9"
  op: "Identity"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_8"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_1/bias/Adam_1"
  input: "save/Identity_9"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_10"
  op: "Identity"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_9"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_1/kernel"
  input: "save/Identity_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_11"
  op: "Identity"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_10"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_1/kernel/Adam"
  input: "save/Identity_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_12"
  op: "Identity"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_11"
  op: "AssignVariableOp"
  input: "mlp/data_encoder_1/kernel/Adam_1"
  input: "save/Identity_12"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "rnn/lstm_cell/bias"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "rnn/lstm_cell/kernel"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity_13"
  op: "Identity"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_12"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_0/bias"
  input: "save/Identity_13"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_14"
  op: "Identity"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_13"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_0/bias/Adam"
  input: "save/Identity_14"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_15"
  op: "Identity"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_14"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_0/bias/Adam_1"
  input: "save/Identity_15"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_16"
  op: "Identity"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_15"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_0/kernel"
  input: "save/Identity_16"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_17"
  op: "Identity"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_16"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam"
  input: "save/Identity_17"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_18"
  op: "Identity"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_17"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_0/kernel/Adam_1"
  input: "save/Identity_18"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_19"
  op: "Identity"
  input: "save/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_18"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_1/bias"
  input: "save/Identity_19"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_20"
  op: "Identity"
  input: "save/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_19"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_1/bias/Adam"
  input: "save/Identity_20"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_21"
  op: "Identity"
  input: "save/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_20"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_1/bias/Adam_1"
  input: "save/Identity_21"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_22"
  op: "Identity"
  input: "save/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_21"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_1/kernel"
  input: "save/Identity_22"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_23"
  op: "Identity"
  input: "save/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_22"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam"
  input: "save/Identity_23"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_24"
  op: "Identity"
  input: "save/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_23"
  op: "AssignVariableOp"
  input: "while/mlp_1/latent_encoder_1/kernel/Adam_1"
  input: "save/Identity_24"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_25"
  op: "Identity"
  input: "save/RestoreV2:35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_24"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_0/bias"
  input: "save/Identity_25"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_26"
  op: "Identity"
  input: "save/RestoreV2:36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_25"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam"
  input: "save/Identity_26"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_27"
  op: "Identity"
  input: "save/RestoreV2:37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_26"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_0/bias/Adam_1"
  input: "save/Identity_27"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_28"
  op: "Identity"
  input: "save/RestoreV2:38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_27"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_0/kernel"
  input: "save/Identity_28"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_29"
  op: "Identity"
  input: "save/RestoreV2:39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_28"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam"
  input: "save/Identity_29"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_30"
  op: "Identity"
  input: "save/RestoreV2:40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_29"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_0/kernel/Adam_1"
  input: "save/Identity_30"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_31"
  op: "Identity"
  input: "save/RestoreV2:41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_30"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_1/bias"
  input: "save/Identity_31"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_32"
  op: "Identity"
  input: "save/RestoreV2:42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_31"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam"
  input: "save/Identity_32"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_33"
  op: "Identity"
  input: "save/RestoreV2:43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_32"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_1/bias/Adam_1"
  input: "save/Identity_33"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_34"
  op: "Identity"
  input: "save/RestoreV2:44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_33"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_1/kernel"
  input: "save/Identity_34"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_35"
  op: "Identity"
  input: "save/RestoreV2:45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_34"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam"
  input: "save/Identity_35"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_36"
  op: "Identity"
  input: "save/RestoreV2:46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_35"
  op: "AssignVariableOp"
  input: "while/mlp_2/prior_fcnet_1/kernel/Adam_1"
  input: "save/Identity_36"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_37"
  op: "Identity"
  input: "save/RestoreV2:47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_36"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_0/bias"
  input: "save/Identity_37"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_38"
  op: "Identity"
  input: "save/RestoreV2:48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_37"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam"
  input: "save/Identity_38"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_39"
  op: "Identity"
  input: "save/RestoreV2:49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_38"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_0/bias/Adam_1"
  input: "save/Identity_39"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_40"
  op: "Identity"
  input: "save/RestoreV2:50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_39"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_0/kernel"
  input: "save/Identity_40"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_41"
  op: "Identity"
  input: "save/RestoreV2:51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_40"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam"
  input: "save/Identity_41"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_42"
  op: "Identity"
  input: "save/RestoreV2:52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_41"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_0/kernel/Adam_1"
  input: "save/Identity_42"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_43"
  op: "Identity"
  input: "save/RestoreV2:53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_42"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_1/bias"
  input: "save/Identity_43"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_44"
  op: "Identity"
  input: "save/RestoreV2:54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_43"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam"
  input: "save/Identity_44"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_45"
  op: "Identity"
  input: "save/RestoreV2:55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_44"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_1/bias/Adam_1"
  input: "save/Identity_45"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_46"
  op: "Identity"
  input: "save/RestoreV2:56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_45"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_1/kernel"
  input: "save/Identity_46"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_47"
  op: "Identity"
  input: "save/RestoreV2:57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_46"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam"
  input: "save/Identity_47"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_48"
  op: "Identity"
  input: "save/RestoreV2:58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_47"
  op: "AssignVariableOp"
  input: "while/mlp_3/generative_fcnet_1/kernel/Adam_1"
  input: "save/Identity_48"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_49"
  op: "Identity"
  input: "save/RestoreV2:59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_48"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias"
  input: "save/Identity_49"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_50"
  op: "Identity"
  input: "save/RestoreV2:60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_49"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam"
  input: "save/Identity_50"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_51"
  op: "Identity"
  input: "save/RestoreV2:61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_50"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/bias/Adam_1"
  input: "save/Identity_51"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_52"
  op: "Identity"
  input: "save/RestoreV2:62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_51"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel"
  input: "save/Identity_52"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_53"
  op: "Identity"
  input: "save/RestoreV2:63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_52"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam"
  input: "save/Identity_53"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_54"
  op: "Identity"
  input: "save/RestoreV2:64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_53"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_0/kernel/Adam_1"
  input: "save/Identity_54"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_55"
  op: "Identity"
  input: "save/RestoreV2:65"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_54"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias"
  input: "save/Identity_55"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_56"
  op: "Identity"
  input: "save/RestoreV2:66"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_55"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam"
  input: "save/Identity_56"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_57"
  op: "Identity"
  input: "save/RestoreV2:67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_56"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/bias/Adam_1"
  input: "save/Identity_57"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_58"
  op: "Identity"
  input: "save/RestoreV2:68"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_57"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel"
  input: "save/Identity_58"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_59"
  op: "Identity"
  input: "save/RestoreV2:69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_58"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam"
  input: "save/Identity_59"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_60"
  op: "Identity"
  input: "save/RestoreV2:70"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_59"
  op: "AssignVariableOp"
  input: "while/mlp_4/approximate_posterior_fcnet_1/kernel/Adam_1"
  input: "save/Identity_60"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/AssignVariableOp"
  input: "^save/AssignVariableOp_1"
  input: "^save/AssignVariableOp_10"
  input: "^save/AssignVariableOp_11"
  input: "^save/AssignVariableOp_12"
  input: "^save/AssignVariableOp_13"
  input: "^save/AssignVariableOp_14"
  input: "^save/AssignVariableOp_15"
  input: "^save/AssignVariableOp_16"
  input: "^save/AssignVariableOp_17"
  input: "^save/AssignVariableOp_18"
  input: "^save/AssignVariableOp_19"
  input: "^save/AssignVariableOp_2"
  input: "^save/AssignVariableOp_20"
  input: "^save/AssignVariableOp_21"
  input: "^save/AssignVariableOp_22"
  input: "^save/AssignVariableOp_23"
  input: "^save/AssignVariableOp_24"
  input: "^save/AssignVariableOp_25"
  input: "^save/AssignVariableOp_26"
  input: "^save/AssignVariableOp_27"
  input: "^save/AssignVariableOp_28"
  input: "^save/AssignVariableOp_29"
  input: "^save/AssignVariableOp_3"
  input: "^save/AssignVariableOp_30"
  input: "^save/AssignVariableOp_31"
  input: "^save/AssignVariableOp_32"
  input: "^save/AssignVariableOp_33"
  input: "^save/AssignVariableOp_34"
  input: "^save/AssignVariableOp_35"
  input: "^save/AssignVariableOp_36"
  input: "^save/AssignVariableOp_37"
  input: "^save/AssignVariableOp_38"
  input: "^save/AssignVariableOp_39"
  input: "^save/AssignVariableOp_4"
  input: "^save/AssignVariableOp_40"
  input: "^save/AssignVariableOp_41"
  input: "^save/AssignVariableOp_42"
  input: "^save/AssignVariableOp_43"
  input: "^save/AssignVariableOp_44"
  input: "^save/AssignVariableOp_45"
  input: "^save/AssignVariableOp_46"
  input: "^save/AssignVariableOp_47"
  input: "^save/AssignVariableOp_48"
  input: "^save/AssignVariableOp_49"
  input: "^save/AssignVariableOp_5"
  input: "^save/AssignVariableOp_50"
  input: "^save/AssignVariableOp_51"
  input: "^save/AssignVariableOp_52"
  input: "^save/AssignVariableOp_53"
  input: "^save/AssignVariableOp_54"
  input: "^save/AssignVariableOp_55"
  input: "^save/AssignVariableOp_56"
  input: "^save/AssignVariableOp_57"
  input: "^save/AssignVariableOp_58"
  input: "^save/AssignVariableOp_59"
  input: "^save/AssignVariableOp_6"
  input: "^save/AssignVariableOp_7"
  input: "^save/AssignVariableOp_8"
  input: "^save/AssignVariableOp_9"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
library {
  function {
    signature {
      name: "_make_dataset_OSH5aSdnThQ"
      output_arg {
        name: "modeldataset"
        type: DT_VARIANT
      }
      description: "Factory function for a dataset."
      is_stateful: true
    }
    node_def {
      name: "optimizations"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 3
              }
            }
            string_val: "map_and_batch_fusion"
            string_val: "noop_elimination"
            string_val: "shuffle_and_repeat_fusion"
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/tensors/normalize_tensors/component_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 800
              }
              dim {
                size: 24
              }
              dim {
                size: 1
              }
            }
            tensor_content: "\247\300\000>\224DX\277\010\322\326=\366k\223\2743\001\264>4\376`?l\364\025?\222:t?\216\2004?\006\264\212?<\224\255>xX:\277\023\377\240\277\271\226\232\277\300\202\203\277\306\207z\277*\362\006\277\2763^?l\252\212=f\201,?\036%\206\276\200IB\277F\225#\277)_\'\277\233\3222>\310\n\236>jm\245>\345\307\021?h\361\226?\265\341\227?\331\347\205?\250\331\247?\361\035\264?\017\305N?\200\"\211>\355\"\263?\320k\202?T\252\274>\334\330g>\200W\373<\256_*>bE@?\310\262\230?\310\371B?\322v\205?$\363\264>g\030\263>\372\351\021>\343\337\036\276\212\313 \277:\304\276>P\335\215>>\320\210=\212\207\264\277~\341\014\277_R\217\276\226>/\277n(\361\276\355&\210\277l\213V\277\336c\302\277B\324\302\277\202O:\277u\237\205\277\n\376\221\276>\025\275>\365\260\266?\234\252N?a\002\316\276\010\321\327\275`\250W\273\333v\200>\177c`?\305\205\232?tT\273>\273\333\255\277H\006d\277\250V\003\277\210K\246\277n\220a\277n\023?\276\266\241\253>`\t\343?\261n\020@\213}%@\327\321\014@\351tn?\276K\267>(\237\336\275\271\030\214\275N\350\341=\254\260x>*\356I\276W\307\006\277\r\336y\277r\347\315\276O\021\332>jA\t?\347\272q?z\n\372?t\0130@\rP\006@\267\211\302?\273\222\336?J\003\345?\272a\"?\307\215\235>\244\263\210?a%4?\205Ha>&\242*\276\027\275\306\277\340\272\223\277v\327\247\277\245i\241\277\331=\037\3005\036$\300\022\275Z\300X\365\022\300\324\207\022\3007\275V\2779\3724\277\336\2147\277X\361\204\2770\303\276\277)\327\004\300\24708\300\"{\253\2778=\240\277\333\250\323\277\312\210v\277:_}\277\265\235x\277<\271\236\276\334B\007\277\2346d>~d\256\276X\375u\277\220\362\210\277\376r\200\277 \212%\277\241#m\277\360\315\022\2754\347\213;\3073\300\274va%?\"\317\311>gI\031?\030Uw=\357\244\217>V\227\235?\304\027\366>P\326\275\274&h\351=\222r\351>\212H\200?\\<\267?\315\201!?J#\225?\316\202\315?\263gd?\244\0231>o\360\201\276&4\221?\210\303\323>\\\2751?\214\021a>x\325=?\204\322\341\275|\263\020\276h.&?<\365\225=1\336$\277\304\276\324\276r\371\036\276t@\326\276\370\275\031\275os\017?E\002-?:hi>\340\227U?h{\353\275.r\201>Y\340V\276\3409\305\277\020a\036\277\271)\207\2766\002)\276Ym\237\275\n\273\300\2760\316\035=\200c\342>_\302s? \371\263?\252o!@S\344\240?\277N\262>_\016k?\334\217\r?\342\270O?8\305\250\275+\326\204\277<E\007\300A\215\304\277v\240\366\2776\003_\277ny\277\276T\000\000>\177\371\246\276x>\270\276VF\304\277~l\307\277\232\240g\277\033W\232\277Ur\205\277\3201|=Y\034\215>\377NU\277\200\016\341<\214- \277`\023\305\276`A\220>\220\'\374>dBT?\235{K?\000n\023\272\0225\225\277SB\326\277\300\006\010\276\\5\n\277\352\200\312\277@4\311\277V\341:\277\000I5;\353f\365>\364K\221=+\363F?P\217\024=9\006\235\275\307]a>g^\241?\365\214\004?\033I ?xO!?\316l\000?\374)\226=\006d\216=Z[\005\277\335\244\034\277\000\274@:r\370:>\204z\337\2760p\240<\216\321\302??\344\256?\320\255\235?r:\221?\304\372\366?\210e3@3\224\251?_\253U?\254\217m?:,\260?\211+\n?\246\034W\277\364\321\016\276\025\213\332\276\'n\025\276\000\215\337>6\334\022>\000\272\201\271\235\226\233>\307C\017>\351\275[\277\352\250\357\277XE\017\300\306~\367\277\254\343\315\277X\312\327\277\200$\007\300o\217\355\277\001;\031\300,\255\323\277>\202a\277\000D\240\277%\021\274\277.\036\213\277.\234\327\276\306\224q?\3711\276?G\020\300?\354\266\316?7A\026@z\276F?\323o\227?\rU\304?\344\273\271?\n\347\300?\350_@@\301\256P@\230z\352?a\r\310?0|\260?\020\364\225>\020\305\236?\364>\000?\000\t\256<\252 $>\334\202\377\276Z\323z\276\362,>\276\250\305\005\275~\323\241?\201#\253?\356\353\261?\253(\236?\347\227\310>H(\355\275\005\016\203=/@\302\276:d\202\277\272\207-\277@\251\345>\226\024i>\210\225s>\260V\204?\220\237\230?\204#\">\221\036Z\2761\337\354=\367I\333=\253UL?\221\211\302?m}\202?\262\312\310?\316\240\326?\330[@>\272n\230?s\'\010@\\\374\233?I{\261?\035G,?T\375\255>A\261R?\354\013\307=hY\245\276$ \004>\271\214\035\277\362\371h\277H0\214\277\002Z\244\276b\306Z\277}\204\227\276be\251>\253\313A?4po?\212\001\013?V\242!>\2463\376>\257\353\370\276I\343\303<\220-9?(\257\374=\004I\234\277i\261\026\277x\031\305\277`l\300\277\260\350\327\277\262\r\236\277\026\277*\277x\243\205=\245\275\236?\316\230\343>\270S$?-N\031?\200\007\215?@\217\005<\270-\301=\236\342.\276\254\342<\277\344K\243>h*0>\003\260\207=\250\234\203=\376\355\310?\310\206\333?9t\343?\207\005\345?\014\225\321?\322n\250?\227\004\250?D\267}?\320\367\215>k_\213>A\272d\277tV\202>\3129\230\275M?\217\276oY\370>\245K&?\022H\257?6\321\344?x\207\363\275\025\263T\277r/\031\277\240\254\265\276\344\323\236\277D|\341\277I\243\214?\2533\327??\003\204?q\311\355>\307\"X?\357\343\356>7\242\275\276\023W8\276^HR\277\336{\033\277\232\245\240\277\202\213:\277\266\364\300\277\270\020]>\240Zb\277~\244m?o\271\206? z\032?L\324\234?\345)\250?\232\200$?\367\327\020?}\177\330>\303\261\006>z\215\250\276 \375)\275c\253\006\277/Mm\276\361\026\036\277\213\374\030\277\234\273\304=p\363\236>\002\357\254\275~\207\276\276nT\030?\245\212=?\326IS?9\001-?\250\304\n\277\\,\235=2\207n?5\027\203?^<\302?R\035\021?\354\206D?\374H\361>\363\235\020?\r\334\216?\033S-\276\242 _\277\320\037\202\277\256\325\254\277q\030\244\277\036s\220\277\\to\277u\313\235\277K`\316\277\342z\020\277\366T\325\2766\342&\277\370He\276\264\265\277\276R\177O\277\214\232\304\276\020\320\'\277 \373\241\274\216\301\210>\261\225!?\351#\'?\226C\267?\360\007\342?E\2472?\020\203\003@\335\355\213?\032\356P?\207\214\212>\347@\342>\354\200\351\276\316\250c\277B\303#\277`\242_\277\000.\253\277\252\372\364\277\324T\225\277\346\327\326\276\2249&\276\021\nq\277\272/)\276\257|\373>k\233$?\360\237\006=\270\254r\274\247\024\270\275\027\013\236\276\0243\217>\253\203\217\276S\315F\276\354R\317?\017CT?\316)\201>\341\\\017?\360\000U?\032X\024>\360\r(<\010\304\313>\221!\354>\354D\204\275(&\236>Gq\240>\216\221\215\277vI+\277\240\311\356>vaX\277O\210\353\276\243\2671\277 \216\033>6Z\273>8\360B?\224\333\235?\246\004\242?\031I\321>\000qV?li\272?\320Al?\200\301\240\274\034\306F\275K\235\006?\350\225\255\275f:Z\276\304DN\277\344\245\352\277P\263\264\277\311\277\255\277u\r\277\276\242\327\320\275\0165\246\276w\345\"\277\344\000r\276:\377J\277\340\237\336\277EA[\277\345\373\272\276\213o\271\277\212@\273\277}~\005\277\267\361\375\276x0+\277RJM\277<\"y>tl\205\275\266\272\236\276\3708\251>\272\257\023\2762\353\274\276\226\031\215\2770G\262\277\006\031\236\277\254p\272\277\317d\013\277R\236E\277\252\277\220\277f2X\277\014\t\004?<\270\201\276y\250^\276\0355\204?\n\350L?q\376%?\003\276B\276.\236p=\022\301\n\277\274\336\355=,\241\315\276\000;\265;I\003S\277\037\255\205\277|\"\256\277\245]\272\277\301\217\373\276z\010*\277`D\211\277`mP>\226d\304>\375\323\006?\300?\216=-}\230?\207\344T?\220\026\347\276\210G4\276\247\026F?M7\374?}\024\031@q\010\242\277zCa\277 \263\232>\326\324\264>\324G!\277\216\375\264> \377\246>\246J\216\276\311\352i\277#_m\277\226\323\253\277-\320?\277R\331\214\276\304\n\002=q\214@?\240\365z=\266r\244>f\221c?\226\302\223?hX\027\276\214wr?hX\315?\324\316\315>X*=?u\216a?\224R\367?\237\360\017@Z\216\"@^\\\263?QW\236?\366]1?\302\335\357>(i\256?S\230\000?$\324~?\310~\030?K\367\t?\262\033\362=]SW=\273\032\217\277H\031\301=\263]0\277\377\230\036?C\211\247?\210\357b?6\307\220>,\341\230?\330\230$>L\360\364?\022\245\305?\020,\341?\266:d?*\017\247?\243\305\312?\235\354d? \252\004\276\032\000\370>\020\006\363>\250\r\221\276\022N\035>\242\330\025?\263\017\210>ZE\222\275\331z\213?\240\tU=\253\2630?@\242\032=[\3328\277\222\213]\277\264\274\n\277\354\217\201\276\025\032\214\276 \357\n?\262$|?\260z\333?\365\\\371?\270\n\366?\210*\254?\237x\307?0\247{?t\212o?T{$?\220\275\321\275\354\020\316\274\206\341\271>\26252?\230\303q?\253G/?\260Fl?\241\220*?\304\236\310?t\235(?\326\206\233?\364\034\230?\230\014$\276dv\301\274*\\\364\277\255@\204\277iL\243\277\n\202\360\276\351\266\370\276\350\214\005\277qm\024\277\376I\013\276\2547\034?x\010\257?\241\267\006@r;\010@\306T @!\257\020@\351\311\001@n\222:?*vT?\030\337$=5o7?\024\203|?l6z?\214\177P?\220\275\241\275[0\304>\324\220\207>D\007\262\276\246\371e\277\273\001\322\277\036X\313\277\231\240\306\277Q9\210\2775\'\272\277\220\r\347\277h\342\361\277,{\276\277(\032\335\277\227\214\264\277r\375\263\277\333y\205\277\252\232Z\277\036\212s\277\034\211v>\\\031F>gq\333=\255{\310=.QT>\361r\231=|\367\233>\302\203\n?\n\365\025\276\014\021\204\277\"\272\316\277\n\265\256\277 \231\315\277\016\334s\277/\314g\277n\233\306\2771\'\277\277.\361\321\276!\232.>\217\271j\276U\363e\277\200\022\247\277Of\"\277\2307\241\275zw\321\276\2364\361\275A\225\210\276-\205Y\277\0267c\277\370\200\030\276\354\305\273\276\354\'\240\276\354\352\273>\367\250\016?u\323\205?\271\307+?\234\364\364=B)\226?\310\267\"?\324\244K?\264\251<?\001jM?\2373`?i\260T?Y\013d?.?\201?\370\n\250=\235X$>\310\000\231\275F0\031=\177n\030\276\352\207\241\276r\033\270\2755|\243=O\031\376>#\206\262\277ph\246\276i`\373>\024\252\257=\261Z\t=\221\\\273\276\027\257\247\276v\0106>\211\216\220\2764]:\277\037\200\320\277+\010\006\277+D\353\276\\\200\262\276~\350i\276\333\375\225==^$\277\030z6\275\227e9?\353u\250\276\342P_\276\333\255\246\276\356{\270\277\254\323\220\277\205\017\000?\300\233\036\275#\354\326>\273\037D?R\362\254>\344\337\305=G\363\017>e\257\222\277\320S\324\275\263u\332>\320w\234?\233\261\213?\300R\264?\257\270\350?>\233\265?\022$\022?\223\311\"\277\027\341\302\276q\201\245\277\364k\254\277\230\272m\276\220\236\252\276\373\356\027\277\200F\234<\312w\265\275\334SY?P\021\004>\2472\t\277\360AL\277x\322\216\275\014\3756\276\255\216\017>\340\362U?X\352K>\262\033\027\277!\0269\277\014\263B\277,X\223\277\332+\005\277(\326\230\276,j\243\277\230v\265\2760-\355\276\3401{=\033t|?\223j ?\002\323\207>:a\364\276%\201\235?\006_\312?\357\024\321?0\343\273\275\237?7\277\364\352\271\277\310}\303\277\204\253\205\277\244\274\243\277\361-\024\277iz\253\2773v\241\277\335\036\254\277N\343r\277>]e\277\304\235H\277\2203\006\276xR-\276PE\307>\336\342\200>\274`i>]\013\244\277h\243\320\277q\272\240\277\007\030\026\277\222v.\276D\370\r\277\260\336\266\274M\304d?\"w7?\310(\222=\227\365\370>@\2278\274\237\222\257\277\000\323\230\274x\277\024?a8\035?\rOX?L\254\264>\372v\376=j\\\022? \256\342>\240\257\320\274\312Y\372\274;\203\323\276m\227\025?Y\226\275>\223\376\266?\034\n\203\277\tq^\277\230\264\"\2776\0144>\003\010#?\25021?\333\033\273>4X\364\276\207\356+\277\014\232l\277\320\306r\275#\235\017?>K5?r\212\232?\222\033T?6\326\340\276\344V#?:\255\217?\210\373\262?*\255\317?IU\334?t\330\261?j\370\206?0\354o?\246#\035?\212\372\317>\352\367j>\020\036\304\276uG}\277\300\313\232=\020\243\342\2766\202%\277\361\343\204\277t\2168\277\200n\226\277\234\024,\276\027\301\245\276\367\332K\277O@\242\276\000\"S\277\366D\005\277D\023m\277D\224N\277\304\262N\277\000\032\234\272xo\207\276\247\034\221\277\000\362\201\277k\246\257?,\243\260>P\204\022\274M|\207\276\360N\334\276\362\036z\276^\233\302\276\2124\234\276juY\277X\275\222\2755\302\027\277w<\035\276\0016K\276J2\024\277\313\247\320\277x\340\351\276\225v!\277\313\302W\277\214?r\277\216y\323\277o({\277\346\205\'\277\034\0334\277\325\355\272\276\301B\237>\323&\227?J\273\243?\004vf?@5\200?\356\260\225?x\252B?P\356\023=\240\225\201\276\376\036H>\313\3562?\310Kb?P\340\021=9\3712\275%\\\032\277d\300h\277>\204;\277\320\263&\275\016~+\276`\336\311\273-\0003?\240\025\223>p\213[?\022\337\'\277;r\234\2770MJ\277\2662{\277\021\301n\277\014\200t\277*\241r\277\024\231\"\277\322\014\273\2760\027,\277\017\327s\277\364\226\265\277\357S\246\277\276-\351\277\300v}\276\243\270\237\277\202\245\266\277!\020\237\277\377{\224\277\330\235\021\277\260\203\n=-\365G?2\335\010\277\216\245\\>\242z\014?\342\n\231>\200t\r?~2[?\311m\247?]\360\277?c\343z?\325\355\225?\374X\206>$ \024?\216\233\257?\252\204`?\306\235\204>6\202\344\275\025\305\025\277\005`\031\277,yM\277C=\202\2778\265\341\277\212\2455\277)r\023\277\020\363\264=\343\377\304\276\260\332\231\276\265\262\366\276Z3\235\277\\\307\305\2765\344\242>\2308\213=`\337\033\277 \315\306\277\234u\315\277`\232\220\277\215y\355\276:\303\340\277v\370\244\276)\253\323>c\200\213?\225\021V?\317\364\000?*\330\"?,\305\210\276up\255\276>\260\264\276\256\262\000>\277\3632\277g1\035\277\310\315\346\276\034\206\274\276O\217\305\277\270\n\205\277\3006\226\277}\362\311\277D#S\277\243Y\213\276\261P\266\277w4\200\277\006\226\324\277\360L\364\276\252\350}\277l\024\023\277\343H^?\324D\345=\377\234\234\276\241\322\266\276\225\224<\277\334\324\212\275>\216?\276%I9\277B\235?\277r\344\271\276t\247[?6[\352>o\346\273>@\t\357<^6\023\275\366$\253>j\371/?n\330\013?\376\005C?\277\333\201?\240H\337=\256q >\362\240\206\275|\357\370\275<\277\222?:\334\227?\321\337\205?\021?\264?\316W\233?(\230\010@\376s\204?=\343\232?\347x\013?\210\177\230?k\377\014?v->>\333;\260>R\242\216>\252\347#\276\220Q,>\371\363_>I7H?\032@\263?MM\346?\\\"\035@\222O\220?\274,j>\342<H\276\3643S>hv\315?C\272\037@\030\257\377? \322\356?Q<\000@\200/\307?\226l\261?\216\277\253?\\\341\250?Z\006\274?F@\243?\010X\343>)\363\004?\357\025\255\276>\213\303\276\354g\246\276e7,\277*sl\277x\023\352\275Rs\374=\034\333\206?{\331\271?\320\200N=\312\261\324>h\016.?k\225w\277\314\327T\277`\233\246\277t\302\306\277J\330!\277*\326\255\276\202\376/\277\234;\230>A\264\341\276v\027n\277\246\275\305\277\330\000\366\277\2318\324\277\275\235\346\277\250\306g\277\300\235\223\277\300\332\242\275\177g4?\201g\301?\305\304r?\232a\211>\025\250\037?\346\355\200?\346\274\241?\272\036\355>\211\323\365>\002c\\?\3642\334?cc\307?\2343\221?xc\\>\037\230~\277;\'i\2775\236\347\276\016\374\257\277\246<\002\277\354\361z>\311\243\007?\373\274-\277\342u+\277B5\014\2776o\031?J1T?\370a\t?:zu>\362\336\213?s\n\217?@\332\006\275\036\3525\276\377x\005\277\310I\\\276n\235\272\276/\223\315\276\224\261\000?\260\306\230?\0179\231?b\372\321>fwI?\347\242\031\300\220\261\320\277\242\275\231\277\360\334T\277\364\253H\276\000\302\014\277\236\035\036\276\222-\001?GW>?\\\372U>\177\371L>\352D\304\2760\370\276<\000\220\377>\234\260\267\275\320\246(\276x&5\276\361\2054?\000h\22096\230\230\276\325\343\035\277\220\274\014>T\330\302>\030i\014?9\222{?\216\200F?\024\203\260>Rp\344\276\200\321\220\273\256\314(>\364Y\022\277Q\014f\277O\323\234\277\355\335\336\276\017\320L>\220XS\277\3436X\277o\230\215\277\304\315z\277\240\035W\277\360\204\031>\313q\231\276\200%(\277W\033\026\277\006\305v\277vSj\277@Aj\275\032\004\036\275\233\345\200?\3209\254?T\307&?\331\214\264?\354\000\034?\016\316$?\264\035\311?\356\237\243?\353\001\232?0\322\265?<\271t> y\342>\336\215\326\275\306\"\005>r/\304\276\346\243]>\356\346\355\276\3120\037\276\377\262\266\275T\354\202\275\270\343}?\376\\\r>9p\313?$Z\225?(ka\277m\264\234\277\254\'=\276\310\377J\276\260\025\244\277\225~\336\277\034\335\264\277\273\2261\277Kp-\277\276\247\342\276p\331\206<\346m\007>\200\035\357\276\240\001\327=4\205\350>#\007-?\276\245\277>\2610\215?`\262i?G\341V?\232\266\244?\264\266\033\277O\200\022\277\314\204\031\277\026/\327\275\304\240,\277@7\007\277\375\302E\277\016q\267\276\236\375\360=,\370d\276\026\366\236>2\177\362>L\301A?\033?\252?ic\367?\'L\351?+ \r@\357^\013@\333V\322?N\270\317?6\2211@\273\355\036@I\220\023@\346\310\365?\277*B?\270\\\227\276\037\371\220\277\n\303\226?0\257\255?\024\353h>=\232\007?vN\006?\260\377Z?\362\361g>\360Q\000\276{\204\035\276\242\335\215\276p\321\317\275\010C\337\274N{\316=\330\224o\276[k`\277J\226\201\277\243R\213\277\\\250\005>\370\357]=?Dt>\273\001\235>\010f\262\275\366\240U\277\341\221\205\277\257\313\227\276~\353^\277*k\226\276\032\017\241\275j\026\321\275t\002\255\276\007\270U\276\263fW>s\330\304>\222\272K?\242\226+?C\340\'?\300[\323<K\275\013?Y\031=?\350\202.>\020@6<s\321o>I%\213\276|\332\214\277\266\354\302\276\207\007\362\276\304\344\370=\252<\370>!\213\353\273\222\024\264\274#\2438?\244\343r\276\274\223t\275\374\345 =\261\340p?\356;\243?U\212G?\0003\255=\224bo\276i:\254>\357<W>$\357\267\276D\345\226\277\010\265\271\277\203=\237\277D\037z\277\374\251\214\277\016\035\274\277\225cj\277\274\313\016\300\232\352\r\300\302R\337\277T,\000?\307(q>\210\313~>@\177\211<\211\235\024>\177\375*\277\212\277s\277D\255J\276\364\305\220<\252A\377<lq\310\276\343\303\026>\"\376b\276\222fu>\220YT<\315\315\000\277q\233\375\276\206\'O?\020\0302>2n\341>C\372F\277\246P`\277\277\321C\277\231\331\305\277&\243\321\276\346\255%>\30035\274NNG?\266\347z?.\3167?:\251\215?\340y\265=f\256H?u\037\210?\3041\332>\366\321V\276\364\261(\277\256\300\006\277\356\256*\277L\301\231\277\233\203\230\277\036}\377\276\336\202~\277\320\3162=\033\033\020?d\327\033?\272\346y>i\263\013?.g\001\277\350\016\300=\204\326\333\276\372\203\246\276J\031\201\277\261\300\372\277\240\340\216\277\\\261\375\277\347\370\341\277=5\255\277F\306\017\300\271J\262\277\232\267\347\277`\340?=[\224#?\\-w\276\260\253!\277S\203\216\276\r\032-?\002{\353>\\-m\275\tp\267\276\351n\232\277oB\232\277\271\344C\276(\312\235\274\010\001A\275\253\\\222\277\262\3369\277h\'M>\252\031q?\226\'\007?\010\322\214>@\3461\277\220\376\307\277G#\314\277.\027\224\277\232G\243\277\210\231\215\277\270\267\221\277\201\372\004?(jd?ai5?t\261\202?\266\337v?$w#?ZD\014?\253\276\233?\275rd<.3\021>\236\3612?zA5?\036\205\221?\353\220\235?\346\304\302?\301a\334>U>C?\\\016\207?.\272\266?|\016\210?\212*\345>\244PQ?\367\254\267?.\336\005@yS\342?1\207\356?T\265\264?\363\214\255?\223\316\263?\247a\310?\027\374\241?|]\236?\245#\261>PH\245>\377\274\002?\250\376\027?.r\225\276\202\211\310\275n\301\250\276\334^\317\276P\270\200\275lr\n>\266m\036\277\354M\274\277d\272\006\300;\330e\27784\014\277\367\363\220\277\225Y\222\277\274z9\276\3278\366>\034\261\350\276\316\211\233\276\306\337\317\276N\250\251\277\256@\244\277\304\0137?\221u\232?L\'\252?@;\201\276B5\242\277\257\304\313\277\357\277\246\277;.\255\276\250\3542\277\340\226\245=(g\333\275\247\334|\277\004\263\214\277~\226!?\300\213\315=\320{\261?Z\336\372?\016) @+\014=?k\243=?\367\332\311?\000\354\266?\017\314\271?\370\037\366?\334l\235\277\240P\006\276\024\214D\276\276OX?.\"\004@\231\340\357?v\243\025@\204\367\020@\246\010\274?\363\0221?\320\311\221?\310\237\022?`T2?\236J\306?$j\020?V\301\005?\260AH?\352nA\276|\301\361>\367\303\230\276-\0356\276\334\013\305>a\257~\276>.\223\275&T\000\275\247\303\272\276\264\357B\277\210\360\267=\005\005\324\276\227]y\276\250\346g\277!\300t\277\320\312l\277n\203\t\277\234.=\277\354\026\252\275\302q.?\002\005\214?\035c\360?B\363\337?\250G@@\2625/@(\306>@>2\315?@\233\236?\177B\261?\200\374\361>\014St?\327\035\277\277A\231z\277Va\017\277|\206/\277\334+!\276 \013\026?\340k\307>f\254\003\277\234\201\257>\002$\262=\226\305I\277\266\302\237\277D\322U\277\000\203\207\273\004Y\353\276\232>u\277V5_\27766\257\277Qd\022\277v?\224\277\220}\224=2j\314\276\324\032m\277\016\303\331\277\217\0021?\210\335\372=JL\022?\'\336\323>P?\304=T-N?L\213`?\376\324\214\277`\310\251\277\270o\033\277\234\3679\277dM\035\276\331,\005\277\342P\032?\234;\220?\376z\221?\230\213\372\275\303\031;?M\203<?\205\202v?fk\312?\004\006\351?\260w\266?\370;x>\227[\326\2778{\363\277@\236\221\277<LR>\230\205\203\276[\005r?k\022\222?K\336y?\005\356\007?\3347\277\275\302a\036>h\246\227=\200\335\252>RXt?\345\001f?\016L\310?\236n\332?\tu\211?\300\254\274?\243\202\203?\314\270\005? \254c\277\302g\022\277\036\007j\276\203D\031\277w/\334\2764\227\246\2776I\031\300\260\r\367\277b@\301\277$\036\035\277SO\366\276/ST\277\031n\336\276\244\3074\275\255\216\205\277\272c\307\277\263\026\376\276D\002\341\276_\323\003\277~\220\275>\232\t\373\276\316:\313\276\300\'\206\275\177\305N\277\242\351\021\277c;\037\277\231\232)\277>3\200\276>7\205\277:C\267\276@\203\t=\016\243\372>K:\207?\316\235.?\344\001\002>\252\224\035>_\323$?\314\247\333>\004\317\355>\351\2643>rg\235\275\277\330\252=&\021\314\275\302^\316==u\034\277\267\363!\277;s\301\276\210\0055?\334\276\336>\224\357\007?\313n^?\321z\312\276\2713\001\277\303\216O\277r\214\004\277\204\315s\277\031i\200\277\240C\336\2771\315\241\277\226}R\277\253\006\310>\300\376P>\322H\005\277,\000\224\276\266B\374\276@\342\342\275\033(x\276k\177\034>\024\032\353\275z%.\277\377\'\221\277\300Q\325\277\310\323\320\277\243\273\267\277\230\007\301\276@Qj>\200\333\221\274\027Pw>@\243\\<\315\221O\276&\244\235\276\271\374\"\277\274\216c\2770\212\343\276 I\002\274\022\211\206>\357Yb?-\261R?h\013s\275\313\232/\277\337\"E\277\340O\203\277\250\n\235\277\327\243\217\277#\222\'\277h\n\202\275k\357A?\366.\332\276c\246\373\277\322\315\213\277\242@\212\277b\033\260\277R\323\310\277\326\306+\277\017[D\277\225y\233\277/\275W\277\222\2763>:\306\017\277|\352\233\277J\030\323\277\014K\234\277\310-\010\277@\312\325<\354\020\003\277\323\263\023\277\210\n|\276\340\315\013\2762\247f\277\204\243\245\277\000\022\304>\202\343\023?\330\252,\276\013k\221\277\r\241\215\277\300)\265\275\303K\344\276\324\256\037>\311\200$>\213PW?\250\006H?\002w\327\2762\2422\277\317\233T\277k\323\'\277(\324\363\275\254\252\305\275\013\320\027\277;\'A\2774e\355\276R\027\177\277\331`\264\277{N\265\276\307\037\254\276OS\177\276\242<\353>\322\250\232>bFu\276\372\274\206>S~\275\276\306s\017\277We\034\277x7Y>\324\241\244=\265\"\314\2752t\225\277\001\353\262\277\010p\335\277s\026(\277\010\022\220?\022\261\222?\030\177\230?\366q\210?\016\213\322>\214\350\300>\006\376\220=\214\300\004>NR_?\3400*\274\006Z\257\276|i`\277\254\303\334\277\300\234\016\276\006w\272>\254b\363>B\351g\276\333\033\005>Fr\310\2765\347\033\277A\t\275\276\236\367\010?\342\017k?\247\331\255?\235p\325?\340[\322>\323\3166?\220^\200?h\216o>.o-?(>\014\276>\304M?b\013\214?r\t\251?M\026\375?\004G\031@E\250\232\276\360\360o=0\212\255\276\371*<\276\314\217\023\277\330\223%\276\032\350\026?9|\004?\036\255\034>EP\307>\375\014\272?r=\333>z\304u?/r\246?\224\315\217?\021\226\207?\274g\321>\222\217$?\304\245K\277\347\263S\277\320\335J?a\345\037?\2004\255>\264\240h?\267\307\234\276\034\3530\277\240\336P=\264\345\262\275yw\262\276RS\016?,\205\310?WT\343?\222\222\263?\341\374\347?\327\364\272?\004\254\265?\220aS?w\255=?\222w\264?\014\246\201?V\024\207?%\001\270?\351;\376>xh\205=\256\242\221\277\2058_\277T\225\022\2766\265\234\276\370\241\352\275\321\373\375\276\211\307\035\276%\357\205\277\002\004+\277X\343\365\276\244\"\017\277\375\245\375\276\334\376\014\277\260\017\021>\266\023\271>O\273\225?3\321\205\277\320\026\'>\344\024\027\277\030\252\211\277\230\316\233>\34471=\020\344\037\276\023*6??;\202>Y\312;?8\370k?=w\362>\320\014\214?\260\210\242=>5m\276tz\326\276\232~O\277\230\\C\277 \'\355\274\272\207\251\275\001\330\250>W\033/?\320\374\030?b\031\355>\355~\220>pR\352\274\032\317J>~+\250>v\302\024>\257\267\222>\277\214\000>I\304\"\277\336,\316\276\266\003#\277\324\277\312\276\276T\304\276\244\361\361\274\262\347{>\\\215\032?U\317&\277v4\332\275\353\330\016?\252\246\364>`\000\237>\247\352\242>\3329\327?\\\214\252?\032\274\320?\332f\360?g+\330?\345}\342?Bi\223?\003\231\312?\353\336a?\254\000\347=\'\032\010\277\250eX\276\334Na\277%<a\277d\275\315\277L\331M;\256\346\203>`\245/?Q\251#?\240\276@\275\226C4\277\032\3527\276\t\004\021\277ZC\023?z\256D>\270S\243\274\263X\374=\323}\324\275\024\341/?\311\247\000?$\327\224? \034\225?\037g\333?\362\023\261?\273\244\362?\324\014\t?\3523\026?\356\324\204?\304G\177?\375D\362=\230\r)?\205b,?\316\275\213?\227\031\255?\326\336\343>\256(\211>\330\252\272>\007\233\017?R(\212>\240\000/?\354\236.\276zA\264=3\243D\276\264\224\001\276\030\344\344\276\034\214I\276\210\200w\276\206e\034>\256\201F?a\342\317?~d\001?\250P\"?0vE?\034\324q>\274A\343\276\220|\215=.\004H?J\263\256\2760\330\376\274\010\326\r>\036\322o?\305\\\202?\204\314 ?\212]\264>\242\370\265>REu\277\261\245\216\277\014\000\243\277\220xB\277\022=w\277\003\313\330\276Z\354\213\276\000\300\242:\271\025L\277sS^\277 N\301\2772\342\364\276\000\345\320?\212\237\266?L\001\216?\361\312\207?bE\337?\\#\247?\264\225x\276\035+.\276\215cE?\2360\313>gP\335>\302\020\035\277\344\367\035?4\373\227\276\027\277\237>\264\301\202>\004\354\215?\332\3072?\236\337\367>TV\263>\316\303P?\346\271\264?\005\244\201?\232\204\356?~\005n?\332\216\237?\302\337\357?(TE?\222iF?\276(C?\260\235\213?\252\355\264>\324\210\346>vs=?j\223\200\277\340\232\224\277\2165\237\277\031l\276\277\311\t\257\277o\326\240\277eBc\277\230\266\346\275\352P\023\277\346\016 \276\036W\344\275\320\251\203\277KS\304\276`\367\006<\343\375D\277 \275c=\316v\336>\343\374W?\3165u?\367\305\210?\214\330\307?\261\350X?\376\3143?`\004R?\213\370[?\244\240O?\037\265\212>mr\302?\032\300\240?\204$\250>\034=\322>\256+m?\311\206t?1\215\324?Vhe?\030#\004>\000\350\013=\226\264o?v\203\230\276<1\236\276\334\177e=\264Xb?\306\273\021?\300\235\027?\030\030\224?\334\215\322?\210\223\217?\242f\345?\354\214\202?\212\223\200?V!\212?\202y0?\030\273\315=\316CG\276\321\0169?\242.\004?\211\274\360>\326\360;\276-\246\367=\337\3400>\370\020\361\276\341\020.\277@\245\"\276\212\243\223\277\016\224&\300Y\301B\300AE\311\277\037\351\346\277`\256\257\277\252\212\244\277\277;\007\300x\371/\300\264\335.\300\201^.\300\310\'\010\300\304\261\\\277ty\'\277Nd\226\277j\372\031\277k\267\204\277$\316\234\277\317zk\277?;\020\277gw\212\277\340\255\370<\310\334\207\276\226d\037>\355\'7\277V\371\372\276,\034D\277\000\321\007=\247\247\323\275\364\373\316\276#W6?\230\277\373?\327\201\271?\304\265=?\234\364\013\276\362\204S\277\312d\264\277\255@\262\277\314d\207\276\273\\y>\344\325O?@y\273<\366J\355>\220\371G>\2337^\277iBE\277\224\312\204\277\344\301\362\276\333\214*?\204\270\'?^\331>?\350\240\022>D\341\314>t\265\273\276])\027\277\302\226!\277\361?G?\374\217U?X\032\250?`\332\212?\213\370;? \334\262>=\273\002?\242\355\027>=]M>\200\003\037>\232y\022?*Ez>\217<\213\277\004\362`\276T\034}\277\352\014w\274\014\352\267\274lK\256>b\240\002\277\350\205V\276\201-v\277\373V\317\276c\271\205\277=\275J\277\271\003\242\277\2443\277\277_\035\346\277D\277\351\277X\253\233\277(\003\253\276r\032/\277\200\216\223>.\312.\277\266\010&\276\345\005\017\276P\360\026?|*\246\276\255\246\217\277\377\016\312\277\177\303\351\276P\220\276\276\376\300\006\276\261\213\202\2770\277\234\2752\273\250>:\354,>*r\253>\247\177\247?\200\265P\275\t\002O\276\276\270=?\020\233\234=^\332\002\276\246\212\021\277z\241\226>4S\265?\311\343\002@\022\033\210?b\343\276?\300\300\302<\302\350\251\276&Gh\277I\210\034\277\013\265\233\277`D\010=\346\244\376\276\310\001\342>\303\320X?p\375\004\276Z\374\325>\004D1\276I\"m\277\000\027\021\277\362\336\013\277\272*p\277F\027A\277@\004\254\277\253\r\330\277:\275\024\300N$:\300\223\003z\3001\277c\300\205\3508\300\306\325\315\277\360x\213\277\302\242\263\277-\236\034\277\305\257\270?\250\010(?\020\215\271\275\367\200.?\266\215\357>C\367\243\276)N5?\021=\271>e\363\235\276+\216\205\276\030\n\256\276\342|,?\310Dw>\006\266\362\2761X\263\276\340\007\364>\031Qu>\006\001\267>\227\275\204>\210\022\233?\224\023\207>\2667\003?\016`\244?]\322\r?[$F?Y;\"\277\270\371c\277\370~\222\277\323\300\277\277\366\370^\277\260\277\233\277\346\272\212\277Z\372\333\276a\320\213\276c\352I\276\332\347\302>\266\030\202>\212!/?\203\001A?\264@\030?h\354\240\2768\363!\277\260kO>o7C>\n\3276\276v\210\014?6\000c>\312))>\234Z\004@\256\254\226?\336\313\202?\240\205\255?\371\353\237?r\034\216\276d\\\210\276\262\323H\277)H\257\276\371\022\335\276r\247\204?v2\276>\020\000U\276o\376V\276\206\250\316\277\017V\346\277Jv\330\277\027\361=\277\326\202\357\277\000l\310\2726\006\353>V8\001?{4\251>\270+;>NI\242?\323\n\203?\351~\343>H\324\035?\001C\245>.\247D\277v\367C\277IG-\277\\\247\241\276\231\000)?\037O\210?\242\355\211?\2461\327?&k\023@\270X\205?\244o\370?_\313\025@\340$,=\240\257+?\342$\345>FzU\276\317\003\325\276\326\214\231>\232\037\026?\357o\256?\272CL?\256[\237?\374?\333?\010F\272?\362\240\202?\3303\321?\007o\321?\rP\324?\2225\030@h\200\001@\310w\017?\362\312`>\354\272\035\276\220\314\330\276\360\027\021\276\205\235\007\277\355\022o\2775\263\030?l\255o\276\324\370\360\276\275\035\216\277\001v5\277/\n@\277\224\022U>\002\3741?@1<\274&)\034>\322\246\034?E\342\327?\202\267\254?\221u\303?&\263\323?\343\223t?\010\033\216?\362\025\354>\300\271\241>\346W\016?\363\022M?;;Q?\371\\\312>\365:!?\212f\001?Xa\220>\224GE\276E\275S\277\027\254\322\276~ e>\031-\020\300\324\036\210\277\016\263\025\300F\366\003\300\243\252\'\300?\026\024\300qG\020\300\217\216\031\300L\316Y\277\nD\010\277^w\313\277\262\303\253\276\325\373\347\276\330\366]\277Wk-\277\200i\000\276\014\021[>\310%\301=\360L)\277\022\246\242\277=\017!\277X\242I\275\264\230\346\275\306c\215>tP\234=R\242\'>\275\322\260?\033\347 ?\352\340\211>\241;\211?\016 \252?\241\3627?\017+\007?\350\210\322=]>\205=yG\330>c\237\232?~\337\314?TBw?p\203i\275G\327\004?\376\210^?\2736\274?\244\367\017@\013\215\370?\022\310\026@\377K\025@\034\245\031@_k\"\276\272\206#>\372\220\250=$o\215\276\n\300\237=+\004\332\275\324F@>Q\235\211>\277\017\330\276\240\374X<`z\310\275\032\371\221\276&|0>U\235\327>4}\217\275\365\303|\275\246\0340?\307\016X?\232v\325>\026`\301\276`\274\311\274=h\336>\210\245\'?\377\362\004?e\237\274?\340\214l?\321A\222?Sh\006?m\327.?\000*\021;7\"\236>b\005\005?\374\210\244>PWY>\333\361\017?\016.\205?\270rm?\004|u\276\372\274\025?n\216D?X\301]\275x0\224\275\234\014\344\276rl\341>p\0352>\340\207>\2754Fn\277\007\331\301\276\277\037\004?q!\202?\376\312\264?\323)\237?p\223U>|\333\207>\206\220\251>\260\255P?\030\030F?\250\313/?0\215\354>\330$\222\275\020:9>P\367\022\277\212\262\361\276\240c7=\236\332c>16\276\276$\003\216\276#\366\016?Xc\347\275\t\034\r\276\337\003\240>]\t\224\2763\277\244\277\342$\361\277L\313\265\277\377\265\330\277eg\300\277P\334\023=\302;\303=\300\275\002?\315\260\222?\334\335;?\026c\323>\250\270\347>\2422@?\2643\214?c\377\223?g1\215?\300\377\240?\250\377\007@\305\334\007@Q#\212?\200\006|<<\366\242<\336\0360?Z\320\242?B\250x=\021\004\026\2772\007\210\277\307m>\277\260\233\343\277\340N\206\277\226)V\277|h\013\276\221\246;\275\236\214\264\276\014\343\273\275\341\271\350>B\270\201\277\023\0256\277f\320z\277\317\367T\277\300\303\'\277\343\350\002?\2268\n?\314u\036?\256\021\334>\010\274\226=\253T\023\277\000\346\224\277!jF?6\337\341?\344|\233?\237#\264?\032{\365>*\255\000@\272k#?,t\315>\234\362\352?\364\347\355?\236n\230?;\247;?\270nm?@\270\276=\330\t\177\276\245A\200\276\026\005G\277\tA?\277\366{G\277\274\202\222=\031\344\233\275\362h=>\246\256X?\"\370,?s\317\345>\204\027\220\276\365\336\347>\245\036\252>.k\215>\030\322\341<z\0255\276\034\233 =d3\'?\200\273\214<L\023\361=\232\037\022=1\026\313>~\277\222?\300N\006@\356\377\320?R6\226?KF\347?j\247\377?\303\342\211?\201\326\223?\204\355\312>\357\034\332>\037\027B\277\232J!\277\223\334\317>\237\014\020?\203E;?\3562q?&\313\236\276\227\314v\276<\023\213=\342\362\220=\352\346\334<34\035\2753\277\203\277\200\201\311<\374\331\200?\013\246\200?,\337z?L\003\323?\360\222K?@iN?\030]\216?%\034\210?\266L\255>\364\266\025?\214\\w>I-\204?\016N\314>\353\355\372\276o7|\276\304\360\310\2764\232\022=\336\360d?\303\036\222?\332m\254?\246\023\241?2\n\243?\366\3031?\006\222?>\265\237\225?\217\016c?\245jl?\010\025r>\244\006\r?TB\r?Pe\225>\272\372\232\276\000\232\277;\310\3327\275\207\265<?\262\301k?d\302\034?w.&?\233\350??lZ\036?\366\260c\277\307\004\220\277\210s\353\277l\321\237\277\245\010\235\277\200\332\347=.\245\332=^\213\024=\364\211l?x\303]?O\260Q?\343_\223?Q\245\314?\024\215\010?P\r?=\256\004%>\202\340\236>*\301\340\276>\250\276\275f\205\273?\237\212\335?\017\251l?\217\233\261>w\375\362>\365\270\212?\376\262\313>\352\033T?\333#\352>\220j:?\344\020\306?NB\257?)\334\266?\300\344\335=\336\234:>\ne\177>A<<?/\365\276?d\310\257?\336&\212?\211\'\201?\026\013\252>\213\377\275>\316\004\307> j:\277@\245\217\2779\211\233\277\310M\350\275\3674\220?\315\345f?o\033\272>\307y\237?0\006\340\275\345;\340>\363\214\221?Z\361\025?\234\022\267>\036\266h?h\322\250?\273#\253?\261\021\216?\200Wb?Y:-?\006?c?\177*\t?\200\365\020>B\373\244?\347uq?\010\016Q\277w\tG\277\001\024G\277\305\003B\277\331\240~\276\204hc>\005`\372=\2270\232\275\006\177\260>H^D\275[\027j\277\364\366M\277\030\304~\277\010&\300=\202\007\303>\020\204\031\276\361*\253>\220\177d?}U\253?\352\3030?!\326\025\277\036.U\276Km\332\276a\203\212\277\277%\202?<\343d?4`Z>\375tJ\276\206\031 \276\254\226\222\275o(;\277p\010H>\316\232@\276!\276\217=xw\364>3z\253\276sD\203?\367D\310?\261\300\341?\300\335\034@\225\255\t@\265!\251?`\326\261?\304nc?,\020\\\276\001\254\362\275\364\304\307\276|\300\033=d\241\266>\3355F?\374e\014>\366\205[>\220i#\276\252D?\276e\025\226\277\356l\315\277\204~\177\277\346\375i\277\3724\316\277\030Q\007\300\372\262\324\277\\\272\'\277Y\2528\277\311C\025\277\333\201\266\276<~\271\276\221\265\227\277\226A\026\277\256\326k\277\254Z\226\277\226\265\272\277*F&\277\0017\226?\334\225Q?+U\276>\302w\217\277\340\264\235<^\264\022?N\270\210?\240\377&?\310\360h?/L\207?\240\035\232?\374\315\254?\277\201\307?f>\241?\000 \033\274<eM\277\330\264\234\277\322\223\321\277\036\"\314\277k\216\332\277\200\205\366\273\016\264\207<\340=\373<H\254\346>\327\230\346\277\006\304\007\277\200\341M\273}(\310\275\215\344R\277\000d6\273\222.\t?\202\260\007\276\016i&\277\030~\326\276\316\203+?\004\246Y\276\036\364\n?U\376\373\276\306\315\314\276d\330\016\277\016\233]\277\352\017\227\276\213\350\220\276\364\250~\275\002O\023\276\372P\276\276\340\247\023\276f\333\313\276\255\362\206\273\253\217<\274\031\271\242>e\031\257\276h\'\351\276p\254\361\275\302\312G>\247\360\220?\316\021\223\277:\'C\277vx\237\277WQ\307\277\276\376\243\277\305\274\007\300\006\335\376\277\251\334V\277\352k\207\277`\366\275>\'\334x?\326\266\255?\362R\000@y\370\352?H\321\270>(\312D?J\242\201\277\327\224.\277\371\315\026\277\260j\227\277\376\263\366\276`\356\207\277\335\212G\277n\270\220\277\225k\016\277pB\014>.^\240\277\221\225\241\277\307\223\213\277\326L\260\276\310\025\245= \346b>\326\036\352>x\357\016?\251;\006?\250r\017?\226\031O?d\357\032?\262\216\230\276\224\235\241\277\241\255\202?M\207\210?\337\267\"?\0020*?R\304\266\276i6\246\276\234\342\007\277N53>[\371\004\277\206\307G\276\036\364\211>\3407|\274\276\301C\276A}\222\276\314\206\023\276\326\362~>\313\260@?\003\347C?\341\271\277?W\214\002@\026\t\227?\260\273\252?\273[\342?\210\027k?\370\214~\275p\277\265<\265\020\017?\270^S?|OS?SB\217?(\241\227?\247\257\252?\204\251z>`\306\277\275\363)|?t\251/?E;\025?\352Ew?\340\253\215?\036<\250?\243\205\235?x\250i\277I\376\313\277\2505\341\277\032C\346\277\274\037\216\277\374\036+\277`>\017\276\036\207m?\010\357\334\275h\270\342>rt\010>+\242z\276D\ts\276\327\222\227\277z\214\220\277\352\277D\277,N\"\277\014\t\351\276h_z\277h\362\013\300\304S\314\276]0\224>P\342\033>\253|t?\225\210\310>\216\030\013>Z\326\261?\"\030y?^}\361\276\006\303\211\275\372\021M\277\235\370n?\304V\336=\006D\204?\300nJ>\030\322V\275Fe\007?\336<B>\317jN\276\335-\224\276Z\313\367\276A\003L\2778\'\277\277\350NI\276\025\222\215\277\020\376\226\277\001\003r\277+aC\277!\316\027\277\346\224z\277y,+\277p)\237\276\000\306a:\025\321\311\276\255\374S\276l\266P@\330h@@\'\350]@\214\315t@R\362C@\331\215H@K\333\022@\"\327\366?\277\246\n@0Y\237?\235o\205?\257U\'?\277\317\275\276\322`\n\277\251,\274\277h\273\331\276.\211\335\2769Y\021\277`[\350<$\334\006\277\375\236\251>\351\307\273?\350\021\266?\366 \207?R\001\221\277|\213\202\2773\365\246\277\207\036\024\277\200F\240\276>9A\276\266\300t\276\001\t\355\2758e\306\276\202\2711>\322\244\021\277\350\361\265=\273\032\250\276\031\\\003?s\217\372>\240\201\335=t$\262\274L\010\233?\217\270\201?\251>Y?\261\004x?)\310E?2X2?\356B\350\276\216Wk\277\260q\364\275\234\254\250<\371&\272\2764\310x\277?\207\373\277v\241\362\277w\303\010\3002\345\253\277\256\342\216\277\310\2156\277\265\204K?\310\321\361>\340\334\017\276\333v!\277\335\323q\276p\027\315\274j\033-\277\265O\203\277\224oK>\350`m>\370l\224\275\307P>\277$\325Q\277]\316\003\277$\312\177\277#%!\277\211\206\230>\222\340u>\007)\017?\214W\005\277(\242\374>{x\031?p)O?BE\"?R\224\275?,\004\220?\037\277L?~!<?N\222T\277\276\026N\277\224!O\277\037\223_\277<\317V\277\345B+\277\207\343V\277q\351(\277\240\032\201>u\r\304\2764a\214\277\274\245\345\277\316\327\234\276\262m\013\277\254\033\374=\214CL?\307\331U?\003\263\362>\360\t\331=\210\343\213\276|\035\214>@\242B?(,\260=VNj\277\326gE\276\345\322\233\277\254\214\007>\252\241\030\277\034\243l\277\314\244S\277\014\371k\277n\237\225\276\t4\236\276D\032p\277\300\314l<2\354\260>\240\0164=\3649\263>\010=\252=\325\333\262\276\266\354\311\277t\340\001\277\202\363\361\276)2N\2760\264\204\274\236#\215<\370`W?:\273\374>\020]B\277\330\273!\277\222\341\267\276\252P`\276\325\351\322>)\254O?$iM?\323-F?\203S\035?y\272\314\277\2705\265=.IC?h=\302?\024\245\026?hw?\277_X\205\277\014L+\277\231F\020?\2453~?\371\235W?l\211\272?\205\023\254?P\017\320?D\n\257?\344\224M?\202\231q?\264\010\002@@\320\263?\304\233\301?\365\032K?\340\341\247\274H\212\220\275\017q\220=\330\007\027?Xb\005=\22145?\004I\244?\345\030%?\316\024\272?\377g\352?p>F?YA\202?\206it?\330\314~\276\262\237\010?fe\244>~2\252\277\327\025\267\277\210\367V\276 \243\000\277\303\351T\276\177\016\241\276ma\211>\250\177g?M\305\252?\264;J?\350W1\275\035=\322?\034\014\335?\322\235\000@r\223\255?Q<\234?\306d\341?||\001@b\210\246?\357D\024?\301\225\210>Y\264\235>_1\236\276\250o\006?2Q\327>\254\231\262>\000\275f>-\2751\276y\264x>\335)v>8bp>J\245\245\276^K\242\277\313\312/\277>\243\032\276\255>\225>\325\032\003>\256\354\017\275i\363k>a\243\203>l\365\237\277\261\246\224\277\200A\221\277,\216\226\277G\355\210\276x\316\037\275\314\252\254\276M8u\277\224\213Z>\241\353}>\312 \204?fI\204?v%f?\0009\241<\3139\004?V\033\333>\304x\t?\034\306\216?\340K\341<Y\265\264\276\300\256(\277\344\265-\277Clr\277\330\351-\275\227%Z\277\311\0144\277`\304N\277\024R\302\277\224\270\363\277\373\324F\2778`h\277\300K#\276\343\354\022?p\327T?T\254,>h[\261>\212N\026\277>y\017\277\2648$\277\013s\246\277\242\033\200\277\372\033\315\276\374\244\317\275\234\3115\277\245\211\354\2765\376\275\277\247\217\214\277{d\205\276\224]]\277\231\003\253\276\302\3441\277\270\245\224=:\030A\277\2347>\277;\302M\276L\022\206\276\240J\215=\200[\342\276\3669\217\2770\267\305=\013b\203?\307m\300?\272\247\214?\032Y5?NH\244?\020\257/@\017\237\245?\334P(\277Y\234+\277\006\323T\2764o\031>\360\031h?z7\241>\261\247\240>P\336\321>\014\017c\276\374IY=\256\300\342=\237\027\217\276\340\312\033\276\232\nG\276\264\217\256\276\362M3\277\024l\242\276\251Y\240\276\270=T=_r\226\276\302\311\030\277\240 \227\276\210\255\021?\341v\274\276\267\340\235\276\307\n\374>r\273\030?\026\212z?O~P?\367\340\223?KL\240?\010\325\221>\010\216\177\276\276Qb>\020L(\276\022p\201>\320K\350\274\272h+?\000\340\356<\235r\245<\340-\363=\036W6\277\263\276\325\276\254\226\006>byg\2764,\202?\177T{?\204\222a?\351\233\000?\354x7?~r\263?a5\257?l\345\342?0\240.>\200\002\323\276\033\253h?\246{\003?R\276\321>$\256\013\277L\021\203\277.\\U\277$hE\277$\221k\277\000s\025?z\271\274>\313t\250\276\032\001\222\276\367\236\034\277\024\350\341\276` \033\277\210nV\276VY$?v\322\025@trz?\356\251f\277\245\347\251\277\2454\373\277H\302\335\277\316*\006\300$;\260\277\230\267\004\300\2322\003\300\330/\311\277\320\322\252\277`\225=\277w\325\352\276\026z\360> $w=\005B\251\276Lp:\277w[\206\277g\314a\277\257\343\006\277=\333\207\276\247IJ>\344\036=>,\306\021?\247\242\352\276\2008Y\275\233\266\243\277?\"\307\277\001\207\223\277dey\2778\224\352>@$l?\0303\177>y\243\217>\2341\242\275\"\335\374\2767\200\274>\272O\366=\001\242\022\276F\323\021?mZ\215>\322\305\367>LV\245=\367\373\320\276\206\252\365\276\234\335\216\276\310\212\007?\264\000\n\300P\"M\277\217\353\210\277\200\362\265<\226\257H>n\364)?\200&\322?ebL?\225\317\251?\036\307\323?\252\222\214?:\317r?\316\365\202>\250\n\224\275\266+\315>\246\320\302>\013\334\\?\257\005\303?\302.\361?\354\324\321\276\342\177\224\277\2762\360\277\346\321\372\277\"\307\037\300FzO\276\022E1\277\335\363\302\276\376\237\317\276[\375$\276\014\332\240\276\032\336\336\275P\256\252\274C\277/?\033\373)?\304&\274\275~\333\235\277\231\031\216\277g=\246\277v\325\300\277\034^\031>\342+5?\224\327\253>\340X&?(\327\310>[\302\227>\030\356x\276\235M\231?rA\343?\342\345\267?\002\312\223?\244\r\235?\212A\226?\320n\310?\235\302\313?6Qt?\224\242\215?LH\346\276SL\244\276n\347q\277\312(\310\276\273h\032\276\246\325\335\276\360\231\231\277<(\342\276\256d)\276\202#\033?5\213\327>\313\2619>\373%\016\276\2468\247>.\330\207>\2200<?\345\340$>\363`\241\276\036\264T\276@B\372>(\237\254>\306\025\264>0\254R?\357(D?\320#\014>\324\2419\275M8\330\275\002 \250\276\316\324f\277\n\376\227\277\210\\\256\277\274U/\277X\255\314=F\371J\276F\255v\276V#\316>o\305\027?F\213\223\276$\027\323\276\020I\326\275N\321\374\277\325HK\277\016\024|\277\310u\213\277\354A0>\324\340\235>P\214/=\336\002\023\277\226\234v\277x\315\205\277\317\364z\277\241f\353\277\001-s\277=\272\226\277\020\323\235\277`\214{\277H\035H\2764\352\241\277T&2\300L\247B\300o \005\300[\324\332\277Y\363\206\277\204\241\324\277\'\364\027@\226G\266?(4\022>\003\324 \277\251\333\001\277\320\0226\275& U\277V\032\347\276H\3727=\206T\037\277\"J\r\276\324\250i\277\030\013[\277\205\370\222\277\370\264\263\277\2571N\277\277w\213\277\264\304b\277N\253\201\277 a\214=\321\316g>\201\035\250>\312\337\371>\250\230(>\037\265\003?r[B?@\352!\274\244\005L\277\222\216\307\277\344\3533\300\324\n\326\277\346Q\274\277\346\243\236\277\262w\341\277 n\022\277\330i\305\277\320\031\350\275\235\300w>\262\035\221>6\'\302\276\224\244\247\276\372\3455\276\316\313\024?\234\347\304>\312\221^\276\212\264\017\277\214\333\332>\343\241\330>Z\324\220>\366At\277\301\316\276\276\350Q\322\275Z9*\277Xv\373\2757\271<\277\310\010\272\276\0224\356>\326\034\241=\031\234O?i\001\333>\342\224\340\275\274\377b\277\257`\254\2772\231\275\277\235\202\254\277\000s\306\277\213\266\247\277\266o\215\277\242\032\177\277\324:\220\276\215g\213>\246\312\211\275\2043\255=K-\222\276\316\315/\277\302\201f\276b\026\004?k\304<?8\014l>n]\201\277V\020 \300@\317#\300\227\327\347\277v~\034\300\010X\n\300{\316\"\277\337Y\316\276\226\2516\277@\262\220\274\215\263\005\275\341\257\242\275\360\333f<*Y=>(\030\035\277nWZ>\240\244\345>+\305\222\277#\303}\277\217\206\242\277\370/\017\276\305H\033>JP\004\277\222#\262\2758^>?\033\201\243?:\245\261>8a)\276&\242\253?\314z\254>6X\036\277\240\022\272<L\014\265<\352\326\203>\311\005\357>\016\004V?C\354\\?\203K\035?\'\2472?O\242i?\203\236\356>\r\225\317>F:\203?\016\200X?G\276\340\276\376\035X\277\213\203\001\277\244\266O\277X{\250\277\030v\261\277rtd\277\304\337$\277\233\366\312\276\232\220\337\277\2009\256\275\013\326\311>\370\030\014\275\\\234\231\275z\033\270>\367\266\322>\260q\257>\212\224W\277\375\245I\277\214\353z\277\220z\215=\006\354\350>\330\r\203?\367\035\231?\227\032q?\346\353\330?\340\2646@h\372\323?6\205\342? \370\004@\254\203\336?\375\263\316?\207\230\327?\326\224Q?M\351\311>\335\0248?\003\302\230?gn\304?B\212\264?\356T\033?H\236\211?2\344\313?x\014(?\314\224\274\275\033\337\217\276\255\254*?\254\366\306>\036\016\344=;\033\022?\3763\242?BQ\027?\022j\335>@\216;>\266|\365>\014\375\022?\331Hb?\005\311]?\320G*>\252\266e>m\351y?\021\032\014@\202\206!@\230\\\214?ujU?G3o?n\376q?\240\030\206?4\205T?)\247$?\206\236\022?\370S`?\312\024A>\252\365f\277\\\356\341\277\002k\314\277 \232\017\277\226#\310\276\322\344\370\276R\005\234\276\332\313\014\277\020p\023\276>\201\241\276\236\365\236\277\004l\300\277\212\357\277\277\373\273\301\277\236\003\030\300\336\'\376\2773\237\244\277\210^\305\2774\350\372\277\202#\257\277\2533,\277PR\356\276H\355\305\275\345\330x>\210\233\211\276\340\217\333\273\354\343%?\014\003\203=\323\212\267>\030\245+\277X\355l\277\313\362j\277h\212\205\275\336\374\220\276\224|\367>\234\377\244\275tx\250\276\227p\315\276\270\305\202\277\\w\224\277`1\331\275\"\275\371>\242\031\362?A\323R?\325y\r?\224\227\035>\330\220\005?<\036T>\332o\207>\337\222\375\276\207Y\021\277n\300\263>\230\374O?\210o{\275KT\214?\021\232\376>\330\216$>\276\004\234>\2527\205?i\017^?\323E\371>\235\004\341>\272\231\206?\341\031{?\232\206\004?:\2104?\344\276\202?Ir\223>\264\270\323\275\356]l\277\326\025\215\277~\213\205\277\332\321\226\277\345b\205\277\\\024\201\277\004\305\225\277\226\020,\277\344\366\277\276\203\205\230\276\254Yi>Pv\'\276w\370\032\277\354\370\036\277`h5\275#\006\214?\303\276[?\337n0?%\372\231?m8\256?\320wm><\244\001?\342\016s?d\322\202>\345%\021\277H\0038\277fd\253\276\\{\266=ny\302\276\202\320\317\2756jb?\340\234\353<\330GF\276\250\335\230=\335\220\231\276\2068]\276\236\241\367\276\260\242^\275\\\r\\?\304\227\365>J\337\213>9\003\034?\333\342\274\276\300\374\003\275a)G=\006\301G>@\032|>\006]\225?\363\232H?\320\314\201=X\243\222\277N\246\341\276\200J\240\273\350\350\006<M[\340>H\257\031? \226<\277\312\340\252\277\300\004W=\367\2772\277Z\2770\277\320\3360\275\325=6\277\224rS\2760\306\312\276\372\357\311=W~\215?W\267\274?+\035\334?^\315\340?\240\2367@V\244/@:\213\217\274b\346\025?>\270\255>:1v>\252P\327?3\241\217?\3464\345>\320\230\363=\312*\233?\\`\275?\345\326\256?\250\274\347?\007}\204?27\326?G\005\002@\2647,?\204\010b\276\267l\024?$\245\247\275$\252\305>\254\324\035?\234\323\027?\226<W?\304\335z?\365\274\335>\24698?\000)\341>`\014\035?z \213>\230\234\010>\004k\333>8i\275?t\307\252?\260@a?@ex=\213W\010?.\364A?*K\021?V\360u\277\214\340p\276L\262\236?\226\r7>\326\3707?\246\220\307?\311\213\266?*y\224?q\215~?\247\326\356>\353\030\270\276\231vW\277\350\2559\277\336\177\361\277Z\203\004\300\360A\225\277{\272O\277\032\010\233\277\036X9\277\222\312l\277\240\020\225\276Pjl\2750\232\354\275\350\361r\2768\357\027=\271\370\345>J\0130>\371\336\201=|\t\037=$\025\274=\274{\364\275\360\202\312\276\215;\014\276G\214\227= \212Y?\033D\214?F\036\210?d\333\326?\n\270\002@\323\250\311?\0227\354>\324\366\">\340\177\346>x\334P>D\'\276>`4\301<1DK\277\200\370K>B\246\374=\325_q\276,\1776\277\213<\005\277B\207\273\276\350\001\277\276\241\366A\277\325\260\215\277\371\220\312\277\3625\254\277\262\366\365?b\245\307?\270[\241?\247\321U?);\255?\261\345\271?\006\335\270?\313s\021?\233+\204>\036\235\275=\207\273\201>\335\203w>\204\274\222?x\022\334?L8\245?p\004\032?\3460\201?\275^!?\207\313\316?\357\375\361?\367\302\232?d\320\255?\260\375\370?\204\310\030@~\341\\\277\266g\207>\242\007\230=\227G\214=>@\240>D)\343\275W5\374\276\324\202\253\276\226\337\005?\3536\247>t\306\001?n\251\262>\246zh?\354\321`>\243\274\233?iV\227>\310q\232>\244d\357>\030\205t?\240\177`?^4b?8X\317>\000\312\210\273\346\\>\277\3678-\277\000{M\275\325\362&?\206\t\231>\364\236Y?\371}H?@\212\310?6Oi?\202`=?LV\206?\374j\214?\030\346L>\\\363$>\037\356G=a\242\266>*\352\231\276\320~]?;\330+?\200\"\200\277\020\034\221\277\207\033\315\277<\215\\\277\310\342\235> \217Y<\344\343\305\277\025Hy\277\313q\246\277\177\245\262\277^4\346\277Y)X\277\211\334\007\300Qf\371\277\316\t8\277\373T1\277\023\333\253>C\232\236?hq\211?\003\314\261>>\266\243\275\005\336h\276\340\236g\275\315\034\320>\300\200\r;U\200\222\276\3640\201>h\245 \276\260\332\253=\327\321\030\276\201\201\013?\202\203|?b\304\240?\010A\233?\036\256\307?s\245\327?\231\213\306?\027\013\245?\303\313\262?1\336\021?\002\334l?P\340\300?\335\330T?\273pt?\034\216K>$\275\200>\274\221z\276D\271\316>\026\033X\277ny\207\277\336\242\034\277\266\376=\276\340\361\254\276\022\203\013\277\343\332\234\276\256]\275\276L\217\231\276\224\371{?K\334{?o\267z?\373+r?}3\214?:\267\267\276VI\212\276\005\250S> \336T\273\000\226O\276h\350\\=\374\236\254\276\3469\312\276\340\343\223\276\274*$>\204\347C?\\\342i>L\323\201=\346y%>s\0219\276\030k\252>mU\303?4h\327?`\212\313?\354r\323?\201\362D?\210^\373>t\253I? \025C?\030\237u?N4\010> \207\\?^8O?b\310\325> ,(?\203\356p?\222\242o?\';>?\250\272\213>2\305t?\300R\344>\356T3\277\266V\'\277a/u\277P~D\276\230\304q?8E\215?\020\247A?\306[\273?\256\276\254>\251J\204\276s\336A\277R\025\342\277\022*\263\277\276\n\260\277,\207u\277\375\350W\277P\007\r\277\020\020\007=\254p\332\275\234\327#?&T\001?\000\231\250\275\250\313\001?\200`x<|X\321>R@\021??\202\035\277!\257\005\300\031 \272\277-\020\326\277\215\322K\277\033\243\"\277\010r\315=\236\006\304\276{~\014\300\361 \202\277|d#\277\260Y\313\276/\032D\277\000=J\275s\017\024\277k\t\241\2779!\212\277\273\344>\277y\302@\277\246\305p\277,|\231\276\305\371\327\276\350Ow\277\220\317\340\277m\301\236\277\276X\203\277\256F\001@\340n,@\215\004>@e\3062@~Zs?z\212\233>\277}\333?j\215\014@c\310\255?\202\300\363?\3126\370?\256\307\323?B#\213?\276\327\310?\364Y\255?s\377 @\300k\244<\325}\017\277\004\261\314\276\223\224\321\276)\020\330\276\210\214\266=2\022j?\016\261\217?1\276\346>\304\331\265>h\006:\275\242\361\003\277\033\357X\277n\000J\277\036l\371\276\017=\222>:$\035?\372l\035?(\355\036=L\005\356\276\234\313\005\277r6\005\277\214\256A\277\367\347]\277n\000\276\277o\323\245\277Og\306\277\201\375\204\277 \320n\277\240s\240\276\2409\322=:\263\233>\027M\275\277\364\352\307\277\322\373\242\277\250+\275\277\364{8\277\214\377{\276\310\277\347\276\372\033\370>\311\271\007?\337\327\257\276\220y\300>\202\t}\276\337\014\035\277\366\330\301\277\347\352i\277@\274\346\277`\260:\277\300\256l\277\334\366\002\277\031l;?\200\270\330</\353\266>P\207\365\275F\327\357=:\321\340\276\346\257\010>\023\277\211\276\242\206D\277\350]\013\277\367\333\236\277\270B\034>\300\312\242\276\234\364`\276\024\234\201\2761\271k\276\000H~:\312\307\376>\345<\231\2766\245>\276\206\276T\276}@\235?\371V\247?\270te?PeK>fR\212\276\023\247q>\360\030b\277\246\016B\277\233Q\305>--\312>r\\\342>&\334\305?\206=\024@Y\261U?\250/\314\276k\241\246\277\260S\237\277\231\272G\277\204\2022\277\026y#\277\"U\277\277\241\021\224\277r\225q\277\223<\223\277\371|\202\277\032\321\324\277\332\253\267\277\326\261\000\300\211\203\315\277^\2070\277\354\226\026\277\212\032\313\277\355\370\340\277$\356\335\277\010\270s\277%\260p\277(Mu\276\020\310\236>\034\200=?xA^?\270\"\300?\224%E?\007\'\306?\322z\322?\2403^?t\2506>\216\3458?\342\345\377>\324\312\315>\004\235\272\275\254+\034\277~\350\264\2750\261><\034\377\342\276\245\376\020\277\002$\244\277\220\341#=\242E\330\276|\266\330\276\003\375\024\276\312\032\213\277\262}\233\277\201\323H\277\027\233\327\276\217hN\277WG\243\277\200?\366\273\307\273#?,\241W?\330lb>8\343/\276\373\333\227\276\270*_\277z*\245\277\216\203\351\277\240\003\301\277\322\005\n\3001\204\346\2770S\262\2777\361W\277\233\241~>\260<L?cU\307?.\345_?\305n\035?\250\027\304\275\014v\241\277\260t\230\277:\253\231\277\244\260\n\300\232z \300Z\246\324\277\362\270\225\277\'\257\264\2772u\304\277\330P\334\277\356\351\034\300k$\301\2779#b\277\350uP\277\'\232K\276\225\315\201\277\334\251\215\277Q\343\273\277\034\263\027@2\204d?\000w-\273\277X\213>\316\036P\277\325\323\177\277\214\177j\277\362:\304\277\332\271t\277\330\375\360\276{\367\255>\256\266)\277Ik>\277\367?\315\276JW\216\276(\300\300>\320\232\325\275\036K>>\031\232\256>N\263\023>\324\242\230=\204\025\250>\365\211L?\3449\\?\201\321\234\276\247?\223\276\324q\332\277\020\200\366\2770\313\230\277\356\252{\277\332\016\214\277\312S\006\277\341\301\226>\310\252\323>\330\014K\276D_\277=\241\261\334\276\246\226\377\276\024\000\361=\354\340\213\274q\334\261\2766}>\277\206Y_\277E!/\277\334\305\310>T\271?\2768\006\326<c\231J\276&O\266\277h#\006\276\316$B\276\345ja>&\334\244>\340L\261\274\331M\237>\'\345\002?&\255\377>\226R)?\227\000\277?\036\377\365?\203\032^?\360:\306\275\220\004M\276\364\251\340>\272\267\312\275\032\365l\276\304\244V\277\210=\'\276\320\363\213>0\235\300\274\010\253v\276\223\260\210\276\030\255\207\277\016\232\224>,\025-?0\315\026?\324\211!?\330\361\264?({\014?\0133`? \200\356>\244G\021?\202\255&?\254\347m>\341\t\001\277 \352L\277\212\260\243\277\322`\353\277@\334\275\277\306\305\\\277Or\361\276\220\324\213=\346\237e\2760AS\277\212\206D\277M\013 \277W\334\353>T\010\235\276`,\217==\037\036?\362\364\275>\222\272\350>\007\226*?\314f\223=06\261>\374\211\230\276$\034f?L\360d?x\215\n?D3\005?\324i\006\277\372\362\264\277\334[\216\277lB:\276\3229\"\277\022\342\310\277\345\'_\277\205\253!\277\036\313d>\336\260S\276\023wq\277 !\215\274a>z>\223\367\221?\200\r\244?KF\336>\224\350T?\327\303k?z\314J\276&\302\206>g%\337\276,@\230\275X\301\270\273\201$\305>f\344\'?\233\"\212\276\001\375|\276\206-i\2768U\034?\265!\033?\360tQ?\036\247d?\031]\032?;\n\222?\315\337}\275\320D+\277@\017\234>\377\356\037?\220<\205?.\343\272?\2003b?\007\363\000?\032j$\277\262\326\377\276\023\343\363\276j\365\202\276\230=D\277\350\310\035>x\250\206\276x2\315>\240\237\256\274:\315\211\276]p,\276\370\020l=\231\3459=\301\033e\276\241\331\023\277\342\017\031?\246\262\273?5\333\353?\342\030\374?u\254\363?D=\363?,\307\327?\304\n\226?\356\000\322>\252n[?\2505\205?\320\243@?\370)\005>\253U\223\276\t\273{?\275\016b?\202\324\203>-Y\356=\222\322\311=\212\210\010>\204E\273>\022\376>?\204\330\007?\224c\033\276\307\017X\277_\263\224\276h\0341\276(l\372\276\241\006\362\276@[\014?N\3774\276i\341\356\275\250`\342\276\276\001g\277F\277+\277\235\337\372\277\0049\233\277\300\375\277=\243\035\204?\314\002m?_\022[?\210\300\204?\374\271\243?D>\\?\000\261K?\300x\312;\201\226Z\275\250\237Q\276I\036\236>\372\366\235\276 \324\351\273T\315\272=\341\204N\277\304\325\277\277\316m\352\276\204_\006?^\2603>\277\364\241\275\014\007\335\276\210\r\336>\332x\271>\331#)?\241\217\272?\376\215\234?\366\266d?B\255v?\036\273u>\003f\213?\232\026+?\355\235&?0R\214>\352 \207\276\361{*>\265\231\262?\244{\321?\340\261\351>~\241\n?\224\322\234\277\373\207\321\277\376\307\232\277\201\255\305\277\231\340X\277d\374\223\276P\325O\277(\261>\277@}\005?\216\025a\276V\314J\277:\026\271\276\214\273>\277\304\232\343=\310\346\334>,\337\246\275\211\366\036=W|\364\276\032k}>\214\356`\275\254J\271\2766\361\003\276#lp\276\026\331\205\276v\306R\277\027\036\200\276\206\002\347>RnA?\014?=\276\332\310V=\0262\006?K\211$?\214\245a?\260\375\255?\2106\021> \021\277>w\230\002>\322e\004?{\'\316>\000\235\352=~\252\003?2\261R?Puo>\345\352\331\276mc\241?\201C\226?n\372\312?VN\322?.\210\237?\314\013\266?{\313\264>?cU\276\336\204\005?\312}\252>\342w\245>H\331U\275\244\025A\277\022\nx\277\206\237G\277\n\005\242\276\246^\t\276\354\"\356>\272\320W\276\334\222S=\242\005\217=L\256\036>a\275\222?\332\227\206?\264\037\275\277\301\274\376\276Xo\005>\314\302\035?\273s$?\023%\312>\202F5?C}\256\276\237\334l\277el\034\277[\021\367\2760\364\013\276g\024\301>\323\243\307>TO\000?|\234\262\276 \306\274?nc\224?g\005\233?\375\020_?\035\260\303?)=\246?W\377f?bw\233?\232:\226\276\300\262\373\275\234O\255\276\351`3>EZ\\>\352\254C>g\267\022?\364\260(\277\372C:\276\000z\251\2739\267\277\275\276\370/=\366L\001\277^\nV\277\0072d\277\213\200\202\277\333R\221\277|\364(\277 \215\302\276?\346\023\276\242~\301\2760\261\201>\264\337:\275\306\0356?\306\3650?\020}%=\370\373\360>\262\tQ?\261~N?z\357\220?\367\254>?@\353\233\274\372\305\030\276nc\n?n2\\?t\320\205?H\037%?l\022\310=\372-]?\024\001*?\220\324\314\276d;\035>\264\274\004?\364\020\341\276)\021l?\233\013\222?\030y\251?s:\242?\353\222u\276\340\272`\277\034j\273\275$\034K\276\013\002}?\314\343$?\246\241E?\010\014\260?\314\231\344?\326\2613@F\250\036@p\347\375?\340\037H?\3242m?~h+\277\334]\003\277\376G\352\276\032\020X\277n\344\035\277|\020\271\277\003\013E\277H\244F>\312\n\323>\230\210\017\275\206\253$?\007?,?\240/\013=&\211c?\n\274\005?\3771\345>\217B\364>@\\\035<\022\242\276=m:\306\276\302\217\336>\"\333\026?l\027S\276\345\374O\276\207\254\262>JA\377>7\324%?\370\200\373\275\310\330\231=\333\322\375\276\2169\232\277\373!W\277>\315\206\277\220\272\320\275\350\001\031?nD\325>Z\353\004\277\024\004\376\276C}\242\277@\016e=\374\232\237?\342\000%?\353\n\244>\216\354\227?\361|~?h\346T>\200r\331>\376Ax?\022\352J?\001\344w?\316\005w>`Q\001?\252\337\033?\"\251\240>\206W\364=(\234\220>t2\267\276\254\'l\277\027\277\370\276\220\334\034\275V8)?C\022j?\026PE?u\346\247?\262\262\262?\304\217\326?m(a?\"\316\231>H\014l>\332lF>\334\353\312>\302\367q>Z\307\265>\326\326G\277`8O\276\020\366\311>\215G\n?\022O\343>\306\206\213\2760.X\274\n\315g\276_\360G\277\006T\321\277\n\3565\277\020\262\236\277\030}\232\277\3743-\277\324\266{\277k]\222\276E\331\000\300X\235\255\277\364\222\007\300\234\316\027\300\006\226\003\277\224>4\276\200\234\340\274`\271J\277\312d\233\277\236K\335\277&\365\363\277s\024\233\277\335\2374\277\030\365\221\277\033H\353\277\253=\302\277$O\301\2772\355\226\277\200vs\277d|\254\277\332\t\303\277\036\004\232\277\010\371\216\275\340\316\376\272\251\372}>\024#\253\276\200:9\277\364\240\231\276\2412\371\276$;L\2769\373G?\315j\200?t\364\275?\337\202\265?t\\Q?$\316T>\264\360R\276K\371)\277\324\331{\276!\200\371>\006\217f?\000\277&\276F\\\240\276\364\007\327\276\024EI\276\220:\'\2744\357!>\344\013\205>\315\0018?\0320h?^\311\006?\023\372;?\267\027E>\202s\233\276\3444\323=\300Ps?\220\3302\276\247\355R\276r\326\236\276A*\236?+`\312?61J?\214\360\306?Y\306\215?\226\'\336>\"\203a>\357=\211?`\031\313\276\210w&=\246*?\2763lO\276\372\215p>t\347\247\276\330\305\335=t\377\276\276\204c8?\367W\013?\373n\220?^b4?\342\315Z?\301@S?\016\341\342>|\r\017>r?F>\\\305%\277\244\350\256\276\020\222\244=\336\177\233\276\272-\361>\211\035(\277\242\'\375\276y\362u\276Ld\036>r\374\016?n%\214\276q\177g\277\223b\341>G\203\034?\304\257[\276\236\r\"?\244\346J?\310L=>a\357\334>v\256h\276\213\200\352\276%\321Z\276~X \277\200\2566\277DP\265\277\003M\210\277.\250\335\277]^\301\277\340\365\021\300\215\230}>\262\277\357>\014\244{?\022\014\251>\201\212\000>\216\021\316>\033\273\376>\223\321o\277\264\005W>T%+?~k\323?\262\244J?\377\317s?\337\253\242?\264Il?\200n0?\360\200\244<[\260\256>\\W\370=)\301K\2768f\t\277\030\266\013\275\247\\U?\376\r-?4\245\017\300\266\250\022\277g\324\375\276\030\364\361\276Y\254\213>pp\013\274\325\240\205=0\327c\276\036\371C\277\026\210\262\277W\335\177\277m\251\323\276\244\372\261>\001;4>\\\010\252\276Pn\017\277\262\355\201\275vv\265\276\222>\221\277\354\343O\276\006\006\363\275\"\212(>!\034\250>Xhf\276V\313\336=\224\341/\277\274+/\277\233]3\277\253\"\232\276\250\204\233\276\222\036q\277\326\241\023\2778o\225\276\306AN\277\014_/\277:\001\262\277>Ru\277\276\005\005\277\370\341\240\277\\CQ\277\252\253\274>\2409\342\275\'\014\335>\341\251N?\272iB?\316\344\276>\272\316\301? \227\242?\\\027\327\277\031\324\311\277\017\356\335\277\360\343[\277\247\234E\277\256!!\277 \022n\27702\021=_\312z\276\272H\000\276[(|\277\224\214\263\277\336\236\200\277\252T\016\277\3704\231\277\224\274\030\277X\322c\277\265\330H\277\'\305\356>\370\265\255>^\240\316>3\346\233?\330\251u>\027\315)\277\3462\205>\2028\231>\252 \016\2770\245Z\276W\026\233\277\220\233P\275vl\277>\350\273\223? uE=\021\343\227>Z\242\003?\211\r\005?\330\377C=[\241\022\277s\t\250\276@\216\272>\326\223\014>\336\007\021\277\240\017\371\274\313\267\301\277\240\346i\277P\033\032\277\2352\367\276\246=\000\277\217E\025?/\244*?{\027\014?\0328\037\277\202)\000?\200`\204?\200\256\200?\0062u?>\256v?\357\247X?\312\364\000?\257\250\303>OM:?\027]\236?h\275\346>\234\330\317=)\377J\277\243\363\200\277~Fv\277\236\r/\277&\005\025\277xH\247\277FG\332\276e\311\372\276\377\201,?;\n\326\276\3100\301>\360Hm>]\\1\277\202\036\323\277\266\304>\277\373\034\312\277\311,\242\277\2602\212\277&\274[\277.\351\r\276\036c\233\275\\W\377<\305\262L?\312G\330?\027\302\374>j\273l?$\272\313>\364\336\031?h\254\250>\022_\013>\344F\021\277Sy\245\277jK\370\277v\331\033\300\244\346\024\300\300\326\002\300\256~\352\277v\262\221\277\240\200\273\277(\032\030\300*\302\237\277 \021\276\275\366f\016\277\310\027o\275\001\206\225>\300\242\214\274y_@\277\244\305<\277[[\273\277\'\240\037\277\002\276\035\276\322v\216> RT?r\3363?\016\003\371>\255\3476?\r\203\244?\224^\330?\241\343\230?_[W?\001/\244>\321p\006?\002\340\"\276G* ?\266\246\005>?\321\223\276ZZ\'?\t,\017?\020\271\250<[\024\200\277\240E\001\275)C5?;\000v?W\324t?z\320\217>Sg-\277\220\272\022>\220\210\314>\014d\n=\320fW>s\253\206\276\t\321\227\276\2518\315\276Hf\r?pu5\275\"\301e\277v\006\217\276\024\302\203\276jyk>@\250U?\366\231\277>\000v\210\272\r\0147\276GJ4?l\nC\276\375|\004\277\232\274v>\2311\\\277\224\016\262\277\031\225 \277\273\001t\277\026R-?8_\370\276\370d\247\276\313\314\246\277>\337d\277.A\226\277\234\364\273\277w\346\027\277\006\003\311\276\342{\247\276\244;\270=B\365\213=\235>\352\2764\364\202\275j\2346\277\363\274\267>63\037?`\317&?(\271\302>#\314\263?\310\223 ?Xl\177>5\303\227?y\302\254?\246[\370?\346G\220?>\377\241?\373\"\031\277\350\034+?\246\361\t\277\330`\211\275\313$\344>\030\303S=@c\375\276`)\311<\3139#\277\356\027\212>\363\032\271?\210&\226>\332vi?G\212\306?\357\205\337?A\025\347>W\010\237?P\303\370?\201^\337?\244\335G?\264sZ?\337.G?\032\n7?`\223\245\275\276\205)>~D\027?\224\014%?\234\206\224?\231\261\006@4o\270?L1\257?\036\231\323>}2v?\226\3520?\354\2752?\re\244\276\014\334\330=\253\177-?\264!\r?\316\344\246>\371\304\032?\234\005e?<e\227?\327L\263?[\013\"?`Y[?$}\215\275\'e\362\277i7E?\016\223V>)\265d>Sz5?\300w\270\275\307\321+\275\263\371\236\277\226\200\355\277\331\217\000\300\027\347\n\300\376\371\t\300[I\323\277\206\234+\300\315\3404\300\260N\020\300\242\357\312\277!V\001\300\024\240\205\277:x\016\277\273Ob?@xa\276\302:\211>\224!\177=\014w\203\277\357S\265>\016\222\321\275P\357s\276\200\324\030\277\306\304\231\277\350\034\256\277\026\262`\277\000L1\275j\244\367=\003\251\227\275\314\322R\276\003<\037\277\230\262\351>\360Xh>2\313\213>\210\266\037?\204;g\276m\277\317\275\370:\033>\202\203\247=\036\000\356>\371\026%?\352a\332\276H\030\333=\0323Z\277@<\310\277\227\326\234\277\022m\016\277K-\375\276$O\364\275N\230\211?\373\354S?d\357q?\010M\336?|\303\010?\336\023\227=r\300\245>x\331\'>\202\205M>\006\226\360\276\313\341\207\276\255\020\014?f\226\016?N\272\237?\224L%>wx`\277G,8\277s\225\355\276\'j{>p\376\221\275\\\376\250>T\374/?\360\347v?\374\345\213?\264\017\n?is7?|1[\276H\334\342>\353-\307\276\351\231\235\277`\001.\277\366\027b\277J\202\033\277\374\200P\277\250Jx=r\270\314\276\230s\242>\314\025G?\220\006\003?t\204O>\316\3628=8H\315<\335\001j>\377\321\023?\246\030\343>\314\241\306>\366\302\310\276\200\350\025;\370#\364\276_\310#\277\330M7\277\222\226\177\277\262J\006\277\322\220$\277\235\006\032\277\320T{\277\310\347\035\277&H\320>\334\323\275=\360\252\005\277\004\016\250\276\230\306=>\3057|?\250\033\221?\370z\315\276\367M\024\2764\"o\277\325\035\336\276\221z\370\2767:\033\277\272\035\232\277\323\037\'\277hc]\276\234\251\222\277\022\242\325\277f\355\357\277\374%\361\276\372\013\236\277\264\252\335\276 #\024\277\372\225\251\277\030\252\032\277J\226@\277\2376\205\276\016\324i\276\325\352\006?|\312\235\275X\352J?\347\034\350>\323\313\003?\300B!\277\365\336p\277\204=\363\276X\302\206\277\353\325\034\277,\264\014\277\323I\333\276\024\3053\277\016!\225\2774Pu\277l\250\030\277!\235\221\277\255\245\251\276<\"[?\256F\231?4\334\230\276\352\022\343=h\177\221\2760\220\000\275\276Gt\277dk\200\277\304[+\300\"<\317\277:l+\300.l\263?>{\353?\t\013\225?7\037\213?\336?\350\276\257\251\233\277 \337\321\276\206.\'\277\306\331\244>\177\314\035\277\240\337\324=\357\312\316\276Y\031\210\276G\316\007?\362?\016>dj\303?\243\316n?\204KG?\360\240\233?+c\233?\305\023|?,\310f?\2346E\276\274\375B\275\344\'1\277\300.>\274\364\212\273>\266P\335>\370\337\336>@\226\016>\026\313.\277.\314\345\277\252\350\347\277\032\205\221\277N\026\032\277\205\245\211\277o\205\037\277tm\331\276^O\'\277`\244\223\2742\010V\275o\'@\2762\352\n\277\343\321\340\276%\032\273>Ikw?\361\340\030?\265\234\212>\254TU?N\014\324>\350\270\010\275_\225y?t,h?\004cH>\312\2777\277\200#\203\274N\036\252>\244\320;?N\312\245>\264\271\253=\235g0\277\032\272\357\276\222K\271\276\206\3457\277o\221:\277\300U?\275\316\261\200\276\036\212\352\275CvM\276\2501~\276`/\210\277Nt\206\277y3\020?\363\373\361>\0142\307?C\303\354?\rQ\216?\323\301\223>%\341\207>|)C\277|f;?\332\254t?vl:?\020\006\177>]\331h>\246o\356>\367\023\203?4y\353?\330\270\317\275E\213\242>z\232\321>\304\315\217\275.\214\230>\000\206|\273\270\254\017\277\276\035\'\277\320B\032\277\026\016S\277}\347\005\277:\2560\276.\357\006\275\276\262\341>@:\312\274\231X\'\277\005?\201\277\217SU\277x\333\034=\002#/?\265;\333?[\206U?\253\003\207?*\223\264?m\027<?m\225\036?N\034\277>z\033\320\275\375}\216\276\035?J\276\2402\352<\260\201\006>\216\225\031\276z\314L>\263\253M=o\324r>_\354N\276B3)=\014\355\013\277\244\277\311\276\3644\037\277r\026\210\277\366h\355\277\365$\016\300f\303\'\277mC\311\277\020\001z\276\016\276O\277\267\351u\277DM\224\277\363\257\310\277\230\250S\276P\373?>7)2?u\253\335>\352\247)?C\002\223?\303e}?In>?n\030x?\324\016\350?fd?@\005\275\370?\240\0034?y\353w?8\036A>\023\252\177\277^@\215\27785\001>{\305&\277\2753\341\276\300\021\262\277\304\"\030\276\230\264\334\274\025g\251\274\307\303\360\276\200?\201\274d\024\275\276\204\t\026\277x\3507\276\206G\251\277\232\225\202\277\276\036\204\277\202w\t\277\2700\244\276\372\004)?V\010 ?\363;\265>\214\347\360\276\030\022v>\231\3434\276\226b\223\276f\004\023>c\243\351\276\2420\336\276\303\377\343\276\214\204\017>\256&B\276\006\027\034?2\340\242?:\312j>H\324\305\274\331\234\251>!\241\263>?T\032\277\373V\003\277\330V\000\277\214h\221=\313\350:?/\016\375>\327\201!?\344\250\357=\035\020\203?\212\t\243?V\322A?&s\220?t\366$?_\365\222>\360J\221\275:\214\007\277 g`=\322KT?\257UC?\006\177d\276@c\010>\0318)?\324\364\347>\362\037\t?\350\262\017\277\262\223\327\277\247\031-\300\230\246\243\277k\324\321\277l\245\356\277a\336\032\300\274*\000\300\267\022\252\277\207O\"\277\360\tV\277f,)\277\276\2272\277\000q\224\277\342^\372\277\317\345\004\300M\342\255\277Nf\276\277\3257+\277\370D\035\277\234Ix\277\031\3341\300\347\201I\300\264\005\214\277^@\016>\207\211\002?\300\027J<f\241\315>\027I\200>vVF?~\3736?\322\241\247\276Eb6\277X\207v\276\235;:\277\375\316\256\277@\013[\277\3606\265\2770g\322\276^\312{\277X\336k\277\276\233\312\277\271\334\n\300\215\n\364\277\024\357\323\276\277\225\305\276h\201x\275\236\274\322\276\330\204\215\277\344\274\017\277\350!\337=\314\231(?f\025\253>\3600\264<\000w\021?U\275Q?qW\022?(\260\315>\272Y\226>\324:\003\277\2724\303\276\374\246\234>~\t\362=4\301P\276\345R\224>\266\025\310?\024e\307?\314\325\326?bL\005@R\022\345?\361\320\315?\304\244\222?\353C;?\344\346/>*\265Q\275\331\226)\277\340d\206\275\277\350\002\277bu\230\277\\w\241\277\261Z\311\277\256\270\315\277\360\r\233\277x\361\310\277\324d\n\300m\200u\277\'wm\277Q~\266\276\253\314$\277\234\317\335\276\344V\346\276hO\260\276i\315\220\277\032\021\331\277\351\362\330\277g{E\277\263\t\200?\014\371\244?H\214\231?\373\251\317?\016\271)?,\303\207\276N\234n\277QI\315\276\214s\257\276\236He\277\322d\325\276\212\314\365>ktD>sY\002\276\001\032u>\010\034\313>m\245\254>\227fM?7\212\327?K.0?4z\017?~\312F?v\002e?\304b\244?\025\315\277?\315\375\315?\255\366I?N$\325\276L\267\251\275Kt\324>H\245A>\330\231\220?\352\327l?\311L\010?\244\272^?5-o?q\323\336>\244S\227=\342\031\301\276\302\017\033?\024\\\306=$73?n\341:?\256\016\255?Z\303\225?\'\014\251?(\000\271?D<0?2\276>\277\343\031\300\276&\014O?2\271\351\276\236\334\211\277Oq[\277F\2620\277\3606\225\274\211\363\212\276\261\365\370\276u\022i\277X\3715\276\3358\'\276\021\312\311\276\350\277e>d\203\025\277\024g\356\276\265\3729\277\244\326\201\276uZb>9\\!\277?\245\256\277\326\262\365\277R\3421\300\2375\022\275\302L\340\2751\370\027\276bB\213\276\016\355\177\277\344\213\210\277\025,\376\277r\030\224\277s?\246\277\312\275\035\300\375\005\t\300\023\327\210\277\341i\003\277\000\250Q:\256\353\261\276\330\3259?2\272\235?\200\242\206?\347,\242?\244\260\233?\277\361\256?-\315]?\370\330\305\276m4\017>\375|\202?\301}\302>\346\343\254\275\300\021\211\276\024\206\252\274\214\000C\276\251|!?H%3?\330E\032>\014\305W>\353\202\335>\337\177J>\311\304\316>\211\267\266?p\226\231?\311\362E?\200<\005\276\266G\006\276,:D?\325\333\332>\362\243\202\276\201s\354>\330\235k=:\2460\276f\r\231\277\357\301\227\277\220\225\265>\006\260\214?\261\303\262?Boz?\3023g?6\250\227>\253s%?\266\264\013>\243\314\034\277\204\360a>\220?\250\276@\352n<\036\222\254?\335\027\353?\244\327d?|_Q?#wq?z\254G?\204\264c?\275\207\206?\365Mc?G[g?mA\301=\330\003\377=\234yu>\220\000\001?\250\002\335=\354\007\302\276 \037\261\276\376\017K\276\036\322W\276\031I\314\277\222\212\226\276e\342\240\276\255\347\230>\354K\034\277\nR\340\276\360\206+\277\340\360\302\274p\373\022\275\206\272y\275\207L\271=\360\267\n>\234#O?v\"\310\276y\r\n\277$\205\030?\320\016\025\275:ru>\006\005\275\275V\205A\277d\\\222\277\032c\234>\003{\206\277\376@\261\277W\252\302\277\367{\252\277}V&\277\200d\333<g\017\263>\263B\222>\256\356\353=63\250\276\370\316\235>\344a\304\275\336>\322\275\227\311d\276\0047E=\216\343(\277`\345T\277\016\031\336\277\021\240E\277[:z\277^\224\r\300\204\004\006\300\234s\302\277o\212\315\277b\014\n\277o\006\210\277\345\364W\277\325;\273\277\250\254\357\277\265\277\013\300\255\021\027\300j\2542\300\r\256\361\277\346n\267\277q\352\253\277=\243?\277\201\004U\277#\362C\277\345\206\310\276\350\330\010\275\340+Y\272\037\027]\277\rE\322\276\253\033\234\276X\037\220>\264\005\202?\237I\t?$\242\237\2769\022>\277RC#\277\014\376\277\276 \016X<;s\004?\036II?+\024L?L\334\000><O3\277\"\373\020\277\000\215\371<\230\3249?\022\226_?\304\362\202>\306\003\014>\276k\254>\324uC\276xb\240?\350\020\202>m\346\217?\017\205Z?\364\336\032\276\034\306\241\276\221\210\266\277\362\340\350\277\232\027\231\277\215\253\240\277\264\201C\277\277\230\344\276\310\245@>!\322\357>\360t5?\320\246\271?\244\034t?\233\022\214?\032v=?<:\256?\276\340\257?\205C\010@\346\221\r@\260\306\372?\002\377\034\300\346\206\243\277H\273\001\300\030\256 \300\213\006F\277j\026q\277\004[?\277a\214N\277\345\013q\277\353+`\277\342\317\344\276z\306 \277\254\226\315\276\366\246\226>\264\267B\277j\004\032\277\334T\262\276\256\004\023\276p\275><\224\240[\277&\252b\277;\340\"\277\223&\215\276\006(\201\275\241J\215\277J1S\276\206\325\325\2760\324\234\277,\222,\300\256\303\345\277)\356\266\277.3=\277\207\227R\277D\255\004\300g)\222\277\'\372P\277\332\325\r\277\256i\213\277\022 Y\277\340X\036\277X\356|\277\334g\275>\242\351O\276\330\347\025?|\020\356==\"\203\277t\233O\276\205\027P?*\036\331\276\344Z\262\276\245\362\264\276&o#?8%E>\335\354:\276\240\371\276>s]\'>\306+\200>\260o\035<\221\177@\277\264\035\253\277nr\210\277,\002\304\276@\204v=\353aK?\220\306\243\274v\266\375\276\250Y+\275\002\347\037?@\304\234\2744z)\276\020vw\277]ZB\277k\323b?\306\3551?\366\366\227?\300\245\302?\014/\321?2\024\333?$\023\254>\0022q?R~\021?(\250\254?\300E\333?\3450\266? \017\006\276\337]\257\276:\"\"\277\010I|>\325\366l\277\336Bt\277\320\263\363>\001)\210?\352\311\343?[\373\270?P\324R?IW\352?\211*\253\276\310\303\255>\024{\225>\256-k?f\343\273>\372\213L?\234\377\251?;z\321?p]\250?\337\302b?O\364[?\320\004\242>\037\350\355\276\202\260\021\277\244\272e\277\362\254\335\277o#6\300\r\236=\300,\205\026\300\240o\274\277<\367e>\\\223\344\276:\nk\277\232\346\216\276\3745\214>\265\201\\?I\236\357?N\n\216?\307,\221?\333)\316?\234N\235?NT\322?\332\336?@p\330\367?\326k\243?\223nA?\2267%\276\327fj>\\\315w=\207Z-\277K\"\006\277NNn\276\210P\366<(\345V\277\260|\240\277\035(\317\277\0050\300\277\234F\232\277Z\362\357?\002\205\323?u\247\363?F\n#@\300\265U\275\272#\\\276<\360\013>\217p\243\275V-\215\276;\235\037>^@U>\036\335\352\276f\342\214>\010S-\277\024\306h\276\3245\312\276\204^\261\277\310\210M\276\353>\231?\364\2074?\376\224W?}B\212?[A\371>\320O9>\330-h?.\3578?\030\032q?\351\032<?\024yy>H\"O>z\347\243?i\233\334?\rE\004@\036\237\341>8\201I\275\247G\033\277\366\330)\277x*&\276\032g\212\276\320\332\007?\035|\240?\206\375n?)\2174@\024\335J@|\210\364?\3401\265?\222e\002?\2522W>\254:\024@*\372>?\014\036\036\277X\256J\276\361\372Z>_\007%\277\300bu=t\005\217\276\340#\202\274\000\222%=\342\020>\275(\007\007\277q.!\277Z:c\276\000\022h?\004\272Z?@\304\021?f\313\210?\247L\220?\373\315$?2\000\322?)YN?\314\003\014?\306\315\316>\014/\220\275%\307\212=\004\254\356>\342:\236?z\242t?\323Y\223?\013#\223?\2641\260?;}\337>\265A\317>\260b\034=6>\332\275\332\335p?\210\305\243?\027\223\202?r\2273?\014\215h>\330&\310\275K\311Q\276b(\336>\214\265=>[\321\037?\260\355\273?\272\004\305>d\201\346?\306\'\244?\235\233\021@\261e\334?\313~e?\306\274\301?\232\325\267?\013\335\000@I\265(@\332\3374@\341\341h@~\037}@\3133{@\326\251\267?f7\255?S\007x?\000\206\310\273;=;?\t\361\267>\211\263\001?p\237\357>Vn\370>\000\213^\275\374\376\334\275\004t\210\276a!h\276\240\201D;\036\274\377\276\006)\227\276hE\\\277\311\273!\277\303IJ\277\275+0\277\260[\246\275\206\nS\276\\\230\324\276\310.\220\276e\'>\277p\325\373\277\215\016\002\300\000e\277\277\330\340\367\275\206K\341=\343\255\305>\007\313\033\277\027\217\226\276z6\303\276\356b \277\323h\t?\322\341h?\365\3477?\266\313\256\276\004`\353\2766\345\313\276@\252\010?\241^\355>\206\323\003?\212\276O?\224QF>\210\252#\277\330\n\215\2757f\025?\3208\203<\021\264\020?\021\374\257>\304\245C?;\214\000?\260\273\247>\250\222.>\275\311&\277@\341P\275\254\301\300>f;\270\276\256\362\341>@w\311\275\315\276\276>\0229\027?\200\004Y<\300\304\223\276i\2157?X\322\263\275L+\031?\254\323\205?\221\375\212>\'O9\276\222g>>\264&B?RgJ>d\353\256=\035\375\017=\274\334\030<J\240\006\277\335\334\341\276\366\320r?\212\356\314\276t\271F?\262%\335\276\262wg>hO\217\277\224\246\252\277\320R\221=\034\r\026>C6R\277n\036g\277z$G\277\344,\237\276\227\277x\277\363\371\214\277\227M\301\277A\256K\277\2027m\277\312\216Z\277\266\330\"\277\004\177%>J6\202>&\016\036?\036\370\361?r\271\006@\224L\322?/C\264?\261\342\254>V\273k?\354M\214\276\226v\032>l\241c?<R\232\276tc\242\277\200\264\203;`d\342\276|\234W>\0205=\276\217\204\311\276\344N\312>\3151\355\276^\371,\277\304\030j\276\326*\377\276\200\021\275\274\314\032G?\372\242\252\276\021\365\347\276\360G$?.I\353>\341\302$?t\232\002<\346\200\004? \371\316?\300\266\220?V1\275?\333\002l?\355\264 ?\306sL>\224\302?=\262Z[\277\300\311\006\275D\270\211\277\342\275\304\277.\272P\277\004\013M\277H\022\251\2771`z\277\210\360J\276\240q_\273\026}\227=\374t\251\276\030\266[\276\022\306S>m&\322=\265\363\010@J\343\345?\003\332\216?\3164\302?R\355\217?\014b\302?\220\205\n@z[\313?\366p\016@V\274\344?\313;\214?\336H\267?\365_\377?r\021\215?\264qe>b\207\257>\211E)?HC\220?\020kR?\204A\213?\343B\260?lZ\260?\013\367\232?^e{?\354\004a\276\237\327\206>\324\215\303?\326,\026?u\253\200\277E\347r\277\264\363\256\277%\236~\277\n ^\277T=\313\277[\000\027\277\374.\246\277\317\357#\277\240A\376<\204U^\275\215[\230\277\356\330\256\277\227p0\277;\265\246\276\2440\345\276\363\210\'\276&\261\243=\035\201M\2773\r\311\277V|\217\275J\035\231\276\"\206N\277\224\2609\277-\315F\277\022\022w\276\224\272\010\277\000\242\016\274\204\243\252=N9&?\370\236\314\276\312}2\276\327V:\276\240_\254\276#_\001\277\246\314<?\241\270m?R\006G?\022\213\341?\342h\342?,\336\320?\305\312\366?\204\\\370?7\t\000@\245\253\031\300hV\n\300\023\240\n\300d\027\014\300>\272\264\277\343O\277\277M\231\001\300]\024\205\277\3650.\277\353\010\205\277\354\013\214\276\001&+\277\000\373\333<\003\224\335>\020!>?\223\240\233>\310mS?\036\n>>z\335\314>P4}?\344?)?\210D\360=\332v\317>8w\225=\355\025\244>\232\205Q?a }?\026\306{?\350\234\332?\276=\357>\210\n\221>\230\2176?\000\214#>\332\251C?q\312\376>\240\004\310=&\372\332>:\250e\276\346k\221\277:&!\277\t1_\277:4\202\277\210\000/\276\230T\205>]~=?\3141\212\2758\3235? \3640\275^\204\271\277\\:\240\277\316G\t\300&\346\001\300(\007\020\300>\007\253\277\307\\\266\277\244\231R\277\003x1\277\016mt\277q:y\277\230\220K>\017\275S\277\275\274*\277\302\321\\\277\021a\025\277\001\216\232\276[\314`\276$I\224\276\377\365:>C$\306\275\006x:\277D\001\235\277\346\267\026\300]z|\276\374C\000=\327\354\034> Rd>\241\005s?\n\332\376>\356\304\246?\320*\027\275}\006\036?\275\224E?\331\321s?\200E\210?\005\222Z?\266zr?\221\277\215>`\177\352=\334\350u\275\325\307\233\276@\360\022?\r\002\370>\340\341\023>\340~j\274C\256\034\275\242\010\306\275\005~\246=\343Y\271>\260\034\276=\344\361s\276(\274\366\276g\341\263\277\326\332E\277\250\177\212\2778\247\315\275Co\013?\324\201\364=\247\315u\277(\307\355=3\301\032\2776\353\241\277\350\000G\277(7*\277\313\276\035\277\333\3309\277\232^\216\276\010:\337\275\271\216S?f\377\340?^G!?\'Y\227\277\001(\033\277d}g\276\3438\261\276N\213\t\2779\206\310\277N\327\034?\250\t\023>\246\021\251>$\346\002\277\260\363\352=\347)\021>\302?M?\216o\201?\337\013\226?\314\200\032?M\324\303\276\\\270\301>o3\024\277\313\226\'\277\246 \244\277\013\237\233\277\256\371%\300\024\005H\300\262\360\340\277\022\334D\277\034[\r\276n\361\r?d\315j?\202\036\333?\010E\264>\332]\201\275\374M%>O[O?\250\317R?\360\017\022\275\260tf>l\362W\276\376\024\311\276\221\255\260\276\t_\374\276@6-?\365\"\030?J\223]>@f{\273\221\350\203\276\245K\270\276yk\220\276\023j\377>v\311\223>\374AQ\277\341\212\233\276@\225\305\275\340\257\366>R\210\247?\330\316S\276-\013\016>.\365\305>\214h\222?\372-\301?{\300\233?\342\032I?&J\241?\200\243\335\275\27002\277\241\376\313>\034\350B?\235f\264>N\002\322\276\005\310\276\277\210\036\340\277\001vZ\277\257t.\300\225\217\263\277\214o\021\300\035\223-\300\327q\021\300\327\252#\300\325\225%\300\241\374\t\300 \213\306\277PR4\275(\317\225=U\371g\276A\221B\276\212I\237\276\334FJ\277\314\363j\276\210\200?>\253\331k\277\014\223\341\277\353@\225\277Z\266\235\277\204\361;\277I\225\244\276\375\244%\276\006\226\264>\264J(\276l\377.?l\301L?\305\035\331>\033$\304>i\030\024?J\325\020>\375\252\271\276l\036t\277L-\332\277\030\232~\277\211y\235\277\202\206\022\277T\251\217\275\316\3400?\237XJ?\323\341\003\277\304\360+\2772\251\265>\002\321\320?h\340L?\270~s\276\000\272L\277\363\261v?N8V?X\226A?\271\373\241>\255\326#>\017Oj?\016\270\277>\t\272\\?\3248\033?\225\246\002?\270\204\r>\000*\342\276\254\323\263\277\377\334<\277\233Q\265\277\026Bm\277\310\306;\277\"\246\177\277\376\274\221\277\014\227\034\300\264,7\277L\006\212\275\367\203\240\277\000\221\220\277\366\252?\274\324\034\372\275\322\365\337>1\231A?\207\273\202?\240\201\032?\032\262\251?\374\240m?@\2317\2760\010\261\274\270l\036=\212\333\201\275R>\277>\340\355\311\274v\226\000?a\252O?\036\343\225?Xv\345>\344\362a?,\037\306?\224X\241?\374`&?\267\357G>\022\222\020??\200+\277\\\326}\277^\334u\277o\200\222\277j\230\234\276\rMx\276+\033X\277\332\035K\277\207\0025?\\\004\321?\337\225\331?\377\256|?\024|\321?\006\213\333?RN\004?\364\250\016\276\276\223\222\276`\377%\275\237H9\277\262\363)\277$~5>x\324,\277\375\363\\\277JV\215\277\267\361\203?\204\216\365>\354\270]?\003\2130?\361\006\013?k\022\215?\032\000=?\000\326\036=\267\351_\276\234\373\217\277\301#\025\3004\037H\300\210:1\300bH\016\300,\245\025\300&\335\357\277GZ\220\277l\032R\276\357\246\'\276\025j\211\276\320^\360=3N\356\276[wX\276\366\214g\277\303\342\215?W\321\007?gO1?\206\221\360>\217;\243>\222\021C\276B \247\275r<\307\276\224\222\025\277\230\261\270\276t\210G\276\271\007m\277\335V\366\277O|\307\277\020\0232\276\000\000\255\270\260\204\004?\020\3602\275\241\330\212\277\214\006(\277\004\"G>\211c+??\2725\277\226\017\271\276\017\201\305=t\317\274\277\356\362n\277H\300z\276x\332\202?`\336\220\274I\277[\277\357\306$\277P\240c\277\021\336\214\277\240\212\336=PaQ<\022\325\204>\007,\373>R\207i?8t\230?\343\216\303>\351\343\254\276\310|i=\220\355\010\277\307P\223\277T\r\230> \242~<;\320\n\277\316#)\277\274\305\305\276\2729\300\277g\2548\2778\001\202\277h\r\272\2754\202\366\276\214o\203\275\275cW\276\032\267\313=tS\253<\020\322\230\276\302\347\274\275( 9\277\225\005\377\276t1E\276@\031\352=EM\334\275\345\2241\276\031\366\251\276\320V\210\277\2427\240\276\274-\016\277\3723\221\276\361\3535?\000\206K?F\t\007@]x\036@\351\254\271?\354\257\215?>\340\220?\314\021\377>\224\265:>\247\312\240\276\034\315\305\275\027!8>\252\252\346\276\027>Y\277Yo\225\277\360]\005\276e\372\335>\376\220z?\331\'l?\030\307/?\"Y\253\276\225\315\225\276\\\036\022?\344*\t@\244\371\225?\276\317\316?)p\177?\227\3626?\322\204j?b\246\233?_9\364?&\003\303?\370\206\036?,FV>R?\377\276j\357|\276#E^?`\346P\275\001\256\303>2\335Z?\377\260\235?Y?\202?\243\377\201?\270rB?\0021\037?\234h\241?\327\230\251?i\345\021?E\277\365\276d9\035\277\n\227\246\276\236P\233\276@\356\263>\206\\1?\026j\244?VJ\254?p\340\251>\272\253\330>\322\357R>\344\314)>>x\276>*\014I>H\033C?`\253\007=\232\344\223\276\024\303\223=m\020\206\277\303\010S\277\270\211?\277\330\002x\277]`\224\277\336\303\357\276\214l\262?R\332L?\030\260\300\276\2331\205\277\023\277\233\277\267/6\277\272\016\036\277\211\223\'\277\"\266H\277\276\205\370\276\037Fh\277LsT\276\006s\271\276\275\341\025>\215+7?{\013\t?Q\277\305>f\255R?\342\340\t>p\334\236\277\354\220r\277\010h\275\2774\361\270\277L\254e\277\254\242G?\321\237u>(\364\251?\244\215\324>\360\344\313\276\030\237I\275\343\004#\277p\236a\275\304X-\277c\335\211\277\353\254;\277\000q*\2733\'\251>E\200\022\276\300\337\301\276\317\316\212?n\tB?O9 \277X5\341\276-\273\225\276\027R\341>Nd8?`6\222?\006[\335?\014P\314\277Il}?\227\237O?\241\033R?Dr\245?tq^?\017\376\002?|\017=?\240\261\230=\324S\312\276h\026\354=\216f\352>\336\213\225>\200\260\205;\'C\026?\000^;?\027\224u?F5\254?(1:?\324_\031\276\004h\237\276<\230\215\277\334C\007\300lS)\300\363R\356>\300\375\312\275\026I\231\277\370.\345\277Y\026\352\2777\377\346\277\340\334l\275\312\207j>T\ts=\321\306>\276\034O\202\276$)\201\277\030\234.\277\354\302\367\276\237\035\030\277T\027o\277T\r\270\276\001\274\213\276\\7\374\276\333\261\234>\246r\324\276\202!\217>v\331\016?\342\325\t?{\272\322>\017B\310?\306\n\320?!\367.?%\276\202?\233\227v?\272\021\237?x7\320=\350s\330\276yG\251>\004\001M?\350CH\276\241\241I\277\004e\202=|\250\202>\231\t^\277\033\n\321\277\376\347\206\277\nxb\277Vjl\277\366\226\225>\257\001\231\276\217\005\254\277\302\317\210\277\2705\022\3006\251&\300d\270C\300O]\031\300\345B\002\300\007 \263\277B_\342\277\276\262\304\277\254[\313\277R\035\350\277@?\375\277R\317Q\277x\372\217\277\214\275\311\277s\253\270\277\2369\374\277|\037\310\277\322j~\277\\*$\277\326s\013\277\3065\017\277~WF\276\200\370\242?\202]4?\224\220\373=\277K\317>\370$}\275\342/\217\277y6\223\277\032-\017\300\272\031\364\2779f\000\300\022R\316\277H\366\210\277 \031Y\2761\263\001\277X\313\034\276\007~\262\276|z\212>YY\202>\204{U\275\3416\264=l\254o\276\264\200\223\274\024Tv\276#0\024\276\212\211\205=F\010\000?W\336\226?\014\276\266?l\224\202>\271<\013?R<l?4\257\306?\267/d?X\221\240?ki+?\200~\220>|j\307=R1 \277\210\217D\276j\346\004=?\374m\276*6\247\276J\027W\277\r\360Z\277`-\245\276H\205\243<\314\237\036>\274\222\037?\243\205\025?~\242L?lx\254\277\304K\006\300\360\006\023\300\024+\361\277\006\027\271\277\360%$\277\000\010%=s\303{\276@\035\264\277=7\325\277\373Z\344\277\3340\220\277\276\237\231\276S\033\036\277\240A\022\276\020\372\205\276F$\310>$\345\246>\353\2367?\226\321p?b\226\353>Z\331\234?\210\364\262?\340:\256=.\201\277\277|\246\t\300:]w\277\211\000\177\277WI\004\277\300(\247\277\276\246\002\300A\333\233\277\232f\372\276Z\3035?\276\202m?\016R\006>t\376\315>\214\336\255=[\356\003?\360\271]?\340\217\014?\260\nT>\210\324\347>E \327\276\242\270\006\277\024Xg\277@\350\332\277\010\250&\300\206\304B\274\361\255\265\276\23090\276\214sF>_\325\010\276hKd?a\310&?\230\205\213\277\222\004Y\2774y\231\276\010\316\200=BQ\206>\336\037{?\262\232\264?\202>\232>\330\352L?N\353\231?\236\376\312>\"\3152?\237(\331>Z6p?\340a\371<\375$\360=\203>}>\233\031\272=\364\265\007>9U\001\277}\r\242\277xJb\277\354)\r\277\022\332*>;%\017?\320\204\257\276I\254\270\276\2549\257=\322\324l\276\032b\035=>\222\330\276\020<\330\276\206\233\335>M\244\251\276\006\376.\277\230p\033>\260\360\302>\203\322\307>wn\203?\236h\345>\022M\344>-U\302?d\370\333?\355M\307?\000B @V\261)@\024\337\260?u\341\247?\302u\262?\310\344+?\304\344\200?\032\021\257?\360\340v?k\201\205?]\036Y?\240Ua=\007\224^?\355\005\207?\363\001\013?\225\023\245?$\235m>\n\000\212=$\210_\276\204\254\003>\036V\277\275\237]\000?>:\031?>\220\307>-\340??\220\227[=\317S^\277\216O\223\277`<\264\277r6^\277 7\201\277\264\241&\277\014rB\277\nOM>\265\2115\277\024E\276>T\3455?\034\375>?\274\303O? E\206?a/\305>t\252\255?v\'\301>\r\3149?\302\005\206>\322\000\006\300yO\032\300x\333;\3008\221f\300\301\372O\300h\2278\30026\017\300\332`\025\300\036\326)\300\210\253\200\277\017\275\001\300b@\347\277\331\341y\277\213Ne\277\312X\242>Z\345\001?0\264\211>fz\265\276\352:v>\343\335\217>\000\365\203\272!\202 ?2gs>\002\317\317\275|\'X\2760a\010\276\224\300\345>\212z\354>\223\342A?\274\267^\276\250Q\316\276*|\021\300_\243\n\300\350\362\307\277\013\022\235\277\255%\227\2777b\220\277\035\330V\277\255\244\331\276x\236&\277\376\230\376\276\024\270\022\277\354Zf\277\220\350\267<x\352\270\276\0028i\277\001\274\204\277R\2664\277\025\221\342\276\001\331\215\277\214:\263\276\272\334\256\275[(S\276\202d\214>\025\273\272?L\016\367?\372\325\322?\352\036\221\2765A\010?F\352U?\373<\207>[\206q?F\217\202?\333m\360>\264g\376>\310*\205>\262(C?\000.-=$\301o=\313\374\302\276\201\250\222\277l\374\253\277\017~\356>\266\214\372>\330\351[?\242\025U>\315\032\006\277F\343T\277\230?g\276 \ny\275\211\035\220\276\227JU\277\312\026\216\277T\374\253\277\336\276\243\277\214\r\004\277\346$\317\275o\013\007\277jy>\276\213c3\276\332\3568\276\227\347`>\324\242#\275\344\350\243\276\036\032M\277\370\224\220=\331H\300\276H\364\256>\31670?\336dp?\274\215\274?\260\261n?S\304|?x\023B?\200\235S\274Tl\t\276H\356Z<\301\324\312\2766\321F\277\223\300N\277\024\022y\276|i\342\276\200\254\207\277 \356\256\274,\033@<\217\242<?Yr\211?\262\234\326?\326\n\267?\374g\212>\255\347\233\277\225tr\277\272}\234\277\372\322\262\277F\026\325\277H\367\206\277-\242\376\276\262\323]\277\027\323-\277\254\037\237\276\310\245M\277b<{\277\215{\211\277\203\010\206\277v>\243\277\376\220\312\2773\"\356\277)\363`\277t\242\316\277\037B\302\277\302\022\374\277\344\000;\300\302V\327\277\013.\310\277\216\254\271?X\325\316\275\314\261^\277\340\035\024\277\276\024\020\277vt[\277\\\215\247>Vi\276>(\227\327>\200W\310;i\241,?\000\3040:\326ca>\206\3551?\374\347@?N T>\360\242\266\276\375\212\227\277\326\315\007\277\213\033\317>\371\005\007?-\027\002\277\312\250\336>\310\006P?\275\027*?@\034\356>\364\037\231>\276\302W?\2329\007\276I\271b\277r\\(\277x\335g>cK\304>\300\343U?C\361\337\276\222\034X\277&g\222\277\254hS\277\315\376\277\277r\3458\300\370K\301\277|\223\005\300\234C`\277\231\322\352\276\007\341\022\277\010\247\251=Fk\201\276 \233m\274\355J)>\217\033x>\000\346\352\271\366>V\277\262Z\301\277;\337\331\277*K\232\277\254\227\266\277\307Y\301\2774\037\332\277\016\216\223\277\320\231\233\277,\245\001\277\240\277\\\276\210\313\251>\036\323J>\340\026J?bW\207>k\362\202\276mu\010\277 \330@\276~\357\225\276*6R\276\200c)\276\325J3?\002~/?\316\022\271?\217\362\030?\202<\316>\310\243\250? \037\235?N1J?\276[\203?\321\177\314?\314\241\360?d\277\234?*w\363>y\372:?\246\323G?\305\247\245>\010\004C>\250\032\r\2770\rH\277\202\307\202\277ICH\277>\014\201\276\036!7>n\321\201\276\277An?`Da\275;w-=\336\214m>\232\323\217\275\306\020\316>\264\331M?\\\326;\276\"^\034\277k\"\371\276w\333\353>\251\350n?h\330\267\276\311\2171>j\324_\276\026\353\020?\014\370\026\277\351bW\277\351k\230\277P\230\037\300\002V\035\300W\255@\300\352l\001\300\315\346\360\277\257\320\310\277\271\255g\277f\237\344\276\234\376\227\275\006\2358>\277s\252\276\027\357\000\277\250\001\367\275\2211e?0\256\376\274\263t4\276\300)\364\276D\026\253\277\217\305\204\2773z\255\277\305\225\305\277\373\327\302\277\354\204\216\277\021\006\272\277\2748\205\277>\034\221\277\220\336\250\276\243\232\211\277\033c\021?\372+\235?(\270\022@_e\373?\347\254\354?\237 \272?0\337\321?`\265\202?\270\332s>\202\253_>\005\264\033?gg\177?\335G2?\331\017\375\276v\266\303\277x\006\211=\321\332\226>\303\n\205>\206\324H?|)j?\257\303b?@\003\367?,\335\271?,\350>?\202n`?\216p^?\010\233\023?\000t\030\274<G\240\276\202\322\'>\304\007\324=\370\2357\275\234g*\277<\022 \277\204\333\031\276\314\014\343\276\331\243\321\276\216]\355\276cT\215\276k7\366>\000\242\317\273\311\231\t?w,A?XkW?&\377\360>Y_w?W\272\230?KyU?o\367\323?\360\325\340\277\304\312\271\277\013W\375\277Ef@\300\372\232I\300\256!;\300\361/\311\277\322\372\250\277\2440\036\277\264 \210\275\250*\216<\032#~>\254\333[?\252.\320\276C\372\201\27612O>\205\020\037\276\370\224\035\275(u\035<\035\021\302\276 \354\345<H\3640\276\312\220x\277\374\314\262\277R\004\266>6\330\214\276i\'\022\277\264a\234>\036\303x?\216-\271?\200\216H<\350\031\320\275,d\273>\270\241:\275\271W$\276\314\342\307=Z\'o>v\252\207?\335\0233?U\356h?\274\275]?\306H\t?l\250<\277\350\233c\275F\203\341\275\256E\001\276\340F\267>n\336|>\253f\346\276\310\351\230=6\310\363=f\017D\275\311\017q?\342\260\240?h\314\002@\274H\253?\000\253\207?\226\032\245?\207+\323?\0006\243>o\306\027?\240\326\t?R\230_?B\361B?\034\307F?>7\246?\350\207\366?\377>\006@\262\254\344?\023\351\232?Q\207\236?\210~D>.\211\324\276{\037\303>\2624I\276\032y(\276\230h^\277\274R1\2775\240\204\276\016\370\240>\334\271{?\334\334\332>\220\004\274\274\n,\363\276\2372\363\277d\247\212\277\205\363\264\277\231\315\305\277\211\036C\277\312\377\356\276\304\247\344=|\226?\276$4Q\277f\240<\277\324\227&\276~\232\261\276\336\261\232\276|a<\277\235yd\277p\254\365\276\312\265u\277\234\330\310\276\216\303\316\276K\3117\277\366}\213\276\r\306\200\277\356\200\230\27730\277\277/E\202\277\001A\214\277\372\001\033\277\032\261\220>\350U6?FM=\276mJ\003\277\364^\016?\256\331D\276I|Y\277\326\264\250>\324\214\014?\356-\323>\272}\203>\022\256H=\224\355\231\275>c\250\275\200J\025\277\307Y\334>0\026\373>;\024\223\2769\305\202\276^\240\273>\305\325\337>\272\302\000\276\306\373\201?\034Y\270\276\257|b\276U\242\025\276{\271\373\276\314\261\003\277\322\350\274\276\356\000\006\276}0\214?7\260\323?.\310\363?\331%o?\264\330\245?\330Q\022@\241\001>@\230+\010@\034\261{?\352\t\200?\260\005\353=\240\324\253>\220}\205?\342\255@?B\230\302?\014m\333?\276o\330?L4\230?\027\304\'?\370\215\215?\316\254\334?&,\"@\004\205S@2.W@\244\240,?\032\312a\276\nx\'\277|\372b?D\340;?A; ?hI\312>\334\203(?\220\301\202?\035O\203?\216\343\235?\212/7?\313(\252?\256\030\010@e=\361?\330\300\241>\364\352\234?\252\213\220?\016\352Y?Z\004E?\333\340\310>\214\356p>v!\337\276\3602\325\275\001E\254\276\341u\211?Z\313\005?j\312$?M\001E?\207\036g?G\332\254?\360\211\377>\344\227\377\276_\316\242>\002\255\r\277\367y\023\277\377\303n\277\034\3601>\247\234\025>\210yb\277\3430\374\276`\331\200<\316y\233=\316\376;\276\021\372\302\276\274\271`\277\000\362\367\276\326$\234\276(*/\277s\031q\277\027\002\362\2770\307\204?\330\262\036?\331\276B?\n\3608?\032X\240\276\260\257\314=FGl\276\302D\036\277@\332c<\265\017\037?\246\304\312\276\242/\001?\246g\336>hMn?\350%#?\000zt=\n_\006=\302\001M\276\364\031\024\277\326\311\257\277\300lT\277\340+7?w\307\245?j\315\333?\\\251\324>\306\005V?H\305x??\354\023?\210\025\255>q1.?CQ\371>0\207\252=9\255\211\2776\341\342\277\245\356\226\277\340\372\266=\014\263\334=f\316\005\276\377\241\020\277\026\2344\276$\205\260\275\327`[> 4\010=\220N\034>\234\027\217?hS]?\362i\314>\262\027^\276\376\246\216\276\204@\336\275\320\262G\277%S\312\277\255\033\235\277\322*\213\276\256D\227\275\370\3172\277\375q\n\277\000\367\224:O\326\036\2760f\203\276\3558\265\276\266\231\240?_\271\336>\240\006Z=\341|\310\2769*J\276\017\343a>2\330-?\032_\273?\260{z>\202\344\374=*\234\033>\236\212\260?iL&?H\252G?O\237\265?a\273\000@Ph\032@\346L\257?\032a\302?xz\313>\317+\316>\374\300R\277x\361\211\277$f\315\276\031\326\376>\tY\214?Y\200\200?\025\n~?*\264\310>\350\025l\275\034\217\364>\256\013)\277\367R\334\277\374\017\331\277\300E\026\277\215ZU\277\344\224\245\276\300u_<\351\336+\276^\003\322>t~|?\'\336\323?\205\000\223?P\022`>p.\223\277\220\371:=\016\334\366=m\324\240>\210\211\224<\350j\374>\316[V?\\\225\034?$,K?\207\213q?\020\271\301>aH\214\276B\013\331\276H\3047\277z\214\215>\345\360\033@pc\356?\246\273\376?\002A\322?N\362\272? \312\232>\270\007\230=j\236u\276^\225\365>\t\345A\277\255Zo\277\334lq\276N\311d?\006\033f>6\317,?d65?\273\301 ?\230w\n>4d\334\276\243\334\026\277Z\252\331\276\256r;\277\222\220\237\277@M\226=\330\310)\300\253\336+\300\334\330\246\277\225\243[\277\214\354]\277z\237S\277B\241@\277~\332\002\277B\004~\277\\\277E\277\360\270\216\277\222\332\217\277I\321\253\277\266\352\255\277\223)\260\277J\246\010\300\340Z2\300r\'\022\300\256$]\300@\351(\300t\253\311\276\320YQ=T\2224\276\234\311\333=\252\023\204\276\226\177\017>\304\310\275\275\036\355\003\276\257\316\332>\260\333\266<\\\340\234\276\2446+\276\237\375\r\277\004\334\263=\251\245(?\306\373\255>h\326@?\264\217\271>F\362.?4\2233>\223\265\002\277u+\332\276\313\264c?\351l\232?\376&\363?\320D\334?1\177\036@\013\002 @\377\310\216?T\210`>\364\001\002?b\027%?:G\026?&i\207?P_\217>\324\237X\275<\227\201?8X\017?\226Y;?/\006\311>\354{{?fj\220?$\377\251>\366i\225\276\260o\265<\361z\213?2S[?:\025\305?\241I\243?\2400Q=\254\344q>45\t?\030\356\364>\210p<?\n\033\275?n^\234?-\311\250?\037V\231?\334\013\313?\340\311\014@\254@J?\0102\026?\2648\004>\2759\006?\007\305\027?ZXf?b\r\200?da\261>\322\220\356>VP\037\276\025#+\277\214:\022>=5\215\277\244\210\263\277\344\247\013\300s\241\375\277F\021\263\2764Q4\277e\305-?\304N\032?F\237\013?\205j\204?\324\331;?h\371\245=\210\204\032=?\337s>O\207X>\356\270\013\277\007q5\277 \203\364\276*P\241\277\007\373\305\277\340\'\022\300\317[\024\300\365P\025\300G\347\035\300\256\264\000\300\034|/\300\n,3\300F\324\243\277q\312\243?\270\377\270=!\377\033?\316\3708?\220\275V>(T\233?\241\n\177?O\257\351?\334\211\031@\246\345,@\224\204\024@\266\233(@*\274\n@\370\234\322?\316a\240>\264)\250?._4?\374\373]?\343=\234\276\312\357H\277\320\003x>\206\036\267\276nw\200\276]\265\231\277\336\245\260?\322_\221?\027\306\321?\271\252\201?O\305\016?\0059\217?i\316\223>\304~k?<U0?x\330\263=\322.!=\303\373+?h\321\325>\242jL?\377gd?\003\360\266?w_\240?\371\364<?\232\307\221>lzC?\347\271\232>\312\322Z\276\322\230|?0\2617?\313|\246?\250\202\260>\360g\261>z/ ?\234D\233?\347|\327?\237,\021@\241\3532?\220\034\335\276\317W\003\277\213\226\207>@\023K\275\014(h?h\201\347>p\034>=\306\314\317\275&\201\373\276\236\326\257\276\333\024\274\277\220\"\347\2770\311\257\276\271\315\233\276\300)Z\276\360\264w=\315)\260?\324\247\301?\302\275\301?F\367\301?\360\230\302?\334\357\233>@{@\275\023-\356> \364\025?\226\320\006>9v\241?\246\026\336?\365\361\325?\331\\3?\300NL>\324\242\354?\344\026y?\323\222\355?\375\3375?D\226j?\246\373\376>\202\273~> \342z\274\025\203\361>$\245\007@\262\2532@\212\224\365?\272q\023@\036\216?@\210\303?@\327\3542@,4&@\267\035,@}`\340?\321Y\002@\357.\366?:d\001?\\\t\262\275\313u1\276i\322\277\276\376\353\222\277,\376\027\277\334\016\240\276\032\256j\277\202\304\215\277\252\217\243\277T\313\027\300&\315\025\300\225\352\330>,(\000\276\215\324\333\276\324\252\213\276\360\027\255>\350\\\307>,/\200>\371\223\020\277\342\350J?`i\034<\307\225\"\276\254\r\022>\014\350f\276[`)\277\220\221\226\2777p\254\276RtL\277\254\376\200\277b\004\363>\254\244\256\275\242\303\304\276TU(\277@\253K=\020]\215>\356\202\212?\234,\330?\226\351\260?\260U6>/Ng\276W@>?X\357\241=\366q2>\254Z)\277\"^\025\277/\250\260\277=Ax\277\204\003\314\277T\313y\277x\225)\277\246k\233\277N\034\211\277[\236,\277\234\220\026>\272\367p?\0059\205?\362\310\340? \311\224?\366_\274?\366W\n?h\234\336>\357\304\241>#\037\t\277r\232\033\277\022\356\306\276T~\210\275\220\313\264?H\233\217?\262m\310>\221M\211\276\256\304\030>\326\355\275>\013_\367>\2042\327?\350\237E?Nk;?\0346T?\006\265C?\234\252\031>?Y0?\266\300\200?8/\244?\235\014c?\341,\033?FlU?\224\024\374\275t\324W\276\371\020\325\276\230\276f\277\016\3743\277:\230>\277\323U\275\276p\004\237\277\364\212\231\277h[\340\277\274\351\260\277\206\300\344\277\332!\201\277\370\017\256\277\\\2139\277\365h\206\277\245Rh\277\350\215g\275x5\332=\226\3746?\177\030\210?\375.\203>\031j\225\277\272\307\331\2777\374\257\277\312\205\262\277\377/\237\277B\034\320\277\314{\374\277}\242G\277\342\032\260\277bO\345\277\274\201\257\277\277\322\215\277\353W\252\277>\264\263\277\335U\273\277\201\022\372\277\227\267\252\277\"\210(\277\220\001|=\314\302\333\276\362\212\306>\356\217\277\276j\361\030\277ibJ\277l\2249\277\255\257\225\276\362\203\245\276sK\177\277\310\2573\277\256\226j\277l\356\244\277\204?o\277\316\3007\277\004\025o\277T~i>\002\024/?\2344X?\240\265.?\305\035\340?w\260\210?\200\260v?\212-S?\324\256\200?\334\246u>\260\325\216=\234\301\335>\242s\321>\315Y\215>\303\343\276\277\016K\322\277\010\267\006\300\332\265\010\300\340\227\325\275\214\032\304\276\002\266\225\276\377K7\277\304\261\002\276\277\025\022\277\200\365x?\255kl?\013\205\025? \0239=P\204\262\277\371\312\233\277\236\016\273\277Dpj?\006\242J\276?l\342\275\310@\307\275\20246\277\332\300\203\277\244\246\256\277\215\025\244\277\014\320\207>\264\234\027>\021\025\212\277\000\247R\274\365\235!>`\321\r<\254\371\302\274m%\206\274\350\037\t\276\244E\t=s\022_?8\034?>$c\255\275\243&\371\276=\367\232\277\353^\241\277*\201$\277\273\r\375\276X\214\257\275\214\221e>FvD?\320G\270?\333\226\275?C\315\202\276\246\233u?\260W\230>\242C\222\276\360\233\341>\034xy?\372D\275?\006\027\254?\033\013\220?\366 \037?\324\223x>^\334\017\277\352\260\367>\347\002\332\276RF\207\276p,p\276\"\0041?@\025\356<j\373\025?\262iM>O~\013?p\\x=\177\323;\277@\ng\275\032\322\215\276\027\250\276\276\300s\230>()Q?\226$\224>2\020\301\276:o\313\276\313\331\360\276to\246\277\355\301p\277\310\007\253\277|\022\237\277\217(\242\277\216r\203\276\347d#>\366$\016\277\236sw\277\340\320\003\275\3213\321\276,\n\252=\320U\202\274a\217\r\277\220&V\277\322Q\236\277\236\"\364=\331P\026?`o\257\275\324\357\210\275\\\361J\277p)u\277\372w0\277pns\277\304o\001\276\300C\215\276\266f\236>\356JG\277\373\000\216\277P\223\177\277>\240\241\276\210\354\230=\354\037\212\277\375\014\003\277K\253f\2779\010\255\277\010p\303\277\275\264\032\300\334\250\205\277\277Zj\277\215\365\227?\302\220\271\276\325\334\377\276\276\210\016\276\374Z\'\277\216\246\244>\367\032\005?\026me?\307\347>?W\002\242?\024K\326\276}\254\213>/\2448?\006\r\214?\226U\260>\177\341\227>\"\021S?\271\025\n?c\203\277?v]\261>5\t\230>\204Q\245=\r\257\371\276\240\037I< K\010@\330A\313?5\010\001?\300\022b?\033\370\242?\013{\020?\256V^?J\333\253?\272\241T?\222q\330>\265m\364\2764P\031\2762\347\000\277Lr\233=&\342=\277Q\366\251\2764K\034\276^l\374>^R\001>=\010\300\276\020j\376\275\303\2371\275PNF\277\350\266\240\275\207\327\256\275lZ\327>\263q)?W\312\"?\202\367\003? |\211>x\376\365>\260\3208\277\202\344\376\276(\364\277\275\221\267)?\330:&?\205\210\235>x\027\264?^\030@?\250\354\016>\330m\367\275\263L\356\276\230oD>\"\372\274>\314V\261\276\326k1\277\344f\217\277\251\202\261\277\241\233\253?\225\242\331?_y\300?\270\010\030?\002\310\211?\345\242\223?XJ@?m28?\217\021\257?N\032P?,\313\014@B\036z?\016\'\336?r\362\363?W\367\337?\304\253\370>\003&A?\315S\300>\330\267*=\216\030\n\276\n\007\346\275\200o/\276D6\350\276\274\3204=\243\324\317\277\021h\210\277w\220\242\277\364x\320\276\350\257\213>\371\221\264>\014\\+\277\027`#\277=\204u\277m\177\231\277\304\355\213\277\315r\232\277r\251\224\277@\3303\277m\023\307\276\230\255\272\276Z\305\237=_8\206>\270b~=\002\330\223={\227\227=@\225W?\316O\200?R\203\232?=\221\024@\344\223\017@j+\355?\032\254\007@\274\247\276?/\352\201?\003\272\352?\017\025\004@\303\355\305?#\342\275?\256n\305?&\351&@\254\007Y?\200A\360>t\'\000>V\213\223\276\307\025\343\276nK\205\277dE\033>b\t3>.\205\230?\367\026\215?\304I\272>l\254\207\276>L\037\275\204\302\020?[\3430?b\263??\364v\007\276\t\036\335=\377\'$?8\005\025?\0047H?\020\352\033=_\230y>>\357\201?\002\335\270?\000\235\254?5\021 ?\364.\335=\262\367\325\275\021\004\210\277\272\222\336\277h{\227\277\272\271\322\277kaj\277\016\334\256\277\002\316z\277\206\304.\276\315@I\277t\375,\276\242O\347>O\003\211?y\271\272?\020\307#@\307\247!@\3678\371?\227a6?\r\253W?\212\007;\277\347Z\244\277\332$\314\277\r\016\353\277]x7\300\21577\300\335tB\300\013\373U\300\221Da\300:\267.\3008y\266\277\344?_\277\251\300\210\277U]}\277\267\211M\2776\222\371\276<\007\353\275J\300\206\277M\213X\277`\307\350\275V\255\204\276\014\034\340\2766/\005\277\251d\260\277\367R\234\277|n+>0\371\352\274\203\352\026>\031\335Z?\354\t\331>;sx\277Z\242B\276\2467k\277\200]p\277\356{x\277g\376v\277\220hx\277\314\302\t\277\313q[\277a\216\253\277\274\343E\277\'`\022\277\266x=\276\323\335p?\020{L>\036\364H?\304\327%?irH?\304\005\350>\237T\310\276\260\330\341\274W\223\003?2IB?\227%\263?\330U\230?\255\233I?\202\nx>7\365\r?\240PU?,\226\324>\034</>\267O\211\277{\272\250\277\260\022\016=\2344\265\277l\250\217\277\325+\255\277>\204\340\276d[\010?\241|+?z\210%?\336(\255\276h\3454?\204\236N?\273*V?\354\300\201?(\371\235>\340\251$?\356!\265\276\252{\275>p\367\315>&A>?\220?\304=\257\202\327\276\354f=\2766\272~=tn\020?\267ca?,\230\005\276\306\370\t\277\301\\\000\277\370\t\013\277\230\240l\277+N\256\276\013k\267\276t\266K\277\025^h\2774\036\271\277\320\307g\275\366|\232\276r_\254\277\020P>=\307pN\277\304\276\004\276\016\363\364\275\206\235*>%\311\342=D\2368>\350X\264\275\267\315\314>@\030K<\364?S>\244\326\202=\245G\252\275\346g[\277\247\223\227\277\356\272\242\276\263\215\354\276\205\266\032?\ts\006?\022\321\255>z\200\302?U(w?x\243\246>},\342>\002P&>X/\306\275=wJ\277\313\260\035\277\334\333\253\2769\204\026\2776*Q\276u\266\235\276f\260\261\276yk\237>Go\350>9\272\n?T\237G?\2668\224?\016\004\224?\007\316L?X\353\003?\376X\337>\234v\242>\226\237\003?RJ\201?\214\311\253?\\O\303?\331\324\365?\362\334\033@9\007#@H\266\014@\244(\223>\213\252O?D\365\206?p\262*=\350\363+\277\335\2041@=\3448@\016|\267?\360Q\305?\032\023\023?\377\254\234\276\272?[\277\356\234\202\276=\353$\277\3426\205\277Z\031C\277\240\331\357\276H\365\264\276`\327R\275X[w\276/\321\234>p\206h\276\366\242\236>\002\257\345=h\000\202\276 \257\237;\322<\314>d\232\342>\333\t(\277>\231\213\277\226)E\277M^B\276\":F\277\242U\212\276\372\237J\276\364o)?\034.6?\344\335\006?\340n\242\275\276\004\231=\204N,<FZ@\277\000\336\013\275\256z_\275\234\321\261>\342\223%\276Z\024r\276\233#\031?\216\361i?\350:\211=]\373\016\276\333|#>u\301k?\'\006\213><\357r>\334\314L\276\023\347+\277\037\372*\277\010N@?\037F\311?\216\232\305?a\034\377?\017\300\273?H\367\225?\370m+>\320\032\210?\030\237\254?\344\342\251?\235\007\022@\324\225\006@AW\201?\034i\'?\366\364D?f\261V?\300\263!=B%\303\277\177\244\246\277\010\213d=\321\246\007=\247\227,>\232\023;?\2646\274?K\026\227?\310&F@\\\3350@D\371D@nn\007@\212V\237?\004\0248?\310\353\225?b#\266>\261\020\220\276lR\263\277\000\253v<\214\016\223>\304Y\237>\203U\302?\217~.?\240\372\202?\2702\007?\026;e?\33565\277&\026\302\277\262v\367\277\214\016\023\300p\361\267\276\340\331]\277j\213\254\277\222\374\026\300\276\203\020\3002\320\312\276\354;\336\276\013\214\355\276\364y\342>I.\036?-4\231>\020w\361\2753<`>&\227b\275\240R\213\275V\250\031\275K\200\016\277\333\2315\277\342\357O\276\274P\377\275\236\t\217\277Wo\302\277\036p\206\277\034B\325\277\342J\255\277ken\277dP$\276\226\005t\276\366kc\2775\327K\277\312\024\204\277x\232\204\277\240[\314\276\374l\260\276\360\260\237=\240\200\033\275_y4?\320\352\340\274Y\245\014\277\334}:\277\261|\270\277\356(\326\277\233\273\351\277@\200\n=\252\305\242\276\356@\310\275\234@k\276\202?\017\276\253\302%\277C9E\277\244\r\217\276<aG\275\237\306\"\277\250\203I>3\333\351\276\030fV\275\324\262_\276\230\307\374\276d\216!\277PiD=\214\203\226\277(2\357\275\315\260\345\276$mV= \373\356=\200\344\341:\224D\003?|uE?\025R\023?\270\2131\277\351\363\201\276\203\202,\277i\256\364\276\374\371\031\277\024w\211\277r\245:\277d\304\335\277\374\204s\276\216\375,\277\364\237F?l\334\316\276\006\217\003\276\026$\341>\204[\213?\254\203\245>\035\347\344\276\020\013\234>\021K\213\276\356g\207\276\266\311,\277\366\201P\276\010\3667\277]\207-\300\226\003\346\277U\017\025\300\307X\330\277 -v\277D\355<\277f<d\276\222\226P>\217B\363=x\321\364\275\233\270\263\277OL\360\277\241\226\004\300\355\3667\300\250\347<\300zL1\300\227\376\367\277-\272\000\300 \300\001\300\356I\247\277Y\301\225\277\310{\302\277\252~_\2776\216P\277K,\362\276\252Z\357\275\322q\300>\201\006\273>(M\253=\352\324\353\276\005\036\241>\216\270\323?\320i\302?\030\270\321?\350\271\333?\363\2213@(0\364?\027\335\004@\272o~?,\343p>\210|\r>\000\016\000=\'\346K?\224\225\320>\375\325\376>S\020\003?*8@\276\361\234u\277\223\005\035\2778\303\242\276\214\024\365>\312\002\177?\330\263E?0ml?g\0079?.\010x?\313\325n?\210\024F>Pq+?\210\331\215?\321o$@4\346k@\236Z\276?W\"\007@\341\313\374?J\'\264?u\302\320?\220\353]=\364P\250?2X\346?\223O\277?\220!\365?\301w\225\276A\032\205>n\300\036\276\017\376\352\275\230\332/=\035\254\n>\030^\007?\310\217\374>n\232\340\2765aQ\276\244\014\337\276|\257\006\277\000\006\323\276\222\371\202\276\220y\237\275\377\235\314>|\274(\276@\252\362=\230\307*\275A\016\254\276\010h]\277\363$\321\276L.\240\276\223\261\235>\250\207\032?\026y{>q\"??\234\003F?\021\334\002?\210\013\225\275\356gU\274\335\376\370\275,\025\222\275\014C.>\354\245\202\276\006\231\310>\363\362\260?\221\253<?IE\262?\000\324l=\262W\250\277\362A\r\277\026\0147\276\354\306\215\276P\370\271<\275e=\276\013\251\206\276(\212\360=\267\2209?\004\302\026\276j\377f\277\235\360\270\276v\317\t>\271\277v\277s\237\222\277\254L}\277^\374\312\277 \262\322\277Bu\354\277O\332\357\277<\361\344\277\364\315\260\277n\224\375\276\300\2377\277$6\006>\363\347\030\277Sb\264\277\202\002l\277z.\034\277\007\343\030\277\323<q\277\257\355\213\277\2600K>N+`?\327\276z?\"\014\263>\270m\222?\250\377\361\276\370~\216\276*\006E\277\242\324\242\277\240\245t\277\376\261\357\277T\022\016\300\220\315\021\300\224\301\034\300\001WH\277\354G!>\000!\300=\020^\303\276X\257\275>\275\201\200?\002\211\006?\354S\271\277\036\227\032\277\361\001\004\277\376\001\212?\0249\346>d\346\200?\ti\376>\021\256\000?K\016\366>?o\366>Er\347>3\213\'?\300\211\254\274\006\304{\275\301\214\302=\376\262V?\316\244\255\276\252\017\032\277\260\204p\277\256Rc\277\0207\253\276\211@\n\277h\2079\277\354-\277\276\226>\224\276PZ\'\277H\tc\275b\262@\277S\351^\27706\367\275M\250^\276X(\310\276\337\031\222>pqJ\276!\227\033?\304]\302?\340s\022>*\034J>\255M\036?~\212\324=[\337\023?\016\270i>\220\305\275\276\322\020\037\277\2553\322\276\344\270\336=\224\366\010\277:t\013?\r\007p?\026\006\336?\342-\026?#:\035\277\222<\241>R\030\204>\020\275\254>\002\2539?\027\205\221?\332\024]?\306\312\027?\212\351\324>P\021\216?\302\365\220?\000\027\226\273l\243L?\356\356\177?|`\230\276\0165W\276t\346\254\277\216\001$\277b\320\020\276Q\222G\2776Ey\277\300\376?\277\322\364p\277\032\210\253\277\374\352a\277d\307\023\277XY\017\276\311\242\200>o\023!?_\370\301?|7\374?\373G\004@\026\251\210?\\\232\266?k?\220?\224\230\220?u\363\273?$\035\364?c\377\225?j;P?2Un?\246\245\351>\005\210L?T\244\341>Lu\333>\302\304\241>\234v\267>\336\233\034\277\005Z\336\277$\362\034\300\372\230\371\277P#\324\277\224\241\344\277\343\307\257\277yA\277\277\242\230\270\277\253~\235\277\006\202\265\277\305^\007\277j\375b\276N\303\206\276a\365\017>k<v>\254u^\277\010\333T\276J\345\371\276\362\007c\277\"\006V\277Y\267\003\277\334\032\212\277\246\355\241\277k7\013\277K\257\037\276G;j\275\300\273\316>\245\004\007\277n\270G\2763@\255>\346$\212?\265\350O?\225\252\352>8z\215\2756Pv\277\243!\266\276\257\237\234\276o\225\376\276\345x\367>\204\204{?\320\021J\276\266\035\030\277\033\276\342\2770\255\'\300\022\003\211\277\366\260\261\277q\244\203\277-\2778\277-\223d\277<q{\277X9-\277^\025E\277`\341\206\277\300m\343>i\367\263\276\370\246\t\277x\373/\275N\222\r\277^\256\001\277\002k\271\276\270\325z\277yI@\277\016\332J\276\2305\373\276\217\216\326\276\021,\r>\315\332j=04\335>\216S\365\276h\244\030\275\326\016L\276\377}\016\276\246\034\'\2778o\024\276\363\232\256>\007sX?\347\216<?\210\267G?l\007\370?\334\255\221?\027\027\344?\016&\375?J\035\352?\315Z\320?f\r\255>\016\002\035>\356\315\020\277,C.?\344\242c>>\370\306>\341\027\\>Z0\245\275r(L?Rwy>\225D\314>\202{\256>r{d\277\n~\253\277\307X\233\277\220\376>\275\231e\213\276(,W?\267\356\346>\345\\\234>\260\177\365=\007\341\316\276%M$\276A\2141\276\346d\222>\255\324\356\276\217\337:\277\252\036\273\277.o\264\277~\024M\277\261\342\371\276L\247I?\036\274\243?Xa\304?>E\201?#\260\030?\376\t1?\027\247\313>\\$\234?\372\030\331?v\"\177? p\314=bC\233\277\356\"}\277\003\326=?\346i_?m\321\240?\034\212G>\020s\235\276\317h\371>\310j.\275\250\363\005\273f\323)\277\252\037\210\277\350\306^\277\373:v\277\300`d\277\253\n\\\277f\242K\277\341\"N\277q#\251\276\340\006\312<l\223#?6 H?\331\3211\277&\202\220\277\322\342\213\277rR\023\277\252\372T\277\374\314\244\277\014n\236\277\322C\241\277\376\t\304\276\342\301\305>t\306\200\2753\371\350\275\245\312\210\2768\276\275\276\226\362\377\275\351\036~\277\342-\254\276\034:\343>\030\260m?0:\263<\'X\264>P\275\031\277\313I\357\2761\300\372\276\026uV\276\014\220\025>.\\n?\200e\206>\363\023\243?m\246\010@\223\"\240?\324\302%>`\3178<%\324e\275\303IV\277P\020#\277\320A\247\277\021\326\250\276\356\312\023\277<^\376\276\001u\317>\325\213s>Z\370u\276\274\353c>\030%1?\352\361x?J\021\211?\244\336\010?@)\311>\241\220\305?l\233\017@\322\263\030@\353v\374?\312`\007@\010D<?\036\243\026\276!\276\221>\366)\266=\356\211#\277\317\367\232\276\356\031/?K\242\027?\007\034\212?8\221\332\275\377\000\317>\330\016\360>\020\\\037\276\220w\014?\017m\034? k\200?k\216q?la\251? >\304?-2\327?\267z\253?B*f?\014\245\326?\320\203\315>\323\375\326>g]X\276\002!\003?.8\237?H\"8\2760\030O?l\201\001\277\200\223\221\277\3561\360\276\236\303\321\276\306\260.?]\r\272?^\007\253?n\236^?\\O\257\275\2257\336>\322\305\033?\317\233C?\360X\371>\2307\203?\232\325\003?Y_\344>\337\304\256?H\346\234?\205r\245?\266{\253?/b\264?\340\220\036?(1k>@\261\313;\371\366\354>cr\323\276Iy\223>\341F\024?yA\000\277\244\211C\277\254:4\276\025U\004\277\363\350\252?\210\333_?\354}\\?2\014N?\377\346\250>\360\356\217?\221\235??\231\265\006?\260\340w?\0355\244?\014r\343?\266\356\034@\365,\310?\355\013T?\220\243\310?c\273 ?\2731\212?>3p?x&\201>\226\222c\277\352\001\254>\364)\207?ii\336?zL\360?\336\371\215\277\306\344\307\277\201\021\303\277\021p\003\300\262\262\377\2779z\217\277\006\010Q\277\330\265\344\276\274\215\363\276%Z\207?\321\240\300?\223%\234?d\301\t?\220.\033\276\222\274\321>\220\373\000?X\330\003\276\355\330\360\275\273f\n\277\005\243\270\276\330E\333<S\240\261\275\340\2210\276\254\033l?\236\256\004\277\224C\314\275\230\310\320\276\202\022x\276\265\213\275\277\312\207\013\300\"6\302\277\345\256\342\276:\260\340>\033\r\227>\220\034\212\276y\232Y\276\200\200\273<%\300H\277\234\030;\277\312>\214\277\310\'1\277j\371\351\277\2574\364\277k\377\333\277\340\330\n\300\240\351\036\277\254\200S\276\030\021\231\277\244\304\262\276,\017E?1\232\236?&\223\250?\177\2130?`8\201?\0264\007@v\'\006@\370\202\256?\300(+>\242\315\021>\207Hj=\022\0141?\350Z\244=\232pC>\256\234\257\276\300I\210\276p\250\271>\353\023Z?\035\227\365>)\352\257>\212\023\374=t\241{?B\n6?x\234T\277\253\250\261\276\000\034\277\271}\235k?g\200\276?+\260\257?&?\226?^\322\374>-\r\031?\2355E?|\362\237?W\222\210?\200\033\r@\017\346\252?x\322\275?X\370R?\000\366v<\210\026\203\276\025(J\276.\211\247=\'>\360\2760\240\344>\310\031I\276\260\215\205\277\311\340\253\277\020Oy>\310\362%\277\302\220^\276O\260\351\275\017\233\253>\350\020v>L\027\241>\311\"\355>\037\374\377\276\013\245\327\277\347\250\272\277\"n\216\277\303\237b\277 \207\"\277\362i\027\2761\203\315\275\312\021\226?\3418`?\234\267\363\276v\340C\277\261\320\021\277tz\362>\267\370\313>\203C\215\277y\204\002\277\025\003\237>\3521\024?\203\035.\277\275\260C\277\\\n\216>\236\232\325>\231?\236?&~\217?\260\221Z=\220\212f\274\274\033g\277`34\277\220d`\275\351\370\000\2756\327\032\277\004\024K>*\362\246>\210\371\364>6\352T?0`\010?\200\036}?\345q`?>\307%?6\017\372=\346\267=\276\336:\020\277b\217\333\276] O\277L\232\351\276\330f\272\274\334\223{\276D5\201\277\264\272\177\276\325\2679\277\022\315\273>\374 \226\275\347}f\277\"\354/\277\300\377!\274\252\327\002\2763\247\000\2763O\177?\203\255\031?Mx\002?\200W>\273\332\260\205\276\345\372\315?\020\"\241?\334\233\234>\031\001\t?\2259\026?dt\256?m\001>?\240\\\004\2765V\000\277\250\203+>\312u7\276\310\370\020>\260\231\344;\300\221\301>\357\203\230?\034$\306>\374\001u?\342\203\323?\036k\016?\326z3?\324\244\031\277\246\321\213\277\334\326\267\276\372d\216>\337#a\276\276C[\276\334\263_\277\201\020.\277\351+\016\277p\246\220\274\376\213\014\277S\276\266\276\224(\001\277\375W\365\276\300(\026\276d>D>\220\035(\277Y@\323\276\203T\226\276\322d\274\276\215e\331\276V\367\236\277\265\270\334\277G>[\277\240\267)\2744bD\277MM\204\276F\353\334=\2044\345\277\247\273\034\300Xq\032\300\030\265\'\300\332\n\010\300\210\243\222\2774\035\312\277:I\257\277\300o\330\277\266\n\272\277&\276\231\277\020\341b\277j\3065\276\311\036\366=\303\323Y\276\203\225\317>&_\324\276\337i\271>\340\367Y?\310\342L?\006\353\013>\371\304\006?r\rQ?2\014r?\2253=>\220\354z?\262\307\235?\2109c?4j\335>\236\013j\277!\243\311\276\323\024.\277\210q\020>ma\244>\210\262\241>\206\264J?\010\337k?(Yp?\216Z\377>w.\355\276\240\360\303\277\315[\021\300+\022\344\277\352e\373\277\036\222?\277vs8\276\255{\003\277\364\202r\277\330\337_>\254\214\000\277\360`o=\316\0334?p\242\t=\274\225x\277\030\356\\\276\004\236\255\276\340.O\275j\r5>\2309\277\276N\371\260\275}\314>\277\221\017\215\276-\343q\276qw\306\276\312h\r?\370.\023>V\237\014?:/\311\276\235\361\036\277\244}\205\276\237\365r\276\016\213B\275\264\032=\277\32745\277\334Z\355\276L\307>\277\0168D\277\360v\333\276W\213\000\277n&\276\276\336b\024\2760z5?\360\026\262\276\230L\022\277 \206\340<\302\301.?\014jU>\277d\236\276\267\346\242\277\256Kb\277\211Z\344\276\031\213\205?\217\332\240?Y-\243?n\344\335?\356\206\245?9 4>\200\247\006>\017<\033\277#\'\301\2772\327\274\277\377\307\253\277\360v\342\277\243Z\006\300V\010\'\300\210N`\300\340\255\001\300sr\022\300N@\306\277\'\024\251\277\310\223\246\276\336[\335=t\332\223<\323\365p\277\215h4\277b\037]\277k\317\366\276-#\310>\276S\317>\230\361\034\277\3213\000\277\357\205\030\277\214\274\202\276\224\277\247\2758\032Z?\223b\223?\224\t\014@\363\007\025?\251\326\'?\227KR?\314{\"?\273K~?\300\371\205?\270!R\276\262\367\315\277\216\201\256\277\250<z\277\265\215@\277\362\252W\277pP\205\277G\353\035\277\226JV\277\353\214\212\277x\253\242\275.+/;\273\304Q=\r\346;\276\317\343g\277\225xf\277\350\021\233\275\350\312\016?\204:\233\276\350\005$=VD\005>\200\223\306=4P\252>Dy\243? \336\200\2752G5?\220x\272?p\223\265>@\003\222?\357\013\236?\021\266\333?\225\363\314? \030w\276X\023\222\275\273\363\002?\260o\351\277!\272\035\300 2\300\277w{\251\277\026J:\277\251\254\261\276Z_d\277\314N\n\276:\227\r\277jQ\201\277\016\t\374>\276h\232?}K[?}p\003?\3740D>\020\266\027\277=|/\277\2031\217\277|\200}\276\236\034\234\276\274C\035\277\317\267\025\277\226=c\277\252R\226\277}v!>\266\302\020\277\345>\256\277\257\356\305\277\317\263\002\300\316\361\"\3008zM\300l\210C\300\020\246K\300O63\300\316\366\347\277\016\214\t\300\273D\255\277f\322\320\277\312\251w\277\204\301\001\277\340\217\255\276~s\221\276*<l\277\222\215\276\277D\215X\277x\277Y\276X\312\226\276\200Yx>\357\031\257?\274\342\260?`\250\263?\004\365\367?\035\337\352?K\2368?\030\"\010>\321\007\223>\320\"\243?+\267\253?W\010\263?\223\246M?\002\357\311>\325W\004\276\000\244\340=X\201\262<\2235\177>=\347\345>\332\377\351\275n\327\303\27611\352\276n\301\016>;c\'?\024\332\230\275S\212\224\275\254\177u\276\210\337\031?\304\267\266\2764\013\252\277\243\365\270\276\200\234H\275\377\017r\276\002\253o>\002\224\315\276\340\010a\277\253\025\265\276&W\205\277V\242J\277\310)\243\2770j\236>\231P\214\277\346\216\221\277L\325\201\277p\336i=\020\222\215\274f\332r\276O\377\245?Xs\177>;~\274>\004#\007><\276\212\276(\314\242>9-\004\277U2\260\277\265a\265\277\n\".\300\332\344\\\300\246@\234\277\377f#\277l=\211\277\340\354\004>\340\014J>\344\024\337\276\252\265L\277\224>\270\277G~\202\277\027\201\364\276\324B\245\277x>\030>\216_\003?\336\345c?\343\212\247?\265\345\243\276@\305a\275\362\204\002?\276\030O?D&\034?|Q(?\240\225\236\274w5\023\277\207h\204\276\317\237X\277\314\027\237\277\004y\024\300$=\370\277O\037\225\277B\"\363\277zl\224\277\343\024m\277\257vS\277\346w\200\276t\230\031\276>+\264=\252)Y>\212\210/?B\026\321\276\037\030E\277\305\320\325\276Ba\014\276\236\017C\275\022\\D\276\230\317\302\274\201\265\211\276\262QC\277\306\356\013\276.\377\247\276\344\271\254\277VN\343\277)\324h\277\207\026\304\277\311;\013\300\304\n\361\277\346\231\266\277b\035\366\277\320\255\264\2770>\017\277\355Zr\277\"o\362\277\346v\242\277*\216\304\277\326\312\013\300\336\016\020\300t\034\215\277\300n\335=v~\263>\214\274u\276`\334]\276\n\346\264\276^t\r\277n\334\002\2770\205\006\300\217\322\027\300\262OB\300\370\017n\3005K\020\300\216\374\014\300\352\227\311\277\350\001\276\277\343\227\314\277\266\324\213\276\347\302\232\276\177\263\242>\353l\206>\340\300\201?0+t?\210\360\032\276c\014c?\306\350\230>b\317\030?\222\346\177>4\020i=\034S\032\2773\337\236\276\331c\254\276&\365\007\277\232\310\240\276\356\031\262\276A\264\321\276\033\350J\277\000\353\"=\332\371\r\277~.\233\277\316F\305\277`\262Y=N\036\264\276\305\\^\276\340|k\276\366\206\260\277)9\330\274\304q\014\276\275\014\352\276\034\266\202\275e\317|?\340\265\333\274i9\316=\200-\307=\344@\213\274,\016\327>\3704\022?9.\006?\264\010s>b!\302\276\352\340J?\035fr?\340\351\243\275!\363\013\275Q\302\362\276\\\0373\277\212\203\203\276\333\024\001\276\000\264z>\200\326a\276u\264\304?|\205\026@\014\333 @C1@@\367\321%@T^\342?&!\315?_\272\235?#K\235?\204A\n?\r\304&?\261H(\277 \022\200=\213\310<?\256\313C>U\240\332\276\377\005\204\277\370\014\r\277\"n\340>\210\223\013\276\031\262\364=V\212g>\347II?\030\247$?\271-\316?\266$\221?l\203\020?\200{\343=\234\364\032\277T\222\266\276=\345\361>\\\3137?\232\252&?\200!\312\273\353\232\253>\347r\004?8T\005\276\375Ia\275\307\361\256<\364k\026\277\001m\223\277\001\336w\277w#\227\277\t\305n\277g\373(\277\020q\273\277\265z\227\277\202\235\336\277\365\237\247?\006G\351>\204\024\n=\027\224,\277I;U\277D,\025\277^\177A\276\361O\004?\260\007c?\314Z%?\264\235\300>\006-\017?\224\023\333>[\305}>\000\242@<\317\302\236>\334\321\236?\375i\227?\277j\223?\342\205\366>\020-;?\000\322\342:J\343\204?\267\001:?*G\263?\001[Z?XVI?\253V\177?\356\243\026? \361f>\001E\340>\256\274)?X1\246\275[\272\\\277^\210\253\277Y\202\244\277\016\303\332\277\220vW\277>%\235\277\367\200\244\277\322\376/\277\0309\202\277\334Hk\277CM\226\277\217\307\242\276N\314\340\275\022\327\365<\220\315?\275\234,\037?>\344Y?\333%\212>,t\216?:}\001?\264\031.?\"\303\370>:\034\024>\334\236\316\276Y\021}\276h\"v\276m9K\276\"\n\033\277\252O\210\277\336t{\276\177\344\315\275m\336\017\276\235\335\247\277\310\236\256=\217:/?\314\032\215?\366{\260?\010\331|\276\273\315\003\276\330Q\243?\030\304\217?s\334\246?1\001\210?y\234\200?\336\tg?\314\251\362>4t\211\276n\355\220\277\371\273\324\277w\335\306\277\316t \277\313\255\241\276\230S\237\276\314\347\314=\356B\226\275Z\331h\277P\022\247\277\243F\336\277\210\032\231\277\374\2206\277\374\252\271\276\270\2655\277\270W\312\277\274\253\210>\221\3607>A\212H>\300\232\314\274\230o_<\370s0\277c\207\t?4 \002?\343\362s?\251\250\207?\263K\023?o\310\n?(\306\362>4\224\224\275\177P\342>\362\245>\277\374\225*\276{\035\017\275*\331\252>\321\306[\276@j]?1\322\003?^z\354=\224\353\347=aP\000?|\275\247\276\376\027\272>\246\340\232>\333\337\030?\212E\242>\222\257\257\276\224\010=>\034\274\230>0nS\2764\201\274\276\277i\324\276&\327\355\276>*\t\277\016\252\331\277\201(\314\277v`\215\277\254U\244\277\313~\335\277\350\251\325\276:84\277\226bm?\022u\004>\007\024\213>zs\346?\335\246 @a\354\354?4\216\347?9;\353?\003\260\367?\365\240\004@\340a\265?w`\222?\274\252\032?\325\025\216?\032J2>\003y\377\275\231\376\243>s\302\001\277\340L8<\013\350\363\276\233\227\201?\020\303\307>x\326\234<(\234X\275\214\225\\>\223*_?\326@\212?\270#\274=\322\325\002>\310\313L\276\372gD\2765\355 \276\2620\300\277\346r\263\277\356\224\225\277\270k)\277\252\325b\277\374\337\227\276\346\333M\277>\332\026\277z\264\235\276=%\277\276\000\271\341\276\000\365\272\277\332\334\007\300Q\372\"\300\364[\350\277\007\004\277\277q\305\364\276Bd\371>P\277Y\275U\034\017\277\373\037\375\276\340pq<\253\303\006>\325\336h>r\\\340=\032\020X>s\2202?\272\260\203?B\206\203?3\337\005@\300e\020\275w\235D\276\330\254\363\275\027*\334>\333\273X?\224\270a?\020\351\177>\2371{>\343pz?\276s\027?\264\330\254?/\227\304>,\266\024\276\2731\340\277\007\276\002\277\234*\207\277\336\345\331\277^\271\226\277\000\rb<U\204\030\277\266\254-\276t_\272\276\372\373m\277\2028f\277\tf\230\277\224\323\327\277\010\312\257\277\220\261d\277\225{\230\277V\324\220\277\0006\332\274\265\247$\277\374N\244>pS\336<\236R\363>\025\250\210?=\323\340?\0204o?6\344\211>\224L@?Ar\265>\204\376\026?\244rd\276w\005\001\277\337\317\215\27705\242\277`\217v\275?h\026=\335\020\300>\304ts>`!`\275\\>\355=T\313\252>\000e\206?Ph\322?\264>\301?\264c\363>\201TP>t\277\332=z\225\177>\232\213<\2776\222i\275\210\267\022>\300\220\244>\005SX?e\367E?\257\270\226?b\017]?>\032\263?[I\251>\335\335\313>D\2250\276\210\334\210\277\023\035\210\277<\356\251\277\203q\031\277w\217\221\276\376k+?\226{]?\031a\227>S\023\342\276\n\004\216=_c\325\275N\022s\276r\360\000\277\266\005\026?\313\010??\211\217!?\0229i?\356\257b?hS\251?U\374\033?kC\003\277@\347\031<\362{\207\276\354\370n\276\251}D\276\224\032\351\276\303m\330?\370\245+@\030\373\034@\016\217\001@`?\311?\244\255\t@\033\013\352?\225\221\305?p\370\332=A\346\345\275\026\335\210>\004\310\230\276x\213\207>\313\363\224?\220#a?\220&\234>\2006\226=\362\263#>1\234\033>\0022\262?g\376\276?\370y\221?\250\253\240=\2044N?f\026\327>3X-?\2704\270\275$at\2765\237q?9|3\277i\307\000\277@*\364\273\200\236\256\276p\254_>ji&\277\303\303\316\277\023o\301\277\030\374\300\277>\347\374\277j3\367\277\377\342\350\277;\033\237\277\2108\"\277\200\234\201\273\323\016$\277W\340\214\277\024\211R\277e\312\301\277\213\257\021\300\241\260\217\277|B\005\277\000\3054\276:\272Y\277\251\342\233>D}\004\277\232\025\220>\303\271\213\277\322jX\277(\357\356\275w\357\021?\352\r\233>n?\316>\250\272Z?X\263\240?\003-\226>\347,\215?h<\314>\277\275\374>\234\020i\276\205\025\203>\272\t\220?\262\256\246?4%\231\2765\023@>\227)\t?X?\227?\325B\313?\020\036\305?w\022\231?\264j\251?\237\003h?8\r\254=\366\2542>\251\312\370?\356C\347?\010-h?\343\213#?\306\001\374\276h\364\010\277\320Bp=\346_\270\274E\330\340\276\222\3510\277\020\200N\277\266 Y\277H\275\211\277\031,s\277\305\313S\277<\356\351\277\222\375u\277\"\266\211\277h>\302\277\256\237.\277\304\237&\276\357\3512\277>}\306\276F\355@\276\373X\212?\354\024\002?\3755\304>Z\021\021?`yQ>\312\331v\276L\017\013=\275cC\275%\357S>\337\231\025>X\026t\277\224\215\306\277\367\320\320\276s\375K\277\232\216\251\276\345\362\230>\313\275J\276\031pz\277\274Q\340\277\233\341\240\277\006\010\376\277\240\337\363\277\r{e\277+\267`\277\265\373\021?0\031(?\322\0258?\332F\340?^K\342?\335\016\260?\311\253\251?z\251\024?\304K\230?\271\034\246?d\017\325>\037c\014?\356\217\320>B8\200\276\354\311\377\275\3453\205\277\330\035\207=\272\016\311<\007\261\n\277(\361\022?*\216\035>\372c\206\276p\372\372>N\250\020\276\214 \370>9\246\'\277\374\316%>\211\032F?\'\355\243>r\256p?\376\321\313?h\203Y?\034o\337?^(\236?d~\017\276\244\226\367>\350\227\003=\3563\023?\000\003[\275\3157\372\274I\365\\?b\206R?g\273\233?\333\271\245?\206\370]?C\350\335>=\342\246>\347\356\257\276Q\330\006?\337\005\312>\003/1>5u)\2773,\025\277T\2212>\000*\250?d\t\214?>/\314?x\261\220?\362\232\032?,\361\253>\220\016\027?\254p\211=\254\226-?\207\343\216?p\n\214>0l6=\334cD\277\034j#\277\264\251\307>Gf\240\276\341\020p\276\253\335B?\375L\303?\350\211\325?=\216X?c\224\203?\326\342\000?\205+\241>\027\016\214?\234\237\035?\250?\221\276\360\242v\274\233\361\005\277\332\346\250\277y\275Z\277\206\270\245\276m`\220\27602\274=\213\262!=\270C\365\274\252\324z?\000\252\367\272`\n{\277yw\217\277(6\202\277F\351\274\276U\230\214?9\006|?\336V0?\364`\370=\222\303?>^\202\357>0[\341<\311\305\310<}\367Q>\240+\363>(~G\275T\t\032?N\334\234\276\321\305\021\277\263\215z\277\302x\233\277wM4\277P\325)=\351\345\377=\244y\362>\3647\211>r\201\035?`\304\'?\311\tj?[+\265\276\200$\265=\370\003\264\276p\2742=\275C\252\275\0372\206>\254\3257\277ZV\033>\3024\230>\220\255\206>\n\305I?\310K\237=F\0052?\265\334*?\202\332x?\263H\360?\302\343&@\224^\006@.\270\245?t\'\201?\332%o?n\255\027?\362\270\016?x\021\305\275\303Q\\?\317\236\033?\3746\204?&\030\364?\3609\272?F_\260?\016\326\256?\323\250\275?AQ\307?\210\233\022@\334\377\350?\234A\035@\266\375\361?Y\336\254?L\243\204?b!\364>\324e\242>|\344T>\250\244\341>\274\230`\276NPV\276\177\222\001\277\334%\177?fz\260>V\\\217\276\326\204\343\276f\007>\277)\201\234\276\233v$\277l\322\371\276x\334<>\303XY?\200\233\261\275\205\275\273>X\262\216=\277\247\266>\364\022\205\275\375\004\205?\227\022\022\277\250\2261>\025\274\024?\205\312\213?\231eR?\006\rD?\027\260\017?\"a\224\276\205\374\"\277\236\217\'\276+he\277lo\n\276U\200\211\277\364+\202\277|k\337\2770\204\312\277\010]\021\300`7\n\300\261S\t\300\2425\250\277\2106\315\276\246\214\021?\266\272\306>\036\367\256>^\313@?o4+?,\254\016?C\272<\277\266\346\215>\014KH>J\325\263=\272.\326\276\016\007\352>J\342\374>@\353\222?\244\363\257?\316\317\223?^\362+?L\212\264?\346\312\242?U\345\032@\264\010\017@\311b\365?\245Z$@\000\353\220\274i\033\005\276\255\2273\276l\232\t\277\376\005^\276+\022\201\277\234\003\311\276\364\324\300\277,>\215\277?s\217\277f\300v\277\326@\241\277\005\'p\277\227Nx\277-\317\023@\033T\257?\020\313\271?\241\263\254?S*\273?o\020\005@_\263\304?\351\036\206?,q\226?i/\201?\037\361v?\340\231\202\275\201\211\016\277\020|\271\276L\021\026\277\026\023\307\277/v\375\277`lQ\2750w\274\275x\366)?\022O\224?\2424\232?\241\365\222?[\355\014?\311|\324?\034U%@-\010!@\376\000\305>8\177<\275\204\003d\277\300\246\276\276\237\r\210\277\257EN\277\236\316|\277\214\272\206\277\312\224\274\277\r\377\257\277\242\331\220\276\031\337\310\276\"w\030?PZ/\275\321\262\201\275\201\266\331>\254\373\372\275\014R\003\277\r\036H\277\\\234n>\2569\300=\241Q\371\276\001\330_\276\256\257\357\276\375\334k\277\356k\361\276\ne\371\275\314m&\276n\267b?\340\263\300<\242cF?\374\016\034?\266\322h?Z&\363>\227\222l? q\263>\302\016\025?\212(\252=\3407\211\275\364\270\213>\270\202@?oss?\006\353\340?\3547\316>\200C\247\274\301\350)?\002\030\271?~\321\356?\302\037\271?\206_\344?\335\003\317?\363C\304?\034\0319?\331\230\007?\340\221g?8\3071?C\275\005>\371\311\034? \325\316<\325z\'\275NO\024?\036w\005?\0374\327?\3521\331?\372!\314?\236\241(@\267\3358@\222z1@`\0139@\000\254Q?\315VM?.\312e?\034HG\276X\204\235>\341\364\277>.*\200?\264/\013>\031\237\200>Y\305\211?vRf?\207d\255?\261i2?\000\223\004\275P\356\035?N\321O\276\341y\010\277\240\310\246\274P;\006?:\0303>p\303\200?\254SK?g\300\271>\324m^\276w\021\311>\021\304[?\262\255\027?\332\366\215?\327\266\203>\215\374L>\361\344\024?\352\rz>\250[\230?\204F\251?\003\353\264?\020p\005@\312\356x?\246\260\007?\235\261\260?\267\263\235?7~ ?)D\205\276\366\340\321\276\350>\312\276-\260\226\276\204\346\020\277b\336\304?\354\337\010>i\025\221\277*\272\255\277\260Xj\276\275\033K\277\335\211m\277\227\260\261\277R\035P\277\004\340\222\277\257\211\246\277H\240\247\277\336\355m\277qg\311\276\342\rZ>\3031\241>\031\341\217\276\214\030_\277r\307>\277QM4?\360\027.>\350M\260>8\324\330\276\321\320\263\276\242\306\343\275\345\245\005\277\325\212,\275\325\267\202?\351\037\321?\277\020\007@`E\316?\264v\263?\223\345\245?U\303 ?\257\273\226?\321\201\230>\211\341r>\2648\347\275|\246i\277zN\256\276\354\274\237\276\232\211!>B\325d>\230\255\031?\034(\275\276\034\227\314\275\030\303\274>\232\030\363>\314\373\275\2757\005\333=\303\257\224?\036\313X?\317\262\227>\365\256\350?\332\037\364?\\B\271?\272]\243?\340`\r=\211\005\377\276\014\035\314=k\2411\276\332\305\303\276\340\340\341\276\243\300\220\276\022u\t\277\r\363\212\277\237\224\203\277\004\020\037\277\276\221\244\277{!\016\277\000V>\277(b\241\275\014o\036=\326\237\254>dr\327\276\262\267\026\277@\305r\277k+\005\277\376\356x\277X\225\364\276l\016%\2775\363\204\277|\366\033\300#\352\t\300\320jL\300`D)\300\026c\211\277\025\032\331\277\232:0\277\306N\020\277\216\004\247>vQ\370\276\220\320R\277H\307\203\277\250w\213\277\217\306\013\300\321q\374\277AJ\000\300\227\252\216\277\036l\032\300\252I!\300\351F\256\277\235<\305\277\025\271\335\277\324\216\000\300\240\010\001\300=w\347\277\203y\242\277\351\342\300\277\275m\220\277v\333\220\276\217\303\007>p\021\360>\354\226\026?.1\'>\376\007\027?\377\264R?\215\252\370>\000\275\224?\204f\235?\026ha?\254E\017?\020e\232\277\000o\355\276\250\031\245?\360*E?\\6\354>\3647\213?e%\325?\026E\306>\2524\016>\326\254\'\2766\357V\277\261@\234\277\207\260O\277\230\001:\276\002p\020\277\0349s\277n\376{\277\370r\n\277\314F\364\276b\357Z\277\324O\234\277\324\371\212\277\177yx\277f\027\203\276\365\3266?\006\237\261>\310[\220\276K\3368\277\330\254\224\277\223\353\213\277CW\231\277\006N\264\277\277\3504\277\332\345\243\277z\021\202\277\216\210}\277\030\026d\276sm2\277t\014j\277\330\367-\277LnC?\234\245\300?w\303\301?\307\273=?e=\212?\000\245\254?\022\204\207?\352\265\217>w\240\224\277\215\n\234\277\\\023\274\2770\0075\276\312\233\010\277>\231\024\277\240x$>\245Z9\276\031\373\264\275$\352z\274\330-0\277\312D\346\276?H\333\277\261\022\303\277\376(\360\276k\t\320\276\006QL\2771\2029\277@\302\"\274\252!f>\030\036\010?/\253\332>\n\322\365>AKP>\260N\322?\234\364\250?\376\244\314?\333sD?\250\337P>\007\344\347?J\263\245?u\374z?\314\313\206?\003\312\206>\240\342\222=\276\\\236\275\363?\213\277*\237\r\277\251\0054\277\226\032q\277\000\333X?\272ld?\014\317)?\004\236\345>\034\244!>6$\304=\240,S=\222@\005\276\324\303G?\277[\303?Y\211\025?\200\033h\273\000S\303\275\t\024G\277\234%\034\276\370\307\377\275f\3624>\350\232D?\247\345*?\260\203\221?\274\375\231?\201\035Q?x,\010>\322\275\201>\246\303\212?{\014\254?\177\371\232?;\335B?.\231\261?Y`\216?\226\315\354?\343\353a?\245L\355>\234n\321=$W6\277\203\301\325>\220 n<H\034\374>\007\224`>\312\"\336>\032mV?\274 Z?\373\201\317>\200^;=w\345\347\276\350\2425\275Y\350\367>\326^\234?\242&\340\276\014\317t\277\342-\254\277-\316~\277\312kF\277\004\334=\2774\345\025\277@\341\356\276q5<\277\320\372\032\277@0\233=h\206\265\276\306\026\007\277\356\014r\277n\007^\277\203\036\r\277\221\275\t?\031!6?x\343\314=(\232R?Y\262\366>7W\232\276\356\247J?\302\256\312\276\200fI<+\204\314=\035\332\273\276[Sk\277\364\351\013\277\270|1\277\216|.?t\206j?^\365.?\354\330\262?\323\302\031?D\260 ?2\221\211?L\302\326?\350\220s?\240\323\177\275\376\301\324>\264l\332=jqI>\000\203\376>jCx>2\312+?\034_\010?\334\250\242>Tg\277\276QL\264>{\314m>\225_1?\036\'\246?\200*\213\274\023\307\273>\260\225\255<\252\306J\300\257\232[\277\275\3714\277a\366\216\277\301O\370\277\260\257L\300\220\234F\300pw%\300X\254\274\277\251\216\237\277\232\360\314\277\320\375\334\277`\320\230\2778\243\207\277l.\260\277\300\200\005\277A;|\277d\270\371\277=\347\236\277 \222\n\300\324\375\213\277\006\214\216\277\212\\J\277\211\0233\277l\375\023\277\240\343v=_\211\007>\270\251\256\276$\177\206\277\323\230W\277\020\277\255\275\031VP\276N#\007?\316\207\023?\240\031\301<\3160\330=%\2065?p\257,\2752\255\010?}p\244?XE\226?\022|\177?\321O\344>r\277\241>\360\340\350\274gP\023\276\240\177\201>]\362]>\225\307\365\276x\225N=\276\027\220\276\257|a\277\216\334c\277\306\365\211\277\222\217\245\277\030\\l\277Pq\007\276\3245\350>\220F\303\276\242\031A\277\262o\020\277<\303\274\276@7\031\277/^<\277|c$\276\253\246>?\344\342Y\276\357\232\220>\350M(>\322\251\201\276\316\025\021\277\230\241\203\2755,\226\2775\024N\277H\212O\277njO\277\212\232+\277\350=G>\312xl?\032\004\231?\323\276\237?\304\235\254?\232n\220?>\246\343?\027\017\354>\300\032\341;7:\331>\346\304\003?\324m\340>\370\327u\276\021\264\034\277\326e\037\277\252\ra\277 \237l\277\005\332\276\277\264\241}\277f\213Q?\215\273\364>|\361\225=4.t>t\005&?E\214\010>$\342\275>\204\246\327>\256\344\256>\241\345\345>\216\276z?h\236r?\037\002\222>\306\312\260?J,I?\260\375\325?H\211\341?\030\223\213?Y%\371?T\314\021@\250h\007@\366\3300@\271\233\367?r\242S\277\341\nq\277N\256\270>D\260%?v\356\221?\260\230\\?\n\033\024>\204\022\025\275F~7\276\310\335\201\276\220\371O=\224^\324><Z\351?\223\245\006@\016\0057@kn(@\357]\276?\201\370\373?\223l|?\0107\236?\032*\364>\332;6\276\224W\031\277p\306?\277\220/h=t\322\233?\231\334\256?\007R\016@\024\006\255?\010Z,?\327\017\020?t\035\203?H\206v?\360\255j\275\004h\271>\000)\211?\224M\274?\246\344\223?S_\356?\241\257\327?\020C\372>Z\037}\276\030\300C\277\000e\026?\270\350\345\275*\260\023\275<;\231\277\216\340\330\277t\273\010\300\220\207\257?i\240\276?\226\226\340?Q\'\035?\234\0165?R\230\222?\240n\241?\334\357\335>\336v\260>C\252\201?\252.s?\344\014\004>\236\213:\276rn0\275b@>?\326\211Z\276D\330\330>\300a%\275\324\021_\276bx+\276p\345n\276\314\307\277\276\317\360\247\277}\001\241\2772\225Y?h\343\003\276\367cx\277\030\277\007\277\220\321\036\276\0035M\276t\323N\277b/\216\277\262\245)\277\026\3077\276\244\262/\276\315c\247>\326\247F\276\021\350\352\276@\360m\2744\n\217>yJ,\276\347\233{\277\354\225o\277\216\240\r\277\254\214\261>A\250\"?\034\333\207>\302\361\307?t@\217\277\\N\375\277\247#\001\300\302\367\354\277b\323]\277\264,\227\277\036\224\317\276X\327\034\276\010\362\313=\204\027\030>\347\366g\276f\203\003>\203\022\227\276\3646\331\276\224\326\362\276\267\325f\277O\266\307\277v4\324\277\'2\221\277\007\203}\277\340\031R\276P\000\210\277\006=\234\2770`\350\276\370\010\231?\347\016\033?B\013\230?\035B\303>\206dL?81*\2761\'.\276ZpS\275\300\361\000\276\246\002\013\277\344\005\235\275\327\007B\277(\356\276\277 \017\231\277\250\031+\277\260\005\210=\362\374w\276,\244\244\277\366\350\313\277J\024x\277\332\241\213\2778\333)\277>_\000>Zt\351=\003\315\005\276\217l\225\275+\230\340>,\340\340\275\"\014\005\277\204\201\240\275$\375\246?\334\2000?\000\316\036:\301t\330\276(\363?\277\010\363J\276\274\'\017>\031\032\240\276\030\031\203\2770U\263\275\307\264\274\276O,@\277\300;\307\277\2421\251\277\371_\023\277@\033$=\000\'\246?j\377\370?\024W\230=\023\002\252\276v\002\337>\034_\272\275\003#\241=\224\372\325>\311,\247>\221\002\366>:5=\276\000\\\355>+R\"?\202\205\006?\336\0032?W\306\314>\322!\340>\212\237)?\264H;\276\340(;\276#\351\202\276\365 i\2771\025\234\277\346\232o\277\375\005d\277,6s\277~H\035@\263AC@?Q\034@\273+\200?\010\245\013?h\372\301> \307s\275\216j\022\277\376!\316>\200>\217:E\202j\277\313X1\277JS\016\276\310\366Q?\030\360=?\340=n?^n\215>gX\272\276hvq\277!}Z\277\276\345Q\277{,<\277\346\007\010\277\206\263W\277\224\316\217?\210\000#?,$\203?\234U\002?\302\\\216>F\0166?\032;\374\276\224\007\225=\236\014\301\276F4\r?\034+_?\212N\227>\320\t\270\274\021\201\356>\004Q$\276m\026;\277XE\256\277\nK\232\276\036M\016>\265\304\371>\336\273\226\276\346\036r\277\204b\014\277(\232\026\277\016/\265?\260\004\224?\220\335\352>\004\212\227\275\214\n<\277,E:\277a\0340\277\343\235\344\276\272 i\277y\360\254\2773$c\277\rVA\277\215\3030\277\362\203/\276@q>\275X\220o\275\352XP\276buk\276\021\341\250\276\366\220\'\277\272\371C\277\225Sx\277\004j\322\277\323\034\337\277\020\331\256?\211i\005?\0000{?>0\276?o\232U?\336\250\023?t\000\254>?\2307>\256\214n?T\234\323?C\003(@,>\340?ej\231?\302R\212?\226\207\224?\032\032!?\312\336\'?:-\206?v\322\212?\252\225!?\222\326\022?%\374\022\277\357\370\205\276\250\361L\277b9\333=[kK?\2177\374>*!\303>\351e\251\276z\265>\277\252\220C\277\233%\301\276\322ou\277\300\201\312\275\316m\206\277\220\246\016\277j]/\277N\217\025\276\214\330J\276~0]?^+\336\276[d\213\277\\\203\203\276\333\000\036>\010\031+\277%\237\001\277\177H\272>xaR>\372$\354>K\004\026?U\330\212>\313\014\202>\374\312\377>\242\000\241?\315\234&?x\0360\276b\206D?\351\025\031?D\307\214?\312\3178?\0312\243>\3572\351>\376\372\252>\314l\312\275S\232\377=\001\003l?\364!J>\340\217*=fL\331>\222C\014?\244b\201\276\353&\307\276&\220G?\262\343\212>\300\037\247\274\260%\214\273\271\326\321>.B\317\276\236\026\r\277\032c\274\276\277B\030\277\231D\243\277\352t\243\277\311_=\277\235{\032\277<I\223\277\3574\232\277LEL\277\221\265\365>\227\217E>`\232\375\2756P\336\276\354a\037\276\177\301\214\277\220\237a=\240\301\213\276T(7?R\375\037?\240A_?\346|\260?X\007F>\252\201o?H_\201?\217\201\211?\224\350\023?\313,\257>n\3359\276:\303\357>\343\016\203?\022\032\270?Y\364\236?H\t\221\276(\317\361\276$\300S\277n#\226\277\2778\036\277\270s\217>j\242+\277M\036L\2774\255\031>\366%\305\277\232Yt\277\032iP\277&\262\033\277\212\3227\2777\341D\277\370\036\211\276 \321`\277\232 \312\2770\343I\277\344\375\233\277\000D\347\276\356\265v\277`\005\202\277\005\261&\277lS\236\277\366?\302\276`}g\277\370U\254\2779N\201\277\227\306`\277*\344<?\205\001B?\314%N\276*\"\274?F|\245>\230\373\253\275)\247w?6=\217?\262w3?\262\014\001? E\326<\177\021d\276e>\277\276\230Ld>\340\021~?\355\225\002@\007\017\310?r\316\370>\351\375_?\213\311\242>\235\035\016\276\305\275)\277B\'\330\276\t\234\221\276N\000\216\277\320\n\365\276X\034\215\277\220;\236\277\370\n\251\277\037+\266\277\267\332\027\277\367`\243\277j\020\211\276bp\364\276\202\235\265\276\340\376-\277\020!7\277\305\366\216\277\035\367Y\277\207\273$\277\2002h\274X\315\215?\2029\347?d\3428?\231\"\267>\357\243\342>J\270\326?\\6\277?\354\323\221?^\204y?\373\2320?4=\302?7}q?j:\270?\312\034\210?9\243\312>P\'x\274\305\207\220\276`\301\032?\274\021\374>Sw\247>\252\305<>;\330#?\261\362\001?\232\375k?7\2541?(\001j>\370;\215>\022[\035?\366\2566?\356\3730?\321\333h?\010\007\336>\366$f\277\317\305\315\276\021g\276?W6j?A\321\233?\037i\255?8\026\353>,\211\017>TO6>Xo\242=\\XS?\301\204\277>\311\372\027\276L\357\257\275\274\214\327\276\314\204\236\276\226<U\276\302\216\000?\030?\240>ac\220\276\240\312G<\016*i\275\t{ >\036&\377>\342\267o?\330Ww>\\\201\255\277=\352\030\277\371X\023\277\024\001\240\277\220&\002\300\351\022\376\277\217\"a\277y\302\315>D\363\031?\024\345\342>\270\237\230>\212\340\024>8b\000?\356j\270?u\333\201?\361\372\327>@u\317<B\227\017=\350 \230={D\014>\246<\206\277\200G\000\276\030\344\r>\366%\323\276\310aF\277\233\027\230\276P\213\306<,Y\336>\256\255\372>\033h\253>\246R\351>\005\200\331\276MTm\276DBB=\007\275\213>\315~\246>o7\265?\252\262u?\030\306\202=\024#\227?\265W\220?\030\305\256?^S\320?\212M\370>\177\0134?\300De>)\032\004\276\244\263Q\276\026\3463?\276\264\260?L\255\245?\360\276\345?7\362\361?\266\340\026@\013J\206?\310\334\330?(\215\275?<\031\373?z\361\330?n\3640?\014U\317=\325\013\305>,\210\323>]4\010\277\211^\031\276\342\342\216?x\215\242?\365M\251?\204/C?H\2544?\014\365#?H\303\266?)\321\244\276\025m\235\277\216\001\177\277\032\352\221\277\206\361\206\277\304\276\245\276\252k\026\277\215\021(\277G\027\205\277\r\357\207?_\277\221?c\346\232?\220\023\304>\210\347\210>\\\030q\276\263\355\207\275\017;7\276\330J;>\000t\320\276\260Xo?\362\'\254>\2643\376>@-\271\274ec}>/j_\277\245\344\220>j\236\353>\334\236?=\224)\357>\302_m>\340\225\231=<#\026?(\336p>G\353T?\252\0272?\340\314\360<b\305\226\276\344\373\311=\251\360:>\3572\320\276E\354\234\276\314\231<?T\352R>3\024\315>^\313V?`\333\251=\034\020\237>2~?\276M\343d\276\353\035G\277T2x\277\331\325\247\276\262K\231>\242\313\357>\240\005\361>\352p(?E\253U?\364k1>P2\030?R\315\235>\341\r6\276(\020m\277(\263\202\277R\371\004\300\004c\377\277\370f\365\277\234r-\300\251\2611\300\240\005\"\300\263\014\223\277\261\177$\277&\335\352>\264\352\216\277\242O4\277\271\326\200>C\372\371\276\312\t\004\276\256t\211>\200\316\237>\226\205t=\363;Y\276\254\303E\277\200\244:\275\275\017V>p3\n\277\356y0\277\020lz\276\214\307\364\276\031_\317\276\236\260\003?\336<:?i0\246>\272\027\327=\377\370\030?SS ?d\301s?;U]>\353\325]\276\225\353%\277h\304\253\276\274T\262\275\257^Q?~\242\177?\000`\257\276\223\300\014\276SM9\277\024\301\034\277\360\222,=N\335\247>\242m\345>c\034?>\210Z\025\276.\316\301>\341\361\"?L\3346? \3413=j\034\217\276\201\304\236\276{b\376\276S\361\325\276hJ\275?f\246H?bM\324>\235p\301>\247|\255?\350\262\211?C\232[?\346SC?\230\260\243?9:!?\260\341f?\210A-?\230V\002\276\030\214\374>\322\220*>w\026\367\276CUh\276*\3310\277\000^\257\273\201\203\340\275\2542\341=\212\266\360>\006\"\265>&p2\277\312\227??\272%\371?\321`\t@\214d\024@D\305\322?&\370\306?f\\\342?\224\262\007?\310\330\312=\002\277\253>\200\254-<\275s\202>\022\240|?\254\2150?\3402\027\275-\334\233>\244o\t?4\354\264=\306g^\277\216U\245\277\2553\301\277(\370\315\277^\260r\277\023$\r\300\367#\260\276\233cY\277lJ&\277\021y\222\277\203\234\016\277p\274\373\275\340\232\366\276\n(\331\275\333Y\262\276\316c$\277H\267\247=\336J\211?\251{\212?\332e\356?t\014\343?\344v\027@\233w\266?V\372i?\240\365\324\274\026\341u\276\206\247\331\276B\320D\277\333?\303\277N\362\037\277u\323\027@\340\301\220?p\344\213=\3338\"?A)\366>\017\317\315\276`\037+\274\223\336n\277\013\\\362\276\220R\313\275\376S\215\275\016|\002\276nh\342\276\363\221h\276\240-\275\276b\250\226\277\024Co\277\200\025\021\276\020\3770\277\343\035\337\276:\005\254\277\320\351\005\300\n\256\231\277\327\245\232\277\261@\225>\322\r1?\274\333\004\276c\324\033\277\277!J\277\300?\t<\272\315f\275C{h\277\356\"m\277\270\375\265\277R\237\352\277\225_\274\277\275y\340\277N8\025\300^\003\250\277\334Y\336\277\250\245\242\276\354E\033\277\312l\202\277\306\217\216\277\257\221-\277\242}\027\276\216\no?\300\r9\275\027=C\2761Q\014\277\230 \316\277\034\025\005\300\007\356\003\3002\021=\277\267-H\277\223!\336\277\344P\202>M\271a\276\323W\001>\262\354i\276\202K\256=\366\335\242=b\327i\277\017\'J\277\321\305\350\276\346b\314>6\202\301>\257\271r\277\325dN\277\032\247n\2762E}\277\320\271\202\277\036i^?\234\032P>X{d\275\347~]\277\3201\261\275\035n\225?dv\220?\017i\026?G\204\253?\313P\307?h\005\222?j\355\232?\352\303b?\324\244\204>\264c\345\275\3758\262\276\316\211\025\276y\316\014?\235\"H?v\222\256\276\372\202\323>\034\262\222?\234\245\226?\360\205(>\212\004p\276\222b8\275\315=\321\276x\2217\277\032\325o>Dh\250\275\325\r\026\277\306H\027\277\0140t\277\370\226-\277\200-\030\277\360I\360<\365\000$\277@\222.\277\336Z\377\276[\251\236\277O\343\341\277T\023\000\300q\230;\300&\"u\300\207\020\003\300+\004\013\277 9V<z\233\277<\313\337\246\277,\353\236\277\273\206\264\277\240\342\303\274\347u\345\276\036~o?\036\235,?\202\210^>\322\216&\277\"\212\213\277Z\301\317\277X:\202\277`\025\234\277\016\177k\276\344\3536\2770SZ\277\243\307\035\277\260\032\200\275\360v\222>\004\213\262>S2\003?\356\267F> F;\276\030\321W\276\'\315\000?\250\374\324?\354b\226?\001 y?r\027\234?2\026\311?\371Jq?\"\333\306>c9\203?d\250\302?\374S(?\352\014\321?\363^B?]\271\331>/nc>+]\234?\200B\014@\206?D?\335m$?\276\341\213?\254Y!?\200\367\023\276Y\"\000?\246\304&\276\231\336\037\276\247\342\001\276fkA\277h\221\256\276h\251\030\277\025\250H\277\230`\030\277>d\351>\372Uw\276\213\264:?\370P\352?\303\233y?\334\357\000?\252T{\276t\021\260\276\346\007\201\277\331\314\013\277\246\361j>J\252&?\303\2553?)\177\245>\270\214\204?\037\002\r?\251\331\'?D\273X\277\300\351m\277~5\230\277\020\252\037\277J\262\274>D\350\337>\247H\030?f1\033>0\307\261>\302MD?\326D{?|_\220?8n\360>=T\037?\330\267\024\276\301\315%\276KQ\247\277\225>\'\300IdJ\3004\3763\300\\PU\300\317\274B\300\350\025c\300+\250g\300\245\226\265?\214\374\202>d\3636?\022\026\027>\247\351\021?\311\024\017?\000\347\013;]\356y?7\017\003?\033X\032?\366lP?\331\303\310?\027V\207?f\262\232>\030`:?uI`>\267\266\342\275\252o\300\276\220]^\277{\031~\277\240+\307\277mH\030\300\331fF\300[\202\000\3004\266\024?\344\312\254?\n\215\024?RW\207?H0\322?\313\325\307?\235\360\256?\324\320\227?8D\202?T\325k>\037\360;?~\242\266?\304Q\305?X/\235?\020\270\350?\032w\227?\000\215\231?\270|9?0\357\233=<\370\177>/\177\277?\213\330\221?\262\277=?i\305\250?[\301\003?\300,\332?\302\314!@L\344\272?T\"\014?o\202:?\3711\316>\374J\214?\273\346\260?\3501\301>\264\343`\277_\376E\277*\3158>:\017\022?\234\2370>@:\266<\311\361\017\277*>\022\277(\362\236\277<2\342\277t\020\255\277\216\271\363\277B;\026\300\250\022\241\277\343\210\023@\000G @\327\211\205?\260o\037\275O\211e?\341\302\037?\370\216\020\277\334\340\201\276\021\010\264>\222\375\271\276(2,\277l\332\316\276\2548\214\277\331\264!\277\202N\350\276\350\323T=$\306\r\277\267{R\277xH\241\277\372\267\202\276\330L@>\357\222\322=\036bi>\006v}>\0362\343\276\261\227\200\277A\3043\277v\006/?\252\371\010?\364l\022>\036$\226>\350ah?`\247\276?\205\211(@Cz\271?\252\177\224>\264\023$?\202\033>?\\;\254?\312$\"?\306\021y?\322\303N?\221\202@?\332\331\227>\340dS<\020\005q\277\301cj\277J\360j\277\005\271\022?\270\326\023\275q\2416\277JHa\276\310]\000?\345\224\355>B\276\264>\221\262P?\r&\222?\363\316\033?\377nm>\300S\276\277\0267f\277\230A\310\277L\357\033\300\216\3021\300\021X\007\300\345\363\025\300\335\303\024\300h\210\240\277u\367\276\277\370\016\245\277n\354\205\277\361\tA\277\317\265\241?\346\232\247?tlW?\234k\304?\333\007\264?)\305A?\2402\200<\231A\034>\370\251\311=u\t6?j\367\345>\346X8\276\217\361\016?\242pc?\204\362P?\376\247\242>\325\340\205?-F\252?a\\\260?\r9E?|\254\007?\220T\323\275\331b\316\276\000\032\270\273\331\244\014>ZpG?X_T?\373-\271?@\256j?\nP\262?N\223H?V\267\026?\304\223\022\277h\007\274=\271:\n\277~U\267\276?\0241?\240@\033\274WmJ\276\212U*>4\332\217\276\320\217Z\277,+\001\277\271\331\275\276\030\353\334\276\352\237V>\032\360\376\275\247\355\273>\005;\025\277EM\222\276\372P>\277\352\031s\276\301\037W\277\024\253\234\277\277\260\240\277\256\252\263\277\"\225g\277\346B\235\277\330\211\307\277\316\301\266\277\354\331\312\277\325\364\315\277#\303/\277\226x\354\276\273\t\205\276\372\247C\277\021[\255\277\213_\215\277\036Q\351\276\274\350F>\027\314t?\362N\246?\010\300\327\276\310\227\255\275<\337\003\277\032\031l\2776\365\237\276t\027\026\277\20016>K\260\200>^^\270>P\201\021=,\262H>b\305\n\2758\231\000?h\213\346=r\371i=X\250\355\276#\337\004\277q\n\t\277\\!C\2776\220\177>/H\355\276\371N\'\277m\361\217\277\344\303\363\277El\005?\200\264\376<f\325\235\2761\362\003?\302\2665?\354\370\261\275T\237\361\275\030\031V\276\020\375-=\354O\236=\2655\001?(\237\234?\206\335F?(\334\267?\234kq?:*\335>|bM?Z\034\004\277\367\242\214\277\344\\R\277@\2221<O\313\300\2766$\236\277sr\201\277\227\330\035?N\031F?\350\031\365>&\371\240>}*\325>x\322\356\274B\256G=\367M\204>(\361\312<\332&\305>\2363\351?\357\303T?$a\211?\350\366\225\275\014\2406\276\003\252\t\276\265os\277\346\t\322\277\350m\004\300\r\347\336\277\346\306\225\277a\325\214\277d\355\351\275\344\027\023?bd\234>\275*,?\214\027\232?V\360\315?\224}H?\034\203B?P\r\242? \341\357>\310l\314>\270X\004?\320X\237?\356\243\244?\200<\371?\027O\007@$\003!@\240\327&@\247\276/@\264\030E@\264E0@\r<%@\301!\022@\363.k?\322\351>?\215g\212?\000q$\277N]\262\277\374\206:\277E\357\223\277(\273\350>!\037K?le\017?\301\254{?\337V\204?\272\020\201?\221\223\236?\256\367x?\n\257\216?H\312\244=n\305\260\275k\246:\277\261\367\263\276,\327\020>\276p\250>Tf7>\250\310\336>\013\231\210>\204~\025>!\262\206\277\213\236\214\277\207\'z\277\003h\'\277\006^\322\276\232\033\256\276v\365\355\275\342x\323\276\010\217T\2774\375\237\277y\270\031\300\272s6\300o\201A\300\242\n\336\277x\320\216\277\230\313\356\276\336\314\035\276&\031\240==\031\356>i\234\025?k\353c?\236\356\271?\002e-?5b\032>4\377\224?P}\027\277\225#\262\277\350\320U\276\205\3337\277\340 \221\276\303FA>\004\314\356=\224\357\'\276\300\322\273\273\223\033k>C\372\332\275H\201i?\350\322\004\276\310\265\034\276`\362\366>\242\207\022>;\305/\277\341\2649\277\202\326v\277\354\362S\276bg\227=\337\217\014?P\010#?\240\0361?\014\330\213>\305\2414\277\302:\237>\335e\227\276\275\316\n\276`IK>\000\205J\273|\302\r:\320\370\355\276(]\362\276\342\313`\2769\226\222\276\007?\022\277p\246\032>\310\217\343<nK\245>q\336\231\276`\341\024?\263\301\370>\260j:?\2107t=A\032&\277P\265<>\322.\224\276W\304\323\277\024\035/\300\362\3762\277\225Y|\277[A\010\277\250\2205?\214\222\023\276(YK\275\312\344+\277\204\004\025>\242\256N?\234\3221>\003\272H>Dv.=\321+\217\276X5\240\277\357\016J\277(\242\003\277\324s\254\275\020Vu\276\322f*\277\240[\206\277\251\265\215\277\3037\236\277\364jV@h\002-@\337\025\340?\346\216\315>\220\347\351>\t\333\353>V`\032\276\200\272\340\276\334\270\020\277\\~\333\277\365\314\314\277\2001\032\276Ry\251\276P+=>\020\"\244>\344\007\231\275\0265\310\276\276y\330\276\357\275\312\276\255\337\213>\221{\243>D\206E?yNM?un\347\276\222\301J?\002qJ?\245\373\275?\034]\255?\230\337q?\360\010\243<\000^\347=\020\002\034\274y\n<?\364\276\037?\376\030\021?\344\213\023\276\241\273P\277\177\302\025\277\345IQ\277\024v\317\277\264\257\237\277R\306\253\277D0+>G>}>\360n/>\312\224Z\277Y<\244>2\371\304>\030\004\030?00\367\276\030.\017\2770\313\307<$\321\251\275\261\235\342>\340\363\236\276D\312\216\277&\032\214\277\244\245n\276\371\202\202\277\312\222\205\277\240\373\271\277\210\237\311=\300s\367=\351\347\262>\264oW?wk\233?\001\027\005@\352c\377?\030\332\355?BC\017@\240|\230?6\3643?\274\003:\277\265\331\252\277\312\273 \277\002\215\204>\333\346_>\310\325\354\276\000\330\262\275\350\251\005\277\033\212\204>\220\273\370\274F\216\230>\006\324e>\270\353\204?\302\212\236?\000\215\220\274G\370\016?:\306\343>\231\300A?\306\n\250\276\252\266!\277\274\307\337=\n{\210?P\250,\275\311lm\276\341\014\254\277\032\367\275\2772\031\346\277\320t\377\277\324\251\353\277k\322\306\277\252\325\020\300\243\202\274\277Zq$\300P]\014\300J\226\206\277r?\263\277\215\357\302\277\200h\353\275\266\347\036\275\321F\230>~\305\273>\374mW\277\301\201N\277\210l\332\277\240Za\276\242\335\257\276\360\363 ?\241\254Q\277\016\000\003\277\362t\353>\262\331\232>\302\210\031\277{a\365\276\206\321b\277\215\2535\277.\314\033\277\316\304\224\2770,\272\275`\320\257\276]z\036\277K\201\223\276\"\"\231\276\032\332\273\275H\310\002>\305.\203?\303\224\376>@\236\213?^\247\032?\266\366\242>\030\240\003?\350\210K\276\260\254m\277\355\177\037\277\2744\206\275\342\235\036?@3\236?\334Y\366>\270dl\277\272N\324\277\343\304\236\2779\202\204\277{\314\267\277\247F\277\276\363x\231\277\241d\206\277\325L\277\276\362\"#\276\316\3519\276X\251\220\277\375\000\027\300\036!\337\277\340&\001\300h\226\247\277g\245\371\276~\266[\277\212\024o\2770,F\277`\212\275>&}8\276\372\252`\277/EK\277]Yq\277\311\346F\277\274\304\027\277\214\230\203\277Y\364\236\277v\216\307\277\237\3710\277vdc\276\366Q\341\276\0207\305=\225\212\032?\202@\026?\363n\024?^\341\261>\005\017+?0`\000?\2638\233?\322\315*?\352\005\230>\022T\317\277\326\362\263\277W\337\224\277*\020\312\277k`\032\277\235\016\005\277\324{\025\276mj\366=8\213\344>\317\371\213?\272\350\226?\324\345\010>\000\303c>\2440\300\276?Q\272\276\311\317\337\276%\200\237\277\376\251\001\277\013\2702\277\036\231\245\277X\274\234\276\355\353\016\277\246|\222\2768\214\311\275:\251t\277\264/\342\276q\342\204\277&;9\277\332d\204\277\235\347\207\277\270\267\232\275\\L\252>\304\373!?\326\240\203?\222\367\330\276\324E#\277\346\027C\277e{\210\277\3407~\277I:n\277T\266(\277B\307\231\276\210\r\227?\370l\307>,\324\304>l\266\212?\226\320B?x\237\260?7\003\371\275\204\202\243\277\2143\267\277\230g\366\277x\262\370\277\334D\014\300\373g\013\300\027\267\365\277\222\244C\277\312`\254\276\200JO;\252\323\262>\274[\216\275r~\215?\3423\324>\244\240\022?\300j\351=vK\300=T\032\304\276vJ\211\277\374\213G>\207K\325\276\222\226\010\277#?\214\277\237\200[?\303i\354>\020&\037\277\317\303\216\277\204\031\321\277\366\355\330\277\027\273\333\277o\034\220\277\331\303\242\277\324b\320\277\263\340\255\277\201\343\316\277\333!\023\300Q\3449\277\r\256u\277\222\236<\277U!\211\277\010\305\352\276\242\360\233\277\334\370\002\276\032\237\352\276N\216\244\277\252\031\333\277\325\016\340\277\022\226r?\266\306\201?\306>\240>\312\264:?\271\375\207?\"\274\230>\270}\021=\205M\364>\242 f>\377\210\314>r\353\024\276NCA>H\231<?\3511x?\200\374\023?\310(\002>\316o\034?H*+?na\260>\260\316\215\276\251H\250>\324\240\203>\334\340\030?\361z\240?\005W\223?\245r5?\350mw?\362\370\221?.\366\021?\005\0355? \204\340>\206\326\217?\333\343\330>\216z\307\276\217[\000>H\263\245\274\r\037\366>\334\236\265>\237\344\037>\250J\031>\\\277\357\275\321\376`>=\032\255\276\027{\002\277\354\326\025\276\243L\226\276\373\227\324>\340H\237\273\374L\232\276\005Q\230>\332\225\325>\017\366\020>\341\027T\276ar\331\276@\'\003=S\022\345>\000\305\005>\013M\014>\025\364a>\010aa\2761!\212\276\314B\316\275\210\235}?\302\341\374>T\252;>\020tY<Ft\371<\267\322\246>\200\366}=\324C\203>\217\327c?JO\365>\312t\036@\250#\365?\013if?\036\206\235?u&\207?\345\300\214?!\271|?\n\224;?\373\346\223?\004SK\276\250\205:\277J\010v\277]\006\334\277\224M\237\277q\032\220\277!\026\003\300\275\307\310\277\260:\357\277.\020\204\277\032T<\277t\272\321>\000b{\273\303\243\003\277T\372;>\000*\000\277\374\310\007>oe\213>\200\017\003\277\272I\030\277\020\363\257\277\247\215\206\276\303M\344\276\r\022\230\277M\373R\277T\275\212\276HN\350\274\350y\002\277+\362:\277>\255^\277d\033\003\276\000\007\026?\200\013\276<}\n/?\030\243K\275DJ\023\276\024\004\200\276\000\026\243>b\322\331\276W\262\212?\2541\355>\230}S=\215\312\035\277,\325l\277\2303\030>\312\215(\276\332\345\213\275 \202\237\276p\303^\277\326\217\272\277\000\022\027\277\374G\222\276\220^\311=\312k\232?\026\342@?P\346\272?d\326\025>\022>\361=\310\200_?\204y\004@\023\251\230?\370\273\004?\336\001\014?u\260\330\277\317\353\021\300\227\322\372\2776\210<\300\323 1\300up^\300|\307W\300\316\227\031\300Yr\034\300\\\312\206\2778\357l\277\230\025\221\275\366\352X\276\354j\320\275\200\342\036:\213\210>?\320G\223?k\243\216?\311f\"@\205\014`@%\200D@\246\2402@V\261\002@\367\346\304?\263.\335?.=\376?\237\352\216?|c\310?\326\277f?\022g4?)lY?\300\rn?\032\234`?{\232@?\340\252t?D\207\027\276x3\214\274\303\3765\274B-\037\276a\021\022\277V\3372\276\230S\272\274\331-\014?\374v\353>\006W\341\276/\251h\276\022\324\240\275R\314\'>g>\251\276\035\207\306>\014\330E\277\2762\242\276\271\300\"\277\230\242\003\277Dh\343\276\231\356\363\2768X&\277AU\013\277\225\304\013\276PE7\2769\370\267=\375\354\027>:/\345=\002\234\325>$3\014\277~\217J\277\026\r\217\277(\307\201\2774\216\210\277|H\244\277\243\373\273\277\352\363@\277\357\001\324=\304\217\276>p\203h\275\272J2?g\355\022>\013\317\344>\024`\255>\212\245<>R\355\274\276<-\215>\374\213d?\362\340\260?\020s\236?9\3774?\246\204v>\326C&\2770\006\230\277\322\302\244\277\274.\246\277r\016\013\277\250{@\277N\260\231\277\311\375\210\277tW\333\277\363\267#\277\000\215\031;\341\333\243\274r\345\313=\252\023\217\276(\223\034=\216F>=\212\023\361>\276\311d>\204\311U\276\324\372\013\276\366)\225\276PV\034\276\026t&?\010\345}?WT\213?\274\363\264>P\307\341>\275\356/?j\r\254>\024\204c?\034|\266?\002c\225?\326\024\277?\n\352w?\036\"\235?\341\243\231?\326\310\217?\340\337y\276F [\277\034<1\277\216\365u>H\213k=@\222\251>LM\203?\364\2400?LB\027?[i\026\277\346D\037\277n\300\301\276+\351\221>\3751\225\276Gm1\277H\224\362>\261\350\001?p\225\300=Q\020z?sV\'?\r\n\204=\324\035\335\274QSR\277\266&B\277\273\212\300\277V\236m\2770)B\277n\020\365\276\322\303\343\276n)h\277\272\215\223\277\3111\244\277dD[\277|\035\223\277\236Q\244\277\356\251G\277=w:\277n\3348\276\254\312\207>\367C ?\000\034>>\020\004W<Z\')\277\324\210\217>\306\255??\320\351\221>\017R\210?\206Ev?\254o\202?.\303\226??SS?\356\252g?\274u\217?4\002\236>I\323\"\277\021\035V\277\235\2340\277\361aH\277\220wb\277\265\016@\277\21217\277\032N\316\276\242\373\177\277@\030\272\276HD\273>\177O\254>\245[\253>;g\217?k\355O?(H\276\276\002\t4?Y\307\"?nNr?\243G$?\n}~?\346\224U>\271\263\252=\313P\024?\377\360\253?\236\200\243?\030\360\372?he\305?\270W\253?\220>U?(6\305?\373\215p?\267\310 ?\017\031\006>\334\031\252\274+\022\240\276\001\376d?\027\353\303>\344\363\343\277p@\250\277K\204\234\277\0218k\277<\346\010\276\304\372\323>\3108\021>e\330.>\350\370\303=BD|\277\354\344\316>\211M\357\276\240\230\210\275\036\224K?Tk(?\352\345-?\2132L?L\265\253?v\231\351>\254\254K?7\347\030?\340\272\'?\030&\234=\243\205\210\276\324\327$\276\202\030\217\276\260\263n<\251\341Y?\240-\027?H\234\220?\371\336\203?\270\177.>\240~\307;4\325\351>\212\271U?\3344\367\275\\\203\302<\352\366\276>\320F\\=\331)l>\020F\020<:M\016?z\245\221\276\260\373\224\277~w\226\277\"\324\315\277\240F\350\277a\252\304\277\323\033e\277\314}\202\277\236K\273\276V\\6>-c\006\277&Z\013?7l\315?\231\345\317?\340F\206=F\301\314>\342\337\244>\356\245\320>\001\235\376\276<\354\020\277\216$0\277\251Ju\277 \275\355\277\244\\\003\300\0328&\300\214\327\222\277\036hg\277\021\337\030\277\323,f\277\032k\202\277H\223>\277\304%\317=iZ\232>Ak\300>vV\223?\312\"K?>\026x?\370~1?Xhm?`I\351=PD\031?\374\024\363>R\017Y\276\025\313!\276E\343J\277\256\240w\277\211\251\001\300\223]\326\277(\307\337\277Q\010\252\2778V\305\277\007\274\244\277\312\374\033\277\210s\331\277\237\322\245\277N\363\213\277\030~\205\277le\006\277\032<\217\276r\276[>\260B.\274\332:*\277\230\261\254=H\336\324\276\322\220q\276J\221R\277\022\240\262\276\376\214@\276\3267\326>Q\327\215?\271n\006@O\"\345?\311BL?N]\241>\277\201~>WB\304\276\242tn\277t\0000\277\325\007\372\277\363\322,\300^]k\277\\\333\300\276A\214\331>\371q]?C\237\272?\223\345\002?\244F\263>\263\367\245?\261\335\217?:N`?P?\000\275\023\016a>x\346\255>\336\233?\276j\305\031>\340}\253\276\272\'\242\276\264a\301>)\231L\277pu*\277\000Ry<\247\204\014?on\224\275\235\370C\277\240\327\211<*\322w\277d\205\274\277\344\370\226\277B\366\r\277\276L\031\277\200\362\250\274lv\232>\276\213\227\275\2668\204\276\277{\362\276\000h\310\276\226\\\356\276\2705\212\277\226\007\307\277\210\344\217\277 E\241\275\362{\243\276\364\324@\277\315\1771\277\367(r\277.\321;\277\177\206\306\276\273\250\214\276l\003\254?\\R\315?\211u\310?J\037\211?.\275\246>z\\<>d\255J=unC>\330\010\314\276P\'\250=v\300\261>\212\242\225\276\0269T?\260A_?G\307`?\252\016\312>\257\336U> \211\217>\342Y\026?\220\220\272=<\021\007>J\267 \2767\244\036\277MHR\277\020\260\302\277\331>\004\300~\022\344\277H\031\263\277\024\322\201\277\005\355\014\277\004$\">\202\017\242\275\266\"\024=\300w\207\276:\032\242\275\250r&\276F2%\276\323{\023>tN_\276(\024\276\276\344\245,>\321\215\266\276\000$\273\271%\002%\277\240\t\213\274$$\006?\314\225;<\223\036\277\275B\235>?mUy?h-P?\002\243\200>\374\023\341>@\3246?\200\023\027\274\250?\261>y`\022?\017[N?8{\235\275\224\253\233\276\352\r\032?\021\314\371>\000\0305\275\262\354~\276e7I\277\365I&\277\220\276\360\274\246\263\370\276\177$8\277\255\000\232\277\251\260^\277\r\213x\277\353\211g\277^\305\300\276\0008!9\364\035\335\275\364\003\020\276\376\322\225\275f<<>\177\020\216\276\020\357\311\274\373\363/?K\200\260>\216<\033\276\031\327W?\301ux>\312i\340\275_\032Y?\"\"\332>;X7?\305E\031?\242\347\005?\207\272\254?0\t\375?LOI\277\006}X\277,\240\237\2777f\254\277X\375_\277\370x\251\277Y}\031?\360\231\244=\221T\312>\234\313\230>\370\221D\276\222\004\032\277z\204\327\276\002\200\"\276\364\330R>:\2340?\270M\345\275\256r\256\276\210z\276\2762\030x\277\322\023y\276\347\265\270\276\252\231\335\276\265~_\277Ri\330>\263\326_> \026\357\273\254\223\303>r\365\306>\333\277\027?\304\233\237>\372w\305>\335\226\275>u\343o?\200\2349\274\356\270L>\306/\245\276$:\223\277\206\372\301\277\357\021(\277,\212\203\275P\2118>\374=\004\277TQQ>9\r\305>Xn\257\276U\237\201>\031\332\204?&\216z?|\017g?\260\363\352?Lb\271?H\215\216?P\246\333?\016d\005@\023\020\257?;\326\373?\305K\333?\216.\236?m\207\203?z\225\332>l\232\265\275f*;>\365\002\374\276\310;\264\276\342,\026?\030a\306\275`\302l>\267m\261?\326\304\232?\376\360D?\200\200G\274l_o>8\016\272\276Z\322\252\275\206\247\264\276\022\267\241\276\212\350+\277\334\266\212\277\300\316\001\277\272\367\016\277!\247%\277P\244\257\277\034_\241\277~\372\227\276AF>\277o\321E\277\250\201/\277\210\300\022\277\000\002S\2739\210\013\277c.\363\276\227$G?t\331\204>\034\2774\276\310\2360\276\243\320\306>\276\352!?\001 p\277\'\004\334\276;\033\207\276\266\270\212\276\334@n\275\3549\217\277\240\376\356\277\221\010\323\277\003T\363\2773\225\324\277\304\312\021\300\335\207\017\300\'\253\004\300\232t\033\300{q\310\277\276\025\r\300@\223d\2770\\u\277n\324\247\276\020N\362\274\205\223\323>w\335\221>\341\377,\277<\350\313=?@_?\352\022\201>\270\231\253>d!^=\004V\276=\276m\377\276W\302\020\276\342\215\377=d\371\273>\232Yb\276\272\354\213>X\026\373>r\221\344>\245\320\354\276\316D\035?)A\250? \243H>ne\237\276t\312D?p\243\223?Z\n\021?\270}A>\306\202\240=\336\250\220>\340\232]\274\225R;?\001\nI?;\272\004?d\212\223>h\362\341\276\201J??\017s\r?\300}\325\273\367p#\276U\255\371>\240\225\237=r%\001?.b\"?\370\245\n\276n(/\277B\270\255\277\267\004\251\277\374\236\204\277\255\263\265\277f\363\272\276\335\227\267>9 \"\277R\340A\276\260\327\342\276\002\032\205\277\370\351\035\276\223\235\371>\202\243\262\276t\357Z\277X\227\245>L\267\335>\230\037\324\275\243[\243\277T-\030\277R\215\306\277F\324\320\277\320\003\247\277\001o\234\277:j\326\276\353\331\n\276&\023\312?l\206x?\350\335@?\316\223\231?\200kg?-\227\272>z\344\252>`\261\344=\240)L\277\307\326V\277\200\333\300\275\326\273\263>\354\241\022?k\250\220\276ks\246\277\\\"y\277\204dH\276 1\211\276\335\271\226>\256\323\032\276OR\265\276\231\345\230\276\336\214D\277\232wy\276[T\225\276\374,O=\351$\021\277\342\020\360\276\254\\=\277\243\302\031@t\2518?waf>}\003b\277L$a\277\371Z\207\277\311\350f\277LO\201\276\"}\221=z\362\232>h\201w\276~\3662\277\301F\r\277 \306\025\275TK\270>\002r<?\016\321-?l\337b?\342\260N?\214\332\205?\244.\213=\200(9\277\365y\303\277^\240_\277\000\333\310?\002\257\352?\370O\353=f\351\000?1\270\024?\002\005\312>vf\370>\3004\254?\344M<?\222{}?<\006\242\276,u\352=\374=\203\276K3(?3h\207?^\274\266>n\371J?f.\255?\374\013\261?\234\253\320?&\300\242?\366UV?\000\276\257\273(\327\300\275\236\210\010\300\337\177\344\277\345\331\034\300{C\215\277\360e\302\276\346\365\202\277 \230\254\277n\032\016\300\024\236\004\300\213\371\230\277|3\222\277\007w\234\277Z\330\306\276\206\344\360\275o7\177\277\237\3718\277\033\207\375>\342_\026\277>-\210\2777\352\355\276L\276_\277\327#\257\276\260\311\034\277\322\350\335\277iHL\277\303\t\376\276\250\036r\277\210\370\027\277\352>\035\276|\034\313\276,\255\271\277\341\220\314\277\024\177\225\277\322\247\247\276\030E\341=R\365D\275\022\000\027>\356\256`=\345R\023?(\231\022?LY\361>\334\\=\276\3359\025\277\026\367)\277F^l\276\264\t\004\277 H\344\275\334\225D?C\235;\276l\215r>!\323\216>n\321P?\0134H?\233\3337?\372\016*?\323\010\365>\202\244\213?\246\257\222\276h\236,?\000\351\004?\314Y\220\276\032\264\376\27588\262\276\270\0019\277C\370\271>6\210\203>s\372\024?\314B\031?7\231\234>\257.\241\276^\372\357\275\0363\213>\253Ql>\024\273L\277\017\306V\277\327Z\202\277H N?\324\202\n\276\023}R\277\315\000x\277\'Tb\277b\234\252\277r\345\364\277\352C\r\300A\234\323\277\312$\364\277\020{\300=\342\031v\276.\016\310>\200^2=\022\325P\276\"\005\016\277\2469\251>\177\242\322>\361\234\252>\024\221>?\210:c\277\304\305=\276\020;\374\276\370P\t\277@V\243<T\235[?\000Z\242?03C?Pa-=\206H\301\275\302\247\032>3\270\003>\323\014\310\276\324\376.>\177N\376>\325L\017>(\330\022\277\\\220I>\330\203;?\320v\201?q\241k?,\241N>D\235\206?_\010h?c\005\021\277P\330\256>\373\\\334?\245\361\233?\322$\\?i\221\274>D\355\221?.\000\226?\351m4?\364\033\036>\016\321\t?\024\325\205?\204\274\231>\245\321\207>\322\020\314>\357\243\274?`\004\317?\220\354\241?P\224\335?L\370d?@|p?\362\275\313\276x,\303\276\254\256i\276R\350\010\277\373p\010?7\377\342>\204&\214>\010(\367\276&\266\310\277\376\341\317\277\204+\233\277\025[\017\277,9\005\277\037(\210>\301nl?\216r\261?N\341L?U\220%?n\255\232?\036\326<>\002\035\315\276\220\341\253\274\224\207h?<\014\235>=<\210=\312\001$\277\214\250\237\277\277^\340\276\342\207M\277\227\207\255\277\354\305\373\2774\232\026\300\324\314\321\277\210\264\341\277\022G>\277\004\340\254\2760\031\020?xR\223?B\340\203?1\231\003@B\374\355?O\220\372?\000\227\251\275\246\350\257\275\241\000\014\276(\374#\277vEL?\240\004\"\275l\004\245\276E\004\316>\000\242\226\275H\271\201\277\342p\253\277\252\024\217\277\267T~\277\213\361!?Yv\320?n\311\236?\370\227\350?\236\"\331?\332\313\245>,RV?\032ay?\211L\206?\214\251\212\276\177\362\n\277\031\251N\277\241\204\014\277dz\267\276\372dF\277\204|\222\277<\227\266\277\302\344\273\277f)G\277\274\021\257\277\260\212\252>\236V\\?\317\'\034?P\3147\276\246\261K\277\033\3605\277\n\265w\277P\345h\277\216\177\'\277\266\246\305\276T+S\276\330\005\330\276\366\305\363\276h\000\214\277b\301\210\277\024\276I\277E\304\032\277P\004l\275I\255@>\364\313\265?!\017\243?\020\301\t?\034\001E>\032\217\272=\342\301\246?\2028\225?\226s\360?dN\275>ZE{?\216\t\345>\210\212 ?\236y\257>\346\233\030?\034\370[>b~\213>\316\001\275>\223\235\314?\231T\327?\305\216\274?(5.?\226\373\347?\300\221V=&\006}>y`\305\277u\024\265\277\324\220\306\277\004\200\250\277l\274\205\277(p\221\277\3245+\277:\274J\2779/\301\276~\345\357>0:\243\274\007\3233>Q\376p?\262@\246?{\356R?\205\202:?\350\030C\276\004=K=l\032\n<\244e\016\276\242#\322\275|T\250>\352C$?\274\020!?`Q\207=\273\252\036\277\210\242\007\276J\266\363>\001\2611?\315YE=\272\343\\>\016a\210\275U\377\217\277\230\223\336\277\242\353J\277\254kU\277p\000<\277\030\252\251\276\321\324\202\276i\2110\277\242\373\244>\316_\263\2760\326\222\274\233n\347<*\001\207<Uig>t\225E?9\005)?D5>>\002wP=\272\271\237\276\022\325\273\275\2404/\276@\252l\277\202)\254\277\374@\002\276\274-E\277\2320?\277\207P\036\277 \264p\274]\r\373\275\262\366{\276\2550#>Ic\245\2761f\202?\300\027D\275\221y1>\003\335\261>\016\352\216?\270\223\023?\226\264\023?\375Qt?.(@?\365\312T?t\275\003>Q\200\214>M\225\177?\266\337\215?\340x\205?\262\340\366?=\256\365?\230v\255?\373\036\036?\262\344\277\276U\243\270\276\2300\315\276BWA\277\224\207\325\277\224}\220\277N\353R\276\340\324\001\275 \334k\277)\036\344\276\215\272J?\245S\370>\372\343\263?\266\205X?\n.\371?$\257%@p\321\010@^\220\\?(\347\263>\372$S\276,\203\376\276\275\262W\276\224u\000\276\325qH\276\333\024\014\277\021h6?im ?n\324\006?\274@\313?*J\273?H\352\253\275\037\345\241>-\000\251?\243\340\355?\323O\256?B\364\377>N^\217?\325%&?f8<>\331\364\023\277\016\035_\277\337\273\037\277\335\370\036\277\266^\341\276\363\002\377\276\346t \276h\326\224<y\366\016?z\324\230?\246\334[?\246\n\212?\273}\275?\027\237\226?\000\017\262<\251\363\326\276^1\000\277l\265\034\277\322\253\036\277\270\204\200\277|1\221\275\211\264\337=\223\023\r\277\033),\276\36501\277\246\247\346\276\260\\h\275=\211\335\277,\240\224\277P(v\277\265x\262\276\3203\357\276\376T%\277\024MM\277m\004\023\277\351\366<\277V]\226\277\272\240j\277\036\332$\277\374|\261\276v\246\026>~\237\252>x\344\372\274\375\276\033>\374\374\203<\327\355j\276\340\276\361>z\274\270?\2066\232?\032\347\235?\373\226h?oQ >_\013+?(\334\266>\245\335\330\276\000\250\275\271o\274<>~\006\234>Q/x?\342/5?,e\335\276\357\237\026\276\200\337\210;\350G\216>\254c\000?\306\010\314>h\371\370\275@\266\225\276h\342\272\277\340G\037\300 U\027\300\376QB\300\217\311\350\277x{\332\277\337\3650\277\336\245\033\277\340tL\277\213<\006\277\3443^\277\300\212\201\277v\001Y\277U\333\026\277G\275\376>Z\335\006?\245\357\221?\244\371\222?\350\221\267?\233\331\263?m\'!?4\301G\276O\331\'\277X!\201>\255\024\254>b!\321>\372F\377=\024\033\'\277\230\363\244\277\332\250\215\277b\310\237\276\270\364\245\277\300\025s\276sw\274\276\0004\377;\343m{\277\006\300\200\276\300+\235\276\022\303\250>\204\231D\277@U\316\277\\\352\204\277\231\214\301\277:\311\317\276\345\336\264\277+?\264\277nP\223\277\025\315\270\2779\236X\277K\323\021\277\010I\t\276\262`\274\2769\247\240\276\265\360g\276\246B1\277\312Z\222?\356\003\316?\223W\254?\312\317\252?\036\276\310?D\205\026@q\003\003@\0330\270?\260\227\273?>&\231?\300\217\300?6\255\242?p3\202>D\275]?R\322\266?\362\014\220\276\213_\032?\234\035\235?\350\223/?lmw?\2244\211?G\345-?\247\210\233>\034\035\227?\221<$\276\246}\344>\024\340\307?\020k\254>^\341)\277_%\024\277\010\312\270=\315$/?\200\243|?\217\202\013?Q\225\311>\0372\022\276\377\266\025>$d\352<]\335.\277ni\322>\252\315>\276*\273\345>\270\'!?Q]\016?\230hL=d\035\374>x\"\026\277\224\225+>\031\"\000?vh]?\250uw?\026\300\267\276|\316\336>\300T\032\275m\302\212\276%\020[\277\032\235\302\277-\310\315\277\270\017p\276\302\265\254>\354.4?\310\343\317=\236\262\333>%P\241?\344\244\240?n\010\231?\340\026\\=\2010\t?\250\367\351\276\365\032\001\277\340\340\257\277D0\376\2778\334\371?\026B\327?h\377\215?\026\266\251?\306\347\014@0\002E?\352\036\303>\212\267\242>0D\260\276\362B^\277q\2608\277`S\255\277\260\273F\275\3058\223?\034\332\342?\0140\205?h\234\320?\022X\323\276\312e\027?}\225\353>(\263\210>\252P\253>\010%<=\262\370\263\275\036\221\243\276\252\r\223=\347\007\021?(\363_? \016\251?p-\232?\356H\322>M\032\035>V\213\365>8\254\365>\344\253\322>\3500\222>\261\324\245\276\003G\300\276\301\\\274\276\354\360\023\277t\223\247>\202\306\020\276\324C\351=\335\261\257\277X\260\300\276\371C,\277l\370[\277\347Tl\277\214\014\321=\35048>\251\325\310=\032\220\370=\372\265\036\276\010e\013?\306a\232>\374[3\276\017\301\027?x6\331=\341\345\"?\034\321M?\276\037\255?t\247\014?\205\306\221?x\242\n?:\001S?\214\'\027>\320\324M>\326W\030\275\237U~?\360\256\344>\001\362\010\277\2625-?5)\273\276\346\213M\276r#\007\276\013\237\323\276\257\020\346\276 \232\005\2778\371\005\277T\314S\276|c@?\264\371\213>\312#B>9\236\272=\300\351h;:\'\201\274]v\216>\023\317\224\277jat\277\030\343\253\277\302)\335\277\225J\203\277\355]\262\277@X\231\274E\357\221\276\332Q\254\276\352\377l\276X\333o\277`\2331\276\016\367]\276nA\303>b\372\250\277\217\032\316\277\361\276\003\300ac\252\277\022\350\237\277\264\331\343\277<B{\277z\"\204\276U\226\260\277\365:\214\277\006s0\277\213\307\307\276\330,\"?F\373\006\276\024\202\271>\216\305\240\276\030\001\302\276`f\352;\367\005\261?\021\203Z?`\331z?\005\351\363>\036s\t\276\340\205}\277Pu\324\277pb\365\276\336\030\326\275b\323\033\2772\003O\277m\315\314\276\361w\205\276\177\341\354\275\024\232\224\276\300z\337\276Kj\221\277|\030\204\277\t3J\277\010q\311=\225\2279\277\324\255\207\277B\231\306\276>\251[?<\t#?\3357#@\300k\372?\242\263\023@\302\035}?(\252\r?nwK\277\260\302\310\277\376=\206\277\370\2530\277\360\237R\276\3319s\276\006\003\272\276\304\3248\276\340<~\276p\247\250\276f\023\226\276\360\372@=\300\361P\277\214Y\235\276\262\243I\277AK\032\277\310X\203\277H\212\001\276\"d\255\277\234,\215\276\361c \276\340\377\367\275\222_\034\277e\202C\277^\271\245>\200p\230\275\n=2\277p\337\222\277\365\004\274\277\206\240\227\277\366F\003\277\224#\232\277\016\244\265>\363\372P?4\0007?x\007\243?\340[\350?\022\023\204?\3652Y?\0370\206?=\021\371>\300\350\005?>2\307>\320\002\246\275|\\\267>y\353>>=\361@\276@\240\377\276\364\312??\374\2006?\202\004\334>\366\222\244>\020X,\276*\032|\277\377ZH\277\237zp\277$\253\227\276b\366\241\276W\242\202\277\244\366\261\2776\344\236\277`\240m\275Z\336\017\277d\350N\276\262g\031\277\024\300_\277\036\214\237\277\003\344O\2773\267\032\277&\036\344\276_\265\360\276\207s8\277{7\002\277\261\217\232>\024\345\203=\030\272\303>\314\236\244\276\021\032\321\275+V\026?\016t\375?)y\006@p.\274?\374\020\217?\2146\024\276z\017\010?/\021&?k\203\000?\242{\000?\010\217\030\275Dx8?\334\022\262?\355\230\267\277\261h\266\277\334\332z\277\230\030\305\276\313\023K\277d\236\200\277\344\300\356>~\212\226?\002\3657?\344\221\n\277\034\330\372\276\254\247C\275*\t\226\275<~\000\277@\002\377<\021\215}>\316\271\377\276\303\317\214\2778\r\261\2768\306\227\276\315\316<\277*\320Y\276\177A\212\277\030_\234\276\r\020\026?\013\262\362>\351][?T\177\324\275\230I\204\276?_\202\276\031\342\230\277O\206\010?<\301\'?>s\207>\000R\263;#+!\277~\304\364\276\276\346[\276\203\225\033?M\223\n?\340\352\365>\241\304J?\000\333z?\272\333\322?\270\343\'@\315I\343?<\245\366?&G\007@Y\322\323?\020b\034@\315z\354?\027G\237?1H\331?\020d\314?\305\230\205?1Iv?\"E\233?\250Yd\276\025\026\001\277\225\325\312>D\317\252?,\317\252?>K\330?\"2\007@xx\246?\001\007\344?\022$\204?f\230\247?\020A\272?\201f\177?\202`\217?\241\240T?7\337\017?U\252\021?\000\315 \275\315I\250\277\256\"\210\277\353\004\302\277\226\376|\277\332E\360\277W*\364\277\362\320\253\277\353\322\340\277\334\247\222\277\260TC\277\322(\276\277\000.\265\277<Fn\277\320\025\013\275\264+\225\275\010\006E=\213\024\032\276`\267\\\277\260\235\273\277,\366\250\277}\000\310\277\024o->\024\360\271>\236\324\037>B\344\023\277\276K\261\276_\036\016?\006\302\261?\000G\351?\3262!@\016\362\364?)o\340?(\2138?\345\265\240?\360\311\335?\352\242\n@2\260\336?\250\022\021@\346.C@\365\322^@\303 j@U[E@\204`I@\216P8@L\213\031@\244U\336\277\303 T\277\020\310\243\276@\276j\274\202\n\351>\246\021\227?\351\345\305?&\340\370?\031\205\236?\253<\354>\252jr?\251\037\254?\306\000r?OCl?\356\315\033?{o&?\320D!\276)\3165>\010\355z\276\332\t\017\2777\205i\277vN\272\276\027\237Q\277\210\025\023\276\314J\002@\200@\277?\374\234\276?\215\364\334?Zp\316?\364\216*?\263.c?\202\350B\277d\241\250\277\240\376k\277Ft\275\276O\266\345\277\360\236\\\277\320\251u\277\277\203/\277dd\004\277{:\363\27695\247\276X*\226\276\247\277\344\277\0241!\300\032i\030\300\202\017\365\277UQ\"\300>\220\025?\377G\016\277\323\324\240\276\0321\213?r**?hM\034=^\346\351>\272\204*\277\354\343\024\277\347\214\354\276\352\346\230\276\204}\025=\361\243\257\275\200\024I\277\214\365\002\276\343\327\260\276\017\010[?\330EX?]\251\236?|\207\226\276t\234I\276\000\301\253\276\340\374k\276\021\017\207>)\342\302\276!m\257>S\210\276\276\224\t\250\277\230 u\277\201\016\254\277\024\224\177\277 n\350\277R\275\320\277\322\024\214\2776O\031\277\245K\303\2772\326A\277P=O>\026Q\022>\346\312\277>\320\357\375<\276\241\017\277\036\300M\277\2035\270\277\364\341C\276\374\004\231\276p-:\276\257\346\210\275\267\313\357?X\331\240?\034\377\230?^i\375>\347F\263\276l\257F\277\002\3221\277\367\326\203\277\200#C\277b\367?\277Zu6\277\"[\204\276\002\303\231>sIb?\334\016\327?\271\206\213?\212\217\026?\016\250\257?R\224*@\262$U@e?S@T\r\035@z :@l\371\014@\\c\377>0\323\340\274\367\205\223\276\320kZ\275>\276v\276\345\332\215>aR\203?\320\303\027\275\033\310\351\276\340N_\274\351-\236\275f-5\277\344d\321\276\016)d>2\256_?x\2464\275\243\343\n?\272\237u?&@D?\265\334\207?f\313\006?pUB\275\272\371t\277CI\244\277\262\016\t\275n\2129>h\202\001\277\212\374\342>\020\033Q\2753\013\375\275\240\305H\277>\343\304\277\306?\357\276A\370\205>\371\276E>\3401\350<(\006|>\276\037Y\277m\221\035\277\014z\235\277\202\372\371\277=z\213\27732\251\276p\002\262=\201\345\001?\336=\253\276\274\322\342\275%\224\\\275#\332\365\275\241\2372?\316\363>>@E\203;\3313P\2758\250A\276\000&(\274\034\211\307<\214o^\277\260\247\024\277(?\235>\240\261t<\023\220\246\275C\363\213\276\312\261\032\277\323\264\014\277\246\020\005\277\032\275\211\277T\343\345\277N\'\020\300\013+\036\300\0017=\277\206F\250\277\003n\241\276{\367\002@\363\227\337?\262\021\353?!\312|?k8\241?\354i\202>\210#\276\276x\311\031>\266?2?D\273k?\303^\271?\265@\010?\244\037E?\232Jc>\326T\376\276\325\355\247\277\250\243\363\277\007N*\300\214Q\002\3004M\n\300T\300\002\300\240\3579\275\320\322\337\275\260T\377<\303\021\310>\274`\203>\330\362\224?\262Ah?\251\244\'?~\027\200?\313\223\210?\324\213\036?\260M\276=\023\021G?\210\010\302?\314\226\314?\267\243\305?\257\314\262?\336\224\311?\254\302\007@L!\314?x\362\"@\034\346\211?\220\265\354?\303#\004@-\313\321?\\\300\263?\334\272\274>\201\355\035\277\274\212.\277nf\022>\255*\265=\236&\035?\336\317\032?p_\224=p\353\323\275l\366\006\277~,\204\277\372\326\366\277#SI\277\337.`\277\244\\\206\277\276J\254\277YW\240\2776\351\327\277\322-\313\277\037\372\327\277,\225T\277\2443\216\276\246\326@\275\276\214\241>c\032\325\276;@\267\277\235r.\27702\263=\377u\370>\376\\\021\277\243\314&\277\316O5\277\306\204Z\277\033\346\330\277A\274\022\300\023\232\236\277\002\035\331\277\262\221\024\277g\000C\277m\354\255>\365\366\020\277\247\325\321\277\274\364\340\277%Jr\277\000sa\275N\354\370\276\217\035\240\277\353\026y\277\254tf\277?\2563\277\3600\354\276\254}\t\277\300S\237\277!1\226\277\372c^\277$\013\227\277#\301\370\277\036\267\016\300gV\007\300r\236\225\277-\206d\277d\261H\277\014\320\232\277x,a\277\250\333\233\277,\'\002\300^\320\207\277%\253\374\276Z\223 \277\354L&\277\360\343\244\277\tt\032\3000\2178\300\373\3509?b\232\201>\270\211\277>$\2074?\007\213\272>p\267+?\354P\223?R\332A?\264s$?\376&g?\270\n\320==5\004\277\014\026g?\305m{?zK\234?\354S;?\035\0106?8\r\364>4p\220?\276\016E?rcb?Z\371\342?\366r\234?(\003\234>q\242\022\276\212\315(?\3608D=\2269N>rJ)\276\213*\226?\3165\267?<\232\316>x {\275\364\020\300>>sU?\222ZP?i\024\320?\300%\033\274\251\235\006?\n\303\341>\230\030\264>l\033\272?=\366\235?\030lQ>\025\352\275\277\300\021\021\275gc0\277\327\354]\277\222Z\007?\t\367^?\014\352\203>\022\r\325\276\356\376\323\276\030\211\n?\350\244F?\274\360?\277r\216g\277\220f\'\275\'EL=\274j >\036L\211=0\346\200>x\315p\275\325\342\'\277\325\rP\277\346\230\031\277y\255\212\277\331b\257\277.u\322\277mO \300\026\361c\300\344\0172\300\205u{\273\322[\027\277\304\322U\277\326\024\252\277M\023\302\2776S\241\277\256\"\211\277\000\321Y>\034k\226>\333rJ?\330i`?\023\3470?Os\257>G\024\003\277\000g\010\274\031g=>d\2027\275\316\360B\277\226\205\374\276 \310\310\274\266\016i\276f\235K\277\377y0\277\274\316\360\276\310\304\344\274^\347\335\276\350/\000\277x`\227\275=\262\223>\233\014\016>\277\010\242>\250:\326>\312\274\020\277 S9>+H\320=@*\226\276\354\241\250>(\036\025\275;h\216\277\342\314\320\277\264\277\367\277\377\315\317\277zgS\277\010fg\277M\002\206\277G\215[\277Fs\331\276\350p.\277\357(\244?0\3678?\322\365\013?\202\325J\276\031\257\026>\302\022\032\276\002D\363\276e8\275\276\245\037\020?\320o\241\275$\343-\275\022\345\271\275*U\233\277\022\002\022\277E\222k?>\307\226>x\310\337\275\026\246\237>:\363\272>\"=K?t:\327>\356\002d\276\214X\204>\300\037\327>\033X\010<k\267\312\275~\342\327\276\374\027\305\275\017\341\217\2777\034\265\277M\264\254\277~,F\277L#.\276sr\316\276F\236\352\2763\345\234\277\204\325\261\277\302\266\216\276\212\257z\276k#\272\276QL%\276\257\300\004>\000\235\327\276>\276P\277\203`;\277>l\367\276D\220\306\276=/\014?k\305\227>\314\301\027?\\^\202?X\237\265?\306-\226?M\025\201?\337\'\255?o|\013@\332:\237?L\320\213?\234\240\303>\214\307\261\275~\266\222\276\336B\233\276\224\375@\277\2616A\276\313\316_\2766\210\244\276r\206\001\277\213\260\347>\357\217\377?7\027\200?\2367\327?\327\345x??\005\361\277!\211\263\277\033\242\260\276\352\305\224\276XY\352\275\374\221\267\275\n\337\374>D\005\251\275\340\023\361\276\200\no\275k\376\030?\302\275\316>\301N\234>\356\354m\277\005\321\274\277\r\307\203\277s\302\253\277*\\\365\277\353\364\247\277\326\347\001\300D\245m\276[?\321\276\360\206[\277\310\267\034?j\227\207\276\306\340\364\276\000[$?y$0?i\316\274>\234[\'\2778d\336\275Q\033\306>\276\300\026?\034\315\226?\314\177t?\314\310\224?\264\342n?\036\312\203?\216\276\274?\340k\366\275Z|]?\241\002\266>L\0232?-\3037\2770=\252\275Ru\234\277\211\307I\277\020\3753\276\007J\001@W\203h?\006.\223?\222\217\302?\020\215\006?\300\233\022\275\256\273\265>\302\264\320?\334\230b?\230@\210>\314i\005?\356\311\033>\314\275\035=v\005x>n\005d\276A\326\267\277>\372\311\277\276\350\242\277\034\220=>\304g\366\276\354j\303\277\224\357\361\277\217\204\350\277\236;\000\300\263\277\200?+\356\022?4\223\350>\312W\345>8\235,=\245je?L\031\263?o\235\240?\326\n\344?\245\0249?B\027G>L\263\341<\346\033\257>\242\254\027?\344\311\001?v2d?N\330\310?\254D\002@XM\"?b\210\245>\352d\264=\314\022=>\037\004\301=d\260\215?\364\372\366\276\t\tG\277\242\260k\277\202#\223\277$\354\\\277[\331\224\277%v\271\276M\275\220\277\337w\207\277>\222i\277\217\247\026\277\316\352\261\276\270\0056\277S\217\027\277\271\307\032\277\322v\333\276e;\241\277\274\032&\277\260\013\261\275\003\203\310?\345\2247?\300mN\277v\237\247\277$b\231\277\306\334\200>z\372#?=h\004?\0253\327>\332\254\037?\317.\252?O\350\340?~\007\026@uU\323?\352\236\315?g\215@?_\335\010?\264\0275\277\035\303^\277\203ip\277\240\277\302\277\035\230\360\276\030f\351\277\001\306J\277\322\315\204\277\0021\357\2760N\315\274\226(F>2\210:\276L\263\363\277\370i\003\300\254v\323\277\372\266%\277\244P\341\276dem=\305\3014\277\241\252\"\277\004jL\2776\377\330\276\036\'\335\277F\326[\277\343\373\010\2774Os\276\005r8>j)+\277\237,\365\276`\003Z<\224\235\305?\274\205o?\340L\302?\020\320\n@J^\331?\212\200\265?P\211y?\220\332\320?\026\377\361>H8\303=?\010Z\2773\325\312\276\"\350\001\277\007\211\024?\020\202Q?\337\306\343>-\306\257>(\'U><(M?\200\301w?\366\334u?\314\353\321>|\216!?\236\352-?^\230\305>~\0078?\374@\226?\272X\265?\243e\215?\014|)?\365l\357\277\031\274\235\277\264\261\332\277^>\264\277\301\266\034\300\270\225\367\277Z\307\030\277\366-[\276$r\321\276\234\237\010\277\337fm\277&\254\235\277\014C\002\300\355\206\222\277\3355\341\277[\212$\300\016\'@\300\350_\216\300\214lb\300\333}\247\277\000\351\375<\177\245m\276\207nB\277\020\361\225\277.\257R\277\352\241\331\277\220\215\034\277Ls\305\276Rk\361\275\320\357\214\275\361S{?\t\033\371>\360<`=\001g\204\276\203b:??;j?\000gb\276\236\315I\277<8R\276%\252b\277\231\371\325\2768\247\"\277\"\002{\276\032V\240>\265\323v\277~f\263\276\331\201\240\277\024\312\311\277\330\237\313\276\031{\253\277\275K\222\277&?a\277E\262\023\277\276E\243\277\2300J\27786\311\277\224\301\323\276\251\251\027?\036n\014?\271\027;?\221\\>?~q\225?2\370\010@\r\251\024@8\300\335>\264\215\204?\034<\027\276`{\303\276\330\300\323\276\000\367)\277\366g\304\277\2341\333\277\303\t\032>\004\177%\276\010\236\217=J\010\331\276\006P\345>\306K\030?\201\216\327>\000]6\275\343\334l\276\364\215&\277\016\320\240\276\023\362\307\276\014\230\334\275\214\307\010\2760\344R\277h~G\277\222\177\350\276lkM\277d\236\211\277RF\304\277`|\244\277F=\332\277\327os\277:\376\024\277\016\374\217\2777<\037\277\336\350\252\277\212\3522\277V\274\274\277$\220\260>N>G\277T\256\220\277@\034-\276\022R\"\276\266\233;\276T\364\303>\243~\201\276z\270\252\2768:\375\276\020\314\220=J\025v\276\006\257\235\277XwR\277\226\356\232\277(l\250\276b\232l\277\373\"\n\277jx}>T\244N>\"\205N?8\320\233\276h\202\n\275aPR\277`\235z\277\301\245\034\277q\031\274\277b\274\270\277\344\000L\2774\276\270\276\000\310b\275v\217!\276\202\222\360\275XA\222\277`f*\2757/\305\275\377\306 \276~\300}\275:XP>,\351q>\214\233\303>\217\325\226>\010\247\243\276\256\241Q?\312\201\002\276\263\351L?\260\312G\275x\r\255=\347\013\215>\374\274\030?\364dn?\"\312\314?t?\241?b\005z?\n/s?n\240\312?\017\253=?N\326z?pX\256?\264\026\274?\252\260\247?\222\221W?\222\220\001?\234\351\313\275\346D\205=8\353\377\276\334\222\213\277\2626\317\277\027!\020\300\014\t\034\300\234\322\271\277X\370\205\277`A\016\277\362^\243>\275%_\277\336PS\277\202\274\351\276\227\220$\2776G\231\276\355 \016>\222\252\230\276\320\237\033\277\036\"\226\277\355\363\200\277rT\017\277F\306\246\277|\323`\277\371:\326\276\240\237\275\273\373\220\324\276\202\366:\277d!\016?\262[X>ad)?q\010\002\277\n\005E\277\300\2166<\354^6?{\365\210?\216by?\220\364\237\276\tt\003\277BI\342\276\"7\007>\221$\301>?\3274?\310\247k?H\221\336=n\017\017\276\350\'\236?\324C\247>@+<?\267i\010?\23635?{^\006?\237\320\236\2768\\!?f\372\270?\340q]>\024\323\234>\315\0026?oYB?\200\325F\274H\016\\>{\t\247\276\364\316\262\276\001\260\366\275<\240^\276\206(\211\275t)\023\276\330\035\321\276\254\302\235\276B\\\211=Bw\330\276\260\347f\277\035\215\207\277l(\377\275\237\031\001\276WJ\373=\363\341\300=\244\030\223\276\304\343\004\277\3402\303=o\242\255\276\276\325(\276\236\251\026\275\264f \277\314\345\000\277d\246a\277-\000\010\300\277\243\001\300\265A\247\277\220q_\277x\003]\277\213\211\330\277\004\320N\277DE\250\277\250C\245\277\305\013\206\277]~\312\277A\362\010\300\177\022\000\300\356\377#\277y\323\244\277\001r\203\277\354%0\277y\036\254\2776\264\322\277\310\273\270\276\\\370\002=\340(_?\020\000X>Pb{<:\2629?\265u_?\305wc?\000Q\323;\027\260\226\276f\207I?m\210??\240\222\021?\346-2?\267\343.?\346 \322?\247\201\217?:k\303?\242\310\326?|.\337\277\360\341\327\277b\215\314\277\326\030\230\277\006N\314\277\300\217\242\277D\216\272\277\270|\032\300\246F\020\300~\035\223\277/\354\255\277\t\3361\277\356/\n\277b\377\343\277\202\010\303\277\007\232#\277\022kl\277\232\370\312\277\235\365\010\300|\010\327\277x\322P\277j\356p\277\260F\317\277\251\233\242\277N\351m\276#\356\247\277g\275~\277 =\021\277|\370\030\277\230,\366=\251&\215\276\214\255b=\371\214v>\310\341O\275^\234;\277:\324z\276j\325\033\277P\304\017=\2707\364\276p$\013\276LW\313>\234\004n\276\262\307\203=t\346\231>\360\014\316>\270\265\212?\332\210s?\342=\234?\345X\362>\350\230\\?\252TX?\3318O?\370>,>\034\320\230\277`\0222\2778\370a\277\273\333k\277\252ZD\277zh\202\276\031Z\'\277\363q\005\277\n\371\037?\274h\261=af\215?\343\324f?\230G\224?\016L\023?\340\242\214\274+\252\003\277\010\330=\277+\300\005\277j\260\367\276g\032n?\003\t\251?\257x\244?\000O\252;\034\236U>/ \213\276\273\320d>\375\377.?8\322\230?\206\301\203?K\252D\277b#\243\277@\236\023\277\203\271T\277\n\340\014\277\373\210B\277\016\005\320\276\262\242X\276v\337\033\277ioB\277\226\310\313\276\025\311\217\276\244\027i>\213Q\252\276N\373I?\210\355^?P\262\030?\224\035\037?\326[\344>w\300\346>\331-$?_\220\013?\372`\220=7\2000?(k\'?T\032\220>\263=\257=X\300y\2766\327=\277|\247\013\276r\306\273\277\344\240\342\277~H\370\277\236\336\342\276Pl\357\276L\353T>\214\220T\275\350\271\221>+\346y\276\262\240 \277\252\376a\277\356\211\206\277\252\214\245\277\254\3536\277\276\274o>` \327\274\327+\t?D5\230?\372E`>\274\352\373<\273\251\207=B\263H>\037y3\276$\326\032>\244|[=\337\245v\276\250 \224\2779T{\277\263\261)\277\373K\223\277\350m\220\276\300~\201\277\205\345\223>YtC\277pU\030\276(3\200\277n1K\277p5\033=\010\2413\276\373s\234\277\351\355\312\276\030$_\277#\216\336\2761\0347\277\006\330i\277\315~\232\277N\214\257\277X\272u\277\204\241\376\276\262\316\207\276\000\024j9\240*I\276\251\360{>*i\004>\005\361\350=\"\260\227\2749\n\212?Q\306\020?e\337??K\316\213><\260\225>R\005\004\277V\262B\277\014g\354=Z\263\r\277\364y:\277|\035U\277$Z\264\2774*\302\277\266\301\344\277\333\321\307\277T\356\213\277\347\343\216\277\r\362\203\277x\341+\277\027:\221\277\316\320Q\276Lv\026\276\324K\201?\254\346\240?\2102\304\277\222Z\227\276\2541\027\277\342\217A\277\355]\220\277l\032\344\276\223Q\223\277\246z\235\277D\250]\277\254\030\252\277 \216\327\277\3207\252\277$\264\253\277\025\270\017\277`v\256\276\351i\242>\324\337r\275\200\236}\277\216\325\313>\240zk?u\303\361>\306\335\326?^\217\265?\326L\254?\261l\313\276j\315;?A~\335>\300\3674=\377F0>J\375\032?\3173?>*0\205\275B\t\320>O\177C?\3304\302\275e\"x?\243Z\212?.\274\021?\307\022\026?P\rk\276\207\265\205\277hy\251\277r\020\274\277$Ui\277\216\367\370\277\035:\024\300+\n\000\300v\262\301\277\305\022 \300\222\220\002\300JN0\300Y\351\327\277H\025Q\276\242\214\227\276\232S\233\275\346\036\247\276d\215$>d\233\220\276\360\035\266=\0106`>>\361\322>\366\261\235?T\001n?\032\314J?t\n\033?~\010\236?\237&j?B\230e?\336&\351?\360\205+@\222\336#@\204\255\010@!N\374>\250A5?D\325\346>\340\230\036?\203y.?\236y\337>\337\377/\276z\350\225\277|\352{\277\250\005\236\277p\263\254\277\372\221c\277R\307\356\277h\322\017\300f\213\001\300\'\023\334\277\016\354\366\277f;\022\277\226\201 \277V\374\321\276\220\231g\277\315t\271\277\264y\333\2776I\212\277\017\341\r?\221g\321>FF>?(\211^?\222.\337?4 \205>b\013\022\277\360\3733=\014pH\277\260\355q\276\024bi\276\350\020\366\274lU\024\275<\273D\277\355\367\033\277*Tq\276\335\264*?W\206\242?\340!\253?\030\362\226?>\213\251?@\311\371=4\372X?\340f\321\274T$\326\277\260m\352\277\246\271\230\277\016\261\374\276<\177s\277\t\3233\277\340\034[\276\241\'\234\276\243a\241>\324\014\302\275m\200\022\277\344\210P?\307\360\025?\000\324\365\274\030\352\223\277\336\266c\277\231\003\220\277\350\241\212\277\346\374q\277!\026\200\276\007\322\315\276\352ka\277\300KQ<\032Y\n?\001\'\374\276\365\302\t\277\276*\324\276\0061\026\277_2\033\277\315\233\r?\336\212[>\002\274@\2776/\261\276a<\002\276Z\016\261?\304L\225?\300\022\325?*\n\375?&\200\273?\370\277\265?\257\250\320?F\005\366>I\211\237\276B\354\343>\354W\276\276\004fE\277\030\000\227\277\\\3535>I\036\311\275\362B]?\240~\370\275\350\352\273\275C\033\306\276\230\307\237\275D1o>`\216\363\276\032)\303>i\022\306>q\344]\277\2161\201>\252\375%\277\025E\377\277uZ\215\277\261j\373\276`\343\031\275p\211\001\277\302\345\274\277Q}F\277\270k\254\275E\255\325\276X\264\236>\220\3669\275\333\313\220\277N\220\331\277J\223\331\277\347\344r\277H\2272\276\3173\325>Z\326!?n,\302>\356\215+>\210)U\275\323\301*>\225\271\016\276\026\326A\276\314\003\"\275c>\310>j\233\006?\322:M\277>@\244\276c\372\"\277\234\2741\277\224\336\266\277\236\363\201\277\344\335\215\277\000\372\217\277\246\204\203\277v\224X\277\246\013\354\276\370\302\305=\213q\302>\271\312\343>2\320\017\277\240\202\270\276\034\252\267\277\275\334\324\276`\360T\276r\235:\276\035\367\204\277\365\317\266\277\371\307/\277*\211\263\277\010\325\207\277\225\242\242\277\364\264O\277 \377n=\034\372>=\267G!> [m>\346\220\240?T\366\206\277N\004(\277\260\242M>\010P\275>\200:;\274\222\307\227>\304\307\373\275\010P\355\273P\247s\275Deu\277<\335\177\276J\331K\277\177U\030\277\262\346,\276\276q1?\324\307<?\210\214\271=\264\'\234\277\201J\203\277\324\032\336>\366\312\371=\000j\245\273\275:]?\304\"\\?\022w\325=\321?\003\2770d\334<\032i \277\252\007J\276\\4t>\2340T?\276L\267\276w\t{>,\010\365\275\242\343\271\277e6\026\2772\025\300>\362\210\223\276n\214c\277X\360\245\276\304\236\240\275\022G\226\274\013W\370>\014\032~\276\014\355\005\277\312\312d\277ZB\021\277z\205\262\276\251\373\217?\330\333\214=V&x?\225M\203?\240\3167>\200\305\004?\260+\211\275e[[>\262\032\246>\220w\232>\007<6>I %\277*c\337\275\324p\234\276($\322>\014WA\275L\224I\277\362\252Z\277\246|]>\"5\221>\023k\203>\343 d?L]j?\322\306\343>\222\007\273\276\303\357<?\3027B?\252\000V\276BH8>\022\r\014?\203\270=?\\\242>?\005\344A?\\\377\244?\272\255\001?\000\263\261\275\242\341\n?\000F/>(\220\316\275\224e\023>\205U(?P\257o?&hf?\270-\277=L\216Y?\204\033\247\277`(\006\300\312\005\241\277\022\310\306\277\"#\255\277Q\205\236\276\220\343\362\275\262\254w\276\322g\000?\004\017\343>\0207\265>H~\026>\316;\373\275W\023\301>\304\n\006\277L\270\'\277\262to\276{S=\277\227L\356\276\262\032+>\364\355U\275\350S[;\233\217;?\220nq?R0z?\371\207\253?\010.\251?\3370\"@\326\350\t@\006R\037@\030\325\327?\2727\266>\376{\236\276\341P\332\276y\246\330\2764\t\030\277>\245\203\276\004V\023\276\341W\206\277\271\325E\277\342\323\032\277hp\305>\352x$?\327\202\204?\220Si>N\201B?\022\321\247\276N\235&\277\254\335\026\277\217\357\245\277\035g\230\277\000\214\232?\310\255R?\314\007\311?\332\301\250?\364\271\352?G\337_?~\206y?\200\204\r=\372\0343>\366\361\002\276\247]:?\356\364\346>\370f\'?\035\262]?\336\202^?v\345\n?(\023i=\034\352\346\276zy>?(\333\367=\200\007\315>2\0379?\260H+=\220\233\t\277\323\335\330\277W)d\277\33463\277i\257\216>X\035\220=\372\022!?\366N\227>\024\311\344=%\003\331\276\336\252C\277\240\340I\275J\352X>\027\236\254?\200\267;?\265\215z?\363\312\355>\324X\357>\270\302a\275g\026-?\232\220B?\355K\211?\205\252\204?\370\365\333\275\307\311i\276.$t>\000\234\205\273\035\313\266\276\257\223\317\275\315\301\360\2768U\275\277\217\246\307\277\233\273\266\277\216\231\353\276\006\230W>F\360^>\222C\371>\274\002u?\026F\024>\352W\343>/\004R?\035\221\242?\300\344\356>\337\311\312?\302\370\344?\2645N?\250\340\027?\301\2178?c\202\005?#3\224\277\354v\230\277\260~\225\275\260\034\330> \216\362\274Z\375\312\274\341\226\202\276\341SO\2772\246\357\277xS\251\277\241A\271\277o:\221\277j\024\300\277F\307\367\277\3060\272\277$J\001\300\3359\033\300(\310\311\277}\277\205\277\256\343\226\277\256\355\376\277\202\377\031\300\3056\234\277\023 \366\276\010\372\277\277\306\332\272\277\025\202\225\277P\020\000>\215\222\023?\210\"\353>\362\227\243\275\003y\202>0\023\353\274zD\030>\220\336\177\277\246\3200\277\301\345>\277\030\223\177\277\302K\t?T\t\300>\346\327\372>\215\354#?\236E1?\020GF\276\256]l\276i\225\342\275\004\'\226>\327\313\306?qny>\215\320\251>\202\341|?\236\272a>\267\221\305\276\355\325\032>&\224T\277t!\010\276\271\200\016\276\356\350\345=\247\332\273\276\241u\336\276wL\277\276U\0214\277\270\200r\277xq\314\2776^\001\300\034[\026\277\211:\233\277\336eg\276\270X#\277\374=J\277\267\350\203\277\262\254\302>\016\340)\277~\272|\277\256{\262\276\224\201\303\275\016Hx?\325^m?n\201\272>BE\300>\000>\354>\204\321X=\276z\240=9\034\213\276M\323\236\276\222n\234\277\374\362@\276\273\240/?\020MW\276\372\033\322\2760\355\245>\350\203\366>\344\222}?O\006\221?\365\256e?\363\262\001?\230h\215\277\340*\301\276\364\353\003=\220e\007\276Dk\216?;y\331>\376\267\232?\233\002q?\360\017\333\2751\013a\277\350(P\277\216\225I\277\t\321\323\276~\301I\277[\256\221\277\330eO\277V\2607\277\230\2206\277\372\223\223\277:\354\363\277\271ej\277\351\020\205\277\220\032*\277\264yS\277\345\365Y>\275y\336>\372\306/\277\024\243\343\275\345^>?`W\321<\324uH?u$=?\212I\350>\020\001\337<P>k\277T\232m\277\273\030\237\277\347.\235\277\320@\221\277Z\222\220\277\272\331\365\276\224\003\305\276{C\206?\350\020->\352\271\341>\000\024\331\271 \207U>\3113\016?\321#\256?u\005U?\021\333\013?\010\336l>\0337\267?N\265\001?\327\377\275>\354\347\371>\364\022\200\276\254H&\277\020\203\322\276\260e;?\364J\016?\213\303\325>J\374\312>\000\206\211\272\214\032\370>\312\005_>\\\265\375\276\246\333\017\277\352\351\341\277\302\304\324\276\377tr\276#\'[\277I\223\216>\267\201\004?\354\010@\276FvX>-y7>\202\244\372\276\303%\211\276\230u\355=\254\215\243=9\274\357>f\306\221>\334\025\005\277^\353\034\2778S\007\277\024\036%\277\340@\366<\034\207\370=n\005(\277\034[\262=\325F\340\276\014\020s\277x&\204\277\020\263\327=\272L\016?$\342\"\277w\251\346\276\230\252\024>\013\367-\277>\376R\277\340Ea>\376&\317\276\265\r\340\277\323\231\362\277\322y\213\277\363b\377\276\323LZ\277\014IX\277Tj\311\277\270\024\220\275\375\322\201>\376\337 ?\227\327p?V\322_?\255\311G?!\n;?\342\323E?(:o?\254\262h>\312\226\366\277\350\026\371\277\006\t\007\300\221>x\277l8\270\276\343\016\355\276\376\027\r>w\227y?\276\214\343?z\3526@^\346\241?`\000\247?\347YJ?I\025#\277\260p-\277\265 d\277\216#\212>j\256$?\272f\030>\215\304D?:\325\351>f\366\215?\250.)>\233N:?\211Z\275\277_\271\311\277\360\213\027=\316\r\024\277l\233\212>\367e\027>\252UX=~3]\277\320\266\362\277PN+\277H\032\256\277\014W\310\277@W\001\300M\273\007\300\240\214\327\277j\363\010\300\272\231\241\277\016\\\266\277\312\331\372\276\240\262\024?f\375G?b,H\276b\333\316\276\352\361\231=\027\'e\276\240\017\232\274\220\371\177\277\215L-\277.\206\270\277\"y\000\277\320(^\277fh\201\277D\030\251\277\000tb\277J\316\220\276\260\336\215>\r\341^?\023\312`?\225\210\201\277[\246\203\277_9D\277\366\322\301\277\'9\276\276\340\377\355\275\312\034X\276\034\312\020\277@\325\263;\301\020\345\276\035\t+\276\270+\014\277;\n\030\277\274B\306\275\\6\364\275\362i\362\276\261\363\031\277N\241\030\277\304\251\243\2778\250\313\277X\037\252\277\371n\246\277\363\373\226\277D\232\355\277\030\333|>5\tT>\325\343\224\276R\336\231>\2734\371>\266\r\201?\212\321\226>\300\310n?H^\223\275\236\306\n\277D\366~\275t\375X<s\031\217>(\033\206>\034\347\261\276|\202\005\277\024\214\024\276\215\322F?\276{O>\266~4?\366\370}>\010;h=GCz\277\031U\303\277\373\232x\277\0311\346\276\334@\214\277\271m\237\277\250\324\244\277\375\006@\277^\004\234\276\277R\\\277\000\350\022:>\246\210>Le2\274\323q\255?Q>\020@\206\250\031@X]+@\302\205$@\272\325-@\356`2@\nUL@\0334U@xy2@\024y\030@\324\201\036@\207G9?\242\265\021?\362v\211?\212\264s? \372\321\275\254?3>t\207\260\276f\315\363\2764\271\033\277\276\2747\276\033p\231\277p\336\000\277\270mZ=\224\221\014?9\337\013?\240D\257?=\222\246?\352\036\260>\306\315\305>\204\365L\276#\206\344\276\316I\321\276j\322\205\277\255k[\277\314<7\276\2077-\277\260E\356\2743\253\256\277\224\002\275\277\320\321\354\277\312\334\252\276T\355Z\275\207\271\374>\252\352\322\276R(\203\277YUR\277\200\336\005;\2644\224\274 \273\351>\273\207\237?\3001\215?D\241\206?\320\rr=~$e\277\264\\Y\276\017d8?\330\301Z?\234=3>b\242\256?\034\362-?\215\021)?\202\336\346?\274o\257?j\021\243?\231\311\244?\024\004\224?\206\014n>\260\242\001?\216\320y\276d\250\310\276\316\255#\277\330\351\254>\351\257\300>\020\213\232?\242\210\267>\330o\254>\265q*>L\204\334<\225|\357\276\004\354\034\277\336\266\231\277`\210\201\277\253\014\373\276>\016)>~-\351>\350\255\250\276\020V\304\274\354H\206\276E\004\265\277\033\373\305\277\323M\226\277C$\310\277\200\273\n\300\022\216\266?\272\322\366?\363i\026@_3\342?\365V\341?\030!\211?\\\334\354>\2656\267\276V[3\277\366\251-\277b\325\202\277\265M\177\277\257\260\343\276\217<\277\276\0107\350<@\204\202?\376%\223><\223\231\276\255\210\321\276(\364\020?a\361f>N\235\376\276\370jy\276\342T\252=\212\'Q?\240\351O>\366\213\340>\260n\352<\025\264\022\277\322k\373\275\3604\262\276Y\310\231\277@\306\221\275\330\326c>\325\255\303?>\206\332?v\021y?x\265\364?\242\265\341?\344N\336>\303\334\031>@\371@<\334\210\003?L\317\353\276\304\247+=\245l\255>\366E\236=\316$\340=\\\336\266\276$\321\335?\214\344\036?\201\327\355>\334%M?2\312\267>T\237\276\276[\261\232\277\322\346B\276\020\243\004\277\224\277\037?\3417\254>\203\026\031?d\217\367=\330v\225\275\352\003\325\274l\366\006>\002\222\021\276\224\301\226\277Y%w\277TJ\252>\312\3722\277n\226\335\277\300rz\274\306\313\022\273\234\225O\277\033,\004\277\3140\210\277\243q\357\277\354i\203\277\021\023\334\276\360\323[?\360~\264\275\276s_\2769\300\262>\244X(>\242\340\013\277\034\316\360\276\350\030\251\277\270\207\211\277D\341\262>\020\374\005?(m\223?\212\215\370?\2650\371?\344\335\321?\343\311\256?\214\243\313>\235d\222?q4\244?\320k\">\323\224A\276n+\006?\356wK?E\213\037?\303\257 ?\014\360\226?Y\003\353>\330\227\315=\272\024g?N\244\317?\\\244D?\204$\n?(\364\016\276\346)\023?\264\311\230?`\223\230?h(\n@\017\360\351?\3548\202?z\3073?~\313\204?\t\273\301?Z\351\221?\235\301S?\004p}?\300G\335?F\006\241?\230\357\037>o`\016>\373\262S?\230\003,\275\324\233\363>\033\201\035\277\302\222J\277[Z\023\277|\265\031>L\210\325>\377\210\304>~\2360?|#/?\241\026\315?\234\315\321?2\306\320?\311i\364?\230jK?\200\327a\275P\263\207>F\3112>\347PU=\221\023\016\277\003j\032\277x\3537\276L\303n\276\354\331m\277R\303\342\276\350P\244\275\200`\300\275p\370\230>?\263\310>\210\n\320=>\343w\276\337\200\221>\243\217\205\277\0220\301\277\260\267\003\300\310o\272\277>\270\246\277\207\264\216\277\300\200\022\277\252\350\022\277\367\246\204\277\321\2415\277@\244J\276\314\232\004\277\362i\240\277\254)0\277\324\255\177\2773\365\221\277\274\364a\277}\235\037\277\3641\232\276~\002R\277\0301S>\311\245\311>,]M>\225\3016?\231\227H?\256\005\023?N\034)?\010\373\005\275aV\010\276\302\014\331=\2006\350\275\235o-\277|\352\200\277M\221\322\276\373\224\310\276`\337\217\275\244qA\275\244\374b?\t\262\360?#t\327?\213\262\356?i\355\341?\021\036\265?\260J\265?Yd\330?RO\375?\307\344\346?DV\002@\340\033\234?\026\"P?q\316\225?\231*\261?\246EK?\000\270\003\274\'\003\237\276\254\331\323\276Fq.\276;i\333\275\004\022(\277\356\235\351\276JE\027>PQ\032\277D\213\236\275j\322\375>OC\210>yp\000?\036K\315?*\3126?\231\254\372>*\222\225?T|\250?o\373\372>\203\353\032\277P\3125\277\316\245}\276E\"\274\276\306\2661\277\220FV\277\324[\344\277\226\231\251?2\311Y? Y3\275\265\376\027>6\017\330>\366\346V?\t\013\205>\3029\317\276@^\367;\347\353B\276\261\277 >:4Z?\030~Y\276\017\344m\277\t\320\230\277\275\0201\277B\374w\2772S\212>\344\006F?K\332\026?\014\321\226?\346\356\266?  \225?\370\341\204?\313y+?\240E\216\274\313\326V?\327&\343>\032\216s?g\270(?N\250\000?\305\255!?#u\203>\220\300\265\276\322\257#\277\016n=\277\320gP\2779J\010\277Bu;\277\204\\\327=\340\3609\276\375\000\200\275\305\212\256\276\276\333/\276\234\203\207\277\240Gh\277\334#\275\277\020\272\017>\000\003\004\300h\002\365\277\202\351H\277\342\236\302\277\020\252\266\277\264Y\037\3002k\313\277\237,\026\277\327\350c\277\024\251\230\276\r\345\337\276\"4\361\276T\t\206\277\232:\246\277\356\236\346\277\210\257\325\277\017\037\340\277?<\266\277\332r\271\277h\310\034\277\302\341\304\277\262a\352\277s\237\343\277\210~\241\277\020a\014@\225.\014@\221\317\035@\264\255\003@\204R\240?\206Vy?Pj\331>\367\253\334>\263\256\247?M3\023@\217%\014@\344,\013@\233{\030@\370\277\231?z\255v?\022\207\267\276\355b\003\277Zqj\277\220\343\254\276\200.#;\"\326\363>\022\247\330>\340H\326=\213)J\277j\002\250\277\332\264\201\277\014\233.\277\336\272E\276F\323Y\276X\263\274\274\2515\324>\274&J?\252B\267\276\360\003\004\277\351\230I\277\250&\r\277\234\030\213\2774U9\277 \305\257\275\2477\360>|\202\212=\225#\215>H\374\036?\372\274s?\310\177\221>\205)\246>\366\244\262>\211\201\223>Ww\264?\026\372\240?\030IV>\n\"\\\276\005\231\353\276%/\256>\204\324\240\275~\227\255=E\245\003?\002\\\027\276\252|\254\2768\023<\277\030d\233\275\020\2116\277\237\230\334\277\002\367\211\277&\240\003\277p\271\t\276\030\r\363\274\210(O<\344\t1\277\000\374\000\277\250\271:\276!lB?S\036\233\277,L\371\276)\216X\276\013\351\271\276<\177\020?\242\203\316=\341\323%\277\220N\240\277\033\237\220\277\322|\032\277}\373l?\220~\250=\317s\033?\346\357\215>z+\203\275\205L\230\277R\317x\277~\276\010\277r\354G\277\3671\375\276\300\032\376\273rV\223=B\253\277=\376\020\367<\357yN\277,b\237\277h\020\301\276\254Z\220=\306\274M>\324\242\024?\2227\222\276>\261\271\276F\034\001\277N&m\277A\311,\277\246\276\237\277\000\2361\277,|\032\276\260\234H=\364\212\211\277\026~\262\277\302\035\256\277^1\374\276N5\213\277\226\226\036?\207\370\255?@\245\236<\346 #>P!s?\215=\002?\000a\226:\210]y\276\243\377\001\277\3328\261\276\206\346e>t\305\337>\362\226.\277\311_-\277\250:\026\277\3468\033\276+[\203\277\260\241\243\277(\004%\277\223\010z\277 \321\263\274?\007\262>j/\202?$\324\277?[Z\n@\356G\323?\364\261\273?vD\333?T\002\312\276\220\341\302=\010W\355>\036K\262>\230\273\350>`\274\017\277 \276\201\274\326C\026\275\332@\273\276\212l5\277\032\231Q\277\007+o\277+\350M\277\304\216\005\276g`\014?\330\314\200? \006)?\251\351\245?\021\315\257?N\304\354?d\356\203?\342\352\261?\340\356\272>F\300\300\276\226@\247\277\346\366\257\277\023\234\200\277\336.\374\277f\265,\300\005\214\026\300\344\037\231\277\\\033\322\277\272+\010\300M\267\302\277\030GS\277(\025\226\277\220\226K\277-1\237\277@\010\320\275\366\277\024\276\340\264\362\276X\373T=\324VC\276\310l9\277\236\264&\277\206&\306\277\'%\000\277\327F\037\277T\t\271>Ss\007?^Z|?\223n\227?H\227\314?\\.\331?\371!\010@0\016\017@\263\266\013@\330\311\306?\2011\315?\240\202\347<h7I;\332\004\301\276V\337\031?\330;s\276\346u\375>\206a\023\276\027\333+\276 7\316\276\254\177\203\276P\263b=\364b\313\274\247\212\'?\372\3728\277|\237\245=\364JR\276\355]}>yW\200>\250\202\302>T&\\\276\370\224G=\247\332b>b/r\276#\351\233\277\200g\301\277\256\000\202\277\236\333\244\277\365E\200\277\335\255T\277\211\231\322\276\253|(\277\322I1\276[\330\004\276\0165\362\2768o\016\277\006\260B\277\020i\332=\023\267\323\276bX\253\277`v\261\277X\010*\276\000\333`\276\364\376v\275\341\013\254\276`6\263\273\254\373(?O\356f?:\271l?\010\033\025>\220\237\324>}+\034>jD/?\034\332\217\276\237\031\310>N\370\n?\002\032d>\327\255\237>~a\n?\2277\004@\032\223\023@\004\223\265?\\.\021\277,\2020\276J\022\346>\3719$?\240\347v\277\022\226\201\277\224>\312\277\231\035\017\300\224d\372\2770\256(\300\361\006\007\300x]$\277\n\356m\276\n]\'\276\323\241\213\276\216z\335=W\312\020?0ZP>\360T@?\316\022\037?\342\327\226?\242z\261?\316\222\021@\370\352\273?>\365?\275\242I\226>\322C\317>W?\242?\204\320\300>\020\321\315\276\330\323\271>\326,\202?l\022\007?\242\306o?\226\253g?\200\352\023=\367&\251\276Ga)\2776\006\213?\330\2647\276`?\215\277\302P\222\277(\322\263\277\351\'\221\277X\270\265\277\036VZ\277r;\216\277\354\212\252\2770@\354\277\301hq\277\323\335\276\277\202\245\326\276x{A\277|\3142\277\364/\231\277\nVm\277.\267\230\277\235\317\324\277\302\026\014\300$\307\013\300\002\372\014\300\321\233$\300}0]\277\266\211)\277<\325\207\277\320\366\035\277\001\354\353\276\346\\\222\276\334\356a\276vC\207\276\364(\017?\274\201\223?\240R\272?\316\265Q?vc\252?Z3\250?\362\357\007?S\177\320>\245\0346\277|e\000?y\376t?\274\237o? o\034?\257\247\337>\301F\321?3\344{?\204\226\275>\230)\220\276\216\027\213\276\2202\201>\251\345\241?\0257\034?v\262v>\332\230\345>u\310=\277\222X\246\277=O\033\277~8\350\276T\302\014\277\340\277K=yCv\276\222pT\277k\265;\277\231\207\364>\240\315\226>.E\'\276\320\230\006\277\331\273\371\276\230U\202\277Gk\253\2775\000\301\277<\341\014\277\350\032\252=&aa\276\250\2727\277\316U{\277\333\374\273\277N\366\277\277\324\301\340\277\240\017\207\277\373\324\355>mo\347>^s\020>.;\263\276p\024\274>\007\347\231?P \262?.\225\017?\306\240\304=\234\322\000>`\200W?\325<\203?E^b?\025\235\325>\357\276\037\277\264\271\353\276\322\270\215\277\262\"\313\277\253\232<\277\'\2202\277\n\303W\277\370\016\376\277\330\306\332\277\'\035\302\277\326\366\002\276\340;\205=\234h\342>\006\316\214?\020\346\351\2756\311\362>\022z$\276\254\034U\276\013\265\211\277:\225\024\277\262\243\013\277`\312~\2752\255\361\276\251(\265\276\300\263:\2770\363!=\337\373\234?\234H\354?9\345\221?m\250\217?lJ\320>\320\003\014>Z\223\244\275\311d)\277+\371N?\000\340<:\277\007\212?v|f?^E\235?\264\262\276?\341_\302?\216\274#@\321\370\333?\270Zr?\372i @\236\034\347?\342w\005@X\202A?\340\332\222\275;\266\230>\366\374&?6E\212?\304\201W?\200\013*\276\256+\315?\365\241\370?<8\030@\032}\333?O.F\277\314\342^\276\305~[\277\250\276\004\276\311\254\352\276\356o\000@M\325\267?\035|N?\004\371J?s\214\017?\026\003;\277\352\016U\277W\325\251\277b+\271\277\334s\373\277(\367>\277\3462\244\276_\035\301\276\262\215\010\277H3\\\277w\210\215\277\323`\257\277\232a\266\277\252\301\361\277\300Q=?~\006\267?\"3\244>y5\212>h.\326\275\243(\005\277&2O>\226_\250\276t\371@\277\233\017\317\276\332!Y\277<{\301\277\351\267\221\277\355<\261\277n\032}\277\230\233\025\275\2731\374\276V\345E\277\2331\314\276\350\313S\277\353@]\277\217\352\366\276FIG\277S\307\232\276\261 \326\277B\365<\277\233!l?\024P<>\370\355\221\275n\263[?|\347\264?\315\026\255?\300v\315<\264z_?o\"\020?\233\3250?D\346\027>\310\262*\274\224\344\344>ZB\"?:\001P?\204&D?\034=\033?\304,\322?}\270R?\260A0?~C\277>\265F\240?\264P\021\276\2136R?O>\n?\3604+?v\231\223?8T\206?[\032P? :\303?2c~?\205\355<?\246K\211?\277\214\226>\002\027J\276\265i\020\2776\233/\277\226Q\243\277\234\0243\2778\343w\277#\251\224\2774[\233\277\000\200X;-\224M\277\216\323\331\277R\267\343\276+b\024@\255\024\305?\261\204\232?\343.\257?\234\254\'?\310\332V?\250\263\307?\365d=?\231/>?\020\227!?H5\240?\007\366:?\370\231\201?\263\376\333?>\'\000@\303\023\307?$b\017@H3\013@9h\021@@\216\247?^\002\246>e\r\244?z\037\260>\211\253\010?3q\311\276\000\325\021\274\036\342\263=\324\202\254>\264I\003?\314,\232=F\2772\275>\234<?\330\214\323=\016\376\200?\335\253B?\006\333\325>\242C\025?\233_#?\0001\243?.-\302?\003\203\261?\030\264\206?\200\235~=\031\326\221\276L\355\244=q\276K?\360\211\332=Gk\216=AQ\032\277y\020\001\277\024\032\320\276\210i\022\277\250#\230\276i\214\315\276@\265O\275\335W\200\276\020\005\016<u \002\276\250V\032\277\314X\r\277|>f>\255=,>j\361\263\276\024\323\303=\266\2451>\2440\227>\3676;?\252\233\374>r\016d?\270?\r?\032\303\n\277\366\242\001?\231\036\234\276\352\032\262\276\026\270\375\276\016\362\201\276\345\340\000\276\317\034\261>i\014\002\277\311c\264\276\337k\206?s\260l?b\206z?\227\245+?\261\336\237?\330\265U?\200V\221\276F\341\212\275,\246\332=8\035\330=\301\237S\277 rd\277{\301\370\276\337\257\033\277>\026Y\277K\246D\277\036\020\322\276\016\212\227\276k\206j?\352\201\266?N\370\254\276\021U}>d\356K\2757\231\217?\206N[?8\254;?\n\252s?\010I\360=<\325\211>\020>\232?N\330\031?\376\230K?\000g;?\365\276\312?\005[\320?\254W\025?\017\341\016?S\254\323>\210\273\276\276P\302 =\342T\322?\223*\312?-\200\234?v\350\214?L\363\024?\302\273\342?\002f\210?\221\360R?\n\027x?>\032\344?F\276\224?\332L\345?\214\310\311?\353\350\225?v\035\274\276S\357O\277\220\305O=\322\233\323\275\033n\030\276\020\245\200>\261\"+\2768\246\261<\342\300\014\277\312CQ\276l??\300\017\020G\300\342\006E\300V$\036\300@A\016\300W\234\001\300NG%\300\r\321\021\300\352\302\354\277\256\240\356\277o\237\252\277\361\352\246\277\300\215\277\277\237f\204\277)\222\013\300\212\347\n\300\r\200\001\277\360\250\033\277$\236\241\277\254bT\276$\0053\277Xn\275\277\3001m\276\364\232:=R\"\240?\2029O?j\004Z?\344\350i?\002\224\244?\352\017-?\312V\222>\022\177\331?\026\325\006@\256\363\207>\335\023\216=1\204\272\276\235B\234\277\022ou\277!\017\357\276\211J\312\276\r\242\322>\305E9>\006 |>\022\224\205\276\3372\277\276\354\354\036\277&\217\021>\2501\265>f3\201?\356\221\271?\240\356S>\362&\006?\375\202\306>P\026\350<!u\026>~\372^\277\220\3007\277\203\344M\277\372XI\277\277\'\310\276x\rJ\277\360*\310\275\001S\250>\005O\315\276@\013$\277\351;\251\276\312\353\354>\305\230\200?\364\271\233\276\272\277\232\277E\016\003\300\007\035~\277\363 \342\277VhI\277q\304q?\304\262\327>\216\220\261>\274|\301\276Gj\211\277\026\230\312\276\240\323,?c\342\345>\212+\'\276k/$\277\262\216\310\277\344y=\276=\356\205\276\212\243\201\277\263Q=\277\n\234\326\276\232%i\277\"\300\001\277\351\271S?O\341\320>\376zT>\360p\000\276DA\257?\020\207\335?\354\362\364?F}s?\354\315\223?\246\207\277?l\365\252?\016\t\224?\302]\253?\342\222\004?\001S\023?\360|\360?\030\200D?\231u\272>\2424\215>x\000\001\277\226\2253\2766\215K\276\nmj\277\000j\343\274\246\235\344\276\310\276@?\242{\344?lX\352?Lx\324\277B\370)\300\356\224\007\3006\'o\277\021\365q\277\214\003\031\277B\256\010\277\320\351\224>\000\214\200= 5\327=\014\337\362=\214b[\275UH\305\275|6C\276\317:~\2770v1\277\260=\227\277B\255\345\276\332\356\227>;\214>\276\366\215\216\276\316k3\277\232\030\312\276\320\022\323\276\237+\263\277D\336\010\277ZQ\247>\342\016\003?\316?\304\276\365)\243\277\361\237\243\277d%\370\277\234s\215\276_\217\356\277V\363\036\300\202\r\037\300\232m#\300\n65\300\252#\025\300\315\352\313\277\026\347\025\277\026\355\236\276Y\020\246\276\351\273\226>~L\'?\000\027V\275\177\273V? &\213=\022\335\342?\343\364\272?s\253\336?m\215\211?\327\323\261?\306\323\366?O\240\220?\032\264q?0\215\261>\205M\202?=\326\352>H@o=\370\023\230>\266WR\2772\333\255\277\350\237=\277(B\267\275\252\377\263\276\312*\226?\227\2352?H\n\254>w\265\215>{\367I\276l\334\027\275\036\336\350\276X@\256\277\254\357\254\277\320vv\277\362\334\371\276\377\263\332\276\260\377\266=\252\272\007\276M\202\276\2773en\277tfV>YZ\302?\210\336\274>\366j\307=\362\275\266=\022\261\372>\314y\034\277\361\270\206\276\253S;>G\361\316?@\307\331=/\205\027>\000\354\372\274\270\0276>\ryQ\277\240\000\202\277\271c\202\277H\376j\277r\256\325\277E\033\323\277,\347\337\277\250\024e\276\352K\232\276 @\360\274\224*\357=\374n\356\275p\004,\275q\210\351\276\000\355\322;\314\374\006?\n\361)?\001(\212?\223\245\233?\244f\035\276C\367\035?\3144\255\276nZ\377\276v;\002>/\227\257>\020\001\334\276\360\326\215<\244\325\036\277|x1\276\330\267\207\276\2520\277\276\3462\345=\232\226\351\276\313>\236\277\036\212\206\2770\356\357\2778d\353\277\0269\267\277P\031 \277\234\326\220>:\266\343>\272$\024\276\276\3660>\276\341\364\276\314\375%>\000r8:et\303\275\346\000#\276P)I?\325\327\200?J\013\010?\260\336\326>S\357V\276\254\277\337>6\001U>\233\036\376>\n\022\210?\034zv>T\033S=\354\376\272\275upO\275\324\352\337\276\214=\302\276\"\232\331\276\021v\306\276t\026\\\276a\212p>u\235A?b\033\303>\220\'\"?N\006\202>\362I\345>C4\033\276\371)\367\275\"*\247\275~~\212?\\\367\344>\346p:?\363F&?$hj?\210\277\306?\227R\221?n\260&?\032\334\363>\036!|?\326\035\316?>}\274?\244;\016?j\r\024?\275(\014?\275\242\237?]\177\201?\224p\214?B\260\230?\205\031\200?L\010 ?3\227\360?\035g\016?h-\300>\340\235D?\346\266M?z\373\025?CX<?\257\265*>O\222+\2761\334b\277\336\3106?\340\273\244\275\330\370C?*\316\210\276\024\264\330\2754]\032\277\304\304\333\275 \"\326\276\030\033\010\275\307rE\277@S\263\276\320{5\277\270\205\250=\304\215\266\275\030\271\212?\330\316\224?\355\224\266?L\236\227?\326\0161?\261\353J?Z\247d>p\2515=\222\377\016?i^\225>\244\226s?\264%E\276\033\217\211>D\233f> \347\210<\034!\211?\257\313v?t\321\253=cC\203\276\"\262\261\276\0279n?\352w\306? \213\'@\027V\311?Z\2449\277.\234\225\276\332\376\204\277rW\306\276\231\013G\2774\214\222\276\272\370+?\3008\273>\002\227i>\363\004\221>^\265:?\236\264Y>\237)\025?x\210\227\276\330\273\r?2n\371>HV\246\276\006\363R\276\024\364\235\277\255=\210\277\264\353Z\277[\226f\277\254\303\262\275\036^!?\366\340\013\277\244g\265\275&n\032\276.sW?\30023<\241C\302=\271\177\274\276\246\027\023\277\226\014>\276t\300\357\276\n\203\034\277&\014\320\276V\302\350\276\274~3\277\274&\206?H\344\237?\372\017\334?\004V~?\014\202\355?\\\t\266?.\352\345?\030xf?\306\356\265?U^\037?\000\037\013\277\220\026{\277\367<\205\277\020\022Y\276dfd=\331?\236\275\300oh>\342x\026\277*)V\277\354S\240=\r\220\224?<B\001@\323\030l?\026\340\255?\260\304\340>\374\350\324\276R[\004\277\2711\217\277\213\221\261\277\356\265.\277X\325\265\277\020\226a>\200\311\004\274\336?\205\275#|\226\276\312M\257\277\243u\346\276\360\350e\277C\2712\277@\373\227\275h@\224>\177\262\032?\177\023\223?D\203P?\304\246\224?(\236\334?S\323\007@\203\354\340?\251\240\364?\334h\277?[\024\272?\216\021\213?\025l\230?\356\017M?H\374Y>\2106\216>@\300i?\354\306`\276\206\351\002\277\261b\"\277\260\344\222\277\322?\010\300a\224\240\277gs\207\277(*p\277\341\263J\277\232\331\324>\372\310\247>$\230\335\276\027J\271>\224\004\213=\030R-=\"\347$\276D3\204=J\242\256\276q\335\236>\224Q ?\224\264m>d8.\2776lT\277\'a>\277\234\346\026>\346\006*? OM?\353\241\310\2760\321n\275NN\227>p\177\364\274I\347\242\275\023c%?Ne~>\006\325\013\276\370\271Z\277x\346\247\277k^o\277\n1\204\277\310\005t\277m\267|\277\334\227\302\276\357)C\276r\345\271>uQ\021?\3008\235\274\3415\030?\312:\027>\262\204\235\276\226o\252\276\360 \360\276h\t]\275\253=\262\276\374\330j\276fj\242\275\036\225\365>\240\315\270<\2322b\277\320\223{\275n{\237\2756U\245>\225T\034?\025^\366\276,\335D\276\340:z\274\203\271\235\277W0\343\277\325\370\233\277\014\252\033\277:\255u\277\031\307[\277\033\232\207\277\251\374<\277\225\007\022\300<\312\241\277\311\337\022\277APT\277R\371\005\300\224\353#\300\354\335&\277\024\226\340\275\311v\342>\356\214<?\326\016\213?N\221\310>\276\314-?\226S(>(B\306>\301S.?\362\262\361>\256\216.\277\272B\243\277\224o\303\277N\227C\277\373\362\266\277\332h\307\277D\322\017\300\315\301i>\246\022\317\276b=.\277\274\210z\276\000\320&<4\371J\276\027t:\277>\034\236\276\332\002\350\275MX\367\276$\221\332=\\\327`\276J6T?\2647\203\275g\016\017?8\n\026>\032;3?\025\344K?\000\010`?Z\353I?H\303k?:[\220>\270\277F?o\006\301>\245\034\310\276\026\370\224\277\014\346\223\277+\211\262\277\241c\275\277\343\022\252\277\200\222\257\277\222\205\236\277G\037\210\277:\341\253\277\034\215\030\277\264\375q>\333\026t\276I\256,\277\241\322\003\277\013\305`\277\217\\o\276\331\331\304\276\210. \277Z\t\263\277h\307\306\275\341\233>\277\232\017&?\326\000(>\234\357G?(\264\243>\210I\241?\224\326.>\252\322\213\275\350\315\016?\276L\301>o,\023?\3663\206?\305\262D?\355\323\030?\013\315\275>\253=O>qn)\2774.^\277\352\343H\277\"\005\274\2776\347\320\277@\\\275\277\344\200\001\277w\327\360\276\2407\226\277\014\301\265\277\321\252z\277\370\2657>\3216#\276;N#\277\310\303\023>\215t\027?4\272D\276\2200\244>I#\206?\362O~\277YC\030\300\360\007\003\300\320\315\372\277\362.\275\277n4\366\277\007\020\230\277\250\337\201\277\204\270\354\276\'l\261\276\212\0275\277{\305\276\276\202\246-?L\244\214>\332\277p\276\204s\006\276\030\t\033?p\272\206>\223\235\034\276\2734\021\277\246\243\231>P!\355\275\004d\224>H$\225<\206|\246\276\336$\026\277\356\006,\276l\353\317\277\356\364\326\277G\037\232\277$\030\016\276\226&\255\276u~.\276\025V\017\277T;0\277\201;7\277\0000r:~7\251\276\370T\361=\010K\201>Y\036\240?\223C\263?\337\301e?\200\251$<\265\016\263=\200\264\202>B\\\231>w\201\202\276@# \277\314\027\330>,1#>\334\247$?\2733\213?L\365G?qy\204?\244&A>*>\007?\343\227\017?\202@y?\214\004\233?\244[\010?n\242[?\272\346\215?\270t\267?\317A\276>\344\037]?\271\316H?4=b?wbp?\307\205L?\0138m?\'v\223?P\007\307?\034\212K>t\027$\276\200q\251?\224\026\330>\334M\265=\177\240\256\276Tn\254>j\366\211>Wz\006?Tbz?\305\266\234?\372\372\311?\236\256\235?3\302\227?.\371\037>\335\333\272?\362D\355?|\"\202?T4v>\245\315\232\277AHm\277D88\277\262\266?\277A\3013\277.\360\203\2775cD\277\310\r\022\276\374\375q\276\246\331\032>\240~\021\277|\004\216\276\373]\364\276\256])\276UG\\\277\375\033X\277cs\232\277\373td\277.\007\332\276\370V\232\275T\342\245\277\266\262\262\276@\333\324\276\254\270\345>\266\342\305?j^\013@]p\301?\306\013\370>\375 !?0\277X?x;q?0\220\302\276H\235\371>\202\252\r?l1\253>\330k\"?\020p\217?\372[G?-\221e?_\256\205?\315\343\215?\3234w?\323o\317?\225t\204?\235\346\031@\n>\272?\352\255\305>\234\315\303=\021\244K\277V\241\213\2778A\253\277\3244\216\277\220\344\262\276\016\343:\277\"\241\t\277\320\2656\2763\315@?\324\373\225>o\226\263?\344Z\202?Hx\212?\\`\301?\312/\320?\242e\321?\020}\226?\256=s?l4\327><\242{\276\014D\262?Z\226\037?\000\322\307<|>7>o\256\014\277\214Qj\276\006+\311\276:2\r?5\303\205?\200\212\017?(\354\n\276V\271:>\364}L?\255`\202?\373\007D?a2\016@Km\205?p\341\031=.\024\017\276t\330\226\276q\033\016\277$\272-\277\300\370\355=di\373\275\334\250\346\276\305\317q\2769\007d\277k\'\000\277@\220\224\276x\254\310>\250\030\306>\240c\r<:\3159\276\307\3751\277\226-u\277\202\024\002\300@:\031\275@\227-=V+\221\276\374\233\257\276\330;\273\276\302\223\t>n\302Y?N\343\320>PY\374>XLR?\310mz?\270fN?|S\217\277\273\246<\277b\357\264\2763\273>\277\\T\010>\372\301\017\275\272\207\366=\270\314P\276\247\304\354\276@g\250=(r\266\275\000\002\330\276R^&\277\361\257|\277\200a\340;\253l\231\275\260{B>\351\027(>>\022J\276H\303\251\276\300\030\267\276\020\336\225=\27397?\365|\237>\271\233G?\355Rv?\334\265\356?S\223\370?\001i\322?\316\000\212?\237\360\362>\030]\234?\305\361\220?\242R\223?8IZ?\243\2469?\300\323\245=\242~l>\006\356z\277:\001\261\277B\222i\277\243l\202\277\315y\335\277,-u\2775\322%\277-\024\230\276.\367[\277\252\021\206\276\007V\201>\3105\244<D\020A?\360a+=\307\n#>\215F\346\276\210\276\342\276\330\250(\275\201\321%\276\214\'M\277iP\303\276\354\336\246\276\003\035\217\276\231\253\270>\256\210\366=\313\271\212\276\246\307\217\276\227\234o\277`1[\277\333\024\227\277G\334@\277\364\252\250\2765\000\336\276\244\262\265=\026\343\221?\272pj?\020\336\215?\242/\266?\356G\200?\215\310\273?5\353\331?\314\321c?c\261C?\002\222/?\243l\211?\200\036\'\274\360\326\316>\024\276\003\277!\327o\277h/\321\275pPD?\210\275i?\247\021\'?Y\277u?\010\016\273>\256\022%\276=\021\253>\325\307s?p\345\027?\330\301@?:\353\203>\030/\241>t\334\247>\016\374\306?\026\256\314?\330\257\306?Wv\241?\355n\234?\342\330\237?T\374\321?\252\216\006@`\227.@\250\263-@\214\350J@]5\332?\024H\232??t\253?\020\017r?X\016\327?\252\236\335?\341\302\353?\322\005\334?\274#\255\277\313\334L\277\307X\261\276P\255O\275\334\r\022\277\000!+<\350\235V\275]\271^\277\234\240@\277\000\220y;\210w[>\000\325\213?\023\330\222?<\"\350?&l|?aD\263?\364\032\312?\362\215\357?N$,@^\341E@e\2221?\004y4?\226\262\205?\312\\\361?!\316\020\277\272;V\277L\337R\277\224(_\277\222\206\r\277\317\0307?j=\217?k_\203?\370\214\034?k\006\004?o\004\271\276l\322\267=\214l\022\277\200\001\374;\260\227c?\322\"\222>\214\014\333>\254\217\324\275%`\211\277\022\301\217\277\240\221\326\277\222\007\303\277>S\242\2768\'\202>"
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/tensors/normalize_tensors/component_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 800
              }
              dim {
                size: 24
              }
              dim {
                size: 1
              }
            }
            tensor_content: "\224DX\277\010\322\326=\366k\223\2743\001\264>4\376`?l\364\025?\222:t?\216\2004?\006\264\212?<\224\255>xX:\277\023\377\240\277\271\226\232\277\300\202\203\277\306\207z\277*\362\006\277\2763^?l\252\212=f\201,?\036%\206\276\200IB\277F\225#\277)_\'\277jQD\277\310\n\236>jm\245>\345\307\021?h\361\226?\265\341\227?\331\347\205?\250\331\247?\361\035\264?\017\305N?\200\"\211>\355\"\263?\320k\202?T\252\274>\334\330g>\200W\373<\256_*>bE@?\310\262\230?\310\371B?\322v\205?$\363\264>g\030\263>\372\351\021>n\203h\276\212\313 \277:\304\276>P\335\215>>\320\210=\212\207\264\277~\341\014\277_R\217\276\226>/\277n(\361\276\355&\210\277l\213V\277\336c\302\277B\324\302\277\202O:\277u\237\205\277\n\376\221\276>\025\275>\365\260\266?\234\252N?a\002\316\276\010\321\327\275`\250W\273\333v\200>\210\243\030?\305\205\232?tT\273>\273\333\255\277H\006d\277\250V\003\277\210K\246\277n\220a\277n\023?\276\266\241\253>`\t\343?\261n\020@\213}%@\327\321\014@\351tn?\276K\267>(\237\336\275\271\030\214\275N\350\341=\254\260x>*\356I\276W\307\006\277\r\336y\277r\347\315\276\262\006\036\277jA\t?\347\272q?z\n\372?t\0130@\rP\006@\267\211\302?\273\222\336?J\003\345?\272a\"?\307\215\235>\244\263\210?a%4?\205Ha>&\242*\276\027\275\306\277\340\272\223\277v\327\247\277\245i\241\277\331=\037\3005\036$\300\022\275Z\300X\365\022\300\324\207\022\300\250||\2779\3724\277\336\2147\277X\361\204\2770\303\276\277)\327\004\300\24708\300\"{\253\2778=\240\277\333\250\323\277\312\210v\277:_}\277\265\235x\277<\271\236\276\334B\007\277\2346d>~d\256\276X\375u\277\220\362\210\277\376r\200\277 \212%\277\241#m\277\360\315\022\2754\347\213;X\304\344>va%?\"\317\311>gI\031?\030Uw=\357\244\217>V\227\235?\304\027\366>P\326\275\274&h\351=\222r\351>\212H\200?\\<\267?\315\201!?J#\225?\316\202\315?\263gd?\244\0231>o\360\201\276&4\221?\210\303\323>\\\2751?\214\021a>x\325=?*.N?|\263\020\276h.&?<\365\225=1\336$\277\304\276\324\276r\371\036\276t@\326\276\370\275\031\275os\017?E\002-?:hi>\340\227U?h{\353\275.r\201>Y\340V\276\3409\305\277\020a\036\277\271)\207\2766\002)\276Ym\237\275\n\273\300\2760\316\035=\200c\342>\263\232\030? \371\263?\252o!@S\344\240?\277N\262>_\016k?\334\217\r?\342\270O?8\305\250\275+\326\204\277<E\007\300A\215\304\277v\240\366\2776\003_\277ny\277\276T\000\000>\177\371\246\276x>\270\276VF\304\277~l\307\277\232\240g\277\033W\232\277Ur\205\277\3201|=p6\315>\377NU\277\200\016\341<\214- \277`\023\305\276`A\220>\220\'\374>dBT?\235{K?\000n\023\272\0225\225\277SB\326\277\300\006\010\276\\5\n\277\352\200\312\277@4\311\277V\341:\277\000I5;\353f\365>\364K\221=+\363F?P\217\024=9\006\235\275\307]a>\305z\020?\365\214\004?\033I ?xO!?\316l\000?\374)\226=\006d\216=Z[\005\277\335\244\034\277\000\274@:r\370:>\204z\337\2760p\240<\216\321\302??\344\256?\320\255\235?r:\221?\304\372\366?\210e3@3\224\251?_\253U?\254\217m?:,\260?\211+\n?\340\347\317>\364\321\016\276\025\213\332\276\'n\025\276\000\215\337>6\334\022>\000\272\201\271\235\226\233>\307C\017>\351\275[\277\352\250\357\277XE\017\300\306~\367\277\254\343\315\277X\312\327\277\200$\007\300o\217\355\277\001;\031\300,\255\323\277>\202a\277\000D\240\277%\021\274\277.\036\213\277.\234\327\276\344\270\316\275\3711\276?G\020\300?\354\266\316?7A\026@z\276F?\323o\227?\rU\304?\344\273\271?\n\347\300?\350_@@\301\256P@\230z\352?a\r\310?0|\260?\020\364\225>\020\305\236?\364>\000?\000\t\256<\252 $>\334\202\377\276Z\323z\276\362,>\276\250\305\005\275\306Nu\277\201#\253?\356\353\261?\253(\236?\347\227\310>H(\355\275\005\016\203=/@\302\276:d\202\277\272\207-\277@\251\345>\226\024i>\210\225s>\260V\204?\220\237\230?\204#\">\221\036Z\2761\337\354=\367I\333=\253UL?\221\211\302?m}\202?\262\312\310?\316\240\326?\352\226\000@\272n\230?s\'\010@\\\374\233?I{\261?\035G,?T\375\255>A\261R?\354\013\307=hY\245\276$ \004>\271\214\035\277\362\371h\277H0\214\277\002Z\244\276b\306Z\277}\204\227\276be\251>\253\313A?4po?\212\001\013?V\242!>\2463\376>\257\353\370\276r\201b>\220-9?(\257\374=\004I\234\277i\261\026\277x\031\305\277`l\300\277\260\350\327\277\262\r\236\277\026\277*\277x\243\205=\245\275\236?\316\230\343>\270S$?-N\031?\200\007\215?@\217\005<\270-\301=\236\342.\276\254\342<\277\344K\243>h*0>\003\260\207=\250\234\203=Z\276U\277\310\206\333?9t\343?\207\005\345?\014\225\321?\322n\250?\227\004\250?D\267}?\320\367\215>k_\213>A\272d\277tV\202>\3129\230\275M?\217\276oY\370>\245K&?\022H\257?6\321\344?x\207\363\275\025\263T\277r/\031\277\240\254\265\276\344\323\236\277D|\341\277X\255d\276\2533\327??\003\204?q\311\355>\307\"X?\357\343\356>7\242\275\276\023W8\276^HR\277\336{\033\277\232\245\240\277\202\213:\277\266\364\300\277\270\020]>\240Zb\277~\244m?o\271\206? z\032?L\324\234?\345)\250?\232\200$?\367\327\020?}\177\330>\303\261\006>\364\257b\276 \375)\275c\253\006\277/Mm\276\361\026\036\277\213\374\030\277\234\273\304=p\363\236>\002\357\254\275~\207\276\276nT\030?\245\212=?\326IS?9\001-?\250\304\n\277\\,\235=2\207n?5\027\203?^<\302?R\035\021?\354\206D?\374H\361>\363\235\020?\r\334\216?t\221\234\276\242 _\277\320\037\202\277\256\325\254\277q\030\244\277\036s\220\277\\to\277u\313\235\277K`\316\277\342z\020\277\366T\325\2766\342&\277\370He\276\264\265\277\276R\177O\277\214\232\304\276\020\320\'\277 \373\241\274\216\301\210>\261\225!?\351#\'?\226C\267?\360\007\342?E\2472?T\022\343\276\335\355\213?\032\356P?\207\214\212>\347@\342>\354\200\351\276\316\250c\277B\303#\277`\242_\277\000.\253\277\252\372\364\277\324T\225\277\346\327\326\276\2249&\276\021\nq\277\272/)\276\257|\373>k\233$?\360\237\006=\270\254r\274\247\024\270\275\027\013\236\276\0243\217>\253\203\217\276\224D\312=\354R\317?\017CT?\316)\201>\341\\\017?\360\000U?\032X\024>\360\r(<\010\304\313>\221!\354>\354D\204\275(&\236>Gq\240>\216\221\215\277vI+\277\240\311\356>vaX\277O\210\353\276\243\2671\277 \216\033>6Z\273>8\360B?\224\333\235?\246\004\242?H\237{?\000qV?li\272?\320Al?\200\301\240\274\034\306F\275K\235\006?\350\225\255\275f:Z\276\304DN\277\344\245\352\277P\263\264\277\311\277\255\277u\r\277\276\242\327\320\275\0165\246\276w\345\"\277\344\000r\276:\377J\277\340\237\336\277EA[\277\345\373\272\276\213o\271\277\212@\273\277\230E\334\276\267\361\375\276x0+\277RJM\277<\"y>tl\205\275\266\272\236\276\3708\251>\272\257\023\2762\353\274\276\226\031\215\2770G\262\277\006\031\236\277\254p\272\277\317d\013\277R\236E\277\252\277\220\277f2X\277\014\t\004?<\270\201\276y\250^\276\0355\204?\n\350L?q\376%?q+\031?.\236p=\022\301\n\277\274\336\355=,\241\315\276\000;\265;I\003S\277\037\255\205\277|\"\256\277\245]\272\277\301\217\373\276z\010*\277`D\211\277`mP>\226d\304>\375\323\006?\300?\216=-}\230?\207\344T?\220\026\347\276\210G4\276\247\026F?M7\374?}\024\031@Rm\363?zCa\277 \263\232>\326\324\264>\324G!\277\216\375\264> \377\246>\246J\216\276\311\352i\277#_m\277\226\323\253\277-\320?\277R\331\214\276\304\n\002=q\214@?\240\365z=\266r\244>f\221c?\226\302\223?hX\027\276\214wr?hX\315?\324\316\315>X*=?^>%?\224R\367?\237\360\017@Z\216\"@^\\\263?QW\236?\366]1?\302\335\357>(i\256?S\230\000?$\324~?\310~\030?K\367\t?\262\033\362=]SW=\273\032\217\277H\031\301=\263]0\277\377\230\036?C\211\247?\210\357b?6\307\220>,\341\230?\330\230$>(?n\274\022\245\305?\020,\341?\266:d?*\017\247?\243\305\312?\235\354d? \252\004\276\032\000\370>\020\006\363>\250\r\221\276\022N\035>\242\330\025?\263\017\210>ZE\222\275\331z\213?\240\tU=\253\2630?@\242\032=[\3328\277\222\213]\277\264\274\n\277\354\217\201\276\025\032\214\276\"\177j\277\262$|?\260z\333?\365\\\371?\270\n\366?\210*\254?\237x\307?0\247{?t\212o?T{$?\220\275\321\275\354\020\316\274\206\341\271>\26252?\230\303q?\253G/?\260Fl?\241\220*?\304\236\310?t\235(?\326\206\233?\364\034\230?\230\014$\276dv\301\274\014T\036\276\255@\204\277iL\243\277\n\202\360\276\351\266\370\276\350\214\005\277qm\024\277\376I\013\276\2547\034?x\010\257?\241\267\006@r;\010@\306T @!\257\020@\351\311\001@n\222:?*vT?\030\337$=5o7?\024\203|?l6z?\214\177P?\220\275\241\275[0\304>\202\243\223>D\007\262\276\246\371e\277\273\001\322\277\036X\313\277\231\240\306\277Q9\210\2775\'\272\277\220\r\347\277h\342\361\277,{\276\277(\032\335\277\227\214\264\277r\375\263\277\333y\205\277\252\232Z\277\036\212s\277\034\211v>\\\031F>gq\333=\255{\310=.QT>\361r\231=|\367\233>\333\2112?\n\365\025\276\014\021\204\277\"\272\316\277\n\265\256\277 \231\315\277\016\334s\277/\314g\277n\233\306\2771\'\277\277.\361\321\276!\232.>\217\271j\276U\363e\277\200\022\247\277Of\"\277\2307\241\275zw\321\276\2364\361\275A\225\210\276-\205Y\277\0267c\277\370\200\030\276\354\305\273\276\363\310E\277\354\352\273>\367\250\016?u\323\205?\271\307+?\234\364\364=B)\226?\310\267\"?\324\244K?\264\251<?\001jM?\2373`?i\260T?Y\013d?.?\201?\370\n\250=\235X$>\310\000\231\275F0\031=\177n\030\276\352\207\241\276r\033\270\2755|\243=O\031\376>`\005o\274ph\246\276i`\373>\024\252\257=\261Z\t=\221\\\273\276\027\257\247\276v\0106>\211\216\220\2764]:\277\037\200\320\277+\010\006\277+D\353\276\\\200\262\276~\350i\276\333\375\225==^$\277\030z6\275\227e9?\353u\250\276\342P_\276\333\255\246\276\356{\270\277\254\323\220\277\216Lb\277\300\233\036\275#\354\326>\273\037D?R\362\254>\344\337\305=G\363\017>e\257\222\277\320S\324\275\263u\332>\320w\234?\233\261\213?\300R\264?\257\270\350?>\233\265?\022$\022?\223\311\"\277\027\341\302\276q\201\245\277\364k\254\277\230\272m\276\220\236\252\276\373\356\027\277\200F\234<\226jR?\334SY?P\021\004>\2472\t\277\360AL\277x\322\216\275\014\3756\276\255\216\017>\340\362U?X\352K>\262\033\027\277!\0269\277\014\263B\277,X\223\277\332+\005\277(\326\230\276,j\243\277\230v\265\2760-\355\276\3401{=\033t|?\223j ?\002\323\207>:a\364\276\177\347\023\277\006_\312?\357\024\321?0\343\273\275\237?7\277\364\352\271\277\310}\303\277\204\253\205\277\244\274\243\277\361-\024\277iz\253\2773v\241\277\335\036\254\277N\343r\277>]e\277\304\235H\277\2203\006\276xR-\276PE\307>\336\342\200>\274`i>]\013\244\277h\243\320\277q\272\240\277\207hX\277\222v.\276D\370\r\277\260\336\266\274M\304d?\"w7?\310(\222=\227\365\370>@\2278\274\237\222\257\277\000\323\230\274x\277\024?a8\035?\rOX?L\254\264>\372v\376=j\\\022? \256\342>\240\257\320\274\312Y\372\274;\203\323\276m\227\025?Y\226\275>\223\376\266?\364\212\210?\tq^\277\230\264\"\2776\0144>\003\010#?\25021?\333\033\273>4X\364\276\207\356+\277\014\232l\277\320\306r\275#\235\017?>K5?r\212\232?\222\033T?6\326\340\276\344V#?:\255\217?\210\373\262?*\255\317?IU\334?t\330\261?j\370\206?0\354o?\334\360\336?\212\372\317>\352\367j>\020\036\304\276uG}\277\300\313\232=\020\243\342\2766\202%\277\361\343\204\277t\2168\277\200n\226\277\234\024,\276\027\301\245\276\367\332K\277O@\242\276\000\"S\277\366D\005\277D\023m\277D\224N\277\304\262N\277\000\032\234\272xo\207\276\247\034\221\277\000\362\201\277\334O\237\276,\243\260>P\204\022\274M|\207\276\360N\334\276\362\036z\276^\233\302\276\2124\234\276juY\277X\275\222\2755\302\027\277w<\035\276\0016K\276J2\024\277\313\247\320\277x\340\351\276\225v!\277\313\302W\277\214?r\277\216y\323\277o({\277\346\205\'\277\034\0334\277\325\355\272\276\216\362(\277\323&\227?J\273\243?\004vf?@5\200?\356\260\225?x\252B?P\356\023=\240\225\201\276\376\036H>\313\3562?\310Kb?P\340\021=9\3712\275%\\\032\277d\300h\277>\204;\277\320\263&\275\016~+\276`\336\311\273-\0003?\240\025\223>p\213[?\022\337\'\277B\264t\2770MJ\277\2662{\277\021\301n\277\014\200t\277*\241r\277\024\231\"\277\322\014\273\2760\027,\277\017\327s\277\364\226\265\277\357S\246\277\276-\351\277\300v}\276\243\270\237\277\202\245\266\277!\020\237\277\377{\224\277\330\235\021\277\260\203\n=-\365G?2\335\010\277\216\245\\>\242z\014?\377B+?\200t\r?~2[?\311m\247?]\360\277?c\343z?\325\355\225?\374X\206>$ \024?\216\233\257?\252\204`?\306\235\204>6\202\344\275\025\305\025\277\005`\031\277,yM\277C=\202\2778\265\341\277\212\2455\277)r\023\277\020\363\264=\343\377\304\276\260\332\231\276\265\262\366\276\034\001&?\\\307\305\2765\344\242>\2308\213=`\337\033\277 \315\306\277\234u\315\277`\232\220\277\215y\355\276:\303\340\277v\370\244\276)\253\323>c\200\213?\225\021V?\317\364\000?*\330\"?,\305\210\276up\255\276>\260\264\276\256\262\000>\277\3632\277g1\035\277\310\315\346\276\034\206\274\276\330\206\235\275\270\n\205\277\3006\226\277}\362\311\277D#S\277\243Y\213\276\261P\266\277w4\200\277\006\226\324\277\360L\364\276\252\350}\277l\024\023\277\343H^?\324D\345=\377\234\234\276\241\322\266\276\225\224<\277\334\324\212\275>\216?\276%I9\277B\235?\277r\344\271\276t\247[?6[\352>-fF?@\t\357<^6\023\275\366$\253>j\371/?n\330\013?\376\005C?\277\333\201?\240H\337=\256q >\362\240\206\275|\357\370\275<\277\222?:\334\227?\321\337\205?\021?\264?\316W\233?(\230\010@\376s\204?=\343\232?\347x\013?\210\177\230?k\377\014?v->>\"uh\276R\242\216>\252\347#\276\220Q,>\371\363_>I7H?\032@\263?MM\346?\\\"\035@\222O\220?\274,j>\342<H\276\3643S>hv\315?C\272\037@\030\257\377? \322\356?Q<\000@\200/\307?\226l\261?\216\277\253?\\\341\250?Z\006\274?F@\243?\367\242\307?)\363\004?\357\025\255\276>\213\303\276\354g\246\276e7,\277*sl\277x\023\352\275Rs\374=\034\333\206?{\331\271?\320\200N=\312\261\324>h\016.?k\225w\277\314\327T\277`\233\246\277t\302\306\277J\330!\277*\326\255\276\202\376/\277\234;\230>A\264\341\276v\027n\277d\275\315\277\330\000\366\277\2318\324\277\275\235\346\277\250\306g\277\300\235\223\277\300\332\242\275\177g4?\201g\301?\305\304r?\232a\211>\025\250\037?\346\355\200?\346\274\241?\272\036\355>\211\323\365>\002c\\?\3642\334?cc\307?\2343\221?xc\\>\037\230~\277;\'i\2775\236\347\276\035\252\306\277\246<\002\277\354\361z>\311\243\007?\373\274-\277\342u+\277B5\014\2776o\031?J1T?\370a\t?:zu>\362\336\213?s\n\217?@\332\006\275\036\3525\276\377x\005\277\310I\\\276n\235\272\276/\223\315\276\224\261\000?\260\306\230?\0179\231?b\372\321>fwI?\030?\247>\220\261\320\277\242\275\231\277\360\334T\277\364\253H\276\000\302\014\277\236\035\036\276\222-\001?GW>?\\\372U>\177\371L>\352D\304\2760\370\276<\000\220\377>\234\260\267\275\320\246(\276x&5\276\361\2054?\000h\22096\230\230\276\325\343\035\277\220\274\014>T\330\302>\030i\014?\007\217<?\216\200F?\024\203\260>Rp\344\276\200\321\220\273\256\314(>\364Y\022\277Q\014f\277O\323\234\277\355\335\336\276\017\320L>\220XS\277\3436X\277o\230\215\277\304\315z\277\240\035W\277\360\204\031>\313q\231\276\200%(\277W\033\026\277\006\305v\277vSj\277@Aj\275\032\004\036\2751\206\373\276\3209\254?T\307&?\331\214\264?\354\000\034?\016\316$?\264\035\311?\356\237\243?\353\001\232?0\322\265?<\271t> y\342>\336\215\326\275\306\"\005>r/\304\276\346\243]>\356\346\355\276\3120\037\276\377\262\266\275T\354\202\275\270\343}?\376\\\r>9p\313?$Z\225?\343\373\242?m\264\234\277\254\'=\276\310\377J\276\260\025\244\277\225~\336\277\034\335\264\277\273\2261\277Kp-\277\276\247\342\276p\331\206<\346m\007>\200\035\357\276\240\001\327=4\205\350>#\007-?\276\245\277>\2610\215?`\262i?G\341V?\232\266\244?\264\266\033\277O\200\022\277\314\204\031\277\3229\357\276\304\240,\277@7\007\277\375\302E\277\016q\267\276\236\375\360=,\370d\276\026\366\236>2\177\362>L\301A?\033?\252?ic\367?\'L\351?+ \r@\357^\013@\333V\322?N\270\317?6\2211@\273\355\036@I\220\023@\346\310\365?\277*B?\270\\\227\276\037\371\220\277\216W}\2770\257\255?\024\353h>=\232\007?vN\006?\260\377Z?\362\361g>\360Q\000\276{\204\035\276\242\335\215\276p\321\317\275\010C\337\274N{\316=\330\224o\276[k`\277J\226\201\277\243R\213\277\\\250\005>\370\357]=?Dt>\273\001\235>\010f\262\275\366\240U\277\341\221\205\277Ic\223\277~\353^\277*k\226\276\032\017\241\275j\026\321\275t\002\255\276\007\270U\276\263fW>s\330\304>\222\272K?\242\226+?C\340\'?\300[\323<K\275\013?Y\031=?\350\202.>\020@6<s\321o>I%\213\276|\332\214\277\266\354\302\276\207\007\362\276\304\344\370=\252<\370>\324\022\337>\222\024\264\274#\2438?\244\343r\276\274\223t\275\374\345 =\261\340p?\356;\243?U\212G?\0003\255=\224bo\276i:\254>\357<W>$\357\267\276D\345\226\277\010\265\271\277\203=\237\277D\037z\277\374\251\214\277\016\035\274\277\225cj\277\274\313\016\300\232\352\r\300\302R\337\277\366\204$\300\307(q>\210\313~>@\177\211<\211\235\024>\177\375*\277\212\277s\277D\255J\276\364\305\220<\252A\377<lq\310\276\343\303\026>\"\376b\276\222fu>\220YT<\315\315\000\277q\233\375\276\206\'O?\020\0302>2n\341>C\372F\277\246P`\277\277\321C\277\231\331\305\277*B\324\277\346\255%>\30035\274NNG?\266\347z?.\3167?:\251\215?\340y\265=f\256H?u\037\210?\3041\332>\366\321V\276\364\261(\277\256\300\006\277\356\256*\277L\301\231\277\233\203\230\277\036}\377\276\336\202~\277\320\3162=\033\033\020?d\327\033?\272\346y>i\263\013?,7^=\350\016\300=\204\326\333\276\372\203\246\276J\031\201\277\261\300\372\277\240\340\216\277\\\261\375\277\347\370\341\277=5\255\277F\306\017\300\271J\262\277\232\267\347\277`\340?=[\224#?\\-w\276\260\253!\277S\203\216\276\r\032-?\002{\353>\\-m\275\tp\267\276\351n\232\277oB\232\2772\310\232\277(\312\235\274\010\001A\275\253\\\222\277\262\3369\277h\'M>\252\031q?\226\'\007?\010\322\214>@\3461\277\220\376\307\277G#\314\277.\027\224\277\232G\243\277\210\231\215\277\270\267\221\277\201\372\004?(jd?ai5?t\261\202?\266\337v?$w#?ZD\014?\253\276\233?5\223\023?.3\021>\236\3612?zA5?\036\205\221?\353\220\235?\346\304\302?\301a\334>U>C?\\\016\207?.\272\266?|\016\210?\212*\345>\244PQ?\367\254\267?.\336\005@yS\342?1\207\356?T\265\264?\363\214\255?\223\316\263?\247a\310?\027\374\241?|]\236?\\\022\254?PH\245>\377\274\002?\250\376\027?.r\225\276\202\211\310\275n\301\250\276\334^\317\276P\270\200\275lr\n>\266m\036\277\354M\274\277d\272\006\300;\330e\27784\014\277\367\363\220\277\225Y\222\277\274z9\276\3278\366>\034\261\350\276\316\211\233\276\306\337\317\276N\250\251\277\256@\244\277\034\321\263\277\221u\232?L\'\252?@;\201\276B5\242\277\257\304\313\277\357\277\246\277;.\255\276\250\3542\277\340\226\245=(g\333\275\247\334|\277\004\263\214\277~\226!?\300\213\315=\320{\261?Z\336\372?\016) @+\014=?k\243=?\367\332\311?\000\354\266?\017\314\271?\370\037\366?`{3@\240P\006\276\024\214D\276\276OX?.\"\004@\231\340\357?v\243\025@\204\367\020@\246\010\274?\363\0221?\320\311\221?\310\237\022?`T2?\236J\306?$j\020?V\301\005?\260AH?\352nA\276|\301\361>\367\303\230\276-\0356\276\334\013\305>a\257~\276>.\223\275~\261\231>\247\303\272\276\264\357B\277\210\360\267=\005\005\324\276\227]y\276\250\346g\277!\300t\277\320\312l\277n\203\t\277\234.=\277\354\026\252\275\302q.?\002\005\214?\035c\360?B\363\337?\250G@@\2625/@(\306>@>2\315?@\233\236?\177B\261?\200\374\361>\014St?\340\367F?A\231z\277Va\017\277|\206/\277\334+!\276 \013\026?\340k\307>f\254\003\277\234\201\257>\002$\262=\226\305I\277\266\302\237\277D\322U\277\000\203\207\273\004Y\353\276\232>u\277V5_\27766\257\277Qd\022\277v?\224\277\220}\224=2j\314\276\324\032m\277\016\303\331\277\007%9\277\210\335\372=JL\022?\'\336\323>P?\304=T-N?L\213`?\376\324\214\277`\310\251\277\270o\033\277\234\3679\277dM\035\276\331,\005\277\342P\032?\234;\220?\376z\221?\230\213\372\275\303\031;?M\203<?\205\202v?fk\312?\004\006\351?\260w\266?\370;x>B,%=8{\363\277@\236\221\277<LR>\230\205\203\276[\005r?k\022\222?K\336y?\005\356\007?\3347\277\275\302a\036>h\246\227=\200\335\252>RXt?\345\001f?\016L\310?\236n\332?\tu\211?\300\254\274?\243\202\203?\314\270\005? \254c\277\302g\022\277\036\007j\276n\354\334\276w/\334\2764\227\246\2776I\031\300\260\r\367\277b@\301\277$\036\035\277SO\366\276/ST\277\031n\336\276\244\3074\275\255\216\205\277\272c\307\277\263\026\376\276D\002\341\276_\323\003\277~\220\275>\232\t\373\276\316:\313\276\300\'\206\275\177\305N\277\242\351\021\277c;\037\277\231\232)\277\246\022\336\276>7\205\277:C\267\276@\203\t=\016\243\372>K:\207?\316\235.?\344\001\002>\252\224\035>_\323$?\314\247\333>\004\317\355>\351\2643>rg\235\275\277\330\252=&\021\314\275\302^\316==u\034\277\267\363!\277;s\301\276\210\0055?\334\276\336>\224\357\007?\313n^?xSA>\2713\001\277\303\216O\277r\214\004\277\204\315s\277\031i\200\277\240C\336\2771\315\241\277\226}R\277\253\006\310>\300\376P>\322H\005\277,\000\224\276\266B\374\276@\342\342\275\033(x\276k\177\034>\024\032\353\275z%.\277\377\'\221\277\300Q\325\277\310\323\320\277\243\273\267\277\230\007\301\276\206\306\037\277\200\333\221\274\027Pw>@\243\\<\315\221O\276&\244\235\276\271\374\"\277\274\216c\2770\212\343\276 I\002\274\022\211\206>\357Yb?-\261R?h\013s\275\313\232/\277\337\"E\277\340O\203\277\250\n\235\277\327\243\217\277#\222\'\277h\n\202\275k\357A?\366.\332\276c\246\373\277V\216\313\277\242@\212\277b\033\260\277R\323\310\277\326\306+\277\017[D\277\225y\233\277/\275W\277\222\2763>:\306\017\277|\352\233\277J\030\323\277\014K\234\277\310-\010\277@\312\325<\354\020\003\277\323\263\023\277\210\n|\276\340\315\013\2762\247f\277\204\243\245\277\000\022\304>\202\343\023?\330\252,\276\277\014 \277\r\241\215\277\300)\265\275\303K\344\276\324\256\037>\311\200$>\213PW?\250\006H?\002w\327\2762\2422\277\317\233T\277k\323\'\277(\324\363\275\254\252\305\275\013\320\027\277;\'A\2774e\355\276R\027\177\277\331`\264\277{N\265\276\307\037\254\276OS\177\276\242<\353>\322\250\232>\214\233\000?\372\274\206>S~\275\276\306s\017\277We\034\277x7Y>\324\241\244=\265\"\314\2752t\225\277\001\353\262\277\010p\335\277s\026(\277\010\022\220?\022\261\222?\030\177\230?\366q\210?\016\213\322>\214\350\300>\006\376\220=\214\300\004>NR_?\3400*\274\006Z\257\276|i`\277uc\003\277\300\234\016\276\006w\272>\254b\363>B\351g\276\333\033\005>Fr\310\2765\347\033\277A\t\275\276\236\367\010?\342\017k?\247\331\255?\235p\325?\340[\322>\323\3166?\220^\200?h\216o>.o-?(>\014\276>\304M?b\013\214?r\t\251?M\026\375?\004G\031@\250\276\t@\360\360o=0\212\255\276\371*<\276\314\217\023\277\330\223%\276\032\350\026?9|\004?\036\255\034>EP\307>\375\014\272?r=\333>z\304u?/r\246?\224\315\217?\021\226\207?\274g\321>\222\217$?\304\245K\277\347\263S\277\320\335J?a\345\037?\2004\255>\264\240h?\221KZ?\034\3530\277\240\336P=\264\345\262\275yw\262\276RS\016?,\205\310?WT\343?\222\222\263?\341\374\347?\327\364\272?\004\254\265?\220aS?w\255=?\222w\264?\014\246\201?V\024\207?%\001\270?\351;\376>xh\205=\256\242\221\277\2058_\277T\225\022\2766\265\234\276\034\2350>\321\373\375\276\211\307\035\276%\357\205\277\002\004+\277X\343\365\276\244\"\017\277\375\245\375\276\334\376\014\277\260\017\021>\266\023\271>O\273\225?3\321\205\277\320\026\'>\344\024\027\277\030\252\211\277\230\316\233>\34471=\020\344\037\276\023*6??;\202>Y\312;?8\370k?=w\362>\232\000\334>\260\210\242=>5m\276tz\326\276\232~O\277\230\\C\277 \'\355\274\272\207\251\275\001\330\250>W\033/?\320\374\030?b\031\355>\355~\220>pR\352\274\032\317J>~+\250>v\302\024>\257\267\222>\277\214\000>I\304\"\277\336,\316\276\266\003#\277\324\277\312\276\276T\304\276\253Y\254\276\262\347{>\\\215\032?U\317&\277v4\332\275\353\330\016?\252\246\364>`\000\237>\247\352\242>\3329\327?\\\214\252?\032\274\320?\332f\360?g+\330?\345}\342?Bi\223?\003\231\312?\353\336a?\254\000\347=\'\032\010\277\250eX\276\334Na\277%<a\277d\275\315\277ud\205\277\256\346\203>`\245/?Q\251#?\240\276@\275\226C4\277\032\3527\276\t\004\021\277ZC\023?z\256D>\270S\243\274\263X\374=\323}\324\275\024\341/?\311\247\000?$\327\224? \034\225?\037g\333?\362\023\261?\273\244\362?\324\014\t?\3523\026?\356\324\204?\304G\177?XI\231?\230\r)?\205b,?\316\275\213?\227\031\255?\326\336\343>\256(\211>\330\252\272>\007\233\017?R(\212>\240\000/?\354\236.\276zA\264=3\243D\276\264\224\001\276\030\344\344\276\034\214I\276\210\200w\276\206e\034>\256\201F?a\342\317?~d\001?\250P\"?0vE?O\267\231?\274A\343\276\220|\215=.\004H?J\263\256\2760\330\376\274\010\326\r>\036\322o?\305\\\202?\204\314 ?\212]\264>\242\370\265>REu\277\261\245\216\277\014\000\243\277\220xB\277\022=w\277\003\313\330\276Z\354\213\276\000\300\242:\271\025L\277sS^\277 N\301\2772\342\364\276\023\020\253\277\212\237\266?L\001\216?\361\312\207?bE\337?\\#\247?\264\225x\276\035+.\276\215cE?\2360\313>gP\335>\302\020\035\277\344\367\035?4\373\227\276\027\277\237>\264\301\202>\004\354\215?\332\3072?\236\337\367>TV\263>\316\303P?\346\271\264?\005\244\201?\232\204\356?k%s?\332\216\237?\302\337\357?(TE?\222iF?\276(C?\260\235\213?\252\355\264>\324\210\346>vs=?j\223\200\277\340\232\224\277\2165\237\277\031l\276\277\311\t\257\277o\326\240\277eBc\277\230\266\346\275\352P\023\277\346\016 \276\036W\344\275\320\251\203\277KS\304\276`\367\006<\342l\230> \275c=\316v\336>\343\374W?\3165u?\367\305\210?\214\330\307?\261\350X?\376\3143?`\004R?\213\370[?\244\240O?\037\265\212>mr\302?\032\300\240?\204$\250>\034=\322>\256+m?\311\206t?1\215\324?Vhe?\030#\004>\000\350\013=\226\264o?l4 ?<1\236\276\334\177e=\264Xb?\306\273\021?\300\235\027?\030\030\224?\334\215\322?\210\223\217?\242f\345?\354\214\202?\212\223\200?V!\212?\202y0?\030\273\315=\316CG\276\321\0169?\242.\004?\211\274\360>\326\360;\276-\246\367=\337\3400>\370\020\361\276\341\020.\277\353\031\321\276\212\243\223\277\016\224&\300Y\301B\300AE\311\277\037\351\346\277`\256\257\277\252\212\244\277\277;\007\300x\371/\300\264\335.\300\201^.\300\310\'\010\300\304\261\\\277ty\'\277Nd\226\277j\372\031\277k\267\204\277$\316\234\277\317zk\277?;\020\277gw\212\277\340\255\370<\310\334\207\276i^\t\277\355\'7\277V\371\372\276,\034D\277\000\321\007=\247\247\323\275\364\373\316\276#W6?\230\277\373?\327\201\271?\304\265=?\234\364\013\276\362\204S\277\312d\264\277\255@\262\277\314d\207\276\273\\y>\344\325O?@y\273<\366J\355>\220\371G>\2337^\277iBE\277\224\312\204\277\3665\264\276\333\214*?\204\270\'?^\331>?\350\240\022>D\341\314>t\265\273\276])\027\277\302\226!\277\361?G?\374\217U?X\032\250?`\332\212?\213\370;? \334\262>=\273\002?\242\355\027>=]M>\200\003\037>\232y\022?*Ez>\217<\213\277\004\362`\276T\034}\277\006\330x\277\014\352\267\274lK\256>b\240\002\277\350\205V\276\201-v\277\373V\317\276c\271\205\277=\275J\277\271\003\242\277\2443\277\277_\035\346\277D\277\351\277X\253\233\277(\003\253\276r\032/\277\200\216\223>.\312.\277\266\010&\276\345\005\017\276P\360\026?|*\246\276\255\246\217\277\377\016\312\277\206\3751\300P\220\276\276\376\300\006\276\261\213\202\2770\277\234\2752\273\250>:\354,>*r\253>\247\177\247?\200\265P\275\t\002O\276\276\270=?\020\233\234=^\332\002\276\246\212\021\277z\241\226>4S\265?\311\343\002@\022\033\210?b\343\276?\300\300\302<\302\350\251\276&Gh\277I\210\034\277\256\364/\277`D\010=\346\244\376\276\310\001\342>\303\320X?p\375\004\276Z\374\325>\004D1\276I\"m\277\000\027\021\277\362\336\013\277\272*p\277F\027A\277@\004\254\277\253\r\330\277:\275\024\300N$:\300\223\003z\3001\277c\300\205\3508\300\306\325\315\277\360x\213\277\302\242\263\277-\236\034\277*\272[\277\250\010(?\020\215\271\275\367\200.?\266\215\357>C\367\243\276)N5?\021=\271>e\363\235\276+\216\205\276\030\n\256\276\342|,?\310Dw>\006\266\362\2761X\263\276\340\007\364>\031Qu>\006\001\267>\227\275\204>\210\022\233?\224\023\207>\2667\003?\016`\244?]\322\r?6\234\017>Y;\"\277\270\371c\277\370~\222\277\323\300\277\277\366\370^\277\260\277\233\277\346\272\212\277Z\372\333\276a\320\213\276c\352I\276\332\347\302>\266\030\202>\212!/?\203\001A?\264@\030?h\354\240\2768\363!\277\260kO>o7C>\n\3276\276v\210\014?6\000c>\312))>\361>;>\256\254\226?\336\313\202?\240\205\255?\371\353\237?r\034\216\276d\\\210\276\262\323H\277)H\257\276\371\022\335\276r\247\204?v2\276>\020\000U\276o\376V\276\206\250\316\277\017V\346\277Jv\330\277\027\361=\277\326\202\357\277\000l\310\2726\006\353>V8\001?{4\251>\270+;>|\277*?\323\n\203?\351~\343>H\324\035?\001C\245>.\247D\277v\367C\277IG-\277\\\247\241\276\231\000)?\037O\210?\242\355\211?\2461\327?&k\023@\270X\205?\244o\370?_\313\025@\340$,=\240\257+?\342$\345>FzU\276\317\003\325\276\326\214\231>\232\037\026?\200\316=\275\272CL?\256[\237?\374?\333?\010F\272?\362\240\202?\3303\321?\007o\321?\rP\324?\2225\030@h\200\001@\310w\017?\362\312`>\354\272\035\276\220\314\330\276\360\027\021\276\205\235\007\277\355\022o\2775\263\030?l\255o\276\324\370\360\276\275\035\216\277\001v5\277/\n@\277\361\ti\277\002\3741?@1<\274&)\034>\322\246\034?E\342\327?\202\267\254?\221u\303?&\263\323?\343\223t?\010\033\216?\362\025\354>\300\271\241>\346W\016?\363\022M?;;Q?\371\\\312>\365:!?\212f\001?Xa\220>\224GE\276E\275S\277\027\254\322\276~ e>=;\226>\324\036\210\277\016\263\025\300F\366\003\300\243\252\'\300?\026\024\300qG\020\300\217\216\031\300L\316Y\277\nD\010\277^w\313\277\262\303\253\276\325\373\347\276\330\366]\277Wk-\277\200i\000\276\014\021[>\310%\301=\360L)\277\022\246\242\277=\017!\277X\242I\275\264\230\346\275\306c\215>y\356\367>R\242\'>\275\322\260?\033\347 ?\352\340\211>\241;\211?\016 \252?\241\3627?\017+\007?\350\210\322=]>\205=yG\330>c\237\232?~\337\314?TBw?p\203i\275G\327\004?\376\210^?\2736\274?\244\367\017@\013\215\370?\022\310\026@\377K\025@\034\245\031@\006\352\252?\272\206#>\372\220\250=$o\215\276\n\300\237=+\004\332\275\324F@>Q\235\211>\277\017\330\276\240\374X<`z\310\275\032\371\221\276&|0>U\235\327>4}\217\275\365\303|\275\246\0340?\307\016X?\232v\325>\026`\301\276`\274\311\274=h\336>\210\245\'?\377\362\004?\0003\353>\340\214l?\321A\222?Sh\006?m\327.?\000*\021;7\"\236>b\005\005?\374\210\244>PWY>\333\361\017?\016.\205?\270rm?\004|u\276\372\274\025?n\216D?X\301]\275x0\224\275\234\014\344\276rl\341>p\0352>\340\207>\2754Fn\277\007\331\301\276\324\274\377\275q!\202?\376\312\264?\323)\237?p\223U>|\333\207>\206\220\251>\260\255P?\030\030F?\250\313/?0\215\354>\330$\222\275\020:9>P\367\022\277\212\262\361\276\240c7=\236\332c>16\276\276$\003\216\276#\366\016?Xc\347\275\t\034\r\276\337\003\240>]\t\224\276\256\227\025\277\342$\361\277L\313\265\277\377\265\330\277eg\300\277P\334\023=\302;\303=\300\275\002?\315\260\222?\334\335;?\026c\323>\250\270\347>\2422@?\2643\214?c\377\223?g1\215?\300\377\240?\250\377\007@\305\334\007@Q#\212?\200\006|<<\366\242<\336\0360?Z\320\242?\300\311\005?\021\004\026\2772\007\210\277\307m>\277\260\233\343\277\340N\206\277\226)V\277|h\013\276\221\246;\275\236\214\264\276\014\343\273\275\341\271\350>B\270\201\277\023\0256\277f\320z\277\317\367T\277\300\303\'\277\343\350\002?\2268\n?\314u\036?\256\021\334>\010\274\226=\253T\023\277\000\346\224\277\344I\270\2776\337\341?\344|\233?\237#\264?\032{\365>*\255\000@\272k#?,t\315>\234\362\352?\364\347\355?\236n\230?;\247;?\270nm?@\270\276=\330\t\177\276\245A\200\276\026\005G\277\tA?\277\366{G\277\274\202\222=\031\344\233\275\362h=>\246\256X?\"\370,?\341\337J>\204\027\220\276\365\336\347>\245\036\252>.k\215>\030\322\341<z\0255\276\034\233 =d3\'?\200\273\214<L\023\361=\232\037\022=1\026\313>~\277\222?\300N\006@\356\377\320?R6\226?KF\347?j\247\377?\303\342\211?\201\326\223?\204\355\312>\357\034\332>\037\027B\277\341\3645\277\223\334\317>\237\014\020?\203E;?\3562q?&\313\236\276\227\314v\276<\023\213=\342\362\220=\352\346\334<34\035\2753\277\203\277\200\201\311<\374\331\200?\013\246\200?,\337z?L\003\323?\360\222K?@iN?\030]\216?%\034\210?\266L\255>\364\266\025?\214\\w>%\341i?\016N\314>\353\355\372\276o7|\276\304\360\310\2764\232\022=\336\360d?\303\036\222?\332m\254?\246\023\241?2\n\243?\366\3031?\006\222?>\265\237\225?\217\016c?\245jl?\010\025r>\244\006\r?TB\r?Pe\225>\272\372\232\276\000\232\277;\310\3327\275\207\265<?k\324\022?d\302\034?w.&?\233\350??lZ\036?\366\260c\277\307\004\220\277\210s\353\277l\321\237\277\245\010\235\277\200\332\347=.\245\332=^\213\024=\364\211l?x\303]?O\260Q?\343_\223?Q\245\314?\024\215\010?P\r?=\256\004%>\202\340\236>*\301\340\276>\250\276\275*\216\275>\237\212\335?\017\251l?\217\233\261>w\375\362>\365\270\212?\376\262\313>\352\033T?\333#\352>\220j:?\344\020\306?NB\257?)\334\266?\300\344\335=\336\234:>\ne\177>A<<?/\365\276?d\310\257?\336&\212?\211\'\201?\026\013\252>\213\377\275>\316\004\307>&\014\024?@\245\217\2779\211\233\277\310M\350\275\3674\220?\315\345f?o\033\272>\307y\237?0\006\340\275\345;\340>\363\214\221?Z\361\025?\234\022\267>\036\266h?h\322\250?\273#\253?\261\021\216?\200Wb?Y:-?\006?c?\177*\t?\200\365\020>B\373\244?\347uq?\245\024F?w\tG\277\001\024G\277\305\003B\277\331\240~\276\204hc>\005`\372=\2270\232\275\006\177\260>H^D\275[\027j\277\364\366M\277\030\304~\277\010&\300=\202\007\303>\020\204\031\276\361*\253>\220\177d?}U\253?\352\3030?!\326\025\277\036.U\276Km\332\276a\203\212\277\320\230Z><\343d?4`Z>\375tJ\276\206\031 \276\254\226\222\275o(;\277p\010H>\316\232@\276!\276\217=xw\364>3z\253\276sD\203?\367D\310?\261\300\341?\300\335\034@\225\255\t@\265!\251?`\326\261?\304nc?,\020\\\276\001\254\362\275\364\304\307\276|\300\033=\306\0004?\3355F?\374e\014>\366\205[>\220i#\276\252D?\276e\025\226\277\356l\315\277\204~\177\277\346\375i\277\3724\316\277\030Q\007\300\372\262\324\277\\\272\'\277Y\2528\277\311C\025\277\333\201\266\276<~\271\276\221\265\227\277\226A\026\277\256\326k\277\254Z\226\277\226\265\272\277*F&\2772\237\204\276\334\225Q?+U\276>\302w\217\277\340\264\235<^\264\022?N\270\210?\240\377&?\310\360h?/L\207?\240\035\232?\374\315\254?\277\201\307?f>\241?\000 \033\274<eM\277\330\264\234\277\322\223\321\277\036\"\314\277k\216\332\277\200\205\366\273\016\264\207<\340=\373<H\254\346>h\232\214\274\006\304\007\277\200\341M\273}(\310\275\215\344R\277\000d6\273\222.\t?\202\260\007\276\016i&\277\030~\326\276\316\203+?\004\246Y\276\036\364\n?U\376\373\276\306\315\314\276d\330\016\277\016\233]\277\352\017\227\276\213\350\220\276\364\250~\275\002O\023\276\372P\276\276\340\247\023\276f\333\313\276d\255\264=\253\217<\274\031\271\242>e\031\257\276h\'\351\276p\254\361\275\302\312G>\247\360\220?\316\021\223\277:\'C\277vx\237\277WQ\307\277\276\376\243\277\305\274\007\300\006\335\376\277\251\334V\277\352k\207\277`\366\275>\'\334x?\326\266\255?\362R\000@y\370\352?H\321\270>(\312D?\314\326\236?\327\224.\277\371\315\026\277\260j\227\277\376\263\366\276`\356\207\277\335\212G\277n\270\220\277\225k\016\277pB\014>.^\240\277\221\225\241\277\307\223\213\277\326L\260\276\310\025\245= \346b>\326\036\352>x\357\016?\251;\006?\250r\017?\226\031O?d\357\032?\262\216\230\276\224\235\241\277~\215\360\277M\207\210?\337\267\"?\0020*?R\304\266\276i6\246\276\234\342\007\277N53>[\371\004\277\206\307G\276\036\364\211>\3407|\274\276\301C\276A}\222\276\314\206\023\276\326\362~>\313\260@?\003\347C?\341\271\277?W\214\002@\026\t\227?\260\273\252?\273[\342?\210\027k? \254~?p\277\265<\265\020\017?\270^S?|OS?SB\217?(\241\227?\247\257\252?\204\251z>`\306\277\275\363)|?t\251/?E;\025?\352Ew?\340\253\215?\036<\250?\243\205\235?x\250i\277I\376\313\277\2505\341\277\032C\346\277\274\037\216\277\374\036+\277`>\017\2767\371\241\277\010\357\334\275h\270\342>rt\010>+\242z\276D\ts\276\327\222\227\277z\214\220\277\352\277D\277,N\"\277\014\t\351\276h_z\277h\362\013\300\304S\314\276]0\224>P\342\033>\253|t?\225\210\310>\216\030\013>Z\326\261?\"\030y?^}\361\276\006\303\211\275\372\021M\277\245\002C?\304V\336=\006D\204?\300nJ>\030\322V\275Fe\007?\336<B>\317jN\276\335-\224\276Z\313\367\276A\003L\2778\'\277\277\350NI\276\025\222\215\277\020\376\226\277\001\003r\277+aC\277!\316\027\277\346\224z\277y,+\277p)\237\276\000\306a:\025\321\311\276\255\374S\276-y8\277\330h@@\'\350]@\214\315t@R\362C@\331\215H@K\333\022@\"\327\366?\277\246\n@0Y\237?\235o\205?\257U\'?\277\317\275\276\322`\n\277\251,\274\277h\273\331\276.\211\335\2769Y\021\277`[\350<$\334\006\277\375\236\251>\351\307\273?\350\021\266?\366 \207?\"\t\221?|\213\202\2773\365\246\277\207\036\024\277\200F\240\276>9A\276\266\300t\276\001\t\355\2758e\306\276\202\2711>\322\244\021\277\350\361\265=\273\032\250\276\031\\\003?s\217\372>\240\201\335=t$\262\274L\010\233?\217\270\201?\251>Y?\261\004x?)\310E?2X2?\356B\350\276F\226.\277\260q\364\275\234\254\250<\371&\272\2764\310x\277?\207\373\277v\241\362\277w\303\010\3002\345\253\277\256\342\216\277\310\2156\277\265\204K?\310\321\361>\340\334\017\276\333v!\277\335\323q\276p\027\315\274j\033-\277\265O\203\277\224oK>\350`m>\370l\224\275\307P>\277$\325Q\277\220\236\004\275$\312\177\277#%!\277\211\206\230>\222\340u>\007)\017?\214W\005\277(\242\374>{x\031?p)O?BE\"?R\224\275?,\004\220?\037\277L?~!<?N\222T\277\276\026N\277\224!O\277\037\223_\277<\317V\277\345B+\277\207\343V\277q\351(\277\240\032\201>\234\246\352=4a\214\277\274\245\345\277\316\327\234\276\262m\013\277\254\033\374=\214CL?\307\331U?\003\263\362>\360\t\331=\210\343\213\276|\035\214>@\242B?(,\260=VNj\277\326gE\276\345\322\233\277\254\214\007>\252\241\030\277\034\243l\277\314\244S\277\014\371k\277n\237\225\276\t4\236\276\376\213\237\276\300\314l<2\354\260>\240\0164=\3649\263>\010=\252=\325\333\262\276\266\354\311\277t\340\001\277\202\363\361\276)2N\2760\264\204\274\236#\215<\370`W?:\273\374>\020]B\277\330\273!\277\222\341\267\276\252P`\276\325\351\322>)\254O?$iM?\323-F?\203S\035?\000cr\274\2705\265=.IC?h=\302?\024\245\026?hw?\277_X\205\277\014L+\277\231F\020?\2453~?\371\235W?l\211\272?\205\023\254?P\017\320?D\n\257?\344\224M?\202\231q?\264\010\002@@\320\263?\304\233\301?\365\032K?\340\341\247\274H\212\220\275\017q\220=\005O\026\277Xb\005=\22145?\004I\244?\345\030%?\316\024\272?\377g\352?p>F?YA\202?\206it?\330\314~\276\262\237\010?fe\244>~2\252\277\327\025\267\277\210\367V\276 \243\000\277\303\351T\276\177\016\241\276ma\211>\250\177g?M\305\252?\264;J?\350W1\275\251\300x\277\034\014\335?\322\235\000@r\223\255?Q<\234?\306d\341?||\001@b\210\246?\357D\024?\301\225\210>Y\264\235>_1\236\276\250o\006?2Q\327>\254\231\262>\000\275f>-\2751\276y\264x>\335)v>8bp>J\245\245\276^K\242\277\313\312/\277>\243\032\276X\317Y\276\325\032\003>\256\354\017\275i\363k>a\243\203>l\365\237\277\261\246\224\277\200A\221\277,\216\226\277G\355\210\276x\316\037\275\314\252\254\276M8u\277\224\213Z>\241\353}>\312 \204?fI\204?v%f?\0009\241<\3139\004?V\033\333>\304x\t?\034\306\216?\340K\341<\310\022\327<\300\256(\277\344\265-\277Clr\277\330\351-\275\227%Z\277\311\0144\277`\304N\277\024R\302\277\224\270\363\277\373\324F\2778`h\277\300K#\276\343\354\022?p\327T?T\254,>h[\261>\212N\026\277>y\017\277\2648$\277\013s\246\277\242\033\200\277\372\033\315\276\374\244\317\275-\325n\277\245\211\354\2765\376\275\277\247\217\214\277{d\205\276\224]]\277\231\003\253\276\302\3441\277\270\245\224=:\030A\277\2347>\277;\302M\276L\022\206\276\240J\215=\200[\342\276\3669\217\2770\267\305=\013b\203?\307m\300?\272\247\214?\032Y5?NH\244?\020\257/@\017\237\245?\025E]?Y\234+\277\006\323T\2764o\031>\360\031h?z7\241>\261\247\240>P\336\321>\014\017c\276\374IY=\256\300\342=\237\027\217\276\340\312\033\276\232\nG\276\264\217\256\276\362M3\277\024l\242\276\251Y\240\276\270=T=_r\226\276\302\311\030\277\240 \227\276\210\255\021?\341v\274\276\370\227}=\307\n\374>r\273\030?\026\212z?O~P?\367\340\223?KL\240?\010\325\221>\010\216\177\276\276Qb>\020L(\276\022p\201>\320K\350\274\272h+?\000\340\356<\235r\245<\340-\363=\036W6\277\263\276\325\276\254\226\006>byg\2764,\202?\177T{?\204\222a?\021\220H?\354x7?~r\263?a5\257?l\345\342?0\240.>\200\002\323\276\033\253h?\246{\003?R\276\321>$\256\013\277L\021\203\277.\\U\277$hE\277$\221k\277\000s\025?z\271\274>\313t\250\276\032\001\222\276\367\236\034\277\024\350\341\276` \033\277\210nV\276VY$?FVD?trz?\356\251f\277\245\347\251\277\2454\373\277H\302\335\277\316*\006\300$;\260\277\230\267\004\300\2322\003\300\330/\311\277\320\322\252\277`\225=\277w\325\352\276\026z\360> $w=\005B\251\276Lp:\277w[\206\277g\314a\277\257\343\006\277=\333\207\276\247IJ>\344\036=>\332\'7?\247\242\352\276\2008Y\275\233\266\243\277?\"\307\277\001\207\223\277dey\2778\224\352>@$l?\0303\177>y\243\217>\2341\242\275\"\335\374\2767\200\274>\272O\366=\001\242\022\276F\323\021?mZ\215>\322\305\367>LV\245=\367\373\320\276\206\252\365\276\234\335\216\276\310\212\007?\204\2172\277P\"M\277\217\353\210\277\200\362\265<\226\257H>n\364)?\200&\322?ebL?\225\317\251?\036\307\323?\252\222\214?:\317r?\316\365\202>\250\n\224\275\266+\315>\246\320\302>\013\334\\?\257\005\303?\302.\361?\354\324\321\276\342\177\224\277\2762\360\277\346\321\372\277\"\307\037\300\036\016(\300\022E1\277\335\363\302\276\376\237\317\276[\375$\276\014\332\240\276\032\336\336\275P\256\252\274C\277/?\033\373)?\304&\274\275~\333\235\277\231\031\216\277g=\246\277v\325\300\277\034^\031>\342+5?\224\327\253>\340X&?(\327\310>[\302\227>\030\356x\276\235M\231?rA\343?\234\367\023@\002\312\223?\244\r\235?\212A\226?\320n\310?\235\302\313?6Qt?\224\242\215?LH\346\276SL\244\276n\347q\277\312(\310\276\273h\032\276\246\325\335\276\360\231\231\277<(\342\276\256d)\276\202#\033?5\213\327>\313\2619>\373%\016\276\2468\247>.\330\207>\2200<?\320\032\255=\363`\241\276\036\264T\276@B\372>(\237\254>\306\025\264>0\254R?\357(D?\320#\014>\324\2419\275M8\330\275\002 \250\276\316\324f\277\n\376\227\277\210\\\256\277\274U/\277X\255\314=F\371J\276F\255v\276V#\316>o\305\027?F\213\223\276$\027\323\276\020I\326\275\202\263\n>\325HK\277\016\024|\277\310u\213\277\354A0>\324\340\235>P\214/=\336\002\023\277\226\234v\277x\315\205\277\317\364z\277\241f\353\277\001-s\277=\272\226\277\020\323\235\277`\214{\277H\035H\2764\352\241\277T&2\300L\247B\300o \005\300[\324\332\277Y\363\206\277\204\241\324\27729\331\277\226G\266?(4\022>\003\324 \277\251\333\001\277\320\0226\275& U\277V\032\347\276H\3727=\206T\037\277\"J\r\276\324\250i\277\030\013[\277\205\370\222\277\370\264\263\277\2571N\277\277w\213\277\264\304b\277N\253\201\277 a\214=\321\316g>\201\035\250>\312\337\371>\250\230(>\306\3064?r[B?@\352!\274\244\005L\277\222\216\307\277\344\3533\300\324\n\326\277\346Q\274\277\346\243\236\277\262w\341\277 n\022\277\330i\305\277\320\031\350\275\235\300w>\262\035\221>6\'\302\276\224\244\247\276\372\3455\276\316\313\024?\234\347\304>\312\221^\276\212\264\017\277\214\333\332>\343\241\330>\212\257!\276\366At\277\301\316\276\276\350Q\322\275Z9*\277Xv\373\2757\271<\277\310\010\272\276\0224\356>\326\034\241=\031\234O?i\001\333>\342\224\340\275\274\377b\277\257`\254\2772\231\275\277\235\202\254\277\000s\306\277\213\266\247\277\266o\215\277\242\032\177\277\324:\220\276\215g\213>\246\312\211\275\362\026H\277K-\222\276\316\315/\277\302\201f\276b\026\004?k\304<?8\014l>n]\201\277V\020 \300@\317#\300\227\327\347\277v~\034\300\010X\n\300{\316\"\277\337Y\316\276\226\2516\277@\262\220\274\215\263\005\275\341\257\242\275\360\333f<*Y=>(\030\035\277nWZ>\240\244\345>\256\222\225\276#\303}\277\217\206\242\277\370/\017\276\305H\033>JP\004\277\222#\262\2758^>?\033\201\243?:\245\261>8a)\276&\242\253?\314z\254>6X\036\277\240\022\272<L\014\265<\352\326\203>\311\005\357>\016\004V?C\354\\?\203K\035?\'\2472?O\242i?\203\236\356>\306\264\230\276F:\203?\016\200X?G\276\340\276\376\035X\277\213\203\001\277\244\266O\277X{\250\277\030v\261\277rtd\277\304\337$\277\233\366\312\276\232\220\337\277\2009\256\275\013\326\311>\370\030\014\275\\\234\231\275z\033\270>\367\266\322>\260q\257>\212\224W\277\375\245I\277\214\353z\277\220z\215=\336\343h\276\330\r\203?\367\035\231?\227\032q?\346\353\330?\340\2646@h\372\323?6\205\342? \370\004@\254\203\336?\375\263\316?\207\230\327?\326\224Q?M\351\311>\335\0248?\003\302\230?gn\304?B\212\264?\356T\033?H\236\211?2\344\313?x\014(?\314\224\274\275\033\337\217\276\344N)>\254\366\306>\036\016\344=;\033\022?\3763\242?BQ\027?\022j\335>@\216;>\266|\365>\014\375\022?\331Hb?\005\311]?\320G*>\252\266e>m\351y?\021\032\014@\202\206!@\230\\\214?ujU?G3o?n\376q?\240\030\206?4\205T?)\247$?\367\202\240>\370S`?\312\024A>\252\365f\277\\\356\341\277\002k\314\277 \232\017\277\226#\310\276\322\344\370\276R\005\234\276\332\313\014\277\020p\023\276>\201\241\276\236\365\236\277\004l\300\277\212\357\277\277\373\273\301\277\236\003\030\300\336\'\376\2773\237\244\277\210^\305\2774\350\372\277\202#\257\277\2533,\277\3369L\277H\355\305\275\345\330x>\210\233\211\276\340\217\333\273\354\343%?\014\003\203=\323\212\267>\030\245+\277X\355l\277\313\362j\277h\212\205\275\336\374\220\276\224|\367>\234\377\244\275tx\250\276\227p\315\276\270\305\202\277\\w\224\277`1\331\275\"\275\371>\242\031\362?A\323R?\325y\r?\264B\023?\330\220\005?<\036T>\332o\207>\337\222\375\276\207Y\021\277n\300\263>\230\374O?\210o{\275KT\214?\021\232\376>\330\216$>\276\004\234>\2527\205?i\017^?\323E\371>\235\004\341>\272\231\206?\341\031{?\232\206\004?:\2104?\344\276\202?Ir\223>\264\270\323\275\276Kk\276\326\025\215\277~\213\205\277\332\321\226\277\345b\205\277\\\024\201\277\004\305\225\277\226\020,\277\344\366\277\276\203\205\230\276\254Yi>Pv\'\276w\370\032\277\354\370\036\277`h5\275#\006\214?\303\276[?\337n0?%\372\231?m8\256?\320wm><\244\001?\342\016s?d\322\202>\224\311\360>H\0038\277fd\253\276\\{\266=ny\302\276\202\320\317\2756jb?\340\234\353<\330GF\276\250\335\230=\335\220\231\276\2068]\276\236\241\367\276\260\242^\275\\\r\\?\304\227\365>J\337\213>9\003\034?\333\342\274\276\300\374\003\275a)G=\006\301G>@\032|>\006]\225?\252\257\253?\320\314\201=X\243\222\277N\246\341\276\200J\240\273\350\350\006<M[\340>H\257\031? \226<\277\312\340\252\277\300\004W=\367\2772\277Z\2770\277\320\3360\275\325=6\277\224rS\2760\306\312\276\372\357\311=W~\215?W\267\274?+\035\334?^\315\340?\240\2367@V\244/@\027DY@b\346\025?>\270\255>:1v>\252P\327?3\241\217?\3464\345>\320\230\363=\312*\233?\\`\275?\345\326\256?\250\274\347?\007}\204?27\326?G\005\002@\2647,?\204\010b\276\267l\024?$\245\247\275$\252\305>\254\324\035?\234\323\027?\226<W?\304\335z?\320{6?\24698?\000)\341>`\014\035?z \213>\230\234\010>\004k\333>8i\275?t\307\252?\260@a?@ex=\213W\010?.\364A?*K\021?V\360u\277\214\340p\276L\262\236?\226\r7>\326\3707?\246\220\307?\311\213\266?*y\224?q\215~?\247\326\356>\236X\214>\231vW\277\350\2559\277\336\177\361\277Z\203\004\300\360A\225\277{\272O\277\032\010\233\277\036X9\277\222\312l\277\240\020\225\276Pjl\2750\232\354\275\350\361r\2768\357\027=\271\370\345>J\0130>\371\336\201=|\t\037=$\025\274=\274{\364\275\360\202\312\276\215;\014\276G\214\227=C\346l>\033D\214?F\036\210?d\333\326?\n\270\002@\323\250\311?\0227\354>\324\366\">\340\177\346>x\334P>D\'\276>`4\301<1DK\277\200\370K>B\246\374=\325_q\276,\1776\277\213<\005\277B\207\273\276\350\001\277\276\241\366A\277\325\260\215\277\371\220\312\277\3625\254\277\034l\340\277b\245\307?\270[\241?\247\321U?);\255?\261\345\271?\006\335\270?\313s\021?\233+\204>\036\235\275=\207\273\201>\335\203w>\204\274\222?x\022\334?L8\245?p\004\032?\3460\201?\275^!?\207\313\316?\357\375\361?\367\302\232?d\320\255?\260\375\370?\204\310\030@;=\275?\266g\207>\242\007\230=\227G\214=>@\240>D)\343\275W5\374\276\324\202\253\276\226\337\005?\3536\247>t\306\001?n\251\262>\246zh?\354\321`>\243\274\233?iV\227>\310q\232>\244d\357>\030\205t?\240\177`?^4b?8X\317>\000\312\210\273\346\\>\277\202Y\243\277\000{M\275\325\362&?\206\t\231>\364\236Y?\371}H?@\212\310?6Oi?\202`=?LV\206?\374j\214?\030\346L>\\\363$>\037\356G=a\242\266>*\352\231\276\320~]?;\330+?\200\"\200\277\020\034\221\277\207\033\315\277<\215\\\277\310\342\235> \217Y<-\347\247=\025Hy\277\313q\246\277\177\245\262\277^4\346\277Y)X\277\211\334\007\300Qf\371\277\316\t8\277\373T1\277\023\333\253>C\232\236?hq\211?\003\314\261>>\266\243\275\005\336h\276\340\236g\275\315\034\320>\300\200\r;U\200\222\276\3640\201>h\245 \276\260\332\253=\327\321\030\276\002qR\277\202\203|?b\304\240?\010A\233?\036\256\307?s\245\327?\231\213\306?\027\013\245?\303\313\262?1\336\021?\002\334l?P\340\300?\335\330T?\273pt?\034\216K>$\275\200>\274\221z\276D\271\316>\026\033X\277ny\207\277\336\242\034\277\266\376=\276\340\361\254\276\022\203\013\277:\237\007>\256]\275\276L\217\231\276\224\371{?K\334{?o\267z?\373+r?}3\214?:\267\267\276VI\212\276\005\250S> \336T\273\000\226O\276h\350\\=\374\236\254\276\3469\312\276\340\343\223\276\274*$>\204\347C?\\\342i>L\323\201=\346y%>s\0219\276\030k\252>\362\274\244\2764h\327?`\212\313?\354r\323?\201\362D?\210^\373>t\253I? \025C?\030\237u?N4\010> \207\\?^8O?b\310\325> ,(?\203\356p?\222\242o?\';>?\250\272\213>2\305t?\300R\344>\356T3\277\266V\'\277a/u\277P~D\276\374\306\372\2758E\215?\020\247A?\306[\273?\256\276\254>\251J\204\276s\336A\277R\025\342\277\022*\263\277\276\n\260\277,\207u\277\375\350W\277P\007\r\277\020\020\007=\254p\332\275\234\327#?&T\001?\000\231\250\275\250\313\001?\200`x<|X\321>R@\021??\202\035\277!\257\005\300#\242\003\300-\020\326\277\215\322K\277\033\243\"\277\010r\315=\236\006\304\276{~\014\300\361 \202\277|d#\277\260Y\313\276/\032D\277\000=J\275s\017\024\277k\t\241\2779!\212\277\273\344>\277y\302@\277\246\305p\277,|\231\276\305\371\327\276\350Ow\277\220\317\340\277m\301\236\277\276X\203\277\010s\317\276\340n,@\215\004>@e\3062@~Zs?z\212\233>\277}\333?j\215\014@c\310\255?\202\300\363?\3126\370?\256\307\323?B#\213?\276\327\310?\364Y\255?s\377 @\300k\244<\325}\017\277\004\261\314\276\223\224\321\276)\020\330\276\210\214\266=2\022j?\016\261\217?qg5?\304\331\265>h\006:\275\242\361\003\277\033\357X\277n\000J\277\036l\371\276\017=\222>:$\035?\372l\035?(\355\036=L\005\356\276\234\313\005\277r6\005\277\214\256A\277\367\347]\277n\000\276\277o\323\245\277Og\306\277\201\375\204\277 \320n\277\240s\240\276\2409\322=:\263\233>gOc>\364\352\307\277\322\373\242\277\250+\275\277\364{8\277\214\377{\276\310\277\347\276\372\033\370>\311\271\007?\337\327\257\276\220y\300>\202\t}\276\337\014\035\277\366\330\301\277\347\352i\277@\274\346\277`\260:\277\300\256l\277\334\366\002\277\031l;?\200\270\330</\353\266>P\207\365\275F\327\357=\2649\202\276\346\257\010>\023\277\211\276\242\206D\277\350]\013\277\367\333\236\277\270B\034>\300\312\242\276\234\364`\276\024\234\201\2761\271k\276\000H~:\312\307\376>\345<\231\2766\245>\276\206\276T\276}@\235?\371V\247?\270te?PeK>fR\212\276\023\247q>\360\030b\277\246\016B\2778\261x\277--\312>r\\\342>&\334\305?\206=\024@Y\261U?\250/\314\276k\241\246\277\260S\237\277\231\272G\277\204\2022\277\026y#\277\"U\277\277\241\021\224\277r\225q\277\223<\223\277\371|\202\277\032\321\324\277\332\253\267\277\326\261\000\300\211\203\315\277^\2070\277\354\226\026\277\212\032\313\277\314\255\277\277$\356\335\277\010\270s\277%\260p\277(Mu\276\020\310\236>\034\200=?xA^?\270\"\300?\224%E?\007\'\306?\322z\322?\2403^?t\2506>\216\3458?\342\345\377>\324\312\315>\004\235\272\275\254+\034\277~\350\264\2750\261><\034\377\342\276\245\376\020\277\002$\244\277R\276\321\277\242E\330\276|\266\330\276\003\375\024\276\312\032\213\277\262}\233\277\201\323H\277\027\233\327\276\217hN\277WG\243\277\200?\366\273\307\273#?,\241W?\330lb>8\343/\276\373\333\227\276\270*_\277z*\245\277\216\203\351\277\240\003\301\277\322\005\n\3001\204\346\2770S\262\2777\361W\2775\332\355\276\260<L?cU\307?.\345_?\305n\035?\250\027\304\275\014v\241\277\260t\230\277:\253\231\277\244\260\n\300\232z \300Z\246\324\277\362\270\225\277\'\257\264\2772u\304\277\330P\334\277\356\351\034\300k$\301\2779#b\277\350uP\277\'\232K\276\225\315\201\277\334\251\215\277Q\343\273\277\272@\333\2762\204d?\000w-\273\277X\213>\316\036P\277\325\323\177\277\214\177j\277\362:\304\277\332\271t\277\330\375\360\276{\367\255>\256\266)\277Ik>\277\367?\315\276JW\216\276(\300\300>\320\232\325\275\036K>>\031\232\256>N\263\023>\324\242\230=\204\025\250>\365\211L?\3449\\?W+ ?\247?\223\276\324q\332\277\020\200\366\2770\313\230\277\356\252{\277\332\016\214\277\312S\006\277\341\301\226>\310\252\323>\330\014K\276D_\277=\241\261\334\276\246\226\377\276\024\000\361=\354\340\213\274q\334\261\2766}>\277\206Y_\277E!/\277\334\305\310>T\271?\2768\006\326<c\231J\276\214\360\227\276h#\006\276\316$B\276\345ja>&\334\244>\340L\261\274\331M\237>\'\345\002?&\255\377>\226R)?\227\000\277?\036\377\365?\203\032^?\360:\306\275\220\004M\276\364\251\340>\272\267\312\275\032\365l\276\304\244V\277\210=\'\276\320\363\213>0\235\300\274\010\253v\276\223\260\210\276~\352h\277\016\232\224>,\025-?0\315\026?\324\211!?\330\361\264?({\014?\0133`? \200\356>\244G\021?\202\255&?\254\347m>\341\t\001\277 \352L\277\212\260\243\277\322`\353\277@\334\275\277\306\305\\\277Or\361\276\220\324\213=\346\237e\2760AS\277\212\206D\277M\013 \277z\247W\277T\010\235\276`,\217==\037\036?\362\364\275>\222\272\350>\007\226*?\314f\223=06\261>\374\211\230\276$\034f?L\360d?x\215\n?D3\005?\324i\006\277\372\362\264\277\334[\216\277lB:\276\3229\"\277\022\342\310\277\345\'_\277\205\253!\277\036\313d>\336\260S\276B\337L? !\215\274a>z>\223\367\221?\200\r\244?KF\336>\224\350T?\327\303k?z\314J\276&\302\206>g%\337\276,@\230\275X\301\270\273\201$\305>f\344\'?\233\"\212\276\001\375|\276\206-i\2768U\034?\265!\033?\360tQ?\036\247d?\031]\032?;\n\222?\024qV?\320D+\277@\017\234>\377\356\037?\220<\205?.\343\272?\2003b?\007\363\000?\032j$\277\262\326\377\276\023\343\363\276j\365\202\276\230=D\277\350\310\035>x\250\206\276x2\315>\240\237\256\274:\315\211\276]p,\276\370\020l=\231\3459=\301\033e\276\241\331\023\277\342\017\031?@\276\233<5\333\353?\342\030\374?u\254\363?D=\363?,\307\327?\304\n\226?\356\000\322>\252n[?\2505\205?\320\243@?\370)\005>\253U\223\276\t\273{?\275\016b?\202\324\203>-Y\356=\222\322\311=\212\210\010>\204E\273>\022\376>?\204\330\007?\224c\033\276\307\017X\277\240a\034\276h\0341\276(l\372\276\241\006\362\276@[\014?N\3774\276i\341\356\275\250`\342\276\276\001g\277F\277+\277\235\337\372\277\0049\233\277\300\375\277=\243\035\204?\314\002m?_\022[?\210\300\204?\374\271\243?D>\\?\000\261K?\300x\312;\201\226Z\275\250\237Q\276I\036\236>\212m\244\275 \324\351\273T\315\272=\341\204N\277\304\325\277\277\316m\352\276\204_\006?^\2603>\277\364\241\275\014\007\335\276\210\r\336>\332x\271>\331#)?\241\217\272?\376\215\234?\366\266d?B\255v?\036\273u>\003f\213?\232\026+?\355\235&?0R\214>\352 \207\276\361{*>\003v\013>\244{\321?\340\261\351>~\241\n?\224\322\234\277\373\207\321\277\376\307\232\277\201\255\305\277\231\340X\277d\374\223\276P\325O\277(\261>\277@}\005?\216\025a\276V\314J\277:\026\271\276\214\273>\277\304\232\343=\310\346\334>,\337\246\275\211\366\036=W|\364\276\032k}>\214\356`\275CB\003\2776\361\003\276#lp\276\026\331\205\276v\306R\277\027\036\200\276\206\002\347>RnA?\014?=\276\332\310V=\0262\006?K\211$?\214\245a?\260\375\255?\2106\021> \021\277>w\230\002>\322e\004?{\'\316>\000\235\352=~\252\003?2\261R?Puo>\345\352\331\276\360\254>\276\201C\226?n\372\312?VN\322?.\210\237?\314\013\266?{\313\264>?cU\276\336\204\005?\312}\252>\342w\245>H\331U\275\244\025A\277\022\nx\277\206\237G\277\n\005\242\276\246^\t\276\354\"\356>\272\320W\276\334\222S=\242\005\217=L\256\036>a\275\222?\332\227\206?\261\361\203?\301\274\376\276Xo\005>\314\302\035?\273s$?\023%\312>\202F5?C}\256\276\237\334l\277el\034\277[\021\367\2760\364\013\276g\024\301>\323\243\307>TO\000?|\234\262\276 \306\274?nc\224?g\005\233?\375\020_?\035\260\303?)=\246?W\377f?bw\233?\246\212\005?\300\262\373\275\234O\255\276\351`3>EZ\\>\352\254C>g\267\022?\364\260(\277\372C:\276\000z\251\2739\267\277\275\276\370/=\366L\001\277^\nV\277\0072d\277\213\200\202\277\333R\221\277|\364(\277 \215\302\276?\346\023\276\242~\301\2760\261\201>\264\337:\275\306\0356?)<\215?\020}%=\370\373\360>\262\tQ?\261~N?z\357\220?\367\254>?@\353\233\274\372\305\030\276nc\n?n2\\?t\320\205?H\037%?l\022\310=\372-]?\024\001*?\220\324\314\276d;\035>\264\274\004?\364\020\341\276)\021l?\233\013\222?\030y\251?s:\242?\204\203l>\340\272`\277\034j\273\275$\034K\276\013\002}?\314\343$?\246\241E?\010\014\260?\314\231\344?\326\2613@F\250\036@p\347\375?\340\037H?\3242m?~h+\277\334]\003\277\376G\352\276\032\020X\277n\344\035\277|\020\271\277\003\013E\277H\244F>\312\n\323>\230\210\017\275\240\326\224\275\007?,?\240/\013=&\211c?\n\274\005?\3771\345>\217B\364>@\\\035<\022\242\276=m:\306\276\302\217\336>\"\333\026?l\027S\276\345\374O\276\207\254\262>JA\377>7\324%?\370\200\373\275\310\330\231=\333\322\375\276\2169\232\277\373!W\277>\315\206\277\220\272\320\275\354\0215\277nD\325>Z\353\004\277\024\004\376\276C}\242\277@\016e=\374\232\237?\342\000%?\353\n\244>\216\354\227?\361|~?h\346T>\200r\331>\376Ax?\022\352J?\001\344w?\316\005w>`Q\001?\252\337\033?\"\251\240>\206W\364=(\234\220>t2\267\276\254\'l\277_\373\025\277\220\334\034\275V8)?C\022j?\026PE?u\346\247?\262\262\262?\304\217\326?m(a?\"\316\231>H\014l>\332lF>\334\353\312>\302\367q>Z\307\265>\326\326G\277`8O\276\020\366\311>\215G\n?\022O\343>\306\206\213\2760.X\274\n\315g\276_\360G\277\302\366\203\276\n\3565\277\020\262\236\277\030}\232\277\3743-\277\324\266{\277k]\222\276E\331\000\300X\235\255\277\364\222\007\300\234\316\027\300\006\226\003\277\224>4\276\200\234\340\274`\271J\277\312d\233\277\236K\335\277&\365\363\277s\024\233\277\335\2374\277\030\365\221\277\033H\353\277\253=\302\277$O\301\277\013\010\031\300\200vs\277d|\254\277\332\t\303\277\036\004\232\277\010\371\216\275\340\316\376\272\251\372}>\024#\253\276\200:9\277\364\240\231\276\2412\371\276$;L\2769\373G?\315j\200?t\364\275?\337\202\265?t\\Q?$\316T>\264\360R\276K\371)\277\324\331{\276!\200\371>\006\217f?N\001\236?F\\\240\276\364\007\327\276\024EI\276\220:\'\2744\357!>\344\013\205>\315\0018?\0320h?^\311\006?\023\372;?\267\027E>\202s\233\276\3444\323=\300Ps?\220\3302\276\247\355R\276r\326\236\276A*\236?+`\312?61J?\214\360\306?Y\306\215?\226\'\336>\273.\337>\357=\211?`\031\313\276\210w&=\246*?\2763lO\276\372\215p>t\347\247\276\330\305\335=t\377\276\276\204c8?\367W\013?\373n\220?^b4?\342\315Z?\301@S?\016\341\342>|\r\017>r?F>\\\305%\277\244\350\256\276\020\222\244=\336\177\233\276\272-\361>\035\276B?\242\'\375\276y\362u\276Ld\036>r\374\016?n%\214\276q\177g\277\223b\341>G\203\034?\304\257[\276\236\r\"?\244\346J?\310L=>a\357\334>v\256h\276\213\200\352\276%\321Z\276~X \277\200\2566\277DP\265\277\003M\210\277.\250\335\277]^\301\277\340\365\021\300\230\330*\300\262\277\357>\014\244{?\022\014\251>\201\212\000>\216\021\316>\033\273\376>\223\321o\277\264\005W>T%+?~k\323?\262\244J?\377\317s?\337\253\242?\264Il?\200n0?\360\200\244<[\260\256>\\W\370=)\301K\2768f\t\277\030\266\013\275\247\\U?\376\r-?<\334G?\266\250\022\277g\324\375\276\030\364\361\276Y\254\213>pp\013\274\325\240\205=0\327c\276\036\371C\277\026\210\262\277W\335\177\277m\251\323\276\244\372\261>\001;4>\\\010\252\276Pn\017\277\262\355\201\275vv\265\276\222>\221\277\354\343O\276\006\006\363\275\"\212(>!\034\250>Xhf\2762\333W?\224\341/\277\274+/\277\233]3\277\253\"\232\276\250\204\233\276\222\036q\277\326\241\023\2778o\225\276\306AN\277\014_/\277:\001\262\277>Ru\277\276\005\005\277\370\341\240\277\\CQ\277\252\253\274>\2409\342\275\'\014\335>\341\251N?\272iB?\316\344\276>\272\316\301? \227\242?\003\037\263?\031\324\311\277\017\356\335\277\360\343[\277\247\234E\277\256!!\277 \022n\27702\021=_\312z\276\272H\000\276[(|\277\224\214\263\277\336\236\200\277\252T\016\277\3704\231\277\224\274\030\277X\322c\277\265\330H\277\'\305\356>\370\265\255>^\240\316>3\346\233?\330\251u>\027\315)\277$t\233\277\2028\231>\252 \016\2770\245Z\276W\026\233\277\220\233P\275vl\277>\350\273\223? uE=\021\343\227>Z\242\003?\211\r\005?\330\377C=[\241\022\277s\t\250\276@\216\272>\326\223\014>\336\007\021\277\240\017\371\274\313\267\301\277\240\346i\277P\033\032\277\2352\367\276\246=\000\277\314\\\244\276/\244*?{\027\014?\0328\037\277\202)\000?\200`\204?\200\256\200?\0062u?>\256v?\357\247X?\312\364\000?\257\250\303>OM:?\027]\236?h\275\346>\234\330\317=)\377J\277\243\363\200\277~Fv\277\236\r/\277&\005\025\277xH\247\277FG\332\276e\311\372\276b\357\030\277;\n\326\276\3100\301>\360Hm>]\\1\277\202\036\323\277\266\304>\277\373\034\312\277\311,\242\277\2602\212\277&\274[\277.\351\r\276\036c\233\275\\W\377<\305\262L?\312G\330?\027\302\374>j\273l?$\272\313>\364\336\031?h\254\250>\022_\013>\344F\021\277Sy\245\277$X8\277v\331\033\300\244\346\024\300\300\326\002\300\256~\352\277v\262\221\277\240\200\273\277(\032\030\300*\302\237\277 \021\276\275\366f\016\277\310\027o\275\001\206\225>\300\242\214\274y_@\277\244\305<\277[[\273\277\'\240\037\277\002\276\035\276\322v\216> RT?r\3363?\016\003\371>\255\3476?\226$\213?\224^\330?\241\343\230?_[W?\001/\244>\321p\006?\002\340\"\276G* ?\266\246\005>?\321\223\276ZZ\'?\t,\017?\020\271\250<[\024\200\277\240E\001\275)C5?;\000v?W\324t?z\320\217>Sg-\277\220\272\022>\220\210\314>\014d\n=\320fW>\323n\334>\t\321\227\276\2518\315\276Hf\r?pu5\275\"\301e\277v\006\217\276\024\302\203\276jyk>@\250U?\366\231\277>\000v\210\272\r\0147\276GJ4?l\nC\276\375|\004\277\232\274v>\2311\\\277\224\016\262\277\031\225 \277\273\001t\277\026R-?8_\370\276\370d\247\276\340LP\274>\337d\277.A\226\277\234\364\273\277w\346\027\277\006\003\311\276\342{\247\276\244;\270=B\365\213=\235>\352\2764\364\202\275j\2346\277\363\274\267>63\037?`\317&?(\271\302>#\314\263?\310\223 ?Xl\177>5\303\227?y\302\254?\246[\370?\346G\220?>\377\241?\177\251\272?\350\034+?\246\361\t\277\330`\211\275\313$\344>\030\303S=@c\375\276`)\311<\3139#\277\356\027\212>\363\032\271?\210&\226>\332vi?G\212\306?\357\205\337?A\025\347>W\010\237?P\303\370?\201^\337?\244\335G?\264sZ?\337.G?\032\n7?`\223\245\275R\032\006>~D\027?\224\014%?\234\206\224?\231\261\006@4o\270?L1\257?\036\231\323>}2v?\226\3520?\354\2752?\re\244\276\014\334\330=\253\177-?\264!\r?\316\344\246>\371\304\032?\234\005e?<e\227?\327L\263?[\013\"?`Y[?$}\215\275\'e\362\277\334>\302\277\016\223V>)\265d>Sz5?\300w\270\275\307\321+\275\263\371\236\277\226\200\355\277\331\217\000\300\027\347\n\300\376\371\t\300[I\323\277\206\234+\300\315\3404\300\260N\020\300\242\357\312\277!V\001\300\024\240\205\277:x\016\277\273Ob?@xa\276\302:\211>\224!\177=\014w\203\277\306\236\232\276\016\222\321\275P\357s\276\200\324\030\277\306\304\231\277\350\034\256\277\026\262`\277\000L1\275j\244\367=\003\251\227\275\314\322R\276\003<\037\277\230\262\351>\360Xh>2\313\213>\210\266\037?\204;g\276m\277\317\275\370:\033>\202\203\247=\036\000\356>\371\026%?\352a\332\276H\030\333=\236HP\276@<\310\277\227\326\234\277\022m\016\277K-\375\276$O\364\275N\230\211?\373\354S?d\357q?\010M\336?|\303\010?\336\023\227=r\300\245>x\331\'>\202\205M>\006\226\360\276\313\341\207\276\255\020\014?f\226\016?N\272\237?\224L%>wx`\277G,8\277s\225\355\276\010<\220=p\376\221\275\\\376\250>T\374/?\360\347v?\374\345\213?\264\017\n?is7?|1[\276H\334\342>\353-\307\276\351\231\235\277`\001.\277\366\027b\277J\202\033\277\374\200P\277\250Jx=r\270\314\276\230s\242>\314\025G?\220\006\003?t\204O>\316\3628=8H\315<\321s\010?\377\321\023?\246\030\343>\314\241\306>\366\302\310\276\200\350\025;\370#\364\276_\310#\277\330M7\277\222\226\177\277\262J\006\277\322\220$\277\235\006\032\277\320T{\277\310\347\035\277&H\320>\334\323\275=\360\252\005\277\004\016\250\276\230\306=>\3057|?\250\033\221?\370z\315\276\367M\024\2768z7?\325\035\336\276\221z\370\2767:\033\277\272\035\232\277\323\037\'\277hc]\276\234\251\222\277\022\242\325\277f\355\357\277\374%\361\276\372\013\236\277\264\252\335\276 #\024\277\372\225\251\277\030\252\032\277J\226@\277\2376\205\276\016\324i\276\325\352\006?|\312\235\275X\352J?\347\034\350>\323\313\003?\0176\205?\365\336p\277\204=\363\276X\302\206\277\353\325\034\277,\264\014\277\323I\333\276\024\3053\277\016!\225\2774Pu\277l\250\030\277!\235\221\277\255\245\251\276<\"[?\256F\231?4\334\230\276\352\022\343=h\177\221\2760\220\000\275\276Gt\277dk\200\277\304[+\300\"<\317\277:l+\300.\250M\300>{\353?\t\013\225?7\037\213?\336?\350\276\257\251\233\277 \337\321\276\206.\'\277\306\331\244>\177\314\035\277\240\337\324=\357\312\316\276Y\031\210\276G\316\007?\362?\016>dj\303?\243\316n?\204KG?\360\240\233?+c\233?\305\023|?,\310f?\2346E\276\274\375B\275\216\324\220>\300.>\274\364\212\273>\266P\335>\370\337\336>@\226\016>\026\313.\277.\314\345\277\252\350\347\277\032\205\221\277N\026\032\277\205\245\211\277o\205\037\277tm\331\276^O\'\277`\244\223\2742\010V\275o\'@\2762\352\n\277\343\321\340\276%\032\273>Ikw?\361\340\030?\265\234\212>FN\220>N\014\324>\350\270\010\275_\225y?t,h?\004cH>\312\2777\277\200#\203\274N\036\252>\244\320;?N\312\245>\264\271\253=\235g0\277\032\272\357\276\222K\271\276\206\3457\277o\221:\277\300U?\275\316\261\200\276\036\212\352\275CvM\276\2501~\276`/\210\277Nt\206\277<uT>\363\373\361>\0142\307?C\303\354?\rQ\216?\323\301\223>%\341\207>|)C\277|f;?\332\254t?vl:?\020\006\177>]\331h>\246o\356>\367\023\203?4y\353?\330\270\317\275E\213\242>z\232\321>\304\315\217\275.\214\230>\000\206|\273\270\254\017\277\276\035\'\277\200\004\371;\026\016S\277}\347\005\277:\2560\276.\357\006\275\276\262\341>@:\312\274\231X\'\277\005?\201\277\217SU\277x\333\034=\002#/?\265;\333?[\206U?\253\003\207?*\223\264?m\027<?m\225\036?N\034\277>z\033\320\275\375}\216\276\035?J\276\2402\352<\260\201\006>\351\370\273>z\314L>\263\253M=o\324r>_\354N\276B3)=\014\355\013\277\244\277\311\276\3644\037\277r\026\210\277\366h\355\277\365$\016\300f\303\'\277mC\311\277\020\001z\276\016\276O\277\267\351u\277DM\224\277\363\257\310\277\230\250S\276P\373?>7)2?u\253\335>\352\247)?\351_\313?\303e}?In>?n\030x?\324\016\350?fd?@\005\275\370?\240\0034?y\353w?8\036A>\023\252\177\277^@\215\27785\001>{\305&\277\2753\341\276\300\021\262\277\304\"\030\276\230\264\334\274\025g\251\274\307\303\360\276\200?\201\274d\024\275\276\204\t\026\277x\3507\276&c\203\277\232\225\202\277\276\036\204\277\202w\t\277\2700\244\276\372\004)?V\010 ?\363;\265>\214\347\360\276\030\022v>\231\3434\276\226b\223\276f\004\023>c\243\351\276\2420\336\276\303\377\343\276\214\204\017>\256&B\276\006\027\034?2\340\242?:\312j>H\324\305\274\331\234\251>!\241\263>\\f\275>\373V\003\277\330V\000\277\214h\221=\313\350:?/\016\375>\327\201!?\344\250\357=\035\020\203?\212\t\243?V\322A?&s\220?t\366$?_\365\222>\360J\221\275:\214\007\277 g`=\322KT?\257UC?\006\177d\276@c\010>\0318)?\324\364\347>\362\037\t?\204Z\361>\262\223\327\277\247\031-\300\230\246\243\277k\324\321\277l\245\356\277a\336\032\300\274*\000\300\267\022\252\277\207O\"\277\360\tV\277f,)\277\276\2272\277\000q\224\277\342^\372\277\317\345\004\300M\342\255\277Nf\276\277\3257+\277\370D\035\277\234Ix\277\031\3341\300\347\201I\300\264\005\214\277\313`^\277\207\211\002?\300\027J<f\241\315>\027I\200>vVF?~\3736?\322\241\247\276Eb6\277X\207v\276\235;:\277\375\316\256\277@\013[\277\3606\265\2770g\322\276^\312{\277X\336k\277\276\233\312\277\271\334\n\300\215\n\364\277\024\357\323\276\277\225\305\276h\201x\275\236\274\322\276\204Q\004\277\344\274\017\277\350!\337=\314\231(?f\025\253>\3600\264<\000w\021?U\275Q?qW\022?(\260\315>\272Y\226>\324:\003\277\2724\303\276\374\246\234>~\t\362=4\301P\276\345R\224>\266\025\310?\024e\307?\314\325\326?bL\005@R\022\345?\361\320\315?\304\244\222?Z\320}?\344\346/>*\265Q\275\331\226)\277\340d\206\275\277\350\002\277bu\230\277\\w\241\277\261Z\311\277\256\270\315\277\360\r\233\277x\361\310\277\324d\n\300m\200u\277\'wm\277Q~\266\276\253\314$\277\234\317\335\276\344V\346\276hO\260\276i\315\220\277\032\021\331\277\351\362\330\277g{E\277\2109\230\277\014\371\244?H\214\231?\373\251\317?\016\271)?,\303\207\276N\234n\277QI\315\276\214s\257\276\236He\277\322d\325\276\212\314\365>ktD>sY\002\276\001\032u>\010\034\313>m\245\254>\227fM?7\212\327?K.0?4z\017?~\312F?v\002e?\304b\244?!r\223?\315\375\315?\255\366I?N$\325\276L\267\251\275Kt\324>H\245A>\330\231\220?\352\327l?\311L\010?\244\272^?5-o?q\323\336>\244S\227=\342\031\301\276\302\017\033?\024\\\306=$73?n\341:?\256\016\255?Z\303\225?\'\014\251?(\000\271?D<0?@\223K\275\343\031\300\276&\014O?2\271\351\276\236\334\211\277Oq[\277F\2620\277\3606\225\274\211\363\212\276\261\365\370\276u\022i\277X\3715\276\3358\'\276\021\312\311\276\350\277e>d\203\025\277\024g\356\276\265\3729\277\244\326\201\276uZb>9\\!\277?\245\256\277\326\262\365\277R\3421\300\260\360\254\277\302L\340\2751\370\027\276bB\213\276\016\355\177\277\344\213\210\277\025,\376\277r\030\224\277s?\246\277\312\275\035\300\375\005\t\300\023\327\210\277\341i\003\277\000\250Q:\256\353\261\276\330\3259?2\272\235?\200\242\206?\347,\242?\244\260\233?\277\361\256?-\315]?\370\330\305\276m4\017>\256:\021\276\301}\302>\346\343\254\275\300\021\211\276\024\206\252\274\214\000C\276\251|!?H%3?\330E\032>\014\305W>\353\202\335>\337\177J>\311\304\316>\211\267\266?p\226\231?\311\362E?\200<\005\276\266G\006\276,:D?\325\333\332>\362\243\202\276\201s\354>\330\235k=:\2460\276bh\013\276\357\301\227\277\220\225\265>\006\260\214?\261\303\262?Boz?\3023g?6\250\227>\253s%?\266\264\013>\243\314\034\277\204\360a>\220?\250\276@\352n<\036\222\254?\335\027\353?\244\327d?|_Q?#wq?z\254G?\204\264c?\275\207\206?\365Mc?G[g?\314\322\347?\330\003\377=\234yu>\220\000\001?\250\002\335=\354\007\302\276 \037\261\276\376\017K\276\036\322W\276\031I\314\277\222\212\226\276e\342\240\276\255\347\230>\354K\034\277\nR\340\276\360\206+\277\340\360\302\274p\373\022\275\206\272y\275\207L\271=\360\267\n>\234#O?v\"\310\276y\r\n\277\036\372\325>\320\016\025\275:ru>\006\005\275\275V\205A\277d\\\222\277\032c\234>\003{\206\277\376@\261\277W\252\302\277\367{\252\277}V&\277\200d\333<g\017\263>\263B\222>\256\356\353=63\250\276\370\316\235>\344a\304\275\336>\322\275\227\311d\276\0047E=\216\343(\277`\345T\277]X\206\276\021\240E\277[:z\277^\224\r\300\204\004\006\300\234s\302\277o\212\315\277b\014\n\277o\006\210\277\345\364W\277\325;\273\277\250\254\357\277\265\277\013\300\255\021\027\300j\2542\300\r\256\361\277\346n\267\277q\352\253\277=\243?\277\201\004U\277#\362C\277\345\206\310\276\350\330\010\275\340+Y\272\264|\212?\rE\322\276\253\033\234\276X\037\220>\264\005\202?\237I\t?$\242\237\2769\022>\277RC#\277\014\376\277\276 \016X<;s\004?\036II?+\024L?L\334\000><O3\277\"\373\020\277\000\215\371<\230\3249?\022\226_?\304\362\202>\306\003\014>\276k\254>\324uC\276NCI\277\350\020\202>m\346\217?\017\205Z?\364\336\032\276\034\306\241\276\221\210\266\277\362\340\350\277\232\027\231\277\215\253\240\277\264\201C\277\277\230\344\276\310\245@>!\322\357>\360t5?\320\246\271?\244\034t?\233\022\214?\032v=?<:\256?\276\340\257?\205C\010@\346\221\r@\260\306\372?\222\324\335?\346\206\243\277H\273\001\300\030\256 \300\213\006F\277j\026q\277\004[?\277a\214N\277\345\013q\277\353+`\277\342\317\344\276z\306 \277\254\226\315\276\366\246\226>\264\267B\277j\004\032\277\334T\262\276\256\004\023\276p\275><\224\240[\277&\252b\277;\340\"\277\223&\215\276\006(\201\275\374\266\301>J1S\276\206\325\325\2760\324\234\277,\222,\300\256\303\345\277)\356\266\277.3=\277\207\227R\277D\255\004\300g)\222\277\'\372P\277\332\325\r\277\256i\213\277\022 Y\277\340X\036\277X\356|\277\334g\275>\242\351O\276\330\347\025?|\020\356==\"\203\277t\233O\276\205\027P?\025\255`?\344Z\262\276\245\362\264\276&o#?8%E>\335\354:\276\240\371\276>s]\'>\306+\200>\260o\035<\221\177@\277\264\035\253\277nr\210\277,\002\304\276@\204v=\353aK?\220\306\243\274v\266\375\276\250Y+\275\002\347\037?@\304\234\2744z)\276\020vw\277]ZB\277\3748H\277\306\3551?\366\366\227?\300\245\302?\014/\321?2\024\333?$\023\254>\0022q?R~\021?(\250\254?\300E\333?\3450\266? \017\006\276\337]\257\276:\"\"\277\010I|>\325\366l\277\336Bt\277\320\263\363>\001)\210?\352\311\343?[\373\270?P\324R?IW\352?\244\266\352?\310\303\255>\024{\225>\256-k?f\343\273>\372\213L?\234\377\251?;z\321?p]\250?\337\302b?O\364[?\320\004\242>\037\350\355\276\202\260\021\277\244\272e\277\362\254\335\277o#6\300\r\236=\300,\205\026\300\240o\274\277<\367e>\\\223\344\276:\nk\277\232\346\216\276\315\022\367\276\265\201\\?I\236\357?N\n\216?\307,\221?\333)\316?\234N\235?NT\322?\332\336?@p\330\367?\326k\243?\223nA?\2267%\276\327fj>\\\315w=\207Z-\277K\"\006\277NNn\276\210P\366<(\345V\277\260|\240\277\035(\317\277\0050\300\277\234F\232\277\032\377H\277\002\205\323?u\247\363?F\n#@\300\265U\275\272#\\\276<\360\013>\217p\243\275V-\215\276;\235\037>^@U>\036\335\352\276f\342\214>\010S-\277\024\306h\276\3245\312\276\204^\261\277\310\210M\276\353>\231?\364\2074?\376\224W?}B\212?[A\371>\320O9>>H\304?.\3578?\030\032q?\351\032<?\024yy>H\"O>z\347\243?i\233\334?\rE\004@\036\237\341>8\201I\275\247G\033\277\366\330)\277x*&\276\032g\212\276\320\332\007?\035|\240?\206\375n?)\2174@\024\335J@|\210\364?\3401\265?\222e\002?\2522W>]\260\205\275*\372>?\014\036\036\277X\256J\276\361\372Z>_\007%\277\300bu=t\005\217\276\340#\202\274\000\222%=\342\020>\275(\007\007\277q.!\277Z:c\276\000\022h?\004\272Z?@\304\021?f\313\210?\247L\220?\373\315$?2\000\322?)YN?\314\003\014?\306\315\316>`\354\377=%\307\212=\004\254\356>\342:\236?z\242t?\323Y\223?\013#\223?\2641\260?;}\337>\265A\317>\260b\034=6>\332\275\332\335p?\210\305\243?\027\223\202?r\2273?\014\215h>\330&\310\275K\311Q\276b(\336>\214\265=>[\321\037?\260\355\273?\272\004\305>\002u4?\306\'\244?\235\233\021@\261e\334?\313~e?\306\274\301?\232\325\267?\013\335\000@I\265(@\332\3374@\341\341h@~\037}@\3133{@\326\251\267?f7\255?S\007x?\000\206\310\273;=;?\t\361\267>\211\263\001?p\237\357>Vn\370>\000\213^\275\374\376\334\275\207\257\355>a!h\276\240\201D;\036\274\377\276\006)\227\276hE\\\277\311\273!\277\303IJ\277\275+0\277\260[\246\275\206\nS\276\\\230\324\276\310.\220\276e\'>\277p\325\373\277\215\016\002\300\000e\277\277\330\340\367\275\206K\341=\343\255\305>\007\313\033\277\027\217\226\276z6\303\276\356b \277gQ8\277\322\341h?\365\3477?\266\313\256\276\004`\353\2766\345\313\276@\252\010?\241^\355>\206\323\003?\212\276O?\224QF>\210\252#\277\330\n\215\2757f\025?\3208\203<\021\264\020?\021\374\257>\304\245C?;\214\000?\260\273\247>\250\222.>\275\311&\277@\341P\275\254\301\300>E\025$?\256\362\341>@w\311\275\315\276\276>\0229\027?\200\004Y<\300\304\223\276i\2157?X\322\263\275L+\031?\254\323\205?\221\375\212>\'O9\276\222g>>\264&B?RgJ>d\353\256=\035\375\017=\274\334\030<J\240\006\277\335\334\341\276\366\320r?\212\356\314\276t\271F?\252\306$\277\262wg>hO\217\277\224\246\252\277\320R\221=\034\r\026>C6R\277n\036g\277z$G\277\344,\237\276\227\277x\277\363\371\214\277\227M\301\277A\256K\277\2027m\277\312\216Z\277\266\330\"\277\004\177%>J6\202>&\016\036?\036\370\361?r\271\006@\224L\322?/C\264?\310\227\257?V\273k?\354M\214\276\226v\032>l\241c?<R\232\276tc\242\277\200\264\203;`d\342\276|\234W>\0205=\276\217\204\311\276\344N\312>\3151\355\276^\371,\277\304\030j\276\326*\377\276\200\021\275\274\314\032G?\372\242\252\276\021\365\347\276\360G$?.I\353>\341\302$?\346\237b>\346\200\004? \371\316?\300\266\220?V1\275?\333\002l?\355\264 ?\306sL>\224\302?=\262Z[\277\300\311\006\275D\270\211\277\342\275\304\277.\272P\277\004\013M\277H\022\251\2771`z\277\210\360J\276\240q_\273\026}\227=\374t\251\276\030\266[\276\022\306S>m&\322=\324\252\346\274J\343\345?\003\332\216?\3164\302?R\355\217?\014b\302?\220\205\n@z[\313?\366p\016@V\274\344?\313;\214?\336H\267?\365_\377?r\021\215?\264qe>b\207\257>\211E)?HC\220?\020kR?\204A\213?\343B\260?lZ\260?\013\367\232?^e{?\332H\253\276\237\327\206>\324\215\303?\326,\026?u\253\200\277E\347r\277\264\363\256\277%\236~\277\n ^\277T=\313\277[\000\027\277\374.\246\277\317\357#\277\240A\376<\204U^\275\215[\230\277\356\330\256\277\227p0\277;\265\246\276\2440\345\276\363\210\'\276&\261\243=\035\201M\2773\r\311\277k\262\355\277J\035\231\276\"\206N\277\224\2609\277-\315F\277\022\022w\276\224\272\010\277\000\242\016\274\204\243\252=N9&?\370\236\314\276\312}2\276\327V:\276\240_\254\276#_\001\277\246\314<?\241\270m?R\006G?\022\213\341?\342h\342?,\336\320?\305\312\366?\204\\\370?7\t\000@\rT\227?hV\n\300\023\240\n\300d\027\014\300>\272\264\277\343O\277\277M\231\001\300]\024\205\277\3650.\277\353\010\205\277\354\013\214\276\001&+\277\000\373\333<\003\224\335>\020!>?\223\240\233>\310mS?\036\n>>z\335\314>P4}?\344?)?\210D\360=\332v\317>8w\225=OjL?\232\205Q?a }?\026\306{?\350\234\332?\276=\357>\210\n\221>\230\2176?\000\214#>\332\251C?q\312\376>\240\004\310=&\372\332>:\250e\276\346k\221\277:&!\277\t1_\277:4\202\277\210\000/\276\230T\205>]~=?\3141\212\2758\3235? \3640\275\203\202\026?\\:\240\277\316G\t\300&\346\001\300(\007\020\300>\007\253\277\307\\\266\277\244\231R\277\003x1\277\016mt\277q:y\277\230\220K>\017\275S\277\275\274*\277\302\321\\\277\021a\025\277\001\216\232\276[\314`\276$I\224\276\377\365:>C$\306\275\006x:\277D\001\235\277\346\267\026\300\250\035\356\277\374C\000=\327\354\034> Rd>\241\005s?\n\332\376>\356\304\246?\320*\027\275}\006\036?\275\224E?\331\321s?\200E\210?\005\222Z?\266zr?\221\277\215>`\177\352=\334\350u\275\325\307\233\276@\360\022?\r\002\370>\340\341\023>\340~j\274C\256\034\275\242\010\306\275\373D\340\276\343Y\271>\260\034\276=\344\361s\276(\274\366\276g\341\263\277\326\332E\277\250\177\212\2778\247\315\275Co\013?\324\201\364=\247\315u\277(\307\355=3\301\032\2776\353\241\277\350\000G\277(7*\277\313\276\035\277\333\3309\277\232^\216\276\010:\337\275\271\216S?f\377\340?^G!?\r\260n?\001(\033\277d}g\276\3438\261\276N\213\t\2779\206\310\277N\327\034?\250\t\023>\246\021\251>$\346\002\277\260\363\352=\347)\021>\302?M?\216o\201?\337\013\226?\314\200\032?M\324\303\276\\\270\301>o3\024\277\313\226\'\277\246 \244\277\013\237\233\277\256\371%\300\024\005H\300\347C%\300\022\334D\277\034[\r\276n\361\r?d\315j?\202\036\333?\010E\264>\332]\201\275\374M%>O[O?\250\317R?\360\017\022\275\260tf>l\362W\276\376\024\311\276\221\255\260\276\t_\374\276@6-?\365\"\030?J\223]>@f{\273\221\350\203\276\245K\270\276yk\220\276+\256\034\277v\311\223>\374AQ\277\341\212\233\276@\225\305\275\340\257\366>R\210\247?\330\316S\276-\013\016>.\365\305>\214h\222?\372-\301?{\300\233?\342\032I?&J\241?\200\243\335\275\27002\277\241\376\313>\034\350B?\235f\264>N\002\322\276\005\310\276\277\210\036\340\277\001vZ\277t\303H\276\225\217\263\277\214o\021\300\035\223-\300\327q\021\300\327\252#\300\325\225%\300\241\374\t\300 \213\306\277PR4\275(\317\225=U\371g\276A\221B\276\212I\237\276\334FJ\277\314\363j\276\210\200?>\253\331k\277\014\223\341\277\353@\225\277Z\266\235\277\204\361;\277I\225\244\276\375\244%\276~\252\210=\264J(\276l\377.?l\301L?\305\035\331>\033$\304>i\030\024?J\325\020>\375\252\271\276l\036t\277L-\332\277\030\232~\277\211y\235\277\202\206\022\277T\251\217\275\316\3400?\237XJ?\323\341\003\277\304\360+\2772\251\265>\002\321\320?h\340L?\270~s\276\000\272L\277\027\213\320\276N8V?X\226A?\271\373\241>\255\326#>\017Oj?\016\270\277>\t\272\\?\3248\033?\225\246\002?\270\204\r>\000*\342\276\254\323\263\277\377\334<\277\233Q\265\277\026Bm\277\310\306;\277\"\246\177\277\376\274\221\277\014\227\034\300\264,7\277L\006\212\275\367\203\240\277\000\221\220\277`\t\361\275\324\034\372\275\322\365\337>1\231A?\207\273\202?\240\201\032?\032\262\251?\374\240m?@\2317\2760\010\261\274\270l\036=\212\333\201\275R>\277>\340\355\311\274v\226\000?a\252O?\036\343\225?Xv\345>\344\362a?,\037\306?\224X\241?\374`&?\267\357G>\022\222\020?:\023\301>\\\326}\277^\334u\277o\200\222\277j\230\234\276\rMx\276+\033X\277\332\035K\277\207\0025?\\\004\321?\337\225\331?\377\256|?\024|\321?\006\213\333?RN\004?\364\250\016\276\276\223\222\276`\377%\275\237H9\277\262\363)\277$~5>x\324,\277\375\363\\\277JV\215\277\234\256\357>\204\216\365>\354\270]?\003\2130?\361\006\013?k\022\215?\032\000=?\000\326\036=\267\351_\276\234\373\217\277\301#\025\3004\037H\300\210:1\300bH\016\300,\245\025\300&\335\357\277GZ\220\277l\032R\276\357\246\'\276\025j\211\276\320^\360=3N\356\276[wX\276\366\214g\277yh\355\276W\321\007?gO1?\206\221\360>\217;\243>\222\021C\276B \247\275r<\307\276\224\222\025\277\230\261\270\276t\210G\276\271\007m\277\335V\366\277O|\307\277\020\0232\276\000\000\255\270\260\204\004?\020\3602\275\241\330\212\277\214\006(\277\004\"G>\211c+??\2725\277\226\017\271\2760\020\304<t\317\274\277\356\362n\277H\300z\276x\332\202?`\336\220\274I\277[\277\357\306$\277P\240c\277\021\336\214\277\240\212\336=PaQ<\022\325\204>\007,\373>R\207i?8t\230?\343\216\303>\351\343\254\276\310|i=\220\355\010\277\307P\223\277T\r\230> \242~<;\320\n\277\230\362\237\277\274\305\305\276\2729\300\277g\2548\2778\001\202\277h\r\272\2754\202\366\276\214o\203\275\275cW\276\032\267\313=tS\253<\020\322\230\276\302\347\274\275( 9\277\225\005\377\276t1E\276@\031\352=EM\334\275\345\2241\276\031\366\251\276\320V\210\277\2427\240\276\274-\016\277\3723\221\276`\365\027\276\000\206K?F\t\007@]x\036@\351\254\271?\354\257\215?>\340\220?\314\021\377>\224\265:>\247\312\240\276\034\315\305\275\027!8>\252\252\346\276\027>Y\277Yo\225\277\360]\005\276e\372\335>\376\220z?\331\'l?\030\307/?\"Y\253\276\225\315\225\276\\\036\022?\344*\t@X\327\364?\276\317\316?)p\177?\227\3626?\322\204j?b\246\233?_9\364?&\003\303?\370\206\036?,FV>R?\377\276j\357|\276#E^?`\346P\275\001\256\303>2\335Z?\377\260\235?Y?\202?\243\377\201?\270rB?\0021\037?\234h\241?\327\230\251?i\345\021?\t\315\317>d9\035\277\n\227\246\276\236P\233\276@\356\263>\206\\1?\026j\244?VJ\254?p\340\251>\272\253\330>\322\357R>\344\314)>>x\276>*\014I>H\033C?`\253\007=\232\344\223\276\024\303\223=m\020\206\277\303\010S\277\270\211?\277\330\002x\277]`\224\277\336\303\357\276t\366P\277R\332L?\030\260\300\276\2331\205\277\023\277\233\277\267/6\277\272\016\036\277\211\223\'\277\"\266H\277\276\205\370\276\037Fh\277LsT\276\006s\271\276\275\341\025>\215+7?{\013\t?Q\277\305>f\255R?\342\340\t>p\334\236\277\354\220r\277\010h\275\2774\361\270\277L\254e\277\365C\345\276\321\237u>(\364\251?\244\215\324>\360\344\313\276\030\237I\275\343\004#\277p\236a\275\304X-\277c\335\211\277\353\254;\277\000q*\2733\'\251>E\200\022\276\300\337\301\276\317\316\212?n\tB?O9 \277X5\341\276-\273\225\276\027R\341>Nd8?`6\222?\006[\335?@F\217?Il}?\227\237O?\241\033R?Dr\245?tq^?\017\376\002?|\017=?\240\261\230=\324S\312\276h\026\354=\216f\352>\336\213\225>\200\260\205;\'C\026?\000^;?\027\224u?F5\254?(1:?\324_\031\276\004h\237\276<\230\215\277\334C\007\300lS)\300&\302\270\277\300\375\312\275\026I\231\277\370.\345\277Y\026\352\2777\377\346\277\340\334l\275\312\207j>T\ts=\321\306>\276\034O\202\276$)\201\277\030\234.\277\354\302\367\276\237\035\030\277T\027o\277T\r\270\276\001\274\213\276\\7\374\276\333\261\234>\246r\324\276\202!\217>v\331\016?\342\325\t?\341\362\235?\017B\310?\306\n\320?!\367.?%\276\202?\233\227v?\272\021\237?x7\320=\350s\330\276yG\251>\004\001M?\350CH\276\241\241I\277\004e\202=|\250\202>\231\t^\277\033\n\321\277\376\347\206\277\nxb\277Vjl\277\366\226\225>\257\001\231\276\217\005\254\277\302\317\210\277\204RS\2776\251&\300d\270C\300O]\031\300\345B\002\300\007 \263\277B_\342\277\276\262\304\277\254[\313\277R\035\350\277@?\375\277R\317Q\277x\372\217\277\214\275\311\277s\253\270\277\2369\374\277|\037\310\277\322j~\277\\*$\277\326s\013\277\3065\017\277~WF\276\200\370\242?\202]4?\254|\031>\277K\317>\370$}\275\342/\217\277y6\223\277\032-\017\300\272\031\364\2779f\000\300\022R\316\277H\366\210\277 \031Y\2761\263\001\277X\313\034\276\007~\262\276|z\212>YY\202>\204{U\275\3416\264=l\254o\276\264\200\223\274\024Tv\276#0\024\276\212\211\205=F\010\000? \017e\275\014\276\266?l\224\202>\271<\013?R<l?4\257\306?\267/d?X\221\240?ki+?\200~\220>|j\307=R1 \277\210\217D\276j\346\004=?\374m\276*6\247\276J\027W\277\r\360Z\277`-\245\276H\205\243<\314\237\036>\274\222\037?\243\205\025?~\242L?\247Vd?\304K\006\300\360\006\023\300\024+\361\277\006\027\271\277\360%$\277\000\010%=s\303{\276@\035\264\277=7\325\277\373Z\344\277\3340\220\277\276\237\231\276S\033\036\277\240A\022\276\020\372\205\276F$\310>$\345\246>\353\2367?\226\321p?b\226\353>Z\331\234?\210\364\262?\340:\256=Z\353\024?|\246\t\300:]w\277\211\000\177\277WI\004\277\300(\247\277\276\246\002\300A\333\233\277\232f\372\276Z\3035?\276\202m?\016R\006>t\376\315>\214\336\255=[\356\003?\360\271]?\340\217\014?\260\nT>\210\324\347>E \327\276\242\270\006\277\024Xg\277@\350\332\277\010\250&\300\311h\005\300\361\255\265\276\23090\276\214sF>_\325\010\276hKd?a\310&?\230\205\213\277\222\004Y\2774y\231\276\010\316\200=BQ\206>\336\037{?\262\232\264?\202>\232>\330\352L?N\353\231?\236\376\312>\"\3152?\237(\331>Z6p?\340a\371<\375$\360=\203>}>\244\314y\275\364\265\007>9U\001\277}\r\242\277xJb\277\354)\r\277\022\332*>;%\017?\320\204\257\276I\254\270\276\2549\257=\322\324l\276\032b\035=>\222\330\276\020<\330\276\206\233\335>M\244\251\276\006\376.\277\230p\033>\260\360\302>\203\322\307>wn\203?\236h\345>\022M\344>\2232\247>d\370\333?\355M\307?\000B @V\261)@\024\337\260?u\341\247?\302u\262?\310\344+?\304\344\200?\032\021\257?\360\340v?k\201\205?]\036Y?\240Ua=\007\224^?\355\005\207?\363\001\013?\225\023\245?$\235m>\n\000\212=$\210_\276\204\254\003>\036V\277\2758\343/\276>:\031?>\220\307>-\340??\220\227[=\317S^\277\216O\223\277`<\264\277r6^\277 7\201\277\264\241&\277\014rB\277\nOM>\265\2115\277\024E\276>T\3455?\034\375>?\274\303O? E\206?a/\305>t\252\255?v\'\301>\r\3149?\302\005\206>H\271:>yO\032\300x\333;\3008\221f\300\301\372O\300h\2278\30026\017\300\332`\025\300\036\326)\300\210\253\200\277\017\275\001\300b@\347\277\331\341y\277\213Ne\277\312X\242>Z\345\001?0\264\211>fz\265\276\352:v>\343\335\217>\000\365\203\272!\202 ?2gs>\002\317\317\275-\347\"?0a\010\276\224\300\345>\212z\354>\223\342A?\274\267^\276\250Q\316\276*|\021\300_\243\n\300\350\362\307\277\013\022\235\277\255%\227\2777b\220\277\035\330V\277\255\244\331\276x\236&\277\376\230\376\276\024\270\022\277\354Zf\277\220\350\267<x\352\270\276\0028i\277\001\274\204\277R\2664\277l\261\234\276\001\331\215\277\214:\263\276\272\334\256\275[(S\276\202d\214>\025\273\272?L\016\367?\372\325\322?\352\036\221\2765A\010?F\352U?\373<\207>[\206q?F\217\202?\333m\360>\264g\376>\310*\205>\262(C?\000.-=$\301o=\313\374\302\276\201\250\222\277l\374\253\277\241\324P\277\266\214\372>\330\351[?\242\025U>\315\032\006\277F\343T\277\230?g\276 \ny\275\211\035\220\276\227JU\277\312\026\216\277T\374\253\277\336\276\243\277\214\r\004\277\346$\317\275o\013\007\277jy>\276\213c3\276\332\3568\276\227\347`>\324\242#\275\344\350\243\276\036\032M\277\370\224\220=J\t-?H\364\256>\31670?\336dp?\274\215\274?\260\261n?S\304|?x\023B?\200\235S\274Tl\t\276H\356Z<\301\324\312\2766\321F\277\223\300N\277\024\022y\276|i\342\276\200\254\207\277 \356\256\274,\033@<\217\242<?Yr\211?\262\234\326?\326\n\267?\374g\212>\022#S\277\225tr\277\272}\234\277\372\322\262\277F\026\325\277H\367\206\277-\242\376\276\262\323]\277\027\323-\277\254\037\237\276\310\245M\277b<{\277\215{\211\277\203\010\206\277v>\243\277\376\220\312\2773\"\356\277)\363`\277t\242\316\277\037B\302\277\302\022\374\277\344\000;\300\302V\327\277\013.\310\277j\301C\277X\325\316\275\314\261^\277\340\035\024\277\276\024\020\277vt[\277\\\215\247>Vi\276>(\227\327>\200W\310;i\241,?\000\3040:\326ca>\206\3551?\374\347@?N T>\360\242\266\276\375\212\227\277\326\315\007\277\213\033\317>\371\005\007?-\027\002\277\312\250\336>\310\006P?\240;4>@\034\356>\364\037\231>\276\302W?\2329\007\276I\271b\277r\\(\277x\335g>cK\304>\300\343U?C\361\337\276\222\034X\277&g\222\277\254hS\277\315\376\277\277r\3458\300\370K\301\277|\223\005\300\234C`\277\231\322\352\276\007\341\022\277\010\247\251=Fk\201\276 \233m\274\372\342\034\277\217\033x>\000\346\352\271\366>V\277\262Z\301\277;\337\331\277*K\232\277\254\227\266\277\307Y\301\2774\037\332\277\016\216\223\277\320\231\233\277,\245\001\277\240\277\\\276\210\313\251>\036\323J>\340\026J?bW\207>k\362\202\276mu\010\277 \330@\276~\357\225\276*6R\276\200c)\276`\n$?\002~/?\316\022\271?\217\362\030?\202<\316>\310\243\250? \037\235?N1J?\276[\203?\321\177\314?\314\241\360?d\277\234?*w\363>y\372:?\246\323G?\305\247\245>\010\004C>\250\032\r\2770\rH\277\202\307\202\277ICH\277>\014\201\276\036!7>n\321\201\276|\370\304>`Da\275;w-=\336\214m>\232\323\217\275\306\020\316>\264\331M?\\\326;\276\"^\034\277k\"\371\276w\333\353>\251\350n?h\330\267\276\311\2171>j\324_\276\026\353\020?\014\370\026\277\351bW\277\351k\230\277P\230\037\300\002V\035\300W\255@\300\352l\001\300\315\346\360\277\273\351\024\300\271\255g\277f\237\344\276\234\376\227\275\006\2358>\277s\252\276\027\357\000\277\250\001\367\275\2211e?0\256\376\274\263t4\276\300)\364\276D\026\253\277\217\305\204\2773z\255\277\305\225\305\277\373\327\302\277\354\204\216\277\021\006\272\277\2748\205\277>\034\221\277\220\336\250\276\243\232\211\277\033c\021?\2713J?(\270\022@_e\373?\347\254\354?\237 \272?0\337\321?`\265\202?\270\332s>\202\253_>\005\264\033?gg\177?\335G2?\331\017\375\276v\266\303\277x\006\211=\321\332\226>\303\n\205>\206\324H?|)j?\257\303b?@\003\367?,\335\271?,\350>?\202n`?\3200w\275\010\233\023?\000t\030\274<G\240\276\202\322\'>\304\007\324=\370\2357\275\234g*\277<\022 \277\204\333\031\276\314\014\343\276\331\243\321\276\216]\355\276cT\215\276k7\366>\000\242\317\273\311\231\t?w,A?XkW?&\377\360>Y_w?W\272\230?KyU?o\367\323?\213\365\347?\304\312\271\277\013W\375\277Ef@\300\372\232I\300\256!;\300\361/\311\277\322\372\250\277\2440\036\277\264 \210\275\250*\216<\032#~>\254\333[?\252.\320\276C\372\201\27612O>\205\020\037\276\370\224\035\275(u\035<\035\021\302\276 \354\345<H\3640\276\312\220x\277\374\314\262\277\221\333\226\2776\330\214\276i\'\022\277\264a\234>\036\303x?\216-\271?\200\216H<\350\031\320\275,d\273>\270\241:\275\271W$\276\314\342\307=Z\'o>v\252\207?\335\0233?U\356h?\274\275]?\306H\t?l\250<\277\350\233c\275F\203\341\275\256E\001\276\340F\267>n\336|>\306\354\346>\310\351\230=6\310\363=f\017D\275\311\017q?\342\260\240?h\314\002@\274H\253?\000\253\207?\226\032\245?\207+\323?\0006\243>o\306\027?\240\326\t?R\230_?B\361B?\034\307F?>7\246?\350\207\366?\377>\006@\262\254\344?\023\351\232?Q\207\236?\210~D>\021\006\203\277{\037\303>\2624I\276\032y(\276\230h^\277\274R1\2775\240\204\276\016\370\240>\334\271{?\334\334\332>\220\004\274\274\n,\363\276\2372\363\277d\247\212\277\205\363\264\277\231\315\305\277\211\036C\277\312\377\356\276\304\247\344=|\226?\276$4Q\277f\240<\277\324\227&\276~\232\261\276T\037\023>|a<\277\235yd\277p\254\365\276\312\265u\277\234\330\310\276\216\303\316\276K\3117\277\366}\213\276\r\306\200\277\356\200\230\27730\277\277/E\202\277\001A\214\277\372\001\033\277\032\261\220>\350U6?FM=\276mJ\003\277\364^\016?\256\331D\276I|Y\277\326\264\250>\324\214\014?\354\036\007?\272}\203>\022\256H=\224\355\231\275>c\250\275\200J\025\277\307Y\334>0\026\373>;\024\223\2769\305\202\276^\240\273>\305\325\337>\272\302\000\276\306\373\201?\034Y\270\276\257|b\276U\242\025\276{\271\373\276\314\261\003\277\322\350\274\276\356\000\006\276}0\214?7\260\323?.\310\363?\224\272\'@\264\330\245?\330Q\022@\241\001>@\230+\010@\034\261{?\352\t\200?\260\005\353=\240\324\253>\220}\205?\342\255@?B\230\302?\014m\333?\276o\330?L4\230?\027\304\'?\370\215\215?\316\254\334?&,\"@\004\205S@2.W@\244\240,?\032\312a\276\nx\'\277\365|\020\277D\340;?A; ?hI\312>\334\203(?\220\301\202?\035O\203?\216\343\235?\212/7?\313(\252?\256\030\010@e=\361?\330\300\241>\364\352\234?\252\213\220?\016\352Y?Z\004E?\333\340\310>\214\356p>v!\337\276\3602\325\275\001E\254\276\341u\211?Z\313\005?h\330\344\275M\001E?\207\036g?G\332\254?\360\211\377>\344\227\377\276_\316\242>\002\255\r\277\367y\023\277\377\303n\277\034\3601>\247\234\025>\210yb\277\3430\374\276`\331\200<\316y\233=\316\376;\276\021\372\302\276\274\271`\277\000\362\367\276\326$\234\276(*/\277s\031q\277\027\002\362\277\371\213\313\277\330\262\036?\331\276B?\n\3608?\032X\240\276\260\257\314=FGl\276\302D\036\277@\332c<\265\017\037?\246\304\312\276\242/\001?\246g\336>hMn?\350%#?\000zt=\n_\006=\302\001M\276\364\031\024\277\326\311\257\277\300lT\277\340+7?w\307\245?j\315\333?P\232\350\275\306\005V?H\305x??\354\023?\210\025\255>q1.?CQ\371>0\207\252=9\255\211\2776\341\342\277\245\356\226\277\340\372\266=\014\263\334=f\316\005\276\377\241\020\277\026\2344\276$\205\260\275\327`[> 4\010=\220N\034>\234\027\217?hS]?\362i\314>\262\027^\276h\035\355\276\204@\336\275\320\262G\277%S\312\277\255\033\235\277\322*\213\276\256D\227\275\370\3172\277\375q\n\277\000\367\224:O\326\036\2760f\203\276\3558\265\276\266\231\240?_\271\336>\240\006Z=\341|\310\2769*J\276\017\343a>2\330-?\032_\273?\260{z>\202\344\374=*\234\033>\234\0212\276iL&?H\252G?O\237\265?a\273\000@Ph\032@\346L\257?\032a\302?xz\313>\317+\316>\374\300R\277x\361\211\277$f\315\276\031\326\376>\tY\214?Y\200\200?\025\n~?*\264\310>\350\025l\275\034\217\364>\256\013)\277\367R\334\277\374\017\331\277\300E\026\277pQ1\276\344\224\245\276\300u_<\351\336+\276^\003\322>t~|?\'\336\323?\205\000\223?P\022`>p.\223\277\220\371:=\016\334\366=m\324\240>\210\211\224<\350j\374>\316[V?\\\225\034?$,K?\207\213q?\020\271\301>aH\214\276B\013\331\276H\3047\277z\214\215>`8a\274pc\356?\246\273\376?\002A\322?N\362\272? \312\232>\270\007\230=j\236u\276^\225\365>\t\345A\277\255Zo\277\334lq\276N\311d?\006\033f>6\317,?d65?\273\301 ?\230w\n>4d\334\276\243\334\026\277Z\252\331\276\256r;\277\222\220\237\277@M\226=J\346!?\253\336+\300\334\330\246\277\225\243[\277\214\354]\277z\237S\277B\241@\277~\332\002\277B\004~\277\\\277E\277\360\270\216\277\222\332\217\277I\321\253\277\266\352\255\277\223)\260\277J\246\010\300\340Z2\300r\'\022\300\256$]\300@\351(\300t\253\311\276\320YQ=T\2224\276\234\311\333=\276A&?\226\177\017>\304\310\275\275\036\355\003\276\257\316\332>\260\333\266<\\\340\234\276\2446+\276\237\375\r\277\004\334\263=\251\245(?\306\373\255>h\326@?\264\217\271>F\362.?4\2233>\223\265\002\277u+\332\276\313\264c?\351l\232?\376&\363?\320D\334?1\177\036@\013\002 @\356\210\"@T\210`>\364\001\002?b\027%?:G\026?&i\207?P_\217>\324\237X\275<\227\201?8X\017?\226Y;?/\006\311>\354{{?fj\220?$\377\251>\366i\225\276\260o\265<\361z\213?2S[?:\025\305?\241I\243?\2400Q=\254\344q>45\t?\200\320&\273\210p<?\n\033\275?n^\234?-\311\250?\037V\231?\334\013\313?\340\311\014@\254@J?\0102\026?\2648\004>\2759\006?\007\305\027?ZXf?b\r\200?da\261>\322\220\356>VP\037\276\025#+\277\214:\022>=5\215\277\244\210\263\277\344\247\013\300s\241\375\277\362\362\002\3004Q4\277e\305-?\304N\032?F\237\013?\205j\204?\324\331;?h\371\245=\210\204\032=?\337s>O\207X>\356\270\013\277\007q5\277 \203\364\276*P\241\277\007\373\305\277\340\'\022\300\317[\024\300\365P\025\300G\347\035\300\256\264\000\300\034|/\300\n,3\300F\324\243\277\350\2171\276\270\377\270=!\377\033?\316\3708?\220\275V>(T\233?\241\n\177?O\257\351?\334\211\031@\246\345,@\224\204\024@\266\233(@*\274\n@\370\234\322?\316a\240>\264)\250?._4?\374\373]?\343=\234\276\312\357H\277\320\003x>\206\036\267\276nw\200\276]\265\231\277\336w\030\277\322_\221?\027\306\321?\271\252\201?O\305\016?\0059\217?i\316\223>\304~k?<U0?x\330\263=\322.!=\303\373+?h\321\325>\242jL?\377gd?\003\360\266?w_\240?\371\364<?\232\307\221>lzC?\347\271\232>\312\322Z\276\322\230|?0\2617?SI2?\250\202\260>\360g\261>z/ ?\234D\233?\347|\327?\237,\021@\241\3532?\220\034\335\276\317W\003\277\213\226\207>@\023K\275\014(h?h\201\347>p\034>=\306\314\317\275&\201\373\276\236\326\257\276\333\024\274\277\220\"\347\2770\311\257\276\271\315\233\276\300)Z\276\360\264w=u\210\207\277\324\247\301?\302\275\301?F\367\301?\360\230\302?\334\357\233>@{@\275\023-\356> \364\025?\226\320\006>9v\241?\246\026\336?\365\361\325?\331\\3?\300NL>\324\242\354?\344\026y?\323\222\355?\375\3375?D\226j?\246\373\376>\202\273~> \342z\274\025\203\361>\222X\377>\262\2532@\212\224\365?\272q\023@\036\216?@\210\303?@\327\3542@,4&@\267\035,@}`\340?\321Y\002@\357.\366?:d\001?\\\t\262\275\313u1\276i\322\277\276\376\353\222\277,\376\027\277\334\016\240\276\032\256j\277\202\304\215\277\252\217\243\277T\313\027\300&\315\025\300\203\021\025\300,(\000\276\215\324\333\276\324\252\213\276\360\027\255>\350\\\307>,/\200>\371\223\020\277\342\350J?`i\034<\307\225\"\276\254\r\022>\014\350f\276[`)\277\220\221\226\2777p\254\276RtL\277\254\376\200\277b\004\363>\254\244\256\275\242\303\304\276TU(\277@\253K=\020]\215>\311\017Z?\234,\330?\226\351\260?\260U6>/Ng\276W@>?X\357\241=\366q2>\254Z)\277\"^\025\277/\250\260\277=Ax\277\204\003\314\277T\313y\277x\225)\277\246k\233\277N\034\211\277[\236,\277\234\220\026>\272\367p?\0059\205?\362\310\340? \311\224?\366_\274?\274s\362?h\234\336>\357\304\241>#\037\t\277r\232\033\277\022\356\306\276T~\210\275\220\313\264?H\233\217?\262m\310>\221M\211\276\256\304\030>\326\355\275>\013_\367>\2042\327?\350\237E?Nk;?\0346T?\006\265C?\234\252\031>?Y0?\266\300\200?8/\244?\235\014c?\323>\256?FlU?\224\024\374\275t\324W\276\371\020\325\276\230\276f\277\016\3743\277:\230>\277\323U\275\276p\004\237\277\364\212\231\277h[\340\277\274\351\260\277\206\300\344\277\332!\201\277\370\017\256\277\\\2139\277\365h\206\277\245Rh\277\350\215g\275x5\332=\226\3746?\177\030\210?\375.\203>XWZ=\272\307\331\2777\374\257\277\312\205\262\277\377/\237\277B\034\320\277\314{\374\277}\242G\277\342\032\260\277bO\345\277\274\201\257\277\277\322\215\277\353W\252\277>\264\263\277\335U\273\277\201\022\372\277\227\267\252\277\"\210(\277\220\001|=\314\302\333\276\362\212\306>\356\217\277\276j\361\030\277ibJ\277\270\034\277=\255\257\225\276\362\203\245\276sK\177\277\310\2573\277\256\226j\277l\356\244\277\204?o\277\316\3007\277\004\025o\277T~i>\002\024/?\2344X?\240\265.?\305\035\340?w\260\210?\200\260v?\212-S?\324\256\200?\334\246u>\260\325\216=\234\301\335>\242s\321>\315Y\215>\010y\332<\016K\322\277\010\267\006\300\332\265\010\300\340\227\325\275\214\032\304\276\002\266\225\276\377K7\277\304\261\002\276\277\025\022\277\200\365x?\255kl?\013\205\025? \0239=P\204\262\277\371\312\233\277\236\016\273\277Dpj?\006\242J\276?l\342\275\310@\307\275\20246\277\332\300\203\277\244\246\256\277K\260 \277\014\320\207>\264\234\027>\021\025\212\277\000\247R\274\365\235!>`\321\r<\254\371\302\274m%\206\274\350\037\t\276\244E\t=s\022_?8\034?>$c\255\275\243&\371\276=\367\232\277\353^\241\277*\201$\277\273\r\375\276X\214\257\275\214\221e>FvD?\320G\270?\333\226\275?,\205\253>\246\233u?\260W\230>\242C\222\276\360\233\341>\034xy?\372D\275?\006\027\254?\033\013\220?\366 \037?\324\223x>^\334\017\277\352\260\367>\347\002\332\276RF\207\276p,p\276\"\0041?@\025\356<j\373\025?\262iM>O~\013?p\\x=\177\323;\277@\ng\275\214\353\356\276\027\250\276\276\300s\230>()Q?\226$\224>2\020\301\276:o\313\276\313\331\360\276to\246\277\355\301p\277\310\007\253\277|\022\237\277\217(\242\277\216r\203\276\347d#>\366$\016\277\236sw\277\340\320\003\275\3213\321\276,\n\252=\320U\202\274a\217\r\277\220&V\277\322Q\236\277&,\025\277\331P\026?`o\257\275\324\357\210\275\\\361J\277p)u\277\372w0\277pns\277\304o\001\276\300C\215\276\266f\236>\356JG\277\373\000\216\277P\223\177\277>\240\241\276\210\354\230=\354\037\212\277\375\014\003\277K\253f\2779\010\255\277\010p\303\277\275\264\032\300\334\250\205\277\277Zj\277p\253\252\277\302\220\271\276\325\334\377\276\276\210\016\276\374Z\'\277\216\246\244>\367\032\005?\026me?\307\347>?W\002\242?\024K\326\276}\254\213>/\2448?\006\r\214?\226U\260>\177\341\227>\"\021S?\271\025\n?c\203\277?v]\261>5\t\230>\204Q\245=\r\257\371\276\240\037I<Q\343\204\276\330A\313?5\010\001?\300\022b?\033\370\242?\013{\020?\256V^?J\333\253?\272\241T?\222q\330>\265m\364\2764P\031\2762\347\000\277Lr\233=&\342=\277Q\366\251\2764K\034\276^l\374>^R\001>=\010\300\276\020j\376\275\303\2371\275PNF\277\350\266\240\275c\031\264=lZ\327>\263q)?W\312\"?\202\367\003? |\211>x\376\365>\260\3208\277\202\344\376\276(\364\277\275\221\267)?\330:&?\205\210\235>x\027\264?^\030@?\250\354\016>\330m\367\275\263L\356\276\230oD>\"\372\274>\314V\261\276\326k1\277\344f\217\277\251\202\261\277\260\223\037\300\225\242\331?_y\300?\270\010\030?\002\310\211?\345\242\223?XJ@?m28?\217\021\257?N\032P?,\313\014@B\036z?\016\'\336?r\362\363?W\367\337?\304\253\370>\003&A?\315S\300>\330\267*=\216\030\n\276\n\007\346\275\200o/\276D6\350\276\274\3204=\031W\222>\021h\210\277w\220\242\277\364x\320\276\350\257\213>\371\221\264>\014\\+\277\027`#\277=\204u\277m\177\231\277\304\355\213\277\315r\232\277r\251\224\277@\3303\277m\023\307\276\230\255\272\276Z\305\237=_8\206>\270b~=\002\330\223={\227\227=@\225W?\316O\200?R\203\232?\352\230 \277\344\223\017@j+\355?\032\254\007@\274\247\276?/\352\201?\003\272\352?\017\025\004@\303\355\305?#\342\275?\256n\305?&\351&@\254\007Y?\200A\360>t\'\000>V\213\223\276\307\025\343\276nK\205\277dE\033>b\t3>.\205\230?\367\026\215?\304I\272>l\254\207\276`\353\270=\204\302\020?[\3430?b\263??\364v\007\276\t\036\335=\377\'$?8\005\025?\0047H?\020\352\033=_\230y>>\357\201?\002\335\270?\000\235\254?5\021 ?\364.\335=\262\367\325\275\021\004\210\277\272\222\336\277h{\227\277\272\271\322\277kaj\277\016\334\256\277\002\316z\277E\252V\277\315@I\277t\375,\276\242O\347>O\003\211?y\271\272?\020\307#@\307\247!@\3678\371?\227a6?\r\253W?\212\007;\277\347Z\244\277\332$\314\277\r\016\353\277]x7\300\21577\300\335tB\300\013\373U\300\221Da\300:\267.\3008y\266\277\344?_\277\251\300\210\277\352.~\277\267\211M\2776\222\371\276<\007\353\275J\300\206\277M\213X\277`\307\350\275V\255\204\276\014\034\340\2766/\005\277\251d\260\277\367R\234\277|n+>0\371\352\274\203\352\026>\031\335Z?\354\t\331>;sx\277Z\242B\276\2467k\277\200]p\277\356{x\277g\376v\277\220hx\2770\213\222\277\313q[\277a\216\253\277\274\343E\277\'`\022\277\266x=\276\323\335p?\020{L>\036\364H?\304\327%?irH?\304\005\350>\237T\310\276\260\330\341\274W\223\003?2IB?\227%\263?\330U\230?\255\233I?\202\nx>7\365\r?\240PU?,\226\324>\034</> \232f\274{\272\250\277\260\022\016=\2344\265\277l\250\217\277\325+\255\277>\204\340\276d[\010?\241|+?z\210%?\336(\255\276h\3454?\204\236N?\273*V?\354\300\201?(\371\235>\340\251$?\356!\265\276\252{\275>p\367\315>&A>?\220?\304=\257\202\327\276\354f=\276z9\321\276tn\020?\267ca?,\230\005\276\306\370\t\277\301\\\000\277\370\t\013\277\230\240l\277+N\256\276\013k\267\276t\266K\277\025^h\2774\036\271\277\320\307g\275\366|\232\276r_\254\277\020P>=\307pN\277\304\276\004\276\016\363\364\275\206\235*>%\311\342=D\2368>\350X\264\275n3(?@\030K<\364?S>\244\326\202=\245G\252\275\346g[\277\247\223\227\277\356\272\242\276\263\215\354\276\205\266\032?\ts\006?\022\321\255>z\200\302?U(w?x\243\246>},\342>\002P&>X/\306\275=wJ\277\313\260\035\277\334\333\253\2769\204\026\2776*Q\276u\266\235\276\347\301\331>yk\237>Go\350>9\272\n?T\237G?\2668\224?\016\004\224?\007\316L?X\353\003?\376X\337>\234v\242>\226\237\003?RJ\201?\214\311\253?\\O\303?\331\324\365?\362\334\033@9\007#@H\266\014@\244(\223>\213\252O?D\365\206?p\262*=\350\363+\277\272\024A?=\3448@\016|\267?\360Q\305?\032\023\023?\377\254\234\276\272?[\277\356\234\202\276=\353$\277\3426\205\277Z\031C\277\240\331\357\276H\365\264\276`\327R\275X[w\276/\321\234>p\206h\276\366\242\236>\002\257\345=h\000\202\276 \257\237;\322<\314>d\232\342>\333\t(\277iB\341\276\226)E\277M^B\276\":F\277\242U\212\276\372\237J\276\364o)?\034.6?\344\335\006?\340n\242\275\276\004\231=\204N,<FZ@\277\000\336\013\275\256z_\275\234\321\261>\342\223%\276Z\024r\276\233#\031?\216\361i?\350:\211=]\373\016\276\333|#>u\301k?:6\330><\357r>\334\314L\276\023\347+\277\037\372*\277\010N@?\037F\311?\216\232\305?a\034\377?\017\300\273?H\367\225?\370m+>\320\032\210?\030\237\254?\344\342\251?\235\007\022@\324\225\006@AW\201?\034i\'?\366\364D?f\261V?\300\263!=B%\303\277\177\244\246\277\300\t\252\277\321\246\007=\247\227,>\232\023;?\2646\274?K\026\227?\310&F@\\\3350@D\371D@nn\007@\212V\237?\004\0248?\310\353\225?b#\266>\261\020\220\276lR\263\277\000\253v<\214\016\223>\304Y\237>\203U\302?\217~.?\240\372\202?\2702\007?\026;e?\206\005\262?&\026\302\277\262v\367\277\214\016\023\300p\361\267\276\340\331]\277j\213\254\277\222\374\026\300\276\203\020\3002\320\312\276\354;\336\276\013\214\355\276\364y\342>I.\036?-4\231>\020w\361\2753<`>&\227b\275\240R\213\275V\250\031\275K\200\016\277\333\2315\277\342\357O\276\274P\377\275=\017\033\277Wo\302\277\036p\206\277\034B\325\277\342J\255\277ken\277dP$\276\226\005t\276\366kc\2775\327K\277\312\024\204\277x\232\204\277\240[\314\276\374l\260\276\360\260\237=\240\200\033\275_y4?\320\352\340\274Y\245\014\277\334}:\277\261|\270\277\356(\326\277\233\273\351\277@\200\n=`>\256\277\356@\310\275\234@k\276\202?\017\276\253\302%\277C9E\277\244\r\217\276<aG\275\237\306\"\277\250\203I>3\333\351\276\030fV\275\324\262_\276\230\307\374\276d\216!\277PiD=\214\203\226\277(2\357\275\315\260\345\276$mV= \373\356=\200\344\341:\224D\003?|uE?\317e\277>\270\2131\277\351\363\201\276\203\202,\277i\256\364\276\374\371\031\277\024w\211\277r\245:\277d\304\335\277\374\204s\276\216\375,\277\364\237F?l\334\316\276\006\217\003\276\026$\341>\204[\213?\254\203\245>\035\347\344\276\020\013\234>\021K\213\276\356g\207\276\266\311,\277\366\201P\276\010\3667\277\260\250\203=\226\003\346\277U\017\025\300\307X\330\277 -v\277D\355<\277f<d\276\222\226P>\217B\363=x\321\364\275\233\270\263\277OL\360\277\241\226\004\300\355\3667\300\250\347<\300zL1\300\227\376\367\277-\272\000\300 \300\001\300\356I\247\277Y\301\225\277\310{\302\277\252~_\2776\216P\277?\001\253\276\252Z\357\275\322q\300>\201\006\273>(M\253=\352\324\353\276\005\036\241>\216\270\323?\320i\302?\030\270\321?\350\271\333?\363\2213@(0\364?\027\335\004@\272o~?,\343p>\210|\r>\000\016\000=\'\346K?\224\225\320>\375\325\376>S\020\003?*8@\276\361\234u\277\342\224\254\2778\303\242\276\214\024\365>\312\002\177?\330\263E?0ml?g\0079?.\010x?\313\325n?\210\024F>Pq+?\210\331\215?\321o$@4\346k@\236Z\276?W\"\007@\341\313\374?J\'\264?u\302\320?\220\353]=\364P\250?2X\346?\223O\277?\220!\365?\365\010\000@A\032\205>n\300\036\276\017\376\352\275\230\332/=\035\254\n>\030^\007?\310\217\374>n\232\340\2765aQ\276\244\014\337\276|\257\006\277\000\006\323\276\222\371\202\276\220y\237\275\377\235\314>|\274(\276@\252\362=\230\307*\275A\016\254\276\010h]\277\363$\321\276L.\240\276\223\261\235>\032\253\254\276\026y{>q\"??\234\003F?\021\334\002?\210\013\225\275\356gU\274\335\376\370\275,\025\222\275\014C.>\354\245\202\276\006\231\310>\363\362\260?\221\253<?IE\262?\000\324l=\262W\250\277\362A\r\277\026\0147\276\354\306\215\276P\370\271<\275e=\276\013\251\206\276(\212\360=v>R\276\004\302\026\276j\377f\277\235\360\270\276v\317\t>\271\277v\277s\237\222\277\254L}\277^\374\312\277 \262\322\277Bu\354\277O\332\357\277<\361\344\277\364\315\260\277n\224\375\276\300\2377\277$6\006>\363\347\030\277Sb\264\277\202\002l\277z.\034\277\007\343\030\277\323<q\277\257\355\213\2770\014\264\275N+`?\327\276z?\"\014\263>\270m\222?\250\377\361\276\370~\216\276*\006E\277\242\324\242\277\240\245t\277\376\261\357\277T\022\016\300\220\315\021\300\224\301\034\300\001WH\277\354G!>\000!\300=\020^\303\276X\257\275>\275\201\200?\002\211\006?\354S\271\277\036\227\032\277\361\001\004\277\266\336\\\277\0249\346>d\346\200?\ti\376>\021\256\000?K\016\366>?o\366>Er\347>3\213\'?\300\211\254\274\006\304{\275\301\214\302=\376\262V?\316\244\255\276\252\017\032\277\260\204p\277\256Rc\277\0207\253\276\211@\n\277h\2079\277\354-\277\276\226>\224\276PZ\'\277H\tc\275\210\353\037?S\351^\27706\367\275M\250^\276X(\310\276\337\031\222>pqJ\276!\227\033?\304]\302?\340s\022>*\034J>\255M\036?~\212\324=[\337\023?\016\270i>\220\305\275\276\322\020\037\277\2553\322\276\344\270\336=\224\366\010\277:t\013?\r\007p?\026\006\336?\342-\026?-\r\311>\222<\241>R\030\204>\020\275\254>\002\2539?\027\205\221?\332\024]?\306\312\027?\212\351\324>P\021\216?\302\365\220?\000\027\226\273l\243L?\356\356\177?|`\230\276\0165W\276t\346\254\277\216\001$\277b\320\020\276Q\222G\2776Ey\277\300\376?\277\322\364p\277\032\210\253\277\031Z\213\277d\307\023\277XY\017\276\311\242\200>o\023!?_\370\301?|7\374?\373G\004@\026\251\210?\\\232\266?k?\220?\224\230\220?u\363\273?$\035\364?c\377\225?j;P?2Un?\246\245\351>\005\210L?T\244\341>Lu\333>\302\304\241>\234v\267>\336\233\034\277iq\257\277$\362\034\300\372\230\371\277P#\324\277\224\241\344\277\343\307\257\277yA\277\277\242\230\270\277\253~\235\277\006\202\265\277\305^\007\277j\375b\276N\303\206\276a\365\017>k<v>\254u^\277\010\333T\276J\345\371\276\362\007c\277\"\006V\277Y\267\003\277\334\032\212\277\246\355\241\277k7\013\277\252My\277G;j\275\300\273\316>\245\004\007\277n\270G\2763@\255>\346$\212?\265\350O?\225\252\352>8z\215\2756Pv\277\243!\266\276\257\237\234\276o\225\376\276\345x\367>\204\204{?\320\021J\276\266\035\030\277\033\276\342\2770\255\'\300\022\003\211\277\366\260\261\277q\244\203\277-\2778\277\204\003\212\277<q{\277X9-\277^\025E\277`\341\206\277\300m\343>i\367\263\276\370\246\t\277x\373/\275N\222\r\277^\256\001\277\002k\271\276\270\325z\277yI@\277\016\332J\276\2305\373\276\217\216\326\276\021,\r>\315\332j=04\335>\216S\365\276h\244\030\275\326\016L\276\377}\016\276V\204R?8o\024\276\363\232\256>\007sX?\347\216<?\210\267G?l\007\370?\334\255\221?\027\027\344?\016&\375?J\035\352?\315Z\320?f\r\255>\016\002\035>\356\315\020\277,C.?\344\242c>>\370\306>\341\027\\>Z0\245\275r(L?Rwy>\225D\314>\202{\256>C\213Y\276\n~\253\277\307X\233\277\220\376>\275\231e\213\276(,W?\267\356\346>\345\\\234>\260\177\365=\007\341\316\276%M$\276A\2141\276\346d\222>\255\324\356\276\217\337:\277\252\036\273\277.o\264\277~\024M\277\261\342\371\276L\247I?\036\274\243?Xa\304?>E\201?#\260\030?e\002\257?\027\247\313>\\$\234?\372\030\331?v\"\177? p\314=bC\233\277\356\"}\277\003\326=?\346i_?m\321\240?\034\212G>\020s\235\276\317h\371>\310j.\275\250\363\005\273f\323)\277\252\037\210\277\350\306^\277\373:v\277\300`d\277\253\n\\\277f\242K\277\341\"N\277O\321A\277\340\006\312<l\223#?6 H?\331\3211\277&\202\220\277\322\342\213\277rR\023\277\252\372T\277\374\314\244\277\014n\236\277\322C\241\277\376\t\304\276\342\301\305>t\306\200\2753\371\350\275\245\312\210\2768\276\275\276\226\362\377\275\351\036~\277\342-\254\276\034:\343>\030\260m?0:\263<\\*\r?P\275\031\277\313I\357\2761\300\372\276\026uV\276\014\220\025>.\\n?\200e\206>\363\023\243?m\246\010@\223\"\240?\324\302%>`\3178<%\324e\275\303IV\277P\020#\277\320A\247\277\021\326\250\276\356\312\023\277<^\376\276\001u\317>\325\213s>Z\370u\276\274\353c>Ch\n>\352\361x?J\021\211?\244\336\010?@)\311>\241\220\305?l\233\017@\322\263\030@\353v\374?\312`\007@\010D<?\036\243\026\276!\276\221>\366)\266=\356\211#\277\317\367\232\276\356\031/?K\242\027?\007\034\212?8\221\332\275\377\000\317>\330\016\360>\020\\\037\276\220w\014?\344\204\314= k\200?k\216q?la\251? >\304?-2\327?\267z\253?B*f?\014\245\326?\320\203\315>\323\375\326>g]X\276\002!\003?.8\237?H\"8\2760\030O?l\201\001\277\200\223\221\277\3561\360\276\236\303\321\276\306\260.?]\r\272?^\007\253?n\236^?\323\376\221>\2257\336>\322\305\033?\317\233C?\360X\371>\2307\203?\232\325\003?Y_\344>\337\304\256?H\346\234?\205r\245?\266{\253?/b\264?\340\220\036?(1k>@\261\313;\371\366\354>cr\323\276Iy\223>\341F\024?yA\000\277\244\211C\277\254:4\276\025U\004\277:\254%>\210\333_?\354}\\?2\014N?\377\346\250>\360\356\217?\221\235??\231\265\006?\260\340w?\0355\244?\014r\343?\266\356\034@\365,\310?\355\013T?\220\243\310?c\273 ?\2731\212?>3p?x&\201>\226\222c\277\352\001\254>\364)\207?ii\336?zL\360?jrb?\306\344\307\277\201\021\303\277\021p\003\300\262\262\377\2779z\217\277\006\010Q\277\330\265\344\276\274\215\363\276%Z\207?\321\240\300?\223%\234?d\301\t?\220.\033\276\222\274\321>\220\373\000?X\330\003\276\355\330\360\275\273f\n\277\005\243\270\276\330E\333<S\240\261\275\340\2210\276\254\033l?I\330!?\224C\314\275\230\310\320\276\202\022x\276\265\213\275\277\312\207\013\300\"6\302\277\345\256\342\276:\260\340>\033\r\227>\220\034\212\276y\232Y\276\200\200\273<%\300H\277\234\030;\277\312>\214\277\310\'1\277j\371\351\277\2574\364\277k\377\333\277\340\330\n\300\240\351\036\277\254\200S\276\030\021\231\277\340\343\226=,\017E?1\232\236?&\223\250?\177\2130?`8\201?\0264\007@v\'\006@\370\202\256?\300(+>\242\315\021>\207Hj=\022\0141?\350Z\244=\232pC>\256\234\257\276\300I\210\276p\250\271>\353\023Z?\035\227\365>)\352\257>\212\023\374=t\241{?B\n6?p(\301?\253\250\261\276\000\034\277\271}\235k?g\200\276?+\260\257?&?\226?^\322\374>-\r\031?\2355E?|\362\237?W\222\210?\200\033\r@\017\346\252?x\322\275?X\370R?\000\366v<\210\026\203\276\025(J\276.\211\247=\'>\360\2760\240\344>\310\031I\276\260\215\205\277\215\002z\277\020Oy>\310\362%\277\302\220^\276O\260\351\275\017\233\253>\350\020v>L\027\241>\311\"\355>\037\374\377\276\013\245\327\277\347\250\272\277\"n\216\277\303\237b\277 \207\"\277\362i\027\2761\203\315\275\312\021\226?\3418`?\234\267\363\276v\340C\277\261\320\021\277tz\362>\267\370\313>\023\302\000@y\204\002\277\025\003\237>\3521\024?\203\035.\277\275\260C\277\\\n\216>\236\232\325>\231?\236?&~\217?\260\221Z=\220\212f\274\274\033g\277`34\277\220d`\275\351\370\000\2756\327\032\277\004\024K>*\362\246>\210\371\364>6\352T?0`\010?\200\036}?\345q`?,xg?6\017\372=\346\267=\276\336:\020\277b\217\333\276] O\277L\232\351\276\330f\272\274\334\223{\276D5\201\277\264\272\177\276\325\2679\277\022\315\273>\374 \226\275\347}f\277\"\354/\277\300\377!\274\252\327\002\2763\247\000\2763O\177?\203\255\031?Mx\002?\200W>\273\332\260\205\276;\013T>\020\"\241?\334\233\234>\031\001\t?\2259\026?dt\256?m\001>?\240\\\004\2765V\000\277\250\203+>\312u7\276\310\370\020>\260\231\344;\300\221\301>\357\203\230?\034$\306>\374\001u?\342\203\323?\036k\016?\326z3?\324\244\031\277\246\321\213\277\334\326\267\276\372d\216>\330\032\t?\276C[\276\334\263_\277\201\020.\277\351+\016\277p\246\220\274\376\213\014\277S\276\266\276\224(\001\277\375W\365\276\300(\026\276d>D>\220\035(\277Y@\323\276\203T\226\276\322d\274\276\215e\331\276V\367\236\277\265\270\334\277G>[\277\240\267)\2744bD\277MM\204\276F\353\334=\217\375\033>\247\273\034\300Xq\032\300\030\265\'\300\332\n\010\300\210\243\222\2774\035\312\277:I\257\277\300o\330\277\266\n\272\277&\276\231\277\020\341b\277j\3065\276\311\036\366=\303\323Y\276\203\225\317>&_\324\276\337i\271>\340\367Y?\310\342L?\006\353\013>\371\304\006?r\rQ?2\014r?\274\331\232=\220\354z?\262\307\235?\2109c?4j\335>\236\013j\277!\243\311\276\323\024.\277\210q\020>ma\244>\210\262\241>\206\264J?\010\337k?(Yp?\216Z\377>w.\355\276\240\360\303\277\315[\021\300+\022\344\277\352e\373\277\036\222?\277vs8\276\255{\003\277\364\202r\277\210\332\322\277\254\214\000\277\360`o=\316\0334?p\242\t=\274\225x\277\030\356\\\276\004\236\255\276\340.O\275j\r5>\2309\277\276N\371\260\275}\314>\277\221\017\215\276-\343q\276qw\306\276\312h\r?\370.\023>V\237\014?:/\311\276\235\361\036\277\244}\205\276\237\365r\276\016\213B\275\321z\310\276\32745\277\334Z\355\276L\307>\277\0168D\277\360v\333\276W\213\000\277n&\276\276\336b\024\2760z5?\360\026\262\276\230L\022\277 \206\340<\302\301.?\014jU>\277d\236\276\267\346\242\277\256Kb\277\211Z\344\276\031\213\205?\217\332\240?Y-\243?n\344\335?\356\206\245?\252\204\001?\200\247\006>\017<\033\277#\'\301\2772\327\274\277\377\307\253\277\360v\342\277\243Z\006\300V\010\'\300\210N`\300\340\255\001\300sr\022\300N@\306\277\'\024\251\277\310\223\246\276\336[\335=t\332\223<\323\365p\277\215h4\277b\037]\277k\317\366\276-#\310>\276S\317>\230\361\034\277F\334\310>\357\205\030\277\214\274\202\276\224\277\247\2758\032Z?\223b\223?\224\t\014@\363\007\025?\251\326\'?\227KR?\314{\"?\273K~?\300\371\205?\270!R\276\262\367\315\277\216\201\256\277\250<z\277\265\215@\277\362\252W\277pP\205\277G\353\035\277\226JV\277\353\214\212\277x\253\242\275\372\214b=\273\304Q=\r\346;\276\317\343g\277\225xf\277\350\021\233\275\350\312\016?\204:\233\276\350\005$=VD\005>\200\223\306=4P\252>Dy\243? \336\200\2752G5?\220x\272?p\223\265>@\003\222?\357\013\236?\021\266\333?\225\363\314? \030w\276X\023\222\275\273\363\002?\345I\237?!\272\035\300 2\300\277w{\251\277\026J:\277\251\254\261\276Z_d\277\314N\n\276:\227\r\277jQ\201\277\016\t\374>\276h\232?}K[?}p\003?\3740D>\020\266\027\277=|/\277\2031\217\277|\200}\276\236\034\234\276\274C\035\277\317\267\025\277\226=c\277\252R\226\277\210\252o\277\266\302\020\277\345>\256\277\257\356\305\277\317\263\002\300\316\361\"\3008zM\300l\210C\300\020\246K\300O63\300\316\366\347\277\016\214\t\300\273D\255\277f\322\320\277\312\251w\277\204\301\001\277\340\217\255\276~s\221\276*<l\277\222\215\276\277D\215X\277x\277Y\276X\312\226\276\200Yx>1\247\202>\274\342\260?`\250\263?\004\365\367?\035\337\352?K\2368?\030\"\010>\321\007\223>\320\"\243?+\267\253?W\010\263?\223\246M?\002\357\311>\325W\004\276\000\244\340=X\201\262<\2235\177>=\347\345>\332\377\351\275n\327\303\27611\352\276n\301\016>;c\'?\024\332\230\275\014k\354>\254\177u\276\210\337\031?\304\267\266\2764\013\252\277\243\365\270\276\200\234H\275\377\017r\276\002\253o>\002\224\315\276\340\010a\277\253\025\265\276&W\205\277V\242J\277\310)\243\2770j\236>\231P\214\277\346\216\221\277L\325\201\277p\336i=\020\222\215\274f\332r\276O\377\245?Xs\177>w\240\216>\004#\007><\276\212\276(\314\242>9-\004\277U2\260\277\265a\265\277\n\".\300\332\344\\\300\246@\234\277\377f#\277l=\211\277\340\354\004>\340\014J>\344\024\337\276\252\265L\277\224>\270\277G~\202\277\027\201\364\276\324B\245\277x>\030>\216_\003?\336\345c?\343\212\247?\377L\374?@\305a\275\362\204\002?\276\030O?D&\034?|Q(?\240\225\236\274w5\023\277\207h\204\276\317\237X\277\314\027\237\277\004y\024\300$=\370\277O\037\225\277B\"\363\277zl\224\277\343\024m\277\257vS\277\346w\200\276t\230\031\276>+\264=\252)Y>\212\210/?B\026\321\276:\317o\277\305\320\325\276Ba\014\276\236\017C\275\022\\D\276\230\317\302\274\201\265\211\276\262QC\277\306\356\013\276.\377\247\276\344\271\254\277VN\343\277)\324h\277\207\026\304\277\311;\013\300\304\n\361\277\346\231\266\277b\035\366\277\320\255\264\2770>\017\277\355Zr\277\"o\362\277\346v\242\277*\216\304\277\211\025\025\277\336\016\020\300t\034\215\277\300n\335=v~\263>\214\274u\276`\334]\276\n\346\264\276^t\r\277n\334\002\2770\205\006\300\217\322\027\300\262OB\300\370\017n\3005K\020\300\216\374\014\300\352\227\311\277\350\001\276\277\343\227\314\277\266\324\213\276\347\302\232\276\177\263\242>\353l\206>\340\300\201?\2310\200?\210\360\032\276c\014c?\306\350\230>b\317\030?\222\346\177>4\020i=\034S\032\2773\337\236\276\331c\254\276&\365\007\277\232\310\240\276\356\031\262\276A\264\321\276\033\350J\277\000\353\"=\332\371\r\277~.\233\277\316F\305\277`\262Y=N\036\264\276\305\\^\276\340|k\276\366\206\260\277\227\345\034\277\304q\014\276\275\014\352\276\034\266\202\275e\317|?\340\265\333\274i9\316=\200-\307=\344@\213\274,\016\327>\3704\022?9.\006?\264\010s>b!\302\276\352\340J?\035fr?\340\351\243\275!\363\013\275Q\302\362\276\\\0373\277\212\203\203\276\333\024\001\276\000\264z>\200\326a\276b\0245\276|\205\026@\014\333 @C1@@\367\321%@T^\342?&!\315?_\272\235?#K\235?\204A\n?\r\304&?\261H(\277 \022\200=\213\310<?\256\313C>U\240\332\276\377\005\204\277\370\014\r\277\"n\340>\210\223\013\276\031\262\364=V\212g>\347II?\030\247$?\372\035x>\266$\221?l\203\020?\200{\343=\234\364\032\277T\222\266\276=\345\361>\\\3137?\232\252&?\200!\312\273\353\232\253>\347r\004?8T\005\276\375Ia\275\307\361\256<\364k\026\277\001m\223\277\001\336w\277w#\227\277\t\305n\277g\373(\277\020q\273\277\265z\227\277\202\235\336\277t\370|\277\006G\351>\204\024\n=\027\224,\277I;U\277D,\025\277^\177A\276\361O\004?\260\007c?\314Z%?\264\235\300>\006-\017?\224\023\333>[\305}>\000\242@<\317\302\236>\334\321\236?\375i\227?\277j\223?\342\205\366>\020-;?\000\322\342:J\343\204?\267\001:?\0358\025?\001[Z?XVI?\253V\177?\356\243\026? \361f>\001E\340>\256\274)?X1\246\275[\272\\\277^\210\253\277Y\202\244\277\016\303\332\277\220vW\277>%\235\277\367\200\244\277\322\376/\277\0309\202\277\334Hk\277CM\226\277\217\307\242\276N\314\340\275\022\327\365<\220\315?\275jC\220\277>\344Y?\333%\212>,t\216?:}\001?\264\031.?\"\303\370>:\034\024>\334\236\316\276Y\021}\276h\"v\276m9K\276\"\n\033\277\252O\210\277\336t{\276\177\344\315\275m\336\017\276\235\335\247\277\310\236\256=\217:/?\314\032\215?\366{\260?\010\331|\276\273\315\003\276\223\0372?\030\304\217?s\334\246?1\001\210?y\234\200?\336\tg?\314\251\362>4t\211\276n\355\220\277\371\273\324\277w\335\306\277\316t \277\313\255\241\276\230S\237\276\314\347\314=\356B\226\275Z\331h\277P\022\247\277\243F\336\277\210\032\231\277\374\2206\277\374\252\271\276\270\2655\277\270W\312\277<L\311\277\221\3607>A\212H>\300\232\314\274\230o_<\370s0\277c\207\t?4 \002?\343\362s?\251\250\207?\263K\023?o\310\n?(\306\362>4\224\224\275\177P\342>\362\245>\277\374\225*\276{\035\017\275*\331\252>\321\306[\276@j]?1\322\003?^z\354=\224\353\347=6gu>|\275\247\276\376\027\272>\246\340\232>\333\337\030?\212E\242>\222\257\257\276\224\010=>\034\274\230>0nS\2764\201\274\276\277i\324\276&\327\355\276>*\t\277\016\252\331\277\201(\314\277v`\215\277\254U\244\277\313~\335\277\350\251\325\276:84\277\226bm?\022u\004>\007\024\213>&*\206?\335\246 @a\354\354?4\216\347?9;\353?\003\260\367?\365\240\004@\340a\265?w`\222?\274\252\032?\325\025\216?\032J2>\003y\377\275\231\376\243>s\302\001\277\340L8<\013\350\363\276\233\227\201?\020\303\307>x\326\234<(\234X\275\214\225\\>\223*_?\326@\212?P\235\327?\322\325\002>\310\313L\276\372gD\2765\355 \276\2620\300\277\346r\263\277\356\224\225\277\270k)\277\252\325b\277\374\337\227\276\346\333M\277>\332\026\277z\264\235\276=%\277\276\000\271\341\276\000\365\272\277\332\334\007\300Q\372\"\300\364[\350\277\007\004\277\277q\305\364\276Bd\371>P\277Y\275\347(C\277\373\037\375\276\340pq<\253\303\006>\325\336h>r\\\340=\032\020X>s\2202?\272\260\203?B\206\203?3\337\005@\300e\020\275w\235D\276\330\254\363\275\027*\334>\333\273X?\224\270a?\020\351\177>\2371{>\343pz?\276s\027?\264\330\254?/\227\304>,\266\024\276ja\210\276\007\276\002\277\234*\207\277\336\345\331\277^\271\226\277\000\rb<U\204\030\277\266\254-\276t_\272\276\372\373m\277\2028f\277\tf\230\277\224\323\327\277\010\312\257\277\220\261d\277\225{\230\277V\324\220\277\0006\332\274\265\247$\277\374N\244>pS\336<\236R\363>\025\250\210?=\323\340?\316@\317?6\344\211>\224L@?Ar\265>\204\376\026?\244rd\276w\005\001\277\337\317\215\27705\242\277`\217v\275?h\026=\335\020\300>\304ts>`!`\275\\>\355=T\313\252>\000e\206?Ph\322?\264>\301?\264c\363>\201TP>t\277\332=z\225\177>\232\213<\277Qr\332>\210\267\022>\300\220\244>\005SX?e\367E?\257\270\226?b\017]?>\032\263?[I\251>\335\335\313>D\2250\276\210\334\210\277\023\035\210\277<\356\251\277\203q\031\277w\217\221\276\376k+?\226{]?\031a\227>S\023\342\276\n\004\216=_c\325\275N\022s\276r\360\000\277\312N\300\276\313\010??\211\217!?\0229i?\356\257b?hS\251?U\374\033?kC\003\277@\347\031<\362{\207\276\354\370n\276\251}D\276\224\032\351\276\303m\330?\370\245+@\030\373\034@\016\217\001@`?\311?\244\255\t@\033\013\352?\225\221\305?p\370\332=A\346\345\275\026\335\210>\026\262\265\275x\213\207>\313\363\224?\220#a?\220&\234>\2006\226=\362\263#>1\234\033>\0022\262?g\376\276?\370y\221?\250\253\240=\2044N?f\026\327>3X-?\2704\270\275$at\2765\237q?9|3\277i\307\000\277@*\364\273\200\236\256\276p\254_>ji&\277GX\352\277\023o\301\277\030\374\300\277>\347\374\277j3\367\277\377\342\350\277;\033\237\277\2108\"\277\200\234\201\273\323\016$\277W\340\214\277\024\211R\277e\312\301\277\213\257\021\300\241\260\217\277|B\005\277\000\3054\276:\272Y\277\251\342\233>D}\004\277\232\025\220>\303\271\213\277\322jX\277(\357\356\275\230\023t>\352\r\233>n?\316>\250\272Z?X\263\240?\003-\226>\347,\215?h<\314>\277\275\374>\234\020i\276\205\025\203>\272\t\220?\262\256\246?4%\231\2765\023@>\227)\t?X?\227?\325B\313?\020\036\305?w\022\231?\264j\251?\237\003h?8\r\254=\366\2542>\037UZ?\356C\347?\010-h?\343\213#?\306\001\374\276h\364\010\277\320Bp=\346_\270\274E\330\340\276\222\3510\277\020\200N\277\266 Y\277H\275\211\277\031,s\277\305\313S\277<\356\351\277\222\375u\277\"\266\211\277h>\302\277\256\237.\277\304\237&\276\357\3512\277>}\306\276F\355@\276v\303\246\275\354\024\002?\3755\304>Z\021\021?`yQ>\312\331v\276L\017\013=\275cC\275%\357S>\337\231\025>X\026t\277\224\215\306\277\367\320\320\276s\375K\277\232\216\251\276\345\362\230>\313\275J\276\031pz\277\274Q\340\277\233\341\240\277\006\010\376\277\240\337\363\277\r{e\277+\267`\277\3161\244\2770\031(?\322\0258?\332F\340?^K\342?\335\016\260?\311\253\251?z\251\024?\304K\230?\271\034\246?d\017\325>\037c\014?\356\217\320>B8\200\276\354\311\377\275\3453\205\277\330\035\207=\272\016\311<\007\261\n\277(\361\022?*\216\035>\372c\206\276p\372\372>N\250\020\276\272Y\302>9\246\'\277\374\316%>\211\032F?\'\355\243>r\256p?\376\321\313?h\203Y?\034o\337?^(\236?d~\017\276\244\226\367>\350\227\003=\3563\023?\000\003[\275\3157\372\274I\365\\?b\206R?g\273\233?\333\271\245?\206\370]?C\350\335>=\342\246>\347\356\257\276`\0278\277\337\005\312>\003/1>5u)\2773,\025\277T\2212>\000*\250?d\t\214?>/\314?x\261\220?\362\232\032?,\361\253>\220\016\027?\254p\211=\254\226-?\207\343\216?p\n\214>0l6=\334cD\277\034j#\277\264\251\307>Gf\240\276\341\020p\276\253\335B?\242\032\225\276\350\211\325?=\216X?c\224\203?\326\342\000?\205+\241>\027\016\214?\234\237\035?\250?\221\276\360\242v\274\233\361\005\277\332\346\250\277y\275Z\277\206\270\245\276m`\220\27602\274=\213\262!=\270C\365\274\252\324z?\000\252\367\272`\n{\277yw\217\277(6\202\277F\351\274\276\353H5\2769\006|?\336V0?\364`\370=\222\303?>^\202\357>0[\341<\311\305\310<}\367Q>\240+\363>(~G\275T\t\032?N\334\234\276\321\305\021\277\263\215z\277\302x\233\277wM4\277P\325)=\351\345\377=\244y\362>\3647\211>r\201\035?`\304\'?\311\tj?L\021\177?\200$\265=\370\003\264\276p\2742=\275C\252\275\0372\206>\254\3257\277ZV\033>\3024\230>\220\255\206>\n\305I?\310K\237=F\0052?\265\334*?\202\332x?\263H\360?\302\343&@\224^\006@.\270\245?t\'\201?\332%o?n\255\027?\362\270\016?x\021\305\275\313.P\277\317\236\033?\3746\204?&\030\364?\3609\272?F_\260?\016\326\256?\323\250\275?AQ\307?\210\233\022@\334\377\350?\234A\035@\266\375\361?Y\336\254?L\243\204?b!\364>\324e\242>|\344T>\250\244\341>\274\230`\276NPV\276\177\222\001\277\334%\177?fz\260>$I\205\277\326\204\343\276f\007>\277)\201\234\276\233v$\277l\322\371\276x\334<>\303XY?\200\233\261\275\205\275\273>X\262\216=\277\247\266>\364\022\205\275\375\004\205?\227\022\022\277\250\2261>\025\274\024?\205\312\213?\231eR?\006\rD?\027\260\017?\"a\224\276\205\374\"\277\236\217\'\276H\303\247\274lo\n\276U\200\211\277\364+\202\277|k\337\2770\204\312\277\010]\021\300`7\n\300\261S\t\300\2425\250\277\2106\315\276\246\214\021?\266\272\306>\036\367\256>^\313@?o4+?,\254\016?C\272<\277\266\346\215>\014KH>J\325\263=\272.\326\276\016\007\352>J\342\374>>\363\021\276\244\363\257?\316\317\223?^\362+?L\212\264?\346\312\242?U\345\032@\264\010\017@\311b\365?\245Z$@\000\353\220\274i\033\005\276\255\2273\276l\232\t\277\376\005^\276+\022\201\277\234\003\311\276\364\324\300\277,>\215\277?s\217\277f\300v\277\326@\241\277\005\'p\277\227Nx\277\220\313\025\277\033T\257?\020\313\271?\241\263\254?S*\273?o\020\005@_\263\304?\351\036\206?,q\226?i/\201?\037\361v?\340\231\202\275\201\211\016\277\020|\271\276L\021\026\277\026\023\307\277/v\375\277`lQ\2750w\274\275x\366)?\022O\224?\2424\232?\241\365\222?[\355\014?\375\251\010?\034U%@-\010!@\376\000\305>8\177<\275\204\003d\277\300\246\276\276\237\r\210\277\257EN\277\236\316|\277\214\272\206\277\312\224\274\277\r\377\257\277\242\331\220\276\031\337\310\276\"w\030?PZ/\275\321\262\201\275\201\266\331>\254\373\372\275\014R\003\277\r\036H\277\\\234n>\2569\300=\361J<\276\001\330_\276\256\257\357\276\375\334k\277\356k\361\276\ne\371\275\314m&\276n\267b?\340\263\300<\242cF?\374\016\034?\266\322h?Z&\363>\227\222l? q\263>\302\016\025?\212(\252=\3407\211\275\364\270\213>\270\202@?oss?\006\353\340?\3547\316>\200C\247\274{\277Z\277\002\030\271?~\321\356?\302\037\271?\206_\344?\335\003\317?\363C\304?\034\0319?\331\230\007?\340\221g?8\3071?C\275\005>\371\311\034? \325\316<\325z\'\275NO\024?\036w\005?\0374\327?\3521\331?\372!\314?\236\241(@\267\3358@\222z1@`\0139@\311\260\367?\315VM?.\312e?\034HG\276X\204\235>\341\364\277>.*\200?\264/\013>\031\237\200>Y\305\211?vRf?\207d\255?\261i2?\000\223\004\275P\356\035?N\321O\276\341y\010\277\240\310\246\274P;\006?:\0303>p\303\200?\254SK?g\300\271>\324m^\276 \310\345\273\021\304[?\262\255\027?\332\366\215?\327\266\203>\215\374L>\361\344\024?\352\rz>\250[\230?\204F\251?\003\353\264?\020p\005@\312\356x?\246\260\007?\235\261\260?\267\263\235?7~ ?)D\205\276\366\340\321\276\350>\312\276-\260\226\276\204\346\020\277b\336\304?\354\337\010>\266\213\274\277*\272\255\277\260Xj\276\275\033K\277\335\211m\277\227\260\261\277R\035P\277\004\340\222\277\257\211\246\277H\240\247\277\336\355m\277qg\311\276\342\rZ>\3031\241>\031\341\217\276\214\030_\277r\307>\277QM4?\360\027.>\350M\260>8\324\330\276\321\320\263\276\242\306\343\275\345\245\005\277\330\3251?\325\267\202?\351\037\321?\277\020\007@`E\316?\264v\263?\223\345\245?U\303 ?\257\273\226?\321\201\230>\211\341r>\2648\347\275|\246i\277zN\256\276\354\274\237\276\232\211!>B\325d>\230\255\031?\034(\275\276\034\227\314\275\030\303\274>\232\030\363>\314\373\275\2757\005\333=\353S\014\276\036\313X?\317\262\227>\365\256\350?\332\037\364?\\B\271?\272]\243?\340`\r=\211\005\377\276\014\035\314=k\2411\276\332\305\303\276\340\340\341\276\243\300\220\276\022u\t\277\r\363\212\277\237\224\203\277\004\020\037\277\276\221\244\277{!\016\277\000V>\277(b\241\275\014o\036=\326\237\254>%[4?\262\267\026\277@\305r\277k+\005\277\376\356x\277X\225\364\276l\016%\2775\363\204\277|\366\033\300#\352\t\300\320jL\300`D)\300\026c\211\277\025\032\331\277\232:0\277\306N\020\277\216\004\247>vQ\370\276\220\320R\277H\307\203\277\250w\213\277\217\306\013\300\321q\374\277AJ\000\300\372\004\025\300\036l\032\300\252I!\300\351F\256\277\235<\305\277\025\271\335\277\324\216\000\300\240\010\001\300=w\347\277\203y\242\277\351\342\300\277\275m\220\277v\333\220\276\217\303\007>p\021\360>\354\226\026?.1\'>\376\007\027?\377\264R?\215\252\370>\000\275\224?\204f\235?\026ha?\254E\017?\206;\023?\000o\355\276\250\031\245?\360*E?\\6\354>\3647\213?e%\325?\026E\306>\2524\016>\326\254\'\2766\357V\277\261@\234\277\207\260O\277\230\001:\276\002p\020\277\0349s\277n\376{\277\370r\n\277\314F\364\276b\357Z\277\324O\234\277\324\371\212\277\177yx\277f\027\203\276\344\377\261\276\006\237\261>\310[\220\276K\3368\277\330\254\224\277\223\353\213\277CW\231\277\006N\264\277\277\3504\277\332\345\243\277z\021\202\277\216\210}\277\030\026d\276sm2\277t\014j\277\330\367-\277LnC?\234\245\300?w\303\301?\307\273=?e=\212?\000\245\254?\022\204\207?\352\265\217>(\336\252\275\215\n\234\277\\\023\274\2770\0075\276\312\233\010\277>\231\024\277\240x$>\245Z9\276\031\373\264\275$\352z\274\330-0\277\312D\346\276?H\333\277\261\022\303\277\376(\360\276k\t\320\276\006QL\2771\2029\277@\302\"\274\252!f>\030\036\010?/\253\332>\n\322\365>AKP>\177ZT?\234\364\250?\376\244\314?\333sD?\250\337P>\007\344\347?J\263\245?u\374z?\314\313\206?\003\312\206>\240\342\222=\276\\\236\275\363?\213\277*\237\r\277\251\0054\277\226\032q\277\000\333X?\272ld?\014\317)?\004\236\345>\034\244!>6$\304=\240,S=\222@\005\276\3237\340>\277[\303?Y\211\025?\200\033h\273\000S\303\275\t\024G\277\234%\034\276\370\307\377\275f\3624>\350\232D?\247\345*?\260\203\221?\274\375\231?\201\035Q?x,\010>\322\275\201>\246\303\212?{\014\254?\177\371\232?;\335B?.\231\261?Y`\216?\226\315\354?\343\353a?\212\303\320>\234n\321=$W6\277\203\301\325>\220 n<H\034\374>\007\224`>\312\"\336>\032mV?\274 Z?\373\201\317>\200^;=w\345\347\276\350\2425\275Y\350\367>\326^\234?\242&\340\276\014\317t\277\342-\254\277-\316~\277\312kF\277\004\334=\2774\345\025\277@\341\356\276\355\224;\277\320\372\032\277@0\233=h\206\265\276\306\026\007\277\356\014r\277n\007^\277\203\036\r\277\221\275\t?\031!6?x\343\314=(\232R?Y\262\366>7W\232\276\356\247J?\302\256\312\276\200fI<+\204\314=\035\332\273\276[Sk\277\364\351\013\277\270|1\277\216|.?t\206j?\2372\270?\354\330\262?\323\302\031?D\260 ?2\221\211?L\302\326?\350\220s?\240\323\177\275\376\301\324>\264l\332=jqI>\000\203\376>jCx>2\312+?\034_\010?\334\250\242>Tg\277\276QL\264>{\314m>\225_1?\036\'\246?\200*\213\274\023\307\273>\260\225\255<\230H\214\276\257\232[\277\275\3714\277a\366\216\277\301O\370\277\260\257L\300\220\234F\300pw%\300X\254\274\277\251\216\237\277\232\360\314\277\320\375\334\277`\320\230\2778\243\207\277l.\260\277\300\200\005\277A;|\277d\270\371\277=\347\236\277 \222\n\300\324\375\213\277\006\214\216\277\212\\J\277\211\0233\277\200\225\244\275\240\343v=_\211\007>\270\251\256\276$\177\206\277\323\230W\277\020\277\255\275\031VP\276N#\007?\316\207\023?\240\031\301<\3160\330=%\2065?p\257,\2752\255\010?}p\244?XE\226?\022|\177?\321O\344>r\277\241>\360\340\350\274gP\023\276\240\177\201>]\362]>\235\311`?x\225N=\276\027\220\276\257|a\277\216\334c\277\306\365\211\277\222\217\245\277\030\\l\277Pq\007\276\3245\350>\220F\303\276\242\031A\277\262o\020\277<\303\274\276@7\031\277/^<\277|c$\276\253\246>?\344\342Y\276\357\232\220>\350M(>\322\251\201\276\316\025\021\277\230\241\203\275\2347.<5\024N\277H\212O\277njO\277\212\232+\277\350=G>\312xl?\032\004\231?\323\276\237?\304\235\254?\232n\220?>\246\343?\027\017\354>\300\032\341;7:\331>\346\304\003?\324m\340>\370\327u\276\021\264\034\277\326e\037\277\252\ra\277 \237l\277\005\332\276\277\264\241}\277d< \276\215\273\364>|\361\225=4.t>t\005&?E\214\010>$\342\275>\204\246\327>\256\344\256>\241\345\345>\216\276z?h\236r?\037\002\222>\306\312\260?J,I?\260\375\325?H\211\341?\030\223\213?Y%\371?T\314\021@\250h\007@\366\3300@\271\233\367?r\242S\277\346\240\'\277N\256\270>D\260%?v\356\221?\260\230\\?\n\033\024>\204\022\025\275F~7\276\310\335\201\276\220\371O=\224^\324><Z\351?\223\245\006@\016\0057@kn(@\357]\276?\201\370\373?\223l|?\0107\236?\032*\364>\332;6\276\224W\031\277p\306?\277\220/h=\235\375\203?\231\334\256?\007R\016@\024\006\255?\010Z,?\327\017\020?t\035\203?H\206v?\360\255j\275\004h\271>\000)\211?\224M\274?\246\344\223?S_\356?\241\257\327?\020C\372>Z\037}\276\030\300C\277\000e\026?\270\350\345\275*\260\023\275<;\231\277\216\340\330\277t\273\010\3004j3\300i\240\276?\226\226\340?Q\'\035?\234\0165?R\230\222?\240n\241?\334\357\335>\336v\260>C\252\201?\252.s?\344\014\004>\236\213:\276rn0\275b@>?\326\211Z\276D\330\330>\300a%\275\324\021_\276bx+\276p\345n\276\314\307\277\276\317\360\247\277}\001\241\277\306\330\226\277h\343\003\276\367cx\277\030\277\007\277\220\321\036\276\0035M\276t\323N\277b/\216\277\262\245)\277\026\3077\276\244\262/\276\315c\247>\326\247F\276\021\350\352\276@\360m\2744\n\217>yJ,\276\347\233{\277\354\225o\277\216\240\r\277\254\214\261>A\250\"?\034\333\207>\302\361\307?SN\257?\\N\375\277\247#\001\300\302\367\354\277b\323]\277\264,\227\277\036\224\317\276X\327\034\276\010\362\313=\204\027\030>\347\366g\276f\203\003>\203\022\227\276\3646\331\276\224\326\362\276\267\325f\277O\266\307\277v4\324\277\'2\221\277\007\203}\277\340\031R\276P\000\210\277\006=\234\2770`\350\276\230\t7>\347\016\033?B\013\230?\035B\303>\206dL?81*\2761\'.\276ZpS\275\300\361\000\276\246\002\013\277\344\005\235\275\327\007B\277(\356\276\277 \017\231\277\250\031+\277\260\005\210=\362\374w\276,\244\244\277\366\350\313\277J\024x\277\332\241\213\2778\333)\277>_\000>Zt\351=p\301b?\217l\225\275+\230\340>,\340\340\275\"\014\005\277\204\201\240\275$\375\246?\334\2000?\000\316\036:\301t\330\276(\363?\277\010\363J\276\274\'\017>\031\032\240\276\030\031\203\2770U\263\275\307\264\274\276O,@\277\300;\307\277\2421\251\277\371_\023\277@\033$=\000\'\246?j\377\370?W\304\022@\023\002\252\276v\002\337>\034_\272\275\003#\241=\224\372\325>\311,\247>\221\002\366>:5=\276\000\\\355>+R\"?\202\205\006?\336\0032?W\306\314>\322!\340>\212\237)?\264H;\276\340(;\276#\351\202\276\365 i\2771\025\234\277\346\232o\277\375\005d\277,6s\277\277\257\346\276\263AC@?Q\034@\273+\200?\010\245\013?h\372\301> \307s\275\216j\022\277\376!\316>\200>\217:E\202j\277\313X1\277JS\016\276\310\366Q?\030\360=?\340=n?^n\215>gX\272\276hvq\277!}Z\277\276\345Q\277{,<\277\346\007\010\277\206\263W\277b\304\253\277\210\000#?,$\203?\234U\002?\302\\\216>F\0166?\032;\374\276\224\007\225=\236\014\301\276F4\r?\034+_?\212N\227>\320\t\270\274\021\201\356>\004Q$\276m\026;\277XE\256\277\nK\232\276\036M\016>\265\304\371>\336\273\226\276\346\036r\277\204b\014\277(\232\026\277@\0034\277\260\004\224?\220\335\352>\004\212\227\275\214\n<\277,E:\277a\0340\277\343\235\344\276\272 i\277y\360\254\2773$c\277\rVA\277\215\3030\277\362\203/\276@q>\275X\220o\275\352XP\276buk\276\021\341\250\276\366\220\'\277\272\371C\277\225Sx\277\004j\322\277\323\034\337\2778E\010\300\211i\005?\0000{?>0\276?o\232U?\336\250\023?t\000\254>?\2307>\256\214n?T\234\323?C\003(@,>\340?ej\231?\302R\212?\226\207\224?\032\032!?\312\336\'?:-\206?v\322\212?\252\225!?\222\326\022?%\374\022\277\357\370\205\276\250\361L\277s\231\346\276[kK?\2177\374>*!\303>\351e\251\276z\265>\277\252\220C\277\233%\301\276\322ou\277\300\201\312\275\316m\206\277\220\246\016\277j]/\277N\217\025\276\214\330J\276~0]?^+\336\276[d\213\277\\\203\203\276\333\000\036>\010\031+\277%\237\001\277\177H\272>xaR>\023\316\010\277K\004\026?U\330\212>\313\014\202>\374\312\377>\242\000\241?\315\234&?x\0360\276b\206D?\351\025\031?D\307\214?\312\3178?\0312\243>\3572\351>\376\372\252>\314l\312\275S\232\377=\001\003l?\364!J>\340\217*=fL\331>\222C\014?\244b\201\276\353&\307\276CDb\277\262\343\212>\300\037\247\274\260%\214\273\271\326\321>.B\317\276\236\026\r\277\032c\274\276\277B\030\277\231D\243\277\352t\243\277\311_=\277\235{\032\277<I\223\277\3574\232\277LEL\277\221\265\365>\227\217E>`\232\375\2756P\336\276\354a\037\276\177\301\214\277\220\237a=\240\301\213\276\320R\341\276R\375\037?\240A_?\346|\260?X\007F>\252\201o?H_\201?\217\201\211?\224\350\023?\313,\257>n\3359\276:\303\357>\343\016\203?\022\032\270?Y\364\236?H\t\221\276(\317\361\276$\300S\277n#\226\277\2778\036\277\270s\217>j\242+\277M\036L\2774\255\031>\222\253\363\275\232Yt\277\032iP\277&\262\033\277\212\3227\2777\341D\277\370\036\211\276 \321`\277\232 \312\2770\343I\277\344\375\233\277\000D\347\276\356\265v\277`\005\202\277\005\261&\277lS\236\277\366?\302\276`}g\277\370U\254\2779N\201\277\227\306`\277*\344<?\205\001B?\314%N\276\372v\000\277F|\245>\230\373\253\275)\247w?6=\217?\262w3?\262\014\001? E\326<\177\021d\276e>\277\276\230Ld>\340\021~?\355\225\002@\007\017\310?r\316\370>\351\375_?\213\311\242>\235\035\016\276\305\275)\277B\'\330\276\t\234\221\276N\000\216\277\320\n\365\276X\034\215\277`\'S\277\370\n\251\277\037+\266\277\267\332\027\277\367`\243\277j\020\211\276bp\364\276\202\235\265\276\340\376-\277\020!7\277\305\366\216\277\035\367Y\277\207\273$\277\2002h\274X\315\215?\2029\347?d\3428?\231\"\267>\357\243\342>J\270\326?\\6\277?\354\323\221?^\204y?\373\2320?\207X\206>7}q?j:\270?\312\034\210?9\243\312>P\'x\274\305\207\220\276`\301\032?\274\021\374>Sw\247>\252\305<>;\330#?\261\362\001?\232\375k?7\2541?(\001j>\370;\215>\022[\035?\366\2566?\356\3730?\321\333h?\010\007\336>\366$f\277\317\305\315\276\336 d\276W6j?A\321\233?\037i\255?8\026\353>,\211\017>TO6>Xo\242=\\XS?\301\204\277>\311\372\027\276L\357\257\275\274\214\327\276\314\204\236\276\226<U\276\302\216\000?\030?\240>ac\220\276\240\312G<\016*i\275\t{ >\036&\377>\342\267o?\330Ww>a\316\203>=\352\030\277\371X\023\277\024\001\240\277\220&\002\300\351\022\376\277\217\"a\277y\302\315>D\363\031?\024\345\342>\270\237\230>\212\340\024>8b\000?\356j\270?u\333\201?\361\372\327>@u\317<B\227\017=\350 \230={D\014>\246<\206\277\200G\000\276\030\344\r>\366%\323\276\340\3010=\233\027\230\276P\213\306<,Y\336>\256\255\372>\033h\253>\246R\351>\005\200\331\276MTm\276DBB=\007\275\213>\315~\246>o7\265?\252\262u?\030\306\202=\024#\227?\265W\220?\030\305\256?^S\320?\212M\370>\177\0134?\300De>)\032\004\276\244\263Q\276\'0\352>\276\264\260?L\255\245?\360\276\345?7\362\361?\266\340\026@\013J\206?\310\334\330?(\215\275?<\031\373?z\361\330?n\3640?\014U\317=\325\013\305>,\210\323>]4\010\277\211^\031\276\342\342\216?x\215\242?\365M\251?\204/C?H\2544?\014\365#?H\303\266?t.C?\025m\235\277\216\001\177\277\032\352\221\277\206\361\206\277\304\276\245\276\252k\026\277\215\021(\277G\027\205\277\r\357\207?_\277\221?c\346\232?\220\023\304>\210\347\210>\\\030q\276\263\355\207\275\017;7\276\330J;>\000t\320\276\260Xo?\362\'\254>\2643\376>@-\271\274ec}>v\314?>\245\344\220>j\236\353>\334\236?=\224)\357>\302_m>\340\225\231=<#\026?(\336p>G\353T?\252\0272?\340\314\360<b\305\226\276\344\373\311=\251\360:>\3572\320\276E\354\234\276\314\231<?T\352R>3\024\315>^\313V?`\333\251=\034\020\237>2~?\276r\302k\277\353\035G\277T2x\277\331\325\247\276\262K\231>\242\313\357>\240\005\361>\352p(?E\253U?\364k1>P2\030?R\315\235>\341\r6\276(\020m\277(\263\202\277R\371\004\300\004c\377\277\370f\365\277\234r-\300\251\2611\300\240\005\"\300\263\014\223\277\261\177$\277&\335\352>\342\247\226\275\242O4\277\271\326\200>C\372\371\276\312\t\004\276\256t\211>\200\316\237>\226\205t=\363;Y\276\254\303E\277\200\244:\275\275\017V>p3\n\277\356y0\277\020lz\276\214\307\364\276\031_\317\276\236\260\003?\336<:?i0\246>\272\027\327=\377\370\030?SS ?d\301s?\341\3468?\353\325]\276\225\353%\277h\304\253\276\274T\262\275\257^Q?~\242\177?\000`\257\276\223\300\014\276SM9\277\024\301\034\277\360\222,=N\335\247>\242m\345>c\034?>\210Z\025\276.\316\301>\341\361\"?L\3346? \3413=j\034\217\276\201\304\236\276{b\376\276S\361\325\276PF\273\276f\246H?bM\324>\235p\301>\247|\255?\350\262\211?C\232[?\346SC?\230\260\243?9:!?\260\341f?\210A-?\230V\002\276\030\214\374>\322\220*>w\026\367\276CUh\276*\3310\277\000^\257\273\201\203\340\275\2542\341=\212\266\360>\006\"\265>&p2\277kR\342\277\272%\371?\321`\t@\214d\024@D\305\322?&\370\306?f\\\342?\224\262\007?\310\330\312=\002\277\253>\200\254-<\275s\202>\022\240|?\254\2150?\3402\027\275-\334\233>\244o\t?4\354\264=\306g^\277\216U\245\277\2553\301\277(\370\315\277^\260r\277\023$\r\300\350[\035\300\233cY\277lJ&\277\021y\222\277\203\234\016\277p\274\373\275\340\232\366\276\n(\331\275\333Y\262\276\316c$\277H\267\247=\336J\211?\251{\212?\332e\356?t\014\343?\344v\027@\233w\266?V\372i?\240\365\324\274\026\341u\276\206\247\331\276B\320D\277\333?\303\277N\362\037\277n\353$\276\340\301\220?p\344\213=\3338\"?A)\366>\017\317\315\276`\037+\274\223\336n\277\013\\\362\276\220R\313\275\376S\215\275\016|\002\276nh\342\276\363\221h\276\240-\275\276b\250\226\277\024Co\277\200\025\021\276\020\3770\277\343\035\337\276:\005\254\277\320\351\005\300\n\256\231\277\327\245\232\277:\256m\276\322\r1?\274\333\004\276c\324\033\277\277!J\277\300?\t<\272\315f\275C{h\277\356\"m\277\270\375\265\277R\237\352\277\225_\274\277\275y\340\277N8\025\300^\003\250\277\334Y\336\277\250\245\242\276\354E\033\277\312l\202\277\306\217\216\277\257\221-\277\242}\027\276\216\no?\300\r9\275\333\223\210\2761Q\014\277\230 \316\277\034\025\005\300\007\356\003\3002\021=\277\267-H\277\223!\336\277\344P\202>M\271a\276\323W\001>\262\354i\276\202K\256=\366\335\242=b\327i\277\017\'J\277\321\305\350\276\346b\314>6\202\301>\257\271r\277\325dN\277\032\247n\2762E}\277\320\271\202\277j0\310\277\234\032P>X{d\275\347~]\277\3201\261\275\035n\225?dv\220?\017i\026?G\204\253?\313P\307?h\005\222?j\355\232?\352\303b?\324\244\204>\264c\345\275\3758\262\276\316\211\025\276y\316\014?\235\"H?v\222\256\276\372\202\323>\034\262\222?\234\245\226?\360\205(>\200\230\225>\222b8\275\315=\321\276x\2217\277\032\325o>Dh\250\275\325\r\026\277\306H\027\277\0140t\277\370\226-\277\200-\030\277\360I\360<\365\000$\277@\222.\277\336Z\377\276[\251\236\277O\343\341\277T\023\000\300q\230;\300&\"u\300\207\020\003\300+\004\013\277 9V<z\233\277<\362\311\202=,\353\236\277\273\206\264\277\240\342\303\274\347u\345\276\036~o?\036\235,?\202\210^>\322\216&\277\"\212\213\277Z\301\317\277X:\202\277`\025\234\277\016\177k\276\344\3536\2770SZ\277\243\307\035\277\260\032\200\275\360v\222>\004\213\262>S2\003?\356\267F> F;\276\030\321W\276\264\016\035=\250\374\324?\354b\226?\001 y?r\027\234?2\026\311?\371Jq?\"\333\306>c9\203?d\250\302?\374S(?\352\014\321?\363^B?]\271\331>/nc>+]\234?\200B\014@\206?D?\335m$?\276\341\213?\254Y!?\200\367\023\276Y\"\000?\246\304&\276d\325\206\276\247\342\001\276fkA\277h\221\256\276h\251\030\277\025\250H\277\230`\030\277>d\351>\372Uw\276\213\264:?\370P\352?\303\233y?\334\357\000?\252T{\276t\021\260\276\346\007\201\277\331\314\013\277\246\361j>J\252&?\303\2553?)\177\245>\270\214\204?\037\002\r?\251\331\'?\2171\346>\300\351m\277~5\230\277\020\252\037\277J\262\274>D\350\337>\247H\030?f1\033>0\307\261>\302MD?\326D{?|_\220?8n\360>=T\037?\330\267\024\276\301\315%\276KQ\247\277\225>\'\300IdJ\3004\3763\300\\PU\300\317\274B\300\350\025c\300+\250g\300\001Ep\300\214\374\202>d\3636?\022\026\027>\247\351\021?\311\024\017?\000\347\013;]\356y?7\017\003?\033X\032?\366lP?\331\303\310?\027V\207?f\262\232>\030`:?uI`>\267\266\342\275\252o\300\276\220]^\277{\031~\277\240+\307\277mH\030\300\331fF\300[\202\000\300\230\010\227\277\344\312\254?\n\215\024?RW\207?H0\322?\313\325\307?\235\360\256?\324\320\227?8D\202?T\325k>\037\360;?~\242\266?\304Q\305?X/\235?\020\270\350?\032w\227?\000\215\231?\270|9?0\357\233=<\370\177>/\177\277?\213\330\221?\262\277=?i\305\250?Z\211\200>\300,\332?\302\314!@L\344\272?T\"\014?o\202:?\3711\316>\374J\214?\273\346\260?\3501\301>\264\343`\277_\376E\277*\3158>:\017\022?\234\2370>@:\266<\311\361\017\277*>\022\277(\362\236\277<2\342\277t\020\255\277\216\271\363\277B;\026\300\250\022\241\277\266\342\214\277\000G @\327\211\205?\260o\037\275O\211e?\341\302\037?\370\216\020\277\334\340\201\276\021\010\264>\222\375\271\276(2,\277l\332\316\276\2548\214\277\331\264!\277\202N\350\276\350\323T=$\306\r\277\267{R\277xH\241\277\372\267\202\276\330L@>\357\222\322=\036bi>\006v}>\'\313,\277\261\227\200\277A\3043\277v\006/?\252\371\010?\364l\022>\036$\226>\350ah?`\247\276?\205\211(@Cz\271?\252\177\224>\264\023$?\202\033>?\\;\254?\312$\"?\306\021y?\322\303N?\221\202@?\332\331\227>\340dS<\020\005q\277\301cj\277J\360j\277M\217Z\277\270\326\023\275q\2416\277JHa\276\310]\000?\345\224\355>B\276\264>\221\262P?\r&\222?\363\316\033?\377nm>\300S\276\277\0267f\277\230A\310\277L\357\033\300\216\3021\300\021X\007\300\345\363\025\300\335\303\024\300h\210\240\277u\367\276\277\370\016\245\277n\354\205\277\361\tA\277\030\362M\277\346\232\247?tlW?\234k\304?\333\007\264?)\305A?\2402\200<\231A\034>\370\251\311=u\t6?j\367\345>\346X8\276\217\361\016?\242pc?\204\362P?\376\247\242>\325\340\205?-F\252?a\\\260?\r9E?|\254\007?\220T\323\275\331b\316\276\000\032\270\273\210\037\237>ZpG?X_T?\373-\271?@\256j?\nP\262?N\223H?V\267\026?\304\223\022\277h\007\274=\271:\n\277~U\267\276?\0241?\240@\033\274WmJ\276\212U*>4\332\217\276\320\217Z\277,+\001\277\271\331\275\276\030\353\334\276\352\237V>\032\360\376\275\247\355\273>\314\344l=EM\222\276\372P>\277\352\031s\276\301\037W\277\024\253\234\277\277\260\240\277\256\252\263\277\"\225g\277\346B\235\277\330\211\307\277\316\301\266\277\354\331\312\277\325\364\315\277#\303/\277\226x\354\276\273\t\205\276\372\247C\277\021[\255\277\213_\215\277\036Q\351\276\274\350F>\027\314t?\362N\246?\236\032\351>\310\227\255\275<\337\003\277\032\031l\2776\365\237\276t\027\026\277\20016>K\260\200>^^\270>P\201\021=,\262H>b\305\n\2758\231\000?h\213\346=r\371i=X\250\355\276#\337\004\277q\n\t\277\\!C\2776\220\177>/H\355\276\371N\'\277m\361\217\277\344\303\363\277b;\322\277\200\264\376<f\325\235\2761\362\003?\302\2665?\354\370\261\275T\237\361\275\030\031V\276\020\375-=\354O\236=\2655\001?(\237\234?\206\335F?(\334\267?\234kq?:*\335>|bM?Z\034\004\277\367\242\214\277\344\\R\277@\2221<O\313\300\2766$\236\277sr\201\277\014b\353\277N\031F?\350\031\365>&\371\240>}*\325>x\322\356\274B\256G=\367M\204>(\361\312<\332&\305>\2363\351?\357\303T?$a\211?\350\366\225\275\014\2406\276\003\252\t\276\265os\277\346\t\322\277\350m\004\300\r\347\336\277\346\306\225\277a\325\214\277d\355\351\275\344\027\023?\346Mx>\275*,?\214\027\232?V\360\315?\224}H?\034\203B?P\r\242? \341\357>\310l\314>\270X\004?\320X\237?\356\243\244?\200<\371?\027O\007@$\003!@\240\327&@\247\276/@\264\030E@\264E0@\r<%@\301!\022@\363.k?\322\351>?\215g\212?\222\267\244?N]\262\277\374\206:\277E\357\223\277(\273\350>!\037K?le\017?\301\254{?\337V\204?\272\020\201?\221\223\236?\256\367x?\n\257\216?H\312\244=n\305\260\275k\246:\277\261\367\263\276,\327\020>\276p\250>Tf7>\250\310\336>\013\231\210>\204~\025>!\262\206\277\"0\240\276\207\'z\277\003h\'\277\006^\322\276\232\033\256\276v\365\355\275\342x\323\276\010\217T\2774\375\237\277y\270\031\300\272s6\300o\201A\300\242\n\336\277x\320\216\277\230\313\356\276\336\314\035\276&\031\240==\031\356>i\234\025?k\353c?\236\356\271?\002e-?5b\032>4\377\224?\200\265\262?\225#\262\277\350\320U\276\205\3337\277\340 \221\276\303FA>\004\314\356=\224\357\'\276\300\322\273\273\223\033k>C\372\332\275H\201i?\350\322\004\276\310\265\034\276`\362\366>\242\207\022>;\305/\277\341\2649\277\202\326v\277\354\362S\276bg\227=\337\217\014?P\010#?\240\0361?F\264->\305\2414\277\302:\237>\335e\227\276\275\316\n\276`IK>\000\205J\273|\302\r:\320\370\355\276(]\362\276\342\313`\2769\226\222\276\007?\022\277p\246\032>\310\217\343<nK\245>q\336\231\276`\341\024?\263\301\370>\260j:?\2107t=A\032&\277P\265<>\322.\224\276oz\r?\024\035/\300\362\3762\277\225Y|\277[A\010\277\250\2205?\214\222\023\276(YK\275\312\344+\277\204\004\025>\242\256N?\234\3221>\003\272H>Dv.=\321+\217\276X5\240\277\357\016J\277(\242\003\277\324s\254\275\020Vu\276\322f*\277\240[\206\277\251\265\215\277\3037\236\277\010\331\332\275h\002-@\337\025\340?\346\216\315>\220\347\351>\t\333\353>V`\032\276\200\272\340\276\334\270\020\277\\~\333\277\365\314\314\277\2001\032\276Ry\251\276P+=>\020\"\244>\344\007\231\275\0265\310\276\276y\330\276\357\275\312\276\255\337\213>\221{\243>D\206E?yNM?un\347\276\366\3035\277\002qJ?\245\373\275?\034]\255?\230\337q?\360\010\243<\000^\347=\020\002\034\274y\n<?\364\276\037?\376\030\021?\344\213\023\276\241\273P\277\177\302\025\277\345IQ\277\024v\317\277\264\257\237\277R\306\253\277D0+>G>}>\360n/>\312\224Z\277Y<\244>2\371\304>\037\321\204\27700\367\276\030.\017\2770\313\307<$\321\251\275\261\235\342>\340\363\236\276D\312\216\277&\032\214\277\244\245n\276\371\202\202\277\312\222\205\277\240\373\271\277\210\237\311=\300s\367=\351\347\262>\264oW?wk\233?\001\027\005@\352c\377?\030\332\355?BC\017@\240|\230?6\3643?vEh?\265\331\252\277\312\273 \277\002\215\204>\333\346_>\310\325\354\276\000\330\262\275\350\251\005\277\033\212\204>\220\273\370\274F\216\230>\006\324e>\270\353\204?\302\212\236?\000\215\220\274G\370\016?:\306\343>\231\300A?\306\n\250\276\252\266!\277\274\307\337=\n{\210?P\250,\275\311lm\276p\375\276>\032\367\275\2772\031\346\277\320t\377\277\324\251\353\277k\322\306\277\252\325\020\300\243\202\274\277Zq$\300P]\014\300J\226\206\277r?\263\277\215\357\302\277\200h\353\275\266\347\036\275\321F\230>~\305\273>\374mW\277\301\201N\277\210l\332\277\240Za\276\242\335\257\276\360\363 ?\241\254Q\277\312\340\351\276\362t\353>\262\331\232>\302\210\031\277{a\365\276\206\321b\277\215\2535\277.\314\033\277\316\304\224\2770,\272\275`\320\257\276]z\036\277K\201\223\276\"\"\231\276\032\332\273\275H\310\002>\305.\203?\303\224\376>@\236\213?^\247\032?\266\366\242>\030\240\003?\350\210K\276\260\254m\277\311]\267\276\2744\206\275\342\235\036?@3\236?\334Y\366>\270dl\277\272N\324\277\343\304\236\2779\202\204\277{\314\267\277\247F\277\276\363x\231\277\241d\206\277\325L\277\276\362\"#\276\316\3519\276X\251\220\277\375\000\027\300\036!\337\277\340&\001\300h\226\247\277g\245\371\276~\266[\277\212\024o\277\220\244_=`\212\275>&}8\276\372\252`\277/EK\277]Yq\277\311\346F\277\274\304\027\277\214\230\203\277Y\364\236\277v\216\307\277\237\3710\277vdc\276\366Q\341\276\0207\305=\225\212\032?\202@\026?\363n\024?^\341\261>\005\017+?0`\000?\2638\233?\322\315*?\352\005\230>\024\376)\277\326\362\263\277W\337\224\277*\020\312\277k`\032\277\235\016\005\277\324{\025\276mj\366=8\213\344>\317\371\213?\272\350\226?\324\345\010>\000\303c>\2440\300\276?Q\272\276\311\317\337\276%\200\237\277\376\251\001\277\013\2702\277\036\231\245\277X\274\234\276\355\353\016\277\246|\222\2768\214\311\2754\247\372>\264/\342\276q\342\204\277&;9\277\332d\204\277\235\347\207\277\270\267\232\275\\L\252>\304\373!?\326\240\203?\222\367\330\276\324E#\277\346\027C\277e{\210\277\3407~\277I:n\277T\266(\277B\307\231\276\210\r\227?\370l\307>,\324\304>l\266\212?\226\320B?x\237\260?o\r\315?\204\202\243\277\2143\267\277\230g\366\277x\262\370\277\334D\014\300\373g\013\300\027\267\365\277\222\244C\277\312`\254\276\200JO;\252\323\262>\274[\216\275r~\215?\3423\324>\244\240\022?\300j\351=vK\300=T\032\304\276vJ\211\277\374\213G>\207K\325\276\222\226\010\277#?\214\277\336\3646\277\303i\354>\020&\037\277\317\303\216\277\204\031\321\277\366\355\330\277\027\273\333\277o\034\220\277\331\303\242\277\324b\320\277\263\340\255\277\201\343\316\277\333!\023\300Q\3449\277\r\256u\277\222\236<\277U!\211\277\010\305\352\276\242\360\233\277\334\370\002\276\032\237\352\276N\216\244\277\252\031\333\277\325\016\340\277p\273/\300\266\306\201?\306>\240>\312\264:?\271\375\207?\"\274\230>\270}\021=\205M\364>\242 f>\377\210\314>r\353\024\276NCA>H\231<?\3511x?\200\374\023?\310(\002>\316o\034?H*+?na\260>\260\316\215\276\251H\250>\324\240\203>\334\340\030?\361z\240?h$7?\245r5?\350mw?\362\370\221?.\366\021?\005\0355? \204\340>\206\326\217?\333\343\330>\216z\307\276\217[\000>H\263\245\274\r\037\366>\334\236\265>\237\344\037>\250J\031>\\\277\357\275\321\376`>=\032\255\276\027{\002\277\354\326\025\276\243L\226\276\373\227\324>\340H\237\273\004\260\202\277\005Q\230>\332\225\325>\017\366\020>\341\027T\276ar\331\276@\'\003=S\022\345>\000\305\005>\013M\014>\025\364a>\010aa\2761!\212\276\314B\316\275\210\235}?\302\341\374>T\252;>\020tY<Ft\371<\267\322\246>\200\366}=\324C\203>\217\327c?JO\365>\261\232f?\250#\365?\013if?\036\206\235?u&\207?\345\300\214?!\271|?\n\224;?\373\346\223?\004SK\276\250\205:\277J\010v\277]\006\334\277\224M\237\277q\032\220\277!\026\003\300\275\307\310\277\260:\357\277.\020\204\277\032T<\277t\272\321>\000b{\273\303\243\003\277T\372;>\261\224\010?\374\310\007>oe\213>\200\017\003\277\272I\030\277\020\363\257\277\247\215\206\276\303M\344\276\r\022\230\277M\373R\277T\275\212\276HN\350\274\350y\002\277+\362:\277>\255^\277d\033\003\276\000\007\026?\200\013\276<}\n/?\030\243K\275DJ\023\276\024\004\200\276\000\026\243>b\322\331\276\226,\313\277\2541\355>\230}S=\215\312\035\277,\325l\277\2303\030>\312\215(\276\332\345\213\275 \202\237\276p\303^\277\326\217\272\277\000\022\027\277\374G\222\276\220^\311=\312k\232?\026\342@?P\346\272?d\326\025>\022>\361=\310\200_?\204y\004@\023\251\230?\370\273\004?\336\001\014?&\0365?\317\353\021\300\227\322\372\2776\210<\300\323 1\300up^\300|\307W\300\316\227\031\300Yr\034\300\\\312\206\2778\357l\277\230\025\221\275\366\352X\276\354j\320\275\200\342\036:\213\210>?\320G\223?k\243\216?\311f\"@\205\014`@%\200D@\246\2402@V\261\002@\367\346\304?V\371\241?.=\376?\237\352\216?|c\310?\326\277f?\022g4?)lY?\300\rn?\032\234`?{\232@?\340\252t?D\207\027\276x3\214\274\303\3765\274B-\037\276a\021\022\277V\3372\276\230S\272\274\331-\014?\374v\353>\006W\341\276/\251h\276\022\324\240\275R\314\'>\271\016m>\035\207\306>\014\330E\277\2762\242\276\271\300\"\277\230\242\003\277Dh\343\276\231\356\363\2768X&\277AU\013\277\225\304\013\276PE7\2769\370\267=\375\354\027>:/\345=\002\234\325>$3\014\277~\217J\277\026\r\217\277(\307\201\2774\216\210\277|H\244\277\243\373\273\277\352\363@\277\\\027\254>\304\217\276>p\203h\275\272J2?g\355\022>\013\317\344>\024`\255>\212\245<>R\355\274\276<-\215>\374\213d?\362\340\260?\020s\236?9\3774?\246\204v>\326C&\2770\006\230\277\322\302\244\277\274.\246\277r\016\013\277\250{@\277N\260\231\277\311\375\210\277tW\333\277wB\310\277\000\215\031;\341\333\243\274r\345\313=\252\023\217\276(\223\034=\216F>=\212\023\361>\276\311d>\204\311U\276\324\372\013\276\366)\225\276PV\034\276\026t&?\010\345}?WT\213?\274\363\264>P\307\341>\275\356/?j\r\254>\024\204c?\034|\266?\002c\225?\326\024\277?\r\2455?\036\"\235?\341\243\231?\326\310\217?\340\337y\276F [\277\034<1\277\216\365u>H\213k=@\222\251>LM\203?\364\2400?LB\027?[i\026\277\346D\037\277n\300\301\276+\351\221>\3751\225\276Gm1\277H\224\362>\261\350\001?p\225\300=Q\020z?sV\'?\270\3629\276\324\035\335\274QSR\277\266&B\277\273\212\300\277V\236m\2770)B\277n\020\365\276\322\303\343\276n)h\277\272\215\223\277\3111\244\277dD[\277|\035\223\277\236Q\244\277\356\251G\277=w:\277n\3348\276\254\312\207>\367C ?\000\034>>\020\004W<Z\')\277\324\210\217>YiU?\320\351\221>\017R\210?\206Ev?\254o\202?.\303\226??SS?\356\252g?\274u\217?4\002\236>I\323\"\277\021\035V\277\235\2340\277\361aH\277\220wb\277\265\016@\277\21217\277\032N\316\276\242\373\177\277@\030\272\276HD\273>\177O\254>\245[\253>;g\217?\335\260\206?(H\276\276\002\t4?Y\307\"?nNr?\243G$?\n}~?\346\224U>\271\263\252=\313P\024?\377\360\253?\236\200\243?\030\360\372?he\305?\270W\253?\220>U?(6\305?\373\215p?\267\310 ?\017\031\006>\334\031\252\274+\022\240\276\001\376d?\027\353\303>D\235\"?p@\250\277K\204\234\277\0218k\277<\346\010\276\304\372\323>\3108\021>e\330.>\350\370\303=BD|\277\354\344\316>\211M\357\276\240\230\210\275\036\224K?Tk(?\352\345-?\2132L?L\265\253?v\231\351>\254\254K?7\347\030?\340\272\'?\030&\234=\243\205\210\276\336<\204>\202\030\217\276\260\263n<\251\341Y?\240-\027?H\234\220?\371\336\203?\270\177.>\240~\307;4\325\351>\212\271U?\3344\367\275\\\203\302<\352\366\276>\320F\\=\331)l>\020F\020<:M\016?z\245\221\276\260\373\224\277~w\226\277\"\324\315\277\240F\350\277a\252\304\277%\225@\277\314}\202\277\236K\273\276V\\6>-c\006\277&Z\013?7l\315?\231\345\317?\340F\206=F\301\314>\342\337\244>\356\245\320>\001\235\376\276<\354\020\277\216$0\277\251Ju\277 \275\355\277\244\\\003\300\0328&\300\214\327\222\277\036hg\277\021\337\030\277\323,f\277\032k\202\277pef\277\304%\317=iZ\232>Ak\300>vV\223?\312\"K?>\026x?\370~1?Xhm?`I\351=PD\031?\374\024\363>R\017Y\276\025\313!\276E\343J\277\256\240w\277\211\251\001\300\223]\326\277(\307\337\277Q\010\252\2778V\305\277\007\274\244\277\312\374\033\277\210s\331\277\247\315K\277N\363\213\277\030~\205\277le\006\277\032<\217\276r\276[>\260B.\274\332:*\277\230\261\254=H\336\324\276\322\220q\276J\221R\277\022\240\262\276\376\214@\276\3267\326>Q\327\215?\271n\006@O\"\345?\311BL?N]\241>\277\201~>WB\304\276\242tn\277t\0000\277\002s\264\276\363\322,\300^]k\277\\\333\300\276A\214\331>\371q]?C\237\272?\223\345\002?\244F\263>\263\367\245?\261\335\217?:N`?P?\000\275\023\016a>x\346\255>\336\233?\276j\305\031>\340}\253\276\272\'\242\276\264a\301>)\231L\277pu*\277\000Ry<\247\204\014?\320?I?\235\370C\277\240\327\211<*\322w\277d\205\274\277\344\370\226\277B\366\r\277\276L\031\277\200\362\250\274lv\232>\276\213\227\275\2668\204\276\277{\362\276\000h\310\276\226\\\356\276\2705\212\277\226\007\307\277\210\344\217\277 E\241\275\362{\243\276\364\324@\277\315\1771\277\367(r\277.\321;\277({\365\276\273\250\214\276l\003\254?\\R\315?\211u\310?J\037\211?.\275\246>z\\<>d\255J=unC>\330\010\314\276P\'\250=v\300\261>\212\242\225\276\0269T?\260A_?G\307`?\252\016\312>\257\336U> \211\217>\342Y\026?\220\220\272=<\021\007>J\267 \276\214\304\027?MHR\277\020\260\302\277\331>\004\300~\022\344\277H\031\263\277\024\322\201\277\005\355\014\277\004$\">\202\017\242\275\266\"\024=\300w\207\276:\032\242\275\250r&\276F2%\276\323{\023>tN_\276(\024\276\276\344\245,>\321\215\266\276\000$\273\271%\002%\277\240\t\213\274$$\006?:~\344\276\223\036\277\275B\235>?mUy?h-P?\002\243\200>\374\023\341>@\3246?\200\023\027\274\250?\261>y`\022?\017[N?8{\235\275\224\253\233\276\352\r\032?\021\314\371>\000\0305\275\262\354~\276e7I\277\365I&\277\220\276\360\274\246\263\370\276\177$8\277\255\000\232\277\311\000\311\277\r\213x\277\353\211g\277^\305\300\276\0008!9\364\035\335\275\364\003\020\276\376\322\225\275f<<>\177\020\216\276\020\357\311\274\373\363/?K\200\260>\216<\033\276\031\327W?\301ux>\312i\340\275_\032Y?\"\"\332>;X7?\305E\031?\242\347\005?\207\272\254?0\t\375?\270\363\271?\006}X\277,\240\237\2777f\254\277X\375_\277\370x\251\277Y}\031?\360\231\244=\221T\312>\234\313\230>\370\221D\276\222\004\032\277z\204\327\276\002\200\"\276\364\330R>:\2340?\270M\345\275\256r\256\276\210z\276\2762\030x\277\322\023y\276\347\265\270\276\252\231\335\276\265~_\277\260nd\277\263\326_> \026\357\273\254\223\303>r\365\306>\333\277\027?\304\233\237>\372w\305>\335\226\275>u\343o?\200\2349\274\356\270L>\306/\245\276$:\223\277\206\372\301\277\357\021(\277,\212\203\275P\2118>\374=\004\277TQQ>9\r\305>Xn\257\276U\237\201>\031\332\204?\276\307\244?|\017g?\260\363\352?Lb\271?H\215\216?P\246\333?\016d\005@\023\020\257?;\326\373?\305K\333?\216.\236?m\207\203?z\225\332>l\232\265\275f*;>\365\002\374\276\310;\264\276\342,\026?\030a\306\275`\302l>\267m\261?\326\304\232?\376\360D?\200\200G\274\306\262\003\2778\016\272\276Z\322\252\275\206\247\264\276\022\267\241\276\212\350+\277\334\266\212\277\300\316\001\277\272\367\016\277!\247%\277P\244\257\277\034_\241\277~\372\227\276AF>\277o\321E\277\250\201/\277\210\300\022\277\000\002S\2739\210\013\277c.\363\276\227$G?t\331\204>\034\2774\276\310\2360\276\261>\302\276\276\352!?\001 p\277\'\004\334\276;\033\207\276\266\270\212\276\334@n\275\3549\217\277\240\376\356\277\221\010\323\277\003T\363\2773\225\324\277\304\312\021\300\335\207\017\300\'\253\004\300\232t\033\300{q\310\277\276\025\r\300@\223d\2770\\u\277n\324\247\276\020N\362\274\205\223\323>w\335\221>\207\300\202\277<\350\313=?@_?\352\022\201>\270\231\253>d!^=\004V\276=\276m\377\276W\302\020\276\342\215\377=d\371\273>\232Yb\276\272\354\213>X\026\373>r\221\344>\245\320\354\276\316D\035?)A\250? \243H>ne\237\276t\312D?p\243\223?Z\n\021?\270}A>\000\r\362<\336\250\220>\340\232]\274\225R;?\001\nI?;\272\004?d\212\223>h\362\341\276\201J??\017s\r?\300}\325\273\367p#\276U\255\371>\240\225\237=r%\001?.b\"?\370\245\n\276n(/\277B\270\255\277\267\004\251\277\374\236\204\277\255\263\265\277f\363\272\276\335\227\267>\302\335\320>R\340A\276\260\327\342\276\002\032\205\277\370\351\035\276\223\235\371>\202\243\262\276t\357Z\277X\227\245>L\267\335>\230\037\324\275\243[\243\277T-\030\277R\215\306\277F\324\320\277\320\003\247\277\001o\234\277:j\326\276\353\331\n\276&\023\312?l\206x?\350\335@?\316\223\231?\200kg?\352\030\003@z\344\252>`\261\344=\240)L\277\307\326V\277\200\333\300\275\326\273\263>\354\241\022?k\250\220\276ks\246\277\\\"y\277\204dH\276 1\211\276\335\271\226>\256\323\032\276OR\265\276\231\345\230\276\336\214D\277\232wy\276[T\225\276\374,O=\351$\021\277\342\020\360\276\254\\=\277\256\0064\276t\2518?waf>}\003b\277L$a\277\371Z\207\277\311\350f\277LO\201\276\"}\221=z\362\232>h\201w\276~\3662\277\301F\r\277 \306\025\275TK\270>\002r<?\016\321-?l\337b?\342\260N?\214\332\205?\244.\213=\200(9\277\365y\303\277^\240_\277t\020\371>\002\257\352?\370O\353=f\351\000?1\270\024?\002\005\312>vf\370>\3004\254?\344M<?\222{}?<\006\242\276,u\352=\374=\203\276K3(?3h\207?^\274\266>n\371J?f.\255?\374\013\261?\234\253\320?&\300\242?\366UV?\000\276\257\273(\327\300\275\200\236\262?\337\177\344\277\345\331\034\300{C\215\277\360e\302\276\346\365\202\277 \230\254\277n\032\016\300\024\236\004\300\213\371\230\277|3\222\277\007w\234\277Z\330\306\276\206\344\360\275o7\177\277\237\3718\277\033\207\375>\342_\026\277>-\210\2777\352\355\276L\276_\277\327#\257\276\260\311\034\277\322\350\335\277\312\331\304\277\303\t\376\276\250\036r\277\210\370\027\277\352>\035\276|\034\313\276,\255\271\277\341\220\314\277\024\177\225\277\322\247\247\276\030E\341=R\365D\275\022\000\027>\356\256`=\345R\023?(\231\022?LY\361>\334\\=\276\3359\025\277\026\367)\277F^l\276\264\t\004\277 H\344\275\334\225D?8E\257=l\215r>!\323\216>n\321P?\0134H?\233\3337?\372\016*?\323\010\365>\202\244\213?\246\257\222\276h\236,?\000\351\004?\314Y\220\276\032\264\376\27588\262\276\270\0019\277C\370\271>6\210\203>s\372\024?\314B\031?7\231\234>\257.\241\276^\372\357\275\0363\213>\320\345\200\276\024\273L\277\017\306V\277\327Z\202\277H N?\324\202\n\276\023}R\277\315\000x\277\'Tb\277b\234\252\277r\345\364\277\352C\r\300A\234\323\277\312$\364\277\020{\300=\342\031v\276.\016\310>\200^2=\022\325P\276\"\005\016\277\2469\251>\177\242\322>\361\234\252>\024\221>?\263\036\234>\304\305=\276\020;\374\276\370P\t\277@V\243<T\235[?\000Z\242?03C?Pa-=\206H\301\275\302\247\032>3\270\003>\323\014\310\276\324\376.>\177N\376>\325L\017>(\330\022\277\\\220I>\330\203;?\320v\201?q\241k?,\241N>D\235\206?_\010h?\014\023\006?P\330\256>\373\\\334?\245\361\233?\322$\\?i\221\274>D\355\221?.\000\226?\351m4?\364\033\036>\016\321\t?\024\325\205?\204\274\231>\245\321\207>\322\020\314>\357\243\274?`\004\317?\220\354\241?P\224\335?L\370d?@|p?\362\275\313\276x,\303\276\254\256i\276\306\210\237\277\373p\010?7\377\342>\204&\214>\010(\367\276&\266\310\277\376\341\317\277\204+\233\277\025[\017\277,9\005\277\037(\210>\301nl?\216r\261?N\341L?U\220%?n\255\232?\036\326<>\002\035\315\276\220\341\253\274\224\207h?<\014\235>=<\210=\312\001$\277\214\250\237\277ne\227\277\342\207M\277\227\207\255\277\354\305\373\2774\232\026\300\324\314\321\277\210\264\341\277\022G>\277\004\340\254\2760\031\020?xR\223?B\340\203?1\231\003@B\374\355?O\220\372?\000\227\251\275\246\350\257\275\241\000\014\276(\374#\277vEL?\240\004\"\275l\004\245\276E\004\316>\000\242\226\275\031\204\203?\342p\253\277\252\024\217\277\267T~\277\213\361!?Yv\320?n\311\236?\370\227\350?\236\"\331?\332\313\245>,RV?\032ay?\211L\206?\214\251\212\276\177\362\n\277\031\251N\277\241\204\014\277dz\267\276\372dF\277\204|\222\277<\227\266\277\302\344\273\277f)G\277\274\021\257\277+g\224\277\236V\\?\317\'\034?P\3147\276\246\261K\277\033\3605\277\n\265w\277P\345h\277\216\177\'\277\266\246\305\276T+S\276\330\005\330\276\366\305\363\276h\000\214\277b\301\210\277\024\276I\277E\304\032\277P\004l\275I\255@>\364\313\265?!\017\243?\020\301\t?\034\001E>\032\217\272=\034xi?\2028\225?\226s\360?dN\275>ZE{?\216\t\345>\210\212 ?\236y\257>\346\233\030?\034\370[>b~\213>\316\001\275>\223\235\314?\231T\327?\305\216\274?(5.?\226\373\347?\300\221V=&\006}>y`\305\277u\024\265\277\324\220\306\277\004\200\250\277l\274\205\277\204Aq\276\3245+\277:\274J\2779/\301\276~\345\357>0:\243\274\007\3233>Q\376p?\262@\246?{\356R?\205\202:?\350\030C\276\004=K=l\032\n<\244e\016\276\242#\322\275|T\250>\352C$?\274\020!?`Q\207=\273\252\036\277\210\242\007\276J\266\363>\001\2611?V3\237?\272\343\\>\016a\210\275U\377\217\277\230\223\336\277\242\353J\277\254kU\277p\000<\277\030\252\251\276\321\324\202\276i\2110\277\242\373\244>\316_\263\2760\326\222\274\233n\347<*\001\207<Uig>t\225E?9\005)?D5>>\002wP=\272\271\237\276\022\325\273\275\2404/\276s\365\312\276\202)\254\277\374@\002\276\274-E\277\2320?\277\207P\036\277 \264p\274]\r\373\275\262\366{\276\2550#>Ic\245\2761f\202?\300\027D\275\221y1>\003\335\261>\016\352\216?\270\223\023?\226\264\023?\375Qt?.(@?\365\312T?t\275\003>Q\200\214>M\225\177?\327\303Q?\340x\205?\262\340\366?=\256\365?\230v\255?\373\036\036?\262\344\277\276U\243\270\276\2300\315\276BWA\277\224\207\325\277\224}\220\277N\353R\276\340\324\001\275 \334k\277)\036\344\276\215\272J?\245S\370>\372\343\263?\266\205X?\n.\371?$\257%@p\321\010@^\220\\?Xh\203>\372$S\276,\203\376\276\275\262W\276\224u\000\276\325qH\276\333\024\014\277\021h6?im ?n\324\006?\274@\313?*J\273?H\352\253\275\037\345\241>-\000\251?\243\340\355?\323O\256?B\364\377>N^\217?\325%&?f8<>\331\364\023\277\016\035_\277\337\273\037\2779j\276>\266^\341\276\363\002\377\276\346t \276h\326\224<y\366\016?z\324\230?\246\334[?\246\n\212?\273}\275?\027\237\226?\000\017\262<\251\363\326\276^1\000\277l\265\034\277\322\253\036\277\270\204\200\277|1\221\275\211\264\337=\223\023\r\277\033),\276\36501\277\246\247\346\276\260\\h\275#\014\277\276,\240\224\277P(v\277\265x\262\276\3203\357\276\376T%\277\024MM\277m\004\023\277\351\366<\277V]\226\277\272\240j\277\036\332$\277\374|\261\276v\246\026>~\237\252>x\344\372\274\375\276\033>\374\374\203<\327\355j\276\340\276\361>z\274\270?\2066\232?\032\347\235?\373\226h?\0179\237?_\013+?(\334\266>\245\335\330\276\000\250\275\271o\274<>~\006\234>Q/x?\342/5?,e\335\276\357\237\026\276\200\337\210;\350G\216>\254c\000?\306\010\314>h\371\370\275@\266\225\276h\342\272\277\340G\037\300 U\027\300\376QB\300\217\311\350\277x{\332\277\337\3650\277\216\303\234\277\340tL\277\213<\006\277\3443^\277\300\212\201\277v\001Y\277U\333\026\277G\275\376>Z\335\006?\245\357\221?\244\371\222?\350\221\267?\233\331\263?m\'!?4\301G\276O\331\'\277X!\201>\255\024\254>b!\321>\372F\377=\024\033\'\277\230\363\244\277\332\250\215\277b\310\237\2764\364\276\277\300\025s\276sw\274\276\0004\377;\343m{\277\006\300\200\276\300+\235\276\022\303\250>\204\231D\277@U\316\277\\\352\204\277\231\214\301\277:\311\317\276\345\336\264\277+?\264\277nP\223\277\025\315\270\2779\236X\277K\323\021\277\010I\t\276\262`\274\2769\247\240\276\265\360g\276\246B1\277\354\337\325=\356\003\316?\223W\254?\312\317\252?\036\276\310?D\205\026@q\003\003@\0330\270?\260\227\273?>&\231?\300\217\300?6\255\242?p3\202>D\275]?R\322\266?\362\014\220\276\213_\032?\234\035\235?\350\223/?lmw?\2244\211?G\345-?\247\210\233>\034\035\227?v\275k?\246}\344>\024\340\307?\020k\254>^\341)\277_%\024\277\010\312\270=\315$/?\200\243|?\217\202\013?Q\225\311>\0372\022\276\377\266\025>$d\352<]\335.\277ni\322>\252\315>\276*\273\345>\270\'!?Q]\016?\230hL=d\035\374>x\"\026\277\224\225+>\014\365\231=vh]?\250uw?\026\300\267\276|\316\336>\300T\032\275m\302\212\276%\020[\277\032\235\302\277-\310\315\277\270\017p\276\302\265\254>\354.4?\310\343\317=\236\262\333>%P\241?\344\244\240?n\010\231?\340\026\\=\2010\t?\250\367\351\276\365\032\001\277\340\340\257\277D0\376\277%\367\365\277\026B\327?h\377\215?\026\266\251?\306\347\014@0\002E?\352\036\303>\212\267\242>0D\260\276\362B^\277q\2608\277`S\255\277\260\273F\275\3058\223?\034\332\342?\0140\205?h\234\320?\022X\323\276\312e\027?}\225\353>(\263\210>\252P\253>\010%<=\262\370\263\275t$\244=\252\r\223=\347\007\021?(\363_? \016\251?p-\232?\356H\322>M\032\035>V\213\365>8\254\365>\344\253\322>\3500\222>\261\324\245\276\003G\300\276\301\\\274\276\354\360\023\277t\223\247>\202\306\020\276\324C\351=\335\261\257\277X\260\300\276\371C,\277l\370[\277\347Tl\277t\312\247\277\35048>\251\325\310=\032\220\370=\372\265\036\276\010e\013?\306a\232>\374[3\276\017\301\027?x6\331=\341\345\"?\034\321M?\276\037\255?t\247\014?\205\306\221?x\242\n?:\001S?\214\'\027>\320\324M>\326W\030\275\237U~?\360\256\344>\001\362\010\277\2625-? B\263=\346\213M\276r#\007\276\013\237\323\276\257\020\346\276 \232\005\2778\371\005\277T\314S\276|c@?\264\371\213>\312#B>9\236\272=\300\351h;:\'\201\274]v\216>\023\317\224\277jat\277\030\343\253\277\302)\335\277\225J\203\277\355]\262\277@X\231\274E\357\221\276\332Q\254\276\006\244.>X\333o\277`\2331\276\016\367]\276nA\303>b\372\250\277\217\032\316\277\361\276\003\300ac\252\277\022\350\237\277\264\331\343\277<B{\277z\"\204\276U\226\260\277\365:\214\277\006s0\277\213\307\307\276\330,\"?F\373\006\276\024\202\271>\216\305\240\276\030\001\302\276`f\352;\367\005\261?\330\263e?`\331z?\005\351\363>\036s\t\276\340\205}\277Pu\324\277pb\365\276\336\030\326\275b\323\033\2772\003O\277m\315\314\276\361w\205\276\177\341\354\275\024\232\224\276\300z\337\276Kj\221\277|\030\204\277\t3J\277\010q\311=\225\2279\277\324\255\207\277B\231\306\276>\251[?<\t#?\251_\323\276\300k\372?\242\263\023@\302\035}?(\252\r?nwK\277\260\302\310\277\376=\206\277\370\2530\277\360\237R\276\3319s\276\006\003\272\276\304\3248\276\340<~\276p\247\250\276f\023\226\276\360\372@=\300\361P\277\214Y\235\276\262\243I\277AK\032\277\310X\203\277H\212\001\276\"d\255\277\214\016\254>\361c \276\340\377\367\275\222_\034\277e\202C\277^\271\245>\200p\230\275\n=2\277p\337\222\277\365\004\274\277\206\240\227\277\366F\003\277\224#\232\277\016\244\265>\363\372P?4\0007?x\007\243?\340[\350?\022\023\204?\3652Y?\0370\206?=\021\371>\300\350\005?>2\307>\310\250\201?|\\\267>y\353>>=\361@\276@\240\377\276\364\312??\374\2006?\202\004\334>\366\222\244>\020X,\276*\032|\277\377ZH\277\237zp\277$\253\227\276b\366\241\276W\242\202\277\244\366\261\2776\344\236\277`\240m\275Z\336\017\277d\350N\276\262g\031\277\024\300_\277\036\214\237\277\373e\307\2773\267\032\277&\036\344\276_\265\360\276\207s8\277{7\002\277\261\217\232>\024\345\203=\030\272\303>\314\236\244\276\021\032\321\275+V\026?\016t\375?)y\006@p.\274?\374\020\217?\2146\024\276z\017\010?/\021&?k\203\000?\242{\000?\010\217\030\275Dx8?\334\022\262?\223\244\034?\261h\266\277\334\332z\277\230\030\305\276\313\023K\277d\236\200\277\344\300\356>~\212\226?\002\3657?\344\221\n\277\034\330\372\276\254\247C\275*\t\226\275<~\000\277@\002\377<\021\215}>\316\271\377\276\303\317\214\2778\r\261\2768\306\227\276\315\316<\277*\320Y\276\177A\212\277\030_\234\276\346\250\243>\013\262\362>\351][?T\177\324\275\230I\204\276?_\202\276\031\342\230\277O\206\010?<\301\'?>s\207>\000R\263;#+!\277~\304\364\276\276\346[\276\203\225\033?M\223\n?\340\352\365>\241\304J?\000\333z?\272\333\322?\270\343\'@\315I\343?<\245\366?&G\007@\226\333\206?\020b\034@\315z\354?\027G\237?1H\331?\020d\314?\305\230\205?1Iv?\"E\233?\250Yd\276\025\026\001\277\225\325\312>D\317\252?,\317\252?>K\330?\"2\007@xx\246?\001\007\344?\022$\204?f\230\247?\020A\272?\201f\177?\202`\217?\241\240T?\233\307n?U\252\021?\000\315 \275\315I\250\277\256\"\210\277\353\004\302\277\226\376|\277\332E\360\277W*\364\277\362\320\253\277\353\322\340\277\334\247\222\277\260TC\277\322(\276\277\000.\265\277<Fn\277\320\025\013\275\264+\225\275\010\006E=\213\024\032\276`\267\\\277\260\235\273\277,\366\250\277}\000\310\277\354R\300\277\024\360\271>\236\324\037>B\344\023\277\276K\261\276_\036\016?\006\302\261?\000G\351?\3262!@\016\362\364?)o\340?(\2138?\345\265\240?\360\311\335?\352\242\n@2\260\336?\250\022\021@\346.C@\365\322^@\303 j@U[E@\204`I@\216P8@L\213\031@\310+\001@\303 T\277\020\310\243\276@\276j\274\202\n\351>\246\021\227?\351\345\305?&\340\370?\031\205\236?\253<\354>\252jr?\251\037\254?\306\000r?OCl?\356\315\033?{o&?\320D!\276)\3165>\010\355z\276\332\t\017\2777\205i\277vN\272\276\027\237Q\277\210\025\023\276\262fd>\200@\277?\374\234\276?\215\364\334?Zp\316?\364\216*?\263.c?\202\350B\277d\241\250\277\240\376k\277Ft\275\276O\266\345\277\360\236\\\277\320\251u\277\277\203/\277dd\004\277{:\363\27695\247\276X*\226\276\247\277\344\277\0241!\300\032i\030\300\202\017\365\277UQ\"\300\254\213\233\277\377G\016\277\323\324\240\276\0321\213?r**?hM\034=^\346\351>\272\204*\277\354\343\024\277\347\214\354\276\352\346\230\276\204}\025=\361\243\257\275\200\024I\277\214\365\002\276\343\327\260\276\017\010[?\330EX?]\251\236?|\207\226\276t\234I\276\000\301\253\276\340\374k\276\021\017\207>\373\350\326\276!m\257>S\210\276\276\224\t\250\277\230 u\277\201\016\254\277\024\224\177\277 n\350\277R\275\320\277\322\024\214\2776O\031\277\245K\303\2772\326A\277P=O>\026Q\022>\346\312\277>\320\357\375<\276\241\017\277\036\300M\277\2035\270\277\364\341C\276\374\004\231\276p-:\276\257\346\210\275\007;x\277X\331\240?\034\377\230?^i\375>\347F\263\276l\257F\277\002\3221\277\367\326\203\277\200#C\277b\367?\277Zu6\277\"[\204\276\002\303\231>sIb?\334\016\327?\271\206\213?\212\217\026?\016\250\257?R\224*@\262$U@e?S@T\r\035@z :@l\371\014@$\237\027@0\323\340\274\367\205\223\276\320kZ\275>\276v\276\345\332\215>aR\203?\320\303\027\275\033\310\351\276\340N_\274\351-\236\275f-5\277\344d\321\276\016)d>2\256_?x\2464\275\243\343\n?\272\237u?&@D?\265\334\207?f\313\006?pUB\275\272\371t\277CI\244\277\264#\210>n\2129>h\202\001\277\212\374\342>\020\033Q\2753\013\375\275\240\305H\277>\343\304\277\306?\357\276A\370\205>\371\276E>\3401\350<(\006|>\276\037Y\277m\221\035\277\014z\235\277\202\372\371\277=z\213\27732\251\276p\002\262=\201\345\001?\336=\253\276\274\322\342\275%\224\\\275vmo=\241\2372?\316\363>>@E\203;\3313P\2758\250A\276\000&(\274\034\211\307<\214o^\277\260\247\024\277(?\235>\240\261t<\023\220\246\275C\363\213\276\312\261\032\277\323\264\014\277\246\020\005\277\032\275\211\277T\343\345\277N\'\020\300\013+\036\300\0017=\277\206F\250\277\003n\241\276\0340;\277\363\227\337?\262\021\353?!\312|?k8\241?\354i\202>\210#\276\276x\311\031>\266?2?D\273k?\303^\271?\265@\010?\244\037E?\232Jc>\326T\376\276\325\355\247\277\250\243\363\277\007N*\300\214Q\002\3004M\n\300T\300\002\300\240\3579\275\320\322\337\275\260T\377<D\355\253>\274`\203>\330\362\224?\262Ah?\251\244\'?~\027\200?\313\223\210?\324\213\036?\260M\276=\023\021G?\210\010\302?\314\226\314?\267\243\305?\257\314\262?\336\224\311?\254\302\007@L!\314?x\362\"@\034\346\211?\220\265\354?\303#\004@-\313\321?\\\300\263?\334\272\274>]\204\357>\274\212.\277nf\022>\255*\265=\236&\035?\336\317\032?p_\224=p\353\323\275l\366\006\277~,\204\277\372\326\366\277#SI\277\337.`\277\244\\\206\277\276J\254\277YW\240\2776\351\327\277\322-\313\277\037\372\327\277,\225T\277\2443\216\276\246\326@\275\276\214\241>c\032\325\276\343[E\277\235r.\27702\263=\377u\370>\376\\\021\277\243\314&\277\316O5\277\306\204Z\277\033\346\330\277A\274\022\300\023\232\236\277\002\035\331\277\262\221\024\277g\000C\277m\354\255>\365\366\020\277\247\325\321\277\274\364\340\277%Jr\277\000sa\275N\354\370\276\217\035\240\277\353\026y\277\254tf\277\300\335\234\277\3600\354\276\254}\t\277\300S\237\277!1\226\277\372c^\277$\013\227\277#\301\370\277\036\267\016\300gV\007\300r\236\225\277-\206d\277d\261H\277\014\320\232\277x,a\277\250\333\233\277,\'\002\300^\320\207\277%\253\374\276Z\223 \277\354L&\277\360\343\244\277\tt\032\3000\2178\300\313\360B\300b\232\201>\270\211\277>$\2074?\007\213\272>p\267+?\354P\223?R\332A?\264s$?\376&g?\270\n\320==5\004\277\014\026g?\305m{?zK\234?\354S;?\035\0106?8\r\364>4p\220?\276\016E?rcb?Z\371\342?\366r\234?(\003\234>\334&,=\212\315(?\3608D=\2269N>rJ)\276\213*\226?\3165\267?<\232\316>x {\275\364\020\300>>sU?\222ZP?i\024\320?\300%\033\274\251\235\006?\n\303\341>\230\030\264>l\033\272?=\366\235?\030lQ>\025\352\275\277\300\021\021\275gc0\277\327\354]\277\260\240\232\274\t\367^?\014\352\203>\022\r\325\276\356\376\323\276\030\211\n?\350\244F?\274\360?\277r\216g\277\220f\'\275\'EL=\274j >\036L\211=0\346\200>x\315p\275\325\342\'\277\325\rP\277\346\230\031\277y\255\212\277\331b\257\277.u\322\277mO \300\026\361c\300\344\0172\3006;A\300\322[\027\277\304\322U\277\326\024\252\277M\023\302\2776S\241\277\256\"\211\277\000\321Y>\034k\226>\333rJ?\330i`?\023\3470?Os\257>G\024\003\277\000g\010\274\031g=>d\2027\275\316\360B\277\226\205\374\276 \310\310\274\266\016i\276f\235K\277\377y0\277\274\316\360\276\312\to\277^\347\335\276\350/\000\277x`\227\275=\262\223>\233\014\016>\277\010\242>\250:\326>\312\274\020\277 S9>+H\320=@*\226\276\354\241\250>(\036\025\275;h\216\277\342\314\320\277\264\277\367\277\377\315\317\277zgS\277\010fg\277M\002\206\277G\215[\277Fs\331\276\350p.\277\300\'\\=0\3678?\322\365\013?\202\325J\276\031\257\026>\302\022\032\276\002D\363\276e8\275\276\245\037\020?\320o\241\275$\343-\275\022\345\271\275*U\233\277\022\002\022\277E\222k?>\307\226>x\310\337\275\026\246\237>:\363\272>\"=K?t:\327>\356\002d\276\214X\204>\300\037\327>:\310E?k\267\312\275~\342\327\276\374\027\305\275\017\341\217\2777\034\265\277M\264\254\277~,F\277L#.\276sr\316\276F\236\352\2763\345\234\277\204\325\261\277\302\266\216\276\212\257z\276k#\272\276QL%\276\257\300\004>\000\235\327\276>\276P\277\203`;\277>l\367\276D\220\306\276=/\014?\324\277\370\275\314\301\027?\\^\202?X\237\265?\306-\226?M\025\201?\337\'\255?o|\013@\332:\237?L\320\213?\234\240\303>\214\307\261\275~\266\222\276\336B\233\276\224\375@\277\2616A\276\313\316_\2766\210\244\276r\206\001\277\213\260\347>\357\217\377?7\027\200?\2367\327?\327\345x?\214\317\364>!\211\263\277\033\242\260\276\352\305\224\276XY\352\275\374\221\267\275\n\337\374>D\005\251\275\340\023\361\276\200\no\275k\376\030?\302\275\316>\301N\234>\356\354m\277\005\321\274\277\r\307\203\277s\302\253\277*\\\365\277\353\364\247\277\326\347\001\300D\245m\276[?\321\276\360\206[\277\310\267\034? \301\373=\306\340\364\276\000[$?y$0?i\316\274>\234[\'\2778d\336\275Q\033\306>\276\300\026?\034\315\226?\314\177t?\314\310\224?\264\342n?\036\312\203?\216\276\274?\340k\366\275Z|]?\241\002\266>L\0232?-\3037\2770=\252\275Ru\234\277\211\307I\277\020\3753\276\327\030S>W\203h?\006.\223?\222\217\302?\020\215\006?\300\233\022\275\256\273\265>\302\264\320?\334\230b?\230@\210>\314i\005?\356\311\033>\314\275\035=v\005x>n\005d\276A\326\267\277>\372\311\277\276\350\242\277\034\220=>\304g\366\276\354j\303\277\224\357\361\277\217\204\350\277\236;\000\300\376\356\003\300+\356\022?4\223\350>\312W\345>8\235,=\245je?L\031\263?o\235\240?\326\n\344?\245\0249?B\027G>L\263\341<\346\033\257>\242\254\027?\344\311\001?v2d?N\330\310?\254D\002@XM\"?b\210\245>\352d\264=\314\022=>\037\004\301=d\260\215?\332+u?\t\tG\277\242\260k\277\202#\223\277$\354\\\277[\331\224\277%v\271\276M\275\220\277\337w\207\277>\222i\277\217\247\026\277\316\352\261\276\270\0056\277S\217\027\277\271\307\032\277\322v\333\276e;\241\277\274\032&\277\260\013\261\275\003\203\310?\345\2247?\300mN\277v\237\247\277$b\231\277\036\375\202\277z\372#?=h\004?\0253\327>\332\254\037?\317.\252?O\350\340?~\007\026@uU\323?\352\236\315?g\215@?_\335\010?\264\0275\277\035\303^\277\203ip\277\240\277\302\277\035\230\360\276\030f\351\277\001\306J\277\322\315\204\277\0021\357\2760N\315\274\226(F>2\210:\276\310F\301\274\370i\003\300\254v\323\277\372\266%\277\244P\341\276dem=\305\3014\277\241\252\"\277\004jL\2776\377\330\276\036\'\335\277F\326[\277\343\373\010\2774Os\276\005r8>j)+\277\237,\365\276`\003Z<\224\235\305?\274\205o?\340L\302?\020\320\n@J^\331?\212\200\265?\250\276\033?\220\332\320?\026\377\361>H8\303=?\010Z\2773\325\312\276\"\350\001\277\007\211\024?\020\202Q?\337\306\343>-\306\257>(\'U><(M?\200\301w?\366\334u?\314\353\321>|\216!?\236\352-?^\230\305>~\0078?\374@\226?\272X\265?\243e\215?\014|)?\"\366\324>\031\274\235\277\264\261\332\277^>\264\277\301\266\034\300\270\225\367\277Z\307\030\277\366-[\276$r\321\276\234\237\010\277\337fm\277&\254\235\277\014C\002\300\355\206\222\277\3355\341\277[\212$\300\016\'@\300\350_\216\300\214lb\300\333}\247\277\000\351\375<\177\245m\276\207nB\277\020\361\225\277\000\346m\275\352\241\331\277\220\215\034\277Ls\305\276Rk\361\275\320\357\214\275\361S{?\t\033\371>\360<`=\001g\204\276\203b:??;j?\000gb\276\236\315I\277<8R\276%\252b\277\231\371\325\2768\247\"\277\"\002{\276\032V\240>\265\323v\277~f\263\276\331\201\240\277\024\312\311\277\321\023\223\277\031{\253\277\275K\222\277&?a\277E\262\023\277\276E\243\277\2300J\27786\311\277\224\301\323\276\251\251\027?\036n\014?\271\027;?\221\\>?~q\225?2\370\010@\r\251\024@8\300\335>\264\215\204?\034<\027\276`{\303\276\330\300\323\276\000\367)\277\366g\304\277\2341\333\277\226\220\351\277\004\177%\276\010\236\217=J\010\331\276\006P\345>\306K\030?\201\216\327>\000]6\275\343\334l\276\364\215&\277\016\320\240\276\023\362\307\276\014\230\334\275\214\307\010\2760\344R\277h~G\277\222\177\350\276lkM\277d\236\211\277RF\304\277`|\244\277F=\332\277\327os\277:\376\024\277\210\276\235\2777<\037\277\336\350\252\277\212\3522\277V\274\274\277$\220\260>N>G\277T\256\220\277@\034-\276\022R\"\276\266\233;\276T\364\303>\243~\201\276z\270\252\2768:\375\276\020\314\220=J\025v\276\006\257\235\277XwR\277\226\356\232\277(l\250\276b\232l\277\373\"\n\277jx}>\3625X\277\"\205N?8\320\233\276h\202\n\275aPR\277`\235z\277\301\245\034\277q\031\274\277b\274\270\277\344\000L\2774\276\270\276\000\310b\275v\217!\276\202\222\360\275XA\222\277`f*\2757/\305\275\377\306 \276~\300}\275:XP>,\351q>\214\233\303>\217\325\226>\010\247\243\276;\207\215\277\312\201\002\276\263\351L?\260\312G\275x\r\255=\347\013\215>\374\274\030?\364dn?\"\312\314?t?\241?b\005z?\n/s?n\240\312?\017\253=?N\326z?pX\256?\264\026\274?\252\260\247?\222\221W?\222\220\001?\234\351\313\275\346D\205=8\353\377\276\334\222\213\277]\201\360\277\027!\020\300\014\t\034\300\234\322\271\277X\370\205\277`A\016\277\362^\243>\275%_\277\336PS\277\202\274\351\276\227\220$\2776G\231\276\355 \016>\222\252\230\276\320\237\033\277\036\"\226\277\355\363\200\277rT\017\277F\306\246\277|\323`\277\371:\326\276\240\237\275\273\373\220\324\276\202\366:\277\221-P\277\262[X>ad)?q\010\002\277\n\005E\277\300\2166<\354^6?{\365\210?\216by?\220\364\237\276\tt\003\277BI\342\276\"7\007>\221$\301>?\3274?\310\247k?H\221\336=n\017\017\276\350\'\236?\324C\247>@+<?\267i\010?\23635?{^\006?\330\261\'\2778\\!?f\372\270?\340q]>\024\323\234>\315\0026?oYB?\200\325F\274H\016\\>{\t\247\276\364\316\262\276\001\260\366\275<\240^\276\206(\211\275t)\023\276\330\035\321\276\254\302\235\276B\\\211=Bw\330\276\260\347f\277\035\215\207\277l(\377\275\237\031\001\276WJ\373=\271\201\004\276\244\030\223\276\304\343\004\277\3402\303=o\242\255\276\276\325(\276\236\251\026\275\264f \277\314\345\000\277d\246a\277-\000\010\300\277\243\001\300\265A\247\277\220q_\277x\003]\277\213\211\330\277\004\320N\277DE\250\277\250C\245\277\305\013\206\277]~\312\277A\362\010\300\177\022\000\300\356\377#\277B7\307\276\001r\203\277\354%0\277y\036\254\2776\264\322\277\310\273\270\276\\\370\002=\340(_?\020\000X>Pb{<:\2629?\265u_?\305wc?\000Q\323;\027\260\226\276f\207I?m\210??\240\222\021?\346-2?\267\343.?\346 \322?\247\201\217?:k\303?\242\310\326?C\305\245?\360\341\327\277b\215\314\277\326\030\230\277\006N\314\277\300\217\242\277D\216\272\277\270|\032\300\246F\020\300~\035\223\277/\354\255\277\t\3361\277\356/\n\277b\377\343\277\202\010\303\277\007\232#\277\022kl\277\232\370\312\277\235\365\010\300|\010\327\277x\322P\277j\356p\277\260F\317\277\251\233\242\277\252\037\004\277#\356\247\277g\275~\277 =\021\277|\370\030\277\230,\366=\251&\215\276\214\255b=\371\214v>\310\341O\275^\234;\277:\324z\276j\325\033\277P\304\017=\2707\364\276p$\013\276LW\313>\234\004n\276\262\307\203=t\346\231>\360\014\316>\270\265\212?\332\210s?\342=\234?5\231\236?\350\230\\?\252TX?\3318O?\370>,>\034\320\230\277`\0222\2778\370a\277\273\333k\277\252ZD\277zh\202\276\031Z\'\277\363q\005\277\n\371\037?\274h\261=af\215?\343\324f?\230G\224?\016L\023?\340\242\214\274+\252\003\277\010\330=\277+\300\005\277j\260\367\276\230h,=\003\t\251?\257x\244?\000O\252;\034\236U>/ \213\276\273\320d>\375\377.?8\322\230?\206\301\203?K\252D\277b#\243\277@\236\023\277\203\271T\277\n\340\014\277\373\210B\277\016\005\320\276\262\242X\276v\337\033\277ioB\277\226\310\313\276\025\311\217\276\244\027i>\213Q\252\276\334\033#\277\210\355^?P\262\030?\224\035\037?\326[\344>w\300\346>\331-$?_\220\013?\372`\220=7\2000?(k\'?T\032\220>\263=\257=X\300y\2766\327=\277|\247\013\276r\306\273\277\344\240\342\277~H\370\277\236\336\342\276Pl\357\276L\353T>\214\220T\275\350\271\221>X\273p?\262\240 \277\252\376a\277\356\211\206\277\252\214\245\277\254\3536\277\276\274o>` \327\274\327+\t?D5\230?\372E`>\274\352\373<\273\251\207=B\263H>\037y3\276$\326\032>\244|[=\337\245v\276\250 \224\2779T{\277\263\261)\277\373K\223\277\350m\220\276\300~\201\277\212\262\346\276YtC\277pU\030\276(3\200\277n1K\277p5\033=\010\2413\276\373s\234\277\351\355\312\276\030$_\277#\216\336\2761\0347\277\006\330i\277\315~\232\277N\214\257\277X\272u\277\204\241\376\276\262\316\207\276\000\024j9\240*I\276\251\360{>*i\004>\005\361\350=\"\260\227\274\271N\255>Q\306\020?e\337??K\316\213><\260\225>R\005\004\277V\262B\277\014g\354=Z\263\r\277\364y:\277|\035U\277$Z\264\2774*\302\277\266\301\344\277\333\321\307\277T\356\213\277\347\343\216\277\r\362\203\277x\341+\277\027:\221\277\316\320Q\276Lv\026\276\324K\201?\254\346\240?@*~<\222Z\227\276\2541\027\277\342\217A\277\355]\220\277l\032\344\276\223Q\223\277\246z\235\277D\250]\277\254\030\252\277 \216\327\277\3207\252\277$\264\253\277\025\270\017\277`v\256\276\351i\242>\324\337r\275\200\236}\277\216\325\313>\240zk?u\303\361>\306\335\326?^\217\265?\326L\254?\375\354\267?j\315;?A~\335>\300\3674=\377F0>J\375\032?\3173?>*0\205\275B\t\320>O\177C?\3304\302\275e\"x?\243Z\212?.\274\021?\307\022\026?P\rk\276\207\265\205\277hy\251\277r\020\274\277$Ui\277\216\367\370\277\035:\024\300+\n\000\300v\262\301\277\327\010\312\277\222\220\002\300JN0\300Y\351\327\277H\025Q\276\242\214\227\276\232S\233\275\346\036\247\276d\215$>d\233\220\276\360\035\266=\0106`>>\361\322>\366\261\235?T\001n?\032\314J?t\n\033?~\010\236?\237&j?B\230e?\336&\351?\360\205+@\222\336#@\204\255\010@\271\350\330?\250A5?D\325\346>\340\230\036?\203y.?\236y\337>\337\377/\276z\350\225\277|\352{\277\250\005\236\277p\263\254\277\372\221c\277R\307\356\277h\322\017\300f\213\001\300\'\023\334\277\016\354\366\277f;\022\277\226\201 \277V\374\321\276\220\231g\277\315t\271\277\264y\333\2776I\212\277\0307\213\277\221g\321>FF>?(\211^?\222.\337?4 \205>b\013\022\277\360\3733=\014pH\277\260\355q\276\024bi\276\350\020\366\274lU\024\275<\273D\277\355\367\033\277*Tq\276\335\264*?W\206\242?\340!\253?\030\362\226?>\213\251?@\311\371=4\372X?\340f\321\274\r\265\376>\260m\352\277\246\271\230\277\016\261\374\276<\177s\277\t\3233\277\340\034[\276\241\'\234\276\243a\241>\324\014\302\275m\200\022\277\344\210P?\307\360\025?\000\324\365\274\030\352\223\277\336\266c\277\231\003\220\277\350\241\212\277\346\374q\277!\026\200\276\007\322\315\276\352ka\277\300KQ<\032Y\n?\251X\207?\365\302\t\277\276*\324\276\0061\026\277_2\033\277\315\233\r?\336\212[>\002\274@\2776/\261\276a<\002\276Z\016\261?\304L\225?\300\022\325?*\n\375?&\200\273?\370\277\265?\257\250\320?F\005\366>I\211\237\276B\354\343>\354W\276\276\004fE\277\030\000\227\277\\\3535>\210=<?\362B]?\240~\370\275\350\352\273\275C\033\306\276\230\307\237\275D1o>`\216\363\276\032)\303>i\022\306>q\344]\277\2161\201>\252\375%\277\025E\377\277uZ\215\277\261j\373\276`\343\031\275p\211\001\277\302\345\274\277Q}F\277\270k\254\275E\255\325\276X\264\236>\220\3669\275AP\237\276N\220\331\277J\223\331\277\347\344r\277H\2272\276\3173\325>Z\326!?n,\302>\356\215+>\210)U\275\323\301*>\225\271\016\276\026\326A\276\314\003\"\275c>\310>j\233\006?\322:M\277>@\244\276c\372\"\277\234\2741\277\224\336\266\277\236\363\201\277\344\335\215\277\000\372\217\277\003\310j\277v\224X\277\246\013\354\276\370\302\305=\213q\302>\271\312\343>2\320\017\277\240\202\270\276\034\252\267\277\275\334\324\276`\360T\276r\235:\276\035\367\204\277\365\317\266\277\371\307/\277*\211\263\277\010\325\207\277\225\242\242\277\364\264O\277 \377n=\034\372>=\267G!> [m>\346\220\240?~\212\264?N\004(\277\260\242M>\010P\275>\200:;\274\222\307\227>\304\307\373\275\010P\355\273P\247s\275Deu\277<\335\177\276J\331K\277\177U\030\277\262\346,\276\276q1?\324\307<?\210\214\271=\264\'\234\277\201J\203\277\324\032\336>\366\312\371=\000j\245\273\275:]?\304\"\\?\000&\265=\321?\003\2770d\334<\032i \277\252\007J\276\\4t>\2340T?\276L\267\276w\t{>,\010\365\275\242\343\271\277e6\026\2772\025\300>\362\210\223\276n\214c\277X\360\245\276\304\236\240\275\022G\226\274\013W\370>\014\032~\276\014\355\005\277\312\312d\277ZB\021\277z\205\262\276f\200\214=\330\333\214=V&x?\225M\203?\240\3167>\200\305\004?\260+\211\275e[[>\262\032\246>\220w\232>\007<6>I %\277*c\337\275\324p\234\276($\322>\014WA\275L\224I\277\362\252Z\277\246|]>\"5\221>\023k\203>\343 d?L]j?\322\306\343>\242\302/?\303\357<?\3027B?\252\000V\276BH8>\022\r\014?\203\270=?\\\242>?\005\344A?\\\377\244?\272\255\001?\000\263\261\275\242\341\n?\000F/>(\220\316\275\224e\023>\205U(?P\257o?&hf?\270-\277=L\216Y?\204\033\247\277`(\006\300\312\005\241\277k;\000\300\"#\255\277Q\205\236\276\220\343\362\275\262\254w\276\322g\000?\004\017\343>\0207\265>H~\026>\316;\373\275W\023\301>\304\n\006\277L\270\'\277\262to\276{S=\277\227L\356\276\262\032+>\364\355U\275\350S[;\233\217;?\220nq?R0z?\371\207\253?\010.\251?\240\305\254>\326\350\t@\006R\037@\030\325\327?\2727\266>\376{\236\276\341P\332\276y\246\330\2764\t\030\277>\245\203\276\004V\023\276\341W\206\277\271\325E\277\342\323\032\277hp\305>\352x$?\327\202\204?\220Si>N\201B?\022\321\247\276N\235&\277\254\335\026\277\217\357\245\277\035g\230\277\315\0268\277\310\255R?\314\007\311?\332\301\250?\364\271\352?G\337_?~\206y?\200\204\r=\372\0343>\366\361\002\276\247]:?\356\364\346>\370f\'?\035\262]?\336\202^?v\345\n?(\023i=\034\352\346\276zy>?(\333\367=\200\007\315>2\0379?\260H+=\220\233\t\277P\311\234\276W)d\277\33463\277i\257\216>X\035\220=\372\022!?\366N\227>\024\311\344=%\003\331\276\336\252C\277\240\340I\275J\352X>\027\236\254?\200\267;?\265\215z?\363\312\355>\324X\357>\270\302a\275g\026-?\232\220B?\355K\211?\205\252\204?\370\365\333\275\307\311i\276\034\331\036\275\000\234\205\273\035\313\266\276\257\223\317\275\315\301\360\2768U\275\277\217\246\307\277\233\273\266\277\216\231\353\276\006\230W>F\360^>\222C\371>\274\002u?\026F\024>\352W\343>/\004R?\035\221\242?\300\344\356>\337\311\312?\302\370\344?\2645N?\250\340\027?\301\2178?c\202\005?W\007w?\354v\230\277\260~\225\275\260\034\330> \216\362\274Z\375\312\274\341\226\202\276\341SO\2772\246\357\277xS\251\277\241A\271\277o:\221\277j\024\300\277F\307\367\277\3060\272\277$J\001\300\3359\033\300(\310\311\277}\277\205\277\256\343\226\277\256\355\376\277\202\377\031\300\3056\234\277\023 \366\276\306Q\222\277\306\332\272\277\025\202\225\277P\020\000>\215\222\023?\210\"\353>\362\227\243\275\003y\202>0\023\353\274zD\030>\220\336\177\277\246\3200\277\301\345>\277\030\223\177\277\302K\t?T\t\300>\346\327\372>\215\354#?\236E1?\020GF\276\256]l\276i\225\342\275\004\'\226>\327\313\306?tM\n?\215\320\251>\202\341|?\236\272a>\267\221\305\276\355\325\032>&\224T\277t!\010\276\271\200\016\276\356\350\345=\247\332\273\276\241u\336\276wL\277\276U\0214\277\270\200r\277xq\314\2776^\001\300\034[\026\277\211:\233\277\336eg\276\270X#\277\374=J\277\267\350\203\277\262\254\302>\240o\r\276~\272|\277\256{\262\276\224\201\303\275\016Hx?\325^m?n\201\272>BE\300>\000>\354>\204\321X=\276z\240=9\034\213\276M\323\236\276\222n\234\277\374\362@\276\273\240/?\020MW\276\372\033\322\2760\355\245>\350\203\366>\344\222}?O\006\221?\365\256e?\363\262\001?t)\253>\340*\301\276\364\353\003=\220e\007\276Dk\216?;y\331>\376\267\232?\233\002q?\360\017\333\2751\013a\277\350(P\277\216\225I\277\t\321\323\276~\301I\277[\256\221\277\330eO\277V\2607\277\230\2206\277\372\223\223\277:\354\363\277\271ej\277\351\020\205\277\220\032*\277\264yS\277\t\311\234\276\275y\336>\372\306/\277\024\243\343\275\345^>?`W\321<\324uH?u$=?\212I\350>\020\001\337<P>k\277T\232m\277\273\030\237\277\347.\235\277\320@\221\277Z\222\220\277\272\331\365\276\224\003\305\276{C\206?\350\020->\352\271\341>\000\024\331\271 \207U>\3113\016?f\207\"?u\005U?\021\333\013?\010\336l>\0337\267?N\265\001?\327\377\275>\354\347\371>\364\022\200\276\254H&\277\020\203\322\276\260e;?\364J\016?\213\303\325>J\374\312>\000\206\211\272\214\032\370>\312\005_>\\\265\375\276\246\333\017\277\352\351\341\277\302\304\324\276\377tr\276#\'[\277\310c\021\275\267\201\004?\354\010@\276FvX>-y7>\202\244\372\276\303%\211\276\230u\355=\254\215\243=9\274\357>f\306\221>\334\025\005\277^\353\034\2778S\007\277\024\036%\277\340@\366<\034\207\370=n\005(\277\034[\262=\325F\340\276\014\020s\277x&\204\277\020\263\327=\272L\016?\374\377_>w\251\346\276\230\252\024>\013\367-\277>\376R\277\340Ea>\376&\317\276\265\r\340\277\323\231\362\277\322y\213\277\363b\377\276\323LZ\277\014IX\277Tj\311\277\270\024\220\275\375\322\201>\376\337 ?\227\327p?V\322_?\255\311G?!\n;?\342\323E?(:o?\254\262h>D!\007\277\350\026\371\277\006\t\007\300\221>x\277l8\270\276\343\016\355\276\376\027\r>w\227y?\276\214\343?z\3526@^\346\241?`\000\247?\347YJ?I\025#\277\260p-\277\265 d\277\216#\212>j\256$?\272f\030>\215\304D?:\325\351>f\366\215?\250.)>\233N:?\036\374\322>_\271\311\277\360\213\027=\316\r\024\277l\233\212>\367e\027>\252UX=~3]\277\320\266\362\277PN+\277H\032\256\277\014W\310\277@W\001\300M\273\007\300\240\214\327\277j\363\010\300\272\231\241\277\016\\\266\277\312\331\372\276\240\262\024?f\375G?b,H\276b\333\316\276\352\361\231=\265\254i\276\240\017\232\274\220\371\177\277\215L-\277.\206\270\277\"y\000\277\320(^\277fh\201\277D\030\251\277\000tb\277J\316\220\276\260\336\215>\r\341^?\023\312`?\225\210\201\277[\246\203\277_9D\277\366\322\301\277\'9\276\276\340\377\355\275\312\034X\276\034\312\020\277@\325\263;\301\020\345\276f\273\007>\270+\014\277;\n\030\277\274B\306\275\\6\364\275\362i\362\276\261\363\031\277N\241\030\277\304\251\243\2778\250\313\277X\037\252\277\371n\246\277\363\373\226\277D\232\355\277\030\333|>5\tT>\325\343\224\276R\336\231>\2734\371>\266\r\201?\212\321\226>\300\310n?H^\223\275\236\306\n\277\016\246g\277t\375X<s\031\217>(\033\206>\034\347\261\276|\202\005\277\024\214\024\276\215\322F?\276{O>\266~4?\366\370}>\010;h=GCz\277\031U\303\277\373\232x\277\0311\346\276\334@\214\277\271m\237\277\250\324\244\277\375\006@\277^\004\234\276\277R\\\277\000\350\022:>\246\210>$\316q?\323q\255?Q>\020@\206\250\031@X]+@\302\205$@\272\325-@\356`2@\nUL@\0334U@xy2@\024y\030@\324\201\036@\207G9?\242\265\021?\362v\211?\212\264s? \372\321\275\254?3>t\207\260\276f\315\363\2764\271\033\277\276\2747\276\033p\231\277\326\323\267\276\270mZ=\224\221\014?9\337\013?\240D\257?=\222\246?\352\036\260>\306\315\305>\204\365L\276#\206\344\276\316I\321\276j\322\205\277\255k[\277\314<7\276\2077-\277\260E\356\2743\253\256\277\224\002\275\277\320\321\354\277\312\334\252\276T\355Z\275\207\271\374>\252\352\322\276R(\203\277\336\266\260\277\200\336\005;\2644\224\274 \273\351>\273\207\237?\3001\215?D\241\206?\320\rr=~$e\277\264\\Y\276\017d8?\330\301Z?\234=3>b\242\256?\034\362-?\215\021)?\202\336\346?\274o\257?j\021\243?\231\311\244?\024\004\224?\206\014n>\260\242\001?\216\320y\276\224^\367>\316\255#\277\330\351\254>\351\257\300>\020\213\232?\242\210\267>\330o\254>\265q*>L\204\334<\225|\357\276\004\354\034\277\336\266\231\277`\210\201\277\253\014\373\276>\016)>~-\351>\350\255\250\276\020V\304\274\354H\206\276E\004\265\277\033\373\305\277\323M\226\277C$\310\277\200\273\n\300D\357\215\277\272\322\366?\363i\026@_3\342?\365V\341?\030!\211?\\\334\354>\2656\267\276V[3\277\366\251-\277b\325\202\277\265M\177\277\257\260\343\276\217<\277\276\0107\350<@\204\202?\376%\223><\223\231\276\255\210\321\276(\364\020?a\361f>N\235\376\276\370jy\276\342T\252=\222$P\277\240\351O>\366\213\340>\260n\352<\025\264\022\277\322k\373\275\3604\262\276Y\310\231\277@\306\221\275\330\326c>\325\255\303?>\206\332?v\021y?x\265\364?\242\265\341?\344N\336>\303\334\031>@\371@<\334\210\003?L\317\353\276\304\247+=\245l\255>\366E\236=\316$\340= 1^?$\321\335?\214\344\036?\201\327\355>\334%M?2\312\267>T\237\276\276[\261\232\277\322\346B\276\020\243\004\277\224\277\037?\3417\254>\203\026\031?d\217\367=\330v\225\275\352\003\325\274l\366\006>\002\222\021\276\224\301\226\277Y%w\277TJ\252>\312\3722\277n\226\335\277\300rz\274\377qq<\234\225O\277\033,\004\277\3140\210\277\243q\357\277\354i\203\277\021\023\334\276\360\323[?\360~\264\275\276s_\2769\300\262>\244X(>\242\340\013\277\034\316\360\276\350\030\251\277\270\207\211\277D\341\262>\020\374\005?(m\223?\212\215\370?\2650\371?\344\335\321?\343\311\256?\214\243\313>\264)\212\276q4\244?\320k\">\323\224A\276n+\006?\356wK?E\213\037?\303\257 ?\014\360\226?Y\003\353>\330\227\315=\272\024g?N\244\317?\\\244D?\204$\n?(\364\016\276\346)\023?\264\311\230?`\223\230?h(\n@\017\360\351?\3548\202?z\3073?~\313\204?\021l\245>Z\351\221?\235\301S?\004p}?\300G\335?F\006\241?\230\357\037>o`\016>\373\262S?\230\003,\275\324\233\363>\033\201\035\277\302\222J\277[Z\023\277|\265\031>L\210\325>\377\210\304>~\2360?|#/?\241\026\315?\234\315\321?2\306\320?\311i\364?\230jK?\245|I>P\263\207>F\3112>\347PU=\221\023\016\277\003j\032\277x\3537\276L\303n\276\354\331m\277R\303\342\276\350P\244\275\200`\300\275p\370\230>?\263\310>\210\n\320=>\343w\276\337\200\221>\243\217\205\277\0220\301\277\260\267\003\300\310o\272\277>\270\246\277\207\264\216\277\300\200\022\277\nRr>\367\246\204\277\321\2415\277@\244J\276\314\232\004\277\362i\240\277\254)0\277\324\255\177\2773\365\221\277\274\364a\277}\235\037\277\3641\232\276~\002R\277\0301S>\311\245\311>,]M>\225\3016?\231\227H?\256\005\023?N\034)?\010\373\005\275aV\010\276\302\014\331=\2006\350\275)4\037>|\352\200\277M\221\322\276\373\224\310\276`\337\217\275\244qA\275\244\374b?\t\262\360?#t\327?\213\262\356?i\355\341?\021\036\265?\260J\265?Yd\330?RO\375?\307\344\346?DV\002@\340\033\234?\026\"P?q\316\225?\231*\261?\246EK?\000\270\003\274\'\003\237\276$\355\215\275Fq.\276;i\333\275\004\022(\277\356\235\351\276JE\027>PQ\032\277D\213\236\275j\322\375>OC\210>yp\000?\036K\315?*\3126?\231\254\372>*\222\225?T|\250?o\373\372>\203\353\032\277P\3125\277\316\245}\276E\"\274\276\306\2661\277\220FV\277\324[\344\277\344\321\270\2772\311Y? Y3\275\265\376\027>6\017\330>\366\346V?\t\013\205>\3029\317\276@^\367;\347\353B\276\261\277 >:4Z?\030~Y\276\017\344m\277\t\320\230\277\275\0201\277B\374w\2772S\212>\344\006F?K\332\026?\014\321\226?\346\356\266?  \225?\370\341\204?v\251\201?\240E\216\274\313\326V?\327&\343>\032\216s?g\270(?N\250\000?\305\255!?#u\203>\220\300\265\276\322\257#\277\016n=\277\320gP\2779J\010\277Bu;\277\204\\\327=\340\3609\276\375\000\200\275\305\212\256\276\276\333/\276\234\203\207\277\240Gh\277\334#\275\277\020\272\017>\007*\273?h\002\365\277\202\351H\277\342\236\302\277\020\252\266\277\264Y\037\3002k\313\277\237,\026\277\327\350c\277\024\251\230\276\r\345\337\276\"4\361\276T\t\206\277\232:\246\277\356\236\346\277\210\257\325\277\017\037\340\277?<\266\277\332r\271\277h\310\034\277\302\341\304\277\262a\352\277s\237\343\277\210~\241\277S\021\342\277\225.\014@\221\317\035@\264\255\003@\204R\240?\206Vy?Pj\331>\367\253\334>\263\256\247?M3\023@\217%\014@\344,\013@\233{\030@\370\277\231?z\255v?\022\207\267\276\355b\003\277Zqj\277\220\343\254\276\200.#;\"\326\363>\022\247\330>\340H\326=\213)J\277\207\355{\277\332\264\201\277\014\233.\277\336\272E\276F\323Y\276X\263\274\274\2515\324>\274&J?\252B\267\276\360\003\004\277\351\230I\277\250&\r\277\234\030\213\2774U9\277 \305\257\275\2477\360>|\202\212=\225#\215>H\374\036?\372\274s?\310\177\221>\205)\246>\366\244\262>\211\201\223>N6\302\275\026\372\240?\030IV>\n\"\\\276\005\231\353\276%/\256>\204\324\240\275~\227\255=E\245\003?\002\\\027\276\252|\254\2768\023<\277\030d\233\275\020\2116\277\237\230\334\277\002\367\211\277&\240\003\277p\271\t\276\030\r\363\274\210(O<\344\t1\277\000\374\000\277\250\271:\276!lB?03\331<,L\371\276)\216X\276\013\351\271\276<\177\020?\242\203\316=\341\323%\277\220N\240\277\033\237\220\277\322|\032\277}\373l?\220~\250=\317s\033?\346\357\215>z+\203\275\205L\230\277R\317x\277~\276\010\277r\354G\277\3671\375\276\300\032\376\273rV\223=B\253\277=\376\020\367<\213g/\277,b\237\277h\020\301\276\254Z\220=\306\274M>\324\242\024?\2227\222\276>\261\271\276F\034\001\277N&m\277A\311,\277\246\276\237\277\000\2361\277,|\032\276\260\234H=\364\212\211\277\026~\262\277\302\035\256\277^1\374\276N5\213\277\226\226\036?\207\370\255?@\245\236<\346 #>\374\335\242?\215=\002?\000a\226:\210]y\276\243\377\001\277\3328\261\276\206\346e>t\305\337>\362\226.\277\311_-\277\250:\026\277\3468\033\276+[\203\277\260\241\243\277(\004%\277\223\010z\277 \321\263\274?\007\262>j/\202?$\324\277?[Z\n@\356G\323?\364\261\273?vD\333?\247\375\235?\220\341\302=\010W\355>\036K\262>\230\273\350>`\274\017\277 \276\201\274\326C\026\275\332@\273\276\212l5\277\032\231Q\277\007+o\277+\350M\277\304\216\005\276g`\014?\330\314\200? \006)?\251\351\245?\021\315\257?N\304\354?d\356\203?\342\352\261?\340\356\272>F\300\300\276`u\'\277\346\366\257\277\023\234\200\277\336.\374\277f\265,\300\005\214\026\300\344\037\231\277\\\033\322\277\272+\010\300M\267\302\277\030GS\277(\025\226\277\220\226K\277-1\237\277@\010\320\275\366\277\024\276\340\264\362\276X\373T=\324VC\276\310l9\277\236\264&\277\206&\306\277\'%\000\277\327F\037\277$|\307=Ss\007?^Z|?\223n\227?H\227\314?\\.\331?\371!\010@0\016\017@\263\266\013@\330\311\306?\2011\315?\240\202\347<h7I;\332\004\301\276V\337\031?\330;s\276\346u\375>\206a\023\276\027\333+\276 7\316\276\254\177\203\276P\263b=\364b\313\274\247\212\'?\246B\004>|\237\245=\364JR\276\355]}>yW\200>\250\202\302>T&\\\276\370\224G=\247\332b>b/r\276#\351\233\277\200g\301\277\256\000\202\277\236\333\244\277\365E\200\277\335\255T\277\211\231\322\276\253|(\277\322I1\276[\330\004\276\0165\362\2768o\016\277\006\260B\277\020i\332=\000.\236\273bX\253\277`v\261\277X\010*\276\000\333`\276\364\376v\275\341\013\254\276`6\263\273\254\373(?O\356f?:\271l?\010\033\025>\220\237\324>}+\034>jD/?\034\332\217\276\237\031\310>N\370\n?\002\032d>\327\255\237>~a\n?\2277\004@\032\223\023@\004\223\265?X\010\222?,\2020\276J\022\346>\3719$?\240\347v\277\022\226\201\277\224>\312\277\231\035\017\300\224d\372\2770\256(\300\361\006\007\300x]$\277\n\356m\276\n]\'\276\323\241\213\276\216z\335=W\312\020?0ZP>\360T@?\316\022\037?\342\327\226?\242z\261?\316\222\021@\370\352\273?\000]\357=\242I\226>\322C\317>W?\242?\204\320\300>\020\321\315\276\330\323\271>\326,\202?l\022\007?\242\306o?\226\253g?\200\352\023=\367&\251\276Ga)\2776\006\213?\330\2647\276`?\215\277\302P\222\277(\322\263\277\351\'\221\277X\270\265\277\036VZ\277r;\216\277\354\212\252\277M6\241\277\301hq\277\323\335\276\277\202\245\326\276x{A\277|\3142\277\364/\231\277\nVm\277.\267\230\277\235\317\324\277\302\026\014\300$\307\013\300\002\372\014\300\321\233$\300}0]\277\266\211)\277<\325\207\277\320\366\035\277\001\354\353\276\346\\\222\276\334\356a\276vC\207\276\364(\017?\274\201\223?\312\364\017@\316\265Q?vc\252?Z3\250?\362\357\007?S\177\320>\245\0346\277|e\000?y\376t?\274\237o? o\034?\257\247\337>\301F\321?3\344{?\204\226\275>\230)\220\276\216\027\213\276\2202\201>\251\345\241?\0257\034?v\262v>\332\230\345>u\310=\277\222X\246\277\315\205\313\277~8\350\276T\302\014\277\340\277K=yCv\276\222pT\277k\265;\277\231\207\364>\240\315\226>.E\'\276\320\230\006\277\331\273\371\276\230U\202\277Gk\253\2775\000\301\277<\341\014\277\350\032\252=&aa\276\250\2727\277\316U{\277\333\374\273\277N\366\277\277\324\301\340\277\240\017\207\277\036S\032\277mo\347>^s\020>.;\263\276p\024\274>\007\347\231?P \262?.\225\017?\306\240\304=\234\322\000>`\200W?\325<\203?E^b?\025\235\325>\357\276\037\277\264\271\353\276\322\270\215\277\262\"\313\277\253\232<\277\'\2202\277\n\303W\277\370\016\376\277\330\306\332\277\'\035\302\277\201\037\342\276\340;\205=\234h\342>\006\316\214?\020\346\351\2756\311\362>\022z$\276\254\034U\276\013\265\211\277:\225\024\277\262\243\013\277`\312~\2752\255\361\276\251(\265\276\300\263:\2770\363!=\337\373\234?\234H\354?9\345\221?m\250\217?lJ\320>\320\003\014>Z\223\244\275\311d)\277@8\032<\000\340<:\277\007\212?v|f?^E\235?\264\262\276?\341_\302?\216\274#@\321\370\333?\270Zr?\372i @\236\034\347?\342w\005@X\202A?\340\332\222\275;\266\230>\366\374&?6E\212?\304\201W?\200\013*\276\256+\315?\365\241\370?<8\030@\032}\333?jb\202?\314\342^\276\305~[\277\250\276\004\276\311\254\352\276\356o\000@M\325\267?\035|N?\004\371J?s\214\017?\026\003;\277\352\016U\277W\325\251\277b+\271\277\334s\373\277(\367>\277\3462\244\276_\035\301\276\262\215\010\277H3\\\277w\210\215\277\323`\257\277\232a\266\277\252\301\361\277\246\022\353\277~\006\267?\"3\244>y5\212>h.\326\275\243(\005\277&2O>\226_\250\276t\371@\277\233\017\317\276\332!Y\277<{\301\277\351\267\221\277\355<\261\277n\032}\277\230\233\025\275\2731\374\276V\345E\277\2331\314\276\350\313S\277\353@]\277\217\352\366\276FIG\277S\307\232\276<cd\276B\365<\277\233!l?\024P<>\370\355\221\275n\263[?|\347\264?\315\026\255?\300v\315<\264z_?o\"\020?\233\3250?D\346\027>\310\262*\274\224\344\344>ZB\"?:\001P?\204&D?\034=\033?\304,\322?}\270R?\260A0?~C\277>\265F\240?d\357\362?\2136R?O>\n?\3604+?v\231\223?8T\206?[\032P? :\303?2c~?\205\355<?\246K\211?\277\214\226>\002\027J\276\265i\020\2776\233/\277\226Q\243\277\234\0243\2778\343w\277#\251\224\2774[\233\277\000\200X;-\224M\277\216\323\331\277R\267\343\276\214\361Q?\255\024\305?\261\204\232?\343.\257?\234\254\'?\310\332V?\250\263\307?\365d=?\231/>?\020\227!?H5\240?\007\366:?\370\231\201?\263\376\333?>\'\000@\303\023\307?$b\017@H3\013@9h\021@@\216\247?^\002\246>e\r\244?z\037\260>\211\253\010?N\306\245?\000\325\021\274\036\342\263=\324\202\254>\264I\003?\314,\232=F\2772\275>\234<?\330\214\323=\016\376\200?\335\253B?\006\333\325>\242C\025?\233_#?\0001\243?.-\302?\003\203\261?\030\264\206?\200\235~=\031\326\221\276L\355\244=q\276K?\360\211\332=Gk\216=W\352C\277y\020\001\277\024\032\320\276\210i\022\277\250#\230\276i\214\315\276@\265O\275\335W\200\276\020\005\016<u \002\276\250V\032\277\314X\r\277|>f>\255=,>j\361\263\276\024\323\303=\266\2451>\2440\227>\3676;?\252\233\374>r\016d?\270?\r?\032\303\n\277\366\242\001?\234\336\305?\352\032\262\276\026\270\375\276\016\362\201\276\345\340\000\276\317\034\261>i\014\002\277\311c\264\276\337k\206?s\260l?b\206z?\227\245+?\261\336\237?\330\265U?\200V\221\276F\341\212\275,\246\332=8\035\330=\301\237S\277 rd\277{\301\370\276\337\257\033\277>\026Y\277K\246D\277\260\355\200=\016\212\227\276k\206j?\352\201\266?N\370\254\276\021U}>d\356K\2757\231\217?\206N[?8\254;?\n\252s?\010I\360=<\325\211>\020>\232?N\330\031?\376\230K?\000g;?\365\276\312?\005[\320?\254W\025?\017\341\016?S\254\323>\210\273\276\276P\302 =ba-?\223*\312?-\200\234?v\350\214?L\363\024?\302\273\342?\002f\210?\221\360R?\n\027x?>\032\344?F\276\224?\332L\345?\214\310\311?\353\350\225?v\035\274\276S\357O\277\220\305O=\322\233\323\275\033n\030\276\020\245\200>\261\"+\2768\246\261<\342\300\014\277\312CQ\276`e\024\277\017\020G\300\342\006E\300V$\036\300@A\016\300W\234\001\300NG%\300\r\321\021\300\352\302\354\277\256\240\356\277o\237\252\277\361\352\246\277\300\215\277\277\237f\204\277)\222\013\300\212\347\n\300\r\200\001\277\360\250\033\277$\236\241\277\254bT\276$\0053\277Xn\275\277\3001m\276\364\232:=%\017\007\276\2029O?j\004Z?\344\350i?\002\224\244?\352\017-?\312V\222>\022\177\331?\026\325\006@\256\363\207>\335\023\216=1\204\272\276\235B\234\277\022ou\277!\017\357\276\211J\312\276\r\242\322>\305E9>\006 |>\022\224\205\276\3372\277\276\354\354\036\277&\217\021>\2501\265>\245\360\207?\356\221\271?\240\356S>\362&\006?\375\202\306>P\026\350<!u\026>~\372^\277\220\3007\277\203\344M\277\372XI\277\277\'\310\276x\rJ\277\360*\310\275\001S\250>\005O\315\276@\013$\277\351;\251\276\312\353\354>\305\230\200?\364\271\233\276\272\277\232\277E\016\003\300\007\035~\277Ni[\277VhI\277q\304q?\304\262\327>\216\220\261>\274|\301\276Gj\211\277\026\230\312\276\240\323,?c\342\345>\212+\'\276k/$\277\262\216\310\277\344y=\276=\356\205\276\212\243\201\277\263Q=\277\n\234\326\276\232%i\277\"\300\001\277\351\271S?O\341\320>\376zT>\360p\000\276\013\242Q?\020\207\335?\354\362\364?F}s?\354\315\223?\246\207\277?l\365\252?\016\t\224?\302]\253?\342\222\004?\001S\023?\360|\360?\030\200D?\231u\272>\2424\215>x\000\001\277\226\2253\2766\215K\276\nmj\277\000j\343\274\246\235\344\276\310\276@?\242{\344?lX\352?\2102\230?B\370)\300\356\224\007\3006\'o\277\021\365q\277\214\003\031\277B\256\010\277\320\351\224>\000\214\200= 5\327=\014\337\362=\214b[\275UH\305\275|6C\276\317:~\2770v1\277\260=\227\277B\255\345\276\332\356\227>;\214>\276\366\215\216\276\316k3\277\232\030\312\276\320\022\323\276b\354\300=D\336\010\277ZQ\247>\342\016\003?\316?\304\276\365)\243\277\361\237\243\277d%\370\277\234s\215\276_\217\356\277V\363\036\300\202\r\037\300\232m#\300\n65\300\252#\025\300\315\352\313\277\026\347\025\277\026\355\236\276Y\020\246\276\351\273\226>~L\'?\000\027V\275\177\273V? &\213=\201_*\277\343\364\272?s\253\336?m\215\211?\327\323\261?\306\323\366?O\240\220?\032\264q?0\215\261>\205M\202?=\326\352>H@o=\370\023\230>\266WR\2772\333\255\277\350\237=\277(B\267\275\252\377\263\276\312*\226?\227\2352?H\n\254>w\265\215>{\367I\276l\334\027\275*h\256\276X@\256\277\254\357\254\277\320vv\277\362\334\371\276\377\263\332\276\260\377\266=\252\272\007\276M\202\276\2773en\277tfV>YZ\302?\210\336\274>\366j\307=\362\275\266=\022\261\372>\314y\034\277\361\270\206\276\253S;>G\361\316?@\307\331=/\205\027>\000\354\372\274\270\0276>\021&1\277\240\000\202\277\271c\202\277H\376j\277r\256\325\277E\033\323\277,\347\337\277\250\024e\276\352K\232\276 @\360\274\224*\357=\374n\356\275p\004,\275q\210\351\276\000\355\322;\314\374\006?\n\361)?\001(\212?\223\245\233?\244f\035\276C\367\035?\3144\255\276nZ\377\276v;\002>\310\352\307>\020\001\334\276\360\326\215<\244\325\036\277|x1\276\330\267\207\276\2520\277\276\3462\345=\232\226\351\276\313>\236\277\036\212\206\2770\356\357\2778d\353\277\0269\267\277P\031 \277\234\326\220>:\266\343>\272$\024\276\276\3660>\276\341\364\276\314\375%>\000r8:et\303\275\346\000#\276\362G\251>\325\327\200?J\013\010?\260\336\326>S\357V\276\254\277\337>6\001U>\233\036\376>\n\022\210?\034zv>T\033S=\354\376\272\275upO\275\324\352\337\276\214=\302\276\"\232\331\276\021v\306\276t\026\\\276a\212p>u\235A?b\033\303>\220\'\"?N\006\202>\362I\345>n\304\'?\371)\367\275\"*\247\275~~\212?\\\367\344>\346p:?\363F&?$hj?\210\277\306?\227R\221?n\260&?\032\334\363>\036!|?\326\035\316?>}\274?\244;\016?j\r\024?\275(\014?\275\242\237?]\177\201?\224p\214?B\260\230?\205\031\200?L\010 ?T\250\262>\035g\016?h-\300>\340\235D?\346\266M?z\373\025?CX<?\257\265*>O\222+\2761\334b\277\336\3106?\340\273\244\275\330\370C?*\316\210\276\024\264\330\2754]\032\277\304\304\333\275 \"\326\276\030\033\010\275\307rE\277@S\263\276\320{5\277\270\205\250=\304\215\266\275\306\022\266>\330\316\224?\355\224\266?L\236\227?\326\0161?\261\353J?Z\247d>p\2515=\222\377\016?i^\225>\244\226s?\264%E\276\033\217\211>D\233f> \347\210<\034!\211?\257\313v?t\321\253=cC\203\276\"\262\261\276\0279n?\352w\306? \213\'@\027V\311?\230\251\267?.\234\225\276\332\376\204\277rW\306\276\231\013G\2774\214\222\276\272\370+?\3008\273>\002\227i>\363\004\221>^\265:?\236\264Y>\237)\025?x\210\227\276\330\273\r?2n\371>HV\246\276\006\363R\276\024\364\235\277\255=\210\277\264\353Z\277[\226f\277\254\303\262\275\036^!?\254\2428?\244g\265\275&n\032\276.sW?\30023<\241C\302=\271\177\274\276\246\027\023\277\226\014>\276t\300\357\276\n\203\034\277&\014\320\276V\302\350\276\274~3\277\274&\206?H\344\237?\372\017\334?\004V~?\014\202\355?\\\t\266?.\352\345?\030xf?\306\356\265?U^\037?2q\032>\220\026{\277\367<\205\277\020\022Y\276dfd=\331?\236\275\300oh>\342x\026\277*)V\277\354S\240=\r\220\224?<B\001@\323\030l?\026\340\255?\260\304\340>\374\350\324\276R[\004\277\2711\217\277\213\221\261\277\356\265.\277X\325\265\277\020\226a>\200\311\004\274\336?\205\275\320\214\347\275\312M\257\277\243u\346\276\360\350e\277C\2712\277@\373\227\275h@\224>\177\262\032?\177\023\223?D\203P?\304\246\224?(\236\334?S\323\007@\203\354\340?\251\240\364?\334h\277?[\024\272?\216\021\213?\025l\230?\356\017M?H\374Y>\2106\216>@\300i?\354\306`\276\232\245%\277\261b\"\277\260\344\222\277\322?\010\300a\224\240\277gs\207\277(*p\277\341\263J\277\232\331\324>\372\310\247>$\230\335\276\027J\271>\224\004\213=\030R-=\"\347$\276D3\204=J\242\256\276q\335\236>\224Q ?\224\264m>d8.\2776lT\277\'a>\277\234\346\026>\272\354\261\276 OM?\353\241\310\2760\321n\275NN\227>p\177\364\274I\347\242\275\023c%?Ne~>\006\325\013\276\370\271Z\277x\346\247\277k^o\277\n1\204\277\310\005t\277m\267|\277\334\227\302\276\357)C\276r\345\271>uQ\021?\3008\235\274\3415\030?\312:\027>\262\204\235\2764\3578\277\360 \360\276h\t]\275\253=\262\276\374\330j\276fj\242\275\036\225\365>\240\315\270<\2322b\277\320\223{\275n{\237\2756U\245>\225T\034?\025^\366\276,\335D\276\340:z\274\203\271\235\277W0\343\277\325\370\233\277\014\252\033\277:\255u\277\031\307[\277\033\232\207\277\251\374<\277\251\375\224\277<\312\241\277\311\337\022\277APT\277R\371\005\300\224\353#\300\354\335&\277\024\226\340\275\311v\342>\356\214<?\326\016\213?N\221\310>\276\314-?\226S(>(B\306>\301S.?\362\262\361>\256\216.\277\272B\243\277\224o\303\277N\227C\277\373\362\266\277\332h\307\277D\322\017\300\000\005\034\300\246\022\317\276b=.\277\274\210z\276\000\320&<4\371J\276\027t:\277>\034\236\276\332\002\350\275MX\367\276$\221\332=\\\327`\276J6T?\2647\203\275g\016\017?8\n\026>\032;3?\025\344K?\000\010`?Z\353I?H\303k?:[\220>\270\277F?o\006\301>\235\322\005\277\026\370\224\277\014\346\223\277+\211\262\277\241c\275\277\343\022\252\277\200\222\257\277\222\205\236\277G\037\210\277:\341\253\277\034\215\030\277\264\375q>\333\026t\276I\256,\277\241\322\003\277\013\305`\277\217\\o\276\331\331\304\276\210. \277Z\t\263\277h\307\306\275\341\233>\277\232\017&?\326\000(>\004\r\257>(\264\243>\210I\241?\224\326.>\252\322\213\275\350\315\016?\276L\301>o,\023?\3663\206?\305\262D?\355\323\030?\013\315\275>\253=O>qn)\2774.^\277\352\343H\277\"\005\274\2776\347\320\277@\\\275\277\344\200\001\277w\327\360\276\2407\226\277\014\301\265\277\321\252z\277\256\tk\277\3216#\276;N#\277\310\303\023>\215t\027?4\272D\276\2200\244>I#\206?\362O~\277YC\030\300\360\007\003\300\320\315\372\277\362.\275\277n4\366\277\007\020\230\277\250\337\201\277\204\270\354\276\'l\261\276\212\0275\277{\305\276\276\202\246-?L\244\214>\332\277p\276\204s\006\276\205\243\265\276p\272\206>\223\235\034\276\2734\021\277\246\243\231>P!\355\275\004d\224>H$\225<\206|\246\276\336$\026\277\356\006,\276l\353\317\277\356\364\326\277G\037\232\277$\030\016\276\226&\255\276u~.\276\025V\017\277T;0\277\201;7\277\0000r:~7\251\276\370T\361=\010K\201>\234<\271>\223C\263?\337\301e?\200\251$<\265\016\263=\200\264\202>B\\\231>w\201\202\276@# \277\314\027\330>,1#>\334\247$?\2733\213?L\365G?qy\204?\244&A>*>\007?\343\227\017?\202@y?\214\004\233?\244[\010?n\242[?\272\346\215?\270t\267?\220\0029?\344\037]?\271\316H?4=b?wbp?\307\205L?\0138m?\'v\223?P\007\307?\034\212K>t\027$\276\200q\251?\224\026\330>\334M\265=\177\240\256\276Tn\254>j\366\211>Wz\006?Tbz?\305\266\234?\372\372\311?\236\256\235?3\302\227?.\371\037>\276Z\200>\362D\355?|\"\202?T4v>\245\315\232\277AHm\277D88\277\262\266?\277A\3013\277.\360\203\2775cD\277\310\r\022\276\374\375q\276\246\331\032>\240~\021\277|\004\216\276\373]\364\276\256])\276UG\\\277\375\033X\277cs\232\277\373td\277.\007\332\276\370V\232\275n:\245\276\266\262\262\276@\333\324\276\254\270\345>\266\342\305?j^\013@]p\301?\306\013\370>\375 !?0\277X?x;q?0\220\302\276H\235\371>\202\252\r?l1\253>\330k\"?\020p\217?\372[G?-\221e?_\256\205?\315\343\215?\3234w?\323o\317?\225t\204?F\222\221?\n>\272?\352\255\305>\234\315\303=\021\244K\277V\241\213\2778A\253\277\3244\216\277\220\344\262\276\016\343:\277\"\241\t\277\320\2656\2763\315@?\324\373\225>o\226\263?\344Z\202?Hx\212?\\`\301?\312/\320?\242e\321?\020}\226?\256=s?l4\327><\242{\276\255A\201\276Z\226\037?\000\322\307<|>7>o\256\014\277\214Qj\276\006+\311\276:2\r?5\303\205?\200\212\017?(\354\n\276V\271:>\364}L?\255`\202?\373\007D?a2\016@Km\205?p\341\031=.\024\017\276t\330\226\276q\033\016\277$\272-\277\300\370\355=di\373\275\365\277N\277\305\317q\2769\007d\277k\'\000\277@\220\224\276x\254\310>\250\030\306>\240c\r<:\3159\276\307\3751\277\226-u\277\202\024\002\300@:\031\275@\227-=V+\221\276\374\233\257\276\330;\273\276\302\223\t>n\302Y?N\343\320>PY\374>XLR?\310mz?\270fN?\030\253\371\275\273\246<\277b\357\264\2763\273>\277\\T\010>\372\301\017\275\272\207\366=\270\314P\276\247\304\354\276@g\250=(r\266\275\000\002\330\276R^&\277\361\257|\277\200a\340;\253l\231\275\260{B>\351\027(>>\022J\276H\303\251\276\300\030\267\276\020\336\225=\27397?\365|\237>\340\341\022\277\355Rv?\334\265\356?S\223\370?\001i\322?\316\000\212?\237\360\362>\030]\234?\305\361\220?\242R\223?8IZ?\243\2469?\300\323\245=\242~l>\006\356z\277:\001\261\277B\222i\277\243l\202\277\315y\335\277,-u\2775\322%\277-\024\230\276.\367[\277\252\021\206\276\330<\032\277\3105\244<D\020A?\360a+=\307\n#>\215F\346\276\210\276\342\276\330\250(\275\201\321%\276\214\'M\277iP\303\276\354\336\246\276\003\035\217\276\231\253\270>\256\210\366=\313\271\212\276\246\307\217\276\227\234o\277`1[\277\333\024\227\277G\334@\277\364\252\250\2765\000\336\276\244\262\265=\021\372E\276\272pj?\020\336\215?\242/\266?\356G\200?\215\310\273?5\353\331?\314\321c?c\261C?\002\222/?\243l\211?\200\036\'\274\360\326\316>\024\276\003\277!\327o\277h/\321\275pPD?\210\275i?\247\021\'?Y\277u?\010\016\273>\256\022%\276=\021\253>\325\307s?\204K\307\276\330\301@?:\353\203>\030/\241>t\334\247>\016\374\306?\026\256\314?\330\257\306?Wv\241?\355n\234?\342\330\237?T\374\321?\252\216\006@`\227.@\250\263-@\214\350J@]5\332?\024H\232??t\253?\020\017r?X\016\327?\252\236\335?\341\302\353?\322\005\334?\256\037\307?\313\334L\277\307X\261\276P\255O\275\334\r\022\277\000!+<\350\235V\275]\271^\277\234\240@\277\000\220y;\210w[>\000\325\213?\023\330\222?<\"\350?&l|?aD\263?\364\032\312?\362\215\357?N$,@^\341E@e\2221?\004y4?\226\262\205?\312\\\361?\333\240\261?\272;V\277L\337R\277\224(_\277\222\206\r\277\317\0307?j=\217?k_\203?\370\214\034?k\006\004?o\004\271\276l\322\267=\214l\022\277\200\001\374;\260\227c?\322\"\222>\214\014\333>\254\217\324\275%`\211\277\022\301\217\277\240\221\326\277\222\007\303\277>S\242\2768\'\202>\374\022\\="
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/tensors/normalize_tensors/component_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
              dim {
                size: 800
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/TensorSliceDataset"
      op: "TensorSliceDataset"
      input: "OptimizeDataset/tensors/normalize_tensors/component_0:output:0"
      input: "OptimizeDataset/tensors/normalize_tensors/component_1:output:0"
      input: "OptimizeDataset/tensors/normalize_tensors/component_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_DOUBLE
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 24
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 24
              }
              dim {
                size: 1
              }
            }
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/filename"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ""
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/CacheDataset"
      op: "CacheDataset"
      input: "OptimizeDataset/TensorSliceDataset:handle:0"
      input: "OptimizeDataset/filename:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 24
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 24
              }
              dim {
                size: 1
              }
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_DOUBLE
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/buffer_size"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 500
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/seed"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/seed2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/ShuffleDataset"
      op: "ShuffleDataset"
      input: "OptimizeDataset/CacheDataset:handle:0"
      input: "OptimizeDataset/buffer_size:output:0"
      input: "OptimizeDataset/seed:output:0"
      input: "OptimizeDataset/seed2:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 24
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 24
              }
              dim {
                size: 1
              }
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_DOUBLE
          }
        }
      }
      attr {
        key: "reshuffle_each_iteration"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptimizeDataset/batch_size"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 4
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/drop_remainder"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
            }
            bool_val: true
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/BatchDatasetV2"
      op: "BatchDatasetV2"
      input: "OptimizeDataset/ShuffleDataset:handle:0"
      input: "OptimizeDataset/batch_size:output:0"
      input: "OptimizeDataset/drop_remainder:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
              dim {
                size: 24
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 4
              }
              dim {
                size: 24
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_DOUBLE
          }
        }
      }
      attr {
        key: "parallel_copy"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptimizeDataset"
      op: "OptimizeDataset"
      input: "OptimizeDataset/BatchDatasetV2:handle:0"
      input: "optimizations:output:0"
      attr {
        key: "optimization_configs"
        value {
          list {
            s: "map_vectorization:use_choose_fastest:false"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
              dim {
                size: 24
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 4
              }
              dim {
                size: 24
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_DOUBLE
          }
        }
      }
    }
    node_def {
      name: "ModelDataset"
      op: "ModelDataset"
      input: "OptimizeDataset:handle:0"
      attr {
        key: "cpu_budget"
        value {
          i: 0
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
              dim {
                size: 24
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 4
              }
              dim {
                size: 24
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_DOUBLE
          }
        }
      }
    }
    ret {
      key: "modeldataset"
      value: "ModelDataset:handle:0"
    }
    attr {
      key: "_disable_call_shape_inference"
      value {
        b: true
      }
    }
  }
}
versions {
  producer: 38
  min_consumer: 12
}
